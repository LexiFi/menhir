State 0:
## Known stack suffix:
##
## LR(1) items:
parse_problem' -> . parse_problem [ # ]
## Transitions:
-- On UNIV shift to state 1
-- On universe shift to state 15
-- On parse_problem shift to state 318
## Reductions:

State 1:
## Known stack suffix:
## UNIV
## LR(1) items:
universe -> UNIV . COLON LBRACE list(urelements) RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV . COLON LBRACE list(urelements) RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On COLON shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## UNIV COLON
## LR(1) items:
universe -> UNIV COLON . LBRACE list(urelements) RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON . LBRACE list(urelements) RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On LBRACE shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## UNIV COLON LBRACE
## LR(1) items:
universe -> UNIV COLON LBRACE . list(urelements) RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON LBRACE . list(urelements) RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On PLAIN_ID shift to state 4
-- On NUMBER shift to state 5
-- On IDX_ID shift to state 6
-- On urelements shift to state 9
-- On list(urelements) shift to state 12
-- On interval shift to state 11
## Reductions:
-- On RBRACE
--   reduce production list(urelements) ->

State 4:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
urelements -> PLAIN_ID . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production urelements -> PLAIN_ID

State 5:
## Known stack suffix:
## NUMBER
## LR(1) items:
urelements -> NUMBER . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production urelements -> NUMBER

State 6:
## Known stack suffix:
## IDX_ID
## LR(1) items:
interval -> IDX_ID . DOTDOT IDX_ID [ RBRACE PLAIN_ID NUMBER IDX_ID ]
urelements -> IDX_ID . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
-- On DOTDOT shift to state 7
## Reductions:
-- On RBRACE PLAIN_ID NUMBER IDX_ID
--   reduce production urelements -> IDX_ID

State 7:
## Known stack suffix:
## IDX_ID DOTDOT
## LR(1) items:
interval -> IDX_ID DOTDOT . IDX_ID [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On IDX_ID shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## IDX_ID DOTDOT IDX_ID
## LR(1) items:
interval -> IDX_ID DOTDOT IDX_ID . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interval -> IDX_ID DOTDOT IDX_ID

State 9:
## Known stack suffix:
## urelements
## LR(1) items:
list(urelements) -> urelements . list(urelements) [ RBRACE ]
## Transitions:
-- On PLAIN_ID shift to state 4
-- On NUMBER shift to state 5
-- On IDX_ID shift to state 6
-- On urelements shift to state 9
-- On list(urelements) shift to state 10
-- On interval shift to state 11
## Reductions:
-- On RBRACE
--   reduce production list(urelements) ->

State 10:
## Known stack suffix:
## urelements list(urelements)
## LR(1) items:
list(urelements) -> urelements list(urelements) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(urelements) -> urelements list(urelements)

State 11:
## Known stack suffix:
## interval
## LR(1) items:
urelements -> interval . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production urelements -> interval

State 12:
## Known stack suffix:
## UNIV COLON LBRACE list(urelements)
## LR(1) items:
universe -> UNIV COLON LBRACE list(urelements) . RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON LBRACE list(urelements) . RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On RBRACE shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## UNIV COLON LBRACE list(urelements) RBRACE
## LR(1) items:
universe -> UNIV COLON LBRACE list(urelements) RBRACE . [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON LBRACE list(urelements) RBRACE . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 14
## Reductions:
-- On VAR SYM RUN INVARIANT INST CONST
--   reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE

State 14:
## Known stack suffix:
## UNIV COLON LBRACE list(urelements) RBRACE SEMI
## LR(1) items:
universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI

State 15:
## Known stack suffix:
## universe
## LR(1) items:
parse_problem -> universe . list(declaration) nonempty_list(paragraph) EOF [ # ]
## Transitions:
-- On VAR shift to state 16
-- On CONST shift to state 63
-- On list(declaration) shift to state 71
-- On declaration shift to state 316
## Reductions:
-- On SYM RUN INVARIANT INST
--   reduce production list(declaration) ->

State 16:
## Known stack suffix:
## VAR
## LR(1) items:
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On PLAIN_ID shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## VAR PLAIN_ID
## LR(1) items:
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On COLON_ARITY shift to state 18
-- On COLON shift to state 19
-- On colon_w_or_wo_arity shift to state 20
## Reductions:

State 18:
## Known stack suffix:
## COLON_ARITY
## LR(1) items:
colon_w_or_wo_arity -> COLON_ARITY . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production colon_w_or_wo_arity -> COLON_ARITY

State 19:
## Known stack suffix:
## COLON
## LR(1) items:
colon_w_or_wo_arity -> COLON . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production colon_w_or_wo_arity -> COLON

State 20:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 51
## Reductions:

State 21:
## Known stack suffix:
## UNIV
## LR(1) items:
bound -> UNIV . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bound -> UNIV

State 22:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
bound -> PLAIN_ID . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bound -> PLAIN_ID

State 23:
## Known stack suffix:
## LPAREN
## LR(1) items:
bound -> LPAREN . bound RPAREN [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 41
## Reductions:

State 24:
## Known stack suffix:
## LBRACE
## LR(1) items:
bound -> LBRACE . list(element) RBRACE [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On LPAREN shift to state 27
-- On IDX_ID shift to state 33
-- On tuple shift to state 34
-- On list(element) shift to state 35
-- On interval shift to state 37
-- On element shift to state 38
-- On atom shift to state 40
## Reductions:
-- On RBRACE
--   reduce production list(element) ->

State 25:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
atom -> PLAIN_ID . [ RPAREN RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> PLAIN_ID

State 26:
## Known stack suffix:
## NUMBER
## LR(1) items:
atom -> NUMBER . [ RPAREN RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> NUMBER

State 27:
## Known stack suffix:
## LPAREN
## LR(1) items:
tuple -> LPAREN . nonempty_list(atom) RPAREN [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On IDX_ID shift to state 28
-- On nonempty_list(atom) shift to state 29
-- On atom shift to state 31
## Reductions:

State 28:
## Known stack suffix:
## IDX_ID
## LR(1) items:
atom -> IDX_ID . [ RPAREN PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> IDX_ID

State 29:
## Known stack suffix:
## LPAREN nonempty_list(atom)
## LR(1) items:
tuple -> LPAREN nonempty_list(atom) . RPAREN [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On RPAREN shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## LPAREN nonempty_list(atom) RPAREN
## LR(1) items:
tuple -> LPAREN nonempty_list(atom) RPAREN . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tuple -> LPAREN nonempty_list(atom) RPAREN

State 31:
## Known stack suffix:
## atom
## LR(1) items:
nonempty_list(atom) -> atom . [ RPAREN ]
nonempty_list(atom) -> atom . nonempty_list(atom) [ RPAREN ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On IDX_ID shift to state 28
-- On nonempty_list(atom) shift to state 32
-- On atom shift to state 31
## Reductions:
-- On RPAREN
--   reduce production nonempty_list(atom) -> atom

State 32:
## Known stack suffix:
## atom nonempty_list(atom)
## LR(1) items:
nonempty_list(atom) -> atom nonempty_list(atom) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(atom) -> atom nonempty_list(atom)

State 33:
## Known stack suffix:
## IDX_ID
## LR(1) items:
atom -> IDX_ID . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
interval -> IDX_ID . DOTDOT IDX_ID [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On DOTDOT shift to state 7
## Reductions:
-- On RBRACE PLAIN_ID NUMBER LPAREN IDX_ID
--   reduce production atom -> IDX_ID

State 34:
## Known stack suffix:
## tuple
## LR(1) items:
element -> tuple . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element -> tuple

State 35:
## Known stack suffix:
## LBRACE list(element)
## LR(1) items:
bound -> LBRACE list(element) . RBRACE [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On RBRACE shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LBRACE list(element) RBRACE
## LR(1) items:
bound -> LBRACE list(element) RBRACE . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bound -> LBRACE list(element) RBRACE

State 37:
## Known stack suffix:
## interval
## LR(1) items:
element -> interval . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element -> interval

State 38:
## Known stack suffix:
## element
## LR(1) items:
list(element) -> element . list(element) [ RBRACE ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On LPAREN shift to state 27
-- On IDX_ID shift to state 33
-- On tuple shift to state 34
-- On list(element) shift to state 39
-- On interval shift to state 37
-- On element shift to state 38
-- On atom shift to state 40
## Reductions:
-- On RBRACE
--   reduce production list(element) ->

State 39:
## Known stack suffix:
## element list(element)
## LR(1) items:
list(element) -> element list(element) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(element) -> element list(element)

State 40:
## Known stack suffix:
## atom
## LR(1) items:
element -> atom . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element -> atom

State 41:
## Known stack suffix:
## LPAREN bound
## LR(1) items:
bound -> LPAREN bound . RPAREN [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . ARROW option(boundmult) bound [ RPAREN PLUS ARROW ]
bound -> bound . PLUS bound [ RPAREN PLUS ARROW ]
## Transitions:
-- On RPAREN shift to state 42
-- On PLUS shift to state 43
-- On ARROW shift to state 45
## Reductions:

State 42:
## Known stack suffix:
## LPAREN bound RPAREN
## LR(1) items:
bound -> LPAREN bound RPAREN . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bound -> LPAREN bound RPAREN

State 43:
## Known stack suffix:
## bound PLUS
## LR(1) items:
bound -> bound PLUS . bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## bound PLUS bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound PLUS bound . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On ARROW shift to state 45
## Reductions:
-- On VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST
--   reduce production bound -> bound PLUS bound

State 45:
## Known stack suffix:
## bound ARROW
## LR(1) items:
bound -> bound ARROW . option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On option(boundmult) shift to state 48
-- On boundmult shift to state 50
## Reductions:
-- On UNIV PLAIN_ID LPAREN LBRACE
--   reduce production option(boundmult) ->

State 46:
## Known stack suffix:
## ONE
## LR(1) items:
boundmult -> ONE . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boundmult -> ONE

State 47:
## Known stack suffix:
## LONE
## LR(1) items:
boundmult -> LONE . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boundmult -> LONE

State 48:
## Known stack suffix:
## bound ARROW option(boundmult)
## LR(1) items:
bound -> bound ARROW option(boundmult) . bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## bound ARROW option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound ARROW option(boundmult) bound . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bound -> bound ARROW option(boundmult) bound

State 50:
## Known stack suffix:
## boundmult
## LR(1) items:
option(boundmult) -> boundmult . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(boundmult) -> boundmult

State 51:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV THEN SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On THEN shift to state 52
-- On PLUS shift to state 43
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On ARROW shift to state 45
-- On option(next_scope) shift to state 56
-- On option(boundmult) shift to state 58
-- On next_scope shift to state 62
-- On boundmult shift to state 50
## Reductions:
-- On UNIV PLAIN_ID LPAREN LBRACE
--   reduce production option(boundmult) ->
-- On VAR SYM SEMI RUN INVARIANT INST CONST
--   reduce production option(next_scope) ->

State 52:
## Known stack suffix:
## THEN
## LR(1) items:
next_scope -> THEN . bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
next_scope -> THEN . bound option(boundmult) bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## THEN bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
next_scope -> THEN bound . [ VAR SYM SEMI RUN INVARIANT INST CONST ]
next_scope -> THEN bound . option(boundmult) bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On PLUS shift to state 43
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On ARROW shift to state 45
-- On option(boundmult) shift to state 54
-- On boundmult shift to state 50
## Reductions:
-- On VAR SYM SEMI RUN INVARIANT INST CONST
--   reduce production next_scope -> THEN bound
-- On UNIV PLAIN_ID LPAREN LBRACE
--   reduce production option(boundmult) ->

State 54:
## Known stack suffix:
## THEN bound option(boundmult)
## LR(1) items:
next_scope -> THEN bound option(boundmult) . bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## THEN bound option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
next_scope -> THEN bound option(boundmult) bound . [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On PLUS shift to state 43
-- On ARROW shift to state 45
## Reductions:
-- On VAR SYM SEMI RUN INVARIANT INST CONST
--   reduce production next_scope -> THEN bound option(boundmult) bound

State 56:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 57
## Reductions:
-- On VAR SYM RUN INVARIANT INST CONST
--   reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)

State 57:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI

State 58:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult)
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR THEN SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR THEN SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On THEN shift to state 52
-- On PLUS shift to state 43
-- On ARROW shift to state 45
-- On option(next_scope) shift to state 60
-- On next_scope shift to state 62
## Reductions:
-- On VAR SYM SEMI RUN INVARIANT INST CONST
--   reduce production option(next_scope) ->

State 60:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 61
## Reductions:
-- On VAR SYM RUN INVARIANT INST CONST
--   reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)

State 61:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI

State 62:
## Known stack suffix:
## next_scope
## LR(1) items:
option(next_scope) -> next_scope . [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(next_scope) -> next_scope

State 63:
## Known stack suffix:
## CONST
## LR(1) items:
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On PLAIN_ID shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## CONST PLAIN_ID
## LR(1) items:
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On COLON_ARITY shift to state 18
-- On COLON shift to state 19
-- On colon_w_or_wo_arity shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 67
-- On PLUS shift to state 43
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On ARROW shift to state 45
-- On option(boundmult) shift to state 68
-- On boundmult shift to state 50
## Reductions:
-- On VAR SYM RUN INVARIANT INST CONST
--   reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound
-- On UNIV PLAIN_ID LPAREN LBRACE
--   reduce production option(boundmult) ->

State 67:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound SEMI
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI

State 68:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult)
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 70
-- On PLUS shift to state 43
-- On ARROW shift to state 45
## Reductions:
-- On VAR SYM RUN INVARIANT INST CONST
--   reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound

State 70:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI

State 71:
## Known stack suffix:
## universe list(declaration)
## LR(1) items:
parse_problem -> universe list(declaration) . nonempty_list(paragraph) EOF [ # ]
## Transitions:
-- On SYM shift to state 72
-- On RUN shift to state 89
-- On INVARIANT shift to state 296
-- On INST shift to state 298
-- On syms shift to state 310
-- On paragraph shift to state 311
-- On nonempty_list(paragraph) shift to state 314
-- On insts shift to state 313
## Reductions:

State 72:
## Known stack suffix:
## SYM
## LR(1) items:
syms -> SYM . nonempty_list(bracketed_symmetry) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On LBRACKET shift to state 73
-- On nonempty_list(bracketed_symmetry) shift to state 86
-- On bracketed_symmetry shift to state 87
## Reductions:

State 73:
## Known stack suffix:
## LBRACKET
## LR(1) items:
bracketed_symmetry -> LBRACKET . symmetry RBRACKET option(SEMI) [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
-- On LPAREN shift to state 74
-- On symmetry shift to state 77
-- On sym_element shift to state 81
-- On nonempty_list(sym_element) shift to state 83
## Reductions:

State 74:
## Known stack suffix:
## LPAREN
## LR(1) items:
sym_element -> LPAREN . nonempty_list(atom) RPAREN [ RBRACKET LTE LPAREN ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On IDX_ID shift to state 28
-- On nonempty_list(atom) shift to state 75
-- On atom shift to state 31
## Reductions:

State 75:
## Known stack suffix:
## LPAREN nonempty_list(atom)
## LR(1) items:
sym_element -> LPAREN nonempty_list(atom) . RPAREN [ RBRACKET LTE LPAREN ]
## Transitions:
-- On RPAREN shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## LPAREN nonempty_list(atom) RPAREN
## LR(1) items:
sym_element -> LPAREN nonempty_list(atom) RPAREN . [ RBRACKET LTE LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym_element -> LPAREN nonempty_list(atom) RPAREN

State 77:
## Known stack suffix:
## LBRACKET symmetry
## LR(1) items:
bracketed_symmetry -> LBRACKET symmetry . RBRACKET option(SEMI) [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
-- On RBRACKET shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## LBRACKET symmetry RBRACKET
## LR(1) items:
bracketed_symmetry -> LBRACKET symmetry RBRACKET . option(SEMI) [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
-- On SEMI shift to state 79
-- On option(SEMI) shift to state 80
## Reductions:
-- On SYM RUN LBRACKET INVARIANT INST EOF
--   reduce production option(SEMI) ->

State 79:
## Known stack suffix:
## SEMI
## LR(1) items:
option(SEMI) -> SEMI . [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(SEMI) -> SEMI

State 80:
## Known stack suffix:
## LBRACKET symmetry RBRACKET option(SEMI)
## LR(1) items:
bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI) . [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI)

State 81:
## Known stack suffix:
## sym_element
## LR(1) items:
nonempty_list(sym_element) -> sym_element . [ RBRACKET LTE ]
nonempty_list(sym_element) -> sym_element . nonempty_list(sym_element) [ RBRACKET LTE ]
## Transitions:
-- On LPAREN shift to state 74
-- On sym_element shift to state 81
-- On nonempty_list(sym_element) shift to state 82
## Reductions:
-- On RBRACKET LTE
--   reduce production nonempty_list(sym_element) -> sym_element

State 82:
## Known stack suffix:
## sym_element nonempty_list(sym_element)
## LR(1) items:
nonempty_list(sym_element) -> sym_element nonempty_list(sym_element) . [ RBRACKET LTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(sym_element) -> sym_element nonempty_list(sym_element)

State 83:
## Known stack suffix:
## nonempty_list(sym_element)
## LR(1) items:
symmetry -> nonempty_list(sym_element) . LTE nonempty_list(sym_element) [ RBRACKET ]
## Transitions:
-- On LTE shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## nonempty_list(sym_element) LTE
## LR(1) items:
symmetry -> nonempty_list(sym_element) LTE . nonempty_list(sym_element) [ RBRACKET ]
## Transitions:
-- On LPAREN shift to state 74
-- On sym_element shift to state 81
-- On nonempty_list(sym_element) shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## nonempty_list(sym_element) LTE nonempty_list(sym_element)
## LR(1) items:
symmetry -> nonempty_list(sym_element) LTE nonempty_list(sym_element) . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symmetry -> nonempty_list(sym_element) LTE nonempty_list(sym_element)

State 86:
## Known stack suffix:
## SYM nonempty_list(bracketed_symmetry)
## LR(1) items:
syms -> SYM nonempty_list(bracketed_symmetry) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production syms -> SYM nonempty_list(bracketed_symmetry)

State 87:
## Known stack suffix:
## bracketed_symmetry
## LR(1) items:
nonempty_list(bracketed_symmetry) -> bracketed_symmetry . [ SYM RUN INVARIANT INST EOF ]
nonempty_list(bracketed_symmetry) -> bracketed_symmetry . nonempty_list(bracketed_symmetry) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On LBRACKET shift to state 73
-- On nonempty_list(bracketed_symmetry) shift to state 88
-- On bracketed_symmetry shift to state 87
## Reductions:
-- On SYM RUN INVARIANT INST EOF
--   reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry

State 88:
## Known stack suffix:
## bracketed_symmetry nonempty_list(bracketed_symmetry)
## LR(1) items:
nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry)

State 89:
## Known stack suffix:
## RUN
## LR(1) items:
paragraph -> RUN . nonempty_list(formula_semi) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On nonempty_list(formula_semi) shift to state 293
-- On iexpr shift to state 139
-- On formula_semi shift to state 294
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:

State 90:
## Known stack suffix:
## UNIV
## LR(1) items:
expr -> UNIV . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> UNIV

State 91:
## Known stack suffix:
## TRUE
## LR(1) items:
formula -> TRUE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> TRUE

State 92:
## Known stack suffix:
## TILDE
## LR(1) items:
expr -> TILDE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 292
## Reductions:

State 93:
## Known stack suffix:
## SUB
## LR(1) items:
iexpr -> SUB . LBRACKET iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACKET shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## SUB LBRACKET
## LR(1) items:
iexpr -> SUB LBRACKET . iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 288
## Reductions:

State 95:
## Known stack suffix:
## NUMBER
## LR(1) items:
iexpr -> NUMBER . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iexpr -> NUMBER

State 96:
## Known stack suffix:
## NEG
## LR(1) items:
iexpr -> NEG . LBRACKET iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACKET shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## NEG LBRACKET
## LR(1) items:
iexpr -> NEG LBRACKET . iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 286
## Reductions:

State 98:
## Known stack suffix:
## LPAREN
## LR(1) items:
iexpr -> LPAREN . iexpr RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 285
## Reductions:

State 99:
## Known stack suffix:
## HASH
## LR(1) items:
iexpr -> HASH . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 284
## Reductions:

State 100:
## Known stack suffix:
## STAR
## LR(1) items:
expr -> STAR . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 283
## Reductions:

State 101:
## Known stack suffix:
## SOMETIME
## LR(1) items:
formula -> SOMETIME . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 282
-- On expr shift to state 151
## Reductions:

State 102:
## Known stack suffix:
## SOME
## LR(1) items:
formula -> SOME . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 275
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 281
## Reductions:

State 103:
## Known stack suffix:
## PREVIOUS
## LR(1) items:
formula -> PREVIOUS . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 274
-- On expr shift to state 151
## Reductions:

State 104:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
expr -> PLAIN_ID . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> PLAIN_ID

State 105:
## Known stack suffix:
## ONE
## LR(1) items:
formula -> ONE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 267
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 273
## Reductions:

State 106:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
expr -> PLAIN_ID . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . [ COLON ]
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . COMMA separated_nonempty_list(COMMA,plain_id) [ COLON ]
## Transitions:
-- On COMMA shift to state 107
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD
--   reduce production expr -> PLAIN_ID
-- On COLON
--   reduce production separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID

State 107:
## Known stack suffix:
## PLAIN_ID COMMA
## LR(1) items:
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID COMMA . separated_nonempty_list(COMMA,plain_id) [ COLON ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On separated_nonempty_list(COMMA,plain_id) shift to state 109
## Reductions:

State 108:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . [ COLON ]
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . COMMA separated_nonempty_list(COMMA,plain_id) [ COLON ]
## Transitions:
-- On COMMA shift to state 107
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID

State 109:
## Known stack suffix:
## PLAIN_ID COMMA separated_nonempty_list(COMMA,plain_id)
## LR(1) items:
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID COMMA separated_nonempty_list(COMMA,plain_id) . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID COMMA separated_nonempty_list(COMMA,plain_id)

State 110:
## Known stack suffix:
## ONCE
## LR(1) items:
formula -> ONCE . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 266
-- On expr shift to state 151
## Reductions:

State 111:
## Known stack suffix:
## NOT
## LR(1) items:
formula -> NOT . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 265
-- On expr shift to state 151
## Reductions:

State 112:
## Known stack suffix:
## NONE
## LR(1) items:
expr -> NONE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> NONE

State 113:
## Known stack suffix:
## NO
## LR(1) items:
formula -> NO . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 258
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 264
## Reductions:

State 114:
## Known stack suffix:
## NEXT
## LR(1) items:
formula -> NEXT . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 257
-- On expr shift to state 151
## Reductions:

State 115:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LTE LT LPROJ LBRACKET INTER IN IMPLIES IFF GTE GT EQ ELSE DOT COMMA ARROW AND ]
formula -> LPAREN . formula RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
iexpr -> LPAREN . iexpr RPAREN [ RPAREN NEQ LTE LT GTE GT EQ ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 244
-- On formula shift to state 246
-- On expr shift to state 248
## Reductions:

State 116:
## Known stack suffix:
## LONE
## LR(1) items:
formula -> LONE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 250
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 256
## Reductions:

State 117:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> LPAREN . formula RPAREN [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
iexpr -> LPAREN . iexpr RPAREN [ NEQ LTE LT GTE GT EQ ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 244
-- On formula shift to state 246
-- On expr shift to state 248
## Reductions:

State 118:
## Known stack suffix:
## LET
## LR(1) items:
formula -> LET . separated_nonempty_list(COMMA,let_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LET . separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On PLAIN_ID shift to state 119
-- On separated_nonempty_list(COMMA,let_decl) shift to state 238
## Reductions:

State 119:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID . EQ expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID . EQ expr COMMA separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On EQ shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## PLAIN_ID EQ
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ . expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ . expr COMMA separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 235
## Reductions:

State 121:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> LBRACE . specification RBRACE [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 225
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 227
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 122:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LTE LT LPROJ LBRACKET INTER IN IMPLIES IFF GTE GT EQ ELSE DOT COMMA ARROW AND ]
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LTE LT LPROJ LBRACKET INTER IN IMPLIES IFF GTE GT EQ ELSE DOT COMMA ARROW AND ]
formula -> LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 225
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 227
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 123:
## Known stack suffix:
## IDEN
## LR(1) items:
expr -> IDEN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> IDEN

State 124:
## Known stack suffix:
## HISTORICALLY
## LR(1) items:
formula -> HISTORICALLY . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 224
-- On expr shift to state 151
## Reductions:

State 125:
## Known stack suffix:
## HAT
## LR(1) items:
expr -> HAT . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 223
## Reductions:

State 126:
## Known stack suffix:
## FALSE
## LR(1) items:
formula -> FALSE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> FALSE

State 127:
## Known stack suffix:
## EVENTUALLY
## LR(1) items:
formula -> EVENTUALLY . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 222
-- On expr shift to state 151
## Reductions:

State 128:
## Known stack suffix:
## ALWAYS
## LR(1) items:
formula -> ALWAYS . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 221
-- On expr shift to state 151
## Reductions:

State 129:
## Known stack suffix:
## ALL
## LR(1) items:
formula -> ALL . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ALL . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On DISJ shift to state 130
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 210
## Reductions:

State 130:
## Known stack suffix:
## DISJ
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ . separated_nonempty_list(COMMA,plain_id) COLON expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ . separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On separated_nonempty_list(COMMA,plain_id) shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) . COLON expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) . COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On COLON shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON . expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON . expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 202
## Reductions:

State 133:
## Known stack suffix:
## ADD
## LR(1) items:
iexpr -> ADD . LBRACKET iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACKET shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## ADD LBRACKET
## LR(1) items:
iexpr -> ADD LBRACKET . iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## ADD LBRACKET iexpr
## LR(1) items:
iexpr -> ADD LBRACKET iexpr . COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On COMMA shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## ADD LBRACKET iexpr COMMA
## LR(1) items:
iexpr -> ADD LBRACKET iexpr COMMA . iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## ADD LBRACKET iexpr COMMA iexpr
## LR(1) items:
iexpr -> ADD LBRACKET iexpr COMMA iexpr . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## ADD LBRACKET iexpr COMMA iexpr RBRACKET
## LR(1) items:
iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET

State 139:
## Known stack suffix:
## iexpr
## LR(1) items:
formula -> iexpr . icomp_op iexpr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On NEQ shift to state 140
-- On LTE shift to state 141
-- On LT shift to state 142
-- On GTE shift to state 143
-- On GT shift to state 144
-- On EQ shift to state 145
-- On icomp_op shift to state 146
## Reductions:

State 140:
## Known stack suffix:
## NEQ
## LR(1) items:
icomp_op -> NEQ . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production icomp_op -> NEQ

State 141:
## Known stack suffix:
## LTE
## LR(1) items:
icomp_op -> LTE . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production icomp_op -> LTE

State 142:
## Known stack suffix:
## LT
## LR(1) items:
icomp_op -> LT . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production icomp_op -> LT

State 143:
## Known stack suffix:
## GTE
## LR(1) items:
icomp_op -> GTE . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production icomp_op -> GTE

State 144:
## Known stack suffix:
## GT
## LR(1) items:
icomp_op -> GT . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production icomp_op -> GT

State 145:
## Known stack suffix:
## EQ
## LR(1) items:
icomp_op -> EQ . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production icomp_op -> EQ

State 146:
## Known stack suffix:
## iexpr icomp_op
## LR(1) items:
formula -> iexpr icomp_op . iexpr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## iexpr icomp_op iexpr
## LR(1) items:
formula -> iexpr icomp_op iexpr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> iexpr icomp_op iexpr

State 148:
## Known stack suffix:
## formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . OR formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . IFF formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . UNTIL formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . RELEASES formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . SINCE formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 200
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:

State 149:
## Known stack suffix:
## formula UNTIL
## LR(1) items:
formula -> formula UNTIL . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 150
-- On expr shift to state 151
## Reductions:

State 150:
## Known stack suffix:
## formula UNTIL formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula UNTIL formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> formula UNTIL formula

State 151:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> expr . NOT_IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . EQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NEQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 152:
## Known stack suffix:
## expr RPROJ
## LR(1) items:
expr -> expr RPROJ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## expr RPROJ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr RPROJ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA BAR ARROW AND ALWAYS ALL ADD
--   reduce production expr -> expr RPROJ expr

State 154:
## Known stack suffix:
## expr PRIME
## LR(1) items:
expr -> expr PRIME . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr PRIME

State 155:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,expr) shift to state 156
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 158
## Reductions:

State 156:
## Known stack suffix:
## expr LBRACKET separated_nonempty_list(COMMA,expr)
## LR(1) items:
expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
## LR(1) items:
expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET

State 158:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . INTER expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . LPROJ expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . RPROJ expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . ARROW expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . MINUS expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . DOT expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . PRIME [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RBRACKET ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RBRACKET ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 181
-- On ARROW shift to state 169
## Reductions:
-- On RBRACKET
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 159:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr PLUS expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On OVERRIDE shift to state 161
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPAREN LONE LET LBRACE INVARIANT INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA BAR AND ALWAYS ALL ADD
--   reduce production expr -> expr PLUS expr

State 161:
## Known stack suffix:
## expr OVERRIDE
## LR(1) items:
expr -> expr OVERRIDE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## expr OVERRIDE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr OVERRIDE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPAREN LONE LET LBRACE INVARIANT INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA BAR AND ALWAYS ALL ADD
--   reduce production expr -> expr OVERRIDE expr

State 163:
## Known stack suffix:
## expr LPROJ
## LR(1) items:
expr -> expr LPROJ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## expr LPROJ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr LPROJ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA BAR ARROW AND ALWAYS ALL ADD
--   reduce production expr -> expr LPROJ expr

State 165:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## expr DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr DOT expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD
--   reduce production expr -> expr DOT expr

State 167:
## Known stack suffix:
## expr INTER
## LR(1) items:
expr -> expr INTER . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## expr INTER expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr INTER expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPAREN LONE LET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA BAR AND ALWAYS ALL ADD
--   reduce production expr -> expr INTER expr

State 169:
## Known stack suffix:
## expr ARROW
## LR(1) items:
expr -> expr ARROW . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## expr ARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr ARROW expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPAREN LONE LET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA BAR ARROW AND ALWAYS ALL ADD
--   reduce production expr -> expr ARROW expr

State 171:
## Known stack suffix:
## expr NOT_IN
## LR(1) items:
formula -> expr NOT_IN . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## expr NOT_IN expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr NOT_IN expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> expr NOT_IN expr

State 173:
## Known stack suffix:
## expr NEQ
## LR(1) items:
formula -> expr NEQ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr NEQ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> expr NEQ expr

State 175:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr MINUS expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On OVERRIDE shift to state 161
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPAREN LONE LET LBRACE INVARIANT INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA BAR AND ALWAYS ALL ADD
--   reduce production expr -> expr MINUS expr

State 177:
## Known stack suffix:
## expr IN
## LR(1) items:
formula -> expr IN . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr IN expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> expr IN expr

State 179:
## Known stack suffix:
## expr EQ
## LR(1) items:
formula -> expr EQ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr EQ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> expr EQ expr

State 181:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RBRACKET ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,expr) shift to state 182
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 158
## Reductions:

State 182:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 183:
## Known stack suffix:
## formula SINCE
## LR(1) items:
formula -> formula SINCE . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 184
-- On expr shift to state 151
## Reductions:

State 184:
## Known stack suffix:
## formula SINCE formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula SINCE formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> formula SINCE formula

State 185:
## Known stack suffix:
## formula RELEASES
## LR(1) items:
formula -> formula RELEASES . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 186
-- On expr shift to state 151
## Reductions:

State 186:
## Known stack suffix:
## formula RELEASES formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula RELEASES formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> formula RELEASES formula

State 187:
## Known stack suffix:
## formula OR
## LR(1) items:
formula -> formula OR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 188
-- On expr shift to state 151
## Reductions:

State 188:
## Known stack suffix:
## formula OR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula OR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> formula OR formula

State 189:
## Known stack suffix:
## formula IMPLIES
## LR(1) items:
expr -> formula IMPLIES . expr ELSE expr [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN IMPLIES IFF EQ ELSE DOT COMMA ARROW AND ]
formula -> formula IMPLIES . formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 190
-- On expr shift to state 195
## Reductions:

State 190:
## Known stack suffix:
## formula IMPLIES formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES formula . ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On ELSE shift to state 191
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD
--   reduce production formula -> formula IMPLIES formula

State 191:
## Known stack suffix:
## formula IMPLIES formula ELSE
## LR(1) items:
formula -> formula IMPLIES formula ELSE . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 192
-- On expr shift to state 151
## Reductions:

State 192:
## Known stack suffix:
## formula IMPLIES formula ELSE formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES formula ELSE formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> formula IMPLIES formula ELSE formula

State 193:
## Known stack suffix:
## formula AND
## LR(1) items:
formula -> formula AND . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 194
-- On expr shift to state 151
## Reductions:

State 194:
## Known stack suffix:
## formula AND formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula AND formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> formula AND formula

State 195:
## Known stack suffix:
## formula IMPLIES expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> formula IMPLIES expr . ELSE expr [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN IMPLIES IFF EQ ELSE DOT COMMA ARROW AND ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
formula -> expr . NOT_IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . EQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NEQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On ELSE shift to state 196
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 196:
## Known stack suffix:
## formula IMPLIES expr ELSE
## LR(1) items:
expr -> formula IMPLIES expr ELSE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## formula IMPLIES expr ELSE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> formula IMPLIES expr ELSE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EOF ELSE COMMA BAR AND ALWAYS ALL ADD
--   reduce production expr -> formula IMPLIES expr ELSE expr

State 198:
## Known stack suffix:
## formula IFF
## LR(1) items:
formula -> formula IFF . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 199
-- On expr shift to state 151
## Reductions:

State 199:
## Known stack suffix:
## formula IFF formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IFF formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> formula IFF formula

State 200:
## Known stack suffix:
## formula IMPLIES
## LR(1) items:
expr -> formula IMPLIES . expr ELSE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> formula IMPLIES . formula ELSE formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula IMPLIES . formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 190
-- On expr shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## formula IMPLIES expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> formula IMPLIES expr . ELSE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On ELSE shift to state 196
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 202:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr . [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr . COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 203
-- On ARROW shift to state 169
## Reductions:
-- On LBRACE BAR
--   reduce production separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr

State 203:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA . separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On DISJ shift to state 130
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 209
## Reductions:

State 204:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) . COLON expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) . COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On COLON shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON . expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON . expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr . [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr . COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 207
-- On ARROW shift to state 169
## Reductions:
-- On LBRACE BAR
--   reduce production separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr

State 207:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr COMMA . separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On DISJ shift to state 130
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) . [ LBRACE BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)

State 209:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) . [ LBRACE BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)

State 210:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ALL separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 211
-- On BAR shift to state 219
## Reductions:

State 211:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 212
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 212:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 214:
## Known stack suffix:
## list(formula_semi)
## LR(1) items:
specification -> list(formula_semi) . [ SYM RUN RBRACE INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production specification -> list(formula_semi)

State 215:
## Known stack suffix:
## formula_semi
## LR(1) items:
list(formula_semi) -> formula_semi . list(formula_semi) [ SYM RUN RBRACE INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On list(formula_semi) shift to state 216
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On SYM RUN RBRACE INVARIANT INST EOF
--   reduce production list(formula_semi) ->

State 216:
## Known stack suffix:
## formula_semi list(formula_semi)
## LR(1) items:
list(formula_semi) -> formula_semi list(formula_semi) . [ SYM RUN RBRACE INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(formula_semi) -> formula_semi list(formula_semi)

State 217:
## Known stack suffix:
## formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula_semi -> formula . [ UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME RUN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD ]
formula_semi -> formula . SEMI [ UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME RUN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On SEMI shift to state 218
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME RUN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD
--   reduce production formula_semi -> formula

State 218:
## Known stack suffix:
## formula SEMI
## LR(1) items:
formula_semi -> formula SEMI . [ UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME RUN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_semi -> formula SEMI

State 219:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 220
-- On expr shift to state 151
## Reductions:

State 220:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula

State 221:
## Known stack suffix:
## ALWAYS formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> ALWAYS formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> ALWAYS formula

State 222:
## Known stack suffix:
## EVENTUALLY formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> EVENTUALLY formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> EVENTUALLY formula

State 223:
## Known stack suffix:
## HAT expr
## LR(1) items:
expr -> HAT expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD
--   reduce production expr -> HAT expr

State 224:
## Known stack suffix:
## HISTORICALLY formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> HISTORICALLY formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> HISTORICALLY formula

State 225:
## Known stack suffix:
## LBRACE specification
## LR(1) items:
formula -> LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LBRACE specification RBRACE
## LR(1) items:
formula -> LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> LBRACE specification RBRACE

State 227:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) . BAR formula RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 228
-- On BAR shift to state 232
## Reductions:

State 228:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 229
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 229:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE

State 232:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR . formula RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 233
-- On expr shift to state 151
## Reductions:

State 233:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . OR formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . IFF formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . UNTIL formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . RELEASES formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . SINCE formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On RBRACE shift to state 234
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:

State 234:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE

State 235:
## Known stack suffix:
## PLAIN_ID EQ expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr . [ LBRACE BAR ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr . COMMA separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 236
-- On ARROW shift to state 169
## Reductions:
-- On LBRACE BAR
--   reduce production separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr

State 236:
## Known stack suffix:
## PLAIN_ID EQ expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr COMMA . separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 119
-- On separated_nonempty_list(COMMA,let_decl) shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## PLAIN_ID EQ expr COMMA separated_nonempty_list(COMMA,let_decl)
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr COMMA separated_nonempty_list(COMMA,let_decl) . [ LBRACE BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr COMMA separated_nonempty_list(COMMA,let_decl)

State 238:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl)
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LET separated_nonempty_list(COMMA,let_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 239
-- On BAR shift to state 242
## Reductions:

State 239:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) LBRACE
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 240
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 240:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) LBRACE specification
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE

State 242:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) BAR
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 243
-- On expr shift to state 151
## Reductions:

State 243:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula

State 244:
## Known stack suffix:
## LPAREN iexpr
## LR(1) items:
formula -> iexpr . icomp_op iexpr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
iexpr -> LPAREN iexpr . RPAREN [ RPAREN NEQ LTE LT GTE GT EQ ]
## Transitions:
-- On RPAREN shift to state 245
-- On NEQ shift to state 140
-- On LTE shift to state 141
-- On LT shift to state 142
-- On GTE shift to state 143
-- On GT shift to state 144
-- On EQ shift to state 145
-- On icomp_op shift to state 146
## Reductions:

State 245:
## Known stack suffix:
## LPAREN iexpr RPAREN
## LR(1) items:
iexpr -> LPAREN iexpr RPAREN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iexpr -> LPAREN iexpr RPAREN

State 246:
## Known stack suffix:
## LPAREN formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . OR formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . IFF formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . UNTIL formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . RELEASES formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . SINCE formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> LPAREN formula . RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RPAREN shift to state 247
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:

State 247:
## Known stack suffix:
## LPAREN formula RPAREN
## LR(1) items:
formula -> LPAREN formula RPAREN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> LPAREN formula RPAREN

State 248:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . INTER expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . DOT expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . PRIME [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> LPAREN expr . RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On RPAREN shift to state 249
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 249:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr RPAREN

State 250:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 251
-- On BAR shift to state 254
## Reductions:

State 251:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 252
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 252:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 254:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 255
-- On expr shift to state 151
## Reductions:

State 255:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula

State 256:
## Known stack suffix:
## LONE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> LONE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> LONE expr

State 257:
## Known stack suffix:
## NEXT formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> NEXT formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> NEXT formula

State 258:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 259
-- On BAR shift to state 262
## Reductions:

State 259:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 260
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 260:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 262:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 263
-- On expr shift to state 151
## Reductions:

State 263:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula

State 264:
## Known stack suffix:
## NO expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> NO expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> NO expr

State 265:
## Known stack suffix:
## NOT formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> NOT formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> NOT formula

State 266:
## Known stack suffix:
## ONCE formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> ONCE formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> ONCE formula

State 267:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 268
-- On BAR shift to state 271
## Reductions:

State 268:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 269
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 269:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 271:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 272
-- On expr shift to state 151
## Reductions:

State 272:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula

State 273:
## Known stack suffix:
## ONE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> ONE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> ONE expr

State 274:
## Known stack suffix:
## PREVIOUS formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> PREVIOUS formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> PREVIOUS formula

State 275:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 276
-- On BAR shift to state 279
## Reductions:

State 276:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 277
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE
--   reduce production list(formula_semi) ->

State 277:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 279:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 280
-- On expr shift to state 151
## Reductions:

State 280:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SEMI RUN RPAREN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE ALWAYS ALL ADD
--   reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula

State 281:
## Known stack suffix:
## SOME expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> SOME expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD
--   reduce production formula -> SOME expr

State 282:
## Known stack suffix:
## SOMETIME formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> SOMETIME formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> SOMETIME formula

State 283:
## Known stack suffix:
## STAR expr
## LR(1) items:
expr -> STAR expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD
--   reduce production expr -> STAR expr

State 284:
## Known stack suffix:
## HASH expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
iexpr -> HASH expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD
--   reduce production iexpr -> HASH expr

State 285:
## Known stack suffix:
## LPAREN iexpr
## LR(1) items:
iexpr -> LPAREN iexpr . RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RPAREN shift to state 245
## Reductions:

State 286:
## Known stack suffix:
## NEG LBRACKET iexpr
## LR(1) items:
iexpr -> NEG LBRACKET iexpr . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## NEG LBRACKET iexpr RBRACKET
## LR(1) items:
iexpr -> NEG LBRACKET iexpr RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iexpr -> NEG LBRACKET iexpr RBRACKET

State 288:
## Known stack suffix:
## SUB LBRACKET iexpr
## LR(1) items:
iexpr -> SUB LBRACKET iexpr . COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On COMMA shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## SUB LBRACKET iexpr COMMA
## LR(1) items:
iexpr -> SUB LBRACKET iexpr COMMA . iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## SUB LBRACKET iexpr COMMA iexpr
## LR(1) items:
iexpr -> SUB LBRACKET iexpr COMMA iexpr . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## SUB LBRACKET iexpr COMMA iexpr RBRACKET
## LR(1) items:
iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET

State 292:
## Known stack suffix:
## TILDE expr
## LR(1) items:
expr -> TILDE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD
--   reduce production expr -> TILDE expr

State 293:
## Known stack suffix:
## RUN nonempty_list(formula_semi)
## LR(1) items:
paragraph -> RUN nonempty_list(formula_semi) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paragraph -> RUN nonempty_list(formula_semi)

State 294:
## Known stack suffix:
## formula_semi
## LR(1) items:
nonempty_list(formula_semi) -> formula_semi . [ SYM RUN INVARIANT INST EOF ]
nonempty_list(formula_semi) -> formula_semi . nonempty_list(formula_semi) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On nonempty_list(formula_semi) shift to state 295
-- On iexpr shift to state 139
-- On formula_semi shift to state 294
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On SYM RUN INVARIANT INST EOF
--   reduce production nonempty_list(formula_semi) -> formula_semi

State 295:
## Known stack suffix:
## formula_semi nonempty_list(formula_semi)
## LR(1) items:
nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi)

State 296:
## Known stack suffix:
## INVARIANT
## LR(1) items:
paragraph -> INVARIANT . specification [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 297
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On SYM RUN INVARIANT INST EOF
--   reduce production list(formula_semi) ->

State 297:
## Known stack suffix:
## INVARIANT specification
## LR(1) items:
paragraph -> INVARIANT specification . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paragraph -> INVARIANT specification

State 298:
## Known stack suffix:
## INST
## LR(1) items:
insts -> INST . nonempty_list(inst) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On PLAIN_ID shift to state 299
-- On nonempty_list(inst) shift to state 307
-- On inst shift to state 308
## Reductions:

State 299:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
inst -> PLAIN_ID . EQ LBRACE list(tuple) RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID . EQ LBRACE list(tuple) RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On EQ shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## PLAIN_ID EQ
## LR(1) items:
inst -> PLAIN_ID EQ . LBRACE list(tuple) RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ . LBRACE list(tuple) RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On LBRACE shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## PLAIN_ID EQ LBRACE
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE . list(tuple) RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ LBRACE . list(tuple) RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On LPAREN shift to state 27
-- On tuple shift to state 302
-- On list(tuple) shift to state 304
## Reductions:
-- On RBRACE
--   reduce production list(tuple) ->

State 302:
## Known stack suffix:
## tuple
## LR(1) items:
list(tuple) -> tuple . list(tuple) [ RBRACE ]
## Transitions:
-- On LPAREN shift to state 27
-- On tuple shift to state 302
-- On list(tuple) shift to state 303
## Reductions:
-- On RBRACE
--   reduce production list(tuple) ->

State 303:
## Known stack suffix:
## tuple list(tuple)
## LR(1) items:
list(tuple) -> tuple list(tuple) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(tuple) -> tuple list(tuple)

State 304:
## Known stack suffix:
## PLAIN_ID EQ LBRACE list(tuple)
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE list(tuple) . RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ LBRACE list(tuple) . RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On RBRACE shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## PLAIN_ID EQ LBRACE list(tuple) RBRACE
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE . [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE . SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On SEMI shift to state 306
## Reductions:
-- On SYM RUN PLAIN_ID INVARIANT INST EOF
--   reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE

State 306:
## Known stack suffix:
## PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI . [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI

State 307:
## Known stack suffix:
## INST nonempty_list(inst)
## LR(1) items:
insts -> INST nonempty_list(inst) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production insts -> INST nonempty_list(inst)

State 308:
## Known stack suffix:
## inst
## LR(1) items:
nonempty_list(inst) -> inst . [ SYM RUN INVARIANT INST EOF ]
nonempty_list(inst) -> inst . nonempty_list(inst) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On PLAIN_ID shift to state 299
-- On nonempty_list(inst) shift to state 309
-- On inst shift to state 308
## Reductions:
-- On SYM RUN INVARIANT INST EOF
--   reduce production nonempty_list(inst) -> inst

State 309:
## Known stack suffix:
## inst nonempty_list(inst)
## LR(1) items:
nonempty_list(inst) -> inst nonempty_list(inst) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(inst) -> inst nonempty_list(inst)

State 310:
## Known stack suffix:
## syms
## LR(1) items:
paragraph -> syms . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paragraph -> syms

State 311:
## Known stack suffix:
## paragraph
## LR(1) items:
nonempty_list(paragraph) -> paragraph . [ EOF ]
nonempty_list(paragraph) -> paragraph . nonempty_list(paragraph) [ EOF ]
## Transitions:
-- On SYM shift to state 72
-- On RUN shift to state 89
-- On INVARIANT shift to state 296
-- On INST shift to state 298
-- On syms shift to state 310
-- On paragraph shift to state 311
-- On nonempty_list(paragraph) shift to state 312
-- On insts shift to state 313
## Reductions:
-- On EOF
--   reduce production nonempty_list(paragraph) -> paragraph

State 312:
## Known stack suffix:
## paragraph nonempty_list(paragraph)
## LR(1) items:
nonempty_list(paragraph) -> paragraph nonempty_list(paragraph) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(paragraph) -> paragraph nonempty_list(paragraph)

State 313:
## Known stack suffix:
## insts
## LR(1) items:
paragraph -> insts . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paragraph -> insts

State 314:
## Known stack suffix:
## universe list(declaration) nonempty_list(paragraph)
## LR(1) items:
parse_problem -> universe list(declaration) nonempty_list(paragraph) . EOF [ # ]
## Transitions:
-- On EOF shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## universe list(declaration) nonempty_list(paragraph) EOF
## LR(1) items:
parse_problem -> universe list(declaration) nonempty_list(paragraph) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_problem -> universe list(declaration) nonempty_list(paragraph) EOF

State 316:
## Known stack suffix:
## declaration
## LR(1) items:
list(declaration) -> declaration . list(declaration) [ SYM RUN INVARIANT INST ]
## Transitions:
-- On VAR shift to state 16
-- On CONST shift to state 63
-- On list(declaration) shift to state 317
-- On declaration shift to state 316
## Reductions:
-- On SYM RUN INVARIANT INST
--   reduce production list(declaration) ->

State 317:
## Known stack suffix:
## declaration list(declaration)
## LR(1) items:
list(declaration) -> declaration list(declaration) . [ SYM RUN INVARIANT INST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(declaration) -> declaration list(declaration)

State 318:
## Known stack suffix:
## parse_problem
## LR(1) items:
parse_problem' -> parse_problem . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_problem

