%{
    [@warning "-4"]
  
module R = Raw

module G = Gen_goal

let exp_no_arity = G.exp (Some 0)

%}
%start parse_problem
%token ADD
%token ALL
%token ALWAYS
%token AND
%token ARROW
%token BAR
%token COLON
%token <int> COLON_ARITY
%token COMMA
%token CONST
%token DISJ
%token DOT
%token DOTDOT
%token ELSE
%token EOF
%token EQ
%token EVENTUALLY
%token FALSE
%token GT
%token GTE
%token HASH
%token HAT
%token HISTORICALLY
%token IDEN
%token <string> IDX_ID
%token IFF
%token IMPLIES
%token IN
%token INST
%token INTER
%token INVARIANT
%token LBRACE
%token LBRACKET
%token LET
%token LONE
%token LPAREN
%token LPROJ
%token LT
%token LTE
%token MINUS
%token NEG
%token NEQ
%token NEXT
%token NO
%token NONE
%token NOT
%token NOT_IN
%token <int> NUMBER
%token ONCE
%token ONE
%token OR
%token OVERRIDE
%token <string> PLAIN_ID
%token PLUS
%token PREVIOUS
%token PRIME
%token RBRACE
%token RBRACKET
%token RELEASES
%token RPAREN
%token RPROJ
%token RUN
%token SEMI
%token SINCE
%token SOME
%token SOMETIME
%token STAR
%token SUB
%token SYM
%token THEN
%token TILDE
%token TRUE
%token UNIV
%token UNTIL
%token VAR
%nonassoc BAR
%left OR
%left IFF
%right ELSE IMPLIES
%left AND
%left RELEASES SINCE UNTIL
%nonassoc ALWAYS EVENTUALLY HISTORICALLY NEXT NOT ONCE PREVIOUS SOMETIME
%nonassoc EQ IN NEQ NOT_IN
%left MINUS PLUS
%nonassoc HASH
%left OVERRIDE
%left INTER
%left ARROW
%left LPROJ
%left RPROJ
%left LBRACKET
%left DOT
%nonassoc HAT STAR TILDE
%nonassoc PRIME
%type <Raw.raw_urelements list
 * Raw.raw_declaration list
 * Raw.raw_paragraph list> parse_problem
%%

option_SEMI_:
  
    {    ( None )}
| x = SEMI
    {    ( Some x )}

option_boundmult_:
  
    {    ( None )}
| x = boundmult
    {    ( Some x )}

option_next_scope_:
  
    {    ( None )}
| x = next_scope
    {    ( Some x )}

list_declaration_:
  
    {    ( [] )}
| x = declaration xs = list_declaration_
    {    ( x :: xs )}

list_element_:
  
    {    ( [] )}
| x = element xs = list_element_
    {    ( x :: xs )}

list_formula_semi_:
  
    {    ( [] )}
| x = formula_semi xs = list_formula_semi_
    {    ( x :: xs )}

list_tuple_:
  
    {    ( [] )}
| x = tuple xs = list_tuple_
    {    ( x :: xs )}

list_urelements_:
  
    {    ( [] )}
| x = urelements xs = list_urelements_
    {    ( x :: xs )}

nonempty_list_atom_:
  x = atom
    {    ( [ x ] )}
| x = atom xs = nonempty_list_atom_
    {    ( x :: xs )}

nonempty_list_bracketed_symmetry_:
  x = bracketed_symmetry
    {    ( [ x ] )}
| x = bracketed_symmetry xs = nonempty_list_bracketed_symmetry_
    {    ( x :: xs )}

nonempty_list_formula_semi_:
  x = formula_semi
    {    ( [ x ] )}
| x = formula_semi xs = nonempty_list_formula_semi_
    {    ( x :: xs )}

nonempty_list_inst_:
  x = inst
    {    ( [ x ] )}
| x = inst xs = nonempty_list_inst_
    {    ( x :: xs )}

nonempty_list_paragraph_:
  x = paragraph
    {    ( [ x ] )}
| x = paragraph xs = nonempty_list_paragraph_
    {    ( x :: xs )}

nonempty_list_sym_element_:
  x = sym_element
    {    ( [ x ] )}
| x = sym_element xs = nonempty_list_sym_element_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_ae_decl_:
  xs = separated_nonempty_list_COMMA_plain_id_ _3 = COLON range = expr
    {let x =
  let ids =     ( xs ) in
  let disj =  ( false ) in
   ( (disj, ids, range) )
in
    ( [ x ] )}
| _1 = DISJ xs = separated_nonempty_list_COMMA_plain_id_ _3 = COLON range = expr
    {let x =
  let ids =     ( xs ) in
  let disj =  ( true ) in
   ( (disj, ids, range) )
in
    ( [ x ] )}
| xs_inlined1 = separated_nonempty_list_COMMA_plain_id_ _3 = COLON range = expr _2 = COMMA xs = separated_nonempty_list_COMMA_ae_decl_
    {let x =
  let xs = xs_inlined1 in
  let ids =     ( xs ) in
  let disj =  ( false ) in
   ( (disj, ids, range) )
in
    ( x :: xs )}
| _1 = DISJ xs_inlined1 = separated_nonempty_list_COMMA_plain_id_ _3 = COLON range = expr _2 = COMMA xs = separated_nonempty_list_COMMA_ae_decl_
    {let x =
  let xs = xs_inlined1 in
  let ids =     ( xs ) in
  let disj =  ( true ) in
   ( (disj, ids, range) )
in
    ( x :: xs )}

separated_nonempty_list_COMMA_expr_:
  x = expr
    {    ( [ x ] )}
| x = expr _2 = COMMA xs = separated_nonempty_list_COMMA_expr_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_let_decl_:
  id = PLAIN_ID _2 = EQ e = expr
    {let x =  ( (Raw_ident.ident id _startpos_id_ _endpos_id_, e) ) in
    ( [ x ] )}
| id = PLAIN_ID _2_inlined1 = EQ e = expr _2 = COMMA xs = separated_nonempty_list_COMMA_let_decl_
    {let x =  ( (Raw_ident.ident id _startpos_id_ _endpos_id_, e) ) in
    ( x :: xs )}

separated_nonempty_list_COMMA_plain_id_:
  id = PLAIN_ID
    {let x =   ( Raw_ident.ident id _startpos_id_ _endpos_id_ ) in
    ( [ x ] )}
| id = PLAIN_ID _2 = COMMA xs = separated_nonempty_list_COMMA_plain_id_
    {let x =   ( Raw_ident.ident id _startpos_id_ _endpos_id_ ) in
    ( x :: xs )}

parse_problem:
  urelts_list = universe decls = list_declaration_ pars = nonempty_list_paragraph_ _4 = EOF
    {   ( (urelts_list, decls, pars) )}

paragraph:
  i = insts
    {    ( R.ParInst i )}
| sy = syms
    {    ( R.ParSym sy )}
| _1 = RUN fs = nonempty_list_formula_semi_
    {let gs = (G.run fs  ) in
    ( R.ParGoal gs )}
| _1 = INVARIANT fs = specification
    {let f =  ( fs ) in
    ( R.ParInv f )}

universe:
  _1 = UNIV _2 = COLON _1_inlined1 = LBRACE x = list_urelements_ _3 = RBRACE
    {let _4 =     ( None ) in
let urelts_list =
  let x =     ( x ) in
      ( x )
in
 ( urelts_list )}
| _1 = UNIV _2 = COLON _1_inlined1 = LBRACE x = list_urelements_ _3 = RBRACE x_inlined1 = SEMI
    {let _4 =
  let x = x_inlined1 in
      ( Some x )
in
let urelts_list =
  let x =     ( x ) in
      ( x )
in
 ( urelts_list )}

urelements:
  i = interval
    { ( R.uintvl i )}
| at = PLAIN_ID
    {let _endpos = _endpos_at_ in
let _startpos = _startpos_at_ in
  ( R.uplain @@ Raw_ident.ident at _startpos _endpos )}
| at = IDX_ID
    {let _endpos = _endpos_at_ in
let _startpos = _startpos_at_ in
  ( R.uplain @@ Raw_ident.ident at _startpos _endpos )}
| nb = NUMBER
    {let _endpos = _endpos_nb_ in
let _startpos = _startpos_nb_ in
  ( R.uplain @@ Raw_ident.ident (string_of_int nb) _startpos _endpos )}

declaration:
  _1 = CONST id = PLAIN_ID ar = colon_w_or_wo_arity b = bound
    {let _5 =     ( None ) in
let sc =  ( R.sexact b ) in
 ( R.dconst (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc )}
| _1 = CONST id = PLAIN_ID ar = colon_w_or_wo_arity b = bound x = SEMI
    {let _5 =     ( Some x ) in
let sc =  ( R.sexact b ) in
 ( R.dconst (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc )}
| _1 = CONST id = PLAIN_ID ar = colon_w_or_wo_arity b1 = bound mult = option_boundmult_ b2 = bound
    {let _5 =     ( None ) in
let sc =  ( R.sinexact b1 mult b2 ) in
 ( R.dconst (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc )}
| _1 = CONST id = PLAIN_ID ar = colon_w_or_wo_arity b1 = bound mult = option_boundmult_ b2 = bound x = SEMI
    {let _5 =     ( Some x ) in
let sc =  ( R.sinexact b1 mult b2 ) in
 ( R.dconst (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc )}
| _1 = VAR id = PLAIN_ID ar = colon_w_or_wo_arity b = bound fby = option_next_scope_
    {let _6 =     ( None ) in
let sc =  ( R.sexact b ) in
 ( R.dvar (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc fby )}
| _1 = VAR id = PLAIN_ID ar = colon_w_or_wo_arity b = bound fby = option_next_scope_ x = SEMI
    {let _6 =     ( Some x ) in
let sc =  ( R.sexact b ) in
 ( R.dvar (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc fby )}
| _1 = VAR id = PLAIN_ID ar = colon_w_or_wo_arity b1 = bound mult = option_boundmult_ b2 = bound fby = option_next_scope_
    {let _6 =     ( None ) in
let sc =  ( R.sinexact b1 mult b2 ) in
 ( R.dvar (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc fby )}
| _1 = VAR id = PLAIN_ID ar = colon_w_or_wo_arity b1 = bound mult = option_boundmult_ b2 = bound fby = option_next_scope_ x = SEMI
    {let _6 =     ( Some x ) in
let sc =  ( R.sinexact b1 mult b2 ) in
 ( R.dvar (Raw_ident.ident id _startpos_id_ _endpos_id_) ar sc fby )}

colon_w_or_wo_arity:
  _1 = COLON
    {  ( None )}
| ca = COLON_ARITY
    {  ( Some ca )}

next_scope:
  _1 = THEN b = bound
    {let sc =  ( R.sexact b ) in
  ( sc )}
| _1 = THEN b1 = bound mult = option_boundmult_ b2 = bound
    {let sc =  ( R.sinexact b1 mult b2 ) in
  ( sc )}

bound:
  _1 = UNIV
    { ( R.buniv )}
| id = PLAIN_ID
    {  ( R.bref (Raw_ident.ident id _startpos_id_ _endpos_id_) )}
| _1 = LPAREN x = bound _3 = RPAREN
    {let b =
  let x =     ( x ) in
      ( x )
in
 ( b )}
| b1 = bound _2 = ARROW mult = option_boundmult_ b2 = bound
    { ( R.bprod b1 mult b2 )}
| b1 = bound _2 = PLUS b2 = bound
    { ( R.bunion b1 b2  )}
| _1 = LBRACE x = list_element_ _3 = RBRACE
    {let elts =
  let x =     ( x ) in
      ( x )
in
  ( R.belts elts )}

boundmult:
  _1 = LONE
    {   ( `Lone )}
| _1 = ONE
    {   ( `One )}

element:
  i = interval
    {  ( R.eintvl i )}
| t = tuple
    {  ( R.etuple t )}
| at = atom
    {  ( R.etuple [at] )}

tuple:
  _1 = LPAREN x = nonempty_list_atom_ _3 = RPAREN
    {let ats =
  let x =     ( x ) in
      ( x )
in
  ( ats )}

interval:
  at1 = IDX_ID _2 = DOTDOT at2 = IDX_ID
    {  (
    R.interval (Raw_ident.ident at1 _startpos_at1_ _endpos_at1_)
      (Raw_ident.ident at2 _startpos_at2_ _endpos_at2_)
 )}

atom:
  at = PLAIN_ID
    {let _endpos = _endpos_at_ in
let _startpos = _startpos_at_ in
 ( Raw_ident.ident at _startpos _endpos )}
| at = IDX_ID
    {let _endpos = _endpos_at_ in
let _startpos = _startpos_at_ in
 ( Raw_ident.ident at _startpos _endpos )}
| nb = NUMBER
    {let _endpos = _endpos_nb_ in
let _startpos = _startpos_nb_ in
 ( Raw_ident.ident (string_of_int nb) _startpos _endpos )}

insts:
  _1 = INST assignments = nonempty_list_inst_
    {  ( assignments )}

inst:
  id = PLAIN_ID _2 = EQ _1 = LBRACE x = list_tuple_ _3 = RBRACE
    {let _4 =     ( None ) in
let tuples =
  let x =     ( x ) in
      ( x )
in
 ( (Raw_ident.ident id _startpos_id_ _endpos_id_, tuples) )}
| id = PLAIN_ID _2 = EQ _1 = LBRACE x = list_tuple_ _3 = RBRACE x_inlined1 = SEMI
    {let _4 =
  let x = x_inlined1 in
      ( Some x )
in
let tuples =
  let x =     ( x ) in
      ( x )
in
 ( (Raw_ident.ident id _startpos_id_ _endpos_id_, tuples) )}

syms:
  _1 = SYM sy = nonempty_list_bracketed_symmetry_
    {      ( sy )}

bracketed_symmetry:
  _1 = LBRACKET x = symmetry _3 = RBRACKET _2 = option_SEMI_
    {let sy =
  let x =     ( x ) in
      ( x )
in
 (sy)}

symmetry:
  syms1 = nonempty_list_sym_element_ _2 = LTE syms2 = nonempty_list_sym_element_
    {  (syms1, syms2)}

sym_element:
  _1 = LPAREN x = nonempty_list_atom_ _3 = RPAREN
    {let atoms =
  let x =     ( x ) in
      ( x )
in
  (List.hd atoms, List.tl atoms)}

specification:
  fs = list_formula_semi_
    {  ( fs )}

formula_semi:
  f = formula
    {let _2 =     ( None ) in
  ( f )}
| f = formula x = SEMI
    {let _2 =     ( Some x ) in
  ( f )}

formula:
  _1 = TRUE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.true_ )}
| _1 = FALSE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.false_ )}
| _1 = ONE e = expr
    {let qual =  ( G.rone ) in
let _startpos_qual_ = _startpos__1_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos_qual_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.qual qual e )}
| _1 = LONE e = expr
    {let qual =      ( G.rlone ) in
let _startpos_qual_ = _startpos__1_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos_qual_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.qual qual e )}
| _1 = SOME e = expr
    {let qual =      ( G.rsome ) in
let _startpos_qual_ = _startpos__1_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos_qual_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.qual qual e )}
| _1 = NO e = expr
    {let qual =   ( G.rno ) in
let _startpos_qual_ = _startpos__1_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos_qual_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.qual qual e )}
| e1 = expr _1 = NOT_IN e2 = expr
    {let op =  ( G.not_in) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.rcomp e1 op e2 )}
| e1 = expr _1 = IN e2 = expr
    {let op =  ( G.in_ ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.rcomp e1 op e2 )}
| e1 = expr _1 = EQ e2 = expr
    {let op =  ( G.req ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.rcomp e1 op e2 )}
| e1 = expr _1 = NEQ e2 = expr
    {let op =   ( G.rneq ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.rcomp e1 op e2 )}
| e1 = iexpr op = icomp_op e2 = iexpr
    {let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.icomp e1 op e2 )}
| _1 = SOMETIME f = formula
    {let op =  ( G.sometime ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| _1 = EVENTUALLY f = formula
    {let op =  ( G.sometime ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| _1 = ALWAYS f = formula
    {let op =  ( G.always ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| _1 = NOT f = formula
    {let op =  ( G.not_ ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| _1 = ONCE f = formula
    {let op =  ( G.once ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| _1 = NEXT f = formula
    {let op =  ( G.next ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| _1 = PREVIOUS f = formula
    {let op =  ( G.previous ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| _1 = HISTORICALLY f = formula
    {let op =  ( G.historically ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_op_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lunary op f )}
| f1 = formula _1 = AND f2 = formula
    {let op =  ( G.and_ ) in
let _endpos = _endpos_f2_ in
let _startpos = _startpos_f1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lbinary f1 op f2 )}
| f1 = formula _1 = OR f2 = formula
    {let op =  ( G.or_ ) in
let _endpos = _endpos_f2_ in
let _startpos = _startpos_f1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lbinary f1 op f2 )}
| f1 = formula _1 = IFF f2 = formula
    {let op =  ( G.iff ) in
let _endpos = _endpos_f2_ in
let _startpos = _startpos_f1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lbinary f1 op f2 )}
| f1 = formula _1 = UNTIL f2 = formula
    {let op =  ( G.until ) in
let _endpos = _endpos_f2_ in
let _startpos = _startpos_f1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lbinary f1 op f2 )}
| f1 = formula _1 = RELEASES f2 = formula
    {let op =  ( G.releases ) in
let _endpos = _endpos_f2_ in
let _startpos = _startpos_f1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lbinary f1 op f2 )}
| f1 = formula _1 = SINCE f2 = formula
    {let op =  ( G.since ) in
let _endpos = _endpos_f2_ in
let _startpos = _startpos_f1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lbinary f1 op f2 )}
| _1 = ALL xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = BAR f = formula
    {let block =  ( [f] ) in
let _endpos_block_ = _endpos_f_ in
let decls =     ( xs ) in
let q =  ( G.all ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = ALL xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = LBRACE x = specification _3 = RBRACE
    {let block =
  let block =
    let fs =
      let x =     ( x ) in
          ( x )
    in
     (  fs )
  in
   ( block )
in
let _endpos_block_ = _endpos__3_ in
let decls =     ( xs ) in
let q =  ( G.all ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = SOME xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = BAR f = formula
    {let block =  ( [f] ) in
let _endpos_block_ = _endpos_f_ in
let decls =     ( xs ) in
let q =  ( G.some ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = SOME xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = LBRACE x = specification _3 = RBRACE
    {let block =
  let block =
    let fs =
      let x =     ( x ) in
          ( x )
    in
     (  fs )
  in
   ( block )
in
let _endpos_block_ = _endpos__3_ in
let decls =     ( xs ) in
let q =  ( G.some ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = NO xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = BAR f = formula
    {let block =  ( [f] ) in
let _endpos_block_ = _endpos_f_ in
let decls =     ( xs ) in
let q =  ( G.no_ ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = NO xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = LBRACE x = specification _3 = RBRACE
    {let block =
  let block =
    let fs =
      let x =     ( x ) in
          ( x )
    in
     (  fs )
  in
   ( block )
in
let _endpos_block_ = _endpos__3_ in
let decls =     ( xs ) in
let q =  ( G.no_ ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = ONE xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = BAR f = formula
    {let block =  ( [f] ) in
let _endpos_block_ = _endpos_f_ in
let decls =     ( xs ) in
let q =  ( G.one ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = ONE xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = LBRACE x = specification _3 = RBRACE
    {let block =
  let block =
    let fs =
      let x =     ( x ) in
          ( x )
    in
     (  fs )
  in
   ( block )
in
let _endpos_block_ = _endpos__3_ in
let decls =     ( xs ) in
let q =  ( G.one ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = LONE xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = BAR f = formula
    {let block =  ( [f] ) in
let _endpos_block_ = _endpos_f_ in
let decls =     ( xs ) in
let q =  ( G.lone ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = LONE xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = LBRACE x = specification _3 = RBRACE
    {let block =
  let block =
    let fs =
      let x =     ( x ) in
          ( x )
    in
     (  fs )
  in
   ( block )
in
let _endpos_block_ = _endpos__3_ in
let decls =     ( xs ) in
let q =  ( G.lone ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_block_ in
let _startpos = _startpos_q_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.quant q decls block )}
| _1 = LET xs = separated_nonempty_list_COMMA_let_decl_ _1_inlined1 = BAR f = formula
    {let block =  ( [f] ) in
let _endpos_block_ = _endpos_f_ in
let decls =     ( xs ) in
let _endpos = _endpos_block_ in
let _startpos = _startpos__1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.let_ decls block)}
| _1 = LET xs = separated_nonempty_list_COMMA_let_decl_ _1_inlined1 = LBRACE x = specification _3 = RBRACE
    {let block =
  let block =
    let fs =
      let x =     ( x ) in
          ( x )
    in
     (  fs )
  in
   ( block )
in
let _endpos_block_ = _endpos__3_ in
let decls =     ( xs ) in
let _endpos = _endpos_block_ in
let _startpos = _startpos__1_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.let_ decls block)}
| f = formula _2 = IMPLIES t = formula _4 = ELSE e = formula
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_f_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.fite f t e )}
| f = formula _2 = IMPLIES t = formula
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_f_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.lbinary f G.impl t  )}
| _1 = LBRACE x = specification _3 = RBRACE
    {let f =
  let fs =
    let x =     ( x ) in
        ( x )
  in
   (  fs )
in
let (_endpos_f_, _startpos_f_) = (_endpos__3_, _startpos__1_) in
let _endpos = _endpos_f_ in
let _startpos = _startpos_f_ in
 ( G.fml (Location.from_positions _startpos _endpos)
    @@ G.block f )}
| _1 = LPAREN x = formula _3 = RPAREN
    {let f =
  let x =     ( x ) in
      ( x )
in
     ( f )}

expr:
  _1 = NONE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.none )}
| _1 = UNIV
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.univ)}
| _1 = IDEN
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.iden )}
| id = PLAIN_ID
    {let _endpos = _endpos_id_ in
let _startpos = _startpos_id_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.ident @@ Raw_ident.ident id _startpos _endpos)}
| _1 = TILDE e = expr
    {let op =  ( G.transpose ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos_op_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.runary op e )}
| _1 = HAT e = expr
    {let op =      ( G.tclos ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos_op_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.runary op e )}
| _1 = STAR e = expr
    {let op =  ( G.rtclos ) in
let _startpos_op_ = _startpos__1_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos_op_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.runary op e )}
| e1 = expr _1 = PLUS e2 = expr
    {let op =  ( G.union ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| e1 = expr _1 = INTER e2 = expr
    {let op =  ( G.inter ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| e1 = expr _1 = OVERRIDE e2 = expr
    {let op =  ( G.over ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| e1 = expr _1 = LPROJ e2 = expr
    {let op =  ( G.lproj ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| e1 = expr _1 = RPROJ e2 = expr
    {let op =  ( G.rproj ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| e1 = expr _1 = ARROW e2 = expr
    {let op =  ( G.prod ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| e1 = expr _1 = MINUS e2 = expr
    {let op =  ( G.diff ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| e1 = expr _1 = DOT e2 = expr
    {let op =  ( G.join ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rbinary e1 op e2 )}
| f = formula _2 = IMPLIES t = expr _4 = ELSE e = expr
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_f_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.rite f t e)}
| exp = expr _1 = LBRACKET xs = separated_nonempty_list_COMMA_expr_ _3 = RBRACKET
    {let args =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
let _endpos_args_ = _endpos__3_ in
let _endpos = _endpos_args_ in
let _startpos = _startpos_exp_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.boxjoin exp args )}
| _1 = LBRACE xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = BAR f = formula _3 = RBRACE
    {let compr =
  let x =
    let x =
      let block =  ( [f] ) in
      let decls =     ( xs ) in
           ( G.compr decls block )
    in
        ( x )
  in
      ( x )
in
let (_endpos_compr_, _startpos_compr_) = (_endpos__3_, _startpos__1_) in
let _endpos = _endpos_compr_ in
let _startpos = _startpos_compr_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ compr)}
| _1 = LBRACE xs = separated_nonempty_list_COMMA_ae_decl_ _1_inlined1 = LBRACE x = specification _3_inlined1 = RBRACE _3 = RBRACE
    {let compr =
  let x =
    let x =
      let block =
        let block =
          let fs =
            let x =     ( x ) in
                ( x )
          in
           (  fs )
        in
         ( block )
      in
      let decls =     ( xs ) in
           ( G.compr decls block )
    in
        ( x )
  in
      ( x )
in
let (_endpos_compr_, _startpos_compr_) = (_endpos__3_, _startpos__1_) in
let _endpos = _endpos_compr_ in
let _startpos = _startpos_compr_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ compr)}
| e = expr _2 = PRIME
    {let _endpos = _endpos__2_ in
let _startpos = _startpos_e_ in
 ( exp_no_arity (Location.from_positions _startpos _endpos)
    @@ G.prime e)}
| _1 = LPAREN x = expr _3 = RPAREN
    {let e =
  let x =     ( x ) in
      ( x )
in
     ( e )}

iexpr:
  n = NUMBER
    {let _endpos = _endpos_n_ in
let _startpos = _startpos_n_ in
  ( G.iexp (Location.from_positions _startpos _endpos)
    @@ G.num n  )}
| _1 = HASH e = expr
    {let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
  ( G.iexp (Location.from_positions _startpos _endpos)
    @@ G.card e  )}
| _1 = NEG _1_inlined1 = LBRACKET x = iexpr _3 = RBRACKET
    {let e =
  let x =     ( x ) in
      ( x )
in
let _endpos_e_ = _endpos__3_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
  ( G.iexp (Location.from_positions _startpos _endpos)
    @@ G.(iunary neg e) )}
| _1 = ADD _1_inlined1 = LBRACKET e1 = iexpr _2 = COMMA e2 = iexpr _3 = RBRACKET
    {let e =
  let x =
    let x =   ( (e1, e2) ) in
        ( x )
  in
      ( x )
in
let _endpos_e_ = _endpos__3_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
      (
        let (e1, e2) = e in
        G.iexp (Location.from_positions _startpos _endpos)
    @@ G.(ibinary e1 add e2)  )}
| _1 = SUB _1_inlined1 = LBRACKET e1 = iexpr _2 = COMMA e2 = iexpr _3 = RBRACKET
    {let e =
  let x =
    let x =   ( (e1, e2) ) in
        ( x )
  in
      ( x )
in
let _endpos_e_ = _endpos__3_ in
let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
  ( 
    let (e1, e2) = e in
    G.iexp (Location.from_positions _startpos _endpos)
    @@ G.(ibinary e1 sub e2)  )}
| _1 = LPAREN x = iexpr _3 = RPAREN
    {let e =
  let x =     ( x ) in
      ( x )
in
         ( e )}

icomp_op:
  _1 = LT
    { ( G.lt)}
| _1 = LTE
    { ( G.lte )}
| _1 = GT
    { ( G.gt )}
| _1 = GTE
    { ( G.gte )}
| _1 = EQ
    { ( G.ieq )}
| _1 = NEQ
    {  ( G.ineq )}

%%


