File "electrum02.mly", line 38, characters 7-10:
Warning: the token ALL is unused.
File "electrum02.mly", line 38, characters 32-37:
Warning: the token ARROW is unused.
File "electrum02.mly", line 38, characters 11-14:
Warning: the token SET is unused.
%{
open Ast.Ctrl
%}
%{
open Ast.Expr 

let split l =
  let rec split firsts = function
    | [] -> assert false
    | [x] -> (List.rev firsts, x)
    | hd::tl -> split (hd :: firsts) tl
  in split [] l
%}
%{
open Ast.File
%}
%{
open Ast.Par
%}
%start file
%token ABSTRACT
%token ALL
%token ALWAYS
%token AND
%token ARROW
%token AS
%token ASSERT
%token AT
%token BAR
%token BUT
%token CARD
%token CARET
%token CHECK
%token COLON
%token COMMA
%token DISJ
%token DOT
%token ELSE
%token ENUM
%token EOF
%token EQ
%token EVENTUALLY
%token EXACTLY
%token EXPECT
%token EXTENDS
%token FACT
%token FOR
%token FUN
%token GT
%token GTE
%token HISTORICALLY
%token IDEN
%token <Ast.Ident.t> IDENT
%token IFF
%token IMPLIES
%token IN
%token INT
%token INTER
%token LBRACE
%token LBRACKET
%token LET
%token LONE
%token LONE_ARROW_LONE
%token LONE_ARROW_ONE
%token LONE_ARROW_SET
%token LONE_ARROW_SOME
%token LPAREN
%token LPROJ
%token LT
%token LTE
%token MINUS
%token MLONE
%token MODULE
%token MONE
%token MSET
%token MSOME
%token NEQ
%token NEXT
%token <Ast.Ident.t> NICKNAME
%token NO
%token NONE
%token NOT
%token <int> NUMBER
%token ONCE
%token ONE
%token ONE_ARROW_LONE
%token ONE_ARROW_ONE
%token ONE_ARROW_SET
%token ONE_ARROW_SOME
%token OPEN
%token OR
%token OVERRIDE
%token PLUS
%token PRED
%token PREVIOUS
%token PRIME
%token PRIVATE
%token QALL
%token QLONE
%token QNO
%token QONE
%token QSOME
%token RBRACE
%token RBRACKET
%token RPAREN
%token RPROJ
%token RUN
%token SET
%token SET_ARROW_LONE
%token SET_ARROW_ONE
%token SET_ARROW_SET
%token SET_ARROW_SOME
%token SIG
%token SINCE
%token SLASH
%token SOME
%token SOME_ARROW_LONE
%token SOME_ARROW_ONE
%token SOME_ARROW_SET
%token SOME_ARROW_SOME
%token STAR
%token THIS
%token TILDE
%token UNIV
%token UNTIL
%token VAR
%nonassoc BAR
%left OR
%left IFF
%right implies_as_op
%nonassoc IMPLIES
%nonassoc ELSE
%left AND
%left SINCE UNTIL
%nonassoc ALWAYS EVENTUALLY HISTORICALLY NEXT NOT ONCE PREVIOUS
%nonassoc EQ GT GTE IN LT LTE NEQ
%nonassoc MLONE MONE MSET MSOME
%nonassoc LONE NO ONE SOME
%left MINUS PLUS
%nonassoc CARD
%left OVERRIDE
%left INTER
%right LONE_ARROW_LONE LONE_ARROW_ONE LONE_ARROW_SET LONE_ARROW_SOME ONE_ARROW_LONE ONE_ARROW_ONE ONE_ARROW_SET ONE_ARROW_SOME SET_ARROW_LONE SET_ARROW_ONE SET_ARROW_SET SET_ARROW_SOME SOME_ARROW_LONE SOME_ARROW_ONE SOME_ARROW_SET SOME_ARROW_SOME
%left LPROJ
%left RPROJ
%left LBRACKET
%left DOT
%nonassoc CARET STAR TILDE
%nonassoc PRIME
%type <Ast.File.file> file
%%

option_IDENT_:
  
    {    ( None )}
| x = IDENT
    {    ( Some x )}

option_PRIVATE_:
  
    {    ( None )}
| x = PRIVATE
    {    ( Some x )}

option_block_:
  
    {    ( None )}
| x = block
    {    ( Some x )}

option_first_NICKNAME_COLON__:
  
    {    ( None )}
| x = NICKNAME _2 = COLON
    {let x =            ( x ) in
    ( Some x )}

option_module_decl_:
  
    {    ( None )}
| x = module_decl
    {    ( Some x )}

option_punning_:
  
    {    ( None )}
| x = punning
    {    ( Some x )}

option_scope_:
  
    {    ( None )}
| x = scope
    {    ( Some x )}

option_sigExt_:
  
    {    ( None )}
| x = sigExt
    {    ( Some x )}

loption_brackets_comma_sep_decl___:
  
    {    ( [] )}
| _1 = LBRACKET xs = loption_separated_nonempty_list_COMMA_decl__ _3 = RBRACKET
    {let x =
  let x =
    let x =
      let xs =     ( xs ) in
          ( xs )
    in
        ( x )
  in
      ( x )
in
    ( x )}

loption_brackets_comma_sep1_param___:
  
    {    ( [] )}
| _1 = LBRACKET xs = separated_nonempty_list_COMMA_param_ _3 = RBRACKET
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}

loption_brackets_comma_sep1_qname___:
  
    {    ( [] )}
| _1 = LBRACKET xs = separated_nonempty_list_COMMA_qname_ _3 = RBRACKET
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}

loption_comma_sep1_typescope__:
  
    {    ( [] )}
| xs = separated_nonempty_list_COMMA_typescope_
    {let x =     ( xs ) in
    ( x )}

loption_second_BUT_comma_sep1_typescope___:
  
    {    ( [] )}
| _1 = BUT xs = separated_nonempty_list_COMMA_typescope_
    {let x =
  let y =     ( xs ) in
            ( y )
in
    ( x )}

loption_separated_nonempty_list_COMMA_decl__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_decl_
    {    ( x )}

list_expr_:
  
    {    ( [] )}
| x = expr xs = list_expr_
    {    ( x :: xs )}

list_import_:
  
    {    ( [] )}
| x = import xs = list_import_
    {    ( x :: xs )}

list_paragraph_or_cmd_:
  
    {    ( [] )}
| x = paragraph_or_cmd xs = list_paragraph_or_cmd_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_IDENT_:
  x = IDENT
    {    ( [ x ] )}
| x = IDENT _2 = COMMA xs = separated_nonempty_list_COMMA_IDENT_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_decl_:
  x = decl
    {    ( [ x ] )}
| x = decl _2 = COMMA xs = separated_nonempty_list_COMMA_decl_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_expr_:
  x = expr
    {    ( [ x ] )}
| x = expr _2 = COMMA xs = separated_nonempty_list_COMMA_expr_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_let_decl_:
  x = let_decl
    {    ( [ x ] )}
| x = let_decl _2 = COMMA xs = separated_nonempty_list_COMMA_let_decl_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_param_:
  x = param
    {    ( [ x ] )}
| x = param _2 = COMMA xs = separated_nonempty_list_COMMA_param_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_qname_:
  x = qname
    {    ( [ x ] )}
| x = qname _2 = COMMA xs = separated_nonempty_list_COMMA_qname_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_typescope_:
  x = typescope
    {    ( [ x ] )}
| x = typescope _2 = COMMA xs = separated_nonempty_list_COMMA_typescope_
    {    ( x :: xs )}

separated_nonempty_list_PLUS_qname_:
  x = qname
    {    ( [ x ] )}
| x = qname _2 = PLUS xs = separated_nonempty_list_PLUS_qname_
    {    ( x :: xs )}

separated_nonempty_list_SLASH_IDENT_:
  x = IDENT
    {    ( [ x ] )}
| x = IDENT _2 = SLASH xs = separated_nonempty_list_SLASH_IDENT_
    {    ( x :: xs )}

right_flexible_list_COMMA_decl_:
  
    {    ( [] )}
| x = decl
    {    ( [x] )}
| x = decl _2 = COMMA xs = right_flexible_list_COMMA_decl_
    {    ( x :: xs )}

cmd:
  c = named_cmd
    {let _2 =     ( None ) in
 ( c )}
| c = named_cmd x = EXPECT y = NUMBER
    {let _2 =
  let x =     ( (x, y) ) in
      ( Some x )
in
 ( c )}
| b = block_cmd
    {let _2 =     ( None ) in
 ( b )}
| b = block_cmd x = EXPECT y = NUMBER
    {let _2 =
  let x =     ( (x, y) ) in
      ( Some x )
in
 ( b )}

named_cmd:
  nick = option_first_NICKNAME_COLON__ _1 = RUN qname = qname scope = option_scope_
    {let cmd =  ( Run ) in
 ( make_named_cmd ~qname ~cmd ~scope ~nick )}
| nick = option_first_NICKNAME_COLON__ _1 = CHECK qname = qname scope = option_scope_
    {let cmd =  ( Check ) in
 ( make_named_cmd ~qname ~cmd ~scope ~nick )}

block_cmd:
  nick = option_first_NICKNAME_COLON__ _1 = RUN block = block scope = option_scope_
    {let cmd =  ( Run ) in
 ( make_block_cmd ~block ~cmd ~scope ~nick )}
| nick = option_first_NICKNAME_COLON__ _1 = CHECK block = block scope = option_scope_
    {let cmd =  ( Check ) in
 ( make_block_cmd ~block ~cmd ~scope ~nick )}

scope:
  _1 = FOR num = NUMBER typescopes = loption_second_BUT_comma_sep1_typescope___
    { ( make_scope_for_but ~num ~typescopes )}
| _1 = FOR typescopes = loption_comma_sep1_typescope__
    { ( make_scope_for_types ~typescopes )}

typescope:
  num = NUMBER sig_name = qname
    {let exactly =  ( false ) in
 ( make_typescope ~exactly ~num ~sig_name )}
| _1 = EXACTLY num = NUMBER sig_name = qname
    {let exactly =  ( true ) in
 ( make_typescope ~exactly ~num ~sig_name )}

expr:
  e = prim_expr
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
 ( make_expr (Location.make _startpos _endpos) e )}
| _1 = LPAREN x = expr _3 = RPAREN
    {let e =
  let x =     ( x ) in
      ( x )
in
 ( e )}

prim_expr:
  _1 = THIS
    { ( EThis )}
| _1 = AT n = IDENT
    { ( EAtName n )}
| q = qname
    { ( EQualName q )}
| b = block
    { ( EBlock b )}
| n = NUMBER
    { ( EConst (CNum n) )}
| _1 = MINUS n = NUMBER
    { ( EConst (CNum (- n))  )}
| _1 = UNIV
    { ( EConst CUniv )}
| _1 = IDEN
    { ( EConst CIden )}
| _1 = NONE
    { ( EConst CNone )}
| _1 = INT
    { ( EConst CInt )}
| _1 = LET xs = separated_nonempty_list_COMMA_let_decl_ block = block_or_bar
    {let lds =     ( xs ) in
 ( ELet (lds, block) )}
| _1 = QALL xs = separated_nonempty_list_COMMA_decl_ block = block_or_bar
    {let ds =     ( xs ) in
let quant =       ( `All ) in
 ( EQuant (quant, ds, block) )}
| _1 = QSOME xs = separated_nonempty_list_COMMA_decl_ block = block_or_bar
    {let ds =     ( xs ) in
let quant =          ( `Some ) in
 ( EQuant (quant, ds, block) )}
| _1 = QNO xs = separated_nonempty_list_COMMA_decl_ block = block_or_bar
    {let ds =     ( xs ) in
let quant =        ( `No ) in
 ( EQuant (quant, ds, block) )}
| _1 = QLONE xs = separated_nonempty_list_COMMA_decl_ block = block_or_bar
    {let ds =     ( xs ) in
let quant =          ( `Lone ) in
 ( EQuant (quant, ds, block) )}
| _1 = QONE xs = separated_nonempty_list_COMMA_decl_ block = block_or_bar
    {let ds =     ( xs ) in
let quant =         ( `One ) in
 ( EQuant (quant, ds, block) )}
| cdt = expr _2 = IMPLIES then_ = expr %prec implies_as_op
    { ( EBinary (cdt, BImp, then_) )}
| cdt = expr _2 = IMPLIES then_ = expr _4 = ELSE else_ = expr
    { ( EIte (cdt, then_, else_) )}
| e1 = expr _1 = OR e2 = expr
    {let op =  ( BOr ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = IFF e2 = expr
    {let op =  ( BIff) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = AND e2 = expr
    {let op =  ( BAnd ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = MINUS e2 = expr
    {let op =  ( BMinus ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = PLUS e2 = expr
    {let op =  ( BUnion ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = OVERRIDE e2 = expr
    {let op =  ( BOver ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = INTER e2 = expr
    {let op =  ( BInter ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = LPROJ e2 = expr
    {let op =  ( BLProj ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = RPROJ e2 = expr
    {let op =  ( BRProj ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = DOT e2 = expr
    {let op =  ( BDot ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = UNTIL e2 = expr
    {let op =  ( BUntil ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = SINCE e2 = expr
    {let op =  ( BSince ) in
 ( EBinary (e1, op, e2) )}
| e1 = expr _1 = IN e2 = expr
    {let op =  ( CIn ) in
let neg =  ( false ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = GT e2 = expr
    {let op =  ( CGt ) in
let neg =  ( false ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = GTE e2 = expr
    {let op =  ( CGte ) in
let neg =  ( false ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = LT e2 = expr
    {let op =  ( CLt ) in
let neg =  ( false ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = LTE e2 = expr
    {let op =  ( CLte ) in
let neg =  ( false ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NEQ e2 = expr
    {let op =  ( CNeq ) in
let neg =  ( false ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = EQ e2 = expr
    {let op =  ( CEq ) in
let neg =  ( false ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NOT _1_inlined1 = IN e2 = expr
    {let op =  ( CIn ) in
let neg =  ( true ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NOT _1_inlined1 = GT e2 = expr
    {let op =  ( CGt ) in
let neg =  ( true ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NOT _1_inlined1 = GTE e2 = expr
    {let op =  ( CGte ) in
let neg =  ( true ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NOT _1_inlined1 = LT e2 = expr
    {let op =  ( CLt ) in
let neg =  ( true ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NOT _1_inlined1 = LTE e2 = expr
    {let op =  ( CLte ) in
let neg =  ( true ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NOT _1_inlined1 = NEQ e2 = expr
    {let op =  ( CNeq ) in
let neg =  ( true ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| e1 = expr _1 = NOT _1_inlined1 = EQ e2 = expr
    {let op =  ( CEq ) in
let neg =  ( true ) in
 ( EComp (e1, (if neg then negate op else op), e2) )}
| _1 = NOT e = expr
    {let op =  ( UNot ) in
 ( EUnary (op, e) )}
| _1 = SOME e = expr
    {let op =  ( UQual `Some ) in
 ( EUnary (op, e) )}
| _1 = NO e = expr
    {let op =  ( UQual `No ) in
 ( EUnary (op, e) )}
| _1 = LONE e = expr
    {let op =  ( UQual `Lone ) in
 ( EUnary (op, e) )}
| _1 = ONE e = expr
    {let op =  ( UQual `One ) in
 ( EUnary (op, e) )}
| _1 = MSET e = expr
    {let op =  ( UMult `Set ) in
 ( EUnary (op, e) )}
| _1 = MSOME e = expr
    {let op =  ( UMult `Some ) in
 ( EUnary (op, e) )}
| _1 = MLONE e = expr
    {let op =  ( UMult `Lone ) in
 ( EUnary (op, e) )}
| _1 = MONE e = expr
    {let op =  ( UMult `One ) in
 ( EUnary (op, e) )}
| _1 = CARD e = expr
    {let op =  ( UCard ) in
 ( EUnary (op, e) )}
| _1 = TILDE e = expr
    {let op =  ( UTilde ) in
 ( EUnary (op, e) )}
| _1 = CARET e = expr
    {let op =  ( UHat ) in
 ( EUnary (op, e) )}
| _1 = STAR e = expr
    {let op =  ( UStar ) in
 ( EUnary (op, e) )}
| _1 = NEXT e = expr
    {let op =  ( UNext ) in
 ( EUnary (op, e) )}
| _1 = ALWAYS e = expr
    {let op =  ( UAlways ) in
 ( EUnary (op, e) )}
| _1 = EVENTUALLY e = expr
    {let op =  ( UEventually ) in
 ( EUnary (op, e) )}
| _1 = ONCE e = expr
    {let op =  ( UOnce ) in
 ( EUnary (op, e) )}
| _1 = HISTORICALLY e = expr
    {let op =  ( UHist ) in
 ( EUnary (op, e) )}
| _1 = PREVIOUS e = expr
    {let op =  ( UPrevious ) in
 ( EUnary (op, e) )}
| e = expr _2 = PRIME
    { ( EUnary (UPrime, e) )}
| e1 = expr _1 = ONE_ARROW_ONE e2 = expr
    {let cards =                ( (`One, `One) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = ONE_ARROW_LONE e2 = expr
    {let cards =                    ( (`One, `Lone) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = ONE_ARROW_SET e2 = expr
    {let cards =                   ( (`One, `Set) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = ONE_ARROW_SOME e2 = expr
    {let cards =                    ( (`One, `Some) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = LONE_ARROW_ONE e2 = expr
    {let cards =                    ( (`Lone, `One) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = LONE_ARROW_LONE e2 = expr
    {let cards =                     ( (`Lone, `Lone) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = LONE_ARROW_SET e2 = expr
    {let cards =                    ( (`Lone, `Set) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = LONE_ARROW_SOME e2 = expr
    {let cards =                     ( (`Lone, `Some) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SOME_ARROW_ONE e2 = expr
    {let cards =                    ( (`Some, `One) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SOME_ARROW_LONE e2 = expr
    {let cards =                     ( (`Some, `Lone) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SOME_ARROW_SET e2 = expr
    {let cards =                    ( (`Some, `Set) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SOME_ARROW_SOME e2 = expr
    {let cards =                     ( (`Some, `Some) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SET_ARROW_ONE e2 = expr
    {let cards =                   ( (`Set, `One) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SET_ARROW_LONE e2 = expr
    {let cards =                    ( (`Set, `Lone) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SET_ARROW_SET e2 = expr
    {let cards =                   ( (`Set, `Set) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| e1 = expr _1 = SET_ARROW_SOME e2 = expr
    {let cards =                    ( (`Set, `Some) ) in
 ( let (left, right) = cards in
   ECart (e1, left, right, e2) )}
| fct = expr _1 = LBRACKET xs = separated_nonempty_list_COMMA_expr_ _3 = RBRACKET
    {let args =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
 ( EApp (fct, args) )}
| _1 = LBRACE xs = separated_nonempty_list_COMMA_decl_ y = block_or_bar _3 = RBRACE
    {let body =
  let x =
    let x =
      let x =     ( xs ) in
          ( (x, y) )
    in
        ( x )
  in
      ( x )
in
 ( ECompr (fst body, snd body) )}

block_or_bar:
  b = block
    { ( b )}
| _1 = BAR e = expr
    { ( [e] )}

block:
  _1 = LBRACE x = list_expr_ _3 = RBRACE
    {let exprs =
  let x =     ( x ) in
      ( x )
in
 ( exprs )}

let_decl:
  name = IDENT _2 = EQ expr = expr
    { ( Ast.Expr.{ name; expr } )}

decl:
  xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON range = expr
    {let is_disjoint_ranges =  ( false ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( false ) in
let is_variable =  ( false ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}
| xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON _1 = DISJ range = expr
    {let is_disjoint_ranges =  ( true ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( false ) in
let is_variable =  ( false ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}
| _1 = DISJ xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON range = expr
    {let is_disjoint_ranges =  ( false ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( true ) in
let is_variable =  ( false ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}
| _1 = DISJ xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON _1_inlined1 = DISJ range = expr
    {let is_disjoint_ranges =  ( true ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( true ) in
let is_variable =  ( false ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}
| _1 = VAR xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON range = expr
    {let is_disjoint_ranges =  ( false ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( false ) in
let is_variable =  ( true ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}
| _1 = VAR xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON _1_inlined1 = DISJ range = expr
    {let is_disjoint_ranges =  ( true ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( false ) in
let is_variable =  ( true ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}
| _1 = VAR _1_inlined1 = DISJ xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON range = expr
    {let is_disjoint_ranges =  ( false ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( true ) in
let is_variable =  ( true ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}
| _1 = VAR _1_inlined1 = DISJ xs = separated_nonempty_list_COMMA_IDENT_ _4 = COLON _1_inlined2 = DISJ range = expr
    {let is_disjoint_ranges =  ( true ) in
let names =     ( xs ) in
let is_disjoint_variables =  ( true ) in
let is_variable =  ( true ) in
 ( Ast.Expr.make_decl ~is_variable ~is_disjoint_variables
     ~names ~is_disjoint_ranges ~range )}

qname:
  ids = separated_nonempty_list_SLASH_IDENT_
    {let this =  ( false ) in
 ( let path, name = split ids in
   Ast.Qname.make ~this ~path ~name )}
| x = THIS y = SLASH ids = separated_nonempty_list_SLASH_IDENT_
    {let this =
  let _1 =     ( (x, y) ) in
   ( true )
in
 ( let path, name = split ids in
   Ast.Qname.make ~this ~path ~name )}

file:
  s = specification _2 = EOF
    { ( s )}

specification:
  m = option_module_decl_ op = list_import_ ps = list_paragraph_or_cmd_
    { ( (m, op, ps) )}

paragraph_or_cmd:
  p = paragraph
    { ( Par p )}
| c = cmd
    { ( Cmd c )}

module_decl:
  _1 = MODULE module_name = qname params = loption_brackets_comma_sep1_param___
    { ( make_module_decl ~module_name ~params )}

param:
  qn = qname
    {let _1 =     ( None ) in
 ( qn )}
| x = EXACTLY qn = qname
    {let _1 =     ( Some x ) in
 ( qn )}

import:
  _1 = OPEN module_name = qname params = loption_brackets_comma_sep1_qname___ pun = option_punning_
    { ( make_import ~module_name ~params ~pun )}

punning:
  _1 = AS name = IDENT
    { ( name )}

paragraph:
  f = factDecl
    { ( Fact f )}
| a = assertDecl
    { ( Assert a )}
| p = predDecl
    { ( Pred p )}
| f = funDecl
    { ( Fun f )}
| e = enumDecl
    { ( Enum e )}
| s = sigDecl
    { ( Sig s )}

factDecl:
  _1 = FACT name = option_IDENT_ body = block
    { ( make_fact ~name ~body )}

assertDecl:
  _1 = ASSERT name = option_IDENT_ body = block
    { ( make_assertion ~name ~body )}

predDecl:
  _1 = option_PRIVATE_ _2 = PRED name = IDENT params = loption_brackets_comma_sep_decl___ body = block
    { ( make_pred ~name ~params ~body )}

funDecl:
  _1 = option_PRIVATE_ _2 = FUN name = IDENT params = loption_brackets_comma_sep_decl___ _5 = COLON returns = expr body = expr
    { ( make_func ~name ~params ~body ~returns )}

enumDecl:
  _1 = ENUM name = IDENT _1_inlined1 = LBRACE xs = separated_nonempty_list_COMMA_IDENT_ _3 = RBRACE
    {let cases =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
 ( make_enum ~name ~cases )}

sigDecl:
  qual = sigQual _3 = SIG xs = separated_nonempty_list_COMMA_IDENT_ extends = option_sigExt_ _1 = LBRACE x = right_flexible_list_COMMA_decl_ _3_inlined1 = RBRACE fact = option_block_
    {let fields =
  let x =     ( x ) in
      ( x )
in
let names =     ( xs ) in
let is_variable =  ( false ) in
 ( make_signature ~is_variable ~is_abstract:(fst qual) ~mult:(snd qual)
     ~names ~extends ~fields ~fact )}
| _1 = VAR qual = sigQual _3 = SIG xs = separated_nonempty_list_COMMA_IDENT_ extends = option_sigExt_ _1_inlined1 = LBRACE x = right_flexible_list_COMMA_decl_ _3_inlined1 = RBRACE fact = option_block_
    {let fields =
  let x =     ( x ) in
      ( x )
in
let names =     ( xs ) in
let is_variable =  ( true ) in
 ( make_signature ~is_variable ~is_abstract:(fst qual) ~mult:(snd qual)
     ~names ~extends ~fields ~fact )}

sigQual:
  
    {let mult =     ( None ) in
let is_abstract =  ( false ) in
     ( (is_abstract, mult))}
| _1 = LONE
    {let mult =
  let x =  ( `Lone ) in
      ( Some x )
in
let is_abstract =  ( false ) in
     ( (is_abstract, mult))}
| _1 = ONE
    {let mult =
  let x =  ( `One ) in
      ( Some x )
in
let is_abstract =  ( false ) in
     ( (is_abstract, mult))}
| _1 = SOME
    {let mult =
  let x =  ( `Some ) in
      ( Some x )
in
let is_abstract =  ( false ) in
     ( (is_abstract, mult))}
| _1 = ABSTRACT
    {let mult =     ( None ) in
let is_abstract =  ( true ) in
     ( (is_abstract, mult))}
| _1 = ABSTRACT _1_inlined1 = LONE
    {let mult =
  let x =  ( `Lone ) in
      ( Some x )
in
let is_abstract =  ( true ) in
     ( (is_abstract, mult))}
| _1 = ABSTRACT _1_inlined1 = ONE
    {let mult =
  let x =  ( `One ) in
      ( Some x )
in
let is_abstract =  ( true ) in
     ( (is_abstract, mult))}
| _1 = ABSTRACT _1_inlined1 = SOME
    {let mult =
  let x =  ( `Some ) in
      ( Some x )
in
let is_abstract =  ( true ) in
     ( (is_abstract, mult))}
| _1 = LONE _2 = ABSTRACT
    {let mult =  ( `Lone ) in
     ( (true, Some mult))}
| _1 = ONE _2 = ABSTRACT
    {let mult =  ( `One ) in
     ( (true, Some mult))}
| _1 = SOME _2 = ABSTRACT
    {let mult =  ( `Some ) in
     ( (true, Some mult))}

sigExt:
  _1 = EXTENDS name = qname
    { ( Extends name )}
| _1 = IN names = separated_nonempty_list_PLUS_qname_
    {   ( In names )}

%%


