State 0:
## Known stack suffix:
##
## LR(1) items:
toplevel' -> . toplevel [ # ]
## Transitions:
-- On COMMAND shift to state 1
-- On CLASS shift to state 2
-- On toplevel shift to state 99
-- On classDecs shift to state 100
-- On classDec shift to state 103
## Reductions:

State 1:
## Known stack suffix:
## COMMAND
## LR(1) items:
classDecs -> COMMAND . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production classDecs -> COMMAND

State 2:
## Known stack suffix:
## CLASS
## LR(1) items:
classDec -> CLASS . ID EXTENDS ID LCURLY fieldDefs constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS . ID EXTENDS ID LCURLY fieldDefs constructorDef RCURLY [ COMMAND CLASS ]
classDec -> CLASS . ID EXTENDS ID LCURLY constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS . ID EXTENDS ID LCURLY constructorDef RCURLY [ COMMAND CLASS ]
## Transitions:
-- On ID shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## CLASS ID
## LR(1) items:
classDec -> CLASS ID . EXTENDS ID LCURLY fieldDefs constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID . EXTENDS ID LCURLY fieldDefs constructorDef RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID . EXTENDS ID LCURLY constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID . EXTENDS ID LCURLY constructorDef RCURLY [ COMMAND CLASS ]
## Transitions:
-- On EXTENDS shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## CLASS ID EXTENDS
## LR(1) items:
classDec -> CLASS ID EXTENDS . ID LCURLY fieldDefs constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS . ID LCURLY fieldDefs constructorDef RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS . ID LCURLY constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS . ID LCURLY constructorDef RCURLY [ COMMAND CLASS ]
## Transitions:
-- On ID shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## CLASS ID EXTENDS ID
## LR(1) items:
classDec -> CLASS ID EXTENDS ID . LCURLY fieldDefs constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID . LCURLY fieldDefs constructorDef RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID . LCURLY constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID . LCURLY constructorDef RCURLY [ COMMAND CLASS ]
## Transitions:
-- On LCURLY shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY . fieldDefs constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID LCURLY . fieldDefs constructorDef RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID LCURLY . constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID LCURLY . constructorDef RCURLY [ COMMAND CLASS ]
## Transitions:
-- On SEMI shift to state 7
-- On ID shift to state 8
-- On fieldDefs shift to state 38
-- On fieldDef shift to state 91
-- On constructorDef shift to state 95
## Reductions:

State 7:
## Known stack suffix:
## SEMI
## LR(1) items:
fieldDefs -> SEMI . [ ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldDefs -> SEMI

State 8:
## Known stack suffix:
## ID
## LR(1) items:
constructorDef -> ID . LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
fieldDef -> ID . ID [ SEMI ]
## Transitions:
-- On LPAREN shift to state 9
-- On ID shift to state 37
## Reductions:

State 9:
## Known stack suffix:
## ID LPAREN
## LR(1) items:
constructorDef -> ID LPAREN . paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On ID shift to state 10
-- On paramDefs shift to state 12
-- On paramDef shift to state 34
## Reductions:
-- On RPAREN
--   reduce production paramDefs ->

State 10:
## Known stack suffix:
## ID
## LR(1) items:
paramDef -> ID . ID [ RPAREN COMMA ]
## Transitions:
-- On ID shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## ID ID
## LR(1) items:
paramDef -> ID ID . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paramDef -> ID ID

State 12:
## Known stack suffix:
## ID LPAREN paramDefs
## LR(1) items:
constructorDef -> ID LPAREN paramDefs . RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On RPAREN shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN . LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On LCURLY shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY . SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On SUPER shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY SUPER
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER . LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On LPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN . argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On ID shift to state 17
-- On argDefs shift to state 18
-- On argDef shift to state 31
## Reductions:
-- On RPAREN
--   reduce production argDefs ->

State 17:
## Known stack suffix:
## ID
## LR(1) items:
argDef -> ID . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argDef -> ID

State 18:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs . RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On RPAREN shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN . SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On SEMI shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI . fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On THIS shift to state 21
-- On fieldAssignmentDefs shift to state 27
-- On fieldAssignmentDef shift to state 29
## Reductions:
-- On RCURLY
--   reduce production fieldAssignmentDefs ->

State 21:
## Known stack suffix:
## THIS
## LR(1) items:
fieldAssignmentDef -> THIS . DOT ID EQ ID SEMI [ THIS RCURLY ]
## Transitions:
-- On DOT shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## THIS DOT
## LR(1) items:
fieldAssignmentDef -> THIS DOT . ID EQ ID SEMI [ THIS RCURLY ]
## Transitions:
-- On ID shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## THIS DOT ID
## LR(1) items:
fieldAssignmentDef -> THIS DOT ID . EQ ID SEMI [ THIS RCURLY ]
## Transitions:
-- On EQ shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## THIS DOT ID EQ
## LR(1) items:
fieldAssignmentDef -> THIS DOT ID EQ . ID SEMI [ THIS RCURLY ]
## Transitions:
-- On ID shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## THIS DOT ID EQ ID
## LR(1) items:
fieldAssignmentDef -> THIS DOT ID EQ ID . SEMI [ THIS RCURLY ]
## Transitions:
-- On SEMI shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## THIS DOT ID EQ ID SEMI
## LR(1) items:
fieldAssignmentDef -> THIS DOT ID EQ ID SEMI . [ THIS RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldAssignmentDef -> THIS DOT ID EQ ID SEMI

State 27:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs . RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On RCURLY shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY
## LR(1) items:
constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY . [ SEMI RCURLY ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructorDef -> ID LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY

State 29:
## Known stack suffix:
## fieldAssignmentDef
## LR(1) items:
fieldAssignmentDefs -> fieldAssignmentDef . fieldAssignmentDefs [ RCURLY ]
## Transitions:
-- On THIS shift to state 21
-- On fieldAssignmentDefs shift to state 30
-- On fieldAssignmentDef shift to state 29
## Reductions:
-- On RCURLY
--   reduce production fieldAssignmentDefs ->

State 30:
## Known stack suffix:
## fieldAssignmentDef fieldAssignmentDefs
## LR(1) items:
fieldAssignmentDefs -> fieldAssignmentDef fieldAssignmentDefs . [ RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldAssignmentDefs -> fieldAssignmentDef fieldAssignmentDefs

State 31:
## Known stack suffix:
## argDef
## LR(1) items:
argDefs -> argDef . [ RPAREN ]
argDefs -> argDef . COMMA argDefs [ RPAREN ]
## Transitions:
-- On COMMA shift to state 32
## Reductions:
-- On RPAREN
--   reduce production argDefs -> argDef

State 32:
## Known stack suffix:
## argDef COMMA
## LR(1) items:
argDefs -> argDef COMMA . argDefs [ RPAREN ]
## Transitions:
-- On ID shift to state 17
-- On argDefs shift to state 33
-- On argDef shift to state 31
## Reductions:
-- On RPAREN
--   reduce production argDefs ->

State 33:
## Known stack suffix:
## argDef COMMA argDefs
## LR(1) items:
argDefs -> argDef COMMA argDefs . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argDefs -> argDef COMMA argDefs

State 34:
## Known stack suffix:
## paramDef
## LR(1) items:
paramDefs -> paramDef . [ RPAREN ]
paramDefs -> paramDef . COMMA paramDefs [ RPAREN ]
## Transitions:
-- On COMMA shift to state 35
## Reductions:
-- On RPAREN
--   reduce production paramDefs -> paramDef

State 35:
## Known stack suffix:
## paramDef COMMA
## LR(1) items:
paramDefs -> paramDef COMMA . paramDefs [ RPAREN ]
## Transitions:
-- On ID shift to state 10
-- On paramDefs shift to state 36
-- On paramDef shift to state 34
## Reductions:
-- On RPAREN
--   reduce production paramDefs ->

State 36:
## Known stack suffix:
## paramDef COMMA paramDefs
## LR(1) items:
paramDefs -> paramDef COMMA paramDefs . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paramDefs -> paramDef COMMA paramDefs

State 37:
## Known stack suffix:
## ID ID
## LR(1) items:
fieldDef -> ID ID . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldDef -> ID ID

State 38:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY fieldDefs
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs . constructorDef methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs . constructorDef RCURLY [ COMMAND CLASS ]
## Transitions:
-- On ID shift to state 39
-- On constructorDef shift to state 40
## Reductions:

State 39:
## Known stack suffix:
## ID
## LR(1) items:
constructorDef -> ID . LPAREN paramDefs RPAREN LCURLY SUPER LPAREN argDefs RPAREN SEMI fieldAssignmentDefs RCURLY [ SEMI RCURLY ID ]
## Transitions:
-- On LPAREN shift to state 9
## Reductions:

State 40:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef . methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef . RCURLY [ COMMAND CLASS ]
## Transitions:
-- On SEMI shift to state 41
-- On RCURLY shift to state 42
-- On ID shift to state 43
-- On methodDefs shift to state 87
-- On methodDef shift to state 89
## Reductions:

State 41:
## Known stack suffix:
## SEMI
## LR(1) items:
methodDefs -> SEMI . [ RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production methodDefs -> SEMI

State 42:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef RCURLY
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef RCURLY . [ COMMAND CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef RCURLY

State 43:
## Known stack suffix:
## ID
## LR(1) items:
methodDef -> ID . ID LPAREN paramDefs RPAREN LCURLY RETURN termDef SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On ID shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## ID ID
## LR(1) items:
methodDef -> ID ID . LPAREN paramDefs RPAREN LCURLY RETURN termDef SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On LPAREN shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## ID ID LPAREN
## LR(1) items:
methodDef -> ID ID LPAREN . paramDefs RPAREN LCURLY RETURN termDef SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On ID shift to state 10
-- On paramDefs shift to state 46
-- On paramDef shift to state 34
## Reductions:
-- On RPAREN
--   reduce production paramDefs ->

State 46:
## Known stack suffix:
## ID ID LPAREN paramDefs
## LR(1) items:
methodDef -> ID ID LPAREN paramDefs . RPAREN LCURLY RETURN termDef SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On RPAREN shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## ID ID LPAREN paramDefs RPAREN
## LR(1) items:
methodDef -> ID ID LPAREN paramDefs RPAREN . LCURLY RETURN termDef SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On LCURLY shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## ID ID LPAREN paramDefs RPAREN LCURLY
## LR(1) items:
methodDef -> ID ID LPAREN paramDefs RPAREN LCURLY . RETURN termDef SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On RETURN shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## ID ID LPAREN paramDefs RPAREN LCURLY RETURN
## LR(1) items:
methodDef -> ID ID LPAREN paramDefs RPAREN LCURLY RETURN . termDef SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On THIS shift to state 50
-- On NEW shift to state 51
-- On LPAREN shift to state 54
-- On ID shift to state 57
-- On termDef shift to state 84
-- On TmVarDef shift to state 67
-- On TmThis shift to state 68
-- On TmObjectCreationDef shift to state 69
-- On TmMethodInvocationDef shift to state 70
-- On TmFieldAccessDef shift to state 71
-- On TmCastDef shift to state 72
## Reductions:

State 50:
## Known stack suffix:
## THIS
## LR(1) items:
TmThis -> THIS . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production TmThis -> THIS

State 51:
## Known stack suffix:
## NEW
## LR(1) items:
TmObjectCreationDef -> NEW . ID LPAREN termDefs RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On ID shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## NEW ID
## LR(1) items:
TmObjectCreationDef -> NEW ID . LPAREN termDefs RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On LPAREN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## NEW ID LPAREN
## LR(1) items:
TmObjectCreationDef -> NEW ID LPAREN . termDefs RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On THIS shift to state 50
-- On NEW shift to state 51
-- On LPAREN shift to state 54
-- On ID shift to state 57
-- On termDefs shift to state 82
-- On termDef shift to state 64
-- On TmVarDef shift to state 67
-- On TmThis shift to state 68
-- On TmObjectCreationDef shift to state 69
-- On TmMethodInvocationDef shift to state 70
-- On TmFieldAccessDef shift to state 71
-- On TmCastDef shift to state 72
## Reductions:
-- On RPAREN
--   reduce production termDefs ->

State 54:
## Known stack suffix:
## LPAREN
## LR(1) items:
TmCastDef -> LPAREN . ID RPAREN termDef [ SEMI RPAREN DOT COMMA # ]
termDef -> LPAREN . TmFieldAccessDef RPAREN [ SEMI RPAREN DOT COMMA # ]
termDef -> LPAREN . TmMethodInvocationDef RPAREN [ SEMI RPAREN DOT COMMA # ]
termDef -> LPAREN . TmObjectCreationDef RPAREN [ SEMI RPAREN DOT COMMA # ]
termDef -> LPAREN . TmCastDef RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On THIS shift to state 50
-- On NEW shift to state 51
-- On LPAREN shift to state 54
-- On ID shift to state 55
-- On termDef shift to state 73
-- On TmVarDef shift to state 67
-- On TmThis shift to state 68
-- On TmObjectCreationDef shift to state 74
-- On TmMethodInvocationDef shift to state 76
-- On TmFieldAccessDef shift to state 78
-- On TmCastDef shift to state 80
## Reductions:

State 55:
## Known stack suffix:
## LPAREN ID
## LR(1) items:
TmCastDef -> LPAREN ID . RPAREN termDef [ SEMI RPAREN DOT COMMA # ]
TmVarDef -> ID . [ DOT ]
## Transitions:
-- On RPAREN shift to state 56
## Reductions:
-- On DOT
--   reduce production TmVarDef -> ID

State 56:
## Known stack suffix:
## LPAREN ID RPAREN
## LR(1) items:
TmCastDef -> LPAREN ID RPAREN . termDef [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On THIS shift to state 50
-- On NEW shift to state 51
-- On LPAREN shift to state 54
-- On ID shift to state 57
-- On termDef shift to state 58
-- On TmVarDef shift to state 67
-- On TmThis shift to state 68
-- On TmObjectCreationDef shift to state 69
-- On TmMethodInvocationDef shift to state 70
-- On TmFieldAccessDef shift to state 71
-- On TmCastDef shift to state 72
## Reductions:

State 57:
## Known stack suffix:
## ID
## LR(1) items:
TmVarDef -> ID . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production TmVarDef -> ID

State 58:
## Known stack suffix:
## LPAREN ID RPAREN termDef
## LR(1) items:
TmCastDef -> LPAREN ID RPAREN termDef . [ SEMI RPAREN DOT COMMA # ]
TmFieldAccessDef -> termDef . DOT ID [ SEMI RPAREN DOT COMMA # ]
TmMethodInvocationDef -> termDef . DOT ID LPAREN termDefs RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On DOT shift to state 59
## Reductions:
-- On SEMI RPAREN COMMA
--   reduce production TmCastDef -> LPAREN ID RPAREN termDef

State 59:
## Known stack suffix:
## termDef DOT
## LR(1) items:
TmFieldAccessDef -> termDef DOT . ID [ SEMI RPAREN DOT COMMA # ]
TmMethodInvocationDef -> termDef DOT . ID LPAREN termDefs RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On ID shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## termDef DOT ID
## LR(1) items:
TmFieldAccessDef -> termDef DOT ID . [ SEMI RPAREN DOT COMMA # ]
TmMethodInvocationDef -> termDef DOT ID . LPAREN termDefs RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On LPAREN shift to state 61
## Reductions:
-- On SEMI RPAREN DOT COMMA
--   reduce production TmFieldAccessDef -> termDef DOT ID

State 61:
## Known stack suffix:
## termDef DOT ID LPAREN
## LR(1) items:
TmMethodInvocationDef -> termDef DOT ID LPAREN . termDefs RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On THIS shift to state 50
-- On NEW shift to state 51
-- On LPAREN shift to state 54
-- On ID shift to state 57
-- On termDefs shift to state 62
-- On termDef shift to state 64
-- On TmVarDef shift to state 67
-- On TmThis shift to state 68
-- On TmObjectCreationDef shift to state 69
-- On TmMethodInvocationDef shift to state 70
-- On TmFieldAccessDef shift to state 71
-- On TmCastDef shift to state 72
## Reductions:
-- On RPAREN
--   reduce production termDefs ->

State 62:
## Known stack suffix:
## termDef DOT ID LPAREN termDefs
## LR(1) items:
TmMethodInvocationDef -> termDef DOT ID LPAREN termDefs . RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On RPAREN shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## termDef DOT ID LPAREN termDefs RPAREN
## LR(1) items:
TmMethodInvocationDef -> termDef DOT ID LPAREN termDefs RPAREN . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production TmMethodInvocationDef -> termDef DOT ID LPAREN termDefs RPAREN

State 64:
## Known stack suffix:
## termDef
## LR(1) items:
TmFieldAccessDef -> termDef . DOT ID [ RPAREN DOT COMMA ]
TmMethodInvocationDef -> termDef . DOT ID LPAREN termDefs RPAREN [ RPAREN DOT COMMA ]
termDefs -> termDef . [ RPAREN ]
termDefs -> termDef . COMMA termDefs [ RPAREN ]
## Transitions:
-- On DOT shift to state 59
-- On COMMA shift to state 65
## Reductions:
-- On RPAREN
--   reduce production termDefs -> termDef

State 65:
## Known stack suffix:
## termDef COMMA
## LR(1) items:
termDefs -> termDef COMMA . termDefs [ RPAREN ]
## Transitions:
-- On THIS shift to state 50
-- On NEW shift to state 51
-- On LPAREN shift to state 54
-- On ID shift to state 57
-- On termDefs shift to state 66
-- On termDef shift to state 64
-- On TmVarDef shift to state 67
-- On TmThis shift to state 68
-- On TmObjectCreationDef shift to state 69
-- On TmMethodInvocationDef shift to state 70
-- On TmFieldAccessDef shift to state 71
-- On TmCastDef shift to state 72
## Reductions:
-- On RPAREN
--   reduce production termDefs ->

State 66:
## Known stack suffix:
## termDef COMMA termDefs
## LR(1) items:
termDefs -> termDef COMMA termDefs . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDefs -> termDef COMMA termDefs

State 67:
## Known stack suffix:
## TmVarDef
## LR(1) items:
termDef -> TmVarDef . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> TmVarDef

State 68:
## Known stack suffix:
## TmThis
## LR(1) items:
termDef -> TmThis . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> TmThis

State 69:
## Known stack suffix:
## TmObjectCreationDef
## LR(1) items:
termDef -> TmObjectCreationDef . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> TmObjectCreationDef

State 70:
## Known stack suffix:
## TmMethodInvocationDef
## LR(1) items:
termDef -> TmMethodInvocationDef . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> TmMethodInvocationDef

State 71:
## Known stack suffix:
## TmFieldAccessDef
## LR(1) items:
termDef -> TmFieldAccessDef . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> TmFieldAccessDef

State 72:
## Known stack suffix:
## TmCastDef
## LR(1) items:
termDef -> TmCastDef . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> TmCastDef

State 73:
## Known stack suffix:
## termDef
## LR(1) items:
TmFieldAccessDef -> termDef . DOT ID [ RPAREN DOT ]
TmMethodInvocationDef -> termDef . DOT ID LPAREN termDefs RPAREN [ RPAREN DOT ]
## Transitions:
-- On DOT shift to state 59
## Reductions:

State 74:
## Known stack suffix:
## LPAREN TmObjectCreationDef
## LR(1) items:
termDef -> TmObjectCreationDef . [ DOT ]
termDef -> LPAREN TmObjectCreationDef . RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On RPAREN shift to state 75
## Reductions:
-- On DOT
--   reduce production termDef -> TmObjectCreationDef

State 75:
## Known stack suffix:
## LPAREN TmObjectCreationDef RPAREN
## LR(1) items:
termDef -> LPAREN TmObjectCreationDef RPAREN . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> LPAREN TmObjectCreationDef RPAREN

State 76:
## Known stack suffix:
## LPAREN TmMethodInvocationDef
## LR(1) items:
termDef -> TmMethodInvocationDef . [ DOT ]
termDef -> LPAREN TmMethodInvocationDef . RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On RPAREN shift to state 77
## Reductions:
-- On DOT
--   reduce production termDef -> TmMethodInvocationDef

State 77:
## Known stack suffix:
## LPAREN TmMethodInvocationDef RPAREN
## LR(1) items:
termDef -> LPAREN TmMethodInvocationDef RPAREN . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> LPAREN TmMethodInvocationDef RPAREN

State 78:
## Known stack suffix:
## LPAREN TmFieldAccessDef
## LR(1) items:
termDef -> TmFieldAccessDef . [ DOT ]
termDef -> LPAREN TmFieldAccessDef . RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On RPAREN shift to state 79
## Reductions:
-- On DOT
--   reduce production termDef -> TmFieldAccessDef

State 79:
## Known stack suffix:
## LPAREN TmFieldAccessDef RPAREN
## LR(1) items:
termDef -> LPAREN TmFieldAccessDef RPAREN . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> LPAREN TmFieldAccessDef RPAREN

State 80:
## Known stack suffix:
## LPAREN TmCastDef
## LR(1) items:
termDef -> TmCastDef . [ DOT ]
termDef -> LPAREN TmCastDef . RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On RPAREN shift to state 81
## Reductions:
-- On DOT
--   reduce production termDef -> TmCastDef

State 81:
## Known stack suffix:
## LPAREN TmCastDef RPAREN
## LR(1) items:
termDef -> LPAREN TmCastDef RPAREN . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termDef -> LPAREN TmCastDef RPAREN

State 82:
## Known stack suffix:
## NEW ID LPAREN termDefs
## LR(1) items:
TmObjectCreationDef -> NEW ID LPAREN termDefs . RPAREN [ SEMI RPAREN DOT COMMA # ]
## Transitions:
-- On RPAREN shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## NEW ID LPAREN termDefs RPAREN
## LR(1) items:
TmObjectCreationDef -> NEW ID LPAREN termDefs RPAREN . [ SEMI RPAREN DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production TmObjectCreationDef -> NEW ID LPAREN termDefs RPAREN

State 84:
## Known stack suffix:
## ID ID LPAREN paramDefs RPAREN LCURLY RETURN termDef
## LR(1) items:
TmFieldAccessDef -> termDef . DOT ID [ SEMI DOT ]
TmMethodInvocationDef -> termDef . DOT ID LPAREN termDefs RPAREN [ SEMI DOT ]
methodDef -> ID ID LPAREN paramDefs RPAREN LCURLY RETURN termDef . SEMI RCURLY [ SEMI ID ]
## Transitions:
-- On SEMI shift to state 85
-- On DOT shift to state 59
## Reductions:

State 85:
## Known stack suffix:
## ID ID LPAREN paramDefs RPAREN LCURLY RETURN termDef SEMI
## LR(1) items:
methodDef -> ID ID LPAREN paramDefs RPAREN LCURLY RETURN termDef SEMI . RCURLY [ SEMI ID ]
## Transitions:
-- On RCURLY shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## ID ID LPAREN paramDefs RPAREN LCURLY RETURN termDef SEMI RCURLY
## LR(1) items:
methodDef -> ID ID LPAREN paramDefs RPAREN LCURLY RETURN termDef SEMI RCURLY . [ SEMI ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production methodDef -> ID ID LPAREN paramDefs RPAREN LCURLY RETURN termDef SEMI RCURLY

State 87:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef methodDefs
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef methodDefs . RCURLY [ COMMAND CLASS ]
## Transitions:
-- On RCURLY shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef methodDefs RCURLY
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef methodDefs RCURLY . [ COMMAND CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production classDec -> CLASS ID EXTENDS ID LCURLY fieldDefs constructorDef methodDefs RCURLY

State 89:
## Known stack suffix:
## methodDef
## LR(1) items:
methodDefs -> methodDef . methodDefs [ RCURLY ]
## Transitions:
-- On SEMI shift to state 41
-- On ID shift to state 43
-- On methodDefs shift to state 90
-- On methodDef shift to state 89
## Reductions:

State 90:
## Known stack suffix:
## methodDef methodDefs
## LR(1) items:
methodDefs -> methodDef methodDefs . [ RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production methodDefs -> methodDef methodDefs

State 91:
## Known stack suffix:
## fieldDef
## LR(1) items:
fieldDefs -> fieldDef . SEMI fieldDefs [ ID ]
## Transitions:
-- On SEMI shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## fieldDef SEMI
## LR(1) items:
fieldDefs -> fieldDef SEMI . fieldDefs [ ID ]
## Transitions:
-- On SEMI shift to state 7
-- On ID shift to state 93
-- On fieldDefs shift to state 94
-- On fieldDef shift to state 91
## Reductions:

State 93:
## Known stack suffix:
## ID
## LR(1) items:
fieldDef -> ID . ID [ SEMI ]
## Transitions:
-- On ID shift to state 37
## Reductions:

State 94:
## Known stack suffix:
## fieldDef SEMI fieldDefs
## LR(1) items:
fieldDefs -> fieldDef SEMI fieldDefs . [ ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldDefs -> fieldDef SEMI fieldDefs

State 95:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY constructorDef
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY constructorDef . methodDefs RCURLY [ COMMAND CLASS ]
classDec -> CLASS ID EXTENDS ID LCURLY constructorDef . RCURLY [ COMMAND CLASS ]
## Transitions:
-- On SEMI shift to state 41
-- On RCURLY shift to state 96
-- On ID shift to state 43
-- On methodDefs shift to state 97
-- On methodDef shift to state 89
## Reductions:

State 96:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY constructorDef RCURLY
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY constructorDef RCURLY . [ COMMAND CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production classDec -> CLASS ID EXTENDS ID LCURLY constructorDef RCURLY

State 97:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY constructorDef methodDefs
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY constructorDef methodDefs . RCURLY [ COMMAND CLASS ]
## Transitions:
-- On RCURLY shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## CLASS ID EXTENDS ID LCURLY constructorDef methodDefs RCURLY
## LR(1) items:
classDec -> CLASS ID EXTENDS ID LCURLY constructorDef methodDefs RCURLY . [ COMMAND CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production classDec -> CLASS ID EXTENDS ID LCURLY constructorDef methodDefs RCURLY

State 99:
## Known stack suffix:
## toplevel
## LR(1) items:
toplevel' -> toplevel . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept toplevel

State 100:
## Known stack suffix:
## classDecs
## LR(1) items:
toplevel -> classDecs . COLON termDef [ # ]
## Transitions:
-- On COLON shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## classDecs COLON
## LR(1) items:
toplevel -> classDecs COLON . termDef [ # ]
## Transitions:
-- On THIS shift to state 50
-- On NEW shift to state 51
-- On LPAREN shift to state 54
-- On ID shift to state 57
-- On termDef shift to state 102
-- On TmVarDef shift to state 67
-- On TmThis shift to state 68
-- On TmObjectCreationDef shift to state 69
-- On TmMethodInvocationDef shift to state 70
-- On TmFieldAccessDef shift to state 71
-- On TmCastDef shift to state 72
## Reductions:

State 102:
## Known stack suffix:
## classDecs COLON termDef
## LR(1) items:
TmFieldAccessDef -> termDef . DOT ID [ DOT # ]
TmMethodInvocationDef -> termDef . DOT ID LPAREN termDefs RPAREN [ DOT # ]
toplevel -> classDecs COLON termDef . [ # ]
## Transitions:
-- On DOT shift to state 59
## Reductions:

State 103:
## Known stack suffix:
## classDec
## LR(1) items:
classDecs -> classDec . classDecs [ COLON ]
## Transitions:
-- On COMMAND shift to state 1
-- On CLASS shift to state 2
-- On classDecs shift to state 104
-- On classDec shift to state 103
## Reductions:

State 104:
## Known stack suffix:
## classDec classDecs
## LR(1) items:
classDecs -> classDec classDecs . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production classDecs -> classDec classDecs

