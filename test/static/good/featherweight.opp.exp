File "featherweight.mly", line 47, characters 28-38:
Warning: the token APOSTROPHE is unused.
File "featherweight.mly", line 49, characters 28-33:
Warning: the token ARROW is unused.
File "featherweight.mly", line 50, characters 28-32:
Warning: the token BANG is unused.
File "featherweight.mly", line 51, characters 28-33:
Warning: the token BARGT is unused.
File "featherweight.mly", line 52, characters 28-37:
Warning: the token BARRCURLY is unused.
File "featherweight.mly", line 53, characters 28-38:
Warning: the token BARRSQUARE is unused.
File "featherweight.mly", line 55, characters 28-38:
Warning: the token COLONCOLON is unused.
File "featherweight.mly", line 56, characters 28-35:
Warning: the token COLONEQ is unused.
File "featherweight.mly", line 57, characters 28-37:
Warning: the token COLONHASH is unused.
File "featherweight.mly", line 59, characters 28-34:
Warning: the token DARROW is unused.
File "featherweight.mly", line 60, characters 28-35:
Warning: the token DDARROW is unused.
File "featherweight.mly", line 48, characters 28-34:
Warning: the token DQUOTE is unused.
File "featherweight.mly", line 62, characters 28-31:
Warning: the token EOF is unused.
File "featherweight.mly", line 64, characters 28-32:
Warning: the token EQEQ is unused.
File "featherweight.mly", line 65, characters 28-34:
Warning: the token EXISTS is unused.
File "featherweight.mly", line 42, characters 38-44:
Warning: the token FLOATV is unused.
File "featherweight.mly", line 66, characters 28-30:
Warning: the token GT is unused.
File "featherweight.mly", line 67, characters 28-32:
Warning: the token HASH is unused.
File "featherweight.mly", line 41, characters 36-40:
Warning: the token INTV is unused.
File "featherweight.mly", line 69, characters 28-37:
Warning: the token LCURLYBAR is unused.
File "featherweight.mly", line 70, characters 28-37:
Warning: the token LEFTARROW is unused.
File "featherweight.mly", line 72, characters 28-35:
Warning: the token LSQUARE is unused.
File "featherweight.mly", line 73, characters 28-38:
Warning: the token LSQUAREBAR is unused.
File "featherweight.mly", line 74, characters 28-30:
Warning: the token LT is unused.
File "featherweight.mly", line 77, characters 28-35:
Warning: the token RSQUARE is unused.
File "featherweight.mly", line 79, characters 28-33:
Warning: the token SLASH is unused.
File "featherweight.mly", line 80, characters 28-32:
Warning: the token STAR is unused.
File "featherweight.mly", line 43, characters 39-46:
Warning: the token STRINGV is unused.
File "featherweight.mly", line 81, characters 28-36:
Warning: the token TRIANGLE is unused.
File "featherweight.mly", line 82, characters 28-34:
Warning: the token USCORE is unused.
File "featherweight.mly", line 83, characters 28-32:
Warning: the token VBAR is unused.
%{
open Support.Error
open Support.Pervasive
open Syntax
%}
%start toplevel
%token <Support.Error.info> APOSTROPHE
%token <Support.Error.info> ARROW
%token <Support.Error.info> BANG
%token <Support.Error.info> BARGT
%token <Support.Error.info> BARRCURLY
%token <Support.Error.info> BARRSQUARE
%token <Support.Error.info> CLASS
%token <Support.Error.info> COLON
%token <Support.Error.info> COLONCOLON
%token <Support.Error.info> COLONEQ
%token <Support.Error.info> COLONHASH
%token <Support.Error.info> COMMA
%token <Support.Error.info> COMMAND
%token <Support.Error.info> DARROW
%token <Support.Error.info> DDARROW
%token <Support.Error.info> DOT
%token <Support.Error.info> DQUOTE
%token <Support.Error.info> EOF
%token <Support.Error.info> EQ
%token <Support.Error.info> EQEQ
%token <Support.Error.info> EXISTS
%token <Support.Error.info> EXTENDS
%token <float Support.Error.withinfo> FLOATV
%token <Support.Error.info> GT
%token <Support.Error.info> HASH
%token <string Support.Error.withinfo> ID
%token <int Support.Error.withinfo> INTV
%token <Support.Error.info> LCURLY
%token <Support.Error.info> LCURLYBAR
%token <Support.Error.info> LEFTARROW
%token <Support.Error.info> LPAREN
%token <Support.Error.info> LSQUARE
%token <Support.Error.info> LSQUAREBAR
%token <Support.Error.info> LT
%token <Support.Error.info> NEW
%token <Support.Error.info> RCURLY
%token <Support.Error.info> RETURN
%token <Support.Error.info> RPAREN
%token <Support.Error.info> RSQUARE
%token <Support.Error.info> SEMI
%token <Support.Error.info> SLASH
%token <Support.Error.info> STAR
%token <string Support.Error.withinfo> STRINGV
%token <Support.Error.info> SUPER
%token <Support.Error.info> THIS
%token <Support.Error.info> TRIANGLE
%token <Support.Error.info> USCORE
%token <Support.Error.info> VBAR
%type < Syntax.program > toplevel
%%

toplevel:
  _1 = classDecs _2 = COLON _3 = termDef
    {   ( Program(_1,_3) )}

classDecs:
  _1 = COMMAND
    {      ( [] )}
| _1 = classDec _2 = classDecs
    {      (  let decl = _1 in
          let decls = _2 in
	      decl::decls )}

classDec:
  _1 = CLASS _2 = ID _3 = EXTENDS _4 = ID _5 = LCURLY _6 = fieldDefs _7 = constructorDef _8 = methodDefs _9 = RCURLY
    {      ( Class (Name(_2.v), SuperName(_4.v), _6, _7, _8) )}
| _1 = CLASS _2 = ID _3 = EXTENDS _4 = ID _5 = LCURLY _6 = fieldDefs _7 = constructorDef _8 = RCURLY
    {      ( Class (Name(_2.v), SuperName(_4.v), _6, _7, []) )}
| _1 = CLASS _2 = ID _3 = EXTENDS _4 = ID _5 = LCURLY _6 = constructorDef _7 = methodDefs _8 = RCURLY
    {      ( Class (Name(_2.v), SuperName(_4.v), [], _6, _7) )}
| _1 = CLASS _2 = ID _3 = EXTENDS _4 = ID _5 = LCURLY _6 = constructorDef _7 = RCURLY
    {      ( Class (Name(_2.v), SuperName(_4.v), [], _6, []) )}

fieldDefs:
  _1 = SEMI
    {   ( [] )}
| _1 = fieldDef _2 = SEMI _3 = fieldDefs
    {   ( let fDef = _1 in
		  let fDefs = _3 in
		  fDef::fDefs )}

fieldDef:
  _1 = ID _2 = ID
    {   ( Field(Type(_1.v), Name(_2.v)) )}

constructorDef:
  _1 = ID _2 = LPAREN _3 = paramDefs _4 = RPAREN _5 = LCURLY _6 = SUPER _7 = LPAREN _8 = argDefs _9 = RPAREN _10 = SEMI _11 = fieldAssignmentDefs _12 = RCURLY
    {   ( Constructor(Name(_1.v), _3, SuperConstructorCall(_8), _11) )}

paramDefs:
  
    {     ( [] )}
| _1 = paramDef
    {      ( let pDef = _1 in
          let pDefs = [] in
          pDef::pDefs )}
| _1 = paramDef _2 = COMMA _3 = paramDefs
    {      ( let pDef = _1 in
          let pDefs = _3 in
          pDef::pDefs )}

paramDef:
  _1 = ID _2 = ID
    {      ( Param (Type(_1.v), Name(_2.v)) )}

argDefs:
  
    {      (	[] )}
| _1 = argDef
    {      (	let aDef = _1 in
	  let aDefs = [] in
	  aDef::aDefs )}
| _1 = argDef _2 = COMMA _3 = argDefs
    {      (	let aDef = _1 in
	  let aDefs = _3 in
	  aDef::aDefs )}

argDef:
  _1 = ID
    {      ( Arg(_1.v) )}

fieldAssignmentDefs:
  
    {      ( [] )}
| _1 = fieldAssignmentDef _2 = fieldAssignmentDefs
    {      ( let faDef = _1 in
          let faDefs = _2 in
	  faDef::faDefs )}

fieldAssignmentDef:
  _1 = THIS _2 = DOT _3 = ID _4 = EQ _5 = ID _6 = SEMI
    {      ( FieldAssignment (Name(_3.v), Value(_5.v)) )}

methodDefs:
  _1 = SEMI
    {      ( [] )}
| _1 = methodDef _2 = methodDefs
    {      ( let mDef = _1 in
          let mDefs = _2 in
	      mDef::mDefs )}

methodDef:
  _1 = ID _2 = ID _3 = LPAREN _4 = paramDefs _5 = RPAREN _6 = LCURLY _7 = RETURN _8 = termDef _9 = SEMI _10 = RCURLY
    {   ( Method(ReturnType(_1.v),Name(_2.v),_4,_8) )}

termDef:
  _1 = TmVarDef
    {      ( _1 )}
| _1 = TmFieldAccessDef
    {      ( _1 )}
| _1 = TmMethodInvocationDef
    {      ( _1 )}
| _1 = TmObjectCreationDef
    {      ( _1 )}
| _1 = TmCastDef
    {      ( _1 )}
| _1 = TmThis
    {      ( _1 )}
| _1 = LPAREN _2 = TmFieldAccessDef _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = TmMethodInvocationDef _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = TmObjectCreationDef _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = TmCastDef _3 = RPAREN
    {      ( _2 )}

TmThis:
  _1 = THIS
    {     ( TmVar("this") )}

TmVarDef:
  _1 = ID
    {   ( TmVar(_1.v) )}

TmFieldAccessDef:
  _1 = termDef _2 = DOT _3 = ID
    {   ( TmFieldAccess(_1,_3.v) )}

TmMethodInvocationDef:
  _1 = termDef _2 = DOT _3 = ID _4 = LPAREN _5 = termDefs _6 = RPAREN
    {   ( TmMethodInvocation(_1,_3.v,_5) )}

TmObjectCreationDef:
  _1 = NEW _2 = ID _3 = LPAREN _4 = termDefs _5 = RPAREN
    {   ( TmObjectCreation(_2.v,_4) )}

TmCastDef:
  _1 = LPAREN _2 = ID _3 = RPAREN _4 = termDef
    {   ( TmCast(_2.v,_4) )}

termDefs:
  
    {      ( [] )}
| _1 = termDef
    {      ( let tDef = _1 in
          let tDefs = [] in
          tDef::tDefs )}
| _1 = termDef _2 = COMMA _3 = termDefs
    {      ( let tDef = _1 in
          let tDefs = _3 in
          tDef::tDefs )}

%%
