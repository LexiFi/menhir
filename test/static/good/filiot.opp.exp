File "filiot.mly", line 70, characters 7-10:
Warning: the token DOT is unused.
File "filiot.mly", line 90, characters 13-16:
Warning: the token INT is unused.
File "filiot.mly", line 69, characters 17-22:
Warning: the token TILDA is unused.
%{
(****************************************************************
Binary Tree Automata Library (for OCaml)
Copyright (C) 2005 Emmanuel Filiot

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

version 1.3
contact : filiot@lifl.fr
*****************************************************************)

  open Parsed_formula
  open Error_handler
  let  _ = "meuh"

  type quant = Ex1 | Ex2 | All1 | All2

  let var_list_to_formula ty formula pos l =

    let rec aux = function

      | [] -> formula
      | x::xs ->
	  match ty with
	      Ex1 -> Exists1 (x, aux xs, pos)
	    | All1 -> Forall1 (x, aux xs, pos)
	    | Ex2 -> Exists2 (x, aux xs, pos)
	    | All2 -> Forall2 (x, aux xs, pos)

    in
      aux l


  let c = ref 0
  let get_fresh_var () = incr c ; "zzz" ^ string_of_int !c

(*   let childn n ctxt var = *)

(*     let rec aux = function *)

(* 	1 -> *)

(** Grammar :

    Body ::=   Variables_declaration ';' Formula ';'
             | Formula ';'

 *)

%}
%start main
%token ALL1
%token ALL2
%token AND
%token CHILD
%token COMMA
%token DIFF1
%token DIFF2
%token DOT
%token EOF
%token EQ1
%token EQ2
%token EQUIV
%token EX1
%token EX2
%token FALSE
%token FC
%token IMPLIES
%token IN
%token <int> INT
%token IPREF
%token IPREFSTRICT
%token ISIB
%token ISIBSTRICT
%token LAB
%token LEAF
%token LPAR
%token NOTIN
%token NS
%token OR
%token POINTVIRGULE
%token PREF
%token PREFSTRICT
%token ROOT
%token RPAR
%token SEMICOLON
%token SIB
%token SIBSTRICT
%token SING
%token <string> STR
%token SUB
%token TILDA
%token TRUE
%token VAR
%nonassoc LPAR RPAR
%left TILDA
%left AND
%left OR
%left EQUIV IMPLIES
%left ALL1 ALL2 EX1 EX2
%type <(Parsed_formula.var list) * Parsed_formula.formula> main
%%

main:
  _1 = Body _2 = EOF
    {           ( _1 )}
| 
    {  ( raise( Fatal_error "empty input file") )}

Body:
  _1 = Formula _2 = POINTVIRGULE
    {                       ( ([], _1) )}
| _1 = VAR _2 = VariablesDec _3 = Formula _4 = POINTVIRGULE
    {                                         ( (_2, _3) )}
| _1 = VAR _2 = VariablesDec
    {      ( raise (Fatal_error (error_msg_pos (pos_item 2) ^
			      "no given formula")) )}

VariablesDec:
  _1 = STR _2 = POINTVIRGULE
    {                   ( [_1, pos_item 1] )}
| _1 = STR _2 = COMMA _3 = VariablesDec
    {                         ( (_1, pos_item 1) :: _3 )}

Formula:
  _1 = LPAR _2 = Formula _3 = RPAR
    {                    ( _2 )}
| _1 = TRUE
    {       ( True )}
| _1 = FALSE
    {        ( False )}
| _1 = SING _2 = LPAR _3 = STR _4 = RPAR
    {                     ( Singleton (_3,pos_item 3) )}
| _1 = BinPredPref _2 = LPAR _3 = STR _4 = COMMA _5 = STR _6 = RPAR
    {      ( _1 (_3, pos_item 3) (_5, pos_item 5) )}
| _1 = ROOT _2 = LPAR _3 = STR _4 = RPAR
    {   ( Root (_3, pos_item 3) )}
| _1 = LEAF _2 = LPAR _3 = STR _4 = RPAR
    {   ( Leaf (_3, pos_item 3) )}
| _1 = EX1 _2 = QuantVariablesDec _3 = Formula
    {                                (
    var_list_to_formula Ex1 _3 (pos_rule ()) _2
  )}
| _1 = EX2 _2 = QuantVariablesDec _3 = Formula
    {                                (
    var_list_to_formula Ex2 _3 (pos_rule ()) _2
  )}
| _1 = ALL1 _2 = QuantVariablesDec _3 = Formula
    {                                 (
    var_list_to_formula All1 _3 (pos_rule ()) _2
  )}
| _1 = ALL2 _2 = QuantVariablesDec _3 = Formula
    {                                 (
    var_list_to_formula All2 _3 (pos_rule ()) _2
  )}
| _1 = EX1 _2 = QuantVariablesDec _3 = error
    {                              (
    raise
      (Fatal_error
	 (error_msg_pos (pos_rule ()) ^
	    "syntax error : maybe you forgot a comma ?")) )}
| _1 = EX2 _2 = QuantVariablesDec _3 = error
    {                              (
    raise
      (Fatal_error
	 (error_msg_pos (pos_rule ()) ^
	    "syntax error : maybe you forgot a comma ?")) )}
| _1 = ALL1 _2 = QuantVariablesDec _3 = error
    {                               (
    raise
      (Fatal_error
	 (error_msg_pos (pos_rule ()) ^
	    "syntax error : maybe you forgot a comma ?")) )}
| _1 = ALL2 _2 = QuantVariablesDec _3 = error
    {                               (
    raise
      (Fatal_error
	 (error_msg_pos (pos_rule ()) ^
	    "syntax error : maybe you forgot a comma ?")) )}
| _1 = STR _2 = BinPredInf _3 = STR
    {                     ( _2 (_1, pos_item 1) (_3, pos_item 3) )}
| _1 = Formula _2 = OR _3 = Formula
    {                     ( Or (_1, _3, pos_rule ()) )}
| _1 = Formula _2 = AND _3 = Formula
    {                      ( And (_1, _3, pos_rule ()) )}
| _1 = Formula _2 = EQUIV _3 = Formula
    {                        ( Equiv (_1, _3, pos_rule ()) )}
| _1 = Formula _2 = IMPLIES _3 = Formula
    {                          ( Implies (_1, _3, pos_rule ()) )}

QuantVariablesDec:
  _1 = STR _2 = SEMICOLON
    {                ( [_1, pos_item 1] )}
| _1 = STR _2 = COMMA _3 = QuantVariablesDec
    {                              ( (_1, pos_item 1) :: _3 )}

BinPredPref:
  _1 = CHILD
    {        ( fun x y -> Child (x,y) )}
| _1 = FC
    {     (fun x y -> First_child (x,y) )}
| _1 = NS
    {     ( fun x y -> Next_sibling (x,y) )}
| _1 = STR
    {      ( failwith ("unknown identifier : " ^ _1) )}
| _1 = LAB
    {      ( fun x y -> Lab (x,y) )}

BinPredInf:
  _1 = IN
    {       ( fun x y -> Is_in (x,y) )}
| _1 = NOTIN
    {          ( fun x y -> Neg (Is_in (x,y), pos_rule ()) )}
| _1 = EQ1
    {        ( fun x y -> Equal1 (x,y) )}
| _1 = EQ2
    {        ( fun x y -> Equal2 (x,y) )}
| _1 = DIFF1
    {          ( fun x y -> Diff1 (x,y) )}
| _1 = DIFF2
    {          ( fun x y -> Diff2 (x,y) )}
| _1 = SUB
    {        ( fun x y -> Include (x,y) )}
| _1 = PREF
    {         ( fun x y -> Pref (x,y) )}
| _1 = IPREF
    {          ( fun x y -> Pref (y,x) )}
| _1 = PREFSTRICT
    {               (
     fun x y ->
       And (Pref (x,
		  y),
	    Diff1 (x,y),
	    pos_rule ())
   )}
| _1 = IPREFSTRICT
    {                (
    fun x y -> And (Pref (y,x
			 ),
		    Diff1 (x,y),
		    pos_rule ())
   )}
| _1 = SIBSTRICT
    {              (
     fun x y -> And (Next_sibling_star
	    (x,y)
	    ,
	  Diff1 (x,y)
	    , pos_rule ()) )}
| _1 = SIB
    {        (
     fun x y -> Next_sibling_star (x,y)
   )}
| _1 = ISIB
    {         ( fun x y ->
	     Next_sibling_star (y,x)
	 )}
| _1 = ISIBSTRICT
    {               (
     fun x y -> And (Next_sibling_star
		       ( y,x)
		       ,
		     Diff1 (x,y)
		       , pos_rule ()) )}
| _1 = STR
    {      ( failwith ("unknown identifier : " ^ _1) )}

%%
