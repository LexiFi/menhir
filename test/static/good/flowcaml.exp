File "flowcaml.mly", line 205, characters 7-12:
Warning: the token CLASS is unused.
File "flowcaml.mly", line 209, characters 7-19:
Warning: the token COLONGREATER is unused.
File "flowcaml.mly", line 230, characters 7-20:
Warning: the token GREATERRBRACE is unused.
File "flowcaml.mly", line 231, characters 7-22:
Warning: the token GREATERRBRACKET is unused.
File "flowcaml.mly", line 240, characters 7-14:
Warning: the token INHERIT is unused.
File "flowcaml.mly", line 241, characters 7-17:
Warning: the token INITIALIZE is unused.
File "flowcaml.mly", line 242, characters 7-18:
Warning: the token INITIALIZER is unused.
File "flowcaml.mly", line 247, characters 7-17:
Warning: the token LBRACELESS is unused.
File "flowcaml.mly", line 258, characters 7-13:
Warning: the token METHOD is unused.
File "flowcaml.mly", line 264, characters 7-10:
Warning: the token NEW is unused.
File "flowcaml.mly", line 265, characters 7-13:
Warning: the token OBJECT is unused.
File "flowcaml.mly", line 268, characters 16-24:
Warning: the token OPTLABEL is unused.
File "flowcaml.mly", line 272, characters 7-14:
Warning: the token PRIVATE is unused.
File "flowcaml.mly", line 273, characters 7-15:
Warning: the token QUESTION is unused.
File "flowcaml.mly", line 295, characters 7-14:
Warning: the token VIRTUAL is unused.
Grammar has 129 nonterminal symbols, among which 8 start symbols.
Grammar has 123 terminal symbols.
Grammar has 442 productions.
nullable(with_constraints) = false
nullable(with_constraint) = false
nullable(val_longident) = false
nullable(val_ident_colon) = false
nullable(val_ident) = false
nullable(use_file_tail) = false
nullable(use_file) = false
nullable(type_parameters) = true
nullable(type_parameter_list) = false
nullable(type_parameter) = false
nullable(type_longident) = false
nullable(type_kind_variant) = false
nullable(type_kind_record) = false
nullable(type_kind) = true
nullable(type_declarations) = false
nullable(type_declaration) = false
nullable(type_constraint) = false
nullable(try_pattern_list) = false
nullable(try_pattern_item) = false
nullable(try_pattern) = false
nullable(try_cases) = false
nullable(toplevel_phrase) = false
nullable(toplevel_directive) = false
nullable(top_structure) = false
nullable(subtractive) = false
nullable(structure_tail) = true
nullable(structure_item) = false
nullable(structure) = true
nullable(simple_pattern) = false
nullable(simple_extcore_type_or_tuple) = false
nullable(simple_extcore_type2) = false
nullable(simple_extcore_type) = false
nullable(simple_expr_list) = false
nullable(simple_expr) = false
nullable(simple_exception_longident) = false
nullable(simple_core_type_or_tuple) = false
nullable(simple_core_type2) = false
nullable(simple_core_type) = false
nullable(signed_constant) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(seq_expr) = false
nullable(rowlabel_list) = false
nullable(right_hand_side) = false
nullable(record_expr) = false
nullable(rec_flag) = true
nullable(raises) = true
nullable(principal) = false
nullable(primitive_declaration) = false
nullable(pattern_semi_list) = false
nullable(pattern_comma_list) = false
nullable(pattern) = false
nullable(opt_variance) = true
nullable(opt_semi) = true
nullable(opt_rowlabel_list) = true
nullable(opt_kind) = true
nullable(opt_fun) = true
nullable(opt_extcore_type) = true
nullable(opt_bar) = true
nullable(opt_annot_level) = true
nullable(operator) = false
nullable(mutable_flag) = true
nullable(mty_longident) = false
nullable(module_type_arrow) = false
nullable(module_type) = false
nullable(module_expr) = false
nullable(module_declaration) = false
nullable(module_binding) = false
nullable(mod_longident) = false
nullable(mod_ext_longident) = false
nullable(match_cases) = false
nullable(match_action) = false
nullable(level_strict_longident) = false
nullable(level_repr) = false
nullable(level_longident) = false
nullable(level_declaration) = false
nullable(level_comma_list) = true
nullable(level) = false
nullable(let_bindings) = false
nullable(let_binding) = false
nullable(left_hand_side) = false
nullable(lbl_pattern_list) = false
nullable(lbl_expr_list) = false
nullable(label_longident) = false
nullable(label_declarations) = false
nullable(label_declaration) = false
nullable(label) = false
nullable(interface) = false
nullable(implementation) = false
nullable(ident) = false
nullable(fun_def) = false
nullable(fun_binding) = false
nullable(flows_declaration) = true
nullable(flows) = false
nullable(flow_hand_side) = false
nullable(flow) = false
nullable(extcore_type_list) = false
nullable(extcore_type_comma_list) = false
nullable(extcore_type_arrow_abbrev) = false
nullable(extcore_type_arrow) = false
nullable(extcore_type_args) = false
nullable(extcore_type2) = false
nullable(extcore_type) = false
nullable(expr_semi_list) = false
nullable(expr_comma_list) = false
nullable(expr) = false
nullable(exception_longident) = false
nullable(exception_declaration) = true
nullable(exception_arguments) = true
nullable(direction_flag) = false
nullable(core_type_skeleton) = false
nullable(core_type_scheme) = false
nullable(core_type_row_bounds) = false
nullable(core_type_list) = false
nullable(core_type_constraints_list) = false
nullable(core_type_constraint) = false
nullable(core_type_comma_list) = false
nullable(core_type_bounds) = false
nullable(core_type2) = false
nullable(core_type) = false
nullable(constructor_declarations) = false
nullable(constructor_declaration) = false
nullable(constructor_arguments) = true
nullable(constraints) = true
nullable(constrain) = false
nullable(constr_longident) = false
nullable(constr_ident) = false
nullable(constant) = false
nullable(affects) = true
first(with_constraints) = TYPE MODULE LEVEL
first(with_constraint) = TYPE MODULE LEVEL
first(val_longident) = UIDENT LPAREN LIDENT
first(val_ident_colon) = LPAREN LIDENT LABEL
first(val_ident) = LPAREN LIDENT
first(use_file_tail) = TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF
first(use_file) = WHILE UIDENT TYPE TRY TRUE STRING SEMISEMI RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CHARVECT CHAR BEGIN ASSERT
first(type_parameters) = SHARP QUOTE PLUS MINUS LPAREN EQUAL
first(type_parameter_list) = SHARP QUOTE PLUS MINUS EQUAL
first(type_parameter) = SHARP QUOTE PLUS MINUS EQUAL
first(type_longident) = UIDENT LIDENT
first(type_kind_variant) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(type_kind_record) = LBRACE
first(type_kind) = EQUAL
first(type_declarations) = SHARP QUOTE PLUS NONEQ MINUS LPAREN LIDENT EQUAL
first(type_declaration) = SHARP QUOTE PLUS NONEQ MINUS LPAREN LIDENT EQUAL
first(type_constraint) = COLON
first(try_pattern_list) = UIDENT
first(try_pattern_item) = UIDENT
first(try_pattern) = UNDERSCORE UIDENT
first(try_cases) = UNDERSCORE UIDENT
first(toplevel_phrase) = WHILE UIDENT TYPE TRY TRUE STRING SHARP RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOW FLOAT FALSE EXTERNAL EXCEPTION EOF CHARVECT CHAR BEGIN ASSERT
first(toplevel_directive) = SHARP
first(top_structure) = TYPE OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION
first(subtractive) = MINUSDOT MINUS
first(structure_tail) = TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION
first(structure_item) = TYPE OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION
first(structure) = WHILE UIDENT TYPE TRY TRUE STRING SEMISEMI RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CHARVECT CHAR BEGIN ASSERT
first(simple_pattern) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(simple_extcore_type_or_tuple) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(simple_extcore_type2) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(simple_extcore_type) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(simple_expr_list) = UIDENT TRUE STRING PREFIXOP LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR BEGIN
first(simple_expr) = UIDENT TRUE STRING PREFIXOP LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR BEGIN
first(simple_exception_longident) = UIDENT
first(simple_core_type_or_tuple) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(simple_core_type2) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(simple_core_type) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(signed_constant) = STRING MINUSDOT MINUS INT FLOAT CHARVECT CHAR
first(signature_item) = VAL TYPE OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION
first(signature) = VAL TYPE OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION
first(seq_expr) = WHILE UIDENT TRY TRUE STRING RAISE PREFIXOP MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHARVECT CHAR BEGIN ASSERT
first(rowlabel_list) = UIDENT
first(right_hand_side) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LEVEL LBRACKETLESS LBRACKETGREATER
first(record_expr) = UIDENT TRUE STRING PREFIXOP LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR BEGIN
first(rec_flag) = REC
first(raises) = RAISES
first(principal) = PREFIXOP
first(primitive_declaration) = STRING
first(pattern_semi_list) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(pattern_comma_list) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(pattern) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(opt_variance) = SHARP PLUS MINUS EQUAL
first(opt_semi) = SEMI
first(opt_rowlabel_list) = UIDENT
first(opt_kind) = COLON
first(opt_fun) = NONEQ
first(opt_extcore_type) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(opt_bar) = BAR
first(opt_annot_level) = SHARP
first(operator) = STAR PREFIXOP PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COLONEQUAL BARBAR AMPERSAND AMPERAMPER
first(mutable_flag) = MUTABLE
first(mty_longident) = UIDENT LIDENT
first(module_type_arrow) = MINUSGREATER MINUSBRACE
first(module_type) = UIDENT SIG LPAREN LIDENT FUNCTOR
first(module_expr) = UIDENT STRUCT LPAREN FUNCTOR
first(module_declaration) = LPAREN COLON
first(module_binding) = LPAREN EQUAL COLON
first(mod_longident) = UIDENT
first(mod_ext_longident) = UIDENT
first(match_cases) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(match_action) = WHEN MINUSGREATER
first(level_strict_longident) = UIDENT
first(level_repr) = LESSWORD GREATERWORD EQUAL
first(level_longident) = UIDENT
first(level_declaration) = UIDENT
first(level_comma_list) = UIDENT PREFIXOP COMMA
first(level) = UIDENT PREFIXOP
first(let_bindings) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(let_binding) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(left_hand_side) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER CONTENT
first(lbl_pattern_list) = UIDENT LIDENT
first(lbl_expr_list) = UIDENT LIDENT
first(label_longident) = UIDENT LIDENT
first(label_declarations) = MUTABLE LIDENT
first(label_declaration) = MUTABLE LIDENT
first(label) = LIDENT
first(interface) = VAL TYPE RAISES OPEN MODULE LEVEL INCLUDE FLOW EXTERNAL EXCEPTION EOF AFFECTS
first(implementation) = WHILE UIDENT TYPE TRY TRUE STRING SEMISEMI RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOW FLOAT FALSE EXTERNAL EXCEPTION EOF CHARVECT CHAR BEGIN ASSERT
first(ident) = UIDENT LIDENT
first(fun_def) = WHEN UNDERSCORE UIDENT TRUE STRING MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
first(fun_binding) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHARVECT CHAR
first(flows_declaration) = FLOW
first(flows) = PREFIXOP
first(flow_hand_side) = PREFIXOP
first(flow) = PREFIXOP
first(extcore_type_list) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(extcore_type_comma_list) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(extcore_type_arrow_abbrev) = EQUALBRACE
first(extcore_type_arrow) = MINUSGREATER MINUSBRACE
first(extcore_type_args) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(extcore_type2) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(extcore_type) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(expr_semi_list) = WHILE UIDENT TRY TRUE STRING RAISE PREFIXOP MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHARVECT CHAR BEGIN ASSERT
first(expr_comma_list) = WHILE UIDENT TRY TRUE STRING RAISE PREFIXOP MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHARVECT CHAR BEGIN ASSERT
first(expr) = WHILE UIDENT TRY TRUE STRING RAISE PREFIXOP MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHARVECT CHAR BEGIN ASSERT
first(exception_longident) = UIDENT LIDENT
first(exception_declaration) = OF EQUAL COLON
first(exception_arguments) = OF
first(direction_flag) = TO DOWNTO
first(core_type_skeleton) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(core_type_scheme) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
first(core_type_row_bounds) = STAR
first(core_type_list) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(core_type_constraints_list) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER CONTENT
first(core_type_constraint) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER CONTENT
first(core_type_comma_list) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(core_type_bounds) = UIDENT PREFIXOP LBRACKETLESS LBRACKETGREATER
first(core_type2) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(core_type) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(constructor_declarations) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(constructor_declaration) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(constructor_arguments) = OF
first(constraints) = CONSTRAINT
first(constrain) = UNDERSCORE UIDENT QUOTE LPAREN LIDENT
first(constr_longident) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constr_ident) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(constant) = STRING INT FLOAT CHARVECT CHAR
first(affects) = AFFECTS
minimal(with_constraints) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(with_constraint) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(val_longident) = (* 1 *) LIDENT
minimal(val_ident_colon) = (* 1 *) LABEL
minimal(val_ident) = (* 1 *) LIDENT
minimal(use_file_tail) = (* 1 *) EOF
minimal(use_file) = (* 1 *) EOF
minimal(type_parameters) = (* 0 *)
minimal(type_parameter_list) = (* 2 *) QUOTE UIDENT
minimal(type_parameter) = (* 2 *) QUOTE UIDENT
minimal(type_longident) = (* 1 *) LIDENT
minimal(type_kind_variant) = (* 1 *) UIDENT
minimal(type_kind_record) = (* 5 *) LBRACE LIDENT COLON UNDERSCORE RBRACE
minimal(type_kind) = (* 0 *)
minimal(type_declarations) = (* 1 *) LIDENT
minimal(type_declaration) = (* 1 *) LIDENT
minimal(type_constraint) = (* 2 *) COLON UNDERSCORE
minimal(try_pattern_list) = (* 1 *) UIDENT
minimal(try_pattern_item) = (* 1 *) UIDENT
minimal(try_pattern) = (* 1 *) UNDERSCORE
minimal(try_cases) = (* 3 *) UNDERSCORE MINUSGREATER LIDENT
minimal(toplevel_phrase) = (* 1 *) EOF
minimal(toplevel_directive) = (* 2 *) SHARP UIDENT
minimal(top_structure) = (* 2 *) TYPE LIDENT
minimal(subtractive) = (* 1 *) MINUS
minimal(structure_tail) = (* 0 *)
minimal(structure_item) = (* 2 *) TYPE LIDENT
minimal(structure) = (* 0 *)
minimal(simple_pattern) = (* 1 *) LIDENT
minimal(simple_extcore_type_or_tuple) = (* 1 *) UNDERSCORE
minimal(simple_extcore_type2) = (* 1 *) UNDERSCORE
minimal(simple_extcore_type) = (* 1 *) UNDERSCORE
minimal(simple_expr_list) = (* 1 *) LIDENT
minimal(simple_expr) = (* 1 *) LIDENT
minimal(simple_exception_longident) = (* 1 *) UIDENT
minimal(simple_core_type_or_tuple) = (* 1 *) UNDERSCORE
minimal(simple_core_type2) = (* 1 *) UNDERSCORE
minimal(simple_core_type) = (* 1 *) UNDERSCORE
minimal(signed_constant) = (* 1 *) INT
minimal(signature_item) = (* 2 *) TYPE LIDENT
minimal(signature) = (* 0 *)
minimal(seq_expr) = (* 1 *) LIDENT
minimal(rowlabel_list) = (* 1 *) UIDENT
minimal(right_hand_side) = (* 1 *) UNDERSCORE
minimal(record_expr) = (* 3 *) LIDENT EQUAL LIDENT
minimal(rec_flag) = (* 0 *)
minimal(raises) = (* 0 *)
minimal(principal) = (* 2 *) PREFIXOP LIDENT
minimal(primitive_declaration) = (* 1 *) STRING
minimal(pattern_semi_list) = (* 1 *) LIDENT
minimal(pattern_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(pattern) = (* 1 *) LIDENT
minimal(opt_variance) = (* 0 *)
minimal(opt_semi) = (* 0 *)
minimal(opt_rowlabel_list) = (* 0 *)
minimal(opt_kind) = (* 0 *)
minimal(opt_fun) = (* 0 *)
minimal(opt_extcore_type) = (* 0 *)
minimal(opt_bar) = (* 0 *)
minimal(opt_annot_level) = (* 0 *)
minimal(operator) = (* 1 *) PREFIXOP
minimal(mutable_flag) = (* 0 *)
minimal(mty_longident) = (* 1 *) UIDENT
minimal(module_type_arrow) = (* 1 *) MINUSGREATER
minimal(module_type) = (* 1 *) UIDENT
minimal(module_expr) = (* 1 *) UIDENT
minimal(module_declaration) = (* 2 *) COLON UIDENT
minimal(module_binding) = (* 2 *) EQUAL UIDENT
minimal(mod_longident) = (* 1 *) UIDENT
minimal(mod_ext_longident) = (* 1 *) UIDENT
minimal(match_cases) = (* 3 *) LIDENT MINUSGREATER LIDENT
minimal(match_action) = (* 2 *) MINUSGREATER LIDENT
minimal(level_strict_longident) = (* 1 *) UIDENT
minimal(level_repr) = (* 2 *) GREATERWORD THAN
minimal(level_longident) = (* 1 *) UIDENT
minimal(level_declaration) = (* 1 *) UIDENT
minimal(level_comma_list) = (* 0 *)
minimal(level) = (* 1 *) UIDENT
minimal(let_bindings) = (* 3 *) LIDENT EQUAL LIDENT
minimal(let_binding) = (* 3 *) LIDENT EQUAL LIDENT
minimal(left_hand_side) = (* 1 *) UNDERSCORE
minimal(lbl_pattern_list) = (* 3 *) LIDENT EQUAL LIDENT
minimal(lbl_expr_list) = (* 3 *) LIDENT EQUAL LIDENT
minimal(label_longident) = (* 1 *) LIDENT
minimal(label_declarations) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(label_declaration) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(label) = (* 1 *) LIDENT
minimal(interface) = (* 1 *) EOF
minimal(implementation) = (* 1 *) EOF
minimal(ident) = (* 1 *) UIDENT
minimal(fun_def) = (* 2 *) MINUSGREATER LIDENT
minimal(fun_binding) = (* 2 *) EQUAL LIDENT
minimal(flows_declaration) = (* 0 *)
minimal(flows) = (* 5 *) PREFIXOP LIDENT LESS PREFIXOP LIDENT
minimal(flow_hand_side) = (* 2 *) PREFIXOP LIDENT
minimal(flow) = (* 5 *) PREFIXOP LIDENT LESS PREFIXOP LIDENT
minimal(extcore_type_list) = (* 1 *) UNDERSCORE
minimal(extcore_type_comma_list) = (* 1 *) UNDERSCORE
minimal(extcore_type_arrow_abbrev) = (* 2 *) EQUALBRACE BRACEEQUALGREATER
minimal(extcore_type_arrow) = (* 1 *) MINUSGREATER
minimal(extcore_type_args) = (* 1 *) UNDERSCORE
minimal(extcore_type2) = (* 1 *) UNDERSCORE
minimal(extcore_type) = (* 1 *) UNDERSCORE
minimal(expr_semi_list) = (* 1 *) LIDENT
minimal(expr_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(expr) = (* 1 *) LIDENT
minimal(exception_longident) = (* 1 *) UIDENT
minimal(exception_declaration) = (* 0 *)
minimal(exception_arguments) = (* 0 *)
minimal(direction_flag) = (* 1 *) TO
minimal(core_type_skeleton) = (* 3 *) UNDERSCORE TILDE UNDERSCORE
minimal(core_type_scheme) = (* 1 *) UNDERSCORE
minimal(core_type_row_bounds) = (* 3 *) STAR COLON UIDENT
minimal(core_type_list) = (* 1 *) UNDERSCORE
minimal(core_type_constraints_list) = (* 3 *) UNDERSCORE LESS UNDERSCORE
minimal(core_type_constraint) = (* 3 *) UNDERSCORE LESS UNDERSCORE
minimal(core_type_comma_list) = (* 1 *) UNDERSCORE
minimal(core_type_bounds) = (* 1 *) UIDENT
minimal(core_type2) = (* 1 *) UNDERSCORE
minimal(core_type) = (* 1 *) UNDERSCORE
minimal(constructor_declarations) = (* 1 *) UIDENT
minimal(constructor_declaration) = (* 1 *) UIDENT
minimal(constructor_arguments) = (* 0 *)
minimal(constraints) = (* 0 *)
minimal(constrain) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constr_longident) = (* 1 *) UIDENT
minimal(constr_ident) = (* 1 *) UIDENT
minimal(constant) = (* 1 *) INT
minimal(affects) = (* 0 *)
follow(with_constraints) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END AND
follow(with_constraint) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END AND
follow(val_longident) = error WITH UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER #
follow(val_ident_colon) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
follow(val_ident) = error WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER #
follow(use_file_tail) = #
follow(use_file) = #
follow(type_parameters) = UIDENT LIDENT
follow(type_parameter_list) = RPAREN COMMA
follow(type_parameter) = UIDENT RPAREN LIDENT COMMA
follow(type_longident) = error WITH VAL UIDENT TYPE TILDE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER MINUSBRACE LIDENT LEVEL LET LESS INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END CONSTRAINT COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND #
follow(type_kind_variant) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT AND
follow(type_kind_record) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT AND
follow(type_kind) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT AND
follow(type_declarations) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END AND
follow(type_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END AND
follow(type_constraint) = RPAREN EQUAL
follow(try_pattern_list) = MINUSGREATER
follow(try_pattern_item) = MINUSGREATER BAR
follow(try_pattern) = MINUSGREATER
follow(try_cases) = error WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LEVEL LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FINALLY EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(toplevel_phrase) = #
follow(toplevel_directive) = TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF
follow(top_structure) = SEMISEMI
follow(subtractive) = WHILE UIDENT TRY TRUE STRING RAISE PREFIXOP MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHARVECT CHAR BEGIN ASSERT
follow(structure_tail) = error EOF END
follow(structure_item) = error TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END
follow(structure) = error EOF END
follow(simple_pattern) = error WHEN UNDERSCORE UIDENT TRUE STRING SEMI RPAREN RBRACKET RBRACE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHARVECT CHAR BARRBRACKET BAR AS
follow(simple_extcore_type_or_tuple) = error WITH VAL TYPE TILDE SEMISEMI RPAREN OPEN MODULE MINUSGREATER MINUSBRACE LEVEL LESS INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(simple_extcore_type2) = error WITH VAL UIDENT TYPE TILDE STAR SEMISEMI SEMI RPAREN OPEN MODULE MINUSGREATER MINUSBRACE LIDENT LEVEL LET LESS INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(simple_extcore_type) = error WITH VAL TYPE TILDE STAR SEMISEMI SEMI RPAREN OPEN MODULE MINUSGREATER MINUSBRACE LEVEL LET LESS INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(simple_expr_list) = error WITH UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(simple_expr) = error WITH UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(simple_exception_longident) = error WITH UNDERSCORE UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(simple_core_type_or_tuple) = error WITH VAL TYPE SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSBRACE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA BRACEMINUSGREATER BAR AND
follow(simple_core_type2) = error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSBRACE LIDENT LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA BRACEMINUSGREATER BAR AND
follow(simple_core_type) = error WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSBRACE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA BRACEMINUSGREATER BAR AND
follow(signed_constant) = error WHEN UNDERSCORE UIDENT TRUE STRING SEMI RPAREN RBRACKET RBRACE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHARVECT CHAR BARRBRACKET BAR AS
follow(signature_item) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EOF END
follow(signature) = error VAL TYPE OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EOF END
follow(seq_expr) = error WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LEVEL LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FINALLY EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(rowlabel_list) = RBRACKET
follow(right_hand_side) = error VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EQUAL EOF END AND
follow(record_expr) = error RBRACE
follow(rec_flag) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
follow(raises) = VAL TYPE OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EOF
follow(principal) = error WITH WHILE VAL UIDENT TYPE TRY TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RAISES RAISE PREFIXOP OPEN MODULE MINUSGREATER MINUSDOT MINUSBRACE MINUS MATCH LPAREN LIDENT LEVEL LET LESSWORD LESS LBRACKETBAR LBRACKET LBRACE LAZY INT INFIXOP0 INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA CHARVECT CHAR BRACEMINUSGREATER BRACEEQUALGREATER BEGIN BARBAR BAR ASSERT AND AFFECTS
follow(primitive_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END
follow(pattern_semi_list) = error SEMI RBRACKET BARRBRACKET
follow(pattern_comma_list) = error WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER EQUAL COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER EQUAL COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(opt_variance) = QUOTE
follow(opt_semi) = error RBRACKET RBRACE BARRBRACKET
follow(opt_rowlabel_list) = RBRACKET
follow(opt_kind) = UIDENT RPAREN LIDENT COMMA
follow(opt_fun) = SHARP QUOTE PLUS MINUS LPAREN LIDENT EQUAL
follow(opt_extcore_type) = BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR
follow(opt_bar) = UNDERSCORE UIDENT TRUE STRING MINUSDOT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHARVECT CHAR
follow(opt_annot_level) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT AND
follow(operator) = RPAREN
follow(mutable_flag) = LIDENT
follow(mty_longident) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END
follow(module_type_arrow) = UIDENT SIG LPAREN LIDENT FUNCTOR
follow(module_type) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END
follow(module_expr) = error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END COLON
follow(module_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EOF END
follow(module_binding) = error TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END
follow(mod_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
follow(mod_ext_longident) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DOT AND
follow(match_cases) = error WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LEVEL LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FINALLY EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(match_action) = error WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LEVEL LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FINALLY EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(level_strict_longident) = LESSWORD GREATERWORD EQUAL
follow(level_repr) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END AND
follow(level_longident) = error WITH VAL UIDENT TYPE TILDE STAR SEMISEMI SEMI RPAREN RBRACKET RAISES OPEN MODULE MINUSGREATER MINUSBRACE LIDENT LEVEL LET LESSWORD LESS INFIXOP0 INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND #
follow(level_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END
follow(level_comma_list) = error WITH VAL TYPE SEMISEMI RPAREN RBRACKET RAISES OPEN MODULE LEVEL LET LESSWORD INFIXOP0 INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COMMA BRACEMINUSGREATER BAR AND
follow(level) = error WITH VAL UIDENT TYPE TILDE STAR SEMISEMI SEMI RPAREN RBRACKET RAISES OPEN MODULE MINUSGREATER MINUSBRACE LIDENT LEVEL LET LESSWORD LESS INFIXOP0 INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(let_bindings) = error TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND
follow(let_binding) = error TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND
follow(left_hand_side) = LESS
follow(lbl_pattern_list) = error SEMI RBRACE
follow(lbl_expr_list) = error SEMI RBRACE
follow(label_longident) = error WITH UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(label_declarations) = SEMI RBRACE
follow(label_declaration) = SEMI RBRACE
follow(label) = COLON
follow(interface) = #
follow(implementation) = #
follow(ident) = error WITH VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER MINUSBRACE LPAREN LIDENT LEVEL LET LESS INT INCLUDE FALSE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END CONSTRAINT COMMA COLON BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(fun_def) = error WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LEVEL LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FINALLY EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(fun_binding) = error TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND
follow(flows_declaration) = WHILE VAL UIDENT TYPE TRY TRUE STRING SEMISEMI RAISES RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CHARVECT CHAR BEGIN ASSERT AFFECTS
follow(flows) = WHILE VAL UIDENT TYPE TRY TRUE STRING SEMISEMI RAISES RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CHARVECT CHAR BEGIN ASSERT AND AFFECTS
follow(flow_hand_side) = WHILE VAL UIDENT TYPE TRY TRUE STRING SEMISEMI RAISES RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF COMMA CHARVECT CHAR BEGIN ASSERT AND AFFECTS
follow(flow) = WHILE VAL UIDENT TYPE TRY TRUE STRING SEMISEMI RAISES RAISE PREFIXOP OPEN MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LEVEL LET LBRACKETBAR LBRACKET LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CHARVECT CHAR BEGIN ASSERT AND AFFECTS
follow(extcore_type_list) = error WITH VAL TYPE TILDE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER MINUSBRACE LEVEL LET LESS INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(extcore_type_comma_list) = RPAREN COMMA
follow(extcore_type_arrow_abbrev) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
follow(extcore_type_arrow) = UNDERSCORE UIDENT STAR QUOTE PREFIXOP LPAREN LIDENT LBRACKETLESS LBRACKETGREATER
follow(extcore_type_args) = EQUALGREATER EQUALBRACE
follow(extcore_type2) = error WITH VAL TYPE TILDE SEMISEMI RPAREN OPEN MODULE MINUSGREATER MINUSBRACE LEVEL LESS INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(extcore_type) = error WITH VAL TYPE TILDE SEMISEMI RPAREN OPEN MODULE LEVEL LESS INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(expr_semi_list) = error SEMI RBRACKET BARRBRACKET
follow(expr_comma_list) = error WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LEVEL LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FINALLY EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(expr) = error WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LEVEL LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FINALLY EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(exception_longident) = COLON #
follow(exception_declaration) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END
follow(exception_arguments) = error VAL TYPE SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END
follow(direction_flag) = WHILE UIDENT TRY TRUE STRING RAISE PREFIXOP MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHARVECT CHAR BEGIN ASSERT
follow(core_type_skeleton) = error VAL TYPE TILDE SEMISEMI RPAREN OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EQUAL EOF END AND
follow(core_type_scheme) = error VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EQUAL EOF END
follow(core_type_row_bounds) = error WITH VAL UIDENT TYPE TILDE STAR SEMISEMI SEMI RPAREN OPEN MODULE MINUSGREATER MINUSBRACE LIDENT LEVEL LET LESS INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(core_type_list) = error WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSBRACE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA BRACEMINUSGREATER BAR AND
follow(core_type_constraints_list) = error VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EQUAL EOF END AND
follow(core_type_constraint) = error VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EQUAL EOF END AND
follow(core_type_comma_list) = RPAREN COMMA
follow(core_type_bounds) = error WITH VAL UIDENT TYPE TILDE STAR SEMISEMI SEMI RPAREN OPEN MODULE MINUSGREATER MINUSBRACE LIDENT LEVEL LET LESS INCLUDE EXTERNAL EXCEPTION EQUALGREATER EQUALBRACE EQUAL EOF END COMMA BRACEMINUSGREATER BRACEEQUALGREATER BARBAR BAR AND
follow(core_type2) = error WITH VAL TYPE SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSBRACE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA BRACEMINUSGREATER BAR AND
follow(core_type) = error WITH VAL TYPE SEMISEMI SEMI RPAREN RBRACE OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA BRACEMINUSGREATER BAR AND
follow(constructor_declarations) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT BAR AND
follow(constructor_declaration) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT BAR AND
follow(constructor_arguments) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT BAR AND
follow(constraints) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT AND
follow(constrain) = error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT AND
follow(constr_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
follow(constr_ident) = error VAL TYPE SHARP SEMISEMI OPEN OF MODULE LEVEL LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT BAR AND
follow(constant) = error WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PROPAGATE PREFIXOP PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LEVEL LET LESS LBRACKETBAR LBRACKET LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FINALLY FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CHARVECT CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
follow(affects) = VAL TYPE RAISES OPEN MODULE LEVEL INCLUDE EXTERNAL EXCEPTION EOF
Built an LR(0) automaton with 885 states.
The grammar is not SLR(1) -- 69 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 1552 states.
1122 shift/reduce conflicts were silently solved.
File "flowcaml.mly", line 347, characters 0-5:
Warning: the precedence level assigned to SHARP is never useful.
File "flowcaml.mly", line 345, characters 0-5:
Warning: the precedence level assigned to prec_appl is never useful.
File "flowcaml.mly", line 325, characters 0-6:
Warning: the precedence level assigned to prec_let is never useful.
File "flowcaml.mly", line 329, characters 0-6:
Warning: the precedence level assigned to prec_list is never useful.
File "flowcaml.mly", line 335, characters 0-6:
Warning: the precedence level assigned to prec_type_arrow is never useful.
File "flowcaml.mly", line 326, characters 0-6:
Warning: the precedence level assigned to prec_type_def is never useful.
File "flowcaml.mly", line 1204, characters 23-38:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 649, characters 39-48:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 651, characters 48-56:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 655, characters 37-45:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 667, characters 34-42:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 671, characters 39-55:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 731, characters 29-38:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 733, characters 27-36:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 853, characters 15-24:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 854, characters 35-44:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1105, characters 57-72:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 805, characters 25-33:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 807, characters 41-49:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 847, characters 37-46:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 849, characters 56-65:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 801, characters 33-41:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 473, characters 10-18:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 556, characters 10-18:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1222, characters 25-41:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1224, characters 43-59:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1226, characters 60-76:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1164, characters 25-41:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1166, characters 46-62:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1168, characters 63-79:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 997, characters 26-39:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1005, characters 50-63:
Warning: this %prec declaration is never useful.
File "flowcaml.mly", line 1007, characters 49-62:
Warning: this %prec declaration is never useful.
Warning: 25 states have shift/reduce conflicts.
Warning: 55 shift/reduce conflicts were arbitrarily resolved.
Warning: 4 end-of-stream conflicts were arbitrarily resolved.
509 out of 1552 states have a default reduction.
786 out of 1552 states are represented.
0 out of 262 symbols keep track of their start position.
0 out of 262 symbols keep track of their end position.
226 out of 450 productions exploit shiftreduce optimization.
407 out of 1552 states can peek at an error.
3696 functions before inlining, 959 functions after inlining.
