State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On IMPORT shift to state 1
-- On EOF shift to state 22
-- On COQ shift to state 23
-- On CAMLI shift to state 25
-- On CAML shift to state 27
-- On main shift to state 29
-- On header_def shift to state 30
-- On coll_def shift to state 32
## Reductions:

State 1:
## Known stack suffix:
## IMPORT
## LR(1) items:
coll_def -> IMPORT . FOR ID limport IMPORT [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
-- On FOR shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## IMPORT FOR
## LR(1) items:
coll_def -> IMPORT FOR . ID limport IMPORT [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
-- On ID shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## IMPORT FOR ID
## LR(1) items:
coll_def -> IMPORT FOR ID . limport IMPORT [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
-- On ID shift to state 4
-- On END shift to state 14
-- On limport shift to state 20
## Reductions:

State 4:
## Known stack suffix:
## ID
## LR(1) items:
limport -> ID . idlist def SEP limport [ IMPORT ]
limport -> ID . idlist def LINK def SEP limport [ IMPORT ]
## Transitions:
-- On ID shift to state 5
-- On EQ shift to state 6
-- On idlist shift to state 8
## Reductions:

State 5:
## Known stack suffix:
## ID
## LR(1) items:
idlist -> ID . idlist [ ID DEF ]
## Transitions:
-- On ID shift to state 5
-- On EQ shift to state 6
-- On idlist shift to state 7
## Reductions:

State 6:
## Known stack suffix:
## EQ
## LR(1) items:
idlist -> EQ . [ ID DEF ]
## Transitions:
## Reductions:
-- On ID DEF
--   reduce production idlist -> EQ

State 7:
## Known stack suffix:
## ID idlist
## LR(1) items:
idlist -> ID idlist . [ ID DEF ]
## Transitions:
## Reductions:
-- On ID DEF
--   reduce production idlist -> ID idlist

State 8:
## Known stack suffix:
## ID idlist
## LR(1) items:
limport -> ID idlist . def SEP limport [ IMPORT ]
limport -> ID idlist . def LINK def SEP limport [ IMPORT ]
## Transitions:
-- On ID shift to state 9
-- On DEF shift to state 11
-- On def shift to state 12
## Reductions:

State 9:
## Known stack suffix:
## ID
## LR(1) items:
def -> ID . DEF [ SEP LINK ]
## Transitions:
-- On DEF shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## ID DEF
## LR(1) items:
def -> ID DEF . [ SEP LINK ]
## Transitions:
## Reductions:
-- On SEP LINK
--   reduce production def -> ID DEF

State 11:
## Known stack suffix:
## DEF
## LR(1) items:
def -> DEF . [ SEP LINK ]
## Transitions:
## Reductions:
-- On SEP LINK
--   reduce production def -> DEF

State 12:
## Known stack suffix:
## ID idlist def
## LR(1) items:
limport -> ID idlist def . SEP limport [ IMPORT ]
limport -> ID idlist def . LINK def SEP limport [ IMPORT ]
## Transitions:
-- On SEP shift to state 13
-- On LINK shift to state 16
## Reductions:

State 13:
## Known stack suffix:
## ID idlist def SEP
## LR(1) items:
limport -> ID idlist def SEP . limport [ IMPORT ]
## Transitions:
-- On ID shift to state 4
-- On END shift to state 14
-- On limport shift to state 15
## Reductions:

State 14:
## Known stack suffix:
## END
## LR(1) items:
limport -> END . [ IMPORT ]
## Transitions:
## Reductions:
-- On IMPORT
--   reduce production limport -> END

State 15:
## Known stack suffix:
## ID idlist def SEP limport
## LR(1) items:
limport -> ID idlist def SEP limport . [ IMPORT ]
## Transitions:
## Reductions:
-- On IMPORT
--   reduce production limport -> ID idlist def SEP limport

State 16:
## Known stack suffix:
## ID idlist def LINK
## LR(1) items:
limport -> ID idlist def LINK . def SEP limport [ IMPORT ]
## Transitions:
-- On ID shift to state 9
-- On DEF shift to state 11
-- On def shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## ID idlist def LINK def
## LR(1) items:
limport -> ID idlist def LINK def . SEP limport [ IMPORT ]
## Transitions:
-- On SEP shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## ID idlist def LINK def SEP
## LR(1) items:
limport -> ID idlist def LINK def SEP . limport [ IMPORT ]
## Transitions:
-- On ID shift to state 4
-- On END shift to state 14
-- On limport shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## ID idlist def LINK def SEP limport
## LR(1) items:
limport -> ID idlist def LINK def SEP limport . [ IMPORT ]
## Transitions:
## Reductions:
-- On IMPORT
--   reduce production limport -> ID idlist def LINK def SEP limport

State 20:
## Known stack suffix:
## IMPORT FOR ID limport
## LR(1) items:
coll_def -> IMPORT FOR ID limport . IMPORT [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
-- On IMPORT shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## IMPORT FOR ID limport IMPORT
## LR(1) items:
coll_def -> IMPORT FOR ID limport IMPORT . [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
## Reductions:
-- On IMPORT EOF COQ CAMLI CAML
--   reduce production coll_def -> IMPORT FOR ID limport IMPORT

State 22:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 23:
## Known stack suffix:
## COQ
## LR(1) items:
header_def -> COQ . HEADER [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
-- On HEADER shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## COQ HEADER
## LR(1) items:
header_def -> COQ HEADER . [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
## Reductions:
-- On IMPORT EOF COQ CAMLI CAML
--   reduce production header_def -> COQ HEADER

State 25:
## Known stack suffix:
## CAMLI
## LR(1) items:
header_def -> CAMLI . HEADER [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
-- On HEADER shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## CAMLI HEADER
## LR(1) items:
header_def -> CAMLI HEADER . [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
## Reductions:
-- On IMPORT EOF COQ CAMLI CAML
--   reduce production header_def -> CAMLI HEADER

State 27:
## Known stack suffix:
## CAML
## LR(1) items:
header_def -> CAML . HEADER [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
-- On HEADER shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## CAML HEADER
## LR(1) items:
header_def -> CAML HEADER . [ IMPORT EOF COQ CAMLI CAML ]
## Transitions:
## Reductions:
-- On IMPORT EOF COQ CAMLI CAML
--   reduce production header_def -> CAML HEADER

State 29:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 30:
## Known stack suffix:
## header_def
## LR(1) items:
main -> header_def . main [ # ]
## Transitions:
-- On IMPORT shift to state 1
-- On EOF shift to state 22
-- On COQ shift to state 23
-- On CAMLI shift to state 25
-- On CAML shift to state 27
-- On main shift to state 31
-- On header_def shift to state 30
-- On coll_def shift to state 32
## Reductions:

State 31:
## Known stack suffix:
## header_def main
## LR(1) items:
main -> header_def main . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> header_def main

State 32:
## Known stack suffix:
## coll_def
## LR(1) items:
main -> coll_def . main [ # ]
## Transitions:
-- On IMPORT shift to state 1
-- On EOF shift to state 22
-- On COQ shift to state 23
-- On CAMLI shift to state 25
-- On CAML shift to state 27
-- On main shift to state 33
-- On header_def shift to state 30
-- On coll_def shift to state 32
## Reductions:

State 33:
## Known stack suffix:
## coll_def main
## LR(1) items:
main -> coll_def main . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> coll_def main

