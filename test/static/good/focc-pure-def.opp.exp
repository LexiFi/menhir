%{
  open Ast
  open Parsing
  open Lexing
  open Keywords
%}
%start main
%token CAML
%token CAMLI
%token COQ
%token <string> DEF
%token END
%token EOF
%token EQ
%token FOR
%token <string> HEADER
%token <string> ID
%token IMPORT
%token LINK
%token SEP
%type <unit> main
%%

main:
  _1 = EOF
    {      (())}
| _1 = header_def _2 = main
    {                  ( _1 )}
| _1 = coll_def _2 = main
    {                ( _1 )}

header_def:
  _1 = COQ _2 = HEADER
    {             ( Hashtbl.add pure_def (toplevel,coq_h) ("",Some _2) )}
| _1 = CAML _2 = HEADER
    {              (Hashtbl.add pure_def (toplevel,caml_h) (_2,None))}
| _1 = CAMLI _2 = HEADER
    {               (Hashtbl.add pure_def (toplevel,caml_hi) (_2,None))}

coll_def:
  _1 = IMPORT _2 = FOR _3 = ID _4 = limport _5 = IMPORT
    {      ( List.iter (fun x -> let (a,b,c,d) = x in
		     (if c <> "" then Hashtbl.add pure_def (_3,c) ("",d));
		     Hashtbl.add pure_def (_3 , a) (b,d)) _4 )}

limport:
  _1 = END
    {      ( [] )}
| _1 = ID _2 = idlist _3 = def _4 = SEP _5 = limport
    {                            ( let (a,b) = _3 in
			      let name = if a = "" then _1 else a in
				(name,b,"",None) :: _5 )}
| _1 = ID _2 = idlist _3 = def _4 = LINK _5 = def _6 = SEP _7 = limport
    {                                     ( let (a,b) = _3 in
				       let name = if a = "" then _1 else a in
				       let (c,d) = _5 in
					 (name,b,c,Some d) :: _7 )}

def:
  _1 = DEF
    {      ( ("" , _1) )}
| _1 = ID _2 = DEF
    {         ( (_1,_2) )}

idlist:
  _1 = EQ
    {     ( [] )}
| _1 = ID _2 = idlist
    {            ( _1 :: _2 )}

%%


let parse_it rgl s =
  try main rgl s with
    | Parse_error ->
       prerr_string "error occured while parsing .fml file : ";
        prerr_string ((lexeme s) ^ " at position ");
        prerr_int (lexeme_end s );
        prerr_newline();

    | Exit -> raise Exit
    | s -> prerr_endline "Unknown error\n"; raise s
;;
(* $Id: pure_def.mly,v 1.2 2003/09/19 12:25:21 prevosto Exp $ *)

