State 0:
exp' -> . exp [ # ]
-- On INT shift to state 1
-- On exp shift to state 2

State 1:
exp -> INT . [ TIMES PLUS # ]
-- On TIMES reduce production exp -> INT
-- On PLUS reduce production exp -> INT

State 2:
exp' -> exp . [ # ]
exp -> exp . TIMES exp [ TIMES PLUS # ]
exp -> exp . PLUS exp [ TIMES PLUS # ]
-- On TIMES shift to state 3
-- On PLUS shift to state 5

State 3:
exp -> exp TIMES . exp [ TIMES PLUS # ]
-- On INT shift to state 1
-- On exp shift to state 4

State 4:
exp -> exp . TIMES exp [ TIMES PLUS # ]
exp -> exp TIMES exp . [ TIMES PLUS # ]
exp -> exp . PLUS exp [ TIMES PLUS # ]
-- On TIMES reduce production exp -> exp TIMES exp
-- On PLUS reduce production exp -> exp TIMES exp

State 5:
exp -> exp PLUS . exp [ TIMES PLUS # ]
-- On INT shift to state 1
-- On exp shift to state 6

State 6:
exp -> exp . TIMES exp [ TIMES PLUS # ]
exp -> exp . PLUS exp [ TIMES PLUS # ]
exp -> exp PLUS exp . [ TIMES PLUS # ]
-- On TIMES shift to state 3
-- On PLUS reduce production exp -> exp PLUS exp

