%{

  open Syntax

  let mkid sort (name, startp, endp) =
    Identifier.make name sort startp endp

  (* A sordid incantation for turning multiple binding forms into single binding
     forms while generating reasonable location information. *)

  let bind
      ((ids : (Error.location * 'id) list), (ko : 'annotation))
      (form : Lexing.position -> 'id -> 'annotation -> Error.location * 'a -> Error.location * 'a)
      (body : Error.location * 'a) : 'a =
    let _, body =
      List.fold_right (fun ((startp, _), id) body ->
	form startp id ko body
      ) ids body
    in
    body

  let mktyabs ((_, endp), _) startp id ko ty =
    (startp, endp), TyAbs (id, ko, ty)

  let mktyquantified q ((_, endp), _) startp id ko ty =
    (startp, endp), TyQuantified (q, id, ko, ty)

  let mksforall _ id ko (_, s) =
    Error.dummy, SForall (id, ko, s)

  let mkteabs ((_, endp), _) startp id ty t =
    (startp, endp), TeAbs (id, ty, t)

  let mktetyabs ((_, endp), _) startp id ko t =
    (startp, endp), TeTyAbs (id, ko, t)

%}
%start program
%token ARROW
%token AS
%token ASSERT
%token BACKQUOTE
%token BIGLAMBDA
%token COLON
%token COMMA
%token DEFAULT
%token DOT
%token EOF
%token EQ
%token EXISTS
%token FORALL
%token <string * Lexing.position * Lexing.position> IDENTIFIER
%token IN
%token <string> INCLUDE
%token KIND
%token LAMBDA
%token LATER
%token LBRACKET
%token LEMMA
%token LET
%token LPAR
%token PACK
%token RBRACKET
%token RPAR
%token STAR
%token TERM
%token TYPE
%token UNPACK
%token WILDCARD
%type <Syntax.declarations> program
%%

list_declaration_:
  
    {    ( [] )}
| x = declaration xs = list_declaration_
    {    ( x :: xs )}

nonempty_list_loc_term_variable__:
  x = term_variable
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( [ x ] )}
| x = term_variable xs = nonempty_list_loc_term_variable__
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( x :: xs )}

nonempty_list_loc_type_variable__:
  x = type_variable
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( [ x ] )}
| x = type_variable xs = nonempty_list_loc_type_variable__
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( x :: xs )}

kind_variable:
  id = IDENTIFIER
    {    ( mkid kind_sort id )}

type_variable:
  id = IDENTIFIER
    {    ( mkid type_sort id )}

term_variable:
  id = IDENTIFIER
    {    ( mkid term_sort id )}

kind0:
  _1 = STAR
    {    ( KStar )}
| id = kind_variable
    {    ( KDefined id )}
| _1 = LATER kind = kind0
    {    ( KLater kind )}
| _1 = LPAR kind = kind1 _3 = RPAR
    {let kind =     ( kind ) in
    ( kind )}

kind1:
  kind = kind0
    {    ( kind )}
| kind1 = kind0 _2 = ARROW kind2 = kind1
    {    ( KArrow (kind1, kind2) )}

type_binder:
  ids = nonempty_list_loc_type_variable__
    {    ( ids, None )}
| ids = nonempty_list_loc_type_variable__ _2 = COLON kind = kind1
    {let kind =     ( kind ) in
    ( ids, Some kind )}

quantifier:
  _1 = FORALL
    {    ( QForall )}
| _1 = EXISTS
    {    ( QExists )}

ty0:
  id = type_variable
    {    ( TyVar id )}
| _1 = LPAR _2 = RPAR
    {    ( TyUnit )}
| _1 = LPAR ty = ty3 _3 = RPAR
    {let ty =     ( ty ) in
    ( ty )}
| _1 = LPAR ty = ty3 _3 = COLON kind = kind1 _5 = RPAR
    {let kind =     ( kind ) in
let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TyConstraint (ty, kind) )}
| _1 = LPAR ty = ty3 delimiter = COMMA ty_inlined1 = ty3 _5 = RPAR
    {let ty2 =
  let (_endpos_ty_, _startpos_ty_, ty) = (_endpos_ty_inlined1_, _startpos_ty_inlined1_, ty_inlined1) in
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty1 =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let _startpos = _startpos__1_ in
    ( let loc1 = (_startpos, _endpos_delimiter_)
      and () = delimiter in (* avoid a warning *)
      TyPair (loc1, ty1, ty2) )}

ty1:
  ty = ty0
    {    ( ty )}
| x = ty1 x_inlined1 = ty0
    {let ty2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TyApp (ty1, ty2) )}

ty2:
  ty = ty1
    {    ( ty )}
| x = ty2 _2 = BACKQUOTE x_inlined1 = ty1 delimiter = BACKQUOTE x_inlined2 = ty1
    {let ty2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let _startpos_ty1_ = _startpos_x_ in
let _startpos = _startpos_ty1_ in
    ( let loc = (_startpos, _endpos_delimiter_) in
      let () = delimiter in (* avoid a warning *)
      TyApp ((loc, TyApp (ty, ty1)), ty2) )}

ty3:
  ty = ty2
    {    ( ty )}
| x = ty2 delimiter = ARROW x_inlined1 = ty3
    {let ty2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let _startpos_ty1_ = _startpos_x_ in
let _startpos = _startpos_ty1_ in
    ( let loc1 = (_startpos, _endpos_delimiter_)
      and () = delimiter in (* avoid a warning *)
      TyArrow (loc1, ty1, ty2) )}
| _1 = LAMBDA b = type_binder _3 = DOT x = ty3
    {let ty =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( bind b (mktyabs ty) ty )}
| q = quantifier b = type_binder _3 = DOT x = ty3
    {let ty =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( bind b (mktyquantified q ty) ty )}

statement:
  x = ty2 _2 = EQ x_inlined1 = ty2
    {let ty2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( SEquation (ty1, ty2) )}
| _1 = FORALL b = type_binder _3 = DOT s = statement
    {    ( bind b mksforall (Error.dummy, s) )}

term_variable_or_wildcard:
  id = term_variable
    {    ( Some id )}
| _1 = WILDCARD
    {    ( None )}

term_binder:
  ids = nonempty_list_loc_term_variable__ _2 = COLON ty = ty3
    {let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( ids, ty )}

term0:
  id = term_variable
    {    ( TeVar id )}
| _1 = LPAR _2 = RPAR
    {    ( TeUnit )}
| _1 = LPAR t = term3 _3 = RPAR
    {let t =     ( t ) in
    ( t )}
| _1 = LPAR t = term3 _3 = COLON ty = ty3 _5 = RPAR
    {let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TeConstraint (t, ty) )}
| _1 = LPAR t = term3 _3 = COMMA t_inlined1 = term3 _5 = RPAR
    {let t2 =
  let (_endpos_t_, _startpos_t_, t) = (_endpos_t_inlined1_, _startpos_t_inlined1_, t_inlined1) in
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t1 =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TePair (t1, t2) )}

term1:
  t = term0
    {    ( t )}
| x = term1 x_inlined1 = term0
    {let t2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TeApp (t1, t2) )}
| x = term1 _2 = LBRACKET ty = ty3 _4 = RBRACKET
    {let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TeTyApp (t, ty) )}

term2:
  t = term1
    {    ( t )}
| x = term2 _2 = BACKQUOTE x_inlined1 = term1 delimiter = BACKQUOTE x_inlined2 = term1
    {let t2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let _startpos_t1_ = _startpos_x_ in
let _startpos = _startpos_t1_ in
    ( let loc = (_startpos, _endpos_delimiter_) in
      let () = delimiter in (* avoid a warning *)
      TeApp ((loc, TeApp (t, t1)), t2) )}

term3:
  t = term2
    {    ( t )}
| _1 = LAMBDA b = term_binder _3 = DOT x = term3
    {let t =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( bind b (mkteabs t) t )}
| _1 = BIGLAMBDA b = type_binder _3 = DOT x = term3
    {let t =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( bind b (mktetyabs t) t )}
| _1 = PACK ty = ty3 _3 = COMMA t = term3 _5 = AS ty_inlined1 = ty3
    {let ty1 =
  let (_endpos_ty_, _startpos_ty_, ty) = (_endpos_ty_inlined1_, _startpos_ty_inlined1_, ty_inlined1) in
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty2 =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TePack (t, ty1, ty2) )}
| _1 = UNPACK alpha = type_variable _3 = COMMA x = term_variable _5 = EQ t = term3 _7 = IN t_inlined1 = term3
    {let t2 =
  let (_endpos_t_, _startpos_t_, t) = (_endpos_t_inlined1_, _startpos_t_inlined1_, t_inlined1) in
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t1 =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TeUnpack (alpha, x, t1, t2) )}
| _1 = LET id = term_variable _3 = EQ t = term3 _5 = IN t_inlined1 = term3
    {let t2 =
  let (_endpos_t_, _startpos_t_, t) = (_endpos_t_inlined1_, _startpos_t_inlined1_, t_inlined1) in
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t1 =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TeLet (id, t1, t2) )}
| _1 = LET _2 = LPAR id1 = term_variable_or_wildcard _4 = COMMA id2 = term_variable_or_wildcard _6 = RPAR _7 = EQ t = term3 _9 = IN t_inlined1 = term3
    {let t2 =
  let (_endpos_t_, _startpos_t_, t) = (_endpos_t_inlined1_, _startpos_t_inlined1_, t_inlined1) in
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t1 =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TeLetPair (id1, id2, t1, t2) )}
| _1 = ASSERT id = term_variable _3 = COLON ty = ty3 _5 = IN t = term3
    {let t =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( let var = (_startpos_id_, _endpos_id_), TeVar id in
      let con = (_startpos_id_, _endpos_ty_), TeConstraint (var, ty) in
      TeLet (id, con, t) )}
| _1 = LET id = term_variable _3 = COLON ty = ty3 _5 = EQ t = term3 _7 = IN t_inlined1 = term3
    {let t2 =
  let (_endpos_t_, _startpos_t_, t) = (_endpos_t_inlined1_, _startpos_t_inlined1_, t_inlined1) in
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let t1 =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( let con = (_startpos_id_, _endpos_ty_), TeConstraint (t1, ty) in
      TeLet (id, con, t2) )}
| _1 = TYPE id = type_variable _3 = EQ ty = ty3 _5 = IN t = term3
    {let t =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( TeType (id, ty, t) )}

declaration:
  _1 = KIND id = kind_variable _3 = EQ kind = kind1
    {let kind =     ( kind ) in
    ( [ DKind (id, kind) ] )}
| _1 = TYPE id = type_variable _3 = COLON kind = kind1 _5 = EQ ty = ty3
    {let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let kind =     ( kind ) in
    ( [ DType (id, kind, ty) ] )}
| _1 = DEFAULT _2 = KIND id = type_variable _4 = COLON kind = kind1
    {let kind =     ( kind ) in
    ( [ DDefaultKind (id, kind) ] )}
| _1 = LEMMA _2 = IDENTIFIER _3 = COLON s = statement
    {    ( [ DLemma s ] )}
| _1 = TERM id = term_variable _3 = COLON ty = ty3 _5 = EQ t = term3
    {let t =
  let x =     ( t ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
let ty =
  let x =     ( ty ) in
  let (_endpos_x_, _startpos_x_) = (_endpos_ty_, _startpos_ty_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( ((_startpos, _endpos), x) )
in
    ( [ DTerm (id, ty, t) ] )}
| filename = INCLUDE
    {    ( !ParserBootstrap.load_and_parse filename )}

program:
  ds = list_declaration_ _2 = EOF
    {    ( List.flatten ds )}

%%
