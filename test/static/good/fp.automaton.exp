State 0:
## Known stack suffix:
##
## LR(1) items:
cmd' -> . cmd [ # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Leol shift to state 52
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LUndef shift to state 53
-- On LT shift to state 19
-- On LShow shift to state 56
-- On LSave shift to state 59
-- On LQuit shift to state 62
-- On LLoad shift to state 64
-- On LF shift to state 20
-- On LDef shift to state 67
-- On fct shift to state 23
-- On fatom shift to state 25
-- On exp shift to state 72
-- On comp shift to state 29
-- On cmd shift to state 74
## Reductions:

State 1:
## Known stack suffix:
## Lwhile
## LR(1) items:
fatom -> Lwhile . fatom fatom [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 50
## Reductions:

State 2:
## Known stack suffix:
## Lsqu
## LR(1) items:
fatom -> Lsqu . fctlist Rsqu [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fctlist shift to state 45
-- On fct shift to state 47
-- On fatom shift to state 25
-- On comp shift to state 29
## Reductions:

State 3:
## Known stack suffix:
## Ls
## LR(1) items:
fatom -> Ls . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Ls
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Ls
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
## Known stack suffix:
## Lr
## LR(1) items:
fatom -> Lr . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lr
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 5:
## Known stack suffix:
## Lprim
## LR(1) items:
fatom -> Lprim . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lprim
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lprim
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 6:
## Known stack suffix:
## Lpar
## LR(1) items:
fatom -> Lpar . fct Rpar [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fct shift to state 44
-- On fatom shift to state 25
-- On comp shift to state 29
## Reductions:

State 7:
## Known stack suffix:
## Lins
## LR(1) items:
fatom -> Lins . fatom [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 43
## Reductions:

State 8:
## Known stack suffix:
## Lident
## LR(1) items:
fatom -> Lident . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lident
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
## Known stack suffix:
## Lcst
## LR(1) items:
fatom -> Lcst . exp [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LT shift to state 19
-- On LF shift to state 20
-- On fct shift to state 23
-- On fatom shift to state 25
-- On exp shift to state 42
-- On comp shift to state 29
## Reductions:

State 10:
## Known stack suffix:
## Lvar
## LR(1) items:
exp -> Lvar . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> Lvar
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> Lvar
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## Lpar
## LR(1) items:
exp -> Lpar . exp Rpar [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
fatom -> Lpar . fct Rpar [ Rpar Lo Leval Lcond ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LT shift to state 19
-- On LF shift to state 20
-- On fct shift to state 38
-- On fatom shift to state 25
-- On exp shift to state 40
-- On comp shift to state 29
## Reductions:

State 12:
## Known stack suffix:
## Lint
## LR(1) items:
exp -> Lint . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> Lint
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> Lint
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 13:
## Known stack suffix:
## Lbu
## LR(1) items:
fatom -> Lbu . fatom exp [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 16
## Reductions:

State 14:
## Known stack suffix:
## Lapplytoall
## LR(1) items:
fatom -> Lapplytoall . fatom [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## Lapplytoall fatom
## LR(1) items:
fatom -> Lapplytoall fatom . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lapplytoall fatom
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lapplytoall fatom
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 16:
## Known stack suffix:
## Lbu fatom
## LR(1) items:
fatom -> Lbu fatom . exp [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LT shift to state 19
-- On LF shift to state 20
-- On fct shift to state 23
-- On fatom shift to state 25
-- On exp shift to state 37
-- On comp shift to state 29
## Reductions:

State 17:
## Known stack suffix:
## Lang
## LR(1) items:
exp -> Lang . Rang [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
exp -> Lang . fp_list Rang [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Rang shift to state 18
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LT shift to state 19
-- On LF shift to state 20
-- On fp_list shift to state 21
-- On fct shift to state 23
-- On fatom shift to state 25
-- On exp shift to state 34
-- On comp shift to state 29
## Reductions:

State 18:
## Known stack suffix:
## Lang Rang
## LR(1) items:
exp -> Lang Rang . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> Lang Rang
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> Lang Rang
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 19:
## Known stack suffix:
## LT
## LR(1) items:
exp -> LT . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> LT
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> LT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 20:
## Known stack suffix:
## LF
## LR(1) items:
exp -> LF . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> LF
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> LF
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
## Known stack suffix:
## Lang fp_list
## LR(1) items:
exp -> Lang fp_list . Rang [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Rang shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## Lang fp_list Rang
## LR(1) items:
exp -> Lang fp_list Rang . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> Lang fp_list Rang
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> Lang fp_list Rang
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
## Known stack suffix:
## fct
## LR(1) items:
exp -> fct . Leval exp [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Leval shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## fct Leval
## LR(1) items:
exp -> fct Leval . exp [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LT shift to state 19
-- On LF shift to state 20
-- On fct shift to state 23
-- On fatom shift to state 25
-- On exp shift to state 28
-- On comp shift to state 29
## Reductions:

State 25:
## Known stack suffix:
## fatom
## LR(1) items:
comp -> fatom . Lo comp [ Rsqu Rpar Lscl Leval Leol Lcond Lcom # ]
comp -> fatom . [ Rsqu Rpar Lscl Leval Leol Lcond Lcom # ]
## Transitions:
-- On Lo shift to state 26
## Reductions:
-- On Rsqu Rpar Lscl Leval Leol Lcond Lcom #
--   reduce production comp -> fatom
** End-of-stream conflict on Rsqu Rpar Lscl Lo Leval Leol Lcond Lcom
**   There is a tension between
**   (1) reducing production comp -> fatom
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
## Known stack suffix:
## fatom Lo
## LR(1) items:
comp -> fatom Lo . comp [ Rsqu Rpar Lscl Leval Leol Lcond Lcom # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 25
-- On comp shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## fatom Lo comp
## LR(1) items:
comp -> fatom Lo comp . [ Rsqu Rpar Lscl Leval Leol Lcond Lcom # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lscl Leval Leol Lcond Lcom #
--   reduce production comp -> fatom Lo comp
** End-of-stream conflict on Rsqu Rpar Lscl Leval Leol Lcond Lcom
**   There is a tension between
**   (1) reducing production comp -> fatom Lo comp
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 28:
## Known stack suffix:
## fct Leval exp
## LR(1) items:
exp -> fct Leval exp . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> fct Leval exp
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> fct Leval exp
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 29:
## Known stack suffix:
## comp
## LR(1) items:
fct -> comp . Lcond comp Lscl fct [ Rsqu Rpar Leval Leol Lcom ]
fct -> comp . [ Rsqu Rpar Leval Leol Lcom ]
## Transitions:
-- On Lcond shift to state 30
## Reductions:
-- On Rsqu Rpar Leval Leol Lcom
--   reduce production fct -> comp

State 30:
## Known stack suffix:
## comp Lcond
## LR(1) items:
fct -> comp Lcond . comp Lscl fct [ Rsqu Rpar Leval Leol Lcom ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 25
-- On comp shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## comp Lcond comp
## LR(1) items:
fct -> comp Lcond comp . Lscl fct [ Rsqu Rpar Leval Leol Lcom ]
## Transitions:
-- On Lscl shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## comp Lcond comp Lscl
## LR(1) items:
fct -> comp Lcond comp Lscl . fct [ Rsqu Rpar Leval Leol Lcom ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fct shift to state 33
-- On fatom shift to state 25
-- On comp shift to state 29
## Reductions:

State 33:
## Known stack suffix:
## comp Lcond comp Lscl fct
## LR(1) items:
fct -> comp Lcond comp Lscl fct . [ Rsqu Rpar Leval Leol Lcom ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Leval Leol Lcom
--   reduce production fct -> comp Lcond comp Lscl fct

State 34:
## Known stack suffix:
## exp
## LR(1) items:
fp_list -> exp . Lcom fp_list [ Rang ]
fp_list -> exp . [ Rang ]
## Transitions:
-- On Lcom shift to state 35
## Reductions:
-- On Rang
--   reduce production fp_list -> exp

State 35:
## Known stack suffix:
## exp Lcom
## LR(1) items:
fp_list -> exp Lcom . fp_list [ Rang ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LT shift to state 19
-- On LF shift to state 20
-- On fp_list shift to state 36
-- On fct shift to state 23
-- On fatom shift to state 25
-- On exp shift to state 34
-- On comp shift to state 29
## Reductions:

State 36:
## Known stack suffix:
## exp Lcom fp_list
## LR(1) items:
fp_list -> exp Lcom fp_list . [ Rang ]
## Transitions:
## Reductions:
-- On Rang
--   reduce production fp_list -> exp Lcom fp_list

State 37:
## Known stack suffix:
## Lbu fatom exp
## LR(1) items:
fatom -> Lbu fatom exp . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lbu fatom exp
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lbu fatom exp
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 38:
## Known stack suffix:
## Lpar fct
## LR(1) items:
exp -> fct . Leval exp [ Rpar ]
fatom -> Lpar fct . Rpar [ Rpar Lo Leval Lcond ]
## Transitions:
-- On Rpar shift to state 39
-- On Leval shift to state 24
## Reductions:

State 39:
## Known stack suffix:
## Lpar fct Rpar
## LR(1) items:
fatom -> Lpar fct Rpar . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lpar fct Rpar
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lpar fct Rpar
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 40:
## Known stack suffix:
## Lpar exp
## LR(1) items:
exp -> Lpar exp . Rpar [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Rpar shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## Lpar exp Rpar
## LR(1) items:
exp -> Lpar exp Rpar . [ Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production exp -> Lpar exp Rpar
** End-of-stream conflict on Rsqu Rpar Rang Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production exp -> Lpar exp Rpar
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 42:
## Known stack suffix:
## Lcst exp
## LR(1) items:
fatom -> Lcst exp . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lcst exp
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lcst exp
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 43:
## Known stack suffix:
## Lins fatom
## LR(1) items:
fatom -> Lins fatom . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lins fatom
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lins fatom
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 44:
## Known stack suffix:
## Lpar fct
## LR(1) items:
fatom -> Lpar fct . Rpar [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Rpar shift to state 39
## Reductions:

State 45:
## Known stack suffix:
## Lsqu fctlist
## LR(1) items:
fatom -> Lsqu fctlist . Rsqu [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Rsqu shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## Lsqu fctlist Rsqu
## LR(1) items:
fatom -> Lsqu fctlist Rsqu . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lsqu fctlist Rsqu
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lsqu fctlist Rsqu
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 47:
## Known stack suffix:
## fct
## LR(1) items:
fctlist -> fct . Lcom fctlist [ Rsqu ]
fctlist -> fct . [ Rsqu ]
## Transitions:
-- On Lcom shift to state 48
## Reductions:
-- On Rsqu
--   reduce production fctlist -> fct

State 48:
## Known stack suffix:
## fct Lcom
## LR(1) items:
fctlist -> fct Lcom . fctlist [ Rsqu ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fctlist shift to state 49
-- On fct shift to state 47
-- On fatom shift to state 25
-- On comp shift to state 29
## Reductions:

State 49:
## Known stack suffix:
## fct Lcom fctlist
## LR(1) items:
fctlist -> fct Lcom fctlist . [ Rsqu ]
## Transitions:
## Reductions:
-- On Rsqu
--   reduce production fctlist -> fct Lcom fctlist

State 50:
## Known stack suffix:
## Lwhile fatom
## LR(1) items:
fatom -> Lwhile fatom . fatom [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## Lwhile fatom fatom
## LR(1) items:
fatom -> Lwhile fatom fatom . [ Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF # ]
## Transitions:
## Reductions:
-- On Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF #
--   reduce production fatom -> Lwhile fatom fatom
** End-of-stream conflict on Rsqu Rpar Lwhile Lvar Lsqu Lscl Ls Lr Lprim Lpar Lo Lint Lins Lident Leval Leol Lcst Lcond Lcom Lbu Lapplytoall Lang LT LF
**   There is a tension between
**   (1) reducing production fatom -> Lwhile fatom fatom
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 52:
## Known stack suffix:
## Leol
## LR(1) items:
cmd -> Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> Leol

State 53:
## Known stack suffix:
## LUndef
## LR(1) items:
cmd -> LUndef . Lident Leol [ # ]
## Transitions:
-- On Lident shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## LUndef Lident
## LR(1) items:
cmd -> LUndef Lident . Leol [ # ]
## Transitions:
-- On Leol shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## LUndef Lident Leol
## LR(1) items:
cmd -> LUndef Lident Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> LUndef Lident Leol

State 56:
## Known stack suffix:
## LShow
## LR(1) items:
cmd -> LShow . Lident Leol [ # ]
## Transitions:
-- On Lident shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## LShow Lident
## LR(1) items:
cmd -> LShow Lident . Leol [ # ]
## Transitions:
-- On Leol shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## LShow Lident Leol
## LR(1) items:
cmd -> LShow Lident Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> LShow Lident Leol

State 59:
## Known stack suffix:
## LSave
## LR(1) items:
cmd -> LSave . Lstr Leol [ # ]
## Transitions:
-- On Lstr shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## LSave Lstr
## LR(1) items:
cmd -> LSave Lstr . Leol [ # ]
## Transitions:
-- On Leol shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## LSave Lstr Leol
## LR(1) items:
cmd -> LSave Lstr Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> LSave Lstr Leol

State 62:
## Known stack suffix:
## LQuit
## LR(1) items:
cmd -> LQuit . Leol [ # ]
## Transitions:
-- On Leol shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## LQuit Leol
## LR(1) items:
cmd -> LQuit Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> LQuit Leol

State 64:
## Known stack suffix:
## LLoad
## LR(1) items:
cmd -> LLoad . Lstr Leol [ # ]
## Transitions:
-- On Lstr shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## LLoad Lstr
## LR(1) items:
cmd -> LLoad Lstr . Leol [ # ]
## Transitions:
-- On Leol shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## LLoad Lstr Leol
## LR(1) items:
cmd -> LLoad Lstr Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> LLoad Lstr Leol

State 67:
## Known stack suffix:
## LDef
## LR(1) items:
cmd -> LDef . Lident Laff fct Leol [ # ]
## Transitions:
-- On Lident shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LDef Lident
## LR(1) items:
cmd -> LDef Lident . Laff fct Leol [ # ]
## Transitions:
-- On Laff shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## LDef Lident Laff
## LR(1) items:
cmd -> LDef Lident Laff . fct Leol [ # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fct shift to state 70
-- On fatom shift to state 25
-- On comp shift to state 29
## Reductions:

State 70:
## Known stack suffix:
## LDef Lident Laff fct
## LR(1) items:
cmd -> LDef Lident Laff fct . Leol [ # ]
## Transitions:
-- On Leol shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## LDef Lident Laff fct Leol
## LR(1) items:
cmd -> LDef Lident Laff fct Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> LDef Lident Laff fct Leol

State 72:
## Known stack suffix:
## exp
## LR(1) items:
cmd -> exp . Leol [ # ]
## Transitions:
-- On Leol shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## exp Leol
## LR(1) items:
cmd -> exp Leol . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cmd -> exp Leol

State 74:
## Known stack suffix:
## cmd
## LR(1) items:
cmd' -> cmd . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept cmd

State 75:
## Known stack suffix:
##
## LR(1) items:
exp' -> . exp [ # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lvar shift to state 10
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 11
-- On Lint shift to state 12
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On Lang shift to state 17
-- On LT shift to state 19
-- On LF shift to state 20
-- On fct shift to state 23
-- On fatom shift to state 25
-- On exp shift to state 76
-- On comp shift to state 29
## Reductions:

State 76:
## Known stack suffix:
## exp
## LR(1) items:
exp' -> exp . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept exp

State 77:
## Known stack suffix:
##
## LR(1) items:
fct' -> . fct [ # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fct shift to state 78
-- On fatom shift to state 25
-- On comp shift to state 79
## Reductions:

State 78:
## Known stack suffix:
## fct
## LR(1) items:
fct' -> fct . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept fct

State 79:
## Known stack suffix:
## comp
## LR(1) items:
fct -> comp . Lcond comp Lscl fct [ # ]
fct -> comp . [ # ]
## Transitions:
-- On Lcond shift to state 80
## Reductions:
-- On #
--   reduce production fct -> comp
** End-of-stream conflict on Lcond
**   There is a tension between
**   (1) reducing production fct -> comp
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 80:
## Known stack suffix:
## comp Lcond
## LR(1) items:
fct -> comp Lcond . comp Lscl fct [ # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fatom shift to state 25
-- On comp shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## comp Lcond comp
## LR(1) items:
fct -> comp Lcond comp . Lscl fct [ # ]
## Transitions:
-- On Lscl shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## comp Lcond comp Lscl
## LR(1) items:
fct -> comp Lcond comp Lscl . fct [ # ]
## Transitions:
-- On Lwhile shift to state 1
-- On Lsqu shift to state 2
-- On Ls shift to state 3
-- On Lr shift to state 4
-- On Lprim shift to state 5
-- On Lpar shift to state 6
-- On Lins shift to state 7
-- On Lident shift to state 8
-- On Lcst shift to state 9
-- On Lbu shift to state 13
-- On Lapplytoall shift to state 14
-- On fct shift to state 83
-- On fatom shift to state 25
-- On comp shift to state 79
## Reductions:

State 83:
## Known stack suffix:
## comp Lcond comp Lscl fct
## LR(1) items:
fct -> comp Lcond comp Lscl fct . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production fct -> comp Lcond comp Lscl fct

