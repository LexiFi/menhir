State 0:
## Known stack suffix:
##
## LR(1) items:
annot' -> . annot [ # ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 2
-- On VOID shift to state 4
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPE shift to state 570
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 627
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 633
-- On MODEL shift to state 658
-- On LOOP shift to state 666
-- On LONG shift to state 28
-- On LOGIC shift to state 714
-- On LEMMA shift to state 729
-- On LABEL shift to state 31
-- On INVARIANT shift to state 734
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 737
-- On IMPACT shift to state 749
-- On IF shift to state 38
-- On GLOBAL shift to state 755
-- On FREES shift to state 42
-- On FOR shift to state 761
-- On FLOAT shift to state 44
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 899
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 947
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 952
-- On ALLOCATES shift to state 71
-- On type_annot shift to state 955
-- On slice_pragma shift to state 956
-- On post_cond shift to state 72
-- On model_annot shift to state 957
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annotations shift to state 958
-- On loop_annot_stack shift to state 959
-- On loop_allocation shift to state 795
-- On logic_def shift to state 960
-- On is_spec shift to state 961
-- On is_acsl_spec shift to state 1057
-- On is_acsl_other shift to state 702
-- On impact_pragma shift to state 1058
-- On grammar_extension_name shift to state 1059
-- On full_identifier_or_typename shift to state 1060
-- On enter_kw_c_mode shift to state 708
-- On deprecated_logic_decl shift to state 1061
-- On decl_list shift to state 1062
-- On decl shift to state 1064
-- On code_annotation shift to state 1066
-- On c_keyword shift to state 711
-- On annotation shift to state 1073
-- On annot shift to state 1075
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 1:
## Known stack suffix:
## WRITES
## LR(1) items:
is_acsl_other -> WRITES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_other -> WRITES

State 2:
## Known stack suffix:
## VOLATILE
## LR(1) items:
decl -> VOLATILE . ne_zones volatile_opt SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_zones shift to state 560
-- On ne_lexpr_list shift to state 569
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 3:
## Known stack suffix:
## VOLATILE
## LR(1) items:
acsl_c_keyword -> VOLATILE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production acsl_c_keyword -> VOLATILE

State 4:
## Known stack suffix:
## VOID
## LR(1) items:
c_keyword -> VOID . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> VOID

State 5:
## Known stack suffix:
## VARIANT
## LR(1) items:
is_acsl_decl_or_code_annot -> VARIANT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> VARIANT

State 6:
## Known stack suffix:
## VALID_READ
## LR(1) items:
lexpr_inner -> VALID_READ . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 89
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 7:
## Known stack suffix:
## LBRACE
## LR(1) items:
opt_label_list -> LBRACE . ne_label_list RBRACE [ LPAR ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_label_list shift to state 74
-- On label_name shift to state 76
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 86
-- On acsl_c_keyword shift to state 87
## Reductions:

State 8:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
c_keyword -> UNSIGNED . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> UNSIGNED

State 9:
## Known stack suffix:
## UNION
## LR(1) items:
c_keyword -> UNION . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> UNION

State 10:
## Known stack suffix:
## TYPENAME
## LR(1) items:
identifier_or_typename -> TYPENAME . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production identifier_or_typename -> TYPENAME

State 11:
## Known stack suffix:
## TYPE
## LR(1) items:
is_acsl_decl_or_code_annot -> TYPE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> TYPE

State 12:
## Known stack suffix:
## TERMINATES
## LR(1) items:
is_acsl_spec -> TERMINATES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> TERMINATES

State 13:
## Known stack suffix:
## STRUCT
## LR(1) items:
c_keyword -> STRUCT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> STRUCT

State 14:
## Known stack suffix:
## STATIC
## LR(1) items:
c_keyword -> STATIC . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> STATIC

State 15:
## Known stack suffix:
## SLICE
## LR(1) items:
is_acsl_decl_or_code_annot -> SLICE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> SLICE

State 16:
## Known stack suffix:
## SIZEOF
## LR(1) items:
c_keyword -> SIZEOF . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> SIZEOF

State 17:
## Known stack suffix:
## SIGNED
## LR(1) items:
c_keyword -> SIGNED . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> SIGNED

State 18:
## Known stack suffix:
## SHORT
## LR(1) items:
c_keyword -> SHORT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> SHORT

State 19:
## Known stack suffix:
## RETURNS
## LR(1) items:
post_cond -> RETURNS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production post_cond -> RETURNS

State 20:
## Known stack suffix:
## REQUIRES
## LR(1) items:
is_acsl_spec -> REQUIRES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> REQUIRES

State 21:
## Known stack suffix:
## REAL
## LR(1) items:
is_acsl_other -> REAL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_other -> REAL

State 22:
## Known stack suffix:
## READS
## LR(1) items:
is_acsl_other -> READS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_other -> READS

State 23:
## Known stack suffix:
## PREDICATE
## LR(1) items:
is_acsl_decl_or_code_annot -> PREDICATE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> PREDICATE

State 24:
## Known stack suffix:
## PRAGMA
## LR(1) items:
is_acsl_decl_or_code_annot -> PRAGMA . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> PRAGMA

State 25:
## Known stack suffix:
## MODULE
## LR(1) items:
is_ext_spec -> MODULE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_ext_spec -> MODULE

State 26:
## Known stack suffix:
## MODEL
## LR(1) items:
is_acsl_decl_or_code_annot -> MODEL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> MODEL

State 27:
## Known stack suffix:
## LOOP
## LR(1) items:
is_acsl_decl_or_code_annot -> LOOP . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> LOOP

State 28:
## Known stack suffix:
## LONG
## LR(1) items:
c_keyword -> LONG . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> LONG

State 29:
## Known stack suffix:
## LOGIC
## LR(1) items:
keyword -> LOGIC . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production keyword -> LOGIC

State 30:
## Known stack suffix:
## LEMMA
## LR(1) items:
is_acsl_decl_or_code_annot -> LEMMA . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> LEMMA

State 31:
## Known stack suffix:
## LABEL
## LR(1) items:
is_acsl_other -> LABEL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_other -> LABEL

State 32:
## Known stack suffix:
## INVARIANT
## LR(1) items:
is_acsl_decl_or_code_annot -> INVARIANT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> INVARIANT

State 33:
## Known stack suffix:
## INTEGER
## LR(1) items:
is_acsl_other -> INTEGER . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_other -> INTEGER

State 34:
## Known stack suffix:
## INT
## LR(1) items:
c_keyword -> INT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> INT

State 35:
## Known stack suffix:
## INDUCTIVE
## LR(1) items:
is_acsl_decl_or_code_annot -> INDUCTIVE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> INDUCTIVE

State 36:
## Known stack suffix:
## INCLUDE
## LR(1) items:
is_ext_spec -> INCLUDE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_ext_spec -> INCLUDE

State 37:
## Known stack suffix:
## IMPACT
## LR(1) items:
is_acsl_decl_or_code_annot -> IMPACT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> IMPACT

State 38:
## Known stack suffix:
## IF
## LR(1) items:
c_keyword -> IF . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> IF

State 39:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
identifier_or_typename -> IDENTIFIER . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production identifier_or_typename -> IDENTIFIER

State 40:
## Known stack suffix:
## GLOBAL
## LR(1) items:
is_acsl_decl_or_code_annot -> GLOBAL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> GLOBAL

State 41:
## Known stack suffix:
## FUNCTION
## LR(1) items:
is_ext_spec -> FUNCTION . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_ext_spec -> FUNCTION

State 42:
## Known stack suffix:
## FREES
## LR(1) items:
is_acsl_spec -> FREES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> FREES

State 43:
## Known stack suffix:
## FOR
## LR(1) items:
acsl_c_keyword -> FOR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production acsl_c_keyword -> FOR

State 44:
## Known stack suffix:
## FLOAT
## LR(1) items:
c_keyword -> FLOAT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> FLOAT

State 45:
## Known stack suffix:
## EXT_LET
## LR(1) items:
is_ext_spec -> EXT_LET . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_ext_spec -> EXT_LET

State 46:
## Known stack suffix:
## EXT_AT
## LR(1) items:
is_ext_spec -> EXT_AT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_ext_spec -> EXT_AT

State 47:
## Known stack suffix:
## EXITS
## LR(1) items:
post_cond -> EXITS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production post_cond -> EXITS

State 48:
## Known stack suffix:
## ENUM
## LR(1) items:
c_keyword -> ENUM . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> ENUM

State 49:
## Known stack suffix:
## ENSURES
## LR(1) items:
post_cond -> ENSURES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production post_cond -> ENSURES

State 50:
## Known stack suffix:
## ELSE
## LR(1) items:
c_keyword -> ELSE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> ELSE

State 51:
## Known stack suffix:
## DOUBLE
## LR(1) items:
c_keyword -> DOUBLE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> DOUBLE

State 52:
## Known stack suffix:
## DISJOINT
## LR(1) items:
is_acsl_spec -> DISJOINT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> DISJOINT

State 53:
## Known stack suffix:
## DECREASES
## LR(1) items:
is_acsl_spec -> DECREASES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> DECREASES

State 54:
## Known stack suffix:
## CUSTOM
## LR(1) items:
non_logic_keyword -> CUSTOM . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production non_logic_keyword -> CUSTOM

State 55:
## Known stack suffix:
## CONTRACT
## LR(1) items:
is_ext_spec -> CONTRACT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_ext_spec -> CONTRACT

State 56:
## Known stack suffix:
## CONTINUES
## LR(1) items:
post_cond -> CONTINUES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production post_cond -> CONTINUES

State 57:
## Known stack suffix:
## CONST
## LR(1) items:
c_keyword -> CONST . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> CONST

State 58:
## Known stack suffix:
## COMPLETE
## LR(1) items:
is_acsl_spec -> COMPLETE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> COMPLETE

State 59:
## Known stack suffix:
## CHAR
## LR(1) items:
c_keyword -> CHAR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> CHAR

State 60:
## Known stack suffix:
## CASE
## LR(1) items:
c_keyword -> CASE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> CASE

State 61:
## Known stack suffix:
## BREAKS
## LR(1) items:
post_cond -> BREAKS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production post_cond -> BREAKS

State 62:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
c_keyword -> BOOLEAN . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> BOOLEAN

State 63:
## Known stack suffix:
## BOOL
## LR(1) items:
c_keyword -> BOOL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production c_keyword -> BOOL

State 64:
## Known stack suffix:
## BEHAVIORS
## LR(1) items:
is_acsl_other -> BEHAVIORS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_other -> BEHAVIORS

State 65:
## Known stack suffix:
## BEHAVIOR
## LR(1) items:
is_acsl_spec -> BEHAVIOR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> BEHAVIOR

State 66:
## Known stack suffix:
## AXIOMATIC
## LR(1) items:
is_acsl_decl_or_code_annot -> AXIOMATIC . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> AXIOMATIC

State 67:
## Known stack suffix:
## AXIOM
## LR(1) items:
is_acsl_decl_or_code_annot -> AXIOM . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> AXIOM

State 68:
## Known stack suffix:
## ASSUMES
## LR(1) items:
is_acsl_decl_or_code_annot -> ASSUMES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> ASSUMES

State 69:
## Known stack suffix:
## ASSIGNS
## LR(1) items:
is_acsl_spec -> ASSIGNS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> ASSIGNS

State 70:
## Known stack suffix:
## ASSERT
## LR(1) items:
is_acsl_decl_or_code_annot -> ASSERT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_decl_or_code_annot -> ASSERT

State 71:
## Known stack suffix:
## ALLOCATES
## LR(1) items:
is_acsl_spec -> ALLOCATES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> ALLOCATES

State 72:
## Known stack suffix:
## post_cond
## LR(1) items:
is_acsl_spec -> post_cond . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_acsl_spec -> post_cond

State 73:
## Known stack suffix:
## non_logic_keyword
## LR(1) items:
keyword -> non_logic_keyword . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production keyword -> non_logic_keyword

State 74:
## Known stack suffix:
## LBRACE ne_label_list
## LR(1) items:
opt_label_list -> LBRACE ne_label_list . RBRACE [ LPAR ]
## Transitions:
-- On RBRACE shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## LBRACE ne_label_list RBRACE
## LR(1) items:
opt_label_list -> LBRACE ne_label_list RBRACE . [ LPAR ]
## Transitions:
## Reductions:
-- On LPAR
--   reduce production opt_label_list -> LBRACE ne_label_list RBRACE

State 76:
## Known stack suffix:
## label_name
## LR(1) items:
ne_label_list -> label_name . [ RBRACE ]
ne_label_list -> label_name . COMMA ne_label_list [ RBRACE ]
## Transitions:
-- On COMMA shift to state 77
## Reductions:
-- On RBRACE
--   reduce production ne_label_list -> label_name

State 77:
## Known stack suffix:
## label_name COMMA
## LR(1) items:
ne_label_list -> label_name COMMA . ne_label_list [ RBRACE ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_label_list shift to state 78
-- On label_name shift to state 76
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 86
-- On acsl_c_keyword shift to state 87
## Reductions:

State 78:
## Known stack suffix:
## label_name COMMA ne_label_list
## LR(1) items:
ne_label_list -> label_name COMMA ne_label_list . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production ne_label_list -> label_name COMMA ne_label_list

State 79:
## Known stack suffix:
## keyword
## LR(1) items:
any_identifier -> keyword . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production any_identifier -> keyword

State 80:
## Known stack suffix:
## is_ext_spec
## LR(1) items:
non_logic_keyword -> is_ext_spec . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production non_logic_keyword -> is_ext_spec

State 81:
## Known stack suffix:
## is_acsl_spec
## LR(1) items:
non_logic_keyword -> is_acsl_spec . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production non_logic_keyword -> is_acsl_spec

State 82:
## Known stack suffix:
## is_acsl_other
## LR(1) items:
non_logic_keyword -> is_acsl_other . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production non_logic_keyword -> is_acsl_other

State 83:
## Known stack suffix:
## is_acsl_decl_or_code_annot
## LR(1) items:
non_logic_keyword -> is_acsl_decl_or_code_annot . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production non_logic_keyword -> is_acsl_decl_or_code_annot

State 84:
## Known stack suffix:
## identifier_or_typename
## LR(1) items:
any_identifier -> identifier_or_typename . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production any_identifier -> identifier_or_typename

State 85:
## Known stack suffix:
## c_keyword
## LR(1) items:
non_logic_keyword -> c_keyword . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production non_logic_keyword -> c_keyword

State 86:
## Known stack suffix:
## any_identifier
## LR(1) items:
label_name -> any_identifier . [ RPAR RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAR RBRACE COMMA
--   reduce production label_name -> any_identifier

State 87:
## Known stack suffix:
## acsl_c_keyword
## LR(1) items:
non_logic_keyword -> acsl_c_keyword . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production non_logic_keyword -> acsl_c_keyword

State 88:
## Known stack suffix:
## opt_label_list
## LR(1) items:
opt_label_1 -> opt_label_list . [ LPAR ]
## Transitions:
## Reductions:
-- On LPAR
--   reduce production opt_label_1 -> opt_label_list

State 89:
## Known stack suffix:
## VALID_READ opt_label_1
## LR(1) items:
lexpr_inner -> VALID_READ opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## VALID_READ opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> VALID_READ opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 558
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 91:
## Known stack suffix:
## VALID_RANGE
## LR(1) items:
lexpr_inner -> VALID_RANGE . opt_label_1 LPAR lexpr COMMA lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 92
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 92:
## Known stack suffix:
## VALID_RANGE opt_label_1
## LR(1) items:
lexpr_inner -> VALID_RANGE opt_label_1 . LPAR lexpr COMMA lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## VALID_RANGE opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> VALID_RANGE opt_label_1 LPAR . lexpr COMMA lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 552
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 94:
## Known stack suffix:
## VALID_INDEX
## LR(1) items:
lexpr_inner -> VALID_INDEX . opt_label_1 LPAR lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 95
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 95:
## Known stack suffix:
## VALID_INDEX opt_label_1
## LR(1) items:
lexpr_inner -> VALID_INDEX opt_label_1 . LPAR lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## VALID_INDEX opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> VALID_INDEX opt_label_1 LPAR . lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 548
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 97:
## Known stack suffix:
## VALID_FUNCTION
## LR(1) items:
lexpr_inner -> VALID_FUNCTION . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## VALID_FUNCTION LPAR
## LR(1) items:
lexpr_inner -> VALID_FUNCTION LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 546
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 99:
## Known stack suffix:
## VALID
## LR(1) items:
lexpr_inner -> VALID . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 100
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 100:
## Known stack suffix:
## VALID opt_label_1
## LR(1) items:
lexpr_inner -> VALID opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## VALID opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> VALID opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 544
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 102:
## Known stack suffix:
## UNALLOCATED
## LR(1) items:
lexpr_inner -> UNALLOCATED . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> UNALLOCATED

State 103:
## Known stack suffix:
## TYPEOF
## LR(1) items:
lexpr_inner -> TYPEOF . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## TYPEOF LPAR
## LR(1) items:
lexpr_inner -> TYPEOF LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 542
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 105:
## Known stack suffix:
## TRUE
## LR(1) items:
lexpr_inner -> TRUE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> TRUE

State 106:
## Known stack suffix:
## TILDE
## LR(1) items:
lexpr_inner -> TILDE . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 541
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 107:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
string -> STRING_LITERAL . [ WRITES WITH STRING_LITERAL STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 COLON BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STRING_LITERAL STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 COLON BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production string -> STRING_LITERAL

State 108:
## Known stack suffix:
## STATIC
## LR(1) items:
lexpr_inner -> STATIC . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> STATIC

State 109:
## Known stack suffix:
## STAR
## LR(1) items:
lexpr_inner -> STAR . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 540
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 110:
## Known stack suffix:
## SIZEOF
## LR(1) items:
lexpr_inner -> SIZEOF . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> SIZEOF . LPAR cast_logic_type RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## SIZEOF LPAR
## LR(1) items:
lexpr_inner -> SIZEOF LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> SIZEOF LPAR . cast_logic_type RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 112
-- On VOID shift to state 113
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 114
-- On UNION shift to state 122
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 125
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 198
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 201
-- On SHORT shift to state 202
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 219
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 220
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 474
-- On INT shift to state 475
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 476
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 477
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 478
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 490
-- On COMPLETE shift to state 58
-- On CHAR shift to state 479
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 480
-- On BOOL shift to state 481
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On type_spec_cv shift to state 491
-- On type_spec shift to state 513
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 536
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On cv shift to state 519
-- On constant shift to state 341
-- On cast_logic_type shift to state 538
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 112:
## Known stack suffix:
## VOLATILE
## LR(1) items:
acsl_c_keyword -> VOLATILE . [ COLON ]
cv -> VOLATILE . [ VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production acsl_c_keyword -> VOLATILE
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production cv -> VOLATILE

State 113:
## Known stack suffix:
## VOID
## LR(1) items:
c_keyword -> VOID . [ COLON ]
type_spec -> VOID . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> VOID
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> VOID

State 114:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
c_keyword -> UNSIGNED . [ COLON ]
type_spec -> UNSIGNED . CHAR [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> UNSIGNED . INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> UNSIGNED . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> UNSIGNED . SHORT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> UNSIGNED . LONG [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> UNSIGNED . LONG INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> UNSIGNED . LONG LONG [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> UNSIGNED . LONG LONG INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
-- On SHORT shift to state 115
-- On LONG shift to state 116
-- On INT shift to state 120
-- On CHAR shift to state 121
## Reductions:
-- On COLON
--   reduce production c_keyword -> UNSIGNED
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> UNSIGNED

State 115:
## Known stack suffix:
## UNSIGNED SHORT
## LR(1) items:
type_spec -> UNSIGNED SHORT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED SHORT

State 116:
## Known stack suffix:
## UNSIGNED LONG
## LR(1) items:
type_spec -> UNSIGNED LONG . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED LONG . INT [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED LONG . LONG [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED LONG . LONG INT [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LONG shift to state 117
-- On INT shift to state 119
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED LONG

State 117:
## Known stack suffix:
## UNSIGNED LONG LONG
## LR(1) items:
type_spec -> UNSIGNED LONG LONG . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED LONG LONG . INT [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On INT shift to state 118
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED LONG LONG

State 118:
## Known stack suffix:
## UNSIGNED LONG LONG INT
## LR(1) items:
type_spec -> UNSIGNED LONG LONG INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED LONG LONG INT

State 119:
## Known stack suffix:
## UNSIGNED LONG INT
## LR(1) items:
type_spec -> UNSIGNED LONG INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED LONG INT

State 120:
## Known stack suffix:
## UNSIGNED INT
## LR(1) items:
type_spec -> UNSIGNED INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED INT

State 121:
## Known stack suffix:
## UNSIGNED CHAR
## LR(1) items:
type_spec -> UNSIGNED CHAR . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED CHAR

State 122:
## Known stack suffix:
## UNION
## LR(1) items:
c_keyword -> UNION . [ COLON ]
type_spec -> UNION . exit_rt_type identifier_or_typename [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
-- On exit_rt_type shift to state 123
## Reductions:
-- On COLON
--   reduce production c_keyword -> UNION
-- On TYPENAME IDENTIFIER
--   reduce production exit_rt_type ->

State 123:
## Known stack suffix:
## UNION exit_rt_type
## LR(1) items:
type_spec -> UNION exit_rt_type . identifier_or_typename [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On identifier_or_typename shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## UNION exit_rt_type identifier_or_typename
## LR(1) items:
type_spec -> UNION exit_rt_type identifier_or_typename . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNION exit_rt_type identifier_or_typename

State 125:
## Known stack suffix:
## TYPENAME
## LR(1) items:
identifier_or_typename -> TYPENAME . [ COLON ]
type_spec -> TYPENAME . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> TYPENAME . LT enter_rt_type ne_logic_type_list GT exit_rt_type [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
-- On LT shift to state 126
## Reductions:
-- On COLON
--   reduce production identifier_or_typename -> TYPENAME
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> TYPENAME

State 126:
## Known stack suffix:
## TYPENAME LT
## LR(1) items:
type_spec -> TYPENAME LT . enter_rt_type ne_logic_type_list GT exit_rt_type [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On enter_rt_type shift to state 127
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_rt_type ->

State 127:
## Known stack suffix:
## TYPENAME LT enter_rt_type
## LR(1) items:
type_spec -> TYPENAME LT enter_rt_type . ne_logic_type_list GT exit_rt_type [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On ne_logic_type_list shift to state 191
-- On logic_type shift to state 194
## Reductions:

State 128:
## Known stack suffix:
## VOID
## LR(1) items:
type_spec -> VOID . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> VOID

State 129:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
type_spec -> UNSIGNED . CHAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED . INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED . SHORT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED . LONG [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED . LONG INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED . LONG LONG [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> UNSIGNED . LONG LONG INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On SHORT shift to state 115
-- On LONG shift to state 116
-- On INT shift to state 120
-- On CHAR shift to state 121
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> UNSIGNED

State 130:
## Known stack suffix:
## UNION
## LR(1) items:
type_spec -> UNION . exit_rt_type identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On exit_rt_type shift to state 123
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production exit_rt_type ->

State 131:
## Known stack suffix:
## TYPENAME
## LR(1) items:
type_spec -> TYPENAME . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> TYPENAME . LT enter_rt_type ne_logic_type_list GT exit_rt_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LT shift to state 126
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> TYPENAME

State 132:
## Known stack suffix:
## STRUCT
## LR(1) items:
type_spec -> STRUCT . exit_rt_type identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On exit_rt_type shift to state 133
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production exit_rt_type ->

State 133:
## Known stack suffix:
## STRUCT exit_rt_type
## LR(1) items:
type_spec -> STRUCT exit_rt_type . identifier_or_typename [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On identifier_or_typename shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## STRUCT exit_rt_type identifier_or_typename
## LR(1) items:
type_spec -> STRUCT exit_rt_type identifier_or_typename . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> STRUCT exit_rt_type identifier_or_typename

State 135:
## Known stack suffix:
## SIGNED
## LR(1) items:
type_spec -> SIGNED . CHAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED . INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED . SHORT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED . LONG [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED . LONG INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED . LONG LONG [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED . LONG LONG INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On SHORT shift to state 136
-- On LONG shift to state 137
-- On INT shift to state 141
-- On CHAR shift to state 142
## Reductions:

State 136:
## Known stack suffix:
## SIGNED SHORT
## LR(1) items:
type_spec -> SIGNED SHORT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SIGNED SHORT

State 137:
## Known stack suffix:
## SIGNED LONG
## LR(1) items:
type_spec -> SIGNED LONG . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED LONG . INT [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED LONG . LONG [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED LONG . LONG INT [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LONG shift to state 138
-- On INT shift to state 140
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SIGNED LONG

State 138:
## Known stack suffix:
## SIGNED LONG LONG
## LR(1) items:
type_spec -> SIGNED LONG LONG . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> SIGNED LONG LONG . INT [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On INT shift to state 139
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SIGNED LONG LONG

State 139:
## Known stack suffix:
## SIGNED LONG LONG INT
## LR(1) items:
type_spec -> SIGNED LONG LONG INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SIGNED LONG LONG INT

State 140:
## Known stack suffix:
## SIGNED LONG INT
## LR(1) items:
type_spec -> SIGNED LONG INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SIGNED LONG INT

State 141:
## Known stack suffix:
## SIGNED INT
## LR(1) items:
type_spec -> SIGNED INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SIGNED INT

State 142:
## Known stack suffix:
## SIGNED CHAR
## LR(1) items:
type_spec -> SIGNED CHAR . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SIGNED CHAR

State 143:
## Known stack suffix:
## SHORT
## LR(1) items:
type_spec -> SHORT . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> SHORT

State 144:
## Known stack suffix:
## REAL
## LR(1) items:
type_spec -> REAL . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> REAL

State 145:
## Known stack suffix:
## LONG
## LR(1) items:
type_spec -> LONG . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> LONG . INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> LONG . LONG [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> LONG . LONG INT [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> LONG . DOUBLE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LONG shift to state 146
-- On INT shift to state 148
-- On DOUBLE shift to state 149
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> LONG

State 146:
## Known stack suffix:
## LONG LONG
## LR(1) items:
type_spec -> LONG LONG . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
type_spec -> LONG LONG . INT [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On INT shift to state 147
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> LONG LONG

State 147:
## Known stack suffix:
## LONG LONG INT
## LR(1) items:
type_spec -> LONG LONG INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> LONG LONG INT

State 148:
## Known stack suffix:
## LONG INT
## LR(1) items:
type_spec -> LONG INT . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> LONG INT

State 149:
## Known stack suffix:
## LONG DOUBLE
## LR(1) items:
type_spec -> LONG DOUBLE . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> LONG DOUBLE

State 150:
## Known stack suffix:
## INTEGER
## LR(1) items:
type_spec -> INTEGER . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> INTEGER

State 151:
## Known stack suffix:
## INT
## LR(1) items:
type_spec -> INT . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> INT

State 152:
## Known stack suffix:
## FLOAT
## LR(1) items:
type_spec -> FLOAT . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> FLOAT

State 153:
## Known stack suffix:
## ENUM
## LR(1) items:
type_spec -> ENUM . exit_rt_type identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On exit_rt_type shift to state 154
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production exit_rt_type ->

State 154:
## Known stack suffix:
## ENUM exit_rt_type
## LR(1) items:
type_spec -> ENUM exit_rt_type . identifier_or_typename [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On identifier_or_typename shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## ENUM exit_rt_type identifier_or_typename
## LR(1) items:
type_spec -> ENUM exit_rt_type identifier_or_typename . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> ENUM exit_rt_type identifier_or_typename

State 156:
## Known stack suffix:
## DOUBLE
## LR(1) items:
type_spec -> DOUBLE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> DOUBLE

State 157:
## Known stack suffix:
## CHAR
## LR(1) items:
type_spec -> CHAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> CHAR

State 158:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
type_spec -> BOOLEAN . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> BOOLEAN

State 159:
## Known stack suffix:
## BOOL
## LR(1) items:
type_spec -> BOOL . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> BOOL

State 160:
## Known stack suffix:
## type_spec
## LR(1) items:
logic_type -> type_spec . abs_spec_option [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 161
-- On LSQUARE shift to state 162
-- On LPAR shift to state 169
-- On tabs shift to state 170
-- On stars shift to state 171
-- On abs_spec_option shift to state 189
-- On abs_spec_bis shift to state 185
-- On abs_spec shift to state 190
## Reductions:
-- On WRITES WITH STARHAT SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec_option ->

State 161:
## Known stack suffix:
## STAR
## LR(1) items:
stars -> STAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production stars -> STAR

State 162:
## Known stack suffix:
## LSQUARE
## LR(1) items:
tabs -> LSQUARE . constant_option RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
tabs -> LSQUARE . constant_option RSQUARE tabs [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On constant_option shift to state 165
-- On constant shift to state 168
## Reductions:
-- On RSQUARE
--   reduce production constant_option ->

State 163:
## Known stack suffix:
## CONSTANT10
## LR(1) items:
constant -> CONSTANT10 . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production constant -> CONSTANT10

State 164:
## Known stack suffix:
## CONSTANT
## LR(1) items:
constant -> CONSTANT . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production constant -> CONSTANT

State 165:
## Known stack suffix:
## LSQUARE constant_option
## LR(1) items:
tabs -> LSQUARE constant_option . RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
tabs -> LSQUARE constant_option . RSQUARE tabs [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RSQUARE shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## LSQUARE constant_option RSQUARE
## LR(1) items:
tabs -> LSQUARE constant_option RSQUARE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
tabs -> LSQUARE constant_option RSQUARE . tabs [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LSQUARE shift to state 162
-- On tabs shift to state 167
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production tabs -> LSQUARE constant_option RSQUARE

State 167:
## Known stack suffix:
## LSQUARE constant_option RSQUARE tabs
## LR(1) items:
tabs -> LSQUARE constant_option RSQUARE tabs . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production tabs -> LSQUARE constant_option RSQUARE tabs

State 168:
## Known stack suffix:
## constant
## LR(1) items:
constant_option -> constant . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production constant_option -> constant

State 169:
## Known stack suffix:
## LPAR
## LR(1) items:
abs_spec_bis -> LPAR . abs_spec RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 161
-- On LSQUARE shift to state 162
-- On LPAR shift to state 169
-- On tabs shift to state 170
-- On stars shift to state 171
-- On abs_spec_bis shift to state 185
-- On abs_spec shift to state 187
## Reductions:

State 170:
## Known stack suffix:
## tabs
## LR(1) items:
abs_spec -> tabs . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec -> tabs

State 171:
## Known stack suffix:
## stars
## LR(1) items:
abs_spec -> stars . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
abs_spec -> stars . tabs [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
abs_spec -> stars . abs_spec_bis [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
abs_spec -> stars . abs_spec_bis tabs [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
stars -> stars . STAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 172
-- On LSQUARE shift to state 162
-- On LPAR shift to state 169
-- On tabs shift to state 173
-- On abs_spec_bis shift to state 174
## Reductions:
-- On WRITES WITH STARHAT SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec -> stars

State 172:
## Known stack suffix:
## stars STAR
## LR(1) items:
stars -> stars STAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production stars -> stars STAR

State 173:
## Known stack suffix:
## stars tabs
## LR(1) items:
abs_spec -> stars tabs . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec -> stars tabs

State 174:
## Known stack suffix:
## stars abs_spec_bis
## LR(1) items:
abs_spec -> stars abs_spec_bis . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
abs_spec -> stars abs_spec_bis . tabs [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
abs_spec_bis -> abs_spec_bis . LPAR abs_param_type_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LSQUARE shift to state 162
-- On LPAR shift to state 175
-- On tabs shift to state 184
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec -> stars abs_spec_bis

State 175:
## Known stack suffix:
## abs_spec_bis LPAR
## LR(1) items:
abs_spec_bis -> abs_spec_bis LPAR . abs_param_type_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On logic_type shift to state 176
-- On abs_param_type_list shift to state 177
-- On abs_param_list shift to state 179
-- On abs_param shift to state 183
## Reductions:
-- On RPAR
--   reduce production abs_param_type_list ->

State 176:
## Known stack suffix:
## logic_type
## LR(1) items:
abs_param -> logic_type . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production abs_param -> logic_type

State 177:
## Known stack suffix:
## abs_spec_bis LPAR abs_param_type_list
## LR(1) items:
abs_spec_bis -> abs_spec_bis LPAR abs_param_type_list . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## abs_spec_bis LPAR abs_param_type_list RPAR
## LR(1) items:
abs_spec_bis -> abs_spec_bis LPAR abs_param_type_list RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec_bis -> abs_spec_bis LPAR abs_param_type_list RPAR

State 179:
## Known stack suffix:
## abs_param_list
## LR(1) items:
abs_param_list -> abs_param_list . COMMA abs_param [ RPAR COMMA ]
abs_param_type_list -> abs_param_list . [ RPAR ]
abs_param_type_list -> abs_param_list . COMMA DOTDOTDOT [ RPAR ]
## Transitions:
-- On COMMA shift to state 180
## Reductions:
-- On RPAR
--   reduce production abs_param_type_list -> abs_param_list

State 180:
## Known stack suffix:
## abs_param_list COMMA
## LR(1) items:
abs_param_list -> abs_param_list COMMA . abs_param [ RPAR COMMA ]
abs_param_type_list -> abs_param_list COMMA . DOTDOTDOT [ RPAR ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On DOTDOTDOT shift to state 181
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On logic_type shift to state 176
-- On abs_param shift to state 182
## Reductions:

State 181:
## Known stack suffix:
## abs_param_list COMMA DOTDOTDOT
## LR(1) items:
abs_param_type_list -> abs_param_list COMMA DOTDOTDOT . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production abs_param_type_list -> abs_param_list COMMA DOTDOTDOT

State 182:
## Known stack suffix:
## abs_param_list COMMA abs_param
## LR(1) items:
abs_param_list -> abs_param_list COMMA abs_param . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production abs_param_list -> abs_param_list COMMA abs_param

State 183:
## Known stack suffix:
## abs_param
## LR(1) items:
abs_param_list -> abs_param . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production abs_param_list -> abs_param

State 184:
## Known stack suffix:
## stars abs_spec_bis tabs
## LR(1) items:
abs_spec -> stars abs_spec_bis tabs . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec -> stars abs_spec_bis tabs

State 185:
## Known stack suffix:
## abs_spec_bis
## LR(1) items:
abs_spec -> abs_spec_bis . tabs [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
abs_spec -> abs_spec_bis . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
abs_spec_bis -> abs_spec_bis . LPAR abs_param_type_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LSQUARE shift to state 162
-- On LPAR shift to state 175
-- On tabs shift to state 186
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec -> abs_spec_bis

State 186:
## Known stack suffix:
## abs_spec_bis tabs
## LR(1) items:
abs_spec -> abs_spec_bis tabs . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec -> abs_spec_bis tabs

State 187:
## Known stack suffix:
## LPAR abs_spec
## LR(1) items:
abs_spec_bis -> LPAR abs_spec . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## LPAR abs_spec RPAR
## LR(1) items:
abs_spec_bis -> LPAR abs_spec RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec_bis -> LPAR abs_spec RPAR

State 189:
## Known stack suffix:
## type_spec abs_spec_option
## LR(1) items:
logic_type -> type_spec abs_spec_option . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production logic_type -> type_spec abs_spec_option

State 190:
## Known stack suffix:
## abs_spec
## LR(1) items:
abs_spec_option -> abs_spec . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production abs_spec_option -> abs_spec

State 191:
## Known stack suffix:
## TYPENAME LT enter_rt_type ne_logic_type_list
## LR(1) items:
type_spec -> TYPENAME LT enter_rt_type ne_logic_type_list . GT exit_rt_type [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On GT shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## TYPENAME LT enter_rt_type ne_logic_type_list GT
## LR(1) items:
type_spec -> TYPENAME LT enter_rt_type ne_logic_type_list GT . exit_rt_type [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On exit_rt_type shift to state 193
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production exit_rt_type ->

State 193:
## Known stack suffix:
## TYPENAME LT enter_rt_type ne_logic_type_list GT exit_rt_type
## LR(1) items:
type_spec -> TYPENAME LT enter_rt_type ne_logic_type_list GT exit_rt_type . [ WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES CONST COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production type_spec -> TYPENAME LT enter_rt_type ne_logic_type_list GT exit_rt_type

State 194:
## Known stack suffix:
## logic_type
## LR(1) items:
ne_logic_type_list -> logic_type . [ GT ]
ne_logic_type_list -> logic_type . COMMA enter_rt_type ne_logic_type_list [ GT ]
## Transitions:
-- On COMMA shift to state 195
## Reductions:
-- On GT
--   reduce production ne_logic_type_list -> logic_type

State 195:
## Known stack suffix:
## logic_type COMMA
## LR(1) items:
ne_logic_type_list -> logic_type COMMA . enter_rt_type ne_logic_type_list [ GT ]
## Transitions:
-- On enter_rt_type shift to state 196
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_rt_type ->

State 196:
## Known stack suffix:
## logic_type COMMA enter_rt_type
## LR(1) items:
ne_logic_type_list -> logic_type COMMA enter_rt_type . ne_logic_type_list [ GT ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On ne_logic_type_list shift to state 197
-- On logic_type shift to state 194
## Reductions:

State 197:
## Known stack suffix:
## logic_type COMMA enter_rt_type ne_logic_type_list
## LR(1) items:
ne_logic_type_list -> logic_type COMMA enter_rt_type ne_logic_type_list . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production ne_logic_type_list -> logic_type COMMA enter_rt_type ne_logic_type_list

State 198:
## Known stack suffix:
## STRUCT
## LR(1) items:
c_keyword -> STRUCT . [ COLON ]
type_spec -> STRUCT . exit_rt_type identifier_or_typename [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
-- On exit_rt_type shift to state 133
## Reductions:
-- On COLON
--   reduce production c_keyword -> STRUCT
-- On TYPENAME IDENTIFIER
--   reduce production exit_rt_type ->

State 199:
## Known stack suffix:
## STATIC
## LR(1) items:
c_keyword -> STATIC . [ COLON ]
lexpr_inner -> STATIC . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> STATIC
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> STATIC

State 200:
## Known stack suffix:
## SIZEOF
## LR(1) items:
c_keyword -> SIZEOF . [ COLON ]
lexpr_inner -> SIZEOF . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> SIZEOF . LPAR cast_logic_type RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 111
## Reductions:
-- On COLON
--   reduce production c_keyword -> SIZEOF

State 201:
## Known stack suffix:
## SIGNED
## LR(1) items:
c_keyword -> SIGNED . [ COLON ]
type_spec -> SIGNED . CHAR [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> SIGNED . INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> SIGNED . SHORT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> SIGNED . LONG [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> SIGNED . LONG INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> SIGNED . LONG LONG [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> SIGNED . LONG LONG INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
-- On SHORT shift to state 136
-- On LONG shift to state 137
-- On INT shift to state 141
-- On CHAR shift to state 142
## Reductions:
-- On COLON
--   reduce production c_keyword -> SIGNED

State 202:
## Known stack suffix:
## SHORT
## LR(1) items:
c_keyword -> SHORT . [ COLON ]
type_spec -> SHORT . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> SHORT
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> SHORT

State 203:
## Known stack suffix:
## SEPARATED
## LR(1) items:
lexpr_inner -> SEPARATED . LPAR ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## SEPARATED LPAR
## LR(1) items:
lexpr_inner -> SEPARATED LPAR . ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 534
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 205:
## Known stack suffix:
## RESULT
## LR(1) items:
lexpr_inner -> RESULT . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> RESULT

State 206:
## Known stack suffix:
## REGISTER
## LR(1) items:
lexpr_inner -> REGISTER . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> REGISTER

State 207:
## Known stack suffix:
## PLUS
## LR(1) items:
lexpr_inner -> PLUS . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 533
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 208:
## Known stack suffix:
## OLD
## LR(1) items:
lexpr_inner -> OLD . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## OLD LPAR
## LR(1) items:
lexpr_inner -> OLD LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 531
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 210:
## Known stack suffix:
## OFFSET
## LR(1) items:
lexpr_inner -> OFFSET . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 211
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 211:
## Known stack suffix:
## OFFSET opt_label_1
## LR(1) items:
lexpr_inner -> OFFSET opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## OFFSET opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> OFFSET opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 529
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 213:
## Known stack suffix:
## NULL
## LR(1) items:
lexpr_inner -> NULL . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> NULL

State 214:
## Known stack suffix:
## NOT
## LR(1) items:
lexpr_end_rel -> NOT . lexpr_binder [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_inner -> NOT . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LET shift to state 221
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FALSE shift to state 268
-- On EXISTS shift to state 269
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 527
-- On lexpr_binder shift to state 528
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 215:
## Known stack suffix:
## NOT
## LR(1) items:
lexpr_inner -> NOT . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 527
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 216:
## Known stack suffix:
## MINUS
## LR(1) items:
lexpr_inner -> MINUS . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 526
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 217:
## Known stack suffix:
## LSQUAREPIPE
## LR(1) items:
lexpr_inner -> LSQUAREPIPE . lexpr_list RSQUAREPIPE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 413
-- On lexpr_rel shift to state 304
-- On lexpr_list shift to state 524
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On RSQUAREPIPE
--   reduce production lexpr_list ->

State 218:
## Known stack suffix:
## LPAR
## LR(1) items:
lexpr_inner -> LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LPAR . range RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LPAR . cast_logic_type RPAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 112
-- On VOID shift to state 113
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 114
-- On UNION shift to state 122
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 125
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 198
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 201
-- On SHORT shift to state 202
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 219
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 220
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 474
-- On INT shift to state 475
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 476
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 477
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 478
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 490
-- On COMPLETE shift to state 58
-- On CHAR shift to state 479
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 480
-- On BOOL shift to state 481
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On type_spec_cv shift to state 491
-- On type_spec shift to state 513
-- On string shift to state 301
-- On range shift to state 515
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_option shift to state 316
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 517
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On cv shift to state 519
-- On constant shift to state 341
-- On cast_logic_type shift to state 521
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On DOTDOT
--   reduce production lexpr_option ->

State 219:
## Known stack suffix:
## REAL
## LR(1) items:
is_acsl_other -> REAL . [ COLON ]
type_spec -> REAL . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production is_acsl_other -> REAL
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> REAL

State 220:
## Known stack suffix:
## LONG
## LR(1) items:
c_keyword -> LONG . [ COLON ]
type_spec -> LONG . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> LONG . INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> LONG . LONG [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> LONG . LONG INT [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
type_spec -> LONG . DOUBLE [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
-- On LONG shift to state 146
-- On INT shift to state 148
-- On DOUBLE shift to state 149
## Reductions:
-- On COLON
--   reduce production c_keyword -> LONG
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> LONG

State 221:
## Known stack suffix:
## LET
## LR(1) items:
lexpr_binder -> LET . bounded_var EQUAL lexpr SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On TYPENAME shift to state 222
-- On IDENTIFIER shift to state 223
-- On identifier shift to state 224
-- On bounded_var shift to state 225
## Reductions:

State 222:
## Known stack suffix:
## TYPENAME
## LR(1) items:
bounded_var -> TYPENAME . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production bounded_var -> TYPENAME

State 223:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
identifier -> IDENTIFIER . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 COLON BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 COLON BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production identifier -> IDENTIFIER

State 224:
## Known stack suffix:
## identifier
## LR(1) items:
bounded_var -> identifier . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production bounded_var -> identifier

State 225:
## Known stack suffix:
## LET bounded_var
## LR(1) items:
lexpr_binder -> LET bounded_var . EQUAL lexpr SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On EQUAL shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LET bounded_var EQUAL
## LR(1) items:
lexpr_binder -> LET bounded_var EQUAL . lexpr SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 487
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 227:
## Known stack suffix:
## LBRACE
## LR(1) items:
lexpr_inner -> LBRACE . lexpr_list RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE . lexpr PIPE binders RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE . lexpr PIPE binders SEMICOLON lexpr RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE . field_init RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE . array_init RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE . lexpr WITH update RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LSQUARE shift to state 228
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DOT shift to state 435
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 413
-- On lexpr_rel shift to state 304
-- On lexpr_list shift to state 437
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 439
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On field_path_elt shift to state 454
-- On field_init_elt shift to state 457
-- On field_init shift to state 460
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On array_path_elt shift to state 462
-- On array_init_elt shift to state 465
-- On array_init shift to state 468
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On RBRACE
--   reduce production lexpr_list ->

State 228:
## Known stack suffix:
## LSQUARE
## LR(1) items:
array_path_elt -> LSQUARE . lexpr RSQUARE [ LSQUARE EQUAL DOT ]
array_path_elt -> LSQUARE . range RSQUARE [ LSQUARE EQUAL DOT ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On range shift to state 431
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_option shift to state 316
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 433
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On DOTDOT
--   reduce production lexpr_option ->

State 229:
## Known stack suffix:
## LAMBDA
## LR(1) items:
lexpr_binder -> LAMBDA . binders SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 230
-- On decl_spec shift to state 245
-- On binders_reentrance shift to state 246
-- On binders shift to state 250
## Reductions:

State 230:
## Known stack suffix:
## type_spec
## LR(1) items:
decl_spec -> type_spec . var_spec [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On STAR shift to state 161
-- On LPAR shift to state 231
-- On IDENTIFIER shift to state 223
-- On var_spec_bis shift to state 232
-- On var_spec shift to state 244
-- On stars shift to state 241
-- On identifier shift to state 243
## Reductions:

State 231:
## Known stack suffix:
## LPAR
## LR(1) items:
var_spec_bis -> LPAR . var_spec RPAR [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On STAR shift to state 161
-- On LPAR shift to state 231
-- On IDENTIFIER shift to state 223
-- On var_spec_bis shift to state 232
-- On var_spec shift to state 239
-- On stars shift to state 241
-- On identifier shift to state 243
## Reductions:

State 232:
## Known stack suffix:
## var_spec_bis
## LR(1) items:
var_spec -> var_spec_bis . [ SEMICOLON RPAR RBRACE COMMA ]
var_spec_bis -> var_spec_bis . LSQUARE constant_option RSQUARE [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
var_spec_bis -> var_spec_bis . LPAR abs_param_type_list RPAR [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On LSQUARE shift to state 233
-- On LPAR shift to state 236
## Reductions:
-- On SEMICOLON RPAR RBRACE COMMA
--   reduce production var_spec -> var_spec_bis

State 233:
## Known stack suffix:
## var_spec_bis LSQUARE
## LR(1) items:
var_spec_bis -> var_spec_bis LSQUARE . constant_option RSQUARE [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On constant_option shift to state 234
-- On constant shift to state 168
## Reductions:
-- On RSQUARE
--   reduce production constant_option ->

State 234:
## Known stack suffix:
## var_spec_bis LSQUARE constant_option
## LR(1) items:
var_spec_bis -> var_spec_bis LSQUARE constant_option . RSQUARE [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On RSQUARE shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## var_spec_bis LSQUARE constant_option RSQUARE
## LR(1) items:
var_spec_bis -> var_spec_bis LSQUARE constant_option RSQUARE . [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA
--   reduce production var_spec_bis -> var_spec_bis LSQUARE constant_option RSQUARE

State 236:
## Known stack suffix:
## var_spec_bis LPAR
## LR(1) items:
var_spec_bis -> var_spec_bis LPAR . abs_param_type_list RPAR [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On logic_type shift to state 176
-- On abs_param_type_list shift to state 237
-- On abs_param_list shift to state 179
-- On abs_param shift to state 183
## Reductions:
-- On RPAR
--   reduce production abs_param_type_list ->

State 237:
## Known stack suffix:
## var_spec_bis LPAR abs_param_type_list
## LR(1) items:
var_spec_bis -> var_spec_bis LPAR abs_param_type_list . RPAR [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On RPAR shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## var_spec_bis LPAR abs_param_type_list RPAR
## LR(1) items:
var_spec_bis -> var_spec_bis LPAR abs_param_type_list RPAR . [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA
--   reduce production var_spec_bis -> var_spec_bis LPAR abs_param_type_list RPAR

State 239:
## Known stack suffix:
## LPAR var_spec
## LR(1) items:
var_spec_bis -> LPAR var_spec . RPAR [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On RPAR shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## LPAR var_spec RPAR
## LR(1) items:
var_spec_bis -> LPAR var_spec RPAR . [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA
--   reduce production var_spec_bis -> LPAR var_spec RPAR

State 241:
## Known stack suffix:
## stars
## LR(1) items:
stars -> stars . STAR [ STAR LPAR IDENTIFIER ]
var_spec -> stars . var_spec_bis [ SEMICOLON RPAR RBRACE COMMA ]
## Transitions:
-- On STAR shift to state 172
-- On LPAR shift to state 231
-- On IDENTIFIER shift to state 223
-- On var_spec_bis shift to state 242
-- On identifier shift to state 243
## Reductions:

State 242:
## Known stack suffix:
## stars var_spec_bis
## LR(1) items:
var_spec -> stars var_spec_bis . [ SEMICOLON RPAR RBRACE COMMA ]
var_spec_bis -> var_spec_bis . LSQUARE constant_option RSQUARE [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
var_spec_bis -> var_spec_bis . LPAR abs_param_type_list RPAR [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
-- On LSQUARE shift to state 233
-- On LPAR shift to state 236
## Reductions:
-- On SEMICOLON RPAR RBRACE COMMA
--   reduce production var_spec -> stars var_spec_bis

State 243:
## Known stack suffix:
## identifier
## LR(1) items:
var_spec_bis -> identifier . [ SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRACE LSQUARE LPAR COMMA
--   reduce production var_spec_bis -> identifier

State 244:
## Known stack suffix:
## type_spec var_spec
## LR(1) items:
decl_spec -> type_spec var_spec . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE COMMA
--   reduce production decl_spec -> type_spec var_spec

State 245:
## Known stack suffix:
## decl_spec
## LR(1) items:
binders_reentrance -> decl_spec . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE COMMA
--   reduce production binders_reentrance -> decl_spec

State 246:
## Known stack suffix:
## binders_reentrance
## LR(1) items:
binders -> binders_reentrance . [ SEMICOLON RBRACE ]
binders_reentrance -> binders_reentrance . COMMA decl_spec [ SEMICOLON RBRACE COMMA ]
binders_reentrance -> binders_reentrance . COMMA var_spec [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 247
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production binders -> binders_reentrance

State 247:
## Known stack suffix:
## binders_reentrance COMMA
## LR(1) items:
binders_reentrance -> binders_reentrance COMMA . decl_spec [ SEMICOLON RBRACE COMMA ]
binders_reentrance -> binders_reentrance COMMA . var_spec [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On STAR shift to state 161
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LPAR shift to state 231
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On IDENTIFIER shift to state 223
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On var_spec_bis shift to state 232
-- On var_spec shift to state 248
-- On type_spec shift to state 230
-- On stars shift to state 241
-- On identifier shift to state 243
-- On decl_spec shift to state 249
## Reductions:

State 248:
## Known stack suffix:
## binders_reentrance COMMA var_spec
## LR(1) items:
binders_reentrance -> binders_reentrance COMMA var_spec . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE COMMA
--   reduce production binders_reentrance -> binders_reentrance COMMA var_spec

State 249:
## Known stack suffix:
## binders_reentrance COMMA decl_spec
## LR(1) items:
binders_reentrance -> binders_reentrance COMMA decl_spec . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE COMMA
--   reduce production binders_reentrance -> binders_reentrance COMMA decl_spec

State 250:
## Known stack suffix:
## LAMBDA binders
## LR(1) items:
lexpr_binder -> LAMBDA binders . SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## LAMBDA binders SEMICOLON
## LR(1) items:
lexpr_binder -> LAMBDA binders SEMICOLON . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 430
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 252:
## Known stack suffix:
## INTER
## LR(1) items:
lexpr_inner -> INTER . LPAR lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## INTER LPAR
## LR(1) items:
lexpr_inner -> INTER LPAR . lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 413
-- On lexpr_rel shift to state 304
-- On lexpr_list shift to state 428
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On RPAR
--   reduce production lexpr_list ->

State 254:
## Known stack suffix:
## INITIALIZED
## LR(1) items:
lexpr_inner -> INITIALIZED . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 255
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 255:
## Known stack suffix:
## INITIALIZED opt_label_1
## LR(1) items:
lexpr_inner -> INITIALIZED opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## INITIALIZED opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> INITIALIZED opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 426
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 257:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
identifier -> IDENTIFIER . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
identifier_or_typename -> IDENTIFIER . [ COLON ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LPAR LE LBRACE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production identifier -> IDENTIFIER
-- On COLON
--   reduce production identifier_or_typename -> IDENTIFIER

State 258:
## Known stack suffix:
## FRESH
## LR(1) items:
lexpr_inner -> FRESH . opt_label_2 LPAR lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 259
-- On opt_label_2 shift to state 260
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 259:
## Known stack suffix:
## opt_label_list
## LR(1) items:
opt_label_2 -> opt_label_list . [ LPAR ]
## Transitions:
## Reductions:
-- On LPAR
--   reduce production opt_label_2 -> opt_label_list

State 260:
## Known stack suffix:
## FRESH opt_label_2
## LR(1) items:
lexpr_inner -> FRESH opt_label_2 . LPAR lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## FRESH opt_label_2 LPAR
## LR(1) items:
lexpr_inner -> FRESH opt_label_2 LPAR . lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 422
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 262:
## Known stack suffix:
## FREEABLE
## LR(1) items:
lexpr_inner -> FREEABLE . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 263
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 263:
## Known stack suffix:
## FREEABLE opt_label_1
## LR(1) items:
lexpr_inner -> FREEABLE opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## FREEABLE opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> FREEABLE opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 420
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 265:
## Known stack suffix:
## FORALL
## LR(1) items:
lexpr_binder -> FORALL . binders SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 230
-- On decl_spec shift to state 245
-- On binders_reentrance shift to state 246
-- On binders shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## FORALL binders
## LR(1) items:
lexpr_binder -> FORALL binders . SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## FORALL binders SEMICOLON
## LR(1) items:
lexpr_binder -> FORALL binders SEMICOLON . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 419
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 268:
## Known stack suffix:
## FALSE
## LR(1) items:
lexpr_inner -> FALSE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> FALSE

State 269:
## Known stack suffix:
## EXISTS
## LR(1) items:
lexpr_binder -> EXISTS . binders SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 230
-- On decl_spec shift to state 245
-- On binders_reentrance shift to state 246
-- On binders shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## EXISTS binders
## LR(1) items:
lexpr_binder -> EXISTS binders . SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## EXISTS binders SEMICOLON
## LR(1) items:
lexpr_binder -> EXISTS binders SEMICOLON . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 418
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 272:
## Known stack suffix:
## EMPTY
## LR(1) items:
lexpr_inner -> EMPTY . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> EMPTY

State 273:
## Known stack suffix:
## DYNAMIC
## LR(1) items:
lexpr_inner -> DYNAMIC . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> DYNAMIC

State 274:
## Known stack suffix:
## DANGLING
## LR(1) items:
lexpr_inner -> DANGLING . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 275
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 275:
## Known stack suffix:
## DANGLING opt_label_1
## LR(1) items:
lexpr_inner -> DANGLING opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## DANGLING opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> DANGLING opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 416
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 277:
## Known stack suffix:
## BSUNION
## LR(1) items:
lexpr_inner -> BSUNION . LPAR lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## BSUNION LPAR
## LR(1) items:
lexpr_inner -> BSUNION LPAR . lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 413
-- On lexpr_rel shift to state 304
-- On lexpr_list shift to state 414
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On RPAR
--   reduce production lexpr_list ->

State 279:
## Known stack suffix:
## BSTYPE
## LR(1) items:
lexpr_inner -> BSTYPE . LPAR type_spec RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> BSTYPE . LPAR type_spec stars RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## BSTYPE LPAR
## LR(1) items:
lexpr_inner -> BSTYPE LPAR . type_spec RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> BSTYPE LPAR . type_spec stars RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## BSTYPE LPAR type_spec
## LR(1) items:
lexpr_inner -> BSTYPE LPAR type_spec . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> BSTYPE LPAR type_spec . stars RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 161
-- On RPAR shift to state 282
-- On stars shift to state 283
## Reductions:

State 282:
## Known stack suffix:
## BSTYPE LPAR type_spec RPAR
## LR(1) items:
lexpr_inner -> BSTYPE LPAR type_spec RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> BSTYPE LPAR type_spec RPAR

State 283:
## Known stack suffix:
## BSTYPE LPAR type_spec stars
## LR(1) items:
lexpr_inner -> BSTYPE LPAR type_spec stars . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
stars -> stars . STAR [ STAR RPAR ]
## Transitions:
-- On STAR shift to state 172
-- On RPAR shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## BSTYPE LPAR type_spec stars RPAR
## LR(1) items:
lexpr_inner -> BSTYPE LPAR type_spec stars RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> BSTYPE LPAR type_spec stars RPAR

State 285:
## Known stack suffix:
## BLOCK_LENGTH
## LR(1) items:
lexpr_inner -> BLOCK_LENGTH . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 286
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 286:
## Known stack suffix:
## BLOCK_LENGTH opt_label_1
## LR(1) items:
lexpr_inner -> BLOCK_LENGTH opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## BLOCK_LENGTH opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> BLOCK_LENGTH opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 411
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 288:
## Known stack suffix:
## BASE_ADDR
## LR(1) items:
lexpr_inner -> BASE_ADDR . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 289
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 289:
## Known stack suffix:
## BASE_ADDR opt_label_1
## LR(1) items:
lexpr_inner -> BASE_ADDR opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## BASE_ADDR opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> BASE_ADDR opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 409
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 291:
## Known stack suffix:
## AUTOMATIC
## LR(1) items:
lexpr_inner -> AUTOMATIC . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> AUTOMATIC

State 292:
## Known stack suffix:
## AT
## LR(1) items:
lexpr_inner -> AT . LPAR lexpr COMMA label_name RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## AT LPAR
## LR(1) items:
lexpr_inner -> AT LPAR . lexpr COMMA label_name RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 405
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 294:
## Known stack suffix:
## AMP
## LR(1) items:
lexpr_inner -> AMP . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 404
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 295:
## Known stack suffix:
## ALLOCATION
## LR(1) items:
lexpr_inner -> ALLOCATION . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 296
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 296:
## Known stack suffix:
## ALLOCATION opt_label_1
## LR(1) items:
lexpr_inner -> ALLOCATION opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## ALLOCATION opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> ALLOCATION opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 402
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 298:
## Known stack suffix:
## ALLOCABLE
## LR(1) items:
lexpr_inner -> ALLOCABLE . opt_label_1 LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LBRACE shift to state 7
-- On opt_label_list shift to state 88
-- On opt_label_1 shift to state 299
## Reductions:
-- On LPAR
--   reduce production opt_label_list ->

State 299:
## Known stack suffix:
## ALLOCABLE opt_label_1
## LR(1) items:
lexpr_inner -> ALLOCABLE opt_label_1 . LPAR lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## ALLOCABLE opt_label_1 LPAR
## LR(1) items:
lexpr_inner -> ALLOCABLE opt_label_1 LPAR . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 400
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 301:
## Known stack suffix:
## string
## LR(1) items:
lexpr -> string . COLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_inner -> string . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
string -> string . STRING_LITERAL [ WRITES WITH STRING_LITERAL STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 COLON BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STRING_LITERAL shift to state 302
-- On COLON shift to state 303
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> string

State 302:
## Known stack suffix:
## string STRING_LITERAL
## LR(1) items:
string -> string STRING_LITERAL . [ WRITES WITH STRING_LITERAL STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 COLON BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STRING_LITERAL STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 COLON BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production string -> string STRING_LITERAL

State 303:
## Known stack suffix:
## string COLON
## LR(1) items:
lexpr -> string COLON . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 399
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 304:
## Known stack suffix:
## lexpr_rel
## LR(1) items:
lexpr -> lexpr_rel . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr -> lexpr_rel

State 305:
## Known stack suffix:
## lexpr_inner
## LR(1) items:
lexpr_end_rel -> lexpr_inner . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_rel -> lexpr_inner . rel_list [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On STARHAT shift to state 306
-- On STAR shift to state 309
-- On SLASH shift to state 375
-- On PLUS shift to state 377
-- On PERCENT shift to state 379
-- On NE shift to state 387
-- On MINUS shift to state 381
-- On LTLT shift to state 383
-- On LTCOLON shift to state 311
-- On LT shift to state 388
-- On LSQUARE shift to state 313
-- On LE shift to state 389
-- On GTGT shift to state 385
-- On GT shift to state 390
-- On GE shift to state 391
-- On EQUAL shift to state 392
-- On EQ shift to state 393
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
-- On relation shift to state 394
-- On rel_list shift to state 398
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_end_rel -> lexpr_inner

State 306:
## Known stack suffix:
## lexpr_inner STARHAT
## LR(1) items:
lexpr_inner -> lexpr_inner STARHAT . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 308
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 307:
## Known stack suffix:
## string
## LR(1) items:
lexpr_inner -> string . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
string -> string . STRING_LITERAL [ WRITES WITH STRING_LITERAL STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STRING_LITERAL shift to state 302
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> string

State 308:
## Known stack suffix:
## lexpr_inner STARHAT lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner STARHAT lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 309
-- On SLASH shift to state 375
-- On PLUS shift to state 377
-- On PERCENT shift to state 379
-- On MINUS shift to state 381
-- On LTLT shift to state 383
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On GTGT shift to state 385
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR NE LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner STARHAT lexpr_inner

State 309:
## Known stack suffix:
## lexpr_inner STAR
## LR(1) items:
lexpr_inner -> lexpr_inner STAR . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 310
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 310:
## Known stack suffix:
## lexpr_inner STAR lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner STAR lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner STAR lexpr_inner

State 311:
## Known stack suffix:
## lexpr_inner LTCOLON
## LR(1) items:
lexpr_inner -> lexpr_inner LTCOLON . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 312
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 312:
## Known stack suffix:
## lexpr_inner LTCOLON lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner LTCOLON lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner LTCOLON lexpr_inner

State 313:
## Known stack suffix:
## lexpr_inner LSQUARE
## LR(1) items:
lexpr_inner -> lexpr_inner LSQUARE . range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner LSQUARE . lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On range shift to state 314
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_option shift to state 316
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 366
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On DOTDOT
--   reduce production lexpr_option ->

State 314:
## Known stack suffix:
## lexpr_inner LSQUARE range
## LR(1) items:
lexpr_inner -> lexpr_inner LSQUARE range . RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RSQUARE shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## lexpr_inner LSQUARE range RSQUARE
## LR(1) items:
lexpr_inner -> lexpr_inner LSQUARE range RSQUARE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner LSQUARE range RSQUARE

State 316:
## Known stack suffix:
## lexpr_option
## LR(1) items:
range -> lexpr_option . DOTDOT lexpr_option [ RSQUARE RPAR ]
## Transitions:
-- On DOTDOT shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## lexpr_option DOTDOT
## LR(1) items:
range -> lexpr_option DOTDOT . lexpr_option [ RSQUARE RPAR ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_option shift to state 318
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 321
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On RSQUARE RPAR
--   reduce production lexpr_option ->

State 318:
## Known stack suffix:
## lexpr_option DOTDOT lexpr_option
## LR(1) items:
range -> lexpr_option DOTDOT lexpr_option . [ RSQUARE RPAR ]
## Transitions:
## Reductions:
-- On RSQUARE RPAR
--   reduce production range -> lexpr_option DOTDOT lexpr_option

State 319:
## Known stack suffix:
## lexpr_end_rel
## LR(1) items:
lexpr_rel -> lexpr_end_rel . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_rel -> lexpr_end_rel

State 320:
## Known stack suffix:
## lexpr_binder
## LR(1) items:
lexpr_end_rel -> lexpr_binder . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_end_rel -> lexpr_binder

State 321:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RSQUARE RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_option -> lexpr . [ RSQUARE RPAR ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On RSQUARE RPAR
--   reduce production lexpr_option -> lexpr

State 322:
## Known stack suffix:
## lexpr QUESTION
## LR(1) items:
lexpr -> lexpr QUESTION . lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 323
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 323:
## Known stack suffix:
## lexpr QUESTION lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COLON2 BIMPLIES BIFF AND AMP ]
lexpr -> lexpr QUESTION lexpr . COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COLON2 shift to state 364
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 324:
## Known stack suffix:
## lexpr PIPE
## LR(1) items:
lexpr -> lexpr PIPE . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 325
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 325:
## Known stack suffix:
## lexpr PIPE lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr PIPE lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On HAT shift to state 326
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND ALLOCATES
--   reduce production lexpr -> lexpr PIPE lexpr

State 326:
## Known stack suffix:
## lexpr HAT
## LR(1) items:
lexpr -> lexpr HAT . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 327
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 327:
## Known stack suffix:
## lexpr HAT lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr HAT lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND ALLOCATES
--   reduce production lexpr -> lexpr HAT lexpr

State 328:
## Known stack suffix:
## lexpr AMP
## LR(1) items:
lexpr -> lexpr AMP . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 329
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 329:
## Known stack suffix:
## lexpr AMP lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr AMP lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr -> lexpr AMP lexpr

State 330:
## Known stack suffix:
## identifier
## LR(1) items:
lexpr_inner -> identifier . LPAR ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> identifier . LBRACE ne_label_args RBRACE LPAR ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> identifier . LBRACE ne_label_args RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> identifier . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 331
-- On LBRACE shift to state 355
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> identifier

State 331:
## Known stack suffix:
## identifier LPAR
## LR(1) items:
lexpr_inner -> identifier LPAR . ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 332
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 332:
## Known stack suffix:
## identifier LPAR ne_lexpr_list
## LR(1) items:
lexpr_inner -> identifier LPAR ne_lexpr_list . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## identifier LPAR ne_lexpr_list RPAR
## LR(1) items:
lexpr_inner -> identifier LPAR ne_lexpr_list RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> identifier LPAR ne_lexpr_list RPAR

State 334:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
ne_lexpr_list -> lexpr . [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
ne_lexpr_list -> lexpr . COMMA ne_lexpr_list [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COMMA shift to state 353
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production ne_lexpr_list -> lexpr

State 335:
## Known stack suffix:
## lexpr OR
## LR(1) items:
lexpr -> lexpr OR . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 336
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 336:
## Known stack suffix:
## lexpr OR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr OR lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On PIPE shift to state 324
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION OR IMPLIES IFF IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr -> lexpr OR lexpr

State 337:
## Known stack suffix:
## lexpr HATHAT
## LR(1) items:
lexpr -> lexpr HATHAT . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 338
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 338:
## Known stack suffix:
## lexpr HATHAT lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr HATHAT lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On PIPE shift to state 324
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION OR IMPLIES IFF IDENTIFIER HATHAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr -> lexpr HATHAT lexpr

State 339:
## Known stack suffix:
## lexpr BIMPLIES
## LR(1) items:
lexpr -> lexpr BIMPLIES . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 340
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 340:
## Known stack suffix:
## lexpr BIMPLIES lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr BIMPLIES lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On PIPE shift to state 324
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION OR IMPLIES IFF IDENTIFIER HATHAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIFF BEHAVIOR ASSUMES ASSIGNS AND ALLOCATES
--   reduce production lexpr -> lexpr BIMPLIES lexpr

State 341:
## Known stack suffix:
## constant
## LR(1) items:
lexpr_inner -> constant . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> constant

State 342:
## Known stack suffix:
## any_identifier
## LR(1) items:
lexpr -> any_identifier . COLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On COLON shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## any_identifier COLON
## LR(1) items:
lexpr -> any_identifier COLON . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 344
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 344:
## Known stack suffix:
## any_identifier COLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> any_identifier COLON lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr -> any_identifier COLON lexpr

State 345:
## Known stack suffix:
## lexpr IMPLIES
## LR(1) items:
lexpr -> lexpr IMPLIES . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 346
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 346:
## Known stack suffix:
## lexpr IMPLIES lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr IMPLIES lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION IFF IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr -> lexpr IMPLIES lexpr

State 347:
## Known stack suffix:
## lexpr BIFF
## LR(1) items:
lexpr -> lexpr BIFF . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 348
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 348:
## Known stack suffix:
## lexpr BIFF lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr BIFF lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On PIPE shift to state 324
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION OR IMPLIES IFF IDENTIFIER HATHAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIFF BEHAVIOR ASSUMES ASSIGNS AND ALLOCATES
--   reduce production lexpr -> lexpr BIFF lexpr

State 349:
## Known stack suffix:
## lexpr AND
## LR(1) items:
lexpr -> lexpr AND . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 350
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 350:
## Known stack suffix:
## lexpr AND lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr AND lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On PIPE shift to state 324
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION OR IMPLIES IFF IDENTIFIER HATHAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS AND ALLOCATES
--   reduce production lexpr -> lexpr AND lexpr

State 351:
## Known stack suffix:
## lexpr IFF
## LR(1) items:
lexpr -> lexpr IFF . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 352
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 352:
## Known stack suffix:
## lexpr IFF lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr IFF lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION IFF IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr -> lexpr IFF lexpr

State 353:
## Known stack suffix:
## lexpr COMMA
## LR(1) items:
ne_lexpr_list -> lexpr COMMA . ne_lexpr_list [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 354
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 354:
## Known stack suffix:
## lexpr COMMA ne_lexpr_list
## LR(1) items:
ne_lexpr_list -> lexpr COMMA ne_lexpr_list . [ WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES SEMICOLON RSQUAREPIPE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production ne_lexpr_list -> lexpr COMMA ne_lexpr_list

State 355:
## Known stack suffix:
## identifier LBRACE
## LR(1) items:
lexpr_inner -> identifier LBRACE . ne_label_args RBRACE LPAR ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> identifier LBRACE . ne_label_args RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On ne_label_args shift to state 356
-- On identifier_or_typename shift to state 361
## Reductions:

State 356:
## Known stack suffix:
## identifier LBRACE ne_label_args
## LR(1) items:
lexpr_inner -> identifier LBRACE ne_label_args . RBRACE LPAR ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> identifier LBRACE ne_label_args . RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RBRACE shift to state 357
## Reductions:

State 357:
## Known stack suffix:
## identifier LBRACE ne_label_args RBRACE
## LR(1) items:
lexpr_inner -> identifier LBRACE ne_label_args RBRACE . LPAR ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> identifier LBRACE ne_label_args RBRACE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LPAR shift to state 358
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> identifier LBRACE ne_label_args RBRACE

State 358:
## Known stack suffix:
## identifier LBRACE ne_label_args RBRACE LPAR
## LR(1) items:
lexpr_inner -> identifier LBRACE ne_label_args RBRACE LPAR . ne_lexpr_list RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 359
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 359:
## Known stack suffix:
## identifier LBRACE ne_label_args RBRACE LPAR ne_lexpr_list
## LR(1) items:
lexpr_inner -> identifier LBRACE ne_label_args RBRACE LPAR ne_lexpr_list . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## identifier LBRACE ne_label_args RBRACE LPAR ne_lexpr_list RPAR
## LR(1) items:
lexpr_inner -> identifier LBRACE ne_label_args RBRACE LPAR ne_lexpr_list RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> identifier LBRACE ne_label_args RBRACE LPAR ne_lexpr_list RPAR

State 361:
## Known stack suffix:
## identifier_or_typename
## LR(1) items:
ne_label_args -> identifier_or_typename . [ RBRACE ]
ne_label_args -> identifier_or_typename . COMMA ne_label_args [ RBRACE ]
## Transitions:
-- On COMMA shift to state 362
## Reductions:
-- On RBRACE
--   reduce production ne_label_args -> identifier_or_typename

State 362:
## Known stack suffix:
## identifier_or_typename COMMA
## LR(1) items:
ne_label_args -> identifier_or_typename COMMA . ne_label_args [ RBRACE ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On ne_label_args shift to state 363
-- On identifier_or_typename shift to state 361
## Reductions:

State 363:
## Known stack suffix:
## identifier_or_typename COMMA ne_label_args
## LR(1) items:
ne_label_args -> identifier_or_typename COMMA ne_label_args . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production ne_label_args -> identifier_or_typename COMMA ne_label_args

State 364:
## Known stack suffix:
## lexpr QUESTION lexpr COLON2
## LR(1) items:
lexpr -> lexpr QUESTION lexpr COLON2 . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 365
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 365:
## Known stack suffix:
## lexpr QUESTION lexpr COLON2 lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr QUESTION lexpr COLON2 lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr -> lexpr QUESTION lexpr COLON2 lexpr

State 366:
## Known stack suffix:
## lexpr_inner LSQUARE lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr_inner -> lexpr_inner LSQUARE lexpr . RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_option -> lexpr . [ DOTDOT ]
## Transitions:
-- On RSQUARE shift to state 367
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On DOTDOT
--   reduce production lexpr_option -> lexpr

State 367:
## Known stack suffix:
## lexpr_inner LSQUARE lexpr RSQUARE
## LR(1) items:
lexpr_inner -> lexpr_inner LSQUARE lexpr RSQUARE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner LSQUARE lexpr RSQUARE

State 368:
## Known stack suffix:
## lexpr_inner DOT
## LR(1) items:
lexpr_inner -> lexpr_inner DOT . identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On identifier_or_typename shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## lexpr_inner DOT identifier_or_typename
## LR(1) items:
lexpr_inner -> lexpr_inner DOT identifier_or_typename . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner DOT identifier_or_typename

State 370:
## Known stack suffix:
## lexpr_inner COLONGT
## LR(1) items:
lexpr_inner -> lexpr_inner COLONGT . logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner COLONGT . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VOID shift to state 128
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 131
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRUCT shift to state 132
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On REAL shift to state 144
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LONG shift to state 145
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FLOAT shift to state 152
-- On FALSE shift to state 268
-- On ENUM shift to state 153
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 156
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CHAR shift to state 157
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On type_spec shift to state 160
-- On string shift to state 307
-- On logic_type shift to state 371
-- On lexpr_inner shift to state 372
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 371:
## Known stack suffix:
## lexpr_inner COLONGT logic_type
## LR(1) items:
lexpr_inner -> lexpr_inner COLONGT logic_type . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner COLONGT logic_type

State 372:
## Known stack suffix:
## lexpr_inner COLONGT lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner COLONGT lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner COLONGT lexpr_inner

State 373:
## Known stack suffix:
## lexpr_inner ARROW
## LR(1) items:
lexpr_inner -> lexpr_inner ARROW . identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On identifier_or_typename shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## lexpr_inner ARROW identifier_or_typename
## LR(1) items:
lexpr_inner -> lexpr_inner ARROW identifier_or_typename . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner ARROW identifier_or_typename

State 375:
## Known stack suffix:
## lexpr_inner SLASH
## LR(1) items:
lexpr_inner -> lexpr_inner SLASH . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 376
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 376:
## Known stack suffix:
## lexpr_inner SLASH lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner SLASH lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner SLASH lexpr_inner

State 377:
## Known stack suffix:
## lexpr_inner PLUS
## LR(1) items:
lexpr_inner -> lexpr_inner PLUS . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 378
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 378:
## Known stack suffix:
## lexpr_inner PLUS lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner PLUS lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 309
-- On SLASH shift to state 375
-- On PERCENT shift to state 379
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner PLUS lexpr_inner

State 379:
## Known stack suffix:
## lexpr_inner PERCENT
## LR(1) items:
lexpr_inner -> lexpr_inner PERCENT . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 380
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 380:
## Known stack suffix:
## lexpr_inner PERCENT lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner PERCENT lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner PERCENT lexpr_inner

State 381:
## Known stack suffix:
## lexpr_inner MINUS
## LR(1) items:
lexpr_inner -> lexpr_inner MINUS . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 382
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 382:
## Known stack suffix:
## lexpr_inner MINUS lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner MINUS lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 309
-- On SLASH shift to state 375
-- On PERCENT shift to state 379
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner MINUS lexpr_inner

State 383:
## Known stack suffix:
## lexpr_inner LTLT
## LR(1) items:
lexpr_inner -> lexpr_inner LTLT . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 384
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 384:
## Known stack suffix:
## lexpr_inner LTLT lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner LTLT lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 309
-- On SLASH shift to state 375
-- On PLUS shift to state 377
-- On PERCENT shift to state 379
-- On MINUS shift to state 381
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR NE LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner LTLT lexpr_inner

State 385:
## Known stack suffix:
## lexpr_inner GTGT
## LR(1) items:
lexpr_inner -> lexpr_inner GTGT . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 386
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 386:
## Known stack suffix:
## lexpr_inner GTGT lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner GTGT lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On STAR shift to state 309
-- On SLASH shift to state 375
-- On PLUS shift to state 377
-- On PERCENT shift to state 379
-- On MINUS shift to state 381
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR NE LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> lexpr_inner GTGT lexpr_inner

State 387:
## Known stack suffix:
## NE
## LR(1) items:
relation -> NE . [ VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE ]
## Transitions:
## Reductions:
-- On VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE
--   reduce production relation -> NE

State 388:
## Known stack suffix:
## LT
## LR(1) items:
relation -> LT . [ VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE ]
## Transitions:
## Reductions:
-- On VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE
--   reduce production relation -> LT

State 389:
## Known stack suffix:
## LE
## LR(1) items:
relation -> LE . [ VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE ]
## Transitions:
## Reductions:
-- On VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE
--   reduce production relation -> LE

State 390:
## Known stack suffix:
## GT
## LR(1) items:
relation -> GT . [ VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE ]
## Transitions:
## Reductions:
-- On VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE
--   reduce production relation -> GT

State 391:
## Known stack suffix:
## GE
## LR(1) items:
relation -> GE . [ VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE ]
## Transitions:
## Reductions:
-- On VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE
--   reduce production relation -> GE

State 392:
## Known stack suffix:
## EQUAL
## LR(1) items:
relation -> EQUAL . [ VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE ]
## Transitions:
## Reductions:
-- On VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE
--   reduce production relation -> EQUAL

State 393:
## Known stack suffix:
## EQ
## LR(1) items:
relation -> EQ . [ VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE ]
## Transitions:
## Reductions:
-- On VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNALLOCATED TYPEOF TRUE TILDE STRING_LITERAL STATIC STAR SIZEOF SEPARATED RESULT REGISTER PLUS OLD OFFSET NULL NOT MINUS LSQUAREPIPE LPAR LET LBRACE LAMBDA INTER INITIALIZED IDENTIFIER FRESH FREEABLE FORALL FALSE EXISTS EMPTY DYNAMIC DANGLING CONSTANT10 CONSTANT BSUNION BSTYPE BLOCK_LENGTH BASE_ADDR AUTOMATIC AT AMP ALLOCATION ALLOCABLE
--   reduce production relation -> EQ

State 394:
## Known stack suffix:
## relation
## LR(1) items:
rel_list -> relation . lexpr_end_rel [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
rel_list -> relation . lexpr_inner rel_list [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LET shift to state 221
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FALSE shift to state 268
-- On EXISTS shift to state 269
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 395
-- On lexpr_end_rel shift to state 397
-- On lexpr_binder shift to state 320
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 395:
## Known stack suffix:
## relation lexpr_inner
## LR(1) items:
lexpr_end_rel -> lexpr_inner . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
rel_list -> relation lexpr_inner . rel_list [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On STARHAT shift to state 306
-- On STAR shift to state 309
-- On SLASH shift to state 375
-- On PLUS shift to state 377
-- On PERCENT shift to state 379
-- On NE shift to state 387
-- On MINUS shift to state 381
-- On LTLT shift to state 383
-- On LTCOLON shift to state 311
-- On LT shift to state 388
-- On LSQUARE shift to state 313
-- On LE shift to state 389
-- On GTGT shift to state 385
-- On GT shift to state 390
-- On GE shift to state 391
-- On EQUAL shift to state 392
-- On EQ shift to state 393
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
-- On relation shift to state 394
-- On rel_list shift to state 396
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_end_rel -> lexpr_inner

State 396:
## Known stack suffix:
## relation lexpr_inner rel_list
## LR(1) items:
rel_list -> relation lexpr_inner rel_list . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production rel_list -> relation lexpr_inner rel_list

State 397:
## Known stack suffix:
## relation lexpr_end_rel
## LR(1) items:
rel_list -> relation lexpr_end_rel . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production rel_list -> relation lexpr_end_rel

State 398:
## Known stack suffix:
## lexpr_inner rel_list
## LR(1) items:
lexpr_rel -> lexpr_inner rel_list . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_rel -> lexpr_inner rel_list

State 399:
## Known stack suffix:
## string COLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> string COLON lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr -> string COLON lexpr

State 400:
## Known stack suffix:
## ALLOCABLE opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> ALLOCABLE opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 401
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 401:
## Known stack suffix:
## ALLOCABLE opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> ALLOCABLE opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> ALLOCABLE opt_label_1 LPAR lexpr RPAR

State 402:
## Known stack suffix:
## ALLOCATION opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> ALLOCATION opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 403
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 403:
## Known stack suffix:
## ALLOCATION opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> ALLOCATION opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> ALLOCATION opt_label_1 LPAR lexpr RPAR

State 404:
## Known stack suffix:
## AMP lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> AMP lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> AMP lexpr_inner

State 405:
## Known stack suffix:
## AT LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr_inner -> AT LPAR lexpr . COMMA label_name RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COMMA shift to state 406
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 406:
## Known stack suffix:
## AT LPAR lexpr COMMA
## LR(1) items:
lexpr_inner -> AT LPAR lexpr COMMA . label_name RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On label_name shift to state 407
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 86
-- On acsl_c_keyword shift to state 87
## Reductions:

State 407:
## Known stack suffix:
## AT LPAR lexpr COMMA label_name
## LR(1) items:
lexpr_inner -> AT LPAR lexpr COMMA label_name . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## AT LPAR lexpr COMMA label_name RPAR
## LR(1) items:
lexpr_inner -> AT LPAR lexpr COMMA label_name RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> AT LPAR lexpr COMMA label_name RPAR

State 409:
## Known stack suffix:
## BASE_ADDR opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> BASE_ADDR opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 410
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 410:
## Known stack suffix:
## BASE_ADDR opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> BASE_ADDR opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> BASE_ADDR opt_label_1 LPAR lexpr RPAR

State 411:
## Known stack suffix:
## BLOCK_LENGTH opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> BLOCK_LENGTH opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 412
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 412:
## Known stack suffix:
## BLOCK_LENGTH opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> BLOCK_LENGTH opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> BLOCK_LENGTH opt_label_1 LPAR lexpr RPAR

State 413:
## Known stack suffix:
## ne_lexpr_list
## LR(1) items:
lexpr_list -> ne_lexpr_list . [ RSQUAREPIPE RPAR RBRACE ]
## Transitions:
## Reductions:
-- On RSQUAREPIPE RPAR RBRACE
--   reduce production lexpr_list -> ne_lexpr_list

State 414:
## Known stack suffix:
## BSUNION LPAR lexpr_list
## LR(1) items:
lexpr_inner -> BSUNION LPAR lexpr_list . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 415
## Reductions:

State 415:
## Known stack suffix:
## BSUNION LPAR lexpr_list RPAR
## LR(1) items:
lexpr_inner -> BSUNION LPAR lexpr_list RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> BSUNION LPAR lexpr_list RPAR

State 416:
## Known stack suffix:
## DANGLING opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> DANGLING opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 417
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 417:
## Known stack suffix:
## DANGLING opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> DANGLING opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> DANGLING opt_label_1 LPAR lexpr RPAR

State 418:
## Known stack suffix:
## EXISTS binders SEMICOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_binder -> EXISTS binders SEMICOLON lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr_binder -> EXISTS binders SEMICOLON lexpr

State 419:
## Known stack suffix:
## FORALL binders SEMICOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_binder -> FORALL binders SEMICOLON lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr_binder -> FORALL binders SEMICOLON lexpr

State 420:
## Known stack suffix:
## FREEABLE opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> FREEABLE opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 421
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 421:
## Known stack suffix:
## FREEABLE opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> FREEABLE opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> FREEABLE opt_label_1 LPAR lexpr RPAR

State 422:
## Known stack suffix:
## FRESH opt_label_2 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr_inner -> FRESH opt_label_2 LPAR lexpr . COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COMMA shift to state 423
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 423:
## Known stack suffix:
## FRESH opt_label_2 LPAR lexpr COMMA
## LR(1) items:
lexpr_inner -> FRESH opt_label_2 LPAR lexpr COMMA . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 424
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 424:
## Known stack suffix:
## FRESH opt_label_2 LPAR lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> FRESH opt_label_2 LPAR lexpr COMMA lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 425
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 425:
## Known stack suffix:
## FRESH opt_label_2 LPAR lexpr COMMA lexpr RPAR
## LR(1) items:
lexpr_inner -> FRESH opt_label_2 LPAR lexpr COMMA lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> FRESH opt_label_2 LPAR lexpr COMMA lexpr RPAR

State 426:
## Known stack suffix:
## INITIALIZED opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> INITIALIZED opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 427
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 427:
## Known stack suffix:
## INITIALIZED opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> INITIALIZED opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> INITIALIZED opt_label_1 LPAR lexpr RPAR

State 428:
## Known stack suffix:
## INTER LPAR lexpr_list
## LR(1) items:
lexpr_inner -> INTER LPAR lexpr_list . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 429
## Reductions:

State 429:
## Known stack suffix:
## INTER LPAR lexpr_list RPAR
## LR(1) items:
lexpr_inner -> INTER LPAR lexpr_list RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> INTER LPAR lexpr_list RPAR

State 430:
## Known stack suffix:
## LAMBDA binders SEMICOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_binder -> LAMBDA binders SEMICOLON lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr_binder -> LAMBDA binders SEMICOLON lexpr

State 431:
## Known stack suffix:
## LSQUARE range
## LR(1) items:
array_path_elt -> LSQUARE range . RSQUARE [ LSQUARE EQUAL DOT ]
## Transitions:
-- On RSQUARE shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## LSQUARE range RSQUARE
## LR(1) items:
array_path_elt -> LSQUARE range RSQUARE . [ LSQUARE EQUAL DOT ]
## Transitions:
## Reductions:
-- On LSQUARE EQUAL DOT
--   reduce production array_path_elt -> LSQUARE range RSQUARE

State 433:
## Known stack suffix:
## LSQUARE lexpr
## LR(1) items:
array_path_elt -> LSQUARE lexpr . RSQUARE [ LSQUARE EQUAL DOT ]
lexpr -> lexpr . IMPLIES lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RSQUARE QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr_option -> lexpr . [ DOTDOT ]
## Transitions:
-- On RSQUARE shift to state 434
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On DOTDOT
--   reduce production lexpr_option -> lexpr

State 434:
## Known stack suffix:
## LSQUARE lexpr RSQUARE
## LR(1) items:
array_path_elt -> LSQUARE lexpr RSQUARE . [ LSQUARE EQUAL DOT ]
## Transitions:
## Reductions:
-- On LSQUARE EQUAL DOT
--   reduce production array_path_elt -> LSQUARE lexpr RSQUARE

State 435:
## Known stack suffix:
## DOT
## LR(1) items:
field_path_elt -> DOT . identifier_or_typename [ LSQUARE EQUAL DOT ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On identifier_or_typename shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## DOT identifier_or_typename
## LR(1) items:
field_path_elt -> DOT identifier_or_typename . [ LSQUARE EQUAL DOT ]
## Transitions:
## Reductions:
-- On LSQUARE EQUAL DOT
--   reduce production field_path_elt -> DOT identifier_or_typename

State 437:
## Known stack suffix:
## LBRACE lexpr_list
## LR(1) items:
lexpr_inner -> LBRACE lexpr_list . RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RBRACE shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## LBRACE lexpr_list RBRACE
## LR(1) items:
lexpr_inner -> LBRACE lexpr_list RBRACE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LBRACE lexpr_list RBRACE

State 439:
## Known stack suffix:
## LBRACE lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr_inner -> LBRACE lexpr . PIPE binders RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE lexpr . PIPE binders SEMICOLON lexpr RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE lexpr . WITH update RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
ne_lexpr_list -> lexpr . [ RBRACE ]
ne_lexpr_list -> lexpr . COMMA ne_lexpr_list [ RBRACE ]
## Transitions:
-- On WITH shift to state 440
-- On QUESTION shift to state 322
-- On PIPE shift to state 473
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COMMA shift to state 353
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On RBRACE
--   reduce production ne_lexpr_list -> lexpr

State 440:
## Known stack suffix:
## LBRACE lexpr WITH
## LR(1) items:
lexpr_inner -> LBRACE lexpr WITH . update RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LSQUARE shift to state 228
-- On DOT shift to state 435
-- On update_elt shift to state 441
-- On update shift to state 471
-- On path_elt shift to state 444
-- On path shift to state 448
-- On field_path_elt shift to state 446
-- On array_path_elt shift to state 447
## Reductions:

State 441:
## Known stack suffix:
## update_elt
## LR(1) items:
update -> update_elt . [ RBRACE ]
update -> update_elt . COMMA update [ RBRACE ]
## Transitions:
-- On COMMA shift to state 442
## Reductions:
-- On RBRACE
--   reduce production update -> update_elt

State 442:
## Known stack suffix:
## update_elt COMMA
## LR(1) items:
update -> update_elt COMMA . update [ RBRACE ]
## Transitions:
-- On LSQUARE shift to state 228
-- On DOT shift to state 435
-- On update_elt shift to state 441
-- On update shift to state 443
-- On path_elt shift to state 444
-- On path shift to state 448
-- On field_path_elt shift to state 446
-- On array_path_elt shift to state 447
## Reductions:

State 443:
## Known stack suffix:
## update_elt COMMA update
## LR(1) items:
update -> update_elt COMMA update . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production update -> update_elt COMMA update

State 444:
## Known stack suffix:
## path_elt
## LR(1) items:
path -> path_elt . [ EQUAL ]
path -> path_elt . path [ EQUAL ]
## Transitions:
-- On LSQUARE shift to state 228
-- On DOT shift to state 435
-- On path_elt shift to state 444
-- On path shift to state 445
-- On field_path_elt shift to state 446
-- On array_path_elt shift to state 447
## Reductions:
-- On EQUAL
--   reduce production path -> path_elt

State 445:
## Known stack suffix:
## path_elt path
## LR(1) items:
path -> path_elt path . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production path -> path_elt path

State 446:
## Known stack suffix:
## field_path_elt
## LR(1) items:
path_elt -> field_path_elt . [ LSQUARE EQUAL DOT ]
## Transitions:
## Reductions:
-- On LSQUARE EQUAL DOT
--   reduce production path_elt -> field_path_elt

State 447:
## Known stack suffix:
## array_path_elt
## LR(1) items:
path_elt -> array_path_elt . [ LSQUARE EQUAL DOT ]
## Transitions:
## Reductions:
-- On LSQUARE EQUAL DOT
--   reduce production path_elt -> array_path_elt

State 448:
## Known stack suffix:
## path
## LR(1) items:
update_elt -> path . EQUAL lexpr [ RBRACE COMMA ]
update_elt -> path . EQUAL LBRACE WITH update RBRACE [ RBRACE COMMA ]
## Transitions:
-- On EQUAL shift to state 449
## Reductions:

State 449:
## Known stack suffix:
## path EQUAL
## LR(1) items:
update_elt -> path EQUAL . lexpr [ RBRACE COMMA ]
update_elt -> path EQUAL . LBRACE WITH update RBRACE [ RBRACE COMMA ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 450
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 470
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 450:
## Known stack suffix:
## path EQUAL LBRACE
## LR(1) items:
lexpr_inner -> LBRACE . lexpr_list RBRACE [ STARHAT STAR SLASH RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF HATHAT HAT GTGT GT GE EQUAL EQ DOT COMMA COLONGT BIMPLIES BIFF ARROW AND AMP ]
lexpr_inner -> LBRACE . lexpr PIPE binders RBRACE [ STARHAT STAR SLASH RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF HATHAT HAT GTGT GT GE EQUAL EQ DOT COMMA COLONGT BIMPLIES BIFF ARROW AND AMP ]
lexpr_inner -> LBRACE . lexpr PIPE binders SEMICOLON lexpr RBRACE [ STARHAT STAR SLASH RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF HATHAT HAT GTGT GT GE EQUAL EQ DOT COMMA COLONGT BIMPLIES BIFF ARROW AND AMP ]
lexpr_inner -> LBRACE . field_init RBRACE [ STARHAT STAR SLASH RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF HATHAT HAT GTGT GT GE EQUAL EQ DOT COMMA COLONGT BIMPLIES BIFF ARROW AND AMP ]
lexpr_inner -> LBRACE . array_init RBRACE [ STARHAT STAR SLASH RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF HATHAT HAT GTGT GT GE EQUAL EQ DOT COMMA COLONGT BIMPLIES BIFF ARROW AND AMP ]
lexpr_inner -> LBRACE . lexpr WITH update RBRACE [ STARHAT STAR SLASH RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF HATHAT HAT GTGT GT GE EQUAL EQ DOT COMMA COLONGT BIMPLIES BIFF ARROW AND AMP ]
update_elt -> path EQUAL LBRACE . WITH update RBRACE [ RBRACE COMMA ]
## Transitions:
-- On WRITES shift to state 1
-- On WITH shift to state 451
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LSQUARE shift to state 228
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DOT shift to state 435
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 413
-- On lexpr_rel shift to state 304
-- On lexpr_list shift to state 437
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 439
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On field_path_elt shift to state 454
-- On field_init_elt shift to state 457
-- On field_init shift to state 460
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On array_path_elt shift to state 462
-- On array_init_elt shift to state 465
-- On array_init shift to state 468
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On RBRACE
--   reduce production lexpr_list ->

State 451:
## Known stack suffix:
## path EQUAL LBRACE WITH
## LR(1) items:
update_elt -> path EQUAL LBRACE WITH . update RBRACE [ RBRACE COMMA ]
## Transitions:
-- On LSQUARE shift to state 228
-- On DOT shift to state 435
-- On update_elt shift to state 441
-- On update shift to state 452
-- On path_elt shift to state 444
-- On path shift to state 448
-- On field_path_elt shift to state 446
-- On array_path_elt shift to state 447
## Reductions:

State 452:
## Known stack suffix:
## path EQUAL LBRACE WITH update
## LR(1) items:
update_elt -> path EQUAL LBRACE WITH update . RBRACE [ RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 453
## Reductions:

State 453:
## Known stack suffix:
## path EQUAL LBRACE WITH update RBRACE
## LR(1) items:
update_elt -> path EQUAL LBRACE WITH update RBRACE . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production update_elt -> path EQUAL LBRACE WITH update RBRACE

State 454:
## Known stack suffix:
## field_path_elt
## LR(1) items:
field_init_elt -> field_path_elt . EQUAL lexpr [ RBRACE COMMA ]
## Transitions:
-- On EQUAL shift to state 455
## Reductions:

State 455:
## Known stack suffix:
## field_path_elt EQUAL
## LR(1) items:
field_init_elt -> field_path_elt EQUAL . lexpr [ RBRACE COMMA ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 456
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 456:
## Known stack suffix:
## field_path_elt EQUAL lexpr
## LR(1) items:
field_init_elt -> field_path_elt EQUAL lexpr . [ RBRACE COMMA ]
lexpr -> lexpr . IMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On RBRACE COMMA
--   reduce production field_init_elt -> field_path_elt EQUAL lexpr

State 457:
## Known stack suffix:
## field_init_elt
## LR(1) items:
field_init -> field_init_elt . [ RBRACE ]
field_init -> field_init_elt . COMMA field_init [ RBRACE ]
## Transitions:
-- On COMMA shift to state 458
## Reductions:
-- On RBRACE
--   reduce production field_init -> field_init_elt

State 458:
## Known stack suffix:
## field_init_elt COMMA
## LR(1) items:
field_init -> field_init_elt COMMA . field_init [ RBRACE ]
## Transitions:
-- On DOT shift to state 435
-- On field_path_elt shift to state 454
-- On field_init_elt shift to state 457
-- On field_init shift to state 459
## Reductions:

State 459:
## Known stack suffix:
## field_init_elt COMMA field_init
## LR(1) items:
field_init -> field_init_elt COMMA field_init . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production field_init -> field_init_elt COMMA field_init

State 460:
## Known stack suffix:
## LBRACE field_init
## LR(1) items:
lexpr_inner -> LBRACE field_init . RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RBRACE shift to state 461
## Reductions:

State 461:
## Known stack suffix:
## LBRACE field_init RBRACE
## LR(1) items:
lexpr_inner -> LBRACE field_init RBRACE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LBRACE field_init RBRACE

State 462:
## Known stack suffix:
## array_path_elt
## LR(1) items:
array_init_elt -> array_path_elt . EQUAL lexpr [ RBRACE COMMA ]
## Transitions:
-- On EQUAL shift to state 463
## Reductions:

State 463:
## Known stack suffix:
## array_path_elt EQUAL
## LR(1) items:
array_init_elt -> array_path_elt EQUAL . lexpr [ RBRACE COMMA ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 464
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 464:
## Known stack suffix:
## array_path_elt EQUAL lexpr
## LR(1) items:
array_init_elt -> array_path_elt EQUAL lexpr . [ RBRACE COMMA ]
lexpr -> lexpr . IMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On RBRACE COMMA
--   reduce production array_init_elt -> array_path_elt EQUAL lexpr

State 465:
## Known stack suffix:
## array_init_elt
## LR(1) items:
array_init -> array_init_elt . [ RBRACE ]
array_init -> array_init_elt . COMMA array_init [ RBRACE ]
## Transitions:
-- On COMMA shift to state 466
## Reductions:
-- On RBRACE
--   reduce production array_init -> array_init_elt

State 466:
## Known stack suffix:
## array_init_elt COMMA
## LR(1) items:
array_init -> array_init_elt COMMA . array_init [ RBRACE ]
## Transitions:
-- On LSQUARE shift to state 228
-- On array_path_elt shift to state 462
-- On array_init_elt shift to state 465
-- On array_init shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## array_init_elt COMMA array_init
## LR(1) items:
array_init -> array_init_elt COMMA array_init . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production array_init -> array_init_elt COMMA array_init

State 468:
## Known stack suffix:
## LBRACE array_init
## LR(1) items:
lexpr_inner -> LBRACE array_init . RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RBRACE shift to state 469
## Reductions:

State 469:
## Known stack suffix:
## LBRACE array_init RBRACE
## LR(1) items:
lexpr_inner -> LBRACE array_init RBRACE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LBRACE array_init RBRACE

State 470:
## Known stack suffix:
## path EQUAL lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
update_elt -> path EQUAL lexpr . [ RBRACE COMMA ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On RBRACE COMMA
--   reduce production update_elt -> path EQUAL lexpr

State 471:
## Known stack suffix:
## LBRACE lexpr WITH update
## LR(1) items:
lexpr_inner -> LBRACE lexpr WITH update . RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RBRACE shift to state 472
## Reductions:

State 472:
## Known stack suffix:
## LBRACE lexpr WITH update RBRACE
## LR(1) items:
lexpr_inner -> LBRACE lexpr WITH update RBRACE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LBRACE lexpr WITH update RBRACE

State 473:
## Known stack suffix:
## LBRACE lexpr PIPE
## LR(1) items:
lexpr -> lexpr PIPE . lexpr [ WITH RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr_inner -> LBRACE lexpr PIPE . binders RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE lexpr PIPE . binders SEMICOLON lexpr RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 113
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 114
-- On UNION shift to state 122
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 125
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 198
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 201
-- On SHORT shift to state 202
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 219
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 220
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 474
-- On INT shift to state 475
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 476
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 477
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 478
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 479
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 480
-- On BOOL shift to state 481
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On type_spec shift to state 230
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 325
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On decl_spec shift to state 245
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On binders_reentrance shift to state 246
-- On binders shift to state 482
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 474:
## Known stack suffix:
## INTEGER
## LR(1) items:
is_acsl_other -> INTEGER . [ COLON ]
type_spec -> INTEGER . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production is_acsl_other -> INTEGER
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> INTEGER

State 475:
## Known stack suffix:
## INT
## LR(1) items:
c_keyword -> INT . [ COLON ]
type_spec -> INT . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> INT
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> INT

State 476:
## Known stack suffix:
## FLOAT
## LR(1) items:
c_keyword -> FLOAT . [ COLON ]
type_spec -> FLOAT . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> FLOAT
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> FLOAT

State 477:
## Known stack suffix:
## ENUM
## LR(1) items:
c_keyword -> ENUM . [ COLON ]
type_spec -> ENUM . exit_rt_type identifier_or_typename [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
-- On exit_rt_type shift to state 154
## Reductions:
-- On COLON
--   reduce production c_keyword -> ENUM
-- On TYPENAME IDENTIFIER
--   reduce production exit_rt_type ->

State 478:
## Known stack suffix:
## DOUBLE
## LR(1) items:
c_keyword -> DOUBLE . [ COLON ]
type_spec -> DOUBLE . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> DOUBLE
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> DOUBLE

State 479:
## Known stack suffix:
## CHAR
## LR(1) items:
c_keyword -> CHAR . [ COLON ]
type_spec -> CHAR . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> CHAR
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> CHAR

State 480:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
c_keyword -> BOOLEAN . [ COLON ]
type_spec -> BOOLEAN . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> BOOLEAN
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> BOOLEAN

State 481:
## Known stack suffix:
## BOOL
## LR(1) items:
c_keyword -> BOOL . [ COLON ]
type_spec -> BOOL . [ VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> BOOL
-- On VOLATILE STAR RPAR LSQUARE LPAR IDENTIFIER CONST
--   reduce production type_spec -> BOOL

State 482:
## Known stack suffix:
## LBRACE lexpr PIPE binders
## LR(1) items:
lexpr_inner -> LBRACE lexpr PIPE binders . RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LBRACE lexpr PIPE binders . SEMICOLON lexpr RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 483
-- On RBRACE shift to state 486
## Reductions:

State 483:
## Known stack suffix:
## LBRACE lexpr PIPE binders SEMICOLON
## LR(1) items:
lexpr_inner -> LBRACE lexpr PIPE binders SEMICOLON . lexpr RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 484
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 484:
## Known stack suffix:
## LBRACE lexpr PIPE binders SEMICOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RBRACE QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> LBRACE lexpr PIPE binders SEMICOLON lexpr . RBRACE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RBRACE shift to state 485
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 485:
## Known stack suffix:
## LBRACE lexpr PIPE binders SEMICOLON lexpr RBRACE
## LR(1) items:
lexpr_inner -> LBRACE lexpr PIPE binders SEMICOLON lexpr RBRACE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LBRACE lexpr PIPE binders SEMICOLON lexpr RBRACE

State 486:
## Known stack suffix:
## LBRACE lexpr PIPE binders RBRACE
## LR(1) items:
lexpr_inner -> LBRACE lexpr PIPE binders RBRACE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LBRACE lexpr PIPE binders RBRACE

State 487:
## Known stack suffix:
## LET bounded_var EQUAL lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ SEMICOLON QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_binder -> LET bounded_var EQUAL lexpr . SEMICOLON lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 488
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 488:
## Known stack suffix:
## LET bounded_var EQUAL lexpr SEMICOLON
## LR(1) items:
lexpr_binder -> LET bounded_var EQUAL lexpr SEMICOLON . lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 489
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 489:
## Known stack suffix:
## LET bounded_var EQUAL lexpr SEMICOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr_binder -> LET bounded_var EQUAL lexpr SEMICOLON lexpr . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE IDENTIFIER FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production lexpr_binder -> LET bounded_var EQUAL lexpr SEMICOLON lexpr

State 490:
## Known stack suffix:
## CONST
## LR(1) items:
c_keyword -> CONST . [ COLON ]
cv -> CONST . [ VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production c_keyword -> CONST
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production cv -> CONST

State 491:
## Known stack suffix:
## type_spec_cv
## LR(1) items:
cast_logic_type -> type_spec_cv . abs_spec_cv_option [ RPAR ]
## Transitions:
-- On STAR shift to state 492
-- On LSQUARE shift to state 162
-- On LPAR shift to state 496
-- On tabs shift to state 497
-- On stars_cv shift to state 498
-- On abs_spec_cv_option shift to state 511
-- On abs_spec_cv shift to state 512
-- On abs_spec_bis_cv shift to state 509
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv_option ->

State 492:
## Known stack suffix:
## STAR
## LR(1) items:
stars_cv -> STAR . [ STAR RPAR LSQUARE LPAR ]
stars_cv -> STAR . cv [ STAR RPAR LSQUARE LPAR ]
## Transitions:
-- On VOLATILE shift to state 493
-- On CONST shift to state 494
-- On cv shift to state 495
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production stars_cv -> STAR

State 493:
## Known stack suffix:
## VOLATILE
## LR(1) items:
cv -> VOLATILE . [ STAR RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production cv -> VOLATILE

State 494:
## Known stack suffix:
## CONST
## LR(1) items:
cv -> CONST . [ STAR RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production cv -> CONST

State 495:
## Known stack suffix:
## STAR cv
## LR(1) items:
stars_cv -> STAR cv . [ STAR RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production stars_cv -> STAR cv

State 496:
## Known stack suffix:
## LPAR
## LR(1) items:
abs_spec_bis_cv -> LPAR . abs_spec_cv RPAR [ RPAR LSQUARE LPAR ]
## Transitions:
-- On STAR shift to state 492
-- On LSQUARE shift to state 162
-- On LPAR shift to state 496
-- On tabs shift to state 497
-- On stars_cv shift to state 498
-- On abs_spec_cv shift to state 507
-- On abs_spec_bis_cv shift to state 509
## Reductions:

State 497:
## Known stack suffix:
## tabs
## LR(1) items:
abs_spec_cv -> tabs . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv -> tabs

State 498:
## Known stack suffix:
## stars_cv
## LR(1) items:
abs_spec_cv -> stars_cv . [ RPAR ]
abs_spec_cv -> stars_cv . tabs [ RPAR ]
abs_spec_cv -> stars_cv . abs_spec_bis_cv [ RPAR ]
abs_spec_cv -> stars_cv . abs_spec_bis_cv tabs [ RPAR ]
stars_cv -> stars_cv . STAR [ STAR RPAR LSQUARE LPAR ]
stars_cv -> stars_cv . STAR cv [ STAR RPAR LSQUARE LPAR ]
## Transitions:
-- On STAR shift to state 499
-- On LSQUARE shift to state 162
-- On LPAR shift to state 496
-- On tabs shift to state 501
-- On abs_spec_bis_cv shift to state 502
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv -> stars_cv

State 499:
## Known stack suffix:
## stars_cv STAR
## LR(1) items:
stars_cv -> stars_cv STAR . [ STAR RPAR LSQUARE LPAR ]
stars_cv -> stars_cv STAR . cv [ STAR RPAR LSQUARE LPAR ]
## Transitions:
-- On VOLATILE shift to state 493
-- On CONST shift to state 494
-- On cv shift to state 500
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production stars_cv -> stars_cv STAR

State 500:
## Known stack suffix:
## stars_cv STAR cv
## LR(1) items:
stars_cv -> stars_cv STAR cv . [ STAR RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production stars_cv -> stars_cv STAR cv

State 501:
## Known stack suffix:
## stars_cv tabs
## LR(1) items:
abs_spec_cv -> stars_cv tabs . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv -> stars_cv tabs

State 502:
## Known stack suffix:
## stars_cv abs_spec_bis_cv
## LR(1) items:
abs_spec_bis_cv -> abs_spec_bis_cv . LPAR abs_param_type_list RPAR [ RPAR LSQUARE LPAR ]
abs_spec_cv -> stars_cv abs_spec_bis_cv . [ RPAR ]
abs_spec_cv -> stars_cv abs_spec_bis_cv . tabs [ RPAR ]
## Transitions:
-- On LSQUARE shift to state 162
-- On LPAR shift to state 503
-- On tabs shift to state 506
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv -> stars_cv abs_spec_bis_cv

State 503:
## Known stack suffix:
## abs_spec_bis_cv LPAR
## LR(1) items:
abs_spec_bis_cv -> abs_spec_bis_cv LPAR . abs_param_type_list RPAR [ RPAR LSQUARE LPAR ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On logic_type shift to state 176
-- On abs_param_type_list shift to state 504
-- On abs_param_list shift to state 179
-- On abs_param shift to state 183
## Reductions:
-- On RPAR
--   reduce production abs_param_type_list ->

State 504:
## Known stack suffix:
## abs_spec_bis_cv LPAR abs_param_type_list
## LR(1) items:
abs_spec_bis_cv -> abs_spec_bis_cv LPAR abs_param_type_list . RPAR [ RPAR LSQUARE LPAR ]
## Transitions:
-- On RPAR shift to state 505
## Reductions:

State 505:
## Known stack suffix:
## abs_spec_bis_cv LPAR abs_param_type_list RPAR
## LR(1) items:
abs_spec_bis_cv -> abs_spec_bis_cv LPAR abs_param_type_list RPAR . [ RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On RPAR LSQUARE LPAR
--   reduce production abs_spec_bis_cv -> abs_spec_bis_cv LPAR abs_param_type_list RPAR

State 506:
## Known stack suffix:
## stars_cv abs_spec_bis_cv tabs
## LR(1) items:
abs_spec_cv -> stars_cv abs_spec_bis_cv tabs . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv -> stars_cv abs_spec_bis_cv tabs

State 507:
## Known stack suffix:
## LPAR abs_spec_cv
## LR(1) items:
abs_spec_bis_cv -> LPAR abs_spec_cv . RPAR [ RPAR LSQUARE LPAR ]
## Transitions:
-- On RPAR shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## LPAR abs_spec_cv RPAR
## LR(1) items:
abs_spec_bis_cv -> LPAR abs_spec_cv RPAR . [ RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On RPAR LSQUARE LPAR
--   reduce production abs_spec_bis_cv -> LPAR abs_spec_cv RPAR

State 509:
## Known stack suffix:
## abs_spec_bis_cv
## LR(1) items:
abs_spec_bis_cv -> abs_spec_bis_cv . LPAR abs_param_type_list RPAR [ RPAR LSQUARE LPAR ]
abs_spec_cv -> abs_spec_bis_cv . tabs [ RPAR ]
abs_spec_cv -> abs_spec_bis_cv . [ RPAR ]
## Transitions:
-- On LSQUARE shift to state 162
-- On LPAR shift to state 503
-- On tabs shift to state 510
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv -> abs_spec_bis_cv

State 510:
## Known stack suffix:
## abs_spec_bis_cv tabs
## LR(1) items:
abs_spec_cv -> abs_spec_bis_cv tabs . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv -> abs_spec_bis_cv tabs

State 511:
## Known stack suffix:
## type_spec_cv abs_spec_cv_option
## LR(1) items:
cast_logic_type -> type_spec_cv abs_spec_cv_option . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production cast_logic_type -> type_spec_cv abs_spec_cv_option

State 512:
## Known stack suffix:
## abs_spec_cv
## LR(1) items:
abs_spec_cv_option -> abs_spec_cv . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production abs_spec_cv_option -> abs_spec_cv

State 513:
## Known stack suffix:
## type_spec
## LR(1) items:
type_spec_cv -> type_spec . [ STAR RPAR LSQUARE LPAR ]
type_spec_cv -> type_spec . cv [ STAR RPAR LSQUARE LPAR ]
## Transitions:
-- On VOLATILE shift to state 493
-- On CONST shift to state 494
-- On cv shift to state 514
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production type_spec_cv -> type_spec

State 514:
## Known stack suffix:
## type_spec cv
## LR(1) items:
type_spec_cv -> type_spec cv . [ STAR RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production type_spec_cv -> type_spec cv

State 515:
## Known stack suffix:
## LPAR range
## LR(1) items:
lexpr_inner -> LPAR range . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## LPAR range RPAR
## LR(1) items:
lexpr_inner -> LPAR range RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LPAR range RPAR

State 517:
## Known stack suffix:
## LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT DOTDOT BIMPLIES BIFF AND AMP ]
lexpr_inner -> LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_option -> lexpr . [ DOTDOT ]
## Transitions:
-- On RPAR shift to state 518
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On DOTDOT
--   reduce production lexpr_option -> lexpr

State 518:
## Known stack suffix:
## LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LPAR lexpr RPAR

State 519:
## Known stack suffix:
## cv
## LR(1) items:
type_spec_cv -> cv . type_spec [ STAR RPAR LSQUARE LPAR ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## cv type_spec
## LR(1) items:
type_spec_cv -> cv type_spec . [ STAR RPAR LSQUARE LPAR ]
## Transitions:
## Reductions:
-- On STAR RPAR LSQUARE LPAR
--   reduce production type_spec_cv -> cv type_spec

State 521:
## Known stack suffix:
## LPAR cast_logic_type
## LR(1) items:
lexpr_inner -> LPAR cast_logic_type . RPAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 522
## Reductions:

State 522:
## Known stack suffix:
## LPAR cast_logic_type RPAR
## LR(1) items:
lexpr_inner -> LPAR cast_logic_type RPAR . lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 108
-- On STAR shift to state 109
-- On SIZEOF shift to state 110
-- On SEPARATED shift to state 203
-- On RESULT shift to state 205
-- On REGISTER shift to state 206
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 215
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LBRACE shift to state 227
-- On INTER shift to state 252
-- On INITIALIZED shift to state 254
-- On IDENTIFIER shift to state 223
-- On FRESH shift to state 258
-- On FREEABLE shift to state 262
-- On FALSE shift to state 268
-- On EMPTY shift to state 272
-- On DYNAMIC shift to state 273
-- On DANGLING shift to state 274
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BLOCK_LENGTH shift to state 285
-- On BASE_ADDR shift to state 288
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCABLE shift to state 298
-- On string shift to state 307
-- On lexpr_inner shift to state 523
-- On identifier shift to state 330
-- On constant shift to state 341
## Reductions:

State 523:
## Known stack suffix:
## LPAR cast_logic_type RPAR lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> LPAR cast_logic_type RPAR lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> LPAR cast_logic_type RPAR lexpr_inner

State 524:
## Known stack suffix:
## LSQUAREPIPE lexpr_list
## LR(1) items:
lexpr_inner -> LSQUAREPIPE lexpr_list . RSQUAREPIPE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RSQUAREPIPE shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## LSQUAREPIPE lexpr_list RSQUAREPIPE
## LR(1) items:
lexpr_inner -> LSQUAREPIPE lexpr_list RSQUAREPIPE . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> LSQUAREPIPE lexpr_list RSQUAREPIPE

State 526:
## Known stack suffix:
## MINUS lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> MINUS lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> MINUS lexpr_inner

State 527:
## Known stack suffix:
## NOT lexpr_inner
## LR(1) items:
lexpr_inner -> NOT lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> NOT lexpr_inner

State 528:
## Known stack suffix:
## NOT lexpr_binder
## LR(1) items:
lexpr_end_rel -> NOT lexpr_binder . [ WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FROM FREES FOR EXITS EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_end_rel -> NOT lexpr_binder

State 529:
## Known stack suffix:
## OFFSET opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> OFFSET opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 530
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 530:
## Known stack suffix:
## OFFSET opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> OFFSET opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> OFFSET opt_label_1 LPAR lexpr RPAR

State 531:
## Known stack suffix:
## OLD LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> OLD LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 532
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 532:
## Known stack suffix:
## OLD LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> OLD LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> OLD LPAR lexpr RPAR

State 533:
## Known stack suffix:
## PLUS lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> PLUS lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> PLUS lexpr_inner

State 534:
## Known stack suffix:
## SEPARATED LPAR ne_lexpr_list
## LR(1) items:
lexpr_inner -> SEPARATED LPAR ne_lexpr_list . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 535
## Reductions:

State 535:
## Known stack suffix:
## SEPARATED LPAR ne_lexpr_list RPAR
## LR(1) items:
lexpr_inner -> SEPARATED LPAR ne_lexpr_list RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> SEPARATED LPAR ne_lexpr_list RPAR

State 536:
## Known stack suffix:
## SIZEOF LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> SIZEOF LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 537
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 537:
## Known stack suffix:
## SIZEOF LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> SIZEOF LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> SIZEOF LPAR lexpr RPAR

State 538:
## Known stack suffix:
## SIZEOF LPAR cast_logic_type
## LR(1) items:
lexpr_inner -> SIZEOF LPAR cast_logic_type . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 539
## Reductions:

State 539:
## Known stack suffix:
## SIZEOF LPAR cast_logic_type RPAR
## LR(1) items:
lexpr_inner -> SIZEOF LPAR cast_logic_type RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> SIZEOF LPAR cast_logic_type RPAR

State 540:
## Known stack suffix:
## STAR lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> STAR lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> STAR lexpr_inner

State 541:
## Known stack suffix:
## TILDE lexpr_inner
## LR(1) items:
lexpr_inner -> lexpr_inner . PLUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . MINUS lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STAR lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . SLASH lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . PERCENT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . STARHAT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . ARROW identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . DOT identifier_or_typename [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE range RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LSQUARE lexpr RSQUARE [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> TILDE lexpr_inner . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . GTGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTLT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . LTCOLON lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT logic_type [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
lexpr_inner -> lexpr_inner . COLONGT lexpr_inner [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On LTCOLON shift to state 311
-- On LSQUARE shift to state 313
-- On DOT shift to state 368
-- On COLONGT shift to state 370
-- On ARROW shift to state 373
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LT LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES
--   reduce production lexpr_inner -> TILDE lexpr_inner

State 542:
## Known stack suffix:
## TYPEOF LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> TYPEOF LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 543
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 543:
## Known stack suffix:
## TYPEOF LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> TYPEOF LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> TYPEOF LPAR lexpr RPAR

State 544:
## Known stack suffix:
## VALID opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 545
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 545:
## Known stack suffix:
## VALID opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> VALID opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> VALID opt_label_1 LPAR lexpr RPAR

State 546:
## Known stack suffix:
## VALID_FUNCTION LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID_FUNCTION LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 547
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 547:
## Known stack suffix:
## VALID_FUNCTION LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> VALID_FUNCTION LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> VALID_FUNCTION LPAR lexpr RPAR

State 548:
## Known stack suffix:
## VALID_INDEX opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID_INDEX opt_label_1 LPAR lexpr . COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COMMA shift to state 549
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 549:
## Known stack suffix:
## VALID_INDEX opt_label_1 LPAR lexpr COMMA
## LR(1) items:
lexpr_inner -> VALID_INDEX opt_label_1 LPAR lexpr COMMA . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 550
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 550:
## Known stack suffix:
## VALID_INDEX opt_label_1 LPAR lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID_INDEX opt_label_1 LPAR lexpr COMMA lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 551
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 551:
## Known stack suffix:
## VALID_INDEX opt_label_1 LPAR lexpr COMMA lexpr RPAR
## LR(1) items:
lexpr_inner -> VALID_INDEX opt_label_1 LPAR lexpr COMMA lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> VALID_INDEX opt_label_1 LPAR lexpr COMMA lexpr RPAR

State 552:
## Known stack suffix:
## VALID_RANGE opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID_RANGE opt_label_1 LPAR lexpr . COMMA lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COMMA shift to state 553
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 553:
## Known stack suffix:
## VALID_RANGE opt_label_1 LPAR lexpr COMMA
## LR(1) items:
lexpr_inner -> VALID_RANGE opt_label_1 LPAR lexpr COMMA . lexpr COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 554
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 554:
## Known stack suffix:
## VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ QUESTION PIPE OR IMPLIES IFF HATHAT HAT COMMA BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr . COMMA lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On COMMA shift to state 555
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 555:
## Known stack suffix:
## VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr COMMA
## LR(1) items:
lexpr_inner -> VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr COMMA . lexpr RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 556
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 556:
## Known stack suffix:
## VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr COMMA lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 557
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 557:
## Known stack suffix:
## VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr COMMA lexpr RPAR
## LR(1) items:
lexpr_inner -> VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr COMMA lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> VALID_RANGE opt_label_1 LPAR lexpr COMMA lexpr COMMA lexpr RPAR

State 558:
## Known stack suffix:
## VALID_READ opt_label_1 LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT BIMPLIES BIFF AND AMP ]
lexpr_inner -> VALID_READ opt_label_1 LPAR lexpr . RPAR [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
-- On RPAR shift to state 559
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:

State 559:
## Known stack suffix:
## VALID_READ opt_label_1 LPAR lexpr RPAR
## LR(1) items:
lexpr_inner -> VALID_READ opt_label_1 LPAR lexpr RPAR . [ WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES WITH STARHAT STAR SLASH SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS REQUIRES READS RBRACE QUESTION PLUS PIPE PERCENT OR NE MINUS LTLT LTCOLON LT LSQUARE LE IMPLIES IFF IDENTIFIER HATHAT HAT GTGT GT GE FROM FREES FOR EXITS EQUAL EQ EOF ENSURES DOTDOT DOT DISJOINT DECREASES CONTINUES COMPLETE COMMA COLONGT COLON2 BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS ARROW AND AMP ALLOCATES
--   reduce production lexpr_inner -> VALID_READ opt_label_1 LPAR lexpr RPAR

State 560:
## Known stack suffix:
## VOLATILE ne_zones
## LR(1) items:
decl -> VOLATILE ne_zones . volatile_opt SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 561
-- On READS shift to state 563
-- On volatile_opt shift to state 567
## Reductions:
-- On SEMICOLON
--   reduce production volatile_opt ->

State 561:
## Known stack suffix:
## WRITES
## LR(1) items:
volatile_opt -> WRITES . any_identifier volatile_opt [ SEMICOLON ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 562
-- On acsl_c_keyword shift to state 87
## Reductions:

State 562:
## Known stack suffix:
## WRITES any_identifier
## LR(1) items:
volatile_opt -> WRITES any_identifier . volatile_opt [ SEMICOLON ]
## Transitions:
-- On WRITES shift to state 561
-- On READS shift to state 563
-- On volatile_opt shift to state 566
## Reductions:
-- On SEMICOLON
--   reduce production volatile_opt ->

State 563:
## Known stack suffix:
## READS
## LR(1) items:
volatile_opt -> READS . any_identifier volatile_opt [ SEMICOLON ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 564
-- On acsl_c_keyword shift to state 87
## Reductions:

State 564:
## Known stack suffix:
## READS any_identifier
## LR(1) items:
volatile_opt -> READS any_identifier . volatile_opt [ SEMICOLON ]
## Transitions:
-- On WRITES shift to state 561
-- On READS shift to state 563
-- On volatile_opt shift to state 565
## Reductions:
-- On SEMICOLON
--   reduce production volatile_opt ->

State 565:
## Known stack suffix:
## READS any_identifier volatile_opt
## LR(1) items:
volatile_opt -> READS any_identifier volatile_opt . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production volatile_opt -> READS any_identifier volatile_opt

State 566:
## Known stack suffix:
## WRITES any_identifier volatile_opt
## LR(1) items:
volatile_opt -> WRITES any_identifier volatile_opt . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production volatile_opt -> WRITES any_identifier volatile_opt

State 567:
## Known stack suffix:
## VOLATILE ne_zones volatile_opt
## LR(1) items:
decl -> VOLATILE ne_zones volatile_opt . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 568
## Reductions:

State 568:
## Known stack suffix:
## VOLATILE ne_zones volatile_opt SEMICOLON
## LR(1) items:
decl -> VOLATILE ne_zones volatile_opt SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production decl -> VOLATILE ne_zones volatile_opt SEMICOLON

State 569:
## Known stack suffix:
## ne_lexpr_list
## LR(1) items:
ne_zones -> ne_lexpr_list . [ WRITES SEMICOLON RETURNS REQUIRES READS IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES SEMICOLON RETURNS REQUIRES READS IDENTIFIER FROM FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production ne_zones -> ne_lexpr_list

State 570:
## Known stack suffix:
## TYPE
## LR(1) items:
deprecated_logic_decl -> TYPE . poly_id_type SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> TYPE . poly_id_type_add_typename EQUAL typedef SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
type_annot -> TYPE . INVARIANT any_identifier LPAR full_parameter RPAR EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On INVARIANT shift to state 571
-- On poly_id_type_add_typename shift to state 590
-- On poly_id_type shift to state 618
-- On full_identifier shift to state 620
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 571:
## Known stack suffix:
## TYPE INVARIANT
## LR(1) items:
type_annot -> TYPE INVARIANT . any_identifier LPAR full_parameter RPAR EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 572
-- On acsl_c_keyword shift to state 87
## Reductions:

State 572:
## Known stack suffix:
## TYPE INVARIANT any_identifier
## LR(1) items:
type_annot -> TYPE INVARIANT any_identifier . LPAR full_parameter RPAR EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LPAR shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## TYPE INVARIANT any_identifier LPAR
## LR(1) items:
type_annot -> TYPE INVARIANT any_identifier LPAR . full_parameter RPAR EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_parameter shift to state 574
-- On enter_kw_c_mode shift to state 582
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT IDENTIFIER FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 574:
## Known stack suffix:
## TYPE INVARIANT any_identifier LPAR full_parameter
## LR(1) items:
type_annot -> TYPE INVARIANT any_identifier LPAR full_parameter . RPAR EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On RPAR shift to state 575
## Reductions:

State 575:
## Known stack suffix:
## TYPE INVARIANT any_identifier LPAR full_parameter RPAR
## LR(1) items:
type_annot -> TYPE INVARIANT any_identifier LPAR full_parameter RPAR . EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On EQUAL shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## TYPE INVARIANT any_identifier LPAR full_parameter RPAR EQUAL
## LR(1) items:
type_annot -> TYPE INVARIANT any_identifier LPAR full_parameter RPAR EQUAL . full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 577
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 577:
## Known stack suffix:
## TYPE INVARIANT any_identifier LPAR full_parameter RPAR EQUAL full_lexpr
## LR(1) items:
type_annot -> TYPE INVARIANT any_identifier LPAR full_parameter RPAR EQUAL full_lexpr . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 578
## Reductions:

State 578:
## Known stack suffix:
## TYPE INVARIANT any_identifier LPAR full_parameter RPAR EQUAL full_lexpr SEMICOLON
## LR(1) items:
type_annot -> TYPE INVARIANT any_identifier LPAR full_parameter RPAR EQUAL full_lexpr SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production type_annot -> TYPE INVARIANT any_identifier LPAR full_parameter RPAR EQUAL full_lexpr SEMICOLON

State 579:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_lexpr -> enter_kw_c_mode . lexpr exit_kw_c_mode [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 580
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 580:
## Known stack suffix:
## enter_kw_c_mode lexpr
## LR(1) items:
full_lexpr -> enter_kw_c_mode lexpr . exit_kw_c_mode [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
lexpr -> lexpr . IMPLIES lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . IFF lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . OR lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AND lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HATHAT lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . AMP lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . PIPE lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . HAT lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIMPLIES lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . BIFF lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ SEMICOLON RETURNS REQUIRES QUESTION PIPE OR IMPLIES IFF IDENTIFIER HATHAT HAT FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BIMPLIES BIFF BEHAVIOR ASSUMES ASSIGNS AND AMP ALLOCATES ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
-- On exit_kw_c_mode shift to state 581
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production exit_kw_c_mode ->

State 581:
## Known stack suffix:
## enter_kw_c_mode lexpr exit_kw_c_mode
## LR(1) items:
full_lexpr -> enter_kw_c_mode lexpr exit_kw_c_mode . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES FOR EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production full_lexpr -> enter_kw_c_mode lexpr exit_kw_c_mode

State 582:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_parameter -> enter_kw_c_mode . parameter exit_kw_c_mode [ SEMICOLON RPAR RBRACE ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On IDENTIFIER shift to state 223
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 583
-- On parameter shift to state 585
-- On identifier shift to state 587
-- On id_as_typename shift to state 588
## Reductions:

State 583:
## Known stack suffix:
## type_spec
## LR(1) items:
parameter -> type_spec . var_spec [ SEMICOLON RPAR RBRACE COMMA ]
## Transitions:
-- On STAR shift to state 161
-- On LPAR shift to state 231
-- On IDENTIFIER shift to state 223
-- On var_spec_bis shift to state 232
-- On var_spec shift to state 584
-- On stars shift to state 241
-- On identifier shift to state 243
## Reductions:

State 584:
## Known stack suffix:
## type_spec var_spec
## LR(1) items:
parameter -> type_spec var_spec . [ SEMICOLON RPAR RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRACE COMMA
--   reduce production parameter -> type_spec var_spec

State 585:
## Known stack suffix:
## enter_kw_c_mode parameter
## LR(1) items:
full_parameter -> enter_kw_c_mode parameter . exit_kw_c_mode [ SEMICOLON RPAR RBRACE ]
## Transitions:
-- On exit_kw_c_mode shift to state 586
## Reductions:
-- On SEMICOLON RPAR RBRACE
--   reduce production exit_kw_c_mode ->

State 586:
## Known stack suffix:
## enter_kw_c_mode parameter exit_kw_c_mode
## LR(1) items:
full_parameter -> enter_kw_c_mode parameter exit_kw_c_mode . [ SEMICOLON RPAR RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRACE
--   reduce production full_parameter -> enter_kw_c_mode parameter exit_kw_c_mode

State 587:
## Known stack suffix:
## identifier
## LR(1) items:
id_as_typename -> identifier . [ STAR LPAR IDENTIFIER ]
## Transitions:
## Reductions:
-- On STAR LPAR IDENTIFIER
--   reduce production id_as_typename -> identifier

State 588:
## Known stack suffix:
## id_as_typename
## LR(1) items:
parameter -> id_as_typename . var_spec [ SEMICOLON RPAR RBRACE COMMA ]
## Transitions:
-- On STAR shift to state 161
-- On LPAR shift to state 231
-- On IDENTIFIER shift to state 223
-- On var_spec_bis shift to state 232
-- On var_spec shift to state 589
-- On stars shift to state 241
-- On identifier shift to state 243
## Reductions:

State 589:
## Known stack suffix:
## id_as_typename var_spec
## LR(1) items:
parameter -> id_as_typename var_spec . [ SEMICOLON RPAR RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRACE COMMA
--   reduce production parameter -> id_as_typename var_spec

State 590:
## Known stack suffix:
## TYPE poly_id_type_add_typename
## LR(1) items:
logic_def -> TYPE poly_id_type_add_typename . EQUAL typedef SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On EQUAL shift to state 591
## Reductions:

State 591:
## Known stack suffix:
## TYPE poly_id_type_add_typename EQUAL
## LR(1) items:
logic_def -> TYPE poly_id_type_add_typename EQUAL . typedef SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On PIPE shift to state 592
-- On typedef shift to state 611
-- On ne_datacons_list shift to state 613
-- On full_logic_type shift to state 614
-- On full_identifier shift to state 593
-- On enter_kw_c_mode shift to state 615
-- On datacons shift to state 616
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT IDENTIFIER FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 592:
## Known stack suffix:
## PIPE
## LR(1) items:
ne_datacons_list -> PIPE . datacons datacons_list [ SEMICOLON ]
## Transitions:
-- On full_identifier shift to state 593
-- On enter_kw_c_mode shift to state 603
-- On datacons shift to state 606
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 593:
## Known stack suffix:
## full_identifier
## LR(1) items:
datacons -> full_identifier . [ SEMICOLON PIPE ]
datacons -> full_identifier . LPAR ne_type_list RPAR [ SEMICOLON PIPE ]
## Transitions:
-- On LPAR shift to state 594
## Reductions:
-- On SEMICOLON PIPE
--   reduce production datacons -> full_identifier

State 594:
## Known stack suffix:
## full_identifier LPAR
## LR(1) items:
datacons -> full_identifier LPAR . ne_type_list RPAR [ SEMICOLON PIPE ]
## Transitions:
-- On ne_type_list shift to state 595
-- On full_logic_type shift to state 597
-- On enter_kw_c_mode shift to state 600
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 595:
## Known stack suffix:
## full_identifier LPAR ne_type_list
## LR(1) items:
datacons -> full_identifier LPAR ne_type_list . RPAR [ SEMICOLON PIPE ]
## Transitions:
-- On RPAR shift to state 596
## Reductions:

State 596:
## Known stack suffix:
## full_identifier LPAR ne_type_list RPAR
## LR(1) items:
datacons -> full_identifier LPAR ne_type_list RPAR . [ SEMICOLON PIPE ]
## Transitions:
## Reductions:
-- On SEMICOLON PIPE
--   reduce production datacons -> full_identifier LPAR ne_type_list RPAR

State 597:
## Known stack suffix:
## full_logic_type
## LR(1) items:
ne_type_list -> full_logic_type . [ RPAR ]
ne_type_list -> full_logic_type . COMMA ne_type_list [ RPAR ]
## Transitions:
-- On COMMA shift to state 598
## Reductions:
-- On RPAR
--   reduce production ne_type_list -> full_logic_type

State 598:
## Known stack suffix:
## full_logic_type COMMA
## LR(1) items:
ne_type_list -> full_logic_type COMMA . ne_type_list [ RPAR ]
## Transitions:
-- On ne_type_list shift to state 599
-- On full_logic_type shift to state 597
-- On enter_kw_c_mode shift to state 600
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 599:
## Known stack suffix:
## full_logic_type COMMA ne_type_list
## LR(1) items:
ne_type_list -> full_logic_type COMMA ne_type_list . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production ne_type_list -> full_logic_type COMMA ne_type_list

State 600:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_logic_type -> enter_kw_c_mode . logic_type exit_kw_c_mode [ RPAR COMMA ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On logic_type shift to state 601
## Reductions:

State 601:
## Known stack suffix:
## enter_kw_c_mode logic_type
## LR(1) items:
full_logic_type -> enter_kw_c_mode logic_type . exit_kw_c_mode [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On exit_kw_c_mode shift to state 602
## Reductions:
-- On SEMICOLON RPAR COMMA
--   reduce production exit_kw_c_mode ->

State 602:
## Known stack suffix:
## enter_kw_c_mode logic_type exit_kw_c_mode
## LR(1) items:
full_logic_type -> enter_kw_c_mode logic_type exit_kw_c_mode . [ SEMICOLON RPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR COMMA
--   reduce production full_logic_type -> enter_kw_c_mode logic_type exit_kw_c_mode

State 603:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_identifier -> enter_kw_c_mode . identifier exit_kw_c_mode [ SEMICOLON READS PIPE LT LPAR LBRACE GT EQUAL COMMA COLON ]
## Transitions:
-- On IDENTIFIER shift to state 223
-- On identifier shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## enter_kw_c_mode identifier
## LR(1) items:
full_identifier -> enter_kw_c_mode identifier . exit_kw_c_mode [ SEMICOLON READS PIPE LT LPAR LBRACE GT EQUAL COMMA COLON ]
## Transitions:
-- On exit_kw_c_mode shift to state 605
## Reductions:
-- On SEMICOLON READS PIPE LT LPAR LBRACE GT EQUAL COMMA COLON
--   reduce production exit_kw_c_mode ->

State 605:
## Known stack suffix:
## enter_kw_c_mode identifier exit_kw_c_mode
## LR(1) items:
full_identifier -> enter_kw_c_mode identifier exit_kw_c_mode . [ SEMICOLON READS PIPE LT LPAR LBRACE GT EQUAL COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON READS PIPE LT LPAR LBRACE GT EQUAL COMMA COLON
--   reduce production full_identifier -> enter_kw_c_mode identifier exit_kw_c_mode

State 606:
## Known stack suffix:
## PIPE datacons
## LR(1) items:
ne_datacons_list -> PIPE datacons . datacons_list [ SEMICOLON ]
## Transitions:
-- On PIPE shift to state 607
-- On datacons_list shift to state 610
## Reductions:
-- On SEMICOLON
--   reduce production datacons_list ->

State 607:
## Known stack suffix:
## PIPE
## LR(1) items:
datacons_list -> PIPE . datacons datacons_list [ SEMICOLON ]
## Transitions:
-- On full_identifier shift to state 593
-- On enter_kw_c_mode shift to state 603
-- On datacons shift to state 608
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 608:
## Known stack suffix:
## PIPE datacons
## LR(1) items:
datacons_list -> PIPE datacons . datacons_list [ SEMICOLON ]
## Transitions:
-- On PIPE shift to state 607
-- On datacons_list shift to state 609
## Reductions:
-- On SEMICOLON
--   reduce production datacons_list ->

State 609:
## Known stack suffix:
## PIPE datacons datacons_list
## LR(1) items:
datacons_list -> PIPE datacons datacons_list . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production datacons_list -> PIPE datacons datacons_list

State 610:
## Known stack suffix:
## PIPE datacons datacons_list
## LR(1) items:
ne_datacons_list -> PIPE datacons datacons_list . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production ne_datacons_list -> PIPE datacons datacons_list

State 611:
## Known stack suffix:
## TYPE poly_id_type_add_typename EQUAL typedef
## LR(1) items:
logic_def -> TYPE poly_id_type_add_typename EQUAL typedef . SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 612
## Reductions:

State 612:
## Known stack suffix:
## TYPE poly_id_type_add_typename EQUAL typedef SEMICOLON
## LR(1) items:
logic_def -> TYPE poly_id_type_add_typename EQUAL typedef SEMICOLON . [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production logic_def -> TYPE poly_id_type_add_typename EQUAL typedef SEMICOLON

State 613:
## Known stack suffix:
## ne_datacons_list
## LR(1) items:
typedef -> ne_datacons_list . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production typedef -> ne_datacons_list

State 614:
## Known stack suffix:
## full_logic_type
## LR(1) items:
typedef -> full_logic_type . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production typedef -> full_logic_type

State 615:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_identifier -> enter_kw_c_mode . identifier exit_kw_c_mode [ SEMICOLON PIPE LPAR ]
full_logic_type -> enter_kw_c_mode . logic_type exit_kw_c_mode [ SEMICOLON ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On IDENTIFIER shift to state 223
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On logic_type shift to state 601
-- On identifier shift to state 604
## Reductions:

State 616:
## Known stack suffix:
## datacons
## LR(1) items:
ne_datacons_list -> datacons . datacons_list [ SEMICOLON ]
## Transitions:
-- On PIPE shift to state 607
-- On datacons_list shift to state 617
## Reductions:
-- On SEMICOLON
--   reduce production datacons_list ->

State 617:
## Known stack suffix:
## datacons datacons_list
## LR(1) items:
ne_datacons_list -> datacons datacons_list . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production ne_datacons_list -> datacons datacons_list

State 618:
## Known stack suffix:
## TYPE poly_id_type
## LR(1) items:
deprecated_logic_decl -> TYPE poly_id_type . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
poly_id_type_add_typename -> poly_id_type . [ EQUAL ]
## Transitions:
-- On SEMICOLON shift to state 619
## Reductions:
-- On EQUAL
--   reduce production poly_id_type_add_typename -> poly_id_type

State 619:
## Known stack suffix:
## TYPE poly_id_type SEMICOLON
## LR(1) items:
deprecated_logic_decl -> TYPE poly_id_type SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production deprecated_logic_decl -> TYPE poly_id_type SEMICOLON

State 620:
## Known stack suffix:
## full_identifier
## LR(1) items:
poly_id_type -> full_identifier . [ SEMICOLON EQUAL ]
poly_id_type -> full_identifier . LT ne_tvar_list GT [ SEMICOLON EQUAL ]
## Transitions:
-- On LT shift to state 621
## Reductions:
-- On SEMICOLON EQUAL
--   reduce production poly_id_type -> full_identifier

State 621:
## Known stack suffix:
## full_identifier LT
## LR(1) items:
poly_id_type -> full_identifier LT . ne_tvar_list GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On ne_tvar_list shift to state 622
-- On full_identifier shift to state 624
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 622:
## Known stack suffix:
## full_identifier LT ne_tvar_list
## LR(1) items:
poly_id_type -> full_identifier LT ne_tvar_list . GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On GT shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## full_identifier LT ne_tvar_list GT
## LR(1) items:
poly_id_type -> full_identifier LT ne_tvar_list GT . [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON READS LPAR EQUAL COLON
--   reduce production poly_id_type -> full_identifier LT ne_tvar_list GT

State 624:
## Known stack suffix:
## full_identifier
## LR(1) items:
ne_tvar_list -> full_identifier . [ GT ]
ne_tvar_list -> full_identifier . COMMA ne_tvar_list [ GT ]
## Transitions:
-- On COMMA shift to state 625
## Reductions:
-- On GT
--   reduce production ne_tvar_list -> full_identifier

State 625:
## Known stack suffix:
## full_identifier COMMA
## LR(1) items:
ne_tvar_list -> full_identifier COMMA . ne_tvar_list [ GT ]
## Transitions:
-- On ne_tvar_list shift to state 626
-- On full_identifier shift to state 624
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 626:
## Known stack suffix:
## full_identifier COMMA ne_tvar_list
## LR(1) items:
ne_tvar_list -> full_identifier COMMA ne_tvar_list . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production ne_tvar_list -> full_identifier COMMA ne_tvar_list

State 627:
## Known stack suffix:
## SLICE
## LR(1) items:
slice_pragma -> SLICE . PRAGMA any_identifier full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
slice_pragma -> SLICE . PRAGMA any_identifier SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On PRAGMA shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## SLICE PRAGMA
## LR(1) items:
slice_pragma -> SLICE PRAGMA . any_identifier full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
slice_pragma -> SLICE PRAGMA . any_identifier SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 629
-- On acsl_c_keyword shift to state 87
## Reductions:

State 629:
## Known stack suffix:
## SLICE PRAGMA any_identifier
## LR(1) items:
slice_pragma -> SLICE PRAGMA any_identifier . full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
slice_pragma -> SLICE PRAGMA any_identifier . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 630
-- On full_lexpr shift to state 631
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 630:
## Known stack suffix:
## SLICE PRAGMA any_identifier SEMICOLON
## LR(1) items:
slice_pragma -> SLICE PRAGMA any_identifier SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production slice_pragma -> SLICE PRAGMA any_identifier SEMICOLON

State 631:
## Known stack suffix:
## SLICE PRAGMA any_identifier full_lexpr
## LR(1) items:
slice_pragma -> SLICE PRAGMA any_identifier full_lexpr . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 632
## Reductions:

State 632:
## Known stack suffix:
## SLICE PRAGMA any_identifier full_lexpr SEMICOLON
## LR(1) items:
slice_pragma -> SLICE PRAGMA any_identifier full_lexpr SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production slice_pragma -> SLICE PRAGMA any_identifier full_lexpr SEMICOLON

State 633:
## Known stack suffix:
## PREDICATE
## LR(1) items:
deprecated_logic_decl -> PREDICATE . poly_id opt_parameters SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> PREDICATE . poly_id opt_parameters EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 635
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 634:
## Known stack suffix:
## poly_id_type
## LR(1) items:
poly_id -> poly_id_type . [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON READS LPAR EQUAL COLON
--   reduce production poly_id -> poly_id_type

State 635:
## Known stack suffix:
## PREDICATE poly_id
## LR(1) items:
deprecated_logic_decl -> PREDICATE poly_id . opt_parameters SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> PREDICATE poly_id . opt_parameters EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LPAR shift to state 636
-- On parameters shift to state 645
-- On opt_parameters shift to state 646
## Reductions:
-- On SEMICOLON EQUAL
--   reduce production opt_parameters ->

State 636:
## Known stack suffix:
## LPAR
## LR(1) items:
parameters -> LPAR . full_parameters RPAR [ SEMICOLON READS LBRACE EQUAL ]
## Transitions:
-- On full_parameters shift to state 637
-- On enter_kw_c_mode shift to state 639
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT IDENTIFIER FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 637:
## Known stack suffix:
## LPAR full_parameters
## LR(1) items:
parameters -> LPAR full_parameters . RPAR [ SEMICOLON READS LBRACE EQUAL ]
## Transitions:
-- On RPAR shift to state 638
## Reductions:

State 638:
## Known stack suffix:
## LPAR full_parameters RPAR
## LR(1) items:
parameters -> LPAR full_parameters RPAR . [ SEMICOLON READS LBRACE EQUAL ]
## Transitions:
## Reductions:
-- On SEMICOLON READS LBRACE EQUAL
--   reduce production parameters -> LPAR full_parameters RPAR

State 639:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_parameters -> enter_kw_c_mode . ne_parameters exit_kw_c_mode [ RPAR ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On IDENTIFIER shift to state 223
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 583
-- On parameter shift to state 640
-- On ne_parameters shift to state 643
-- On identifier shift to state 587
-- On id_as_typename shift to state 588
## Reductions:

State 640:
## Known stack suffix:
## parameter
## LR(1) items:
ne_parameters -> parameter . [ RPAR ]
ne_parameters -> parameter . COMMA ne_parameters [ RPAR ]
## Transitions:
-- On COMMA shift to state 641
## Reductions:
-- On RPAR
--   reduce production ne_parameters -> parameter

State 641:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
ne_parameters -> parameter COMMA . ne_parameters [ RPAR ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On IDENTIFIER shift to state 223
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 583
-- On parameter shift to state 640
-- On ne_parameters shift to state 642
-- On identifier shift to state 587
-- On id_as_typename shift to state 588
## Reductions:

State 642:
## Known stack suffix:
## parameter COMMA ne_parameters
## LR(1) items:
ne_parameters -> parameter COMMA ne_parameters . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production ne_parameters -> parameter COMMA ne_parameters

State 643:
## Known stack suffix:
## enter_kw_c_mode ne_parameters
## LR(1) items:
full_parameters -> enter_kw_c_mode ne_parameters . exit_kw_c_mode [ RPAR ]
## Transitions:
-- On exit_kw_c_mode shift to state 644
## Reductions:
-- On RPAR
--   reduce production exit_kw_c_mode ->

State 644:
## Known stack suffix:
## enter_kw_c_mode ne_parameters exit_kw_c_mode
## LR(1) items:
full_parameters -> enter_kw_c_mode ne_parameters exit_kw_c_mode . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production full_parameters -> enter_kw_c_mode ne_parameters exit_kw_c_mode

State 645:
## Known stack suffix:
## parameters
## LR(1) items:
opt_parameters -> parameters . [ SEMICOLON READS EQUAL ]
## Transitions:
## Reductions:
-- On SEMICOLON READS EQUAL
--   reduce production opt_parameters -> parameters

State 646:
## Known stack suffix:
## PREDICATE poly_id opt_parameters
## LR(1) items:
deprecated_logic_decl -> PREDICATE poly_id opt_parameters . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> PREDICATE poly_id opt_parameters . EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 647
-- On EQUAL shift to state 648
## Reductions:

State 647:
## Known stack suffix:
## PREDICATE poly_id opt_parameters SEMICOLON
## LR(1) items:
deprecated_logic_decl -> PREDICATE poly_id opt_parameters SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production deprecated_logic_decl -> PREDICATE poly_id opt_parameters SEMICOLON

State 648:
## Known stack suffix:
## PREDICATE poly_id opt_parameters EQUAL
## LR(1) items:
logic_def -> PREDICATE poly_id opt_parameters EQUAL . full_lexpr SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 649
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 649:
## Known stack suffix:
## PREDICATE poly_id opt_parameters EQUAL full_lexpr
## LR(1) items:
logic_def -> PREDICATE poly_id opt_parameters EQUAL full_lexpr . SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 650
## Reductions:

State 650:
## Known stack suffix:
## PREDICATE poly_id opt_parameters EQUAL full_lexpr SEMICOLON
## LR(1) items:
logic_def -> PREDICATE poly_id opt_parameters EQUAL full_lexpr SEMICOLON . [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production logic_def -> PREDICATE poly_id opt_parameters EQUAL full_lexpr SEMICOLON

State 651:
## Known stack suffix:
## full_identifier
## LR(1) items:
poly_id -> full_identifier . LBRACE ne_label_list RBRACE [ SEMICOLON READS LPAR EQUAL COLON ]
poly_id -> full_identifier . LBRACE ne_label_list RBRACE LT ne_tvar_list GT [ SEMICOLON READS LPAR EQUAL COLON ]
poly_id_type -> full_identifier . [ SEMICOLON READS LPAR EQUAL COLON ]
poly_id_type -> full_identifier . LT ne_tvar_list GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On LT shift to state 621
-- On LBRACE shift to state 652
## Reductions:
-- On SEMICOLON READS LPAR EQUAL COLON
--   reduce production poly_id_type -> full_identifier

State 652:
## Known stack suffix:
## full_identifier LBRACE
## LR(1) items:
poly_id -> full_identifier LBRACE . ne_label_list RBRACE [ SEMICOLON READS LPAR EQUAL COLON ]
poly_id -> full_identifier LBRACE . ne_label_list RBRACE LT ne_tvar_list GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_label_list shift to state 653
-- On label_name shift to state 76
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 86
-- On acsl_c_keyword shift to state 87
## Reductions:

State 653:
## Known stack suffix:
## full_identifier LBRACE ne_label_list
## LR(1) items:
poly_id -> full_identifier LBRACE ne_label_list . RBRACE [ SEMICOLON READS LPAR EQUAL COLON ]
poly_id -> full_identifier LBRACE ne_label_list . RBRACE LT ne_tvar_list GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On RBRACE shift to state 654
## Reductions:

State 654:
## Known stack suffix:
## full_identifier LBRACE ne_label_list RBRACE
## LR(1) items:
poly_id -> full_identifier LBRACE ne_label_list RBRACE . [ SEMICOLON READS LPAR EQUAL COLON ]
poly_id -> full_identifier LBRACE ne_label_list RBRACE . LT ne_tvar_list GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On LT shift to state 655
## Reductions:
-- On SEMICOLON READS LPAR EQUAL COLON
--   reduce production poly_id -> full_identifier LBRACE ne_label_list RBRACE

State 655:
## Known stack suffix:
## full_identifier LBRACE ne_label_list RBRACE LT
## LR(1) items:
poly_id -> full_identifier LBRACE ne_label_list RBRACE LT . ne_tvar_list GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On ne_tvar_list shift to state 656
-- On full_identifier shift to state 624
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 656:
## Known stack suffix:
## full_identifier LBRACE ne_label_list RBRACE LT ne_tvar_list
## LR(1) items:
poly_id -> full_identifier LBRACE ne_label_list RBRACE LT ne_tvar_list . GT [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
-- On GT shift to state 657
## Reductions:

State 657:
## Known stack suffix:
## full_identifier LBRACE ne_label_list RBRACE LT ne_tvar_list GT
## LR(1) items:
poly_id -> full_identifier LBRACE ne_label_list RBRACE LT ne_tvar_list GT . [ SEMICOLON READS LPAR EQUAL COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON READS LPAR EQUAL COLON
--   reduce production poly_id -> full_identifier LBRACE ne_label_list RBRACE LT ne_tvar_list GT

State 658:
## Known stack suffix:
## MODEL
## LR(1) items:
model_annot -> MODEL . type_spec LBRACE full_parameter opt_semicolon RBRACE SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## MODEL type_spec
## LR(1) items:
model_annot -> MODEL type_spec . LBRACE full_parameter opt_semicolon RBRACE SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LBRACE shift to state 660
## Reductions:

State 660:
## Known stack suffix:
## MODEL type_spec LBRACE
## LR(1) items:
model_annot -> MODEL type_spec LBRACE . full_parameter opt_semicolon RBRACE SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_parameter shift to state 661
-- On enter_kw_c_mode shift to state 582
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT IDENTIFIER FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 661:
## Known stack suffix:
## MODEL type_spec LBRACE full_parameter
## LR(1) items:
model_annot -> MODEL type_spec LBRACE full_parameter . opt_semicolon RBRACE SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 662
-- On opt_semicolon shift to state 663
## Reductions:
-- On RBRACE
--   reduce production opt_semicolon ->

State 662:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
opt_semicolon -> SEMICOLON . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production opt_semicolon -> SEMICOLON

State 663:
## Known stack suffix:
## MODEL type_spec LBRACE full_parameter opt_semicolon
## LR(1) items:
model_annot -> MODEL type_spec LBRACE full_parameter opt_semicolon . RBRACE SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On RBRACE shift to state 664
## Reductions:

State 664:
## Known stack suffix:
## MODEL type_spec LBRACE full_parameter opt_semicolon RBRACE
## LR(1) items:
model_annot -> MODEL type_spec LBRACE full_parameter opt_semicolon RBRACE . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 665
## Reductions:

State 665:
## Known stack suffix:
## MODEL type_spec LBRACE full_parameter opt_semicolon RBRACE SEMICOLON
## LR(1) items:
model_annot -> MODEL type_spec LBRACE full_parameter opt_semicolon RBRACE SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production model_annot -> MODEL type_spec LBRACE full_parameter opt_semicolon RBRACE SEMICOLON

State 666:
## Known stack suffix:
## LOOP
## LR(1) items:
loop_allocation -> LOOP . allocation SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
loop_effects -> LOOP . ASSIGNS full_assigns SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
loop_grammar_extension -> LOOP . grammar_extension SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
loop_invariant -> LOOP . INVARIANT full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
loop_pragma -> LOOP . PRAGMA any_identifier full_ne_lexpr_list SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
loop_variant -> LOOP . VARIANT variant SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOID shift to state 4
-- On VARIANT shift to state 667
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PRAGMA shift to state 673
-- On LONG shift to state 28
-- On LABEL shift to state 31
-- On INVARIANT shift to state 680
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On IF shift to state 38
-- On FREES shift to state 683
-- On FLOAT shift to state 44
-- On ENUM shift to state 48
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On CONST shift to state 57
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On ASSIGNS shift to state 690
-- On ALLOCATES shift to state 700
-- On is_acsl_other shift to state 702
-- On grammar_extension_name shift to state 703
-- On grammar_extension shift to state 705
-- On full_identifier_or_typename shift to state 707
-- On enter_kw_c_mode shift to state 708
-- On c_keyword shift to state 711
-- On allocation shift to state 712
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 667:
## Known stack suffix:
## LOOP VARIANT
## LR(1) items:
loop_variant -> LOOP VARIANT . variant SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On variant shift to state 668
-- On full_lexpr shift to state 670
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 668:
## Known stack suffix:
## LOOP VARIANT variant
## LR(1) items:
loop_variant -> LOOP VARIANT variant . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 669
## Reductions:

State 669:
## Known stack suffix:
## LOOP VARIANT variant SEMICOLON
## LR(1) items:
loop_variant -> LOOP VARIANT variant SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_variant -> LOOP VARIANT variant SEMICOLON

State 670:
## Known stack suffix:
## full_lexpr
## LR(1) items:
variant -> full_lexpr . FOR any_identifier [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
variant -> full_lexpr . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On FOR shift to state 671
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production variant -> full_lexpr

State 671:
## Known stack suffix:
## full_lexpr FOR
## LR(1) items:
variant -> full_lexpr FOR . any_identifier [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 672
-- On acsl_c_keyword shift to state 87
## Reductions:

State 672:
## Known stack suffix:
## full_lexpr FOR any_identifier
## LR(1) items:
variant -> full_lexpr FOR any_identifier . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production variant -> full_lexpr FOR any_identifier

State 673:
## Known stack suffix:
## LOOP PRAGMA
## LR(1) items:
loop_pragma -> LOOP PRAGMA . any_identifier full_ne_lexpr_list SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 674
-- On acsl_c_keyword shift to state 87
## Reductions:

State 674:
## Known stack suffix:
## LOOP PRAGMA any_identifier
## LR(1) items:
loop_pragma -> LOOP PRAGMA any_identifier . full_ne_lexpr_list SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_ne_lexpr_list shift to state 675
-- On enter_kw_c_mode shift to state 677
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 675:
## Known stack suffix:
## LOOP PRAGMA any_identifier full_ne_lexpr_list
## LR(1) items:
loop_pragma -> LOOP PRAGMA any_identifier full_ne_lexpr_list . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 676
## Reductions:

State 676:
## Known stack suffix:
## LOOP PRAGMA any_identifier full_ne_lexpr_list SEMICOLON
## LR(1) items:
loop_pragma -> LOOP PRAGMA any_identifier full_ne_lexpr_list SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_pragma -> LOOP PRAGMA any_identifier full_ne_lexpr_list SEMICOLON

State 677:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_ne_lexpr_list -> enter_kw_c_mode . ne_lexpr_list exit_kw_c_mode [ SEMICOLON ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_lexpr_list shift to state 678
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 678:
## Known stack suffix:
## enter_kw_c_mode ne_lexpr_list
## LR(1) items:
full_ne_lexpr_list -> enter_kw_c_mode ne_lexpr_list . exit_kw_c_mode [ SEMICOLON ]
## Transitions:
-- On exit_kw_c_mode shift to state 679
## Reductions:
-- On SEMICOLON
--   reduce production exit_kw_c_mode ->

State 679:
## Known stack suffix:
## enter_kw_c_mode ne_lexpr_list exit_kw_c_mode
## LR(1) items:
full_ne_lexpr_list -> enter_kw_c_mode ne_lexpr_list exit_kw_c_mode . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production full_ne_lexpr_list -> enter_kw_c_mode ne_lexpr_list exit_kw_c_mode

State 680:
## Known stack suffix:
## LOOP INVARIANT
## LR(1) items:
loop_invariant -> LOOP INVARIANT . full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 681
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 681:
## Known stack suffix:
## LOOP INVARIANT full_lexpr
## LR(1) items:
loop_invariant -> LOOP INVARIANT full_lexpr . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## LOOP INVARIANT full_lexpr SEMICOLON
## LR(1) items:
loop_invariant -> LOOP INVARIANT full_lexpr SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_invariant -> LOOP INVARIANT full_lexpr SEMICOLON

State 683:
## Known stack suffix:
## FREES
## LR(1) items:
allocation -> FREES . full_zones [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On full_zones shift to state 684
-- On enter_kw_c_mode shift to state 685
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOTHING NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 684:
## Known stack suffix:
## FREES full_zones
## LR(1) items:
allocation -> FREES full_zones . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production allocation -> FREES full_zones

State 685:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_zones -> enter_kw_c_mode . zones exit_kw_c_mode [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOTHING shift to state 686
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On zones shift to state 687
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_zones shift to state 689
-- On ne_lexpr_list shift to state 569
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 686:
## Known stack suffix:
## NOTHING
## LR(1) items:
zones -> NOTHING . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production zones -> NOTHING

State 687:
## Known stack suffix:
## enter_kw_c_mode zones
## LR(1) items:
full_zones -> enter_kw_c_mode zones . exit_kw_c_mode [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On exit_kw_c_mode shift to state 688
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production exit_kw_c_mode ->

State 688:
## Known stack suffix:
## enter_kw_c_mode zones exit_kw_c_mode
## LR(1) items:
full_zones -> enter_kw_c_mode zones exit_kw_c_mode . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production full_zones -> enter_kw_c_mode zones exit_kw_c_mode

State 689:
## Known stack suffix:
## ne_zones
## LR(1) items:
zones -> ne_zones . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production zones -> ne_zones

State 690:
## Known stack suffix:
## LOOP ASSIGNS
## LR(1) items:
loop_effects -> LOOP ASSIGNS . full_assigns SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_assigns shift to state 691
-- On enter_kw_c_mode shift to state 693
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOTHING NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 691:
## Known stack suffix:
## LOOP ASSIGNS full_assigns
## LR(1) items:
loop_effects -> LOOP ASSIGNS full_assigns . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 692
## Reductions:

State 692:
## Known stack suffix:
## LOOP ASSIGNS full_assigns SEMICOLON
## LR(1) items:
loop_effects -> LOOP ASSIGNS full_assigns SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_effects -> LOOP ASSIGNS full_assigns SEMICOLON

State 693:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_assigns -> enter_kw_c_mode . assigns exit_kw_c_mode [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOTHING shift to state 686
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On zones shift to state 694
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_zones shift to state 695
-- On ne_lexpr_list shift to state 569
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On assigns shift to state 698
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 694:
## Known stack suffix:
## zones
## LR(1) items:
assigns -> zones . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production assigns -> zones

State 695:
## Known stack suffix:
## ne_zones
## LR(1) items:
assigns -> ne_zones . FROM zones [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
zones -> ne_zones . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On FROM shift to state 696
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production zones -> ne_zones

State 696:
## Known stack suffix:
## ne_zones FROM
## LR(1) items:
assigns -> ne_zones FROM . zones [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOTHING shift to state 686
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On zones shift to state 697
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_zones shift to state 689
-- On ne_lexpr_list shift to state 569
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 697:
## Known stack suffix:
## ne_zones FROM zones
## LR(1) items:
assigns -> ne_zones FROM zones . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production assigns -> ne_zones FROM zones

State 698:
## Known stack suffix:
## enter_kw_c_mode assigns
## LR(1) items:
full_assigns -> enter_kw_c_mode assigns . exit_kw_c_mode [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On exit_kw_c_mode shift to state 699
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production exit_kw_c_mode ->

State 699:
## Known stack suffix:
## enter_kw_c_mode assigns exit_kw_c_mode
## LR(1) items:
full_assigns -> enter_kw_c_mode assigns exit_kw_c_mode . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production full_assigns -> enter_kw_c_mode assigns exit_kw_c_mode

State 700:
## Known stack suffix:
## ALLOCATES
## LR(1) items:
allocation -> ALLOCATES . full_zones [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On full_zones shift to state 701
-- On enter_kw_c_mode shift to state 685
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOTHING NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 701:
## Known stack suffix:
## ALLOCATES full_zones
## LR(1) items:
allocation -> ALLOCATES full_zones . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production allocation -> ALLOCATES full_zones

State 702:
## Known stack suffix:
## is_acsl_other
## LR(1) items:
grammar_extension_name -> is_acsl_other . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production grammar_extension_name -> is_acsl_other

State 703:
## Known stack suffix:
## grammar_extension_name
## LR(1) items:
grammar_extension -> grammar_extension_name . full_zones [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On full_zones shift to state 704
-- On enter_kw_c_mode shift to state 685
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOTHING NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 704:
## Known stack suffix:
## grammar_extension_name full_zones
## LR(1) items:
grammar_extension -> grammar_extension_name full_zones . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production grammar_extension -> grammar_extension_name full_zones

State 705:
## Known stack suffix:
## LOOP grammar_extension
## LR(1) items:
loop_grammar_extension -> LOOP grammar_extension . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 706
## Reductions:

State 706:
## Known stack suffix:
## LOOP grammar_extension SEMICOLON
## LR(1) items:
loop_grammar_extension -> LOOP grammar_extension SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_grammar_extension -> LOOP grammar_extension SEMICOLON

State 707:
## Known stack suffix:
## full_identifier_or_typename
## LR(1) items:
grammar_extension_name -> full_identifier_or_typename . [ WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOTHING NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOTHING NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production grammar_extension_name -> full_identifier_or_typename

State 708:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_identifier_or_typename -> enter_kw_c_mode . identifier_or_typename exit_kw_c_mode [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
-- On TYPENAME shift to state 10
-- On IDENTIFIER shift to state 39
-- On identifier_or_typename shift to state 709
## Reductions:

State 709:
## Known stack suffix:
## enter_kw_c_mode identifier_or_typename
## LR(1) items:
full_identifier_or_typename -> enter_kw_c_mode identifier_or_typename . exit_kw_c_mode [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
-- On exit_kw_c_mode shift to state 710
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production exit_kw_c_mode ->

State 710:
## Known stack suffix:
## enter_kw_c_mode identifier_or_typename exit_kw_c_mode
## LR(1) items:
full_identifier_or_typename -> enter_kw_c_mode identifier_or_typename exit_kw_c_mode . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production full_identifier_or_typename -> enter_kw_c_mode identifier_or_typename exit_kw_c_mode

State 711:
## Known stack suffix:
## c_keyword
## LR(1) items:
grammar_extension_name -> c_keyword . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production grammar_extension_name -> c_keyword

State 712:
## Known stack suffix:
## LOOP allocation
## LR(1) items:
loop_allocation -> LOOP allocation . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 713
## Reductions:

State 713:
## Known stack suffix:
## LOOP allocation SEMICOLON
## LR(1) items:
loop_allocation -> LOOP allocation SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOOP LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_allocation -> LOOP allocation SEMICOLON

State 714:
## Known stack suffix:
## LOGIC
## LR(1) items:
deprecated_logic_decl -> LOGIC . full_logic_rt_type poly_id opt_parameters SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> LOGIC . full_logic_rt_type poly_id opt_parameters EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_logic_rt_type shift to state 715
-- On enter_kw_c_mode shift to state 722
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT IDENTIFIER FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 715:
## Known stack suffix:
## LOGIC full_logic_rt_type
## LR(1) items:
deprecated_logic_decl -> LOGIC full_logic_rt_type . poly_id opt_parameters SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> LOGIC full_logic_rt_type . poly_id opt_parameters EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 716
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 716:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id
## LR(1) items:
deprecated_logic_decl -> LOGIC full_logic_rt_type poly_id . opt_parameters SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> LOGIC full_logic_rt_type poly_id . opt_parameters EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LPAR shift to state 636
-- On parameters shift to state 645
-- On opt_parameters shift to state 717
## Reductions:
-- On SEMICOLON EQUAL
--   reduce production opt_parameters ->

State 717:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters
## LR(1) items:
deprecated_logic_decl -> LOGIC full_logic_rt_type poly_id opt_parameters . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
logic_def -> LOGIC full_logic_rt_type poly_id opt_parameters . EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 718
-- On EQUAL shift to state 719
## Reductions:

State 718:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters SEMICOLON
## LR(1) items:
deprecated_logic_decl -> LOGIC full_logic_rt_type poly_id opt_parameters SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production deprecated_logic_decl -> LOGIC full_logic_rt_type poly_id opt_parameters SEMICOLON

State 719:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters EQUAL
## LR(1) items:
logic_def -> LOGIC full_logic_rt_type poly_id opt_parameters EQUAL . full_lexpr SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 720
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 720:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters EQUAL full_lexpr
## LR(1) items:
logic_def -> LOGIC full_logic_rt_type poly_id opt_parameters EQUAL full_lexpr . SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 721
## Reductions:

State 721:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters EQUAL full_lexpr SEMICOLON
## LR(1) items:
logic_def -> LOGIC full_logic_rt_type poly_id opt_parameters EQUAL full_lexpr SEMICOLON . [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production logic_def -> LOGIC full_logic_rt_type poly_id opt_parameters EQUAL full_lexpr SEMICOLON

State 722:
## Known stack suffix:
## enter_kw_c_mode
## LR(1) items:
full_logic_rt_type -> enter_kw_c_mode . logic_rt_type exit_kw_c_mode [ IDENTIFIER ]
## Transitions:
-- On IDENTIFIER shift to state 223
-- On logic_rt_type shift to state 723
-- On identifier shift to state 587
-- On id_as_typename shift to state 725
-- On begin_rt_type shift to state 726
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production begin_rt_type ->

State 723:
## Known stack suffix:
## enter_kw_c_mode logic_rt_type
## LR(1) items:
full_logic_rt_type -> enter_kw_c_mode logic_rt_type . exit_kw_c_mode [ IDENTIFIER ]
## Transitions:
-- On exit_kw_c_mode shift to state 724
## Reductions:
-- On IDENTIFIER
--   reduce production exit_kw_c_mode ->

State 724:
## Known stack suffix:
## enter_kw_c_mode logic_rt_type exit_kw_c_mode
## LR(1) items:
full_logic_rt_type -> enter_kw_c_mode logic_rt_type exit_kw_c_mode . [ IDENTIFIER ]
## Transitions:
## Reductions:
-- On IDENTIFIER
--   reduce production full_logic_rt_type -> enter_kw_c_mode logic_rt_type exit_kw_c_mode

State 725:
## Known stack suffix:
## id_as_typename
## LR(1) items:
logic_rt_type -> id_as_typename . [ IDENTIFIER ]
## Transitions:
## Reductions:
-- On IDENTIFIER
--   reduce production logic_rt_type -> id_as_typename

State 726:
## Known stack suffix:
## begin_rt_type
## LR(1) items:
logic_rt_type -> begin_rt_type . logic_type end_rt_type [ IDENTIFIER ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 160
-- On logic_type shift to state 727
## Reductions:

State 727:
## Known stack suffix:
## begin_rt_type logic_type
## LR(1) items:
logic_rt_type -> begin_rt_type logic_type . end_rt_type [ IDENTIFIER ]
## Transitions:
-- On end_rt_type shift to state 728
## Reductions:
-- On IDENTIFIER
--   reduce production end_rt_type ->

State 728:
## Known stack suffix:
## begin_rt_type logic_type end_rt_type
## LR(1) items:
logic_rt_type -> begin_rt_type logic_type end_rt_type . [ IDENTIFIER ]
## Transitions:
## Reductions:
-- On IDENTIFIER
--   reduce production logic_rt_type -> begin_rt_type logic_type end_rt_type

State 729:
## Known stack suffix:
## LEMMA
## LR(1) items:
logic_def -> LEMMA . poly_id COLON full_lexpr SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 730
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 730:
## Known stack suffix:
## LEMMA poly_id
## LR(1) items:
logic_def -> LEMMA poly_id . COLON full_lexpr SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 731
## Reductions:

State 731:
## Known stack suffix:
## LEMMA poly_id COLON
## LR(1) items:
logic_def -> LEMMA poly_id COLON . full_lexpr SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 732
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 732:
## Known stack suffix:
## LEMMA poly_id COLON full_lexpr
## LR(1) items:
logic_def -> LEMMA poly_id COLON full_lexpr . SEMICOLON [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 733
## Reductions:

State 733:
## Known stack suffix:
## LEMMA poly_id COLON full_lexpr SEMICOLON
## LR(1) items:
logic_def -> LEMMA poly_id COLON full_lexpr SEMICOLON . [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production logic_def -> LEMMA poly_id COLON full_lexpr SEMICOLON

State 734:
## Known stack suffix:
## INVARIANT
## LR(1) items:
code_annotation -> INVARIANT . full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On full_lexpr shift to state 735
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 735:
## Known stack suffix:
## INVARIANT full_lexpr
## LR(1) items:
code_annotation -> INVARIANT full_lexpr . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 736
## Reductions:

State 736:
## Known stack suffix:
## INVARIANT full_lexpr SEMICOLON
## LR(1) items:
code_annotation -> INVARIANT full_lexpr SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production code_annotation -> INVARIANT full_lexpr SEMICOLON

State 737:
## Known stack suffix:
## INDUCTIVE
## LR(1) items:
logic_def -> INDUCTIVE . poly_id parameters LBRACE indcases RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 738
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 738:
## Known stack suffix:
## INDUCTIVE poly_id
## LR(1) items:
logic_def -> INDUCTIVE poly_id . parameters LBRACE indcases RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LPAR shift to state 636
-- On parameters shift to state 739
## Reductions:

State 739:
## Known stack suffix:
## INDUCTIVE poly_id parameters
## LR(1) items:
logic_def -> INDUCTIVE poly_id parameters . LBRACE indcases RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LBRACE shift to state 740
## Reductions:

State 740:
## Known stack suffix:
## INDUCTIVE poly_id parameters LBRACE
## LR(1) items:
logic_def -> INDUCTIVE poly_id parameters LBRACE . indcases RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On CASE shift to state 741
-- On indcases shift to state 747
## Reductions:
-- On RBRACE
--   reduce production indcases ->

State 741:
## Known stack suffix:
## CASE
## LR(1) items:
indcases -> CASE . poly_id COLON full_lexpr SEMICOLON indcases [ RBRACE ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 742
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 742:
## Known stack suffix:
## CASE poly_id
## LR(1) items:
indcases -> CASE poly_id . COLON full_lexpr SEMICOLON indcases [ RBRACE ]
## Transitions:
-- On COLON shift to state 743
## Reductions:

State 743:
## Known stack suffix:
## CASE poly_id COLON
## LR(1) items:
indcases -> CASE poly_id COLON . full_lexpr SEMICOLON indcases [ RBRACE ]
## Transitions:
-- On full_lexpr shift to state 744
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 744:
## Known stack suffix:
## CASE poly_id COLON full_lexpr
## LR(1) items:
indcases -> CASE poly_id COLON full_lexpr . SEMICOLON indcases [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 745
## Reductions:

State 745:
## Known stack suffix:
## CASE poly_id COLON full_lexpr SEMICOLON
## LR(1) items:
indcases -> CASE poly_id COLON full_lexpr SEMICOLON . indcases [ RBRACE ]
## Transitions:
-- On CASE shift to state 741
-- On indcases shift to state 746
## Reductions:
-- On RBRACE
--   reduce production indcases ->

State 746:
## Known stack suffix:
## CASE poly_id COLON full_lexpr SEMICOLON indcases
## LR(1) items:
indcases -> CASE poly_id COLON full_lexpr SEMICOLON indcases . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production indcases -> CASE poly_id COLON full_lexpr SEMICOLON indcases

State 747:
## Known stack suffix:
## INDUCTIVE poly_id parameters LBRACE indcases
## LR(1) items:
logic_def -> INDUCTIVE poly_id parameters LBRACE indcases . RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On RBRACE shift to state 748
## Reductions:

State 748:
## Known stack suffix:
## INDUCTIVE poly_id parameters LBRACE indcases RBRACE
## LR(1) items:
logic_def -> INDUCTIVE poly_id parameters LBRACE indcases RBRACE . [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production logic_def -> INDUCTIVE poly_id parameters LBRACE indcases RBRACE

State 749:
## Known stack suffix:
## IMPACT
## LR(1) items:
impact_pragma -> IMPACT . PRAGMA any_identifier full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
impact_pragma -> IMPACT . PRAGMA any_identifier SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On PRAGMA shift to state 750
## Reductions:

State 750:
## Known stack suffix:
## IMPACT PRAGMA
## LR(1) items:
impact_pragma -> IMPACT PRAGMA . any_identifier full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
impact_pragma -> IMPACT PRAGMA . any_identifier SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 751
-- On acsl_c_keyword shift to state 87
## Reductions:

State 751:
## Known stack suffix:
## IMPACT PRAGMA any_identifier
## LR(1) items:
impact_pragma -> IMPACT PRAGMA any_identifier . full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
impact_pragma -> IMPACT PRAGMA any_identifier . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 752
-- On full_lexpr shift to state 753
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 752:
## Known stack suffix:
## IMPACT PRAGMA any_identifier SEMICOLON
## LR(1) items:
impact_pragma -> IMPACT PRAGMA any_identifier SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production impact_pragma -> IMPACT PRAGMA any_identifier SEMICOLON

State 753:
## Known stack suffix:
## IMPACT PRAGMA any_identifier full_lexpr
## LR(1) items:
impact_pragma -> IMPACT PRAGMA any_identifier full_lexpr . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 754
## Reductions:

State 754:
## Known stack suffix:
## IMPACT PRAGMA any_identifier full_lexpr SEMICOLON
## LR(1) items:
impact_pragma -> IMPACT PRAGMA any_identifier full_lexpr SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production impact_pragma -> IMPACT PRAGMA any_identifier full_lexpr SEMICOLON

State 755:
## Known stack suffix:
## GLOBAL
## LR(1) items:
decl -> GLOBAL . INVARIANT any_identifier COLON full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODEL LOGIC LEMMA INDUCTIVE GLOBAL EOF AXIOMATIC AXIOM ]
## Transitions:
-- On INVARIANT shift to state 756
## Reductions:

State 756:
## Known stack suffix:
## GLOBAL INVARIANT
## LR(1) items:
decl -> GLOBAL INVARIANT . any_identifier COLON full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 757
-- On acsl_c_keyword shift to state 87
## Reductions:

State 757:
## Known stack suffix:
## GLOBAL INVARIANT any_identifier
## LR(1) items:
decl -> GLOBAL INVARIANT any_identifier . COLON full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 758
## Reductions:

State 758:
## Known stack suffix:
## GLOBAL INVARIANT any_identifier COLON
## LR(1) items:
decl -> GLOBAL INVARIANT any_identifier COLON . full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 759
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 759:
## Known stack suffix:
## GLOBAL INVARIANT any_identifier COLON full_lexpr
## LR(1) items:
decl -> GLOBAL INVARIANT any_identifier COLON full_lexpr . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 760
## Reductions:

State 760:
## Known stack suffix:
## GLOBAL INVARIANT any_identifier COLON full_lexpr SEMICOLON
## LR(1) items:
decl -> GLOBAL INVARIANT any_identifier COLON full_lexpr SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production decl -> GLOBAL INVARIANT any_identifier COLON full_lexpr SEMICOLON

State 761:
## Known stack suffix:
## FOR
## LR(1) items:
annotation -> FOR . ne_behavior_name_list COLON contract [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
code_annotation -> FOR . ne_behavior_name_list COLON ASSERT full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
code_annotation -> FOR . ne_behavior_name_list COLON INVARIANT full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
loop_annot_stack -> FOR . ne_behavior_name_list COLON loop_annot_stack [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_behavior_name_list shift to state 762
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On behavior_name shift to state 802
-- On any_identifier shift to state 805
-- On acsl_c_keyword shift to state 87
## Reductions:

State 762:
## Known stack suffix:
## FOR ne_behavior_name_list
## LR(1) items:
annotation -> FOR ne_behavior_name_list . COLON contract [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
code_annotation -> FOR ne_behavior_name_list . COLON ASSERT full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
code_annotation -> FOR ne_behavior_name_list . COLON INVARIANT full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
loop_annot_stack -> FOR ne_behavior_name_list . COLON loop_annot_stack [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 763
## Reductions:

State 763:
## Known stack suffix:
## FOR ne_behavior_name_list COLON
## LR(1) items:
annotation -> FOR ne_behavior_name_list COLON . contract [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
code_annotation -> FOR ne_behavior_name_list COLON . ASSERT full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
code_annotation -> FOR ne_behavior_name_list COLON . INVARIANT full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
loop_annot_stack -> FOR ne_behavior_name_list COLON . loop_annot_stack [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On REQUIRES shift to state 764
-- On LOOP shift to state 666
-- On INVARIANT shift to state 782
-- On FOR shift to state 785
-- On ASSERT shift to state 806
-- On requires shift to state 809
-- On ne_requires shift to state 768
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 801
-- On loop_allocation shift to state 795
-- On contract shift to state 898
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production requires ->

State 764:
## Known stack suffix:
## REQUIRES
## LR(1) items:
ne_requires -> REQUIRES . full_lexpr SEMICOLON requires [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
ne_requires -> REQUIRES . full_lexpr clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On full_lexpr shift to state 765
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 765:
## Known stack suffix:
## REQUIRES full_lexpr
## LR(1) items:
ne_requires -> REQUIRES full_lexpr . SEMICOLON requires [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
ne_requires -> REQUIRES full_lexpr . clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 766
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 781
## Reductions:

State 766:
## Known stack suffix:
## REQUIRES full_lexpr SEMICOLON
## LR(1) items:
ne_requires -> REQUIRES full_lexpr SEMICOLON . requires [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On REQUIRES shift to state 764
-- On requires shift to state 767
-- On ne_requires shift to state 768
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production requires ->

State 767:
## Known stack suffix:
## REQUIRES full_lexpr SEMICOLON requires
## LR(1) items:
ne_requires -> REQUIRES full_lexpr SEMICOLON requires . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production ne_requires -> REQUIRES full_lexpr SEMICOLON requires

State 768:
## Known stack suffix:
## ne_requires
## LR(1) items:
requires -> ne_requires . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production requires -> ne_requires

State 769:
## Known stack suffix:
## REQUIRES
## LR(1) items:
clause_kw -> REQUIRES . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> REQUIRES

State 770:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
clause_kw -> IDENTIFIER . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> IDENTIFIER

State 771:
## Known stack suffix:
## FREES
## LR(1) items:
clause_kw -> FREES . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> FREES

State 772:
## Known stack suffix:
## EOF
## LR(1) items:
clause_kw -> EOF . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> EOF

State 773:
## Known stack suffix:
## DISJOINT
## LR(1) items:
clause_kw -> DISJOINT . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> DISJOINT

State 774:
## Known stack suffix:
## DECREASES
## LR(1) items:
clause_kw -> DECREASES . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> DECREASES

State 775:
## Known stack suffix:
## COMPLETE
## LR(1) items:
clause_kw -> COMPLETE . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> COMPLETE

State 776:
## Known stack suffix:
## BEHAVIOR
## LR(1) items:
clause_kw -> BEHAVIOR . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> BEHAVIOR

State 777:
## Known stack suffix:
## ASSUMES
## LR(1) items:
clause_kw -> ASSUMES . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> ASSUMES

State 778:
## Known stack suffix:
## ASSIGNS
## LR(1) items:
clause_kw -> ASSIGNS . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> ASSIGNS

State 779:
## Known stack suffix:
## ALLOCATES
## LR(1) items:
clause_kw -> ALLOCATES . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> ALLOCATES

State 780:
## Known stack suffix:
## post_cond
## LR(1) items:
clause_kw -> post_cond . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production clause_kw -> post_cond

State 781:
## Known stack suffix:
## REQUIRES full_lexpr clause_kw
## LR(1) items:
ne_requires -> REQUIRES full_lexpr clause_kw . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ALLOCATES
--   reduce production ne_requires -> REQUIRES full_lexpr clause_kw

State 782:
## Known stack suffix:
## FOR ne_behavior_name_list COLON INVARIANT
## LR(1) items:
code_annotation -> FOR ne_behavior_name_list COLON INVARIANT . full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On full_lexpr shift to state 783
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 783:
## Known stack suffix:
## FOR ne_behavior_name_list COLON INVARIANT full_lexpr
## LR(1) items:
code_annotation -> FOR ne_behavior_name_list COLON INVARIANT full_lexpr . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 784
## Reductions:

State 784:
## Known stack suffix:
## FOR ne_behavior_name_list COLON INVARIANT full_lexpr SEMICOLON
## LR(1) items:
code_annotation -> FOR ne_behavior_name_list COLON INVARIANT full_lexpr SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production code_annotation -> FOR ne_behavior_name_list COLON INVARIANT full_lexpr SEMICOLON

State 785:
## Known stack suffix:
## FOR
## LR(1) items:
loop_annot_stack -> FOR . ne_behavior_name_list COLON loop_annot_stack [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_behavior_name_list shift to state 786
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On behavior_name shift to state 802
-- On any_identifier shift to state 805
-- On acsl_c_keyword shift to state 87
## Reductions:

State 786:
## Known stack suffix:
## FOR ne_behavior_name_list
## LR(1) items:
loop_annot_stack -> FOR ne_behavior_name_list . COLON loop_annot_stack [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 787
## Reductions:

State 787:
## Known stack suffix:
## FOR ne_behavior_name_list COLON
## LR(1) items:
loop_annot_stack -> FOR ne_behavior_name_list COLON . loop_annot_stack [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LOOP shift to state 666
-- On FOR shift to state 785
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 801
-- On loop_allocation shift to state 795
## Reductions:

State 788:
## Known stack suffix:
## loop_variant
## LR(1) items:
loop_annot_stack -> loop_variant . loop_annot_opt [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LOOP shift to state 666
-- On FOR shift to state 785
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 793
-- On loop_annot_opt shift to state 800
-- On loop_allocation shift to state 795
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_opt ->

State 789:
## Known stack suffix:
## loop_pragma
## LR(1) items:
loop_annot_stack -> loop_pragma . loop_annot_opt [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LOOP shift to state 666
-- On FOR shift to state 785
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 793
-- On loop_annot_opt shift to state 799
-- On loop_allocation shift to state 795
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_opt ->

State 790:
## Known stack suffix:
## loop_invariant
## LR(1) items:
loop_annot_stack -> loop_invariant . loop_annot_opt [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LOOP shift to state 666
-- On FOR shift to state 785
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 793
-- On loop_annot_opt shift to state 798
-- On loop_allocation shift to state 795
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_opt ->

State 791:
## Known stack suffix:
## loop_grammar_extension
## LR(1) items:
loop_annot_stack -> loop_grammar_extension . loop_annot_opt [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LOOP shift to state 666
-- On FOR shift to state 785
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 793
-- On loop_annot_opt shift to state 797
-- On loop_allocation shift to state 795
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_opt ->

State 792:
## Known stack suffix:
## loop_effects
## LR(1) items:
loop_annot_stack -> loop_effects . loop_annot_opt [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LOOP shift to state 666
-- On FOR shift to state 785
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 793
-- On loop_annot_opt shift to state 794
-- On loop_allocation shift to state 795
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_opt ->

State 793:
## Known stack suffix:
## loop_annot_stack
## LR(1) items:
loop_annot_opt -> loop_annot_stack . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_opt -> loop_annot_stack

State 794:
## Known stack suffix:
## loop_effects loop_annot_opt
## LR(1) items:
loop_annot_stack -> loop_effects loop_annot_opt . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_stack -> loop_effects loop_annot_opt

State 795:
## Known stack suffix:
## loop_allocation
## LR(1) items:
loop_annot_stack -> loop_allocation . loop_annot_opt [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LOOP shift to state 666
-- On FOR shift to state 785
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annot_stack shift to state 793
-- On loop_annot_opt shift to state 796
-- On loop_allocation shift to state 795
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_opt ->

State 796:
## Known stack suffix:
## loop_allocation loop_annot_opt
## LR(1) items:
loop_annot_stack -> loop_allocation loop_annot_opt . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_stack -> loop_allocation loop_annot_opt

State 797:
## Known stack suffix:
## loop_grammar_extension loop_annot_opt
## LR(1) items:
loop_annot_stack -> loop_grammar_extension loop_annot_opt . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_stack -> loop_grammar_extension loop_annot_opt

State 798:
## Known stack suffix:
## loop_invariant loop_annot_opt
## LR(1) items:
loop_annot_stack -> loop_invariant loop_annot_opt . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_stack -> loop_invariant loop_annot_opt

State 799:
## Known stack suffix:
## loop_pragma loop_annot_opt
## LR(1) items:
loop_annot_stack -> loop_pragma loop_annot_opt . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_stack -> loop_pragma loop_annot_opt

State 800:
## Known stack suffix:
## loop_variant loop_annot_opt
## LR(1) items:
loop_annot_stack -> loop_variant loop_annot_opt . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_stack -> loop_variant loop_annot_opt

State 801:
## Known stack suffix:
## FOR ne_behavior_name_list COLON loop_annot_stack
## LR(1) items:
loop_annot_stack -> FOR ne_behavior_name_list COLON loop_annot_stack . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annot_stack -> FOR ne_behavior_name_list COLON loop_annot_stack

State 802:
## Known stack suffix:
## behavior_name
## LR(1) items:
ne_behavior_name_list -> behavior_name . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
ne_behavior_name_list -> behavior_name . COMMA ne_behavior_name_list [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On COMMA shift to state 803
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production ne_behavior_name_list -> behavior_name

State 803:
## Known stack suffix:
## behavior_name COMMA
## LR(1) items:
ne_behavior_name_list -> behavior_name COMMA . ne_behavior_name_list [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_behavior_name_list shift to state 804
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On behavior_name shift to state 802
-- On any_identifier shift to state 805
-- On acsl_c_keyword shift to state 87
## Reductions:

State 804:
## Known stack suffix:
## behavior_name COMMA ne_behavior_name_list
## LR(1) items:
ne_behavior_name_list -> behavior_name COMMA ne_behavior_name_list . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production ne_behavior_name_list -> behavior_name COMMA ne_behavior_name_list

State 805:
## Known stack suffix:
## any_identifier
## LR(1) items:
behavior_name -> any_identifier . [ SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On SEMICOLON RETURNS REQUIRES IDENTIFIER FREES EXITS EOF ENSURES DISJOINT DECREASES CONTINUES COMPLETE COMMA COLON BREAKS BEHAVIOR ASSUMES ASSIGNS ALLOCATES
--   reduce production behavior_name -> any_identifier

State 806:
## Known stack suffix:
## FOR ne_behavior_name_list COLON ASSERT
## LR(1) items:
code_annotation -> FOR ne_behavior_name_list COLON ASSERT . full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On full_lexpr shift to state 807
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 807:
## Known stack suffix:
## FOR ne_behavior_name_list COLON ASSERT full_lexpr
## LR(1) items:
code_annotation -> FOR ne_behavior_name_list COLON ASSERT full_lexpr . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 808
## Reductions:

State 808:
## Known stack suffix:
## FOR ne_behavior_name_list COLON ASSERT full_lexpr SEMICOLON
## LR(1) items:
code_annotation -> FOR ne_behavior_name_list COLON ASSERT full_lexpr SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production code_annotation -> FOR ne_behavior_name_list COLON ASSERT full_lexpr SEMICOLON

State 809:
## Known stack suffix:
## requires
## LR(1) items:
contract -> requires . terminates decreases simple_clauses behaviors complete_or_disjoint [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . ne_terminates REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates ne_decreases REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates ne_decreases TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases ne_simple_clauses REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases ne_simple_clauses TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases ne_simple_clauses DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses ne_behaviors TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses ne_behaviors DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint BEHAVIOR [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint ASSIGNS [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint ALLOCATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint FREES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires . terminates decreases simple_clauses behaviors ne_complete_or_disjoint post_cond_kind [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On TERMINATES shift to state 810
-- On terminates shift to state 814
-- On ne_terminates shift to state 896
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production terminates ->

State 810:
## Known stack suffix:
## TERMINATES
## LR(1) items:
ne_terminates -> TERMINATES . full_lexpr SEMICOLON [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_terminates -> TERMINATES . full_lexpr clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On full_lexpr shift to state 811
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 811:
## Known stack suffix:
## TERMINATES full_lexpr
## LR(1) items:
ne_terminates -> TERMINATES full_lexpr . SEMICOLON [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_terminates -> TERMINATES full_lexpr . clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 812
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 813
## Reductions:

State 812:
## Known stack suffix:
## TERMINATES full_lexpr SEMICOLON
## LR(1) items:
ne_terminates -> TERMINATES full_lexpr SEMICOLON . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_terminates -> TERMINATES full_lexpr SEMICOLON

State 813:
## Known stack suffix:
## TERMINATES full_lexpr clause_kw
## LR(1) items:
ne_terminates -> TERMINATES full_lexpr clause_kw . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_terminates -> TERMINATES full_lexpr clause_kw

State 814:
## Known stack suffix:
## requires terminates
## LR(1) items:
contract -> requires terminates . decreases simple_clauses behaviors complete_or_disjoint [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . ne_decreases REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . ne_decreases TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases ne_simple_clauses REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases ne_simple_clauses TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases ne_simple_clauses DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses ne_behaviors TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses ne_behaviors DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint BEHAVIOR [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint ASSIGNS [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint ALLOCATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint FREES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates . decreases simple_clauses behaviors ne_complete_or_disjoint post_cond_kind [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On DECREASES shift to state 815
-- On ne_decreases shift to state 819
-- On decreases shift to state 822
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production decreases ->

State 815:
## Known stack suffix:
## DECREASES
## LR(1) items:
ne_decreases -> DECREASES . variant SEMICOLON [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_decreases -> DECREASES . variant clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On variant shift to state 816
-- On full_lexpr shift to state 670
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 816:
## Known stack suffix:
## DECREASES variant
## LR(1) items:
ne_decreases -> DECREASES variant . SEMICOLON [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_decreases -> DECREASES variant . clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 817
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 818
## Reductions:

State 817:
## Known stack suffix:
## DECREASES variant SEMICOLON
## LR(1) items:
ne_decreases -> DECREASES variant SEMICOLON . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_decreases -> DECREASES variant SEMICOLON

State 818:
## Known stack suffix:
## DECREASES variant clause_kw
## LR(1) items:
ne_decreases -> DECREASES variant clause_kw . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_decreases -> DECREASES variant clause_kw

State 819:
## Known stack suffix:
## requires terminates ne_decreases
## LR(1) items:
contract -> requires terminates ne_decreases . REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates ne_decreases . TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
decreases -> ne_decreases . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On TERMINATES shift to state 820
-- On REQUIRES shift to state 821
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production decreases -> ne_decreases

State 820:
## Known stack suffix:
## requires terminates ne_decreases TERMINATES
## LR(1) items:
contract -> requires terminates ne_decreases TERMINATES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates ne_decreases TERMINATES

State 821:
## Known stack suffix:
## requires terminates ne_decreases REQUIRES
## LR(1) items:
contract -> requires terminates ne_decreases REQUIRES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates ne_decreases REQUIRES

State 822:
## Known stack suffix:
## requires terminates decreases
## LR(1) items:
contract -> requires terminates decreases . simple_clauses behaviors complete_or_disjoint [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . ne_simple_clauses REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . ne_simple_clauses TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . ne_simple_clauses DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses ne_behaviors TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses ne_behaviors DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint BEHAVIOR [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint ASSIGNS [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint ALLOCATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint FREES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases . simple_clauses behaviors ne_complete_or_disjoint post_cond_kind [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOID shift to state 4
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REAL shift to state 21
-- On READS shift to state 22
-- On LONG shift to state 28
-- On LABEL shift to state 31
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On IF shift to state 38
-- On FREES shift to state 683
-- On FLOAT shift to state 44
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On ASSIGNS shift to state 823
-- On ALLOCATES shift to state 700
-- On simple_clauses shift to state 843
-- On post_cond_kind shift to state 827
-- On post_cond shift to state 831
-- On ne_simple_clauses shift to state 892
-- On is_acsl_other shift to state 702
-- On grammar_extension_name shift to state 703
-- On grammar_extension shift to state 833
-- On full_identifier_or_typename shift to state 707
-- On enter_kw_c_mode shift to state 708
-- On c_keyword shift to state 711
-- On allocation shift to state 836
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production simple_clauses ->

State 823:
## Known stack suffix:
## ASSIGNS
## LR(1) items:
ne_simple_clauses -> ASSIGNS . full_assigns SEMICOLON simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
ne_simple_clauses -> ASSIGNS . full_assigns clause_kw [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On full_assigns shift to state 824
-- On enter_kw_c_mode shift to state 693
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOTHING NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 824:
## Known stack suffix:
## ASSIGNS full_assigns
## LR(1) items:
ne_simple_clauses -> ASSIGNS full_assigns . SEMICOLON simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
ne_simple_clauses -> ASSIGNS full_assigns . clause_kw [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On SEMICOLON shift to state 825
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 842
## Reductions:

State 825:
## Known stack suffix:
## ASSIGNS full_assigns SEMICOLON
## LR(1) items:
ne_simple_clauses -> ASSIGNS full_assigns SEMICOLON . simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOID shift to state 4
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REAL shift to state 21
-- On READS shift to state 22
-- On LONG shift to state 28
-- On LABEL shift to state 31
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On IF shift to state 38
-- On FREES shift to state 683
-- On FLOAT shift to state 44
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On ASSIGNS shift to state 823
-- On ALLOCATES shift to state 700
-- On simple_clauses shift to state 826
-- On post_cond_kind shift to state 827
-- On post_cond shift to state 831
-- On ne_simple_clauses shift to state 832
-- On is_acsl_other shift to state 702
-- On grammar_extension_name shift to state 703
-- On grammar_extension shift to state 833
-- On full_identifier_or_typename shift to state 707
-- On enter_kw_c_mode shift to state 708
-- On c_keyword shift to state 711
-- On allocation shift to state 836
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production simple_clauses ->

State 826:
## Known stack suffix:
## ASSIGNS full_assigns SEMICOLON simple_clauses
## LR(1) items:
ne_simple_clauses -> ASSIGNS full_assigns SEMICOLON simple_clauses . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> ASSIGNS full_assigns SEMICOLON simple_clauses

State 827:
## Known stack suffix:
## post_cond_kind
## LR(1) items:
ne_simple_clauses -> post_cond_kind . full_lexpr SEMICOLON simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
ne_simple_clauses -> post_cond_kind . full_lexpr clause_kw [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On full_lexpr shift to state 828
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 828:
## Known stack suffix:
## post_cond_kind full_lexpr
## LR(1) items:
ne_simple_clauses -> post_cond_kind full_lexpr . SEMICOLON simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
ne_simple_clauses -> post_cond_kind full_lexpr . clause_kw [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On SEMICOLON shift to state 829
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 841
## Reductions:

State 829:
## Known stack suffix:
## post_cond_kind full_lexpr SEMICOLON
## LR(1) items:
ne_simple_clauses -> post_cond_kind full_lexpr SEMICOLON . simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOID shift to state 4
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REAL shift to state 21
-- On READS shift to state 22
-- On LONG shift to state 28
-- On LABEL shift to state 31
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On IF shift to state 38
-- On FREES shift to state 683
-- On FLOAT shift to state 44
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On ASSIGNS shift to state 823
-- On ALLOCATES shift to state 700
-- On simple_clauses shift to state 830
-- On post_cond_kind shift to state 827
-- On post_cond shift to state 831
-- On ne_simple_clauses shift to state 832
-- On is_acsl_other shift to state 702
-- On grammar_extension_name shift to state 703
-- On grammar_extension shift to state 833
-- On full_identifier_or_typename shift to state 707
-- On enter_kw_c_mode shift to state 708
-- On c_keyword shift to state 711
-- On allocation shift to state 836
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production simple_clauses ->

State 830:
## Known stack suffix:
## post_cond_kind full_lexpr SEMICOLON simple_clauses
## LR(1) items:
ne_simple_clauses -> post_cond_kind full_lexpr SEMICOLON simple_clauses . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> post_cond_kind full_lexpr SEMICOLON simple_clauses

State 831:
## Known stack suffix:
## post_cond
## LR(1) items:
post_cond_kind -> post_cond . [ WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production post_cond_kind -> post_cond

State 832:
## Known stack suffix:
## ne_simple_clauses
## LR(1) items:
simple_clauses -> ne_simple_clauses . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production simple_clauses -> ne_simple_clauses

State 833:
## Known stack suffix:
## grammar_extension
## LR(1) items:
ne_simple_clauses -> grammar_extension . SEMICOLON simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
ne_simple_clauses -> grammar_extension . clause_kw [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On SEMICOLON shift to state 834
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 840
## Reductions:

State 834:
## Known stack suffix:
## grammar_extension SEMICOLON
## LR(1) items:
ne_simple_clauses -> grammar_extension SEMICOLON . simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOID shift to state 4
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REAL shift to state 21
-- On READS shift to state 22
-- On LONG shift to state 28
-- On LABEL shift to state 31
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On IF shift to state 38
-- On FREES shift to state 683
-- On FLOAT shift to state 44
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On ASSIGNS shift to state 823
-- On ALLOCATES shift to state 700
-- On simple_clauses shift to state 835
-- On post_cond_kind shift to state 827
-- On post_cond shift to state 831
-- On ne_simple_clauses shift to state 832
-- On is_acsl_other shift to state 702
-- On grammar_extension_name shift to state 703
-- On grammar_extension shift to state 833
-- On full_identifier_or_typename shift to state 707
-- On enter_kw_c_mode shift to state 708
-- On c_keyword shift to state 711
-- On allocation shift to state 836
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production simple_clauses ->

State 835:
## Known stack suffix:
## grammar_extension SEMICOLON simple_clauses
## LR(1) items:
ne_simple_clauses -> grammar_extension SEMICOLON simple_clauses . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> grammar_extension SEMICOLON simple_clauses

State 836:
## Known stack suffix:
## allocation
## LR(1) items:
ne_simple_clauses -> allocation . SEMICOLON simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
ne_simple_clauses -> allocation . clause_kw [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On SEMICOLON shift to state 837
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 839
## Reductions:

State 837:
## Known stack suffix:
## allocation SEMICOLON
## LR(1) items:
ne_simple_clauses -> allocation SEMICOLON . simple_clauses [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOID shift to state 4
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REAL shift to state 21
-- On READS shift to state 22
-- On LONG shift to state 28
-- On LABEL shift to state 31
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On IF shift to state 38
-- On FREES shift to state 683
-- On FLOAT shift to state 44
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On ASSIGNS shift to state 823
-- On ALLOCATES shift to state 700
-- On simple_clauses shift to state 838
-- On post_cond_kind shift to state 827
-- On post_cond shift to state 831
-- On ne_simple_clauses shift to state 832
-- On is_acsl_other shift to state 702
-- On grammar_extension_name shift to state 703
-- On grammar_extension shift to state 833
-- On full_identifier_or_typename shift to state 707
-- On enter_kw_c_mode shift to state 708
-- On c_keyword shift to state 711
-- On allocation shift to state 836
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production simple_clauses ->

State 838:
## Known stack suffix:
## allocation SEMICOLON simple_clauses
## LR(1) items:
ne_simple_clauses -> allocation SEMICOLON simple_clauses . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> allocation SEMICOLON simple_clauses

State 839:
## Known stack suffix:
## allocation clause_kw
## LR(1) items:
ne_simple_clauses -> allocation clause_kw . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> allocation clause_kw

State 840:
## Known stack suffix:
## grammar_extension clause_kw
## LR(1) items:
ne_simple_clauses -> grammar_extension clause_kw . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> grammar_extension clause_kw

State 841:
## Known stack suffix:
## post_cond_kind full_lexpr clause_kw
## LR(1) items:
ne_simple_clauses -> post_cond_kind full_lexpr clause_kw . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> post_cond_kind full_lexpr clause_kw

State 842:
## Known stack suffix:
## ASSIGNS full_assigns clause_kw
## LR(1) items:
ne_simple_clauses -> ASSIGNS full_assigns clause_kw . [ VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ASSUMES
--   reduce production ne_simple_clauses -> ASSIGNS full_assigns clause_kw

State 843:
## Known stack suffix:
## requires terminates decreases simple_clauses
## LR(1) items:
contract -> requires terminates decreases simple_clauses . behaviors complete_or_disjoint [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . ne_behaviors TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . ne_behaviors DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint BEHAVIOR [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint ASSIGNS [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint ALLOCATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint FREES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses . behaviors ne_complete_or_disjoint post_cond_kind [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On BEHAVIOR shift to state 844
-- On ne_behaviors shift to state 863
-- On behaviors shift to state 866
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT CONTRACT COMPLETE AXIOMATIC AXIOM
--   reduce production behaviors ->

State 844:
## Known stack suffix:
## BEHAVIOR
## LR(1) items:
ne_behaviors -> BEHAVIOR . behavior_name COLON behavior_body behaviors [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On behavior_name shift to state 845
-- On any_identifier shift to state 805
-- On acsl_c_keyword shift to state 87
## Reductions:

State 845:
## Known stack suffix:
## BEHAVIOR behavior_name
## LR(1) items:
ne_behaviors -> BEHAVIOR behavior_name . COLON behavior_body behaviors [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 846
## Reductions:

State 846:
## Known stack suffix:
## BEHAVIOR behavior_name COLON
## LR(1) items:
ne_behaviors -> BEHAVIOR behavior_name COLON . behavior_body behaviors [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM ]
## Transitions:
-- On ASSUMES shift to state 847
-- On behavior_body shift to state 852
-- On assumes shift to state 855
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production assumes ->

State 847:
## Known stack suffix:
## ASSUMES
## LR(1) items:
assumes -> ASSUMES . full_lexpr SEMICOLON assumes [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
assumes -> ASSUMES . full_lexpr clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On full_lexpr shift to state 848
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 848:
## Known stack suffix:
## ASSUMES full_lexpr
## LR(1) items:
assumes -> ASSUMES full_lexpr . SEMICOLON assumes [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
assumes -> ASSUMES full_lexpr . clause_kw [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 849
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 851
## Reductions:

State 849:
## Known stack suffix:
## ASSUMES full_lexpr SEMICOLON
## LR(1) items:
assumes -> ASSUMES full_lexpr SEMICOLON . assumes [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On ASSUMES shift to state 847
-- On assumes shift to state 850
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production assumes ->

State 850:
## Known stack suffix:
## ASSUMES full_lexpr SEMICOLON assumes
## LR(1) items:
assumes -> ASSUMES full_lexpr SEMICOLON assumes . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production assumes -> ASSUMES full_lexpr SEMICOLON assumes

State 851:
## Known stack suffix:
## ASSUMES full_lexpr clause_kw
## LR(1) items:
assumes -> ASSUMES full_lexpr clause_kw . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production assumes -> ASSUMES full_lexpr clause_kw

State 852:
## Known stack suffix:
## BEHAVIOR behavior_name COLON behavior_body
## LR(1) items:
ne_behaviors -> BEHAVIOR behavior_name COLON behavior_body . behaviors [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM ]
## Transitions:
-- On BEHAVIOR shift to state 844
-- On ne_behaviors shift to state 853
-- On behaviors shift to state 854
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM
--   reduce production behaviors ->

State 853:
## Known stack suffix:
## ne_behaviors
## LR(1) items:
behaviors -> ne_behaviors . [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM
--   reduce production behaviors -> ne_behaviors

State 854:
## Known stack suffix:
## BEHAVIOR behavior_name COLON behavior_body behaviors
## LR(1) items:
ne_behaviors -> BEHAVIOR behavior_name COLON behavior_body behaviors . [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE AXIOMATIC AXIOM
--   reduce production ne_behaviors -> BEHAVIOR behavior_name COLON behavior_body behaviors

State 855:
## Known stack suffix:
## assumes
## LR(1) items:
behavior_body -> assumes . requires simple_clauses [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
behavior_body -> assumes . ne_requires ASSUMES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
behavior_body -> assumes . requires ne_simple_clauses ASSUMES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
behavior_body -> assumes . requires ne_simple_clauses REQUIRES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
-- On REQUIRES shift to state 764
-- On requires shift to state 856
-- On ne_requires shift to state 861
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production requires ->

State 856:
## Known stack suffix:
## assumes requires
## LR(1) items:
behavior_body -> assumes requires . simple_clauses [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
behavior_body -> assumes requires . ne_simple_clauses ASSUMES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
behavior_body -> assumes requires . ne_simple_clauses REQUIRES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOID shift to state 4
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REAL shift to state 21
-- On READS shift to state 22
-- On LONG shift to state 28
-- On LABEL shift to state 31
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On IF shift to state 38
-- On FREES shift to state 683
-- On FLOAT shift to state 44
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On ASSIGNS shift to state 823
-- On ALLOCATES shift to state 700
-- On simple_clauses shift to state 857
-- On post_cond_kind shift to state 827
-- On post_cond shift to state 831
-- On ne_simple_clauses shift to state 858
-- On is_acsl_other shift to state 702
-- On grammar_extension_name shift to state 703
-- On grammar_extension shift to state 833
-- On full_identifier_or_typename shift to state 707
-- On enter_kw_c_mode shift to state 708
-- On c_keyword shift to state 711
-- On allocation shift to state 836
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production simple_clauses ->

State 857:
## Known stack suffix:
## assumes requires simple_clauses
## LR(1) items:
behavior_body -> assumes requires simple_clauses . [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production behavior_body -> assumes requires simple_clauses

State 858:
## Known stack suffix:
## assumes requires ne_simple_clauses
## LR(1) items:
behavior_body -> assumes requires ne_simple_clauses . ASSUMES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
behavior_body -> assumes requires ne_simple_clauses . REQUIRES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
simple_clauses -> ne_simple_clauses . [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
-- On REQUIRES shift to state 859
-- On ASSUMES shift to state 860
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production simple_clauses -> ne_simple_clauses

State 859:
## Known stack suffix:
## assumes requires ne_simple_clauses REQUIRES
## LR(1) items:
behavior_body -> assumes requires ne_simple_clauses REQUIRES . [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production behavior_body -> assumes requires ne_simple_clauses REQUIRES

State 860:
## Known stack suffix:
## assumes requires ne_simple_clauses ASSUMES
## LR(1) items:
behavior_body -> assumes requires ne_simple_clauses ASSUMES . [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production behavior_body -> assumes requires ne_simple_clauses ASSUMES

State 861:
## Known stack suffix:
## assumes ne_requires
## LR(1) items:
behavior_body -> assumes ne_requires . ASSUMES [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
requires -> ne_requires . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On ASSUMES shift to state 862
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production requires -> ne_requires

State 862:
## Known stack suffix:
## assumes ne_requires ASSUMES
## LR(1) items:
behavior_body -> assumes ne_requires ASSUMES . [ VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT DECREASES CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production behavior_body -> assumes ne_requires ASSUMES

State 863:
## Known stack suffix:
## requires terminates decreases simple_clauses ne_behaviors
## LR(1) items:
behaviors -> ne_behaviors . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT CONTRACT COMPLETE AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses ne_behaviors . TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses ne_behaviors . DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On TERMINATES shift to state 864
-- On DECREASES shift to state 865
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT CONTRACT COMPLETE AXIOMATIC AXIOM
--   reduce production behaviors -> ne_behaviors

State 864:
## Known stack suffix:
## requires terminates decreases simple_clauses ne_behaviors TERMINATES
## LR(1) items:
contract -> requires terminates decreases simple_clauses ne_behaviors TERMINATES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses ne_behaviors TERMINATES

State 865:
## Known stack suffix:
## requires terminates decreases simple_clauses ne_behaviors DECREASES
## LR(1) items:
contract -> requires terminates decreases simple_clauses ne_behaviors DECREASES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses ne_behaviors DECREASES

State 866:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors . complete_or_disjoint [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint BEHAVIOR [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint ASSIGNS [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint ALLOCATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint FREES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors . ne_complete_or_disjoint post_cond_kind [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On DISJOINT shift to state 867
-- On COMPLETE shift to state 873
-- On ne_complete_or_disjoint shift to state 882
-- On complete_or_disjoint shift to state 891
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production complete_or_disjoint ->

State 867:
## Known stack suffix:
## DISJOINT
## LR(1) items:
ne_complete_or_disjoint -> DISJOINT . BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_complete_or_disjoint -> DISJOINT . BEHAVIORS ne_behavior_name_list clause_kw [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On BEHAVIORS shift to state 868
## Reductions:

State 868:
## Known stack suffix:
## DISJOINT BEHAVIORS
## LR(1) items:
ne_complete_or_disjoint -> DISJOINT BEHAVIORS . behavior_name_list SEMICOLON complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_complete_or_disjoint -> DISJOINT BEHAVIORS . ne_behavior_name_list clause_kw [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_behavior_name_list shift to state 869
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On behavior_name_list shift to state 871
-- On behavior_name shift to state 802
-- On any_identifier shift to state 805
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On SEMICOLON
--   reduce production behavior_name_list ->

State 869:
## Known stack suffix:
## DISJOINT BEHAVIORS ne_behavior_name_list
## LR(1) items:
behavior_name_list -> ne_behavior_name_list . [ SEMICOLON ]
ne_complete_or_disjoint -> DISJOINT BEHAVIORS ne_behavior_name_list . clause_kw [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 870
## Reductions:
-- On SEMICOLON
--   reduce production behavior_name_list -> ne_behavior_name_list

State 870:
## Known stack suffix:
## DISJOINT BEHAVIORS ne_behavior_name_list clause_kw
## LR(1) items:
ne_complete_or_disjoint -> DISJOINT BEHAVIORS ne_behavior_name_list clause_kw . [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_complete_or_disjoint -> DISJOINT BEHAVIORS ne_behavior_name_list clause_kw

State 871:
## Known stack suffix:
## DISJOINT BEHAVIORS behavior_name_list
## LR(1) items:
ne_complete_or_disjoint -> DISJOINT BEHAVIORS behavior_name_list . SEMICOLON complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 872
## Reductions:

State 872:
## Known stack suffix:
## DISJOINT BEHAVIORS behavior_name_list SEMICOLON
## LR(1) items:
ne_complete_or_disjoint -> DISJOINT BEHAVIORS behavior_name_list SEMICOLON . complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On DISJOINT shift to state 867
-- On COMPLETE shift to state 873
-- On ne_complete_or_disjoint shift to state 879
-- On complete_or_disjoint shift to state 881
## Reductions:
-- On VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production complete_or_disjoint ->

State 873:
## Known stack suffix:
## COMPLETE
## LR(1) items:
ne_complete_or_disjoint -> COMPLETE . BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_complete_or_disjoint -> COMPLETE . BEHAVIORS ne_behavior_name_list clause_kw [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On BEHAVIORS shift to state 874
## Reductions:

State 874:
## Known stack suffix:
## COMPLETE BEHAVIORS
## LR(1) items:
ne_complete_or_disjoint -> COMPLETE BEHAVIORS . behavior_name_list SEMICOLON complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
ne_complete_or_disjoint -> COMPLETE BEHAVIORS . ne_behavior_name_list clause_kw [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_behavior_name_list shift to state 875
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On behavior_name_list shift to state 877
-- On behavior_name shift to state 802
-- On any_identifier shift to state 805
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On SEMICOLON
--   reduce production behavior_name_list ->

State 875:
## Known stack suffix:
## COMPLETE BEHAVIORS ne_behavior_name_list
## LR(1) items:
behavior_name_list -> ne_behavior_name_list . [ SEMICOLON ]
ne_complete_or_disjoint -> COMPLETE BEHAVIORS ne_behavior_name_list . clause_kw [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 769
-- On IDENTIFIER shift to state 770
-- On FREES shift to state 771
-- On EXITS shift to state 47
-- On EOF shift to state 772
-- On ENSURES shift to state 49
-- On DISJOINT shift to state 773
-- On DECREASES shift to state 774
-- On CONTINUES shift to state 56
-- On COMPLETE shift to state 775
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 776
-- On ASSUMES shift to state 777
-- On ASSIGNS shift to state 778
-- On ALLOCATES shift to state 779
-- On post_cond shift to state 780
-- On clause_kw shift to state 876
## Reductions:
-- On SEMICOLON
--   reduce production behavior_name_list -> ne_behavior_name_list

State 876:
## Known stack suffix:
## COMPLETE BEHAVIORS ne_behavior_name_list clause_kw
## LR(1) items:
ne_complete_or_disjoint -> COMPLETE BEHAVIORS ne_behavior_name_list clause_kw . [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_complete_or_disjoint -> COMPLETE BEHAVIORS ne_behavior_name_list clause_kw

State 877:
## Known stack suffix:
## COMPLETE BEHAVIORS behavior_name_list
## LR(1) items:
ne_complete_or_disjoint -> COMPLETE BEHAVIORS behavior_name_list . SEMICOLON complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On SEMICOLON shift to state 878
## Reductions:

State 878:
## Known stack suffix:
## COMPLETE BEHAVIORS behavior_name_list SEMICOLON
## LR(1) items:
ne_complete_or_disjoint -> COMPLETE BEHAVIORS behavior_name_list SEMICOLON . complete_or_disjoint [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On DISJOINT shift to state 867
-- On COMPLETE shift to state 873
-- On ne_complete_or_disjoint shift to state 879
-- On complete_or_disjoint shift to state 880
## Reductions:
-- On VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production complete_or_disjoint ->

State 879:
## Known stack suffix:
## ne_complete_or_disjoint
## LR(1) items:
complete_or_disjoint -> ne_complete_or_disjoint . [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production complete_or_disjoint -> ne_complete_or_disjoint

State 880:
## Known stack suffix:
## COMPLETE BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint
## LR(1) items:
ne_complete_or_disjoint -> COMPLETE BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint . [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_complete_or_disjoint -> COMPLETE BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint

State 881:
## Known stack suffix:
## DISJOINT BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint
## LR(1) items:
ne_complete_or_disjoint -> DISJOINT BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint . [ VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE TERMINATES RETURNS REQUIRES PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION FREES EXT_LET EXT_AT EXITS EOF ENSURES DECREASES CONTRACT CONTINUES BREAKS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ne_complete_or_disjoint -> DISJOINT BEHAVIORS behavior_name_list SEMICOLON complete_or_disjoint

State 882:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint
## LR(1) items:
complete_or_disjoint -> ne_complete_or_disjoint . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . BEHAVIOR [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . ASSIGNS [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . ALLOCATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . FREES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint . post_cond_kind [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On TERMINATES shift to state 883
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 884
-- On FREES shift to state 885
-- On EXITS shift to state 47
-- On ENSURES shift to state 49
-- On DECREASES shift to state 886
-- On CONTINUES shift to state 56
-- On BREAKS shift to state 61
-- On BEHAVIOR shift to state 887
-- On ASSIGNS shift to state 888
-- On ALLOCATES shift to state 889
-- On post_cond_kind shift to state 890
-- On post_cond shift to state 831
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production complete_or_disjoint -> ne_complete_or_disjoint

State 883:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint TERMINATES
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint TERMINATES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint TERMINATES

State 884:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint REQUIRES
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint REQUIRES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint REQUIRES

State 885:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint FREES
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint FREES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint FREES

State 886:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint DECREASES
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint DECREASES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint DECREASES

State 887:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint BEHAVIOR
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint BEHAVIOR . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint BEHAVIOR

State 888:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint ASSIGNS
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint ASSIGNS . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint ASSIGNS

State 889:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint ALLOCATES
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint ALLOCATES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint ALLOCATES

State 890:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint post_cond_kind
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint post_cond_kind . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors ne_complete_or_disjoint post_cond_kind

State 891:
## Known stack suffix:
## requires terminates decreases simple_clauses behaviors complete_or_disjoint
## LR(1) items:
contract -> requires terminates decreases simple_clauses behaviors complete_or_disjoint . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases simple_clauses behaviors complete_or_disjoint

State 892:
## Known stack suffix:
## requires terminates decreases ne_simple_clauses
## LR(1) items:
contract -> requires terminates decreases ne_simple_clauses . REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases ne_simple_clauses . TERMINATES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
contract -> requires terminates decreases ne_simple_clauses . DECREASES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
simple_clauses -> ne_simple_clauses . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM ]
## Transitions:
-- On TERMINATES shift to state 893
-- On REQUIRES shift to state 894
-- On DECREASES shift to state 895
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF DISJOINT CONTRACT COMPLETE BEHAVIOR AXIOMATIC AXIOM
--   reduce production simple_clauses -> ne_simple_clauses

State 893:
## Known stack suffix:
## requires terminates decreases ne_simple_clauses TERMINATES
## LR(1) items:
contract -> requires terminates decreases ne_simple_clauses TERMINATES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases ne_simple_clauses TERMINATES

State 894:
## Known stack suffix:
## requires terminates decreases ne_simple_clauses REQUIRES
## LR(1) items:
contract -> requires terminates decreases ne_simple_clauses REQUIRES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases ne_simple_clauses REQUIRES

State 895:
## Known stack suffix:
## requires terminates decreases ne_simple_clauses DECREASES
## LR(1) items:
contract -> requires terminates decreases ne_simple_clauses DECREASES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires terminates decreases ne_simple_clauses DECREASES

State 896:
## Known stack suffix:
## requires ne_terminates
## LR(1) items:
contract -> requires ne_terminates . REQUIRES [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
terminates -> ne_terminates . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On REQUIRES shift to state 897
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production terminates -> ne_terminates

State 897:
## Known stack suffix:
## requires ne_terminates REQUIRES
## LR(1) items:
contract -> requires ne_terminates REQUIRES . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production contract -> requires ne_terminates REQUIRES

State 898:
## Known stack suffix:
## FOR ne_behavior_name_list COLON contract
## LR(1) items:
annotation -> FOR ne_behavior_name_list COLON contract . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production annotation -> FOR ne_behavior_name_list COLON contract

State 899:
## Known stack suffix:
## CUSTOM
## LR(1) items:
annot -> CUSTOM . any_identifier COLON custom_tree EOF [ # ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 900
-- On acsl_c_keyword shift to state 87
## Reductions:

State 900:
## Known stack suffix:
## CUSTOM any_identifier
## LR(1) items:
annot -> CUSTOM any_identifier . COLON custom_tree EOF [ # ]
## Transitions:
-- On COLON shift to state 901
## Reductions:

State 901:
## Known stack suffix:
## CUSTOM any_identifier COLON
## LR(1) items:
annot -> CUSTOM any_identifier COLON . custom_tree EOF [ # ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 902
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 904
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 906
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 907
-- On custom_tree shift to state 908
-- On c_keyword shift to state 85
-- On any_identifier_non_logic shift to state 910
-- On acsl_c_keyword shift to state 87
## Reductions:

State 902:
## Known stack suffix:
## TYPE
## LR(1) items:
custom_tree -> TYPE . type_spec [ RPAR EOF COMMA ]
is_acsl_decl_or_code_annot -> TYPE . [ RPAR LPAR EOF COMMA ]
## Transitions:
-- On VOID shift to state 128
-- On UNSIGNED shift to state 129
-- On UNION shift to state 130
-- On TYPENAME shift to state 131
-- On STRUCT shift to state 132
-- On SIGNED shift to state 135
-- On SHORT shift to state 143
-- On REAL shift to state 144
-- On LONG shift to state 145
-- On INTEGER shift to state 150
-- On INT shift to state 151
-- On FLOAT shift to state 152
-- On ENUM shift to state 153
-- On DOUBLE shift to state 156
-- On CHAR shift to state 157
-- On BOOLEAN shift to state 158
-- On BOOL shift to state 159
-- On type_spec shift to state 903
## Reductions:
-- On RPAR LPAR EOF COMMA
--   reduce production is_acsl_decl_or_code_annot -> TYPE

State 903:
## Known stack suffix:
## TYPE type_spec
## LR(1) items:
custom_tree -> TYPE type_spec . [ RPAR EOF COMMA ]
## Transitions:
## Reductions:
-- On RPAR EOF COMMA
--   reduce production custom_tree -> TYPE type_spec

State 904:
## Known stack suffix:
## LOGIC
## LR(1) items:
custom_tree -> LOGIC . lexpr [ RPAR EOF COMMA ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 905
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 905:
## Known stack suffix:
## LOGIC lexpr
## LR(1) items:
custom_tree -> LOGIC lexpr . [ RPAR EOF COMMA ]
lexpr -> lexpr . IMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . IFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . OR lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AND lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HATHAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . AMP lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . PIPE lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . HAT lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIMPLIES lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . BIFF lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
lexpr -> lexpr . QUESTION lexpr COLON2 lexpr [ RPAR QUESTION PIPE OR IMPLIES IFF HATHAT HAT EOF COMMA BIMPLIES BIFF AND AMP ]
## Transitions:
-- On QUESTION shift to state 322
-- On PIPE shift to state 324
-- On OR shift to state 335
-- On IMPLIES shift to state 345
-- On IFF shift to state 351
-- On HATHAT shift to state 337
-- On HAT shift to state 326
-- On BIMPLIES shift to state 339
-- On BIFF shift to state 347
-- On AND shift to state 349
-- On AMP shift to state 328
## Reductions:
-- On RPAR EOF COMMA
--   reduce production custom_tree -> LOGIC lexpr

State 906:
## Known stack suffix:
## non_logic_keyword
## LR(1) items:
any_identifier_non_logic -> non_logic_keyword . [ RPAR LPAR EOF COMMA ]
## Transitions:
## Reductions:
-- On RPAR LPAR EOF COMMA
--   reduce production any_identifier_non_logic -> non_logic_keyword

State 907:
## Known stack suffix:
## identifier_or_typename
## LR(1) items:
any_identifier_non_logic -> identifier_or_typename . [ RPAR LPAR EOF COMMA ]
## Transitions:
## Reductions:
-- On RPAR LPAR EOF COMMA
--   reduce production any_identifier_non_logic -> identifier_or_typename

State 908:
## Known stack suffix:
## CUSTOM any_identifier COLON custom_tree
## LR(1) items:
annot -> CUSTOM any_identifier COLON custom_tree . EOF [ # ]
## Transitions:
-- On EOF shift to state 909
## Reductions:

State 909:
## Known stack suffix:
## CUSTOM any_identifier COLON custom_tree EOF
## LR(1) items:
annot -> CUSTOM any_identifier COLON custom_tree EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production annot -> CUSTOM any_identifier COLON custom_tree EOF

State 910:
## Known stack suffix:
## any_identifier_non_logic
## LR(1) items:
custom_tree -> any_identifier_non_logic . [ RPAR EOF COMMA ]
custom_tree -> any_identifier_non_logic . LPAR custom_tree_list RPAR [ RPAR EOF COMMA ]
## Transitions:
-- On LPAR shift to state 911
## Reductions:
-- On RPAR EOF COMMA
--   reduce production custom_tree -> any_identifier_non_logic

State 911:
## Known stack suffix:
## any_identifier_non_logic LPAR
## LR(1) items:
custom_tree -> any_identifier_non_logic LPAR . custom_tree_list RPAR [ RPAR EOF COMMA ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 902
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 904
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 906
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 907
-- On custom_tree_list shift to state 912
-- On custom_tree shift to state 914
-- On c_keyword shift to state 85
-- On any_identifier_non_logic shift to state 910
-- On acsl_c_keyword shift to state 87
## Reductions:

State 912:
## Known stack suffix:
## any_identifier_non_logic LPAR custom_tree_list
## LR(1) items:
custom_tree -> any_identifier_non_logic LPAR custom_tree_list . RPAR [ RPAR EOF COMMA ]
## Transitions:
-- On RPAR shift to state 913
## Reductions:

State 913:
## Known stack suffix:
## any_identifier_non_logic LPAR custom_tree_list RPAR
## LR(1) items:
custom_tree -> any_identifier_non_logic LPAR custom_tree_list RPAR . [ RPAR EOF COMMA ]
## Transitions:
## Reductions:
-- On RPAR EOF COMMA
--   reduce production custom_tree -> any_identifier_non_logic LPAR custom_tree_list RPAR

State 914:
## Known stack suffix:
## custom_tree
## LR(1) items:
custom_tree_list -> custom_tree . [ RPAR ]
custom_tree_list -> custom_tree . COMMA custom_tree_list [ RPAR ]
## Transitions:
-- On COMMA shift to state 915
## Reductions:
-- On RPAR
--   reduce production custom_tree_list -> custom_tree

State 915:
## Known stack suffix:
## custom_tree COMMA
## LR(1) items:
custom_tree_list -> custom_tree COMMA . custom_tree_list [ RPAR ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 902
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 904
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 906
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 907
-- On custom_tree_list shift to state 916
-- On custom_tree shift to state 914
-- On c_keyword shift to state 85
-- On any_identifier_non_logic shift to state 910
-- On acsl_c_keyword shift to state 87
## Reductions:

State 916:
## Known stack suffix:
## custom_tree COMMA custom_tree_list
## LR(1) items:
custom_tree_list -> custom_tree COMMA custom_tree_list . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production custom_tree_list -> custom_tree COMMA custom_tree_list

State 917:
## Known stack suffix:
## AXIOMATIC
## LR(1) items:
logic_def -> AXIOMATIC . any_identifier LBRACE logic_decls RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 918
-- On acsl_c_keyword shift to state 87
## Reductions:

State 918:
## Known stack suffix:
## AXIOMATIC any_identifier
## LR(1) items:
logic_def -> AXIOMATIC any_identifier . LBRACE logic_decls RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On LBRACE shift to state 919
## Reductions:

State 919:
## Known stack suffix:
## AXIOMATIC any_identifier LBRACE
## LR(1) items:
logic_def -> AXIOMATIC any_identifier LBRACE . logic_decls RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On TYPE shift to state 920
-- On PREDICATE shift to state 923
-- On LOGIC shift to state 930
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 936
-- On logic_def shift to state 941
-- On logic_decls shift to state 942
-- On logic_decl_loc shift to state 944
-- On logic_decl shift to state 946
## Reductions:
-- On RBRACE
--   reduce production logic_decls ->

State 920:
## Known stack suffix:
## TYPE
## LR(1) items:
logic_decl -> TYPE . poly_id_type SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> TYPE . poly_id_type_add_typename EQUAL typedef SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type_add_typename shift to state 590
-- On poly_id_type shift to state 921
-- On full_identifier shift to state 620
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 921:
## Known stack suffix:
## TYPE poly_id_type
## LR(1) items:
logic_decl -> TYPE poly_id_type . SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
poly_id_type_add_typename -> poly_id_type . [ EQUAL ]
## Transitions:
-- On SEMICOLON shift to state 922
## Reductions:
-- On EQUAL
--   reduce production poly_id_type_add_typename -> poly_id_type

State 922:
## Known stack suffix:
## TYPE poly_id_type SEMICOLON
## LR(1) items:
logic_decl -> TYPE poly_id_type SEMICOLON . [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM
--   reduce production logic_decl -> TYPE poly_id_type SEMICOLON

State 923:
## Known stack suffix:
## PREDICATE
## LR(1) items:
logic_decl -> PREDICATE . poly_id opt_parameters reads_clause SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> PREDICATE . poly_id opt_parameters EQUAL full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 924
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 924:
## Known stack suffix:
## PREDICATE poly_id
## LR(1) items:
logic_decl -> PREDICATE poly_id . opt_parameters reads_clause SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> PREDICATE poly_id . opt_parameters EQUAL full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On LPAR shift to state 636
-- On parameters shift to state 645
-- On opt_parameters shift to state 925
## Reductions:
-- On SEMICOLON READS EQUAL
--   reduce production opt_parameters ->

State 925:
## Known stack suffix:
## PREDICATE poly_id opt_parameters
## LR(1) items:
logic_decl -> PREDICATE poly_id opt_parameters . reads_clause SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> PREDICATE poly_id opt_parameters . EQUAL full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On READS shift to state 926
-- On EQUAL shift to state 648
-- On reads_clause shift to state 928
## Reductions:
-- On SEMICOLON
--   reduce production reads_clause ->

State 926:
## Known stack suffix:
## READS
## LR(1) items:
reads_clause -> READS . zones [ SEMICOLON ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 6
-- On VALID_RANGE shift to state 91
-- On VALID_INDEX shift to state 94
-- On VALID_FUNCTION shift to state 97
-- On VALID shift to state 99
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 102
-- On TYPEOF shift to state 103
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 105
-- On TILDE shift to state 106
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 107
-- On STATIC shift to state 199
-- On STAR shift to state 109
-- On SLICE shift to state 15
-- On SIZEOF shift to state 200
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 203
-- On RETURNS shift to state 19
-- On RESULT shift to state 205
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 206
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 207
-- On OLD shift to state 208
-- On OFFSET shift to state 210
-- On NULL shift to state 213
-- On NOTHING shift to state 686
-- On NOT shift to state 214
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 216
-- On LSQUAREPIPE shift to state 217
-- On LPAR shift to state 218
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 221
-- On LEMMA shift to state 30
-- On LBRACE shift to state 227
-- On LAMBDA shift to state 229
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 252
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 254
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 257
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FRESH shift to state 258
-- On FREES shift to state 42
-- On FREEABLE shift to state 262
-- On FORALL shift to state 265
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 268
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 269
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 272
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 273
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 274
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 163
-- On CONSTANT shift to state 164
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 277
-- On BSTYPE shift to state 279
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 285
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 288
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 291
-- On AT shift to state 292
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On AMP shift to state 294
-- On ALLOCATION shift to state 295
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 298
-- On zones shift to state 927
-- On string shift to state 301
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On ne_zones shift to state 689
-- On ne_lexpr_list shift to state 569
-- On lexpr_rel shift to state 304
-- On lexpr_inner shift to state 305
-- On lexpr_end_rel shift to state 319
-- On lexpr_binder shift to state 320
-- On lexpr shift to state 334
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On identifier shift to state 330
-- On constant shift to state 341
-- On c_keyword shift to state 85
-- On any_identifier shift to state 342
-- On acsl_c_keyword shift to state 87
## Reductions:

State 927:
## Known stack suffix:
## READS zones
## LR(1) items:
reads_clause -> READS zones . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production reads_clause -> READS zones

State 928:
## Known stack suffix:
## PREDICATE poly_id opt_parameters reads_clause
## LR(1) items:
logic_decl -> PREDICATE poly_id opt_parameters reads_clause . SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 929
## Reductions:

State 929:
## Known stack suffix:
## PREDICATE poly_id opt_parameters reads_clause SEMICOLON
## LR(1) items:
logic_decl -> PREDICATE poly_id opt_parameters reads_clause SEMICOLON . [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM
--   reduce production logic_decl -> PREDICATE poly_id opt_parameters reads_clause SEMICOLON

State 930:
## Known stack suffix:
## LOGIC
## LR(1) items:
logic_decl -> LOGIC . full_logic_rt_type poly_id opt_parameters reads_clause SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> LOGIC . full_logic_rt_type poly_id opt_parameters EQUAL full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On full_logic_rt_type shift to state 931
-- On enter_kw_c_mode shift to state 722
## Reductions:
-- On VOID UNSIGNED UNION TYPENAME STRUCT SIGNED SHORT REAL LONG INTEGER INT IDENTIFIER FLOAT ENUM DOUBLE CHAR BOOLEAN BOOL
--   reduce production enter_kw_c_mode ->

State 931:
## Known stack suffix:
## LOGIC full_logic_rt_type
## LR(1) items:
logic_decl -> LOGIC full_logic_rt_type . poly_id opt_parameters reads_clause SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> LOGIC full_logic_rt_type . poly_id opt_parameters EQUAL full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 932
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 932:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id
## LR(1) items:
logic_decl -> LOGIC full_logic_rt_type poly_id . opt_parameters reads_clause SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> LOGIC full_logic_rt_type poly_id . opt_parameters EQUAL full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On LPAR shift to state 636
-- On parameters shift to state 645
-- On opt_parameters shift to state 933
## Reductions:
-- On SEMICOLON READS EQUAL
--   reduce production opt_parameters ->

State 933:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters
## LR(1) items:
logic_decl -> LOGIC full_logic_rt_type poly_id opt_parameters . reads_clause SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
logic_def -> LOGIC full_logic_rt_type poly_id opt_parameters . EQUAL full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On READS shift to state 926
-- On EQUAL shift to state 719
-- On reads_clause shift to state 934
## Reductions:
-- On SEMICOLON
--   reduce production reads_clause ->

State 934:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters reads_clause
## LR(1) items:
logic_decl -> LOGIC full_logic_rt_type poly_id opt_parameters reads_clause . SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 935
## Reductions:

State 935:
## Known stack suffix:
## LOGIC full_logic_rt_type poly_id opt_parameters reads_clause SEMICOLON
## LR(1) items:
logic_decl -> LOGIC full_logic_rt_type poly_id opt_parameters reads_clause SEMICOLON . [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM
--   reduce production logic_decl -> LOGIC full_logic_rt_type poly_id opt_parameters reads_clause SEMICOLON

State 936:
## Known stack suffix:
## AXIOM
## LR(1) items:
logic_decl -> AXIOM . poly_id COLON full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 937
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 937:
## Known stack suffix:
## AXIOM poly_id
## LR(1) items:
logic_decl -> AXIOM poly_id . COLON full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 938
## Reductions:

State 938:
## Known stack suffix:
## AXIOM poly_id COLON
## LR(1) items:
logic_decl -> AXIOM poly_id COLON . full_lexpr SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 939
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 939:
## Known stack suffix:
## AXIOM poly_id COLON full_lexpr
## LR(1) items:
logic_decl -> AXIOM poly_id COLON full_lexpr . SEMICOLON [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 940
## Reductions:

State 940:
## Known stack suffix:
## AXIOM poly_id COLON full_lexpr SEMICOLON
## LR(1) items:
logic_decl -> AXIOM poly_id COLON full_lexpr SEMICOLON . [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM
--   reduce production logic_decl -> AXIOM poly_id COLON full_lexpr SEMICOLON

State 941:
## Known stack suffix:
## logic_def
## LR(1) items:
logic_decl -> logic_def . [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM
--   reduce production logic_decl -> logic_def

State 942:
## Known stack suffix:
## AXIOMATIC any_identifier LBRACE logic_decls
## LR(1) items:
logic_def -> AXIOMATIC any_identifier LBRACE logic_decls . RBRACE [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On RBRACE shift to state 943
## Reductions:

State 943:
## Known stack suffix:
## AXIOMATIC any_identifier LBRACE logic_decls RBRACE
## LR(1) items:
logic_def -> AXIOMATIC any_identifier LBRACE logic_decls RBRACE . [ VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE RBRACE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production logic_def -> AXIOMATIC any_identifier LBRACE logic_decls RBRACE

State 944:
## Known stack suffix:
## logic_decl_loc
## LR(1) items:
logic_decls -> logic_decl_loc . logic_decls [ RBRACE ]
## Transitions:
-- On TYPE shift to state 920
-- On PREDICATE shift to state 923
-- On LOGIC shift to state 930
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 936
-- On logic_def shift to state 941
-- On logic_decls shift to state 945
-- On logic_decl_loc shift to state 944
-- On logic_decl shift to state 946
## Reductions:
-- On RBRACE
--   reduce production logic_decls ->

State 945:
## Known stack suffix:
## logic_decl_loc logic_decls
## LR(1) items:
logic_decls -> logic_decl_loc logic_decls . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production logic_decls -> logic_decl_loc logic_decls

State 946:
## Known stack suffix:
## logic_decl
## LR(1) items:
logic_decl_loc -> logic_decl . [ TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On TYPE RBRACE PREDICATE LOGIC LEMMA INDUCTIVE AXIOMATIC AXIOM
--   reduce production logic_decl_loc -> logic_decl

State 947:
## Known stack suffix:
## AXIOM
## LR(1) items:
deprecated_logic_decl -> AXIOM . poly_id COLON full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On poly_id_type shift to state 634
-- On poly_id shift to state 948
-- On full_identifier shift to state 651
-- On enter_kw_c_mode shift to state 603
## Reductions:
-- On IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 948:
## Known stack suffix:
## AXIOM poly_id
## LR(1) items:
deprecated_logic_decl -> AXIOM poly_id . COLON full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 949
## Reductions:

State 949:
## Known stack suffix:
## AXIOM poly_id COLON
## LR(1) items:
deprecated_logic_decl -> AXIOM poly_id COLON . full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 950
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 950:
## Known stack suffix:
## AXIOM poly_id COLON full_lexpr
## LR(1) items:
deprecated_logic_decl -> AXIOM poly_id COLON full_lexpr . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 951
## Reductions:

State 951:
## Known stack suffix:
## AXIOM poly_id COLON full_lexpr SEMICOLON
## LR(1) items:
deprecated_logic_decl -> AXIOM poly_id COLON full_lexpr SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production deprecated_logic_decl -> AXIOM poly_id COLON full_lexpr SEMICOLON

State 952:
## Known stack suffix:
## ASSERT
## LR(1) items:
code_annotation -> ASSERT . full_lexpr SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On full_lexpr shift to state 953
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 953:
## Known stack suffix:
## ASSERT full_lexpr
## LR(1) items:
code_annotation -> ASSERT full_lexpr . SEMICOLON [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
-- On SEMICOLON shift to state 954
## Reductions:

State 954:
## Known stack suffix:
## ASSERT full_lexpr SEMICOLON
## LR(1) items:
code_annotation -> ASSERT full_lexpr SEMICOLON . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production code_annotation -> ASSERT full_lexpr SEMICOLON

State 955:
## Known stack suffix:
## type_annot
## LR(1) items:
decl -> type_annot . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production decl -> type_annot

State 956:
## Known stack suffix:
## slice_pragma
## LR(1) items:
code_annotation -> slice_pragma . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production code_annotation -> slice_pragma

State 957:
## Known stack suffix:
## model_annot
## LR(1) items:
decl -> model_annot . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production decl -> model_annot

State 958:
## Known stack suffix:
## loop_annotations
## LR(1) items:
annotation -> loop_annotations . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production annotation -> loop_annotations

State 959:
## Known stack suffix:
## loop_annot_stack
## LR(1) items:
loop_annotations -> loop_annot_stack . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production loop_annotations -> loop_annot_stack

State 960:
## Known stack suffix:
## logic_def
## LR(1) items:
decl -> logic_def . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production decl -> logic_def

State 961:
## Known stack suffix:
## is_spec
## LR(1) items:
annot -> is_spec . any EOF [ # ]
## Transitions:
-- On WRITES shift to state 1
-- On WITH shift to state 962
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 963
-- On VALID_RANGE shift to state 964
-- On VALID_INDEX shift to state 965
-- On VALID_FUNCTION shift to state 966
-- On VALID shift to state 967
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 968
-- On TYPEOF shift to state 969
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 970
-- On TILDE shift to state 971
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 972
-- On STATIC shift to state 14
-- On STARHAT shift to state 973
-- On STAR shift to state 974
-- On SLICE shift to state 15
-- On SLASH shift to state 975
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 976
-- On SEMICOLON shift to state 977
-- On RSQUAREPIPE shift to state 978
-- On RSQUARE shift to state 979
-- On RPAR shift to state 980
-- On RETURNS shift to state 19
-- On RESULT shift to state 981
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 982
-- On REAL shift to state 21
-- On READS shift to state 22
-- On RBRACE shift to state 983
-- On QUESTION shift to state 984
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 985
-- On PIPE shift to state 986
-- On PERCENT shift to state 987
-- On OR shift to state 988
-- On OLD shift to state 989
-- On OFFSET shift to state 990
-- On NULL shift to state 991
-- On NOTHING shift to state 992
-- On NOT shift to state 993
-- On NE shift to state 994
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 995
-- On LTLT shift to state 996
-- On LTCOLON shift to state 997
-- On LT shift to state 998
-- On LSQUAREPIPE shift to state 999
-- On LSQUARE shift to state 1000
-- On LPAR shift to state 1001
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 1002
-- On LEMMA shift to state 30
-- On LE shift to state 1003
-- On LBRACE shift to state 1004
-- On LAMBDA shift to state 1005
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 1006
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 1007
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPLIES shift to state 1008
-- On IMPACT shift to state 37
-- On IFF shift to state 1009
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On HATHAT shift to state 1010
-- On HAT shift to state 1011
-- On GTGT shift to state 1012
-- On GT shift to state 1013
-- On GLOBAL shift to state 40
-- On GHOST shift to state 1014
-- On GE shift to state 1015
-- On FUNCTION shift to state 41
-- On FROM shift to state 1016
-- On FRESH shift to state 1017
-- On FREES shift to state 42
-- On FREEABLE shift to state 1018
-- On FORALL shift to state 1019
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 1020
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 1021
-- On EQUAL shift to state 1022
-- On EQ shift to state 1023
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 1024
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 1025
-- On DOUBLE shift to state 51
-- On DOTDOTDOT shift to state 1026
-- On DOTDOT shift to state 1027
-- On DOT shift to state 1028
-- On DOLLAR shift to state 1029
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 1030
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 1031
-- On CONSTANT shift to state 1032
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On COMMA shift to state 1033
-- On COLONGT shift to state 1034
-- On COLONCOLON shift to state 1035
-- On COLON2 shift to state 1036
-- On COLON shift to state 1037
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 1038
-- On BSTYPE shift to state 1039
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 1040
-- On BIMPLIES shift to state 1041
-- On BIFF shift to state 1042
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 1043
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 1044
-- On AT shift to state 1045
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ARROW shift to state 1046
-- On AND shift to state 1047
-- On AMP shift to state 1048
-- On ALLOCATION shift to state 1049
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 1050
-- On wildcard shift to state 1051
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On bs_keyword shift to state 1052
-- On any_identifier shift to state 1053
-- On any shift to state 1055
-- On acsl_c_keyword shift to state 87
## Reductions:

State 962:
## Known stack suffix:
## WITH
## LR(1) items:
bs_keyword -> WITH . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> WITH

State 963:
## Known stack suffix:
## VALID_READ
## LR(1) items:
bs_keyword -> VALID_READ . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> VALID_READ

State 964:
## Known stack suffix:
## VALID_RANGE
## LR(1) items:
bs_keyword -> VALID_RANGE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> VALID_RANGE

State 965:
## Known stack suffix:
## VALID_INDEX
## LR(1) items:
bs_keyword -> VALID_INDEX . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> VALID_INDEX

State 966:
## Known stack suffix:
## VALID_FUNCTION
## LR(1) items:
bs_keyword -> VALID_FUNCTION . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> VALID_FUNCTION

State 967:
## Known stack suffix:
## VALID
## LR(1) items:
bs_keyword -> VALID . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> VALID

State 968:
## Known stack suffix:
## UNALLOCATED
## LR(1) items:
bs_keyword -> UNALLOCATED . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> UNALLOCATED

State 969:
## Known stack suffix:
## TYPEOF
## LR(1) items:
bs_keyword -> TYPEOF . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> TYPEOF

State 970:
## Known stack suffix:
## TRUE
## LR(1) items:
bs_keyword -> TRUE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> TRUE

State 971:
## Known stack suffix:
## TILDE
## LR(1) items:
wildcard -> TILDE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> TILDE

State 972:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
wildcard -> STRING_LITERAL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> STRING_LITERAL

State 973:
## Known stack suffix:
## STARHAT
## LR(1) items:
wildcard -> STARHAT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> STARHAT

State 974:
## Known stack suffix:
## STAR
## LR(1) items:
wildcard -> STAR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> STAR

State 975:
## Known stack suffix:
## SLASH
## LR(1) items:
wildcard -> SLASH . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> SLASH

State 976:
## Known stack suffix:
## SEPARATED
## LR(1) items:
bs_keyword -> SEPARATED . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> SEPARATED

State 977:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
wildcard -> SEMICOLON . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> SEMICOLON

State 978:
## Known stack suffix:
## RSQUAREPIPE
## LR(1) items:
wildcard -> RSQUAREPIPE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> RSQUAREPIPE

State 979:
## Known stack suffix:
## RSQUARE
## LR(1) items:
wildcard -> RSQUARE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> RSQUARE

State 980:
## Known stack suffix:
## RPAR
## LR(1) items:
wildcard -> RPAR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> RPAR

State 981:
## Known stack suffix:
## RESULT
## LR(1) items:
bs_keyword -> RESULT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> RESULT

State 982:
## Known stack suffix:
## REGISTER
## LR(1) items:
bs_keyword -> REGISTER . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> REGISTER

State 983:
## Known stack suffix:
## RBRACE
## LR(1) items:
wildcard -> RBRACE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> RBRACE

State 984:
## Known stack suffix:
## QUESTION
## LR(1) items:
wildcard -> QUESTION . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> QUESTION

State 985:
## Known stack suffix:
## PLUS
## LR(1) items:
wildcard -> PLUS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> PLUS

State 986:
## Known stack suffix:
## PIPE
## LR(1) items:
wildcard -> PIPE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> PIPE

State 987:
## Known stack suffix:
## PERCENT
## LR(1) items:
wildcard -> PERCENT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> PERCENT

State 988:
## Known stack suffix:
## OR
## LR(1) items:
wildcard -> OR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> OR

State 989:
## Known stack suffix:
## OLD
## LR(1) items:
bs_keyword -> OLD . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> OLD

State 990:
## Known stack suffix:
## OFFSET
## LR(1) items:
bs_keyword -> OFFSET . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> OFFSET

State 991:
## Known stack suffix:
## NULL
## LR(1) items:
bs_keyword -> NULL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> NULL

State 992:
## Known stack suffix:
## NOTHING
## LR(1) items:
bs_keyword -> NOTHING . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> NOTHING

State 993:
## Known stack suffix:
## NOT
## LR(1) items:
wildcard -> NOT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> NOT

State 994:
## Known stack suffix:
## NE
## LR(1) items:
wildcard -> NE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> NE

State 995:
## Known stack suffix:
## MINUS
## LR(1) items:
wildcard -> MINUS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> MINUS

State 996:
## Known stack suffix:
## LTLT
## LR(1) items:
wildcard -> LTLT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LTLT

State 997:
## Known stack suffix:
## LTCOLON
## LR(1) items:
wildcard -> LTCOLON . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LTCOLON

State 998:
## Known stack suffix:
## LT
## LR(1) items:
wildcard -> LT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LT

State 999:
## Known stack suffix:
## LSQUAREPIPE
## LR(1) items:
wildcard -> LSQUAREPIPE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LSQUAREPIPE

State 1000:
## Known stack suffix:
## LSQUARE
## LR(1) items:
wildcard -> LSQUARE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LSQUARE

State 1001:
## Known stack suffix:
## LPAR
## LR(1) items:
wildcard -> LPAR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LPAR

State 1002:
## Known stack suffix:
## LET
## LR(1) items:
bs_keyword -> LET . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> LET

State 1003:
## Known stack suffix:
## LE
## LR(1) items:
wildcard -> LE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LE

State 1004:
## Known stack suffix:
## LBRACE
## LR(1) items:
wildcard -> LBRACE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> LBRACE

State 1005:
## Known stack suffix:
## LAMBDA
## LR(1) items:
bs_keyword -> LAMBDA . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> LAMBDA

State 1006:
## Known stack suffix:
## INTER
## LR(1) items:
bs_keyword -> INTER . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> INTER

State 1007:
## Known stack suffix:
## INITIALIZED
## LR(1) items:
bs_keyword -> INITIALIZED . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> INITIALIZED

State 1008:
## Known stack suffix:
## IMPLIES
## LR(1) items:
wildcard -> IMPLIES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> IMPLIES

State 1009:
## Known stack suffix:
## IFF
## LR(1) items:
wildcard -> IFF . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> IFF

State 1010:
## Known stack suffix:
## HATHAT
## LR(1) items:
wildcard -> HATHAT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> HATHAT

State 1011:
## Known stack suffix:
## HAT
## LR(1) items:
wildcard -> HAT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> HAT

State 1012:
## Known stack suffix:
## GTGT
## LR(1) items:
wildcard -> GTGT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> GTGT

State 1013:
## Known stack suffix:
## GT
## LR(1) items:
wildcard -> GT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> GT

State 1014:
## Known stack suffix:
## GHOST
## LR(1) items:
wildcard -> GHOST . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> GHOST

State 1015:
## Known stack suffix:
## GE
## LR(1) items:
wildcard -> GE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> GE

State 1016:
## Known stack suffix:
## FROM
## LR(1) items:
bs_keyword -> FROM . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> FROM

State 1017:
## Known stack suffix:
## FRESH
## LR(1) items:
bs_keyword -> FRESH . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> FRESH

State 1018:
## Known stack suffix:
## FREEABLE
## LR(1) items:
bs_keyword -> FREEABLE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> FREEABLE

State 1019:
## Known stack suffix:
## FORALL
## LR(1) items:
bs_keyword -> FORALL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> FORALL

State 1020:
## Known stack suffix:
## FALSE
## LR(1) items:
bs_keyword -> FALSE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> FALSE

State 1021:
## Known stack suffix:
## EXISTS
## LR(1) items:
wildcard -> EXISTS . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> EXISTS

State 1022:
## Known stack suffix:
## EQUAL
## LR(1) items:
wildcard -> EQUAL . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> EQUAL

State 1023:
## Known stack suffix:
## EQ
## LR(1) items:
wildcard -> EQ . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> EQ

State 1024:
## Known stack suffix:
## EMPTY
## LR(1) items:
bs_keyword -> EMPTY . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> EMPTY

State 1025:
## Known stack suffix:
## DYNAMIC
## LR(1) items:
bs_keyword -> DYNAMIC . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> DYNAMIC

State 1026:
## Known stack suffix:
## DOTDOTDOT
## LR(1) items:
wildcard -> DOTDOTDOT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> DOTDOTDOT

State 1027:
## Known stack suffix:
## DOTDOT
## LR(1) items:
wildcard -> DOTDOT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> DOTDOT

State 1028:
## Known stack suffix:
## DOT
## LR(1) items:
wildcard -> DOT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> DOT

State 1029:
## Known stack suffix:
## DOLLAR
## LR(1) items:
wildcard -> DOLLAR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> DOLLAR

State 1030:
## Known stack suffix:
## DANGLING
## LR(1) items:
bs_keyword -> DANGLING . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> DANGLING

State 1031:
## Known stack suffix:
## CONSTANT10
## LR(1) items:
wildcard -> CONSTANT10 . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> CONSTANT10

State 1032:
## Known stack suffix:
## CONSTANT
## LR(1) items:
wildcard -> CONSTANT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> CONSTANT

State 1033:
## Known stack suffix:
## COMMA
## LR(1) items:
wildcard -> COMMA . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> COMMA

State 1034:
## Known stack suffix:
## COLONGT
## LR(1) items:
wildcard -> COLONGT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> COLONGT

State 1035:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
wildcard -> COLONCOLON . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> COLONCOLON

State 1036:
## Known stack suffix:
## COLON2
## LR(1) items:
wildcard -> COLON2 . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> COLON2

State 1037:
## Known stack suffix:
## COLON
## LR(1) items:
wildcard -> COLON . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> COLON

State 1038:
## Known stack suffix:
## BSUNION
## LR(1) items:
bs_keyword -> BSUNION . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> BSUNION

State 1039:
## Known stack suffix:
## BSTYPE
## LR(1) items:
bs_keyword -> BSTYPE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> BSTYPE

State 1040:
## Known stack suffix:
## BLOCK_LENGTH
## LR(1) items:
bs_keyword -> BLOCK_LENGTH . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> BLOCK_LENGTH

State 1041:
## Known stack suffix:
## BIMPLIES
## LR(1) items:
wildcard -> BIMPLIES . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> BIMPLIES

State 1042:
## Known stack suffix:
## BIFF
## LR(1) items:
wildcard -> BIFF . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> BIFF

State 1043:
## Known stack suffix:
## BASE_ADDR
## LR(1) items:
bs_keyword -> BASE_ADDR . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> BASE_ADDR

State 1044:
## Known stack suffix:
## AUTOMATIC
## LR(1) items:
bs_keyword -> AUTOMATIC . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> AUTOMATIC

State 1045:
## Known stack suffix:
## AT
## LR(1) items:
bs_keyword -> AT . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> AT

State 1046:
## Known stack suffix:
## ARROW
## LR(1) items:
wildcard -> ARROW . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> ARROW

State 1047:
## Known stack suffix:
## AND
## LR(1) items:
wildcard -> AND . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> AND

State 1048:
## Known stack suffix:
## AMP
## LR(1) items:
wildcard -> AMP . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> AMP

State 1049:
## Known stack suffix:
## ALLOCATION
## LR(1) items:
bs_keyword -> ALLOCATION . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> ALLOCATION

State 1050:
## Known stack suffix:
## ALLOCABLE
## LR(1) items:
bs_keyword -> ALLOCABLE . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production bs_keyword -> ALLOCABLE

State 1051:
## Known stack suffix:
## wildcard
## LR(1) items:
any -> wildcard . [ EOF ]
any -> wildcard . any [ EOF ]
## Transitions:
-- On WRITES shift to state 1
-- On WITH shift to state 962
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On VALID_READ shift to state 963
-- On VALID_RANGE shift to state 964
-- On VALID_INDEX shift to state 965
-- On VALID_FUNCTION shift to state 966
-- On VALID shift to state 967
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On UNALLOCATED shift to state 968
-- On TYPEOF shift to state 969
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TRUE shift to state 970
-- On TILDE shift to state 971
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STRING_LITERAL shift to state 972
-- On STATIC shift to state 14
-- On STARHAT shift to state 973
-- On STAR shift to state 974
-- On SLICE shift to state 15
-- On SLASH shift to state 975
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On SEPARATED shift to state 976
-- On SEMICOLON shift to state 977
-- On RSQUAREPIPE shift to state 978
-- On RSQUARE shift to state 979
-- On RPAR shift to state 980
-- On RETURNS shift to state 19
-- On RESULT shift to state 981
-- On REQUIRES shift to state 20
-- On REGISTER shift to state 982
-- On REAL shift to state 21
-- On READS shift to state 22
-- On RBRACE shift to state 983
-- On QUESTION shift to state 984
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On PLUS shift to state 985
-- On PIPE shift to state 986
-- On PERCENT shift to state 987
-- On OR shift to state 988
-- On OLD shift to state 989
-- On OFFSET shift to state 990
-- On NULL shift to state 991
-- On NOTHING shift to state 992
-- On NOT shift to state 993
-- On NE shift to state 994
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On MINUS shift to state 995
-- On LTLT shift to state 996
-- On LTCOLON shift to state 997
-- On LT shift to state 998
-- On LSQUAREPIPE shift to state 999
-- On LSQUARE shift to state 1000
-- On LPAR shift to state 1001
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LET shift to state 1002
-- On LEMMA shift to state 30
-- On LE shift to state 1003
-- On LBRACE shift to state 1004
-- On LAMBDA shift to state 1005
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTER shift to state 1006
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INITIALIZED shift to state 1007
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPLIES shift to state 1008
-- On IMPACT shift to state 37
-- On IFF shift to state 1009
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On HATHAT shift to state 1010
-- On HAT shift to state 1011
-- On GTGT shift to state 1012
-- On GT shift to state 1013
-- On GLOBAL shift to state 40
-- On GHOST shift to state 1014
-- On GE shift to state 1015
-- On FUNCTION shift to state 41
-- On FROM shift to state 1016
-- On FRESH shift to state 1017
-- On FREES shift to state 42
-- On FREEABLE shift to state 1018
-- On FORALL shift to state 1019
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On FALSE shift to state 1020
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On EXISTS shift to state 1021
-- On EQUAL shift to state 1022
-- On EQ shift to state 1023
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On EMPTY shift to state 1024
-- On ELSE shift to state 50
-- On DYNAMIC shift to state 1025
-- On DOUBLE shift to state 51
-- On DOTDOTDOT shift to state 1026
-- On DOTDOT shift to state 1027
-- On DOT shift to state 1028
-- On DOLLAR shift to state 1029
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On DANGLING shift to state 1030
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 1031
-- On CONSTANT shift to state 1032
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On COMMA shift to state 1033
-- On COLONGT shift to state 1034
-- On COLONCOLON shift to state 1035
-- On COLON2 shift to state 1036
-- On COLON shift to state 1037
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BSUNION shift to state 1038
-- On BSTYPE shift to state 1039
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BLOCK_LENGTH shift to state 1040
-- On BIMPLIES shift to state 1041
-- On BIFF shift to state 1042
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On BASE_ADDR shift to state 1043
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On AUTOMATIC shift to state 1044
-- On AT shift to state 1045
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ARROW shift to state 1046
-- On AND shift to state 1047
-- On AMP shift to state 1048
-- On ALLOCATION shift to state 1049
-- On ALLOCATES shift to state 71
-- On ALLOCABLE shift to state 1050
-- On wildcard shift to state 1051
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On bs_keyword shift to state 1052
-- On any_identifier shift to state 1053
-- On any shift to state 1054
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On EOF
--   reduce production any -> wildcard

State 1052:
## Known stack suffix:
## bs_keyword
## LR(1) items:
wildcard -> bs_keyword . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> bs_keyword

State 1053:
## Known stack suffix:
## any_identifier
## LR(1) items:
wildcard -> any_identifier . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ EOF ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production wildcard -> any_identifier

State 1054:
## Known stack suffix:
## wildcard any
## LR(1) items:
any -> wildcard any . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production any -> wildcard any

State 1055:
## Known stack suffix:
## is_spec any
## LR(1) items:
annot -> is_spec any . EOF [ # ]
## Transitions:
-- On EOF shift to state 1056
## Reductions:

State 1056:
## Known stack suffix:
## is_spec any EOF
## LR(1) items:
annot -> is_spec any EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production annot -> is_spec any EOF

State 1057:
## Known stack suffix:
## is_acsl_spec
## LR(1) items:
is_spec -> is_acsl_spec . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_spec -> is_acsl_spec

State 1058:
## Known stack suffix:
## impact_pragma
## LR(1) items:
code_annotation -> impact_pragma . [ VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE SLICE PREDICATE MODULE MODEL LOGIC LEMMA INVARIANT INDUCTIVE INCLUDE IMPACT GLOBAL FUNCTION FOR EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ASSERT
--   reduce production code_annotation -> impact_pragma

State 1059:
## Known stack suffix:
## grammar_extension_name
## LR(1) items:
is_spec -> grammar_extension_name . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production is_spec -> grammar_extension_name

State 1060:
## Known stack suffix:
## full_identifier_or_typename
## LR(1) items:
annotation -> full_identifier_or_typename . [ EOF ]
grammar_extension_name -> full_identifier_or_typename . [ WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production annotation -> full_identifier_or_typename
-- On WRITES WITH VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STARHAT STAR SLICE SLASH SIZEOF SIGNED SHORT SEPARATED SEMICOLON RSQUAREPIPE RSQUARE RPAR RETURNS RESULT REQUIRES REGISTER REAL READS RBRACE QUESTION PREDICATE PRAGMA PLUS PIPE PERCENT OR OLD OFFSET NULL NOTHING NOT NE MODULE MODEL MINUS LTLT LTCOLON LT LSQUAREPIPE LSQUARE LPAR LOOP LONG LOGIC LET LEMMA LE LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPLIES IMPACT IFF IF IDENTIFIER HATHAT HAT GTGT GT GLOBAL GHOST GE FUNCTION FROM FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS EQUAL EQ ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DOTDOTDOT DOTDOT DOT DOLLAR DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE COMMA COLONGT COLONCOLON COLON2 COLON CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BIMPLIES BIFF BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT ARROW AND AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production grammar_extension_name -> full_identifier_or_typename

State 1061:
## Known stack suffix:
## deprecated_logic_decl
## LR(1) items:
decl -> deprecated_logic_decl . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production decl -> deprecated_logic_decl

State 1062:
## Known stack suffix:
## decl_list
## LR(1) items:
annot -> decl_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 1063
## Reductions:

State 1063:
## Known stack suffix:
## decl_list EOF
## LR(1) items:
annot -> decl_list EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production annot -> decl_list EOF

State 1064:
## Known stack suffix:
## decl
## LR(1) items:
decl_list -> decl . [ EOF ]
decl_list -> decl . decl_list [ EOF ]
## Transitions:
-- On VOLATILE shift to state 2
-- On TYPE shift to state 570
-- On PREDICATE shift to state 633
-- On MODEL shift to state 658
-- On LOGIC shift to state 714
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On GLOBAL shift to state 755
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 947
-- On type_annot shift to state 955
-- On model_annot shift to state 957
-- On logic_def shift to state 960
-- On deprecated_logic_decl shift to state 1061
-- On decl_list shift to state 1065
-- On decl shift to state 1064
## Reductions:
-- On EOF
--   reduce production decl_list -> decl

State 1065:
## Known stack suffix:
## decl decl_list
## LR(1) items:
decl_list -> decl decl_list . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production decl_list -> decl decl_list

State 1066:
## Known stack suffix:
## code_annotation
## LR(1) items:
annotation -> code_annotation . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
annotation -> code_annotation . beg_code_annotation [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SLICE shift to state 1067
-- On INVARIANT shift to state 1068
-- On IMPACT shift to state 1069
-- On FOR shift to state 1070
-- On ASSERT shift to state 1071
-- On beg_code_annotation shift to state 1072
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production annotation -> code_annotation

State 1067:
## Known stack suffix:
## SLICE
## LR(1) items:
beg_code_annotation -> SLICE . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production beg_code_annotation -> SLICE

State 1068:
## Known stack suffix:
## INVARIANT
## LR(1) items:
beg_code_annotation -> INVARIANT . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production beg_code_annotation -> INVARIANT

State 1069:
## Known stack suffix:
## IMPACT
## LR(1) items:
beg_code_annotation -> IMPACT . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production beg_code_annotation -> IMPACT

State 1070:
## Known stack suffix:
## FOR
## LR(1) items:
beg_code_annotation -> FOR . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production beg_code_annotation -> FOR

State 1071:
## Known stack suffix:
## ASSERT
## LR(1) items:
beg_code_annotation -> ASSERT . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production beg_code_annotation -> ASSERT

State 1072:
## Known stack suffix:
## code_annotation beg_code_annotation
## LR(1) items:
annotation -> code_annotation beg_code_annotation . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production annotation -> code_annotation beg_code_annotation

State 1073:
## Known stack suffix:
## annotation
## LR(1) items:
annot -> annotation . EOF [ # ]
## Transitions:
-- On EOF shift to state 1074
## Reductions:

State 1074:
## Known stack suffix:
## annotation EOF
## LR(1) items:
annot -> annotation EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production annot -> annotation EOF

State 1075:
## Known stack suffix:
## annot
## LR(1) items:
annot' -> annot . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept annot

State 1076:
## Known stack suffix:
##
## LR(1) items:
ext_spec' -> . ext_spec [ # ]
## Transitions:
-- On VOLATILE shift to state 2
-- On TYPE shift to state 570
-- On PREDICATE shift to state 633
-- On MODEL shift to state 658
-- On LOGIC shift to state 714
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On INCLUDE shift to state 1077
-- On GLOBAL shift to state 1080
-- On EXT_LET shift to state 1086
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 947
-- On type_annot shift to state 955
-- On model_annot shift to state 957
-- On logic_def shift to state 960
-- On ext_spec shift to state 1091
-- On ext_global_clauses_opt shift to state 1092
-- On ext_global_clauses shift to state 1133
-- On ext_global_clause shift to state 1134
-- On deprecated_logic_decl shift to state 1061
-- On decl shift to state 1132
## Reductions:
-- On MODULE FUNCTION EXT_AT EOF CONTRACT
--   reduce production ext_global_clauses_opt ->

State 1077:
## Known stack suffix:
## INCLUDE
## LR(1) items:
ext_global_clause -> INCLUDE . string SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On STRING_LITERAL shift to state 107
-- On string shift to state 1078
## Reductions:

State 1078:
## Known stack suffix:
## INCLUDE string
## LR(1) items:
ext_global_clause -> INCLUDE string . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
string -> string . STRING_LITERAL [ STRING_LITERAL SEMICOLON ]
## Transitions:
-- On STRING_LITERAL shift to state 302
-- On SEMICOLON shift to state 1079
## Reductions:

State 1079:
## Known stack suffix:
## INCLUDE string SEMICOLON
## LR(1) items:
ext_global_clause -> INCLUDE string SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_global_clause -> INCLUDE string SEMICOLON

State 1080:
## Known stack suffix:
## GLOBAL
## LR(1) items:
decl -> GLOBAL . INVARIANT any_identifier COLON full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
ext_global_clause -> GLOBAL . EXT_LET any_identifier EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On INVARIANT shift to state 756
-- On EXT_LET shift to state 1081
## Reductions:

State 1081:
## Known stack suffix:
## GLOBAL EXT_LET
## LR(1) items:
ext_global_clause -> GLOBAL EXT_LET . any_identifier EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 1082
-- On acsl_c_keyword shift to state 87
## Reductions:

State 1082:
## Known stack suffix:
## GLOBAL EXT_LET any_identifier
## LR(1) items:
ext_global_clause -> GLOBAL EXT_LET any_identifier . EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On EQUAL shift to state 1083
## Reductions:

State 1083:
## Known stack suffix:
## GLOBAL EXT_LET any_identifier EQUAL
## LR(1) items:
ext_global_clause -> GLOBAL EXT_LET any_identifier EQUAL . full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 1084
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 1084:
## Known stack suffix:
## GLOBAL EXT_LET any_identifier EQUAL full_lexpr
## LR(1) items:
ext_global_clause -> GLOBAL EXT_LET any_identifier EQUAL full_lexpr . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 1085
## Reductions:

State 1085:
## Known stack suffix:
## GLOBAL EXT_LET any_identifier EQUAL full_lexpr SEMICOLON
## LR(1) items:
ext_global_clause -> GLOBAL EXT_LET any_identifier EQUAL full_lexpr SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_global_clause -> GLOBAL EXT_LET any_identifier EQUAL full_lexpr SEMICOLON

State 1086:
## Known stack suffix:
## EXT_LET
## LR(1) items:
ext_global_clause -> EXT_LET . any_identifier EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 1087
-- On acsl_c_keyword shift to state 87
## Reductions:

State 1087:
## Known stack suffix:
## EXT_LET any_identifier
## LR(1) items:
ext_global_clause -> EXT_LET any_identifier . EQUAL full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On EQUAL shift to state 1088
## Reductions:

State 1088:
## Known stack suffix:
## EXT_LET any_identifier EQUAL
## LR(1) items:
ext_global_clause -> EXT_LET any_identifier EQUAL . full_lexpr SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On full_lexpr shift to state 1089
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 1089:
## Known stack suffix:
## EXT_LET any_identifier EQUAL full_lexpr
## LR(1) items:
ext_global_clause -> EXT_LET any_identifier EQUAL full_lexpr . SEMICOLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On SEMICOLON shift to state 1090
## Reductions:

State 1090:
## Known stack suffix:
## EXT_LET any_identifier EQUAL full_lexpr SEMICOLON
## LR(1) items:
ext_global_clause -> EXT_LET any_identifier EQUAL full_lexpr SEMICOLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_global_clause -> EXT_LET any_identifier EQUAL full_lexpr SEMICOLON

State 1091:
## Known stack suffix:
## ext_spec
## LR(1) items:
ext_spec' -> ext_spec . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept ext_spec

State 1092:
## Known stack suffix:
## ext_global_clauses_opt
## LR(1) items:
ext_spec -> ext_global_clauses_opt . ext_module_specs_opt ext_global_specs_opt EOF [ # ]
## Transitions:
-- On FUNCTION shift to state 1093
-- On EXT_AT shift to state 1097
-- On CONTRACT shift to state 1104
-- On ext_module_specs_opt shift to state 1108
-- On ext_module_specs shift to state 1141
-- On ext_module_spec shift to state 1115
-- On ext_function_markup shift to state 1117
-- On ext_fun_specs shift to state 1142
-- On ext_fun_spec shift to state 1144
-- On ext_contract_markup shift to state 1124
-- On ext_at_stmt_markup shift to state 1146
## Reductions:
-- On MODULE EOF
--   reduce production ext_module_specs_opt ->

State 1093:
## Known stack suffix:
## FUNCTION
## LR(1) items:
ext_function_markup -> FUNCTION . ext_identifier COLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On ext_identifier shift to state 1094
-- On c_keyword shift to state 85
-- On any_identifier shift to state 1096
-- On acsl_c_keyword shift to state 87
## Reductions:

State 1094:
## Known stack suffix:
## FUNCTION ext_identifier
## LR(1) items:
ext_function_markup -> FUNCTION ext_identifier . COLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 1095
## Reductions:

State 1095:
## Known stack suffix:
## FUNCTION ext_identifier COLON
## LR(1) items:
ext_function_markup -> FUNCTION ext_identifier COLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_function_markup -> FUNCTION ext_identifier COLON

State 1096:
## Known stack suffix:
## any_identifier
## LR(1) items:
ext_identifier -> any_identifier . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production ext_identifier -> any_identifier

State 1097:
## Known stack suffix:
## EXT_AT
## LR(1) items:
ext_at_stmt_markup -> EXT_AT . stmt_markup_attr COLON [ TYPENAME SLICE MODULE LOOP INVARIANT IMPACT IDENTIFIER FUNCTION FOR EOF CONTRACT ASSERT ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 1098
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On stmt_markup_attr shift to state 1099
-- On stmt_markup shift to state 1101
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 1103
-- On acsl_c_keyword shift to state 87
## Reductions:

State 1098:
## Known stack suffix:
## CONSTANT10
## LR(1) items:
stmt_markup -> CONSTANT10 . [ WRITES VOLATILE VOID VARIANT UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SLICE SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE PRAGMA MODULE MODEL LOOP LONG LOGIC LEMMA LABEL INVARIANT INTEGER INT INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FREES FOR FLOAT EXT_LET EXT_AT EXITS ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CUSTOM CONTRACT CONTINUES CONSTANT10 CONST COMPLETE COLON CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ASSERT ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID VARIANT UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SLICE SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE PRAGMA MODULE MODEL LOOP LONG LOGIC LEMMA LABEL INVARIANT INTEGER INT INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FREES FOR FLOAT EXT_LET EXT_AT EXITS ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CUSTOM CONTRACT CONTINUES CONSTANT10 CONST COMPLETE COLON CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ASSERT ALLOCATES
--   reduce production stmt_markup -> CONSTANT10

State 1099:
## Known stack suffix:
## EXT_AT stmt_markup_attr
## LR(1) items:
ext_at_stmt_markup -> EXT_AT stmt_markup_attr . COLON [ TYPENAME SLICE MODULE LOOP INVARIANT IMPACT IDENTIFIER FUNCTION FOR EOF CONTRACT ASSERT ]
## Transitions:
-- On COLON shift to state 1100
## Reductions:

State 1100:
## Known stack suffix:
## EXT_AT stmt_markup_attr COLON
## LR(1) items:
ext_at_stmt_markup -> EXT_AT stmt_markup_attr COLON . [ TYPENAME SLICE MODULE LOOP INVARIANT IMPACT IDENTIFIER FUNCTION FOR EOF CONTRACT ASSERT ]
## Transitions:
## Reductions:
-- On TYPENAME SLICE MODULE LOOP INVARIANT IMPACT IDENTIFIER FUNCTION FOR EOF CONTRACT ASSERT
--   reduce production ext_at_stmt_markup -> EXT_AT stmt_markup_attr COLON

State 1101:
## Known stack suffix:
## stmt_markup
## LR(1) items:
stmt_markup_attr -> stmt_markup . [ COLON ]
stmt_markup_attr -> stmt_markup . stmt_markup_attr [ COLON ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONSTANT10 shift to state 1098
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On stmt_markup_attr shift to state 1102
-- On stmt_markup shift to state 1101
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On c_keyword shift to state 85
-- On any_identifier shift to state 1103
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On COLON
--   reduce production stmt_markup_attr -> stmt_markup

State 1102:
## Known stack suffix:
## stmt_markup stmt_markup_attr
## LR(1) items:
stmt_markup_attr -> stmt_markup stmt_markup_attr . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production stmt_markup_attr -> stmt_markup stmt_markup_attr

State 1103:
## Known stack suffix:
## any_identifier
## LR(1) items:
stmt_markup -> any_identifier . [ WRITES VOLATILE VOID VARIANT UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SLICE SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE PRAGMA MODULE MODEL LOOP LONG LOGIC LEMMA LABEL INVARIANT INTEGER INT INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FREES FOR FLOAT EXT_LET EXT_AT EXITS ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CUSTOM CONTRACT CONTINUES CONSTANT10 CONST COMPLETE COLON CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ASSERT ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID VARIANT UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SLICE SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE PRAGMA MODULE MODEL LOOP LONG LOGIC LEMMA LABEL INVARIANT INTEGER INT INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FREES FOR FLOAT EXT_LET EXT_AT EXITS ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CUSTOM CONTRACT CONTINUES CONSTANT10 CONST COMPLETE COLON CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSUMES ASSIGNS ASSERT ALLOCATES
--   reduce production stmt_markup -> any_identifier

State 1104:
## Known stack suffix:
## CONTRACT
## LR(1) items:
ext_contract_markup -> CONTRACT . ext_identifier_opt COLON [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On ext_identifier_opt shift to state 1105
-- On ext_identifier shift to state 1107
-- On c_keyword shift to state 85
-- On any_identifier shift to state 1096
-- On acsl_c_keyword shift to state 87
## Reductions:
-- On COLON
--   reduce production ext_identifier_opt ->

State 1105:
## Known stack suffix:
## CONTRACT ext_identifier_opt
## LR(1) items:
ext_contract_markup -> CONTRACT ext_identifier_opt . COLON [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
-- On COLON shift to state 1106
## Reductions:

State 1106:
## Known stack suffix:
## CONTRACT ext_identifier_opt COLON
## LR(1) items:
ext_contract_markup -> CONTRACT ext_identifier_opt COLON . [ WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES ]
## Transitions:
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REQUIRES REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production ext_contract_markup -> CONTRACT ext_identifier_opt COLON

State 1107:
## Known stack suffix:
## ext_identifier
## LR(1) items:
ext_identifier_opt -> ext_identifier . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production ext_identifier_opt -> ext_identifier

State 1108:
## Known stack suffix:
## ext_global_clauses_opt ext_module_specs_opt
## LR(1) items:
ext_spec -> ext_global_clauses_opt ext_module_specs_opt . ext_global_specs_opt EOF [ # ]
## Transitions:
-- On MODULE shift to state 1109
-- On ext_module_markup shift to state 1112
-- On ext_global_specs_opt shift to state 1136
-- On ext_global_specs shift to state 1138
-- On ext_global_spec shift to state 1139
## Reductions:
-- On EOF
--   reduce production ext_global_specs_opt ->

State 1109:
## Known stack suffix:
## MODULE
## LR(1) items:
ext_module_markup -> MODULE . ext_identifier COLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EOF AXIOMATIC AXIOM ]
## Transitions:
-- On WRITES shift to state 1
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On VARIANT shift to state 5
-- On UNSIGNED shift to state 8
-- On UNION shift to state 9
-- On TYPENAME shift to state 10
-- On TYPE shift to state 11
-- On TERMINATES shift to state 12
-- On STRUCT shift to state 13
-- On STATIC shift to state 14
-- On SLICE shift to state 15
-- On SIZEOF shift to state 16
-- On SIGNED shift to state 17
-- On SHORT shift to state 18
-- On RETURNS shift to state 19
-- On REQUIRES shift to state 20
-- On REAL shift to state 21
-- On READS shift to state 22
-- On PREDICATE shift to state 23
-- On PRAGMA shift to state 24
-- On MODULE shift to state 25
-- On MODEL shift to state 26
-- On LOOP shift to state 27
-- On LONG shift to state 28
-- On LOGIC shift to state 29
-- On LEMMA shift to state 30
-- On LABEL shift to state 31
-- On INVARIANT shift to state 32
-- On INTEGER shift to state 33
-- On INT shift to state 34
-- On INDUCTIVE shift to state 35
-- On INCLUDE shift to state 36
-- On IMPACT shift to state 37
-- On IF shift to state 38
-- On IDENTIFIER shift to state 39
-- On GLOBAL shift to state 40
-- On FUNCTION shift to state 41
-- On FREES shift to state 42
-- On FOR shift to state 43
-- On FLOAT shift to state 44
-- On EXT_LET shift to state 45
-- On EXT_AT shift to state 46
-- On EXITS shift to state 47
-- On ENUM shift to state 48
-- On ENSURES shift to state 49
-- On ELSE shift to state 50
-- On DOUBLE shift to state 51
-- On DISJOINT shift to state 52
-- On DECREASES shift to state 53
-- On CUSTOM shift to state 54
-- On CONTRACT shift to state 55
-- On CONTINUES shift to state 56
-- On CONST shift to state 57
-- On COMPLETE shift to state 58
-- On CHAR shift to state 59
-- On CASE shift to state 60
-- On BREAKS shift to state 61
-- On BOOLEAN shift to state 62
-- On BOOL shift to state 63
-- On BEHAVIORS shift to state 64
-- On BEHAVIOR shift to state 65
-- On AXIOMATIC shift to state 66
-- On AXIOM shift to state 67
-- On ASSUMES shift to state 68
-- On ASSIGNS shift to state 69
-- On ASSERT shift to state 70
-- On ALLOCATES shift to state 71
-- On post_cond shift to state 72
-- On non_logic_keyword shift to state 73
-- On keyword shift to state 79
-- On is_ext_spec shift to state 80
-- On is_acsl_spec shift to state 81
-- On is_acsl_other shift to state 82
-- On is_acsl_decl_or_code_annot shift to state 83
-- On identifier_or_typename shift to state 84
-- On ext_identifier shift to state 1110
-- On c_keyword shift to state 85
-- On any_identifier shift to state 1096
-- On acsl_c_keyword shift to state 87
## Reductions:

State 1110:
## Known stack suffix:
## MODULE ext_identifier
## LR(1) items:
ext_module_markup -> MODULE ext_identifier . COLON [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EOF AXIOMATIC AXIOM ]
## Transitions:
-- On COLON shift to state 1111
## Reductions:

State 1111:
## Known stack suffix:
## MODULE ext_identifier COLON
## LR(1) items:
ext_module_markup -> MODULE ext_identifier COLON . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EOF AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EOF AXIOMATIC AXIOM
--   reduce production ext_module_markup -> MODULE ext_identifier COLON

State 1112:
## Known stack suffix:
## ext_module_markup
## LR(1) items:
ext_global_spec -> ext_module_markup . ext_global_clauses_opt ext_module_specs [ MODULE EOF ]
ext_global_spec -> ext_module_markup . [ MODULE EOF ]
## Transitions:
-- On VOLATILE shift to state 2
-- On TYPE shift to state 570
-- On PREDICATE shift to state 633
-- On MODEL shift to state 658
-- On LOGIC shift to state 714
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On INCLUDE shift to state 1077
-- On GLOBAL shift to state 1080
-- On EXT_LET shift to state 1086
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 947
-- On type_annot shift to state 955
-- On model_annot shift to state 957
-- On logic_def shift to state 960
-- On ext_global_clauses_opt shift to state 1113
-- On ext_global_clauses shift to state 1133
-- On ext_global_clause shift to state 1134
-- On deprecated_logic_decl shift to state 1061
-- On decl shift to state 1132
## Reductions:
-- On FUNCTION
--   reduce production ext_global_clauses_opt ->
-- On MODULE EOF
--   reduce production ext_global_spec -> ext_module_markup

State 1113:
## Known stack suffix:
## ext_module_markup ext_global_clauses_opt
## LR(1) items:
ext_global_spec -> ext_module_markup ext_global_clauses_opt . ext_module_specs [ MODULE EOF ]
## Transitions:
-- On FUNCTION shift to state 1093
-- On ext_module_specs shift to state 1114
-- On ext_module_spec shift to state 1115
-- On ext_function_markup shift to state 1117
## Reductions:

State 1114:
## Known stack suffix:
## ext_module_markup ext_global_clauses_opt ext_module_specs
## LR(1) items:
ext_global_spec -> ext_module_markup ext_global_clauses_opt ext_module_specs . [ MODULE EOF ]
## Transitions:
## Reductions:
-- On MODULE EOF
--   reduce production ext_global_spec -> ext_module_markup ext_global_clauses_opt ext_module_specs

State 1115:
## Known stack suffix:
## ext_module_spec
## LR(1) items:
ext_module_specs -> ext_module_spec . [ MODULE EOF ]
ext_module_specs -> ext_module_spec . ext_module_specs [ MODULE EOF ]
## Transitions:
-- On FUNCTION shift to state 1093
-- On ext_module_specs shift to state 1116
-- On ext_module_spec shift to state 1115
-- On ext_function_markup shift to state 1117
## Reductions:
-- On MODULE EOF
--   reduce production ext_module_specs -> ext_module_spec

State 1116:
## Known stack suffix:
## ext_module_spec ext_module_specs
## LR(1) items:
ext_module_specs -> ext_module_spec ext_module_specs . [ MODULE EOF ]
## Transitions:
## Reductions:
-- On MODULE EOF
--   reduce production ext_module_specs -> ext_module_spec ext_module_specs

State 1117:
## Known stack suffix:
## ext_function_markup
## LR(1) items:
ext_module_spec -> ext_function_markup . ext_function_specs_opt [ MODULE FUNCTION EOF ]
## Transitions:
-- On VOLATILE shift to state 2
-- On TYPE shift to state 570
-- On PREDICATE shift to state 633
-- On MODEL shift to state 658
-- On LOGIC shift to state 714
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On INCLUDE shift to state 1077
-- On GLOBAL shift to state 1080
-- On EXT_LET shift to state 1086
-- On EXT_AT shift to state 1097
-- On CONTRACT shift to state 1104
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 947
-- On type_annot shift to state 955
-- On model_annot shift to state 957
-- On logic_def shift to state 960
-- On ext_global_clause shift to state 1118
-- On ext_function_specs_opt shift to state 1119
-- On ext_function_specs shift to state 1120
-- On ext_function_spec shift to state 1121
-- On ext_fun_spec shift to state 1123
-- On ext_contract_markup shift to state 1124
-- On ext_at_stmt_markup shift to state 1126
-- On deprecated_logic_decl shift to state 1061
-- On decl shift to state 1132
## Reductions:
-- On MODULE FUNCTION EOF
--   reduce production ext_function_specs_opt ->

State 1118:
## Known stack suffix:
## ext_global_clause
## LR(1) items:
ext_function_spec -> ext_global_clause . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_function_spec -> ext_global_clause

State 1119:
## Known stack suffix:
## ext_function_markup ext_function_specs_opt
## LR(1) items:
ext_module_spec -> ext_function_markup ext_function_specs_opt . [ MODULE FUNCTION EOF ]
## Transitions:
## Reductions:
-- On MODULE FUNCTION EOF
--   reduce production ext_module_spec -> ext_function_markup ext_function_specs_opt

State 1120:
## Known stack suffix:
## ext_function_specs
## LR(1) items:
ext_function_specs_opt -> ext_function_specs . [ MODULE FUNCTION EOF ]
## Transitions:
## Reductions:
-- On MODULE FUNCTION EOF
--   reduce production ext_function_specs_opt -> ext_function_specs

State 1121:
## Known stack suffix:
## ext_function_spec
## LR(1) items:
ext_function_specs -> ext_function_spec . [ MODULE FUNCTION EOF ]
ext_function_specs -> ext_function_spec . ext_function_specs [ MODULE FUNCTION EOF ]
## Transitions:
-- On VOLATILE shift to state 2
-- On TYPE shift to state 570
-- On PREDICATE shift to state 633
-- On MODEL shift to state 658
-- On LOGIC shift to state 714
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On INCLUDE shift to state 1077
-- On GLOBAL shift to state 1080
-- On EXT_LET shift to state 1086
-- On EXT_AT shift to state 1097
-- On CONTRACT shift to state 1104
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 947
-- On type_annot shift to state 955
-- On model_annot shift to state 957
-- On logic_def shift to state 960
-- On ext_global_clause shift to state 1118
-- On ext_function_specs shift to state 1122
-- On ext_function_spec shift to state 1121
-- On ext_fun_spec shift to state 1123
-- On ext_contract_markup shift to state 1124
-- On ext_at_stmt_markup shift to state 1126
-- On deprecated_logic_decl shift to state 1061
-- On decl shift to state 1132
## Reductions:
-- On MODULE FUNCTION EOF
--   reduce production ext_function_specs -> ext_function_spec

State 1122:
## Known stack suffix:
## ext_function_spec ext_function_specs
## LR(1) items:
ext_function_specs -> ext_function_spec ext_function_specs . [ MODULE FUNCTION EOF ]
## Transitions:
## Reductions:
-- On MODULE FUNCTION EOF
--   reduce production ext_function_specs -> ext_function_spec ext_function_specs

State 1123:
## Known stack suffix:
## ext_fun_spec
## LR(1) items:
ext_function_spec -> ext_fun_spec . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_function_spec -> ext_fun_spec

State 1124:
## Known stack suffix:
## ext_contract_markup
## LR(1) items:
ext_fun_spec -> ext_contract_markup . contract [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On REQUIRES shift to state 764
-- On requires shift to state 809
-- On ne_requires shift to state 768
-- On contract shift to state 1125
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production requires ->

State 1125:
## Known stack suffix:
## ext_contract_markup contract
## LR(1) items:
ext_fun_spec -> ext_contract_markup contract . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_fun_spec -> ext_contract_markup contract

State 1126:
## Known stack suffix:
## ext_at_stmt_markup
## LR(1) items:
ext_fun_spec -> ext_at_stmt_markup . ext_stmt_loop_spec [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
ext_function_specs -> ext_at_stmt_markup . [ MODULE FUNCTION EOF ]
## Transitions:
-- On SLICE shift to state 627
-- On LOOP shift to state 666
-- On INVARIANT shift to state 734
-- On IMPACT shift to state 749
-- On FOR shift to state 761
-- On CONTRACT shift to state 1104
-- On ASSERT shift to state 952
-- On slice_pragma shift to state 956
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annotations shift to state 958
-- On loop_annot_stack shift to state 959
-- On loop_allocation shift to state 795
-- On impact_pragma shift to state 1058
-- On full_identifier_or_typename shift to state 1127
-- On ext_stmt_loop_spec shift to state 1128
-- On ext_contract_markup shift to state 1129
-- On enter_kw_c_mode shift to state 708
-- On code_annotation shift to state 1066
-- On annotation shift to state 1131
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->
-- On MODULE FUNCTION EOF
--   reduce production ext_function_specs -> ext_at_stmt_markup

State 1127:
## Known stack suffix:
## full_identifier_or_typename
## LR(1) items:
annotation -> full_identifier_or_typename . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production annotation -> full_identifier_or_typename

State 1128:
## Known stack suffix:
## ext_at_stmt_markup ext_stmt_loop_spec
## LR(1) items:
ext_fun_spec -> ext_at_stmt_markup ext_stmt_loop_spec . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_fun_spec -> ext_at_stmt_markup ext_stmt_loop_spec

State 1129:
## Known stack suffix:
## ext_contract_markup
## LR(1) items:
ext_stmt_loop_spec -> ext_contract_markup . contract [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
-- On REQUIRES shift to state 764
-- On requires shift to state 809
-- On ne_requires shift to state 768
-- On contract shift to state 1130
## Reductions:
-- On WRITES VOLATILE VOID UNSIGNED UNION TYPENAME TYPE TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS PREDICATE MODULE MODEL LONG LOGIC LEMMA LABEL INTEGER INT INDUCTIVE INCLUDE IF IDENTIFIER GLOBAL FUNCTION FREES FLOAT EXT_LET EXT_AT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTRACT CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR AXIOMATIC AXIOM ASSIGNS ALLOCATES
--   reduce production requires ->

State 1130:
## Known stack suffix:
## ext_contract_markup contract
## LR(1) items:
ext_stmt_loop_spec -> ext_contract_markup contract . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_stmt_loop_spec -> ext_contract_markup contract

State 1131:
## Known stack suffix:
## annotation
## LR(1) items:
ext_stmt_loop_spec -> annotation . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_stmt_loop_spec -> annotation

State 1132:
## Known stack suffix:
## decl
## LR(1) items:
ext_global_clause -> decl . [ VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM ]
## Transitions:
## Reductions:
-- On VOLATILE TYPE PREDICATE MODULE MODEL LOGIC LEMMA INDUCTIVE INCLUDE GLOBAL FUNCTION EXT_LET EXT_AT EOF CONTRACT AXIOMATIC AXIOM
--   reduce production ext_global_clause -> decl

State 1133:
## Known stack suffix:
## ext_global_clauses
## LR(1) items:
ext_global_clauses_opt -> ext_global_clauses . [ MODULE FUNCTION EXT_AT EOF CONTRACT ]
## Transitions:
## Reductions:
-- On MODULE FUNCTION EXT_AT EOF CONTRACT
--   reduce production ext_global_clauses_opt -> ext_global_clauses

State 1134:
## Known stack suffix:
## ext_global_clause
## LR(1) items:
ext_global_clauses -> ext_global_clause . [ MODULE FUNCTION EXT_AT EOF CONTRACT ]
ext_global_clauses -> ext_global_clause . ext_global_clauses [ MODULE FUNCTION EXT_AT EOF CONTRACT ]
## Transitions:
-- On VOLATILE shift to state 2
-- On TYPE shift to state 570
-- On PREDICATE shift to state 633
-- On MODEL shift to state 658
-- On LOGIC shift to state 714
-- On LEMMA shift to state 729
-- On INDUCTIVE shift to state 737
-- On INCLUDE shift to state 1077
-- On GLOBAL shift to state 1080
-- On EXT_LET shift to state 1086
-- On AXIOMATIC shift to state 917
-- On AXIOM shift to state 947
-- On type_annot shift to state 955
-- On model_annot shift to state 957
-- On logic_def shift to state 960
-- On ext_global_clauses shift to state 1135
-- On ext_global_clause shift to state 1134
-- On deprecated_logic_decl shift to state 1061
-- On decl shift to state 1132
## Reductions:
-- On MODULE FUNCTION EXT_AT EOF CONTRACT
--   reduce production ext_global_clauses -> ext_global_clause

State 1135:
## Known stack suffix:
## ext_global_clause ext_global_clauses
## LR(1) items:
ext_global_clauses -> ext_global_clause ext_global_clauses . [ MODULE FUNCTION EXT_AT EOF CONTRACT ]
## Transitions:
## Reductions:
-- On MODULE FUNCTION EXT_AT EOF CONTRACT
--   reduce production ext_global_clauses -> ext_global_clause ext_global_clauses

State 1136:
## Known stack suffix:
## ext_global_clauses_opt ext_module_specs_opt ext_global_specs_opt
## LR(1) items:
ext_spec -> ext_global_clauses_opt ext_module_specs_opt ext_global_specs_opt . EOF [ # ]
## Transitions:
-- On EOF shift to state 1137
## Reductions:

State 1137:
## Known stack suffix:
## ext_global_clauses_opt ext_module_specs_opt ext_global_specs_opt EOF
## LR(1) items:
ext_spec -> ext_global_clauses_opt ext_module_specs_opt ext_global_specs_opt EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production ext_spec -> ext_global_clauses_opt ext_module_specs_opt ext_global_specs_opt EOF

State 1138:
## Known stack suffix:
## ext_global_specs
## LR(1) items:
ext_global_specs_opt -> ext_global_specs . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production ext_global_specs_opt -> ext_global_specs

State 1139:
## Known stack suffix:
## ext_global_spec
## LR(1) items:
ext_global_specs -> ext_global_spec . [ EOF ]
ext_global_specs -> ext_global_spec . ext_global_specs [ EOF ]
## Transitions:
-- On MODULE shift to state 1109
-- On ext_module_markup shift to state 1112
-- On ext_global_specs shift to state 1140
-- On ext_global_spec shift to state 1139
## Reductions:
-- On EOF
--   reduce production ext_global_specs -> ext_global_spec

State 1140:
## Known stack suffix:
## ext_global_spec ext_global_specs
## LR(1) items:
ext_global_specs -> ext_global_spec ext_global_specs . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production ext_global_specs -> ext_global_spec ext_global_specs

State 1141:
## Known stack suffix:
## ext_module_specs
## LR(1) items:
ext_module_specs_opt -> ext_module_specs . [ MODULE EOF ]
## Transitions:
## Reductions:
-- On MODULE EOF
--   reduce production ext_module_specs_opt -> ext_module_specs

State 1142:
## Known stack suffix:
## ext_fun_specs
## LR(1) items:
ext_module_specs_opt -> ext_fun_specs . [ MODULE EOF ]
ext_module_specs_opt -> ext_fun_specs . ext_module_specs [ MODULE EOF ]
## Transitions:
-- On FUNCTION shift to state 1093
-- On ext_module_specs shift to state 1143
-- On ext_module_spec shift to state 1115
-- On ext_function_markup shift to state 1117
## Reductions:
-- On MODULE EOF
--   reduce production ext_module_specs_opt -> ext_fun_specs

State 1143:
## Known stack suffix:
## ext_fun_specs ext_module_specs
## LR(1) items:
ext_module_specs_opt -> ext_fun_specs ext_module_specs . [ MODULE EOF ]
## Transitions:
## Reductions:
-- On MODULE EOF
--   reduce production ext_module_specs_opt -> ext_fun_specs ext_module_specs

State 1144:
## Known stack suffix:
## ext_fun_spec
## LR(1) items:
ext_fun_specs -> ext_fun_spec . [ MODULE FUNCTION EOF ]
ext_fun_specs -> ext_fun_spec . ext_fun_specs [ MODULE FUNCTION EOF ]
## Transitions:
-- On EXT_AT shift to state 1097
-- On CONTRACT shift to state 1104
-- On ext_fun_specs shift to state 1145
-- On ext_fun_spec shift to state 1144
-- On ext_contract_markup shift to state 1124
-- On ext_at_stmt_markup shift to state 1146
## Reductions:
-- On MODULE FUNCTION EOF
--   reduce production ext_fun_specs -> ext_fun_spec

State 1145:
## Known stack suffix:
## ext_fun_spec ext_fun_specs
## LR(1) items:
ext_fun_specs -> ext_fun_spec ext_fun_specs . [ MODULE FUNCTION EOF ]
## Transitions:
## Reductions:
-- On MODULE FUNCTION EOF
--   reduce production ext_fun_specs -> ext_fun_spec ext_fun_specs

State 1146:
## Known stack suffix:
## ext_at_stmt_markup
## LR(1) items:
ext_fun_spec -> ext_at_stmt_markup . ext_stmt_loop_spec [ MODULE FUNCTION EXT_AT EOF CONTRACT ]
## Transitions:
-- On SLICE shift to state 627
-- On LOOP shift to state 666
-- On INVARIANT shift to state 734
-- On IMPACT shift to state 749
-- On FOR shift to state 761
-- On CONTRACT shift to state 1104
-- On ASSERT shift to state 952
-- On slice_pragma shift to state 956
-- On loop_variant shift to state 788
-- On loop_pragma shift to state 789
-- On loop_invariant shift to state 790
-- On loop_grammar_extension shift to state 791
-- On loop_effects shift to state 792
-- On loop_annotations shift to state 958
-- On loop_annot_stack shift to state 959
-- On loop_allocation shift to state 795
-- On impact_pragma shift to state 1058
-- On full_identifier_or_typename shift to state 1127
-- On ext_stmt_loop_spec shift to state 1128
-- On ext_contract_markup shift to state 1129
-- On enter_kw_c_mode shift to state 708
-- On code_annotation shift to state 1066
-- On annotation shift to state 1131
## Reductions:
-- On TYPENAME IDENTIFIER
--   reduce production enter_kw_c_mode ->

State 1147:
## Known stack suffix:
##
## LR(1) items:
lexpr_eof' -> . lexpr_eof [ # ]
## Transitions:
-- On lexpr_eof shift to state 1148
-- On full_lexpr shift to state 1149
-- On enter_kw_c_mode shift to state 579
## Reductions:
-- On WRITES VOLATILE VOID VARIANT VALID_READ VALID_RANGE VALID_INDEX VALID_FUNCTION VALID UNSIGNED UNION UNALLOCATED TYPEOF TYPENAME TYPE TRUE TILDE TERMINATES STRUCT STRING_LITERAL STATIC STAR SLICE SIZEOF SIGNED SHORT SEPARATED RETURNS RESULT REQUIRES REGISTER REAL READS PREDICATE PRAGMA PLUS OLD OFFSET NULL NOT MODULE MODEL MINUS LSQUAREPIPE LPAR LOOP LONG LOGIC LET LEMMA LBRACE LAMBDA LABEL INVARIANT INTER INTEGER INT INITIALIZED INDUCTIVE INCLUDE IMPACT IF IDENTIFIER GLOBAL FUNCTION FRESH FREES FREEABLE FORALL FOR FLOAT FALSE EXT_LET EXT_AT EXITS EXISTS ENUM ENSURES EMPTY ELSE DYNAMIC DOUBLE DISJOINT DECREASES DANGLING CUSTOM CONTRACT CONTINUES CONSTANT10 CONSTANT CONST COMPLETE CHAR CASE BSUNION BSTYPE BREAKS BOOLEAN BOOL BLOCK_LENGTH BEHAVIORS BEHAVIOR BASE_ADDR AXIOMATIC AXIOM AUTOMATIC AT ASSUMES ASSIGNS ASSERT AMP ALLOCATION ALLOCATES ALLOCABLE
--   reduce production enter_kw_c_mode ->

State 1148:
## Known stack suffix:
## lexpr_eof
## LR(1) items:
lexpr_eof' -> lexpr_eof . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept lexpr_eof

State 1149:
## Known stack suffix:
## full_lexpr
## LR(1) items:
lexpr_eof -> full_lexpr . EOF [ # ]
## Transitions:
-- On EOF shift to state 1150
## Reductions:

State 1150:
## Known stack suffix:
## full_lexpr EOF
## LR(1) items:
lexpr_eof -> full_lexpr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lexpr_eof -> full_lexpr EOF

State 1151:
## Known stack suffix:
##
## LR(1) items:
spec' -> . spec [ # ]
## Transitions:
-- On REQUIRES shift to state 764
-- On spec shift to state 1152
-- On requires shift to state 809
-- On ne_requires shift to state 768
-- On contract shift to state 1153
## Reductions:
-- On WRITES VOID UNSIGNED UNION TYPENAME TERMINATES STRUCT STATIC SIZEOF SIGNED SHORT RETURNS REAL READS LONG LABEL INTEGER INT IF IDENTIFIER FREES FLOAT EXITS EOF ENUM ENSURES ELSE DOUBLE DISJOINT DECREASES CONTINUES CONST COMPLETE CHAR CASE BREAKS BOOLEAN BOOL BEHAVIORS BEHAVIOR ASSIGNS ALLOCATES
--   reduce production requires ->

State 1152:
## Known stack suffix:
## spec
## LR(1) items:
spec' -> spec . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept spec

State 1153:
## Known stack suffix:
## contract
## LR(1) items:
spec -> contract . EOF [ # ]
## Transitions:
-- On EOF shift to state 1154
## Reductions:

State 1154:
## Known stack suffix:
## contract EOF
## LR(1) items:
spec -> contract EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production spec -> contract EOF

