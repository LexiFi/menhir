
** Conflict (shift/reduce) in state 2750.
** Token involved: LBRACK_LESS
** This state is reached from signatureFile after reading:

opt_attributes namespaceIntro deprecated_opt_equals

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
namespaceSpecList 
(?)

** In state 2750, looking ahead at LBRACK_LESS, shifting is permitted
** because of the following sub-derivation:

namespaceSpec namespaceSpecList 
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec 
                                                    opt_attributes opt_decl_visibility moduleIntro specifications 
                                                    attributes 
                                                    attributeList 
                                                    . LBRACK_LESS attributeListElements opt_seps GREATER_RBRACK opt_OBLOCKSEP 

** In state 2750, looking ahead at LBRACK_LESS, reducing production
** specifications ->
** is permitted because of the following sub-derivation:

namespaceSpec namespaceSpecList // lookahead token appears because namespaceSpecList can begin with LBRACK_LESS
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec // lookahead token is inherited
                                                    specifications // lookahead token is inherited
                                                    . 

** Conflict (shift/reduce) in state 2747.
** Token involved: LBRACK_LESS
** This state is reached from signatureFile after reading:

opt_attributes namespaceIntro deprecated_opt_equals opt_attributes opt_decl_visibility moduleIntro

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
namespaceSpecList 
(?)

** In state 2747, looking ahead at LBRACK_LESS, shifting is permitted
** because of the following sub-derivation:

namespaceSpec namespaceSpecList 
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec 
                                                    opt_attributes opt_decl_visibility moduleIntro specifications 
                                                                                                   moduleOrNamespaceSpfn opt_top_seps specifications 
                                                                                                   opt_attributes opt_decl_visibility moduleIntro colonOrEquals namedModuleAbbrevBlock 
                                                                                                   attributes 
                                                                                                   attributeList 
                                                                                                   . LBRACK_LESS attributeListElements opt_seps GREATER_RBRACK opt_OBLOCKSEP 

** In state 2747, looking ahead at LBRACK_LESS, reducing production
** specifications ->
** is permitted because of the following sub-derivation:

namespaceSpec namespaceSpecList // lookahead token appears because namespaceSpecList can begin with LBRACK_LESS
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec // lookahead token is inherited
                                                    opt_attributes opt_decl_visibility moduleIntro specifications // lookahead token is inherited
                                                                                                   . 

** Conflict (shift/reduce) in state 2727.
** Tokens involved: OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from interaction after reading:

opt_itop_seps declExpr itop_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              declExpr itop_seps interactiveExprOrDefinitions 
                                 (?)

** In state 2727, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr itop_seps interactiveExprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2727, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

interactiveDefinitions 
moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2724.
** Tokens involved: OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from interaction after reading:

opt_itop_seps hardwhiteDefnBindings

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              (?)

** In state 2724, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr itop_seps interactiveExprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr COLON typeWithTypeConstraints 
                      declExpr seps seqExpr 
                      hardwhiteDefnBindings typedSeqExprBlock 
                      hardwhiteLetBindings 
                      . OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2724, looking ahead at OLET, reducing production
** moduleOrNamespaceDefn -> hardwhiteDefnBindings
** is permitted because of the following sub-derivation:

interactiveDefinitions 
moduleOrNamespaceDefn interactiveDefinitions // lookahead token appears because interactiveDefinitions can begin with OLET
hardwhiteDefnBindings . 

** Conflict (shift/reduce) in state 2720.
** Tokens involved: OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from interaction after reading:

opt_itop_seps moduleOrNamespaceDefn itop_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              moduleOrNamespaceDefn itop_seps interactiveExprOrDefinitions 
                                              (?)

** In state 2720, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr itop_seps interactiveExprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2720, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

interactiveDefinitions 
moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2719.
** Tokens involved: OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from interaction after reading:

opt_itop_seps moduleOrNamespaceDefn

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              moduleOrNamespaceDefn interactiveDefinitions 
                                    moduleOrNamespaceDefn interactiveDefinitions 
                                    (?)

** In state 2719, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2719, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2697.
** Tokens involved: error OLET ODO OBLOCKEND EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              moduleOrNamespaceDefn interactiveDefinitions 
              opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                                  OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                              error moduleOrNamespaceDefns 
                                                                                                    moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                                    (?)

** In state 2697, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2697, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2696.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              moduleOrNamespaceDefn interactiveDefinitions 
              opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                                  OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                              moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                              (?)

** In state 2696, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2696, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2662.
** Tokens involved: error END
** The following explanations concentrate on token error.
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS classOrInterfaceOrStruct error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              moduleOrNamespaceDefn interactiveDefinitions 
              opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                                      componentInfo EQUALS tyconDefnRhsBlock 
                                                                           tyconDefnRhs opt_classDefn 
                                                                           tyconClassDefn 
                                                                           (?)

** In state 2662, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock END 
                         classDefnMembers 
                         error classDefnMembers 
                               . error classDefnMembers 

** In state 2662, looking ahead at error, reducing production
** classDefnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock recover // lookahead token appears because recover can begin with error
                         classDefnMembers // lookahead token is inherited
                         error classDefnMembers // lookahead token is inherited
                               . 

** Conflict (shift/reduce) in state 2661.
** Token involved: error
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS classOrInterfaceOrStruct

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              moduleOrNamespaceDefn interactiveDefinitions 
              opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                                      componentInfo EQUALS tyconDefnRhsBlock 
                                                                           tyconDefnRhs opt_classDefn 
                                                                           tyconClassDefn 
                                                                           (?)

** In state 2661, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock END 
                         classDefnMembers 
                         . error classDefnMembers 

** In state 2661, looking ahead at error, reducing production
** classDefnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock recover // lookahead token appears because recover can begin with error
                         classDefnMembers // lookahead token is inherited
                         . 

** Conflict (shift/reduce) in state 2630.
** Tokens involved: OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from interaction after reading:

opt_itop_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              (?)

** In state 2630, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr itop_seps interactiveExprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2630, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

interactiveDefinitions 
moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2615.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes namespaceIntro deprecated_opt_equals

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
namespaceImplList 
namespaceImpl namespaceImplList 
opt_attributes namespaceIntro deprecated_opt_equals moduleImpl 
                                                    exprOrDefinitions 
                                                    (?)

** In state 2615, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2615, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2611.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
opt_attributes opt_decl_visibility moduleIntro exprOrDefinitions 
                                               (?)

** In state 2611, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2611, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2596.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

declExpr top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
                  (?)

** In state 2596, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2596, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2594.
** Token involved: error
** This state is reached from implementationFile after reading:

defnBindings

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
(?)

** In state 2594, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
defnBindings . error 

** In state 2594, looking ahead at error, reducing production
** moduleOrNamespaceDefn -> defnBindings
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns // lookahead token appears because moduleOrNamespaceDefns can begin with error
defnBindings . 

** Conflict (shift/reduce) in state 2592.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

hardwhiteDefnBindings

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
(?)

** In state 2592, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings . error 

** In state 2592, looking ahead at error, reducing production
** moduleOrNamespaceDefn -> hardwhiteDefnBindings
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns // lookahead token appears because moduleOrNamespaceDefns can begin with error
hardwhiteDefnBindings . 

** Conflict (shift/reduce) in state 2591.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

hashDirective top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
hashDirective top_seps exprOrDefinitions 
                       (?)

** In state 2591, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2591, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2589.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

moduleOrNamespaceDefn top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn top_seps exprOrDefinitions 
                               (?)

** In state 2589, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2589, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2588.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

moduleOrNamespaceDefn

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
                      moduleOrNamespaceDefn moduleOrNamespaceDefns 
                      (?)

** In state 2588, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2588, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2574.
** Tokens involved: error OLET ODO EXTERN END
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS structOrBegin error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    wrappedNamedModuleDefn 
                                                                    structOrBegin exprOrDefinitions END 
                                                                                  moduleOrNamespaceDefns 
                                                                                  error moduleOrNamespaceDefns 
                                                                                        moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                        (?)

** In state 2574, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2574, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2573.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS structOrBegin

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    wrappedNamedModuleDefn 
                                                                    structOrBegin exprOrDefinitions END 
                                                                                  (?)

** In state 2573, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2573, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2564.
** Tokens involved: error OLET ODO EXTERN END
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN structOrBegin error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN wrappedNamedModuleDefn OBLOCKEND 
                                                                                structOrBegin exprOrDefinitions END 
                                                                                              moduleOrNamespaceDefns 
                                                                                              error moduleOrNamespaceDefns 
                                                                                                    moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                                    (?)

** In state 2564, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2564, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2563.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN structOrBegin

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN wrappedNamedModuleDefn OBLOCKEND 
                                                                                structOrBegin exprOrDefinitions END 
                                                                                              (?)

** In state 2563, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2563, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2549.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS structOrBegin declExpr top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    wrappedNamedModuleDefn 
                                                                    structOrBegin exprOrDefinitions END 
                                                                                  declExpr top_seps exprOrDefinitions 
                                                                                                    (?)

** In state 2549, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2549, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2547.
** Token involved: error
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS structOrBegin defnBindings

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    wrappedNamedModuleDefn 
                                                                    structOrBegin exprOrDefinitions END 
                                                                                  (?)

** In state 2547, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
defnBindings . error 

** In state 2547, looking ahead at error, reducing production
** moduleOrNamespaceDefn -> defnBindings
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns // lookahead token appears because moduleOrNamespaceDefns can begin with error
defnBindings . 

** Conflict (shift/reduce) in state 2545.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS structOrBegin hardwhiteDefnBindings

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    wrappedNamedModuleDefn 
                                                                    structOrBegin exprOrDefinitions END 
                                                                                  (?)

** In state 2545, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings . error 

** In state 2545, looking ahead at error, reducing production
** moduleOrNamespaceDefn -> hardwhiteDefnBindings
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns // lookahead token appears because moduleOrNamespaceDefns can begin with error
hardwhiteDefnBindings . 

** Conflict (shift/reduce) in state 2544.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN hashDirective top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                hashDirective top_seps exprOrDefinitions 
                                                                                                       (?)

** In state 2544, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2544, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2542.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN moduleOrNamespaceDefn top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                moduleOrNamespaceDefn top_seps exprOrDefinitions 
                                                                                                               (?)

** In state 2542, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2542, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2541.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN moduleOrNamespaceDefn

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                                      moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                                      (?)

** In state 2541, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2541, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2538.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN error top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                error top_seps exprOrDefinitions 
                                                                                               (?)

** In state 2538, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2538, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2537.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN error error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                error moduleOrNamespaceDefns 
                                                                                      error moduleOrNamespaceDefns 
                                                                                            moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                            (?)

** In state 2537, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2537, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2536.
** Tokens involved: error OLET ODO OBLOCKEND EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                error moduleOrNamespaceDefns 
                                                                                      moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                      (?)

** In state 2536, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2536, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2535.
** Tokens involved: error OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS OBLOCKBEGIN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility moduleIntro opt_signature EQUALS namedModuleDefnBlock 
                                                                    OBLOCKBEGIN moduleOrNamespaceDefns OBLOCKEND 
                                                                                moduleOrNamespaceDefn moduleOrNamespaceDefns 
                                                                                (?)

** In state 2535, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2535, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2508.
** Token involved: LBRACK_LESS
** This state is reached from signatureFile after reading:

opt_attributes namespaceIntro deprecated_opt_equals hashDirective top_sep

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
namespaceSpecList 
(?)

** In state 2508, looking ahead at LBRACK_LESS, shifting is permitted
** because of the following sub-derivation:

namespaceSpec namespaceSpecList 
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec 
                                                    specifications 
                                                    hashDirective top_sep specifications 
                                                                          moduleOrNamespaceSpfn opt_top_seps specifications 
                                                                          opt_attributes opt_decl_visibility moduleIntro colonOrEquals namedModuleAbbrevBlock 
                                                                          attributes 
                                                                          attributeList 
                                                                          . LBRACK_LESS attributeListElements opt_seps GREATER_RBRACK opt_OBLOCKSEP 

** In state 2508, looking ahead at LBRACK_LESS, reducing production
** specifications ->
** is permitted because of the following sub-derivation:

namespaceSpec namespaceSpecList // lookahead token appears because namespaceSpecList can begin with LBRACK_LESS
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec // lookahead token is inherited
                                                    specifications // lookahead token is inherited
                                                    hashDirective top_sep specifications // lookahead token is inherited
                                                                          . 

** Conflict (shift/reduce) in state 2505.
** Token involved: LBRACK_LESS
** This state is reached from signatureFile after reading:

opt_attributes namespaceIntro deprecated_opt_equals moduleOrNamespaceSpfn opt_top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
namespaceSpecList 
(?)

** In state 2505, looking ahead at LBRACK_LESS, shifting is permitted
** because of the following sub-derivation:

namespaceSpec namespaceSpecList 
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec 
                                                    specifications 
                                                    moduleOrNamespaceSpfn opt_top_seps specifications 
                                                                                       moduleOrNamespaceSpfn opt_top_seps specifications 
                                                                                       opt_attributes opt_decl_visibility moduleIntro colonOrEquals namedModuleAbbrevBlock 
                                                                                       attributes 
                                                                                       attributeList 
                                                                                       . LBRACK_LESS attributeListElements opt_seps GREATER_RBRACK opt_OBLOCKSEP 

** In state 2505, looking ahead at LBRACK_LESS, reducing production
** specifications ->
** is permitted because of the following sub-derivation:

namespaceSpec namespaceSpecList // lookahead token appears because namespaceSpecList can begin with LBRACK_LESS
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec // lookahead token is inherited
                                                    specifications // lookahead token is inherited
                                                    moduleOrNamespaceSpfn opt_top_seps specifications // lookahead token is inherited
                                                                                       . 

** Conflict (shift/reduce) in state 2468.
** Token involved: LBRACK_LESS
** This state is reached from signatureFile after reading:

opt_attributes namespaceIntro deprecated_opt_equals error opt_top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
namespaceSpecList 
(?)

** In state 2468, looking ahead at LBRACK_LESS, shifting is permitted
** because of the following sub-derivation:

namespaceSpec namespaceSpecList 
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec 
                                                    specifications 
                                                    error opt_top_seps specifications 
                                                                       moduleOrNamespaceSpfn opt_top_seps specifications 
                                                                       opt_attributes opt_decl_visibility moduleIntro colonOrEquals namedModuleAbbrevBlock 
                                                                       attributes 
                                                                       attributeList 
                                                                       . LBRACK_LESS attributeListElements opt_seps GREATER_RBRACK opt_OBLOCKSEP 

** In state 2468, looking ahead at LBRACK_LESS, reducing production
** specifications ->
** is permitted because of the following sub-derivation:

namespaceSpec namespaceSpecList // lookahead token appears because namespaceSpecList can begin with LBRACK_LESS
opt_attributes namespaceIntro deprecated_opt_equals moduleSpec // lookahead token is inherited
                                                    specifications // lookahead token is inherited
                                                    error opt_top_seps specifications // lookahead token is inherited
                                                                       . 

** Conflict (shift/reduce) in state 2432.
** Token involved: COLON
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo opt_HIGH_PRECEDENCE_APP LPAREN attributes simplePattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo opt_HIGH_PRECEDENCE_APP simplePatterns opt_as EQUALS tyconDefnRhsBlock 
                                                                              LPAREN simplePatternCommaList RPAREN 
                                                                                     simplePattern 
                                                                                     (?)

** In state 2432, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

attributes simplePattern 
           simplePattern . COLON typeWithTypeConstraints 

** In state 2432, looking ahead at COLON, reducing production
** simplePattern -> attributes simplePattern
** is permitted because of the following sub-derivation:

simplePattern COLON typeWithTypeConstraints // lookahead token appears
attributes simplePattern . 

** Conflict (shift/reduce) in state 2415.
** Token involved: WITH
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility STATIC TYPE componentInfo EQUALS tyconDefnRhs

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             (?)

** In state 2415, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn 
                                       classDefnMember opt_seps classDefnMembers 
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconDefn 
                                                                                      componentInfo EQUALS tyconDefnRhsBlock 
                                                                                                           tyconDefnRhs opt_classDefn 
                                                                                                                        . WITH classDefnBlock decl_end 

** In state 2415, looking ahead at WITH, reducing production
** opt_classDefn ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn // lookahead token appears because opt_classDefn can begin with WITH
                                       classDefnMember opt_seps classDefnMembers // lookahead token is inherited because opt_seps classDefnMembers can vanish
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconDefn // lookahead token is inherited
                                                                                      componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                                                                           tyconDefnRhs opt_classDefn // lookahead token is inherited
                                                                                                                        . 

** Conflict (shift/reduce) in state 2403.
** Token involved: error
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS classOrInterfaceOrStruct classDefnMember opt_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconClassDefn 
                                                             (?)

** In state 2403, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock END 
                         classDefnMembers 
                         classDefnMember opt_seps classDefnMembers 
                                                  . error classDefnMembers 

** In state 2403, looking ahead at error, reducing production
** classDefnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock recover // lookahead token appears because recover can begin with error
                         classDefnMembers // lookahead token is inherited
                         classDefnMember opt_seps classDefnMembers // lookahead token is inherited
                                                  . 

** Conflict (shift/reduce) in state 2400.
** Token involved: error
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS classOrInterfaceOrStruct error error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconClassDefn 
                                                             (?)

** In state 2400, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock END 
                         classDefnMembers 
                         error classDefnMembers 
                               error classDefnMembers 
                                     . error classDefnMembers 

** In state 2400, looking ahead at error, reducing production
** classDefnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock recover // lookahead token appears because recover can begin with error
                         classDefnMembers // lookahead token is inherited
                         error classDefnMembers // lookahead token is inherited
                               error classDefnMembers // lookahead token is inherited
                                     . 

** Conflict (shift/reduce) in state 2399.
** Tokens involved: error END
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS classOrInterfaceOrStruct error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconClassDefn 
                                                             (?)

** In state 2399, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock END 
                         classDefnMembers 
                         error classDefnMembers 
                               . error classDefnMembers 

** In state 2399, looking ahead at error, reducing production
** classDefnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock recover // lookahead token appears because recover can begin with error
                         classDefnMembers // lookahead token is inherited
                         error classDefnMembers // lookahead token is inherited
                               . 

** Conflict (shift/reduce) in state 2398.
** Token involved: error
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS classOrInterfaceOrStruct

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconClassDefn 
                                                             (?)

** In state 2398, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock END 
                         classDefnMembers 
                         . error classDefnMembers 

** In state 2398, looking ahead at error, reducing production
** classDefnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classDefnBlock recover // lookahead token appears because recover can begin with error
                         classDefnMembers // lookahead token is inherited
                         . 

** Conflict (shift/reduce) in state 2391.
** Token involved: WITH
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility STATIC TYPE componentInfo EQUALS OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             (?)

** In state 2391, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn 
                                       classDefnMember opt_seps classDefnMembers 
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconDefn 
                                                                                      componentInfo EQUALS tyconDefnRhsBlock 
                                                                                                           OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn 
                                                                                                                                                                                           . WITH classDefnBlock decl_end 

** In state 2391, looking ahead at WITH, reducing production
** opt_classDefn ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn // lookahead token appears because opt_classDefn can begin with WITH
                                       classDefnMember opt_seps classDefnMembers // lookahead token is inherited because opt_seps classDefnMembers can vanish
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconDefn // lookahead token is inherited
                                                                                      componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                                                                           OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn // lookahead token is inherited
                                                                                                                                                                                           . 

** Conflict (shift/reduce) in state 2368.
** Token involved: ODECLEND
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility exconCore WITH opt_attributes opt_decl_visibility abstractMemberFlags opt_inline grab_doc nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility exconDefn 
                                   exconCore opt_classDefn 
                                             (?)

** In state 2368, looking ahead at ODECLEND, shifting is permitted
** because of the following sub-derivation:

WITH classDefnBlock decl_end 
     classDefnMembers 
     classDefnMember opt_seps classDefnMembers 
     opt_attributes opt_decl_visibility abstractMemberFlags opt_inline grab_doc nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet opt_ODECLEND 
                                                                                                                                                                        . ODECLEND 

** In state 2368, looking ahead at ODECLEND, reducing production
** opt_ODECLEND ->
** is permitted because of the following sub-derivation:

WITH classDefnBlock decl_end // lookahead token appears because decl_end can begin with ODECLEND
     classDefnMembers // lookahead token is inherited
     classDefnMember opt_seps classDefnMembers // lookahead token is inherited because opt_seps classDefnMembers can vanish
     opt_attributes opt_decl_visibility abstractMemberFlags opt_inline grab_doc nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet opt_ODECLEND // lookahead token is inherited
                                                                                                                                                                        . 

** Conflict (shift/reduce) in state 2367.
** Token involved: WITH
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility abstractMemberFlags opt_inline grab_doc nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             (?)

** In state 2367, looking ahead at WITH, reducing production
** classMemberSpfnGetSet ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn // lookahead token appears because opt_classDefn can begin with WITH
                                       classDefnMember opt_seps classDefnMembers // lookahead token is inherited because opt_seps classDefnMembers can vanish
                                       opt_attributes opt_decl_visibility abstractMemberFlags opt_inline grab_doc nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet opt_ODECLEND // lookahead token is inherited because opt_ODECLEND can vanish
                                                                                                                                                                                    . 

** In state 2367, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn 
                                       classDefnMember opt_seps classDefnMembers 
                                       opt_attributes opt_decl_visibility abstractMemberFlags opt_inline grab_doc nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet opt_ODECLEND 
                                                                                                                                                                                    . WITH classMemberSpfnGetSetElements 

** Conflict (shift/reduce) in state 2348.
** Token involved: WITH
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility interfaceMember appType

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             (?)

** In state 2348, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn 
                                       classDefnMember opt_seps classDefnMembers 
                                       opt_attributes opt_decl_visibility interfaceMember appType opt_interfaceImplDefn 
                                                                                                  . WITH objectImplementationBlock decl_end 

** In state 2348, looking ahead at WITH, reducing production
** opt_interfaceImplDefn ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconDefnRhs opt_OBLOCKSEP classDefnMembers opt_classDefn OBLOCKEND opt_classDefn // lookahead token appears because opt_classDefn can begin with WITH
                                       classDefnMember opt_seps classDefnMembers // lookahead token is inherited because opt_seps classDefnMembers can vanish
                                       opt_attributes opt_decl_visibility interfaceMember appType opt_interfaceImplDefn // lookahead token is inherited
                                                                                                  . 

** Conflict (shift/reduce) in state 2345.
** Token involved: ODECLEND
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility exconCore WITH opt_attributes opt_decl_visibility memberFlags memberCore

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility exconDefn 
                                   exconCore opt_classDefn 
                                             (?)

** In state 2345, looking ahead at ODECLEND, shifting is permitted
** because of the following sub-derivation:

WITH classDefnBlock decl_end 
     classDefnMembers 
     classDefnMember opt_seps classDefnMembers 
     opt_attributes opt_decl_visibility memberFlags memberCore opt_ODECLEND 
                                                               . ODECLEND 

** In state 2345, looking ahead at ODECLEND, reducing production
** opt_ODECLEND ->
** is permitted because of the following sub-derivation:

WITH classDefnBlock decl_end // lookahead token appears because decl_end can begin with ODECLEND
     classDefnMembers // lookahead token is inherited
     classDefnMember opt_seps classDefnMembers // lookahead token is inherited because opt_seps classDefnMembers can vanish
     opt_attributes opt_decl_visibility memberFlags memberCore opt_ODECLEND // lookahead token is inherited
                                                               . 

** Conflict (shift/reduce) in state 2332.
** Token involved: ODECLEND
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility exconCore WITH opt_attributes opt_decl_visibility NEW atomicPattern opt_as grab_doc EQUALS typedSeqExprBlock

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility exconDefn 
                                   exconCore opt_classDefn 
                                             (?)

** In state 2332, looking ahead at ODECLEND, shifting is permitted
** because of the following sub-derivation:

WITH classDefnBlock decl_end 
     classDefnMembers 
     classDefnMember opt_seps classDefnMembers 
     opt_attributes opt_decl_visibility NEW atomicPattern opt_as grab_doc EQUALS typedSeqExprBlock opt_ODECLEND 
                                                                                                   . ODECLEND 

** In state 2332, looking ahead at ODECLEND, reducing production
** opt_ODECLEND ->
** is permitted because of the following sub-derivation:

WITH classDefnBlock decl_end // lookahead token appears because decl_end can begin with ODECLEND
     classDefnMembers // lookahead token is inherited
     classDefnMember opt_seps classDefnMembers // lookahead token is inherited because opt_seps classDefnMembers can vanish
     opt_attributes opt_decl_visibility NEW atomicPattern opt_as grab_doc EQUALS typedSeqExprBlock opt_ODECLEND // lookahead token is inherited
                                                                                                   . 

** Conflict (shift/reduce) in state 2299.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

error top_seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
error top_seps exprOrDefinitions 
               (?)

** In state 2299, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 2299, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 2222.
** Token involved: WITH
** This state is reached from signatureFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility memberSpecFlags opt_inline grab_doc opt_access nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
moduleSpec 
specifications 
moduleOrNamespaceSpfn opt_top_seps specifications 
opt_attributes opt_decl_visibility tyconSpfns 
                                   TYPE tyconSpfn_list 
                                        tyconSpfn AND tyconSpfn_list 
                                        componentInfo EQUALS tyconSpfnRhsBlock 
                                                             (?)

** In state 2222, looking ahead at WITH, reducing production
** classMemberSpfnGetSet ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn // lookahead token appears because opt_classSpfn can begin with WITH
                                       classMemberSpfn opt_seps classSpfnMembers // lookahead token is inherited because opt_seps classSpfnMembers can vanish
                                       opt_attributes opt_decl_visibility memberSpecFlags opt_inline grab_doc opt_access nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet opt_literalValue // lookahead token is inherited because opt_literalValue can vanish
                                                                                                                                                                                           . 

** In state 2222, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn 
                                       classMemberSpfn opt_seps classSpfnMembers 
                                       opt_attributes opt_decl_visibility memberSpecFlags opt_inline grab_doc opt_access nameop opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet opt_literalValue 
                                                                                                                                                                                           . WITH classMemberSpfnGetSetElements 

** Conflict (shift/reduce) in state 2206.
** Token involved: WITH
** This state is reached from signatureFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility STATIC TYPE componentInfo EQUALS tyconSpfnRhs

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
moduleSpec 
specifications 
moduleOrNamespaceSpfn opt_top_seps specifications 
opt_attributes opt_decl_visibility tyconSpfns 
                                   TYPE tyconSpfn_list 
                                        tyconSpfn AND tyconSpfn_list 
                                        componentInfo EQUALS tyconSpfnRhsBlock 
                                                             (?)

** In state 2206, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn 
                                       classMemberSpfn opt_seps classSpfnMembers 
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconSpfn 
                                                                                      componentInfo EQUALS tyconSpfnRhsBlock 
                                                                                                           tyconSpfnRhs opt_classSpfn 
                                                                                                                        . WITH classSpfnBlock decl_end 

** In state 2206, looking ahead at WITH, reducing production
** opt_classSpfn ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn // lookahead token appears because opt_classSpfn can begin with WITH
                                       classMemberSpfn opt_seps classSpfnMembers // lookahead token is inherited because opt_seps classSpfnMembers can vanish
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconSpfn // lookahead token is inherited
                                                                                      componentInfo EQUALS tyconSpfnRhsBlock // lookahead token is inherited
                                                                                                           tyconSpfnRhs opt_classSpfn // lookahead token is inherited
                                                                                                                        . 

** Conflict (shift/reduce) in state 2073.
** Token involved: EQUALS
** This state is reached from implementationFile after reading:

LBRACE appExpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
LBRACE braceExprBody RBRACE 
       (?)

** In state 2073, looking ahead at EQUALS, reducing production
** minusExpr -> appExpr
** is permitted because of the following sub-derivation:

monadicExprInitial 
rangeSequenceExpr 
declExpr TO declExpr 
declExpr EQUALS declExpr // lookahead token appears
minusExpr // lookahead token is inherited
appExpr . 

** In state 2073, looking ahead at EQUALS, shifting is permitted
** because of the following sub-derivation:

recdExpr 
appExpr . EQUALS declExpr recdExprBindings opt_seps 

** Conflict (shift/reduce) in state 2051.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACE objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterface

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
(?)

** In state 2051, looking ahead at error, reducing production
** objExprInterfaces ->
** is permitted because of the following sub-derivation:

LBRACE braceExprBody recover // lookahead token appears because recover can begin with error
       objExpr // lookahead token is inherited
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces // lookahead token is inherited
                                                         objExprInterface objExprInterfaces // lookahead token is inherited
                                                                          . 

** In state 2051, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACE braceExprBody RBRACE 
       objExpr 
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces 
                                                         objExprInterface objExprInterfaces 
                                                                          . error objExprInterfaces 

** Conflict (shift/reduce) in state 2049.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACE objExprBaseCall opt_objExprBindings opt_OBLOCKSEP error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
(?)

** In state 2049, looking ahead at error, reducing production
** objExprInterfaces ->
** is permitted because of the following sub-derivation:

LBRACE braceExprBody recover // lookahead token appears because recover can begin with error
       objExpr // lookahead token is inherited
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces // lookahead token is inherited
                                                         error objExprInterfaces // lookahead token is inherited
                                                               . 

** In state 2049, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACE braceExprBody RBRACE 
       objExpr 
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces 
                                                         error objExprInterfaces 
                                                               . error objExprInterfaces 

** Conflict (shift/reduce) in state 2048.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACE objExprBaseCall opt_objExprBindings opt_OBLOCKSEP

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
(?)

** In state 2048, looking ahead at error, reducing production
** objExprInterfaces ->
** is permitted because of the following sub-derivation:

LBRACE braceExprBody recover // lookahead token appears because recover can begin with error
       objExpr // lookahead token is inherited
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces // lookahead token is inherited
                                                         . 

** In state 2048, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACE braceExprBody RBRACE 
       objExpr 
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces 
                                                         . error objExprInterfaces 

** Conflict (shift/reduce) in state 2038.
** Tokens involved: OEND ODECLEND END
** The following explanations concentrate on token OEND.
** This state is reached from implementationFile after reading:

LBRACE objExprBaseCall opt_objExprBindings opt_OBLOCKSEP interfaceMember appType WITH objectImplementationBlock

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
LBRACE braceExprBody RBRACE 
       objExpr 
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces 
                                                         objExprInterface objExprInterfaces 
                                                         (?)

** In state 2038, looking ahead at OEND, shifting is permitted
** because of the following sub-derivation:

interfaceMember appType opt_objExprBindings opt_decl_end opt_OBLOCKSEP 
                        objExprBindings 
                        WITH objectImplementationBlock opt_decl_end 
                                                       . OEND 

** In state 2038, looking ahead at OEND, reducing production
** opt_decl_end ->
** is permitted because of the following sub-derivation:

interfaceMember appType opt_objExprBindings opt_decl_end opt_OBLOCKSEP // lookahead token appears because opt_decl_end can begin with OEND
                        objExprBindings // lookahead token is inherited
                        WITH objectImplementationBlock opt_decl_end // lookahead token is inherited
                                                       . 

** Conflict (shift/reduce) in state 2034.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

LBRACE objExprBaseCall WITH objectImplementationMember

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
LBRACE braceExprBody RBRACE 
       objExpr 
       (?)

** In state 2034, looking ahead at OBLOCKSEP, reducing production
** opt_seps ->
** is permitted because of the following sub-derivation:

objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces // lookahead token appears because opt_OBLOCKSEP can begin with OBLOCKSEP
                objExprBindings // lookahead token is inherited
                WITH objectImplementationBlock opt_decl_end // lookahead token is inherited because opt_decl_end can vanish
                     objectImplementationMembers // lookahead token is inherited
                     objectImplementationMember opt_seps // lookahead token is inherited
                                                . 

** In state 2034, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces 
                objExprBindings 
                WITH objectImplementationBlock opt_decl_end 
                     objectImplementationMembers 
                     objectImplementationMember opt_seps objectImplementationMembers 
                                                seps 
                                                . OBLOCKSEP 

** Conflict (shift/reduce) in state 2030.
** Token involved: ODECLEND
** This state is reached from implementationFile after reading:

LBRACE objExprBaseCall WITH opt_attributes memberOrOverride memberCore

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
LBRACE braceExprBody RBRACE 
       objExpr 
       objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces 
                       objExprBindings 
                       (?)

** In state 2030, looking ahead at ODECLEND, shifting is permitted
** because of the following sub-derivation:

WITH objectImplementationBlock opt_decl_end 
     objectImplementationMembers 
     objectImplementationMember opt_seps objectImplementationMembers 
     opt_attributes memberOrOverride memberCore opt_ODECLEND 
                                                . ODECLEND 

** In state 2030, looking ahead at ODECLEND, reducing production
** opt_ODECLEND ->
** is permitted because of the following sub-derivation:

WITH objectImplementationBlock opt_decl_end // lookahead token appears because opt_decl_end can begin with ODECLEND
     objectImplementationMembers // lookahead token is inherited
     objectImplementationMember opt_seps // lookahead token is inherited because opt_seps can vanish
     opt_attributes memberOrOverride memberCore opt_ODECLEND // lookahead token is inherited
                                                . 

** Conflict (shift/reduce) in state 2007.
** Token involved: ODECLEND
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility exconCore WITH opt_attributes opt_decl_visibility interfaceMember appType WITH opt_attributes memberOrOverride memberCore

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility exconDefn 
                                   exconCore opt_classDefn 
                                             WITH classDefnBlock decl_end 
                                                  classDefnMembers 
                                                  classDefnMember opt_seps classDefnMembers 
                                                  opt_attributes opt_decl_visibility interfaceMember appType opt_interfaceImplDefn 
                                                                                                             (?)

** In state 2007, looking ahead at ODECLEND, shifting is permitted
** because of the following sub-derivation:

WITH objectImplementationBlock decl_end 
     objectImplementationMembers 
     objectImplementationMember opt_seps objectImplementationMembers 
     opt_attributes memberOrOverride memberCore opt_ODECLEND 
                                                . ODECLEND 

** In state 2007, looking ahead at ODECLEND, reducing production
** opt_ODECLEND ->
** is permitted because of the following sub-derivation:

WITH objectImplementationBlock decl_end // lookahead token appears because decl_end can begin with ODECLEND
     objectImplementationMembers // lookahead token is inherited
     objectImplementationMember opt_seps // lookahead token is inherited because opt_seps can vanish
     opt_attributes memberOrOverride memberCore opt_ODECLEND // lookahead token is inherited
                                                . 

** Conflict (shift/reduce/reduce) in state 1940.
** Tokens involved: error WHILE TRY OLET ODO OBLOCKSEP MATCH LET IF FOR EXTERN
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

LBRACK_BAR hardwhiteDoBinding

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
(?)

** In state 1940, looking ahead at error, reducing production
** hardwhiteDefnBindings -> hardwhiteDoBinding
** is permitted because of the following sub-derivation:

LBRACK_BAR listExprElements BAR_RBRACK 
           declExpr moreListExprElements opt_seps 
           hardwhiteDefnBindings error // lookahead token appears
           hardwhiteDoBinding . 

** In state 1940, looking ahead at error, reducing production
** monadicExpr ->
** is permitted because of the following sub-derivation:

LBRACK_BAR listExprElements recover // lookahead token appears because recover can begin with error
           monadicExprInitial // lookahead token is inherited
           monadicExprNonEmptyInitial // lookahead token is inherited
           monadicExprBindings // lookahead token is inherited
           hardwhiteDoBinding monadicExpr // lookahead token is inherited
                              . 

** In state 1940, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           monadicExprBindings 
           hardwhiteDoBinding monadicExpr 
                              . error 

** Conflict (shift/reduce) in state 1939.
** Tokens involved: WHILE TRY OLET ODO OBLOCKSEP MATCH LET IF FOR EXTERN
** The following explanations concentrate on token WHILE.
** This state is reached from implementationFile after reading:

LBRACK_BAR hardwhiteLetBindings

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           (?)

** In state 1939, looking ahead at WHILE, reducing production
** hardwhiteDefnBindings -> hardwhiteLetBindings
** is permitted because of the following sub-derivation:

declExpr moreListExprElements opt_seps 
hardwhiteDefnBindings typedSeqExprBlock // lookahead token appears because typedSeqExprBlock can begin with WHILE
hardwhiteLetBindings . 

** In state 1939, looking ahead at WHILE, shifting is permitted
** because of the following sub-derivation:

monadicExprInitial 
monadicExprNonEmptyInitial 
monadicExprBindings 
hardwhiteLetBindings monadicExprNonEmptyNonInitial 
                     monadicExprNonEmptyInitial 
                     . WHILE declExpr do_or_odo monadicExprNonEmptyNonInitialBlock done_term 

** Conflict (shift/reduce) in state 1911.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACE NEW appType opt_HIGH_PRECEDENCE_APP

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
LBRACE braceExprBody RBRACE 
       (?)

** In state 1911, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

monadicExprInitial 
rangeSequenceExpr 
declExpr TO declExpr 
minusExpr LARROW declExpr 
NEW appType opt_HIGH_PRECEDENCE_APP . error 

** In state 1911, looking ahead at error, reducing production
** opt_argExprAfterType ->
** is permitted because of the following sub-derivation:

objExpr 
objExprBaseCall opt_objExprBindings opt_OBLOCKSEP objExprInterfaces // lookahead token appears because opt_objExprBindings opt_OBLOCKSEP can vanish and objExprInterfaces can begin with error
NEW appType opt_HIGH_PRECEDENCE_APP opt_argExprAfterType opt_as // lookahead token is inherited because opt_as can vanish
                                    . 

** Conflict (shift/reduce) in state 1898.
** Token involved: ORIGHT_BLOCK_END
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY monadicExprNonEmptyNonInitialBlockR WITH patternAndGuard RARROW TRY monadicExprNonEmptyNonInitialBlockR WITH patternAndGuard RARROW monadicExprNonEmptyNonInitial

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
                                                   WITH monadicWithPatternClauses 
                                                        monadicPatternClauses 
                                                        patternAndGuard monadicPatternResult 
                                                                        RARROW monadicExprNonEmptyNonInitialBlockR 
                                                                               (?)

** In state 1898, looking ahead at ORIGHT_BLOCK_END, shifting is permitted
** because of the following sub-derivation:

monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
monadicExprNonEmptyInitial 
TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
                                        WITH monadicWithPatternClauses 
                                             monadicPatternClauses 
                                             patternAndGuard monadicPatternResult 
                                                             RARROW monadicExprNonEmptyNonInitialBlockR 
                                                                    monadicExprNonEmptyNonInitial . ORIGHT_BLOCK_END 

** In state 1898, looking ahead at ORIGHT_BLOCK_END, reducing production
** monadicExprNonEmptyNonInitialBlockR -> monadicExprNonEmptyNonInitial
** is permitted because of the following sub-derivation:

monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END // lookahead token appears
monadicExprNonEmptyInitial // lookahead token is inherited
TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses // lookahead token is inherited
                                        WITH monadicWithPatternClauses // lookahead token is inherited
                                             monadicPatternClauses // lookahead token is inherited
                                             patternAndGuard monadicPatternResult // lookahead token is inherited
                                                             RARROW monadicExprNonEmptyNonInitialBlockR // lookahead token is inherited
                                                                    monadicExprNonEmptyNonInitial . 

** Conflict (shift/reduce) in state 1883.
** Tokens involved: OELSE ELSE ELIF
** The following explanations concentrate on token OELSE.
** This state is reached from implementationFile after reading:

LBRACK_BAR IF declExpr THEN IF declExpr monadicIfExprThen

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           IF declExpr monadicIfExprCases 
                       (?)

** In state 1883, looking ahead at OELSE, reducing production
** monadicIfExprElifs ->
** is permitted because of the following sub-derivation:

monadicIfExprThen monadicIfExprElifs // lookahead token appears because monadicIfExprElifs can begin with OELSE
THEN monadicExprNonEmptyNonInitial // lookahead token is inherited
     monadicExprNonEmptyInitial // lookahead token is inherited
     IF declExpr monadicIfExprCases // lookahead token is inherited
                 monadicIfExprThen monadicIfExprElifs // lookahead token is inherited
                                   . 

** In state 1883, looking ahead at OELSE, shifting is permitted
** because of the following sub-derivation:

monadicIfExprThen monadicIfExprElifs 
THEN monadicExprNonEmptyNonInitial 
     monadicExprNonEmptyInitial 
     IF declExpr monadicIfExprCases 
                 monadicIfExprThen monadicIfExprElifs 
                                   . OELSE OBLOCKBEGIN monadicExprNonEmptyNonInitial OBLOCKEND 

** Conflict (shift/reduce) in state 1847.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACK_BAR hardwhiteDoBinding OBLOCKSEP

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
(?)

** In state 1847, looking ahead at error, reducing production
** monadicExpr ->
** is permitted because of the following sub-derivation:

LBRACK_BAR listExprElements recover // lookahead token appears because recover can begin with error
           monadicExprInitial // lookahead token is inherited
           monadicExprNonEmptyInitial // lookahead token is inherited
           monadicExprBindings // lookahead token is inherited
           hardwhiteDoBinding OBLOCKSEP monadicExpr // lookahead token is inherited
                                        . 

** In state 1847, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           monadicExprBindings 
           hardwhiteDoBinding OBLOCKSEP monadicExpr 
                                        . error 

** Conflict (shift/reduce) in state 1846.
** Tokens involved: error OBLOCKSEP
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

LBRACK_BAR hardwhiteLetBindings hardwhiteDoBinding

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
(?)

** In state 1846, looking ahead at error, reducing production
** monadicExpr ->
** is permitted because of the following sub-derivation:

LBRACK_BAR listExprElements recover // lookahead token appears because recover can begin with error
           monadicExprInitial // lookahead token is inherited
           monadicExprNonEmptyInitial // lookahead token is inherited
           monadicExprBindings // lookahead token is inherited
           hardwhiteLetBindings monadicExprNonEmptyNonInitial // lookahead token is inherited
                                monadicExprNonEmptyInitial // lookahead token is inherited
                                monadicExprBindings // lookahead token is inherited
                                hardwhiteDoBinding monadicExpr // lookahead token is inherited
                                                   . 

** In state 1846, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           monadicExprBindings 
           hardwhiteLetBindings monadicExprNonEmptyNonInitial 
                                monadicExprNonEmptyInitial 
                                monadicExprBindings 
                                hardwhiteDoBinding monadicExpr 
                                                   . error 

** Conflict (shift/reduce) in state 1839.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

LBRACK_BAR hardwhiteLetBindings monadicExprNonEmptyInitial

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           (?)

** In state 1839, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

monadicExprBindings 
hardwhiteLetBindings monadicExprNonEmptyNonInitial 
                     monadicExprNonEmptyInitial 
                     monadicExprNonEmptyInitial . OBLOCKSEP monadicExprNonEmptyInitial 

** In state 1839, looking ahead at OBLOCKSEP, reducing production
** monadicExprNonEmptyNonInitial -> monadicExprNonEmptyInitial
** is permitted because of the following sub-derivation:

monadicExprNonEmptyInitial OBLOCKSEP monadicExprNonEmptyInitial // lookahead token appears
monadicExprBindings // lookahead token is inherited
hardwhiteLetBindings monadicExprNonEmptyNonInitial // lookahead token is inherited
                     monadicExprNonEmptyInitial . 

** Conflict (shift/reduce) in state 1798.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACK_BAR ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator opt_OBLOCKSEP

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
(?)

** In state 1798, looking ahead at error, reducing production
** monadicExpr ->
** is permitted because of the following sub-derivation:

LBRACK_BAR listExprElements recover // lookahead token appears because recover can begin with error
           monadicExprInitial // lookahead token is inherited
           monadicExprNonEmptyInitial // lookahead token is inherited
           monadicExprBindings // lookahead token is inherited
           ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator opt_OBLOCKSEP monadicExpr // lookahead token is inherited
                                                                                    . 

** In state 1798, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           monadicExprBindings 
           ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator opt_OBLOCKSEP monadicExpr 
                                                                                    . error 

** Conflict (shift/reduce) in state 1797.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

LBRACK_BAR ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           (?)

** In state 1797, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

monadicExprBindings 
ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator opt_OBLOCKSEP monadicExpr 
                                                           . OBLOCKSEP 

** In state 1797, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

monadicExprNonEmptyInitial OBLOCKSEP monadicExprNonEmptyInitial // lookahead token appears
monadicExprBindings // lookahead token is inherited
ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator opt_OBLOCKSEP monadicExpr // lookahead token is inherited because monadicExpr can vanish
                                                           . 

** Conflict (shift/reduce) in state 1753.
** Token involved: ORIGHT_BLOCK_END
** This state is reached from implementationFile after reading:

TRY FUNCTION opt_bar patternAndGuard RARROW typedSeqExpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
TRY typedSeqExprBlockR withClausses 
    (?)

** In state 1753, looking ahead at ORIGHT_BLOCK_END, shifting is permitted
** because of the following sub-derivation:

typedSeqExpr ORIGHT_BLOCK_END 
seqExpr COLON typeWithTypeConstraints 
declExpr seps seqExpr 
anonMatchingExpr 
FUNCTION opt_bar patternClauses 
                 patternAndGuard patternResult 
                                 RARROW typedSeqExprBlockR 
                                        typedSeqExpr . ORIGHT_BLOCK_END 

** In state 1753, looking ahead at ORIGHT_BLOCK_END, reducing production
** typedSeqExprBlockR -> typedSeqExpr
** is permitted because of the following sub-derivation:

typedSeqExpr ORIGHT_BLOCK_END // lookahead token appears
seqExpr // lookahead token is inherited
declExpr // lookahead token is inherited
anonMatchingExpr // lookahead token is inherited
FUNCTION opt_bar patternClauses // lookahead token is inherited
                 patternAndGuard patternResult // lookahead token is inherited
                                 RARROW typedSeqExprBlockR // lookahead token is inherited
                                        typedSeqExpr . 

** Conflict (shift/reduce) in state 1737.
** Tokens involved: OELSE ELSE ELIF
** The following explanations concentrate on token OELSE.
** This state is reached from implementationFile after reading:

WHILE IF declExpr THEN IF declExpr ifExprThen

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      IF declExpr ifExprCases 
                  (?)

** In state 1737, looking ahead at OELSE, reducing production
** ifExprElifs ->
** is permitted because of the following sub-derivation:

ifExprThen ifExprElifs // lookahead token appears because ifExprElifs can begin with OELSE
THEN declExpr // lookahead token is inherited
     IF declExpr ifExprCases // lookahead token is inherited
                 ifExprThen ifExprElifs // lookahead token is inherited
                            . 

** In state 1737, looking ahead at OELSE, shifting is permitted
** because of the following sub-derivation:

ifExprThen ifExprElifs 
THEN declExpr 
     IF declExpr ifExprCases 
                 ifExprThen ifExprElifs 
                            . OELSE OBLOCKBEGIN typedSeqExpr OBLOCKEND 

** Conflict (shift/reduce/reduce) in state 1711.
** Tokens involved: error WHILE TRY OLET ODO OBLOCKSEP MATCH LET IF FOR EXTERN
** The following explanations concentrate on token OBLOCKSEP.
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY hardwhiteDoBinding

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           (?)

** In state 1711, looking ahead at OBLOCKSEP, reducing production
** hardwhiteDefnBindings -> hardwhiteDoBinding
** is permitted because of the following sub-derivation:

declExpr moreListExprElements opt_seps 
TRY typedSeqExprBlockR withClausses 
    typedSeqExpr ORIGHT_BLOCK_END 
    seqExpr COLON typeWithTypeConstraints 
    declExpr seps seqExpr 
    hardwhiteDefnBindings OBLOCKSEP typedSeqExprBlock // lookahead token appears
    hardwhiteDoBinding . 

** In state 1711, looking ahead at OBLOCKSEP, reducing production
** monadicExpr ->
** is permitted because of the following sub-derivation:

monadicExprInitial 
monadicExprNonEmptyInitial 
TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
    monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
    monadicExprNonEmptyInitial 
    monadicExprNonEmptyInitial OBLOCKSEP monadicExprNonEmptyInitial // lookahead token appears
    monadicExprBindings // lookahead token is inherited
    hardwhiteDoBinding monadicExpr // lookahead token is inherited
                       . 

** In state 1711, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

monadicExprInitial 
monadicExprNonEmptyInitial 
TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
    monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
    monadicExprNonEmptyInitial 
    monadicExprBindings 
    hardwhiteDoBinding . OBLOCKSEP monadicExpr 

** Conflict (shift/reduce) in state 1710.
** Tokens involved: WHILE TRY OLET ODO OBLOCKSEP MATCH LET IF FOR EXTERN
** The following explanations concentrate on token WHILE.
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY hardwhiteLetBindings

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           (?)

** In state 1710, looking ahead at WHILE, reducing production
** hardwhiteDefnBindings -> hardwhiteLetBindings
** is permitted because of the following sub-derivation:

declExpr moreListExprElements opt_seps 
TRY typedSeqExprBlockR withClausses 
    typedSeqExpr ORIGHT_BLOCK_END 
    seqExpr COLON typeWithTypeConstraints 
    declExpr seps seqExpr 
    hardwhiteDefnBindings typedSeqExprBlock // lookahead token appears because typedSeqExprBlock can begin with WHILE
    hardwhiteLetBindings . 

** In state 1710, looking ahead at WHILE, shifting is permitted
** because of the following sub-derivation:

monadicExprInitial 
monadicExprNonEmptyInitial 
TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
    monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
    monadicExprNonEmptyInitial 
    monadicExprBindings 
    hardwhiteLetBindings monadicExprNonEmptyNonInitial 
                         monadicExprNonEmptyInitial 
                         . WHILE declExpr do_or_odo monadicExprNonEmptyNonInitialBlock done_term 

** Conflict (shift/reduce) in state 1679.
** Token involved: error
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar patternAndGuard patternResult

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
(?)

** In state 1679, looking ahead at error, reducing production
** patternClauses -> patternAndGuard patternResult
** is permitted because of the following sub-derivation:

OFUNCTION opt_bar patternClauses error OEND // lookahead token appears
                  patternAndGuard patternResult . 

** In state 1679, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult . error 

** Conflict (shift/reduce) in state 1642.
** Token involved: ORIGHT_BLOCK_END
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY TRY monadicExprNonEmptyNonInitialBlockR WITH patternAndGuard RARROW monadicExprNonEmptyNonInitial

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
               (?)

** In state 1642, looking ahead at ORIGHT_BLOCK_END, shifting is permitted
** because of the following sub-derivation:

monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
monadicExprNonEmptyInitial 
TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
                                        WITH monadicWithPatternClauses 
                                             monadicPatternClauses 
                                             patternAndGuard monadicPatternResult 
                                                             RARROW monadicExprNonEmptyNonInitialBlockR 
                                                                    monadicExprNonEmptyNonInitial . ORIGHT_BLOCK_END 

** In state 1642, looking ahead at ORIGHT_BLOCK_END, reducing production
** monadicExprNonEmptyNonInitialBlockR -> monadicExprNonEmptyNonInitial
** is permitted because of the following sub-derivation:

monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END // lookahead token appears
monadicExprNonEmptyInitial // lookahead token is inherited
TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses // lookahead token is inherited
                                        WITH monadicWithPatternClauses // lookahead token is inherited
                                             monadicPatternClauses // lookahead token is inherited
                                             patternAndGuard monadicPatternResult // lookahead token is inherited
                                                             RARROW monadicExprNonEmptyNonInitialBlockR // lookahead token is inherited
                                                                    monadicExprNonEmptyNonInitial . 

** Conflict (shift/reduce) in state 1629.
** Tokens involved: OELSE ELSE ELIF
** The following explanations concentrate on token OELSE.
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY IF declExpr THEN IF declExpr monadicIfExprThen

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
               monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
               monadicExprNonEmptyInitial 
               IF declExpr monadicIfExprCases 
                           (?)

** In state 1629, looking ahead at OELSE, reducing production
** monadicIfExprElifs ->
** is permitted because of the following sub-derivation:

monadicIfExprThen monadicIfExprElifs // lookahead token appears because monadicIfExprElifs can begin with OELSE
THEN monadicExprNonEmptyNonInitial // lookahead token is inherited
     monadicExprNonEmptyInitial // lookahead token is inherited
     IF declExpr monadicIfExprCases // lookahead token is inherited
                 monadicIfExprThen monadicIfExprElifs // lookahead token is inherited
                                   . 

** In state 1629, looking ahead at OELSE, shifting is permitted
** because of the following sub-derivation:

monadicIfExprThen monadicIfExprElifs 
THEN monadicExprNonEmptyNonInitial 
     monadicExprNonEmptyInitial 
     IF declExpr monadicIfExprCases 
                 monadicIfExprThen monadicIfExprElifs 
                                   . OELSE OBLOCKBEGIN monadicExprNonEmptyNonInitial OBLOCKEND 

** Conflict (shift/reduce) in state 1583.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY hardwhiteLetBindings hardwhiteDoBinding

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
               monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
               monadicExprNonEmptyInitial 
               (?)

** In state 1583, looking ahead at OBLOCKSEP, reducing production
** monadicExpr ->
** is permitted because of the following sub-derivation:

monadicExprNonEmptyInitial OBLOCKSEP monadicExprNonEmptyInitial // lookahead token appears
monadicExprBindings // lookahead token is inherited
hardwhiteLetBindings monadicExprNonEmptyNonInitial // lookahead token is inherited
                     monadicExprNonEmptyInitial // lookahead token is inherited
                     monadicExprBindings // lookahead token is inherited
                     hardwhiteDoBinding monadicExpr // lookahead token is inherited
                                        . 

** In state 1583, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

monadicExprBindings 
hardwhiteLetBindings monadicExprNonEmptyNonInitial 
                     monadicExprNonEmptyInitial 
                     monadicExprBindings 
                     hardwhiteDoBinding . OBLOCKSEP monadicExpr 

** Conflict (shift/reduce) in state 1576.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY hardwhiteLetBindings monadicExprNonEmptyInitial

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
               monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
               monadicExprNonEmptyInitial 
               (?)

** In state 1576, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

monadicExprBindings 
hardwhiteLetBindings monadicExprNonEmptyNonInitial 
                     monadicExprNonEmptyInitial 
                     monadicExprNonEmptyInitial . OBLOCKSEP monadicExprNonEmptyInitial 

** In state 1576, looking ahead at OBLOCKSEP, reducing production
** monadicExprNonEmptyNonInitial -> monadicExprNonEmptyInitial
** is permitted because of the following sub-derivation:

monadicExprNonEmptyInitial OBLOCKSEP monadicExprNonEmptyInitial // lookahead token appears
monadicExprBindings // lookahead token is inherited
hardwhiteLetBindings monadicExprNonEmptyNonInitial // lookahead token is inherited
                     monadicExprNonEmptyInitial . 

** Conflict (shift/reduce) in state 1432.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
               monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
               monadicExprNonEmptyInitial 
               (?)

** In state 1432, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

monadicExprBindings 
ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator opt_OBLOCKSEP monadicExpr 
                                                           . OBLOCKSEP 

** In state 1432, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

monadicExprNonEmptyInitial OBLOCKSEP monadicExprNonEmptyInitial // lookahead token appears
monadicExprBindings // lookahead token is inherited
ODO_BANG typedSeqExprBlock hardwhiteDefnBindingsTerminator opt_OBLOCKSEP monadicExpr // lookahead token is inherited because monadicExpr can vanish
                                                           . 

** Conflict (shift/reduce) in state 1424.
** Token involved: ORIGHT_BLOCK_END
** This state is reached from implementationFile after reading:

LBRACK_BAR TRY RARROW2 typedSeqExpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           TRY monadicExprNonEmptyNonInitialBlockR monadicWithClauses 
               (?)

** In state 1424, looking ahead at ORIGHT_BLOCK_END, shifting is permitted
** because of the following sub-derivation:

monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END 
monadicExprNonEmptyInitial 
RARROW2 typedSeqExprBlockR 
        typedSeqExpr . ORIGHT_BLOCK_END 

** In state 1424, looking ahead at ORIGHT_BLOCK_END, reducing production
** typedSeqExprBlockR -> typedSeqExpr
** is permitted because of the following sub-derivation:

monadicExprNonEmptyNonInitial ORIGHT_BLOCK_END // lookahead token appears
monadicExprNonEmptyInitial // lookahead token is inherited
RARROW2 typedSeqExprBlockR // lookahead token is inherited
        typedSeqExpr . 

** Conflict (shift/reduce) in state 1392.
** Tokens involved: OELSE ELSE ELIF
** The following explanations concentrate on token OELSE.
** This state is reached from implementationFile after reading:

IF declExpr THEN IF declExpr ifExprThen

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
IF declExpr ifExprCases 
            (?)

** In state 1392, looking ahead at OELSE, reducing production
** ifExprElifs ->
** is permitted because of the following sub-derivation:

ifExprThen ifExprElifs // lookahead token appears because ifExprElifs can begin with OELSE
THEN declExpr // lookahead token is inherited
     IF declExpr ifExprCases // lookahead token is inherited
                 ifExprThen ifExprElifs // lookahead token is inherited
                            . 

** In state 1392, looking ahead at OELSE, shifting is permitted
** because of the following sub-derivation:

ifExprThen ifExprElifs 
THEN declExpr 
     IF declExpr ifExprCases 
                 ifExprThen ifExprElifs 
                            . OELSE OBLOCKBEGIN typedSeqExpr OBLOCKEND 

** Conflict (shift/reduce) in state 1349.
** Token involved: COLON
** This state is reached from implementationFile after reading:

FOR parenPattern BAR parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 1349, looking ahead at COLON, reducing production
** parenPattern -> parenPattern BAR parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
parenPattern BAR parenPattern . 

** In state 1349, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

parenPattern BAR parenPattern 
                 parenPattern . COLON typeWithTypeConstraints 

** Conflict (shift/reduce) in state 1347.
** Token involved: COLON
** This state is reached from implementationFile after reading:

FOR parenPattern COMMA parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 1347, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

tupleParenPatternElements 
parenPattern COMMA parenPattern 
                   parenPattern . COLON typeWithTypeConstraints 

** In state 1347, looking ahead at COLON, reducing production
** tupleParenPatternElements -> parenPattern COMMA parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
tupleParenPatternElements // lookahead token is inherited
parenPattern COMMA parenPattern . 

** Conflict (shift/reduce) in state 1321.
** Token involved: COLON
** This state is reached from implementationFile after reading:

FOR parenPattern AMP parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 1321, looking ahead at COLON, reducing production
** conjParenPatternElements -> parenPattern AMP parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
conjParenPatternElements // lookahead token is inherited
parenPattern AMP parenPattern . 

** In state 1321, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

conjParenPatternElements 
parenPattern AMP parenPattern 
                 parenPattern . COLON typeWithTypeConstraints 

** Conflict (shift/reduce) in state 1319.
** Token involved: COLON
** This state is reached from implementationFile after reading:

FOR attributes parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 1319, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

attributes parenPattern 
           parenPattern . COLON typeWithTypeConstraints 

** In state 1319, looking ahead at COLON, reducing production
** parenPattern -> attributes parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
attributes parenPattern . 

** Conflict (shift/reduce) in state 1317.
** Token involved: COLON
** This state is reached from implementationFile after reading:

FOR conjParenPatternElements AMP parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 1317, looking ahead at COLON, reducing production
** conjParenPatternElements -> conjParenPatternElements AMP parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
conjParenPatternElements // lookahead token is inherited
conjParenPatternElements AMP parenPattern . 

** In state 1317, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

conjParenPatternElements 
conjParenPatternElements AMP parenPattern 
                             parenPattern . COLON typeWithTypeConstraints 

** Conflict (shift/reduce) in state 1315.
** Token involved: AMP
** This state is reached from implementationFile after reading:

FOR conjParenPatternElements

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    conjParenPatternElements 
    (?)

** In state 1315, looking ahead at AMP, shifting is permitted
** because of the following sub-derivation:

conjParenPatternElements . AMP parenPattern 

** In state 1315, looking ahead at AMP, reducing production
** parenPattern -> conjParenPatternElements
** is permitted because of the following sub-derivation:

parenPattern AMP parenPattern // lookahead token appears
conjParenPatternElements . 

** Conflict (shift/reduce) in state 1308.
** Token involved: COLON
** This state is reached from implementationFile after reading:

FOR parenPattern COLON_COLON parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 1308, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

parenPattern COLON_COLON parenPattern 
                         parenPattern . COLON typeWithTypeConstraints 

** In state 1308, looking ahead at COLON, reducing production
** parenPattern -> parenPattern COLON_COLON parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
parenPattern COLON_COLON parenPattern . 

** Conflict (shift/reduce) in state 1304.
** Token involved: COLON
** This state is reached from implementationFile after reading:

FOR tupleParenPatternElements COMMA parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 1304, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

tupleParenPatternElements 
tupleParenPatternElements COMMA parenPattern 
                                parenPattern . COLON typeWithTypeConstraints 

** In state 1304, looking ahead at COLON, reducing production
** tupleParenPatternElements -> tupleParenPatternElements COMMA parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
tupleParenPatternElements // lookahead token is inherited
tupleParenPatternElements COMMA parenPattern . 

** Conflict (shift/reduce) in state 1294.
** Token involved: COMMA
** This state is reached from implementationFile after reading:

FOR tupleParenPatternElements

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    tupleParenPatternElements 
    (?)

** In state 1294, looking ahead at COMMA, reducing production
** parenPattern -> tupleParenPatternElements
** is permitted because of the following sub-derivation:

parenPattern COMMA parenPattern // lookahead token appears
tupleParenPatternElements . 

** In state 1294, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

tupleParenPatternElements . COMMA parenPattern 

** Conflict (shift/reduce) in state 1272.
** Token involved: COLON
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar parenPattern BAR parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  (?)

** In state 1272, looking ahead at COLON, reducing production
** parenPattern -> parenPattern BAR parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
parenPattern BAR parenPattern . 

** In state 1272, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

parenPattern BAR parenPattern 
                 parenPattern . COLON typeWithTypeConstraints 

** Conflict (shift/reduce) in state 1270.
** Token involved: COLON
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar parenPattern COMMA parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  (?)

** In state 1270, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

tupleParenPatternElements 
parenPattern COMMA parenPattern 
                   parenPattern . COLON typeWithTypeConstraints 

** In state 1270, looking ahead at COLON, reducing production
** tupleParenPatternElements -> parenPattern COMMA parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
tupleParenPatternElements // lookahead token is inherited
parenPattern COMMA parenPattern . 

** Conflict (shift/reduce) in state 1265.
** Token involved: RPAREN
** This state is reached from implementationFile after reading:

OFUN LPAREN LPAREN error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonLambdaExpr 
OFUN atomicPatterns RARROW typedSeqExprBlockR OEND 
     atomicPattern atomicPatterns 
     (?)

** In state 1265, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN parenPatternBody RPAREN 
       parenPattern 
       constrPattern 
       atomicPattern 
       LPAREN error . RPAREN 

** In state 1265, looking ahead at RPAREN, reducing production
** recover -> error
** is permitted because of the following sub-derivation:

LPAREN parenPatternBody RPAREN // lookahead token appears
       parenPattern // lookahead token is inherited
       constrPattern // lookahead token is inherited
       atomicPattern // lookahead token is inherited
       LPAREN recover // lookahead token is inherited
              error . 

** Conflict (shift/reduce) in state 1264.
** Tokens involved: error EOF
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

FOR LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    constrPattern 
    atomicPattern 
    (?)

** In state 1264, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LPAREN . error RPAREN 

** In state 1264, looking ahead at error, reducing production
** parenPatternBody ->
** is permitted because of the following sub-derivation:

LPAREN parenPatternBody recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 1196.
** Tokens involved: PLUS_MINUS_OP PERCENT_OP OLET ODO NEW MINUS LET FOR EXTERN AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
** The following explanations concentrate on token PLUS_MINUS_OP.
** This state is reached from implementationFile after reading:

WHILE hardwhiteDefnBindings declExpr seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      (?)

** In state 1196, looking ahead at PLUS_MINUS_OP, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr COLON typeWithTypeConstraints 
                      declExpr seps seqExpr 
                                    declExpr seps seqExpr 
                                    minusExpr LARROW declExpr 
                                    . PLUS_MINUS_OP minusExpr 

** In state 1196, looking ahead at PLUS_MINUS_OP, reducing production
** seqExpr -> declExpr seps
** is permitted because of the following sub-derivation:

declExpr PLUS_MINUS_OP declExpr // lookahead token appears
hardwhiteDefnBindings typedSeqExprBlock // lookahead token is inherited
                      typedSeqExpr // lookahead token is inherited
                      seqExpr // lookahead token is inherited
                      declExpr seps . 

** Conflict (shift/reduce) in state 1154.
** Tokens involved: PLUS_MINUS_OP PERCENT_OP OLET ODO NEW MINUS LET FOR EXTERN AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
** The following explanations concentrate on token PLUS_MINUS_OP.
** This state is reached from implementationFile after reading:

hardwhiteDefnBindings declExpr seps

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
(?)

** In state 1154, looking ahead at PLUS_MINUS_OP, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr COLON typeWithTypeConstraints 
                      declExpr seps seqExpr 
                                    declExpr seps seqExpr 
                                    minusExpr LARROW declExpr 
                                    . PLUS_MINUS_OP minusExpr 

** In state 1154, looking ahead at PLUS_MINUS_OP, reducing production
** seqExpr -> declExpr seps
** is permitted because of the following sub-derivation:

declExpr PLUS_MINUS_OP declExpr // lookahead token appears
hardwhiteDefnBindings typedSeqExprBlock // lookahead token is inherited
                      typedSeqExpr // lookahead token is inherited
                      seqExpr // lookahead token is inherited
                      declExpr seps . 

** Conflict (shift/reduce) in state 1099.
** Tokens involved: THEN OTHEN
** The following explanations concentrate on token THEN.
** This state is reached from implementationFile after reading:

TRY hardwhiteDefnBindings declExpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
TRY typedSeqExprBlockR withClausses 
    typedSeqExpr ORIGHT_BLOCK_END 
    seqExpr COLON typeWithTypeConstraints 
    (?)

** In state 1099, looking ahead at THEN, reducing production
** seqExpr -> declExpr
** is permitted because of the following sub-derivation:

declExpr THEN seqExpr // lookahead token appears
hardwhiteDefnBindings typedSeqExprBlock // lookahead token is inherited
                      typedSeqExpr // lookahead token is inherited
                      seqExpr // lookahead token is inherited
                      declExpr . 

** In state 1099, looking ahead at THEN, shifting is permitted
** because of the following sub-derivation:

declExpr seps seqExpr 
hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr COLON typeWithTypeConstraints 
                      declExpr . THEN seqExpr 

** Conflict (shift/reduce) in state 1085.
** Tokens involved: COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON
** The following explanations concentrate on token COLON_QMARK_GREATER.
** This state is reached from implementationFile after reading:

TRY hardwhiteDefnBindings seqExpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
TRY typedSeqExprBlockR withClausses 
    typedSeqExpr ORIGHT_BLOCK_END 
    (?)

** In state 1085, looking ahead at COLON_QMARK_GREATER, shifting is permitted
** because of the following sub-derivation:

seqExpr COLON typeWithTypeConstraints 
declExpr seps seqExpr 
hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr . COLON_QMARK_GREATER typ 

** In state 1085, looking ahead at COLON_QMARK_GREATER, reducing production
** typedSeqExpr -> seqExpr
** is permitted because of the following sub-derivation:

seqExpr COLON_QMARK_GREATER typ // lookahead token appears
declExpr // lookahead token is inherited
hardwhiteDefnBindings typedSeqExprBlock // lookahead token is inherited
                      typedSeqExpr // lookahead token is inherited
                      seqExpr . 

** Conflict (shift/reduce) in state 1074.
** Tokens involved: OLET ODO FOR EXTERN
** The following explanations concentrate on token ODO.
** This state is reached from implementationFile after reading:

LBRACK_BAR WHEN ASSERT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
LBRACK_BAR listExprElements BAR_RBRACK 
           monadicExprInitial 
           monadicExprNonEmptyInitial 
           (?)

** In state 1074, looking ahead at ODO, reducing production
** declExpr -> ASSERT
** is permitted because of the following sub-derivation:

monadicWhenCondition do_or_odo monadicExprNonEmptyNonInitialBlock done_term // lookahead token appears because do_or_odo can begin with ODO
WHEN declExpr // lookahead token is inherited
     ASSERT . 

** In state 1074, looking ahead at ODO, shifting is permitted
** because of the following sub-derivation:

monadicWhenCondition monadicSingleLineQualifiersThenArrowThenExprR 
WHEN declExpr 
     ASSERT declExpr 
            hardwhiteDefnBindings typedSeqExprBlock 
            hardwhiteDoBinding 
            . ODO typedSeqExprBlock hardwhiteDefnBindingsTerminator 

** Conflict (shift/reduce) in state 1051.
** Tokens involved: THEN OTHEN
** The following explanations concentrate on token THEN.
** This state is reached from implementationFile after reading:

ODO hardwhiteDefnBindings declExpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteDoBinding 
ODO typedSeqExprBlock hardwhiteDefnBindingsTerminator 
    typedSeqExpr 
    seqExpr COLON typeWithTypeConstraints 
    (?)

** In state 1051, looking ahead at THEN, reducing production
** seqExpr -> declExpr
** is permitted because of the following sub-derivation:

declExpr THEN seqExpr // lookahead token appears
hardwhiteDefnBindings typedSeqExprBlock // lookahead token is inherited
                      typedSeqExpr // lookahead token is inherited
                      seqExpr // lookahead token is inherited
                      declExpr . 

** In state 1051, looking ahead at THEN, shifting is permitted
** because of the following sub-derivation:

declExpr seps seqExpr 
hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr COLON typeWithTypeConstraints 
                      declExpr . THEN seqExpr 

** Conflict (shift/reduce) in state 1024.
** Tokens involved: COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON
** The following explanations concentrate on token COLON_QMARK_GREATER.
** This state is reached from implementationFile after reading:

ODO hardwhiteDefnBindings seqExpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteDoBinding 
ODO typedSeqExprBlock hardwhiteDefnBindingsTerminator 
    typedSeqExpr 
    (?)

** In state 1024, looking ahead at COLON_QMARK_GREATER, shifting is permitted
** because of the following sub-derivation:

seqExpr COLON typeWithTypeConstraints 
declExpr seps seqExpr 
hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr . COLON_QMARK_GREATER typ 

** In state 1024, looking ahead at COLON_QMARK_GREATER, reducing production
** typedSeqExpr -> seqExpr
** is permitted because of the following sub-derivation:

seqExpr COLON_QMARK_GREATER typ // lookahead token appears
declExpr // lookahead token is inherited
hardwhiteDefnBindings typedSeqExprBlock // lookahead token is inherited
                      typedSeqExpr // lookahead token is inherited
                      seqExpr . 

** Conflict (shift/reduce) in state 967.
** Tokens involved: OLET ODO FOR EXTERN
** The following explanations concentrate on token ODO.
** This state is reached from implementationFile after reading:

WHILE ASSERT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
(?)

** In state 967, looking ahead at ODO, reducing production
** declExpr -> ASSERT
** is permitted because of the following sub-derivation:

WHILE declExpr do_or_odo typedSeqExprBlock done_term // lookahead token appears because do_or_odo can begin with ODO
      ASSERT . 

** In state 967, looking ahead at ODO, shifting is permitted
** because of the following sub-derivation:

WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      ASSERT declExpr 
             hardwhiteDefnBindings typedSeqExprBlock 
             hardwhiteDoBinding 
             . ODO typedSeqExprBlock hardwhiteDefnBindingsTerminator 

** Conflict (shift/reduce) in state 896.
** Token involved: COLON
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar parenPattern AMP parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  (?)

** In state 896, looking ahead at COLON, reducing production
** conjParenPatternElements -> parenPattern AMP parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
conjParenPatternElements // lookahead token is inherited
parenPattern AMP parenPattern . 

** In state 896, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

conjParenPatternElements 
parenPattern AMP parenPattern 
                 parenPattern . COLON typeWithTypeConstraints 

** Conflict (shift/reduce) in state 894.
** Token involved: COLON
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar attributes parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  (?)

** In state 894, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

attributes parenPattern 
           parenPattern . COLON typeWithTypeConstraints 

** In state 894, looking ahead at COLON, reducing production
** parenPattern -> attributes parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
attributes parenPattern . 

** Conflict (shift/reduce) in state 892.
** Token involved: COLON
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar conjParenPatternElements AMP parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  (?)

** In state 892, looking ahead at COLON, reducing production
** conjParenPatternElements -> conjParenPatternElements AMP parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
conjParenPatternElements // lookahead token is inherited
conjParenPatternElements AMP parenPattern . 

** In state 892, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

conjParenPatternElements 
conjParenPatternElements AMP parenPattern 
                             parenPattern . COLON typeWithTypeConstraints 

** Conflict (shift/reduce) in state 890.
** Token involved: AMP
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar conjParenPatternElements

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  conjParenPatternElements 
                  (?)

** In state 890, looking ahead at AMP, shifting is permitted
** because of the following sub-derivation:

conjParenPatternElements . AMP parenPattern 

** In state 890, looking ahead at AMP, reducing production
** parenPattern -> conjParenPatternElements
** is permitted because of the following sub-derivation:

parenPattern AMP parenPattern // lookahead token appears
conjParenPatternElements . 

** Conflict (shift/reduce) in state 873.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
braceExpr 
(?)

** In state 873, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACE . error RBRACE 

** In state 873, looking ahead at error, reducing production
** recdExpr ->
** is permitted because of the following sub-derivation:

LBRACE braceExprBody recover // lookahead token appears because recover can begin with error
       recdExpr // lookahead token is inherited
       . 

** Conflict (shift/reduce) in state 869.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
(?)

** In state 869, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK . error RBRACK 

** In state 869, looking ahead at error, reducing production
** listExprElements ->
** is permitted because of the following sub-derivation:

LBRACK listExprElements recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 854.
** Token involved: error
** This state is reached from implementationFile after reading:

LBRACK_BAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
arrayExpr 
(?)

** In state 854, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK_BAR . error BAR_RBRACK 

** In state 854, looking ahead at error, reducing production
** listExprElements ->
** is permitted because of the following sub-derivation:

LBRACK_BAR listExprElements recover // lookahead token appears because recover can begin with error
           . 

** Conflict (shift/reduce) in state 826.
** Token involved: error
** This state is reached from implementationFile after reading:

WHILE LBRACE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      minusExpr LARROW declExpr 
      appExpr 
      argExpr 
      argExprAfterType 
      braceExpr 
      (?)

** In state 826, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACE . error RBRACE 

** In state 826, looking ahead at error, reducing production
** recdExpr ->
** is permitted because of the following sub-derivation:

LBRACE braceExprBody recover // lookahead token appears because recover can begin with error
       recdExpr // lookahead token is inherited
       . 

** Conflict (shift/reduce) in state 819.
** Token involved: error
** This state is reached from implementationFile after reading:

WHILE LBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      minusExpr LARROW declExpr 
      appExpr 
      argExpr 
      (?)

** In state 819, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK . error RBRACK 

** In state 819, looking ahead at error, reducing production
** listExprElements ->
** is permitted because of the following sub-derivation:

LBRACK listExprElements recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 817.
** Tokens involved: error EOF
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

LPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
parenExpr 
LPAREN parenExprBody RPAREN 
       typedSeqExpr 
       seqExpr COLON typeWithTypeConstraints 
       declExpr seps seqExpr 
       minusExpr LARROW declExpr 
       appExpr 
       argExpr 
       argExprAfterType 
       parenExpr 
       (?)

** In state 817, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LPAREN . error RPAREN 

** In state 817, looking ahead at error, reducing production
** parenExprBody ->
** is permitted because of the following sub-derivation:

LPAREN parenExprBody recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 816.
** Tokens involved: error EOF
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

NEW appType opt_HIGH_PRECEDENCE_APP LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
NEW appType opt_HIGH_PRECEDENCE_APP argExprAfterType 
                                    parenExpr 
                                    (?)

** In state 816, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LPAREN . error RPAREN 

** In state 816, looking ahead at error, reducing production
** parenExprBody ->
** is permitted because of the following sub-derivation:

LPAREN parenExprBody recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 804.
** Token involved: error
** This state is reached from implementationFile after reading:

WHILE LBRACK_BAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      minusExpr LARROW declExpr 
      appExpr 
      argExpr 
      argExprAfterType 
      arrayExpr 
      (?)

** In state 804, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LBRACK_BAR . error BAR_RBRACK 

** In state 804, looking ahead at error, reducing production
** listExprElements ->
** is permitted because of the following sub-derivation:

LBRACK_BAR listExprElements recover // lookahead token appears because recover can begin with error
           . 

** Conflict (shift/reduce) in state 802.
** Tokens involved: error EOF
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

WHILE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      minusExpr LARROW declExpr 
      appExpr 
      argExpr 
      argExprAfterType 
      parenExpr 
      (?)

** In state 802, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LPAREN . error RPAREN 

** In state 802, looking ahead at error, reducing production
** parenExprBody ->
** is permitted because of the following sub-derivation:

LPAREN parenExprBody recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 798.
** Token involved: RPAREN
** This state is reached from implementationFile after reading:

argExpr DOT LPAREN LPAREN error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExpr DOT argExprQualification 
            (?)

** In state 798, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN typedSeqExpr RPAREN 
       seqExpr COLON typeWithTypeConstraints 
       declExpr seps seqExpr 
       minusExpr LARROW declExpr 
       appExpr 
       argExpr 
       argExprAfterType 
       parenExpr 
       LPAREN error . RPAREN 

** In state 798, looking ahead at RPAREN, reducing production
** recover -> error
** is permitted because of the following sub-derivation:

LPAREN typedSeqExpr RPAREN // lookahead token appears
       seqExpr // lookahead token is inherited
       declExpr // lookahead token is inherited
       minusExpr // lookahead token is inherited
       appExpr // lookahead token is inherited
       argExpr // lookahead token is inherited
       argExprAfterType // lookahead token is inherited
       parenExpr // lookahead token is inherited
       LPAREN recover // lookahead token is inherited
              error . 

** Conflict (shift/reduce) in state 797.
** Tokens involved: error EOF
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
parenExpr 
(?)

** In state 797, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LPAREN . error RPAREN 

** In state 797, looking ahead at error, reducing production
** parenExprBody ->
** is permitted because of the following sub-derivation:

LPAREN parenExprBody recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 739.
** Token involved: error
** This state is reached from signatureFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS classOrInterfaceOrStruct

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
moduleSpec 
specifications 
moduleOrNamespaceSpfn opt_top_seps specifications 
opt_attributes opt_decl_visibility tyconSpfns 
                                   TYPE tyconSpfn_list 
                                        tyconSpfn AND tyconSpfn_list 
                                        componentInfo EQUALS tyconSpfnRhsBlock 
                                                             tyconSpfnRhs opt_classSpfn 
                                                             tyconClassSpfn 
                                                             (?)

** In state 739, looking ahead at error, reducing production
** classSpfnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classSpfnBlock recover // lookahead token appears because recover can begin with error
                         classSpfnMembers // lookahead token is inherited
                         . 

** In state 739, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct . error END 

** Conflict (shift/reduce) in state 737.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS firstUnionCaseDecl

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
(?)

** In state 737, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             firstUnionCaseDeclOfMany BAR attrUnionCaseDecls 
                                                             firstUnionCaseDecl opt_OBLOCKSEP 
                                                                                . OBLOCKSEP 

** In state 737, looking ahead at OBLOCKSEP, reducing production
** unionRepr -> firstUnionCaseDecl
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn top_seps exprOrDefinitions // lookahead token appears because top_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             firstUnionCaseDecl . 

** Conflict (shift/reduce) in state 731.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS ident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
(?)

** In state 731, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             firstUnionCaseDeclOfMany BAR attrUnionCaseDecls 
                                                             ident opt_OBLOCKSEP 
                                                                   . OBLOCKSEP 

** In state 731, looking ahead at OBLOCKSEP, reducing production
** path -> ident
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn top_seps exprOrDefinitions // lookahead token appears because top_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             typ // lookahead token is inherited
                                                             tupleType // lookahead token is inherited
                                                             appType // lookahead token is inherited
                                                             atomType // lookahead token is inherited
                                                             path // lookahead token is inherited
                                                             ident . 

** Conflict (shift/reduce) in state 716.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName COLON topType

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
(?)

** In state 716, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName COLON topType opt_OBLOCKSEP 
                                                                                                                                . OBLOCKSEP 

** In state 716, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn top_seps exprOrDefinitions // lookahead token appears because top_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName COLON topType opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                                . 

** Conflict (shift/reduce) in state 713.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName EQUALS constant

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
(?)

** In state 713, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName EQUALS constant opt_OBLOCKSEP 
                                                                                                                                  . OBLOCKSEP 

** In state 713, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn top_seps exprOrDefinitions // lookahead token appears because top_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName EQUALS constant opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                                  . 

** Conflict (shift/reduce) in state 694.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName OF unionCaseRepr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
(?)

** In state 694, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName OF unionCaseRepr opt_OBLOCKSEP 
                                                                                                                                   . OBLOCKSEP 

** In state 694, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn top_seps exprOrDefinitions // lookahead token appears because top_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName OF unionCaseRepr opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                                   . 

** Conflict (shift/reduce) in state 692.
** Token involved: OBLOCKSEP
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
(?)

** In state 692, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName opt_OBLOCKSEP 
                                                                                                                  . OBLOCKSEP 

** In state 692, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn top_seps exprOrDefinitions // lookahead token appears because top_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                  . 

** Conflict (shift/reduce) in state 567.
** Token involved: error
** This state is reached from signatureFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN classOrInterfaceOrStruct

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
moduleSpec 
specifications 
moduleOrNamespaceSpfn opt_top_seps specifications 
opt_attributes opt_decl_visibility tyconSpfns 
                                   TYPE tyconSpfn_list 
                                        tyconSpfn AND tyconSpfn_list 
                                        componentInfo EQUALS tyconSpfnRhsBlock 
                                                             OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn 
                                                                         tyconClassSpfn 
                                                                         (?)

** In state 567, looking ahead at error, reducing production
** classSpfnMembers ->
** is permitted because of the following sub-derivation:

classOrInterfaceOrStruct classSpfnBlock recover // lookahead token appears because recover can begin with error
                         classSpfnMembers // lookahead token is inherited
                         . 

** In state 567, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

classOrInterfaceOrStruct . error END 

** Conflict (shift/reduce) in state 564.
** Token involved: OBLOCKSEP
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS firstUnionCaseDecl

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              (?)

** In state 564, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             firstUnionCaseDeclOfMany BAR attrUnionCaseDecls 
                                                             firstUnionCaseDecl opt_OBLOCKSEP 
                                                                                . OBLOCKSEP 

** In state 564, looking ahead at OBLOCKSEP, reducing production
** unionRepr -> firstUnionCaseDecl
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn itop_seps interactiveExprOrDefinitions // lookahead token appears because itop_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             firstUnionCaseDecl . 

** Conflict (shift/reduce) in state 554.
** Token involved: OBLOCKSEP
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS ident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              (?)

** In state 554, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             firstUnionCaseDeclOfMany BAR attrUnionCaseDecls 
                                                             ident opt_OBLOCKSEP 
                                                                   . OBLOCKSEP 

** In state 554, looking ahead at OBLOCKSEP, reducing production
** path -> ident
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn itop_seps interactiveExprOrDefinitions // lookahead token appears because itop_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             typ // lookahead token is inherited
                                                             tupleType // lookahead token is inherited
                                                             appType // lookahead token is inherited
                                                             atomType // lookahead token is inherited
                                                             path // lookahead token is inherited
                                                             ident . 

** Conflict (shift/reduce) in state 550.
** Token involved: WITH
** This state is reached from signatureFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility STATIC TYPE componentInfo EQUALS OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
moduleSpec 
specifications 
moduleOrNamespaceSpfn opt_top_seps specifications 
opt_attributes opt_decl_visibility tyconSpfns 
                                   TYPE tyconSpfn_list 
                                        tyconSpfn AND tyconSpfn_list 
                                        componentInfo EQUALS tyconSpfnRhsBlock 
                                                             (?)

** In state 550, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn 
                                       classMemberSpfn opt_seps classSpfnMembers 
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconSpfn 
                                                                                      componentInfo EQUALS tyconSpfnRhsBlock 
                                                                                                           OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn 
                                                                                                                                                                                           . WITH classSpfnBlock decl_end 

** In state 550, looking ahead at WITH, reducing production
** opt_classSpfn ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn // lookahead token appears because opt_classSpfn can begin with WITH
                                       classMemberSpfn opt_seps classSpfnMembers // lookahead token is inherited because opt_seps classSpfnMembers can vanish
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconSpfn // lookahead token is inherited
                                                                                      componentInfo EQUALS tyconSpfnRhsBlock // lookahead token is inherited
                                                                                                           OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn // lookahead token is inherited
                                                                                                                                                                                           . 

** Conflict (shift/reduce) in state 534.
** Token involved: OBLOCKSEP
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName COLON topType

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              (?)

** In state 534, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName COLON topType opt_OBLOCKSEP 
                                                                                                                                . OBLOCKSEP 

** In state 534, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn itop_seps interactiveExprOrDefinitions // lookahead token appears because itop_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName COLON topType opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                                . 

** Conflict (shift/reduce) in state 531.
** Token involved: OBLOCKSEP
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName EQUALS constant

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              (?)

** In state 531, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName EQUALS constant opt_OBLOCKSEP 
                                                                                                                                  . OBLOCKSEP 

** In state 531, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn itop_seps interactiveExprOrDefinitions // lookahead token appears because itop_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName EQUALS constant opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                                  . 

** Conflict (shift/reduce) in state 522.
** Token involved: OBLOCKSEP
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName OF unionCaseRepr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              (?)

** In state 522, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName OF unionCaseRepr opt_OBLOCKSEP 
                                                                                                                                   . OBLOCKSEP 

** In state 522, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn itop_seps interactiveExprOrDefinitions // lookahead token appears because itop_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName OF unionCaseRepr opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                                   . 

** Conflict (shift/reduce) in state 520.
** Token involved: OBLOCKSEP
** This state is reached from interaction after reading:

opt_itop_seps opt_attributes opt_decl_visibility TYPE componentInfo EQUALS BAR opt_attributes opt_access grab_doc unionCaseName

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

interaction 
opt_itop_seps interactiveExprOrDefinitions 
              interactiveDefinitions 
              (?)

** In state 520, looking ahead at OBLOCKSEP, shifting is permitted
** because of the following sub-derivation:

moduleOrNamespaceDefn interactiveDefinitions 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             unionRepr 
                                                             BAR attrUnionCaseDecls 
                                                                 attrUnionCaseDecl BAR attrUnionCaseDecls 
                                                                 opt_attributes opt_access grab_doc unionCaseName opt_OBLOCKSEP 
                                                                                                                  . OBLOCKSEP 

** In state 520, looking ahead at OBLOCKSEP, reducing production
** opt_OBLOCKSEP ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefn itop_seps interactiveExprOrDefinitions // lookahead token appears because itop_seps can begin with OBLOCKSEP
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList // lookahead token is inherited because tyconDefnList can vanish
                                        componentInfo EQUALS tyconDefnRhsBlock // lookahead token is inherited
                                                             tyconDefnRhs opt_classDefn // lookahead token is inherited because opt_classDefn can vanish
                                                             tyconDefnOrSpfnSimpleRepr // lookahead token is inherited
                                                             unionRepr // lookahead token is inherited
                                                             BAR attrUnionCaseDecls // lookahead token is inherited
                                                                 attrUnionCaseDecl // lookahead token is inherited
                                                                 opt_attributes opt_access grab_doc unionCaseName opt_OBLOCKSEP // lookahead token is inherited
                                                                                                                  . 

** Conflict (shift/reduce) in state 474.
** Token involved: DOT
** This state is reached from implementationFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS LBRACE opt_attributes opt_mutable opt_access ident grab_doc COLON typar

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility TYPE tyconDefn tyconDefnList 
                                        componentInfo EQUALS tyconDefnRhsBlock 
                                                             tyconDefnRhs opt_classDefn 
                                                             tyconDefnOrSpfnSimpleRepr 
                                                             braceFieldDeclList 
                                                             LBRACE recdFieldDeclList RBRACE 
                                                                    recdFieldDecl seps recdFieldDeclList 
                                                                    opt_attributes fieldDecl 
                                                                                   opt_mutable opt_access ident grab_doc COLON polyType 
                                                                                                                               (?)

** In state 474, looking ahead at DOT, reducing production
** atomType -> typar
** is permitted because of the following sub-derivation:

typ 
tupleType RARROW typ 
appType STAR tupleTypeElements 
atomType 
atomType DOT path // lookahead token appears
typar . 

** In state 474, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

typar . DOT typ 

** Conflict (shift/reduce) in state 423.
** Token involved: WITH
** This state is reached from signatureFile after reading:

opt_attributes opt_decl_visibility TYPE componentInfo EQUALS OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP opt_attributes opt_decl_visibility STATIC TYPE componentInfo

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

signatureFile 
namespaceSpecs EOF 
moduleSpec 
specifications 
moduleOrNamespaceSpfn opt_top_seps specifications 
opt_attributes opt_decl_visibility tyconSpfns 
                                   TYPE tyconSpfn_list 
                                        tyconSpfn AND tyconSpfn_list 
                                        componentInfo EQUALS tyconSpfnRhsBlock 
                                                             (?)

** In state 423, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn 
                                       classMemberSpfn opt_seps classSpfnMembers 
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconSpfn 
                                                                                      componentInfo opt_classSpfn 
                                                                                                    . WITH classSpfnBlock decl_end 

** In state 423, looking ahead at WITH, reducing production
** opt_classSpfn ->
** is permitted because of the following sub-derivation:

OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn // lookahead token appears because opt_classSpfn can begin with WITH
                                       classMemberSpfn opt_seps classSpfnMembers // lookahead token is inherited because opt_seps classSpfnMembers can vanish
                                       opt_attributes opt_decl_visibility STATIC TYPE tyconSpfn // lookahead token is inherited
                                                                                      componentInfo opt_classSpfn // lookahead token is inherited
                                                                                                    . 

** Conflict (shift/reduce) in state 394.
** Token involved: LBRACK_LESS
** This state is reached from implementationFile after reading:

FOR attributeList

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 394, looking ahead at LBRACK_LESS, shifting is permitted
** because of the following sub-derivation:

attributes parenPattern 
attributeList attributes 
              attributeList 
              . LBRACK_LESS attributeListElements opt_seps GREATER_RBRACK opt_OBLOCKSEP 

** In state 394, looking ahead at LBRACK_LESS, reducing production
** attributes -> attributeList
** is permitted because of the following sub-derivation:

attributes parenPattern // lookahead token appears because parenPattern can begin with LBRACK_LESS
attributeList . 

** Conflict (shift/reduce) in state 361.
** Token involved: DOT
** This state is reached from implementationFile after reading:

LPAREN staticallyKnownHeadTypars COLON LPAREN opt_attributes opt_decl_visibility VAL opt_mutable opt_access ident grab_doc COLON typar

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
parenExpr 
LPAREN parenExprBody RPAREN 
       staticallyKnownHeadTypars COLON LPAREN classMemberSpfn RPAREN LPAREN typedSeqExpr RPAREN 
                                              opt_attributes opt_decl_visibility VAL fieldDecl 
                                                                                     opt_mutable opt_access ident grab_doc COLON polyType 
                                                                                                                                 (?)

** In state 361, looking ahead at DOT, reducing production
** atomType -> typar
** is permitted because of the following sub-derivation:

typ 
tupleType RARROW typ 
appType STAR tupleTypeElements 
atomType 
atomType DOT path // lookahead token appears
typar . 

** In state 361, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

typar . DOT typ 

** Conflict (shift/reduce) in state 339.
** Token involved: COLON
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar parenPattern COLON_COLON parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  (?)

** In state 339, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

parenPattern COLON_COLON parenPattern 
                         parenPattern . COLON typeWithTypeConstraints 

** In state 339, looking ahead at COLON, reducing production
** parenPattern -> parenPattern COLON_COLON parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
parenPattern COLON_COLON parenPattern . 

** Conflict (shift/reduce) in state 335.
** Token involved: COLON
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar tupleParenPatternElements COMMA parenPattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  (?)

** In state 335, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

tupleParenPatternElements 
tupleParenPatternElements COMMA parenPattern 
                                parenPattern . COLON typeWithTypeConstraints 

** In state 335, looking ahead at COLON, reducing production
** tupleParenPatternElements -> tupleParenPatternElements COMMA parenPattern
** is permitted because of the following sub-derivation:

parenPattern COLON typeWithTypeConstraints // lookahead token appears
tupleParenPatternElements // lookahead token is inherited
tupleParenPatternElements COMMA parenPattern . 

** Conflict (shift/reduce) in state 317.
** Token involved: COMMA
** This state is reached from implementationFile after reading:

OFUNCTION opt_bar tupleParenPatternElements

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonMatchingExpr 
OFUNCTION opt_bar patternClauses OEND 
                  patternAndGuard patternResult 
                  parenPattern patternGuard 
                  tupleParenPatternElements 
                  (?)

** In state 317, looking ahead at COMMA, reducing production
** parenPattern -> tupleParenPatternElements
** is permitted because of the following sub-derivation:

parenPattern COMMA parenPattern // lookahead token appears
tupleParenPatternElements . 

** In state 317, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

tupleParenPatternElements . COMMA parenPattern 

** Conflict (shift/reduce) in state 279.
** Tokens involved: error EOF
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

OFUN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
anonLambdaExpr 
OFUN atomicPatterns RARROW typedSeqExprBlockR OEND 
     atomicPattern atomicPatterns 
     (?)

** In state 279, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LPAREN . error RPAREN 

** In state 279, looking ahead at error, reducing production
** parenPatternBody ->
** is permitted because of the following sub-derivation:

LPAREN parenPatternBody recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 263.
** Token involved: RPAREN
** This state is reached from implementationFile after reading:

LPAREN LPAREN error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
appExpr 
argExpr 
argExprAfterType 
parenExpr 
(?)

** In state 263, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN parenExprBody RPAREN 
       typedSeqExpr 
       seqExpr COLON typeWithTypeConstraints 
       declExpr seps seqExpr 
       minusExpr LARROW declExpr 
       appExpr 
       argExpr 
       argExprAfterType 
       parenExpr 
       LPAREN error . RPAREN 

** In state 263, looking ahead at RPAREN, reducing production
** recover -> error
** is permitted because of the following sub-derivation:

LPAREN parenExprBody RPAREN // lookahead token appears
       typedSeqExpr // lookahead token is inherited
       seqExpr // lookahead token is inherited
       declExpr // lookahead token is inherited
       minusExpr // lookahead token is inherited
       appExpr // lookahead token is inherited
       argExpr // lookahead token is inherited
       argExprAfterType // lookahead token is inherited
       parenExpr // lookahead token is inherited
       LPAREN recover // lookahead token is inherited
              error . 

** Conflict (shift/reduce) in state 262.
** Tokens involved: error EOF
** The following explanations concentrate on token error.
** This state is reached from implementationFile after reading:

WHILE NEW appType opt_HIGH_PRECEDENCE_APP LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
WHILE declExpr do_or_odo typedSeqExprBlock done_term 
      minusExpr LARROW declExpr 
      NEW appType opt_HIGH_PRECEDENCE_APP argExprAfterType 
                                          parenExpr 
                                          (?)

** In state 262, looking ahead at error, shifting is permitted
** because of the following sub-derivation:

LPAREN . error RPAREN 

** In state 262, looking ahead at error, reducing production
** parenExprBody ->
** is permitted because of the following sub-derivation:

LPAREN parenExprBody recover // lookahead token appears because recover can begin with error
       . 

** Conflict (shift/reduce) in state 252.
** Token involved: DOT
** This state is reached from implementationFile after reading:

NEW HASH atomType

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
minusExpr LARROW declExpr 
NEW appType opt_HIGH_PRECEDENCE_APP argExprAfterType 
    atomType 
    (?)

** In state 252, looking ahead at DOT, reducing production
** atomType -> HASH atomType
** is permitted because of the following sub-derivation:

atomType DOT path // lookahead token appears
HASH atomType . 

** In state 252, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

HASH atomType 
     atomType . DOT path 

** Conflict (shift/reduce) in state 231.
** Token involved: DOT
** This state is reached from implementationFile after reading:

TRY seqExpr COLON_QMARK_GREATER HASH atomType

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
TRY typedSeqExprBlockR withClausses 
    typedSeqExpr ORIGHT_BLOCK_END 
    seqExpr COLON_QMARK_GREATER typ 
                                tupleType RARROW typ 
                                appType STAR tupleTypeElements 
                                atomType 
                                (?)

** In state 231, looking ahead at DOT, reducing production
** atomType -> HASH atomType
** is permitted because of the following sub-derivation:

atomType DOT path // lookahead token appears
HASH atomType . 

** In state 231, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

HASH atomType 
     atomType . DOT path 

** Conflict (shift/reduce) in state 189.
** Token involved: COLON_GREATER
** This state is reached from implementationFile after reading:

TRY hardwhiteDefnBindings seqExpr COLON_QMARK_GREATER typar

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
TRY typedSeqExprBlockR withClausses 
    typedSeqExpr ORIGHT_BLOCK_END 
    (?)

** In state 189, looking ahead at COLON_GREATER, shifting is permitted
** because of the following sub-derivation:

seqExpr COLON typeWithTypeConstraints 
declExpr seps seqExpr 
hardwhiteDefnBindings typedSeqExprBlock 
                      typedSeqExpr 
                      seqExpr COLON_QMARK_GREATER typ 
                                                  tupleType RARROW typ 
                                                  appType STAR tupleTypeElements 
                                                  typar . COLON_GREATER typ 

** In state 189, looking ahead at COLON_GREATER, reducing production
** atomType -> typar
** is permitted because of the following sub-derivation:

seqExpr COLON_GREATER typ // lookahead token appears
declExpr // lookahead token is inherited
hardwhiteDefnBindings typedSeqExprBlock // lookahead token is inherited
                      typedSeqExpr // lookahead token is inherited
                      seqExpr COLON_QMARK_GREATER typ // lookahead token is inherited
                                                  tupleType // lookahead token is inherited
                                                  appType // lookahead token is inherited
                                                  atomType // lookahead token is inherited
                                                  typar . 

** Conflict (shift/reduce) in state 128.
** Token involved: COLON_GREATER
** This state is reached from implementationFile after reading:

FOR parenPattern COLON_GREATER typar

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
declExpr top_seps exprOrDefinitions 
FOR parenPattern error done_term 
    (?)

** In state 128, looking ahead at COLON_GREATER, shifting is permitted
** because of the following sub-derivation:

parenPattern COLON_GREATER typ 
                           tupleType RARROW typ 
                           appType STAR tupleTypeElements 
                           typar . COLON_GREATER typ 

** In state 128, looking ahead at COLON_GREATER, reducing production
** atomType -> typar
** is permitted because of the following sub-derivation:

parenPattern COLON_GREATER typ // lookahead token appears
parenPattern COLON_GREATER typ // lookahead token is inherited
                           tupleType // lookahead token is inherited
                           appType // lookahead token is inherited
                           atomType // lookahead token is inherited
                           typar . 

** Conflict (shift/reduce) in state 1.
** Tokens involved: OLET ODO LBRACK_LESS EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:

error

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
moduleOrNamespaceDefns 
error moduleOrNamespaceDefns 
      moduleOrNamespaceDefn moduleOrNamespaceDefns 
      (?)

** In state 1, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

hardwhiteDefnBindings 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 1, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 

** Conflict (shift/reduce) in state 0.
** Tokens involved: OLET ODO EXTERN
** The following explanations concentrate on token OLET.
** This state is reached from implementationFile after reading:



** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementationFile 
namespaceImpls EOF 
moduleImpl 
exprOrDefinitions 
(?)

** In state 0, looking ahead at OLET, shifting is permitted
** because of the following sub-derivation:

declExpr top_seps exprOrDefinitions 
hardwhiteDefnBindings typedSeqExprBlock 
hardwhiteLetBindings 
. OLET opt_rec localBindings hardwhiteDefnBindingsTerminator 

** In state 0, looking ahead at OLET, reducing production
** opt_attributes ->
** is permitted because of the following sub-derivation:

moduleOrNamespaceDefns 
moduleOrNamespaceDefn moduleOrNamespaceDefns 
opt_attributes opt_decl_visibility hardwhiteDefnBindings // lookahead token appears because opt_decl_visibility can vanish and hardwhiteDefnBindings can begin with OLET
. 
