File "fsharp.mly", line 153, characters 21-24:
Warning: the token ASR is unused.
File "fsharp.mly", line 216, characters 21-28:
Warning: the token COMMENT is unused.
File "fsharp.mly", line 152, characters 84-94:
Warning: the token CONSTRAINT is unused.
File "fsharp.mly", line 163, characters 61-72:
Warning: the token CONSTRUCTOR is unused.
File "fsharp.mly", line 157, characters 86-97:
Warning: the token GREATER_DOT is unused.
File "fsharp.mly", line 160, characters 30-44:
Warning: the token GREATER_RBRACE is unused.
File "fsharp.mly", line 156, characters 62-70:
Warning: the token INSTANCE is unused.
File "fsharp.mly", line 138, characters 21-34:
Warning: the token INT32_DOT_DOT is unused.
File "fsharp.mly", line 160, characters 7-18:
Warning: the token LBRACE_LESS is unused.
File "fsharp.mly", line 215, characters 16-27:
Warning: the token LEX_FAILURE is unused.
File "fsharp.mly", line 216, characters 40-52:
Warning: the token LINE_COMMENT is unused.
File "fsharp.mly", line 212, characters 15-21:
Warning: the token ODUMMY is unused.
File "fsharp.mly", line 182, characters 7-13:
Warning: the token ORESET is unused.
File "fsharp.mly", line 152, characters 49-57:
Warning: the token RESERVED is unused.
File "fsharp.mly", line 216, characters 53-64:
Warning: the token STRING_TEXT is unused.
File "fsharp.mly", line 216, characters 29-39:
Warning: the token WHITESPACE is unused.
File "fsharp.mly", line 351, characters 21-28:
Warning: the token decl_do is unused.
File "fsharp.mly", line 351, characters 10-20:
Warning: the token decl_match is unused.
File "fsharp.mly", line 350, characters 53-60:
Warning: the token expr_do is unused.
File "fsharp.mly", line 384, characters 10-18:
Warning: the token expr_not is unused.
File "fsharp.mly", line 396, characters 7-19:
Warning: the token matching_bar is unused.
File "fsharp.mly", line 278, characters 10-25:
Warning: the token prec_args_error is unused.
File "fsharp.mly", line 301, characters 7-20:
Warning: the token prec_defn_sep is unused.
File "fsharp.mly", line 405, characters 10-32:
Warning: the token prec_interaction_empty is unused.
File "fsharp.mly", line 300, characters 18-35:
Warning: the token prec_semiexpr_sep is unused.
Grammar has 276 nonterminal symbols, among which 3 start symbols.
Grammar has 172 terminal symbols.
Grammar has 845 productions.
nullable(wrappedNamedModuleDefn) = false
nullable(withPatternClauses) = false
nullable(withClausses) = false
nullable(valSpfn) = false
nullable(unionRepr) = false
nullable(unionCaseRepr) = false
nullable(unionCaseName) = false
nullable(typedSeqExprBlockR) = false
nullable(typedSeqExprBlock) = false
nullable(typedSeqExpr) = false
nullable(typedExprWithStaticOptimizationsBlock) = false
nullable(typedExprWithStaticOptimizations) = false
nullable(typeWithTypeConstraints) = false
nullable(typeListElements) = true
nullable(typeConstraints) = false
nullable(typeConstraint) = false
nullable(typeArgsActual) = false
nullable(typeArgs) = false
nullable(typarDecl) = false
nullable(typar) = false
nullable(typ) = false
nullable(tyconSpfns) = false
nullable(tyconSpfn_list) = false
nullable(tyconSpfnRhsBlock) = false
nullable(tyconSpfnRhs) = false
nullable(tyconSpfn) = false
nullable(tyconNameAndTyparDecls) = false
nullable(tyconDefnRhsBlock) = false
nullable(tyconDefnRhs) = false
nullable(tyconDefnOrSpfnSimpleRepr) = false
nullable(tyconDefnList) = true
nullable(tyconDefnAugmentation) = false
nullable(tyconDefn) = false
nullable(tyconClassSpfn) = false
nullable(tyconClassDefn) = false
nullable(tupleTypeElements) = false
nullable(tupleType) = false
nullable(tuplePatternElements) = false
nullable(tupleParenPatternElements) = false
nullable(tupleExpr) = false
nullable(top_seps) = false
nullable(top_sep) = false
nullable(topTypeWithTypeConstraints) = false
nullable(topType) = false
nullable(topTupleTypeElements) = false
nullable(topTupleType) = false
nullable(topAppType) = false
nullable(structOrBegin) = false
nullable(staticallyKnownHeadTypars) = false
nullable(staticallyKnownHeadTypar) = false
nullable(staticOptimizationConditions) = false
nullable(staticOptimizationCondition) = false
nullable(staticOptimization) = false
nullable(specifications) = true
nullable(simplePatterns) = false
nullable(simplePatternCommaList) = false
nullable(simplePattern) = false
nullable(signatureFile) = false
nullable(sigOrBegin) = false
nullable(seqExpr) = false
nullable(seps) = false
nullable(recover) = false
nullable(recordPatternElements) = false
nullable(recdFieldDeclList) = false
nullable(recdFieldDecl) = false
nullable(recdExprBindings) = true
nullable(recdExpr) = true
nullable(rangeSequenceExpr) = false
nullable(quoteExpr) = false
nullable(prefixTyparDecls) = false
nullable(prefixTyparDeclList) = false
nullable(postfixTyparDecls) = false
nullable(polyType) = false
nullable(patternResult) = false
nullable(patternGuard) = true
nullable(patternClauses) = false
nullable(patternAndGuard) = false
nullable(pathop) = false
nullable(path) = false
nullable(parenPatternBody) = true
nullable(parenPattern) = false
nullable(parenExprBody) = true
nullable(parenExpr) = false
nullable(opt_typeConstraints) = true
nullable(opt_top_seps) = true
nullable(opt_topReturnTypeWithTypeConstraints) = true
nullable(opt_staticOptimizations) = true
nullable(opt_signature) = true
nullable(opt_seps) = true
nullable(opt_rec) = true
nullable(opt_objExprBindings) = true
nullable(opt_mutable) = true
nullable(opt_literalValue) = true
nullable(opt_itop_seps) = true
nullable(opt_interfaceImplDefn) = true
nullable(opt_inlineAssemblyTypeArg) = true
nullable(opt_inlineAssemblyReturnTypes) = true
nullable(opt_inline) = true
nullable(opt_explicitValTyparDecls2) = true
nullable(opt_explicitValTyparDecls) = true
nullable(opt_decl_visibility) = true
nullable(opt_decl_end) = true
nullable(opt_curriedArgExprs) = true
nullable(opt_classSpfn) = true
nullable(opt_classDefn) = true
nullable(opt_bar) = true
nullable(opt_attributes) = true
nullable(opt_as) = true
nullable(opt_argExprAfterType) = true
nullable(opt_access) = true
nullable(opt_ODECLEND) = true
nullable(opt_OBLOCKSEP) = true
nullable(opt_HIGH_PRECEDENCE_TYAPP) = true
nullable(opt_HIGH_PRECEDENCE_APP) = true
nullable(opt_HASH) = true
nullable(optRange) = false
nullable(operatorName) = false
nullable(openDecl) = false
nullable(objectImplementationMembers) = false
nullable(objectImplementationMember) = false
nullable(objectImplementationBlock) = false
nullable(objExprInterfaces) = true
nullable(objExprInterface) = false
nullable(objExprBindings) = false
nullable(objExprBaseCall) = false
nullable(objExpr) = false
nullable(namespaceSpecs) = true
nullable(namespaceSpecList) = false
nullable(namespaceSpec) = false
nullable(namespaceIntro) = false
nullable(namespaceImpls) = true
nullable(namespaceImplList) = false
nullable(namespaceImpl) = false
nullable(nameop) = false
nullable(namedModuleDefnBlock) = false
nullable(namedModuleAbbrevBlock) = false
nullable(more_localBindings) = true
nullable(moreRecordPatternElements) = true
nullable(moreListPatternElements) = true
nullable(moreListExprElements) = true
nullable(monadicWithPatternClauses) = false
nullable(monadicWithClauses) = false
nullable(monadicWhenCondition) = false
nullable(monadicSingleLineQualifiersThenArrowThenExprR) = false
nullable(monadicPatternResult) = false
nullable(monadicPatternClauses) = false
nullable(monadicIfExprThen) = false
nullable(monadicIfExprElifs) = true
nullable(monadicIfExprCases) = false
nullable(monadicExprNonEmptyNonInitialBlockR) = false
nullable(monadicExprNonEmptyNonInitialBlock) = false
nullable(monadicExprNonEmptyNonInitial) = false
nullable(monadicExprNonEmptyInitial) = false
nullable(monadicExprInitial) = false
nullable(monadicExprBindings) = false
nullable(monadicExpr) = true
nullable(moduleSpecBlock) = false
nullable(moduleSpec) = true
nullable(moduleOrNamespaceSpfn) = false
nullable(moduleOrNamespaceDefns) = true
nullable(moduleOrNamespaceDefn) = false
nullable(moduleIntro) = false
nullable(moduleImpl) = true
nullable(minusExpr) = false
nullable(memberSpecFlags) = false
nullable(memberOrOverride) = false
nullable(memberFlags) = false
nullable(memberCore) = false
nullable(localBindings) = false
nullable(localBinding) = false
nullable(listPatternElements) = true
nullable(listExprElements) = true
nullable(itop_seps) = false
nullable(itop_sep) = false
nullable(interfaceMember) = false
nullable(interactiveTerminator) = false
nullable(interactiveExprOrDefinitions) = false
nullable(interactiveDefinitions) = false
nullable(interaction) = false
nullable(inlineAssemblyTyconRepr) = false
nullable(inlineAssemblyExpr) = false
nullable(inheritsDefn) = false
nullable(implementationFile) = false
nullable(ifExprThen) = false
nullable(ifExprElifs) = true
nullable(ifExprCases) = false
nullable(identop) = false
nullable(ident) = false
nullable(headBindingPattern) = false
nullable(hashDirectiveArgs) = true
nullable(hashDirectiveArg) = false
nullable(hashDirective) = false
nullable(hardwhiteLetBindings) = false
nullable(hardwhiteDoBinding) = false
nullable(hardwhiteDefnBindingsTerminator) = false
nullable(hardwhiteDefnBindings) = false
nullable(grab_doc) = true
nullable(forLoopRange) = false
nullable(forLoopBinder) = false
nullable(firstUnionCaseDeclOfMany) = false
nullable(firstUnionCaseDecl) = false
nullable(fieldDecl) = false
nullable(exprOrDefinitions) = true
nullable(explicitValTyparDeclsCore) = true
nullable(explicitValTyparDecls) = false
nullable(exconSpfn) = false
nullable(exconRepr) = true
nullable(exconIntro) = false
nullable(exconDefn) = false
nullable(exconCore) = false
nullable(done_term) = false
nullable(do_or_odo) = false
nullable(doBinding) = false
nullable(direction) = false
nullable(deprecated_opt_equals) = true
nullable(defnBindings) = false
nullable(decl_end) = false
nullable(declExpr) = false
nullable(constrPattern) = false
nullable(constant) = false
nullable(conjPatternElements) = false
nullable(conjParenPatternElements) = false
nullable(componentInfo) = false
nullable(colonOrEquals) = false
nullable(classSpfnMembers) = true
nullable(classSpfnBlockKindUnspecified) = false
nullable(classSpfnBlock) = true
nullable(classOrInterfaceOrStruct) = false
nullable(classMemberSpfnGetSetElements) = false
nullable(classMemberSpfnGetSet) = true
nullable(classMemberSpfn) = false
nullable(classDefnMembers) = true
nullable(classDefnMemberGetSetElements) = false
nullable(classDefnMemberGetSetElement) = false
nullable(classDefnMemberGetSet) = false
nullable(classDefnMember) = false
nullable(classDefnBlockKindUnspecified) = false
nullable(classDefnBlock) = true
nullable(cType) = false
nullable(cRetType) = false
nullable(cPrototype) = false
nullable(cMoreArgs) = false
nullable(cArgs) = true
nullable(cArg) = false
nullable(braceFieldDeclList) = false
nullable(braceExprBody) = true
nullable(braceExpr) = false
nullable(bindingPattern) = false
nullable(beginEndExpr) = false
nullable(barNames) = false
nullable(attributes) = false
nullable(attributeTarget) = false
nullable(attributeListElements) = false
nullable(attributeList) = false
nullable(attribute) = false
nullable(attr_localBinding) = false
nullable(attrUnionCaseDecls) = false
nullable(attrUnionCaseDecl) = false
nullable(atomicPatterns) = false
nullable(atomicPatternLongIdent) = false
nullable(atomicPattern) = false
nullable(atomType) = false
nullable(asSpec) = false
nullable(arrayTypeSuffix) = false
nullable(arrayExpr) = false
nullable(argExprQualification) = false
nullable(argExprNoHPA) = false
nullable(argExprAfterType) = false
nullable(argExpr) = false
nullable(appTypePrexifArguments) = false
nullable(appType) = false
nullable(appExpr) = false
nullable(anonMatchingExpr) = false
nullable(anonLambdaExpr) = false
nullable(access) = false
nullable(abstractMemberFlags) = false
first(wrappedNamedModuleDefn) = STRUCT BEGIN
first(withPatternClauses) = error UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT BAR ADJACENT_PREFIX_PLUS_MINUS_OP
first(withClausses) = WITH OWITH
first(valSpfn) = VAL PUBLIC PRIVATE LBRACK_LESS INTERNAL
first(unionRepr) = IDENT BAR
first(unionCaseRepr) = UNDERSCORE QUOTE LPAREN LBRACE INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(unionCaseName) = LPAREN IDENT
first(typedSeqExprBlockR) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(typedSeqExprBlock) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO OBLOCKBEGIN NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(typedSeqExpr) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(typedExprWithStaticOptimizationsBlock) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO OBLOCKBEGIN NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(typedExprWithStaticOptimizations) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(typeWithTypeConstraints) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(typeListElements) = COMMA
first(typeConstraints) = QUOTE LPAREN INFIX_AT_HAT_OP DOLLAR DEFAULT
first(typeConstraint) = QUOTE LPAREN INFIX_AT_HAT_OP DOLLAR DEFAULT
first(typeArgsActual) = LESS
first(typeArgs) = LESS HIGH_PRECEDENCE_TYAPP
first(typarDecl) = QUOTE LBRACK_LESS INFIX_AT_HAT_OP DOLLAR
first(typar) = QUOTE INFIX_AT_HAT_OP DOLLAR
first(typ) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(tyconSpfns) = TYPE
first(tyconSpfn_list) = QUOTE PUBLIC PRIVATE LPAREN LBRACK_LESS INTERNAL INFIX_AT_HAT_OP IDENT DOLLAR
first(tyconSpfnRhsBlock) = UNDERSCORE STRUCT QUOTE OBLOCKBEGIN LPAREN LBRACE INTERFACE INFIX_AT_HAT_OP IDENT HASH DOLLAR DELEGATE CLASS BAR
first(tyconSpfnRhs) = UNDERSCORE STRUCT QUOTE OBLOCKBEGIN LPAREN LBRACE INTERFACE INFIX_AT_HAT_OP IDENT HASH DOLLAR DELEGATE CLASS BAR
first(tyconSpfn) = QUOTE PUBLIC PRIVATE LPAREN LBRACK_LESS INTERNAL INFIX_AT_HAT_OP IDENT DOLLAR
first(tyconNameAndTyparDecls) = QUOTE PUBLIC PRIVATE LPAREN INTERNAL INFIX_AT_HAT_OP IDENT DOLLAR
first(tyconDefnRhsBlock) = UNDERSCORE STRUCT QUOTE OBLOCKBEGIN LPAREN LBRACE INTERFACE INFIX_AT_HAT_OP IDENT HASH DOLLAR DELEGATE CLASS BAR
first(tyconDefnRhs) = UNDERSCORE STRUCT QUOTE OBLOCKBEGIN LPAREN LBRACE INTERFACE INFIX_AT_HAT_OP IDENT HASH DOLLAR DELEGATE CLASS BAR
first(tyconDefnOrSpfnSimpleRepr) = UNDERSCORE QUOTE LPAREN LBRACE INFIX_AT_HAT_OP IDENT HASH DOLLAR BAR
first(tyconDefnList) = AND
first(tyconDefnAugmentation) = WITH
first(tyconDefn) = QUOTE PUBLIC PRIVATE LPAREN LBRACK_LESS INTERNAL INFIX_AT_HAT_OP IDENT DOLLAR
first(tyconClassSpfn) = STRUCT OBLOCKBEGIN INTERFACE CLASS
first(tyconClassDefn) = STRUCT OBLOCKBEGIN INTERFACE CLASS
first(tupleTypeElements) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(tupleType) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(tuplePatternElements) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(tupleParenPatternElements) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(tupleExpr) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(top_seps) = SEMICOLON_SEMICOLON SEMICOLON OBLOCKSEP
first(top_sep) = SEMICOLON_SEMICOLON SEMICOLON OBLOCKSEP
first(topTypeWithTypeConstraints) = UNDERSCORE QUOTE QMARK LPAREN LBRACK_LESS INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(topType) = UNDERSCORE QUOTE QMARK LPAREN LBRACK_LESS INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(topTupleTypeElements) = UNDERSCORE QUOTE QMARK LPAREN LBRACK_LESS INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(topTupleType) = UNDERSCORE QUOTE QMARK LPAREN LBRACK_LESS INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(topAppType) = UNDERSCORE QUOTE QMARK LPAREN LBRACK_LESS INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(structOrBegin) = STRUCT BEGIN
first(staticallyKnownHeadTypars) = LPAREN INFIX_AT_HAT_OP
first(staticallyKnownHeadTypar) = INFIX_AT_HAT_OP
first(staticOptimizationConditions) = QUOTE INFIX_AT_HAT_OP DOLLAR
first(staticOptimizationCondition) = QUOTE INFIX_AT_HAT_OP DOLLAR
first(staticOptimization) = WHEN
first(specifications) = error VAL TYPE PUBLIC PRIVATE OPEN MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION
first(simplePatterns) = LPAREN
first(simplePatternCommaList) = QMARK LBRACK_LESS IDENT
first(simplePattern) = QMARK LBRACK_LESS IDENT
first(signatureFile) = error VAL TYPE PUBLIC PRIVATE OPEN NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EOF
first(sigOrBegin) = SIG BEGIN
first(seqExpr) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(seps) = SEMICOLON OBLOCKSEP
first(recover) = error EOF
first(recordPatternElements) = IDENT
first(recdFieldDeclList) = PUBLIC PRIVATE MUTABLE LBRACK_LESS INTERNAL IDENT
first(recdFieldDecl) = PUBLIC PRIVATE MUTABLE LBRACK_LESS INTERNAL IDENT
first(recdExprBindings) = SEMICOLON OBLOCKSEP
first(recdExpr) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PREFIX_OP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INHERIT IEEE64 IEEE32 IDENT FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN
first(rangeSequenceExpr) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(quoteExpr) = LQUOTE
first(prefixTyparDecls) = QUOTE LPAREN INFIX_AT_HAT_OP DOLLAR
first(prefixTyparDeclList) = QUOTE LBRACK_LESS INFIX_AT_HAT_OP DOLLAR
first(postfixTyparDecls) = LESS HIGH_PRECEDENCE_TYAPP
first(polyType) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(patternResult) = RARROW
first(patternGuard) = WHEN
first(patternClauses) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(patternAndGuard) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(pathop) = LPAREN IDENT
first(path) = IDENT
first(parenPatternBody) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(parenPattern) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(parenExprBody) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 INFIX_AT_HAT_OP IF IEEE64 IEEE32 IDENT HASH FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(parenExpr) = LPAREN
first(opt_typeConstraints) = WHEN
first(opt_top_seps) = SEMICOLON_SEMICOLON SEMICOLON OBLOCKSEP
first(opt_topReturnTypeWithTypeConstraints) = COLON
first(opt_staticOptimizations) = WHEN
first(opt_signature) = COLON
first(opt_seps) = SEMICOLON OBLOCKSEP
first(opt_rec) = REC
first(opt_objExprBindings) = WITH OWITH
first(opt_mutable) = MUTABLE
first(opt_literalValue) = EQUALS
first(opt_itop_seps) = SEMICOLON OBLOCKSEP
first(opt_interfaceImplDefn) = WITH
first(opt_inlineAssemblyTypeArg) = TYPE
first(opt_inlineAssemblyReturnTypes) = COLON
first(opt_inline) = INLINE
first(opt_explicitValTyparDecls2) = LESS HIGH_PRECEDENCE_TYAPP
first(opt_explicitValTyparDecls) = LESS HIGH_PRECEDENCE_TYAPP
first(opt_decl_visibility) = PUBLIC PRIVATE INTERNAL
first(opt_decl_end) = OEND ODECLEND END
first(opt_curriedArgExprs) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PREFIX_OP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN
first(opt_classSpfn) = WITH
first(opt_classDefn) = WITH
first(opt_bar) = BAR
first(opt_attributes) = LBRACK_LESS
first(opt_as) = AS
first(opt_argExprAfterType) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN
first(opt_access) = PUBLIC PRIVATE INTERNAL
first(opt_ODECLEND) = ODECLEND
first(opt_OBLOCKSEP) = OBLOCKSEP
first(opt_HIGH_PRECEDENCE_TYAPP) = HIGH_PRECEDENCE_TYAPP
first(opt_HIGH_PRECEDENCE_APP) = HIGH_PRECEDENCE_APP
first(opt_HASH) = HASH
first(optRange) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING STAR SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DOT_DOT DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(operatorName) = STAR SPLICE_SYMBOL PREFIX_OP PLUS_MINUS_OP PERCENT_OP OR MINUS LQUOTE LESS INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP GREATER FUNKY_OPERATOR_NAME EQUALS DOT_DOT DOT DOLLAR COLON_EQUALS BAR_BAR AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(openDecl) = OPEN
first(objectImplementationMembers) = OVERRIDE MEMBER LBRACK_LESS
first(objectImplementationMember) = OVERRIDE MEMBER LBRACK_LESS
first(objectImplementationBlock) = OVERRIDE OBLOCKBEGIN MEMBER LBRACK_LESS
first(objExprInterfaces) = error OINTERFACE_MEMBER INTERFACE
first(objExprInterface) = OINTERFACE_MEMBER INTERFACE
first(objExprBindings) = WITH OWITH
first(objExprBaseCall) = NEW
first(objExpr) = NEW
first(namespaceSpecs) = error VAL TYPE PUBLIC PRIVATE OPEN NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION
first(namespaceSpecList) = NAMESPACE LBRACK_LESS
first(namespaceSpec) = NAMESPACE LBRACK_LESS
first(namespaceIntro) = NAMESPACE
first(namespaceImpls) = error WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT NAMESPACE MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(namespaceImplList) = NAMESPACE LBRACK_LESS
first(namespaceImpl) = NAMESPACE LBRACK_LESS
first(nameop) = LPAREN IDENT
first(namedModuleDefnBlock) = STRUCT OBLOCKBEGIN BEGIN
first(namedModuleAbbrevBlock) = OBLOCKBEGIN IDENT
first(more_localBindings) = AND
first(moreRecordPatternElements) = SEMICOLON OBLOCKSEP
first(moreListPatternElements) = SEMICOLON OBLOCKSEP
first(moreListExprElements) = SEMICOLON OBLOCKSEP
first(monadicWithPatternClauses) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT BAR ADJACENT_PREFIX_PLUS_MINUS_OP
first(monadicWithClauses) = WITH OWITH
first(monadicWhenCondition) = WHEN
first(monadicSingleLineQualifiersThenArrowThenExprR) = WHEN RARROW2 RARROW FOR
first(monadicPatternResult) = RARROW
first(monadicPatternClauses) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(monadicIfExprThen) = THEN OTHEN
first(monadicIfExprElifs) = OELSE ELSE ELIF
first(monadicIfExprCases) = THEN OTHEN
first(monadicExprNonEmptyNonInitialBlockR) = YIELD_BANG YIELD WHILE WHEN TRY RARROW2 RARROW OLET ODO_BANG ODO OBINDER MATCH LET IF FOR EXTERN DO_BANG DO BINDER
first(monadicExprNonEmptyNonInitialBlock) = YIELD_BANG YIELD WHILE WHEN TRY RARROW2 RARROW OLET ODO_BANG ODO OBLOCKBEGIN OBINDER MATCH LET IF FOR EXTERN DO_BANG DO BINDER
first(monadicExprNonEmptyNonInitial) = YIELD_BANG YIELD WHILE WHEN TRY RARROW2 RARROW OLET ODO_BANG ODO OBINDER MATCH LET IF FOR EXTERN DO_BANG DO BINDER
first(monadicExprNonEmptyInitial) = YIELD_BANG YIELD WHILE WHEN TRY RARROW2 RARROW OLET ODO_BANG ODO OBINDER MATCH LET IF FOR EXTERN DO_BANG DO BINDER
first(monadicExprInitial) = YIELD_BANG YIELD WHILE WHEN UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL RARROW2 RARROW QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO_BANG ODO OBINDER NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DO_BANG DOWNCAST DO DECIMAL CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(monadicExprBindings) = OLET ODO_BANG ODO OBINDER LET EXTERN DO_BANG DO BINDER
first(monadicExpr) = error YIELD_BANG YIELD WHILE WHEN TRY RARROW2 RARROW OLET ODO_BANG ODO OBINDER MATCH LET IF FOR EXTERN DO_BANG DO BINDER
first(moduleSpecBlock) = SIG OBLOCKBEGIN BEGIN
first(moduleSpec) = error VAL TYPE PUBLIC PRIVATE OPEN MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION
first(moduleOrNamespaceSpfn) = VAL TYPE PUBLIC PRIVATE OPEN MODULE LBRACK_LESS INTERNAL EXCEPTION
first(moduleOrNamespaceDefns) = error TYPE PUBLIC PRIVATE OPEN OLET ODO MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION DO
first(moduleOrNamespaceDefn) = TYPE PUBLIC PRIVATE OPEN OLET ODO MODULE LET LBRACK_LESS INTERNAL EXTERN EXCEPTION DO
first(moduleIntro) = MODULE
first(moduleImpl) = error WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(minusExpr) = UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP NULL NEW NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(memberSpecFlags) = VIRTUAL STATIC OVERRIDE METHOD MEMBER DEFAULT ABSTRACT
first(memberOrOverride) = OVERRIDE MEMBER
first(memberFlags) = VIRTUAL STATIC OVERRIDE METHOD MEMBER DEFAULT
first(memberCore) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(localBindings) = error UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MUTABLE MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DO DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(localBinding) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MUTABLE MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(listPatternElements) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(listExprElements) = YIELD_BANG YIELD WHILE WHEN UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL RARROW2 RARROW QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO_BANG ODO OBINDER NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DO_BANG DOWNCAST DO DECIMAL CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(itop_seps) = SEMICOLON OBLOCKSEP
first(itop_sep) = SEMICOLON OBLOCKSEP
first(interfaceMember) = OINTERFACE_MEMBER INTERFACE
first(interactiveTerminator) = SEMICOLON_SEMICOLON EOF
first(interactiveExprOrDefinitions) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL SEMICOLON_SEMICOLON QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(interactiveDefinitions) = TYPE SEMICOLON_SEMICOLON PUBLIC PRIVATE OPEN OLET ODO MODULE LET LBRACK_LESS INTERNAL EXTERN EXCEPTION EOF DO
first(interaction) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO OBLOCKSEP NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(inlineAssemblyTyconRepr) = HASH
first(inlineAssemblyExpr) = HASH
first(inheritsDefn) = INHERIT
first(implementationFile) = error WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT NAMESPACE MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(ifExprThen) = THEN OTHEN
first(ifExprElifs) = OELSE ELSE ELIF
first(ifExprCases) = THEN OTHEN
first(identop) = LPAREN IDENT
first(ident) = IDENT
first(headBindingPattern) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(hashDirectiveArgs) = STRING
first(hashDirectiveArg) = STRING
first(hashDirective) = HASH_KEYWORD HASH
first(hardwhiteLetBindings) = OLET
first(hardwhiteDoBinding) = ODO
first(hardwhiteDefnBindingsTerminator) = error ODECLEND EOF
first(hardwhiteDefnBindings) = OLET ODO
first(grab_doc) = 
first(forLoopRange) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(forLoopBinder) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(firstUnionCaseDeclOfMany) = IDENT
first(firstUnionCaseDecl) = IDENT
first(fieldDecl) = PUBLIC PRIVATE MUTABLE INTERNAL IDENT
first(exprOrDefinitions) = error WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(explicitValTyparDeclsCore) = QUOTE LBRACK_LESS INFIX_AT_HAT_OP DOT_DOT DOLLAR
first(explicitValTyparDecls) = LESS HIGH_PRECEDENCE_TYAPP
first(exconSpfn) = EXCEPTION
first(exconRepr) = EQUALS
first(exconIntro) = IDENT
first(exconDefn) = EXCEPTION
first(exconCore) = EXCEPTION
first(done_term) = ODECLEND DONE
first(do_or_odo) = ODO DO
first(doBinding) = DO
first(direction) = TO DOWNTO
first(deprecated_opt_equals) = EQUALS
first(defnBindings) = LET EXTERN
first(decl_end) = OEND ODECLEND END
first(declExpr) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(constrPattern) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(constant) = UNATIVEINT UINT8 UINT64 UINT32 UINT16 STRING NATIVEINT INT8 INT64 INT32 INT16 IEEE64 IEEE32 DECIMAL CHAR BYTEARRAY BIGNUM BIGINT
first(conjPatternElements) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(conjParenPatternElements) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(componentInfo) = QUOTE PUBLIC PRIVATE LPAREN LBRACK_LESS INTERNAL INFIX_AT_HAT_OP IDENT DOLLAR
first(colonOrEquals) = EQUALS COLON
first(classSpfnMembers) = VIRTUAL VAL STATIC PUBLIC PRIVATE OVERRIDE OINTERFACE_MEMBER NEW METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT DEFAULT ABSTRACT
first(classSpfnBlockKindUnspecified) = OBLOCKBEGIN
first(classSpfnBlock) = VIRTUAL VAL STATIC PUBLIC PRIVATE OVERRIDE OINTERFACE_MEMBER OBLOCKBEGIN NEW METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT DEFAULT ABSTRACT
first(classOrInterfaceOrStruct) = STRUCT INTERFACE CLASS
first(classMemberSpfnGetSetElements) = LPAREN IDENT
first(classMemberSpfnGetSet) = WITH OWITH
first(classMemberSpfn) = VIRTUAL VAL STATIC PUBLIC PRIVATE OVERRIDE OINTERFACE_MEMBER NEW METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT DEFAULT ABSTRACT
first(classDefnMembers) = error VIRTUAL VAL STATIC PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER ODO NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN DO DEFAULT ABSTRACT
first(classDefnMemberGetSetElements) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(classDefnMemberGetSetElement) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(classDefnMemberGetSet) = WITH OWITH
first(classDefnMember) = VIRTUAL VAL STATIC PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER ODO NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN DO DEFAULT ABSTRACT
first(classDefnBlockKindUnspecified) = OBLOCKBEGIN
first(classDefnBlock) = error VIRTUAL VAL STATIC PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER ODO OBLOCKBEGIN NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN DO DEFAULT ABSTRACT
first(cType) = VOID IDENT
first(cRetType) = VOID LBRACK_LESS IDENT
first(cPrototype) = EXTERN
first(cMoreArgs) = VOID LBRACK_LESS IDENT
first(cArgs) = VOID LBRACK_LESS IDENT
first(cArg) = VOID LBRACK_LESS IDENT
first(braceFieldDeclList) = LBRACE
first(braceExprBody) = YIELD_BANG YIELD WHILE WHEN UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL RARROW2 RARROW QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO_BANG ODO OBINDER NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 INHERIT IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DO_BANG DOWNCAST DO DECIMAL CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
first(braceExpr) = LBRACE
first(bindingPattern) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(beginEndExpr) = BEGIN
first(barNames) = BAR
first(attributes) = LBRACK_LESS
first(attributeTarget) = YIELD TYPE MODULE IDENT
first(attributeListElements) = YIELD TYPE MODULE IDENT
first(attributeList) = LBRACK_LESS
first(attribute) = YIELD TYPE MODULE IDENT
first(attr_localBinding) = error UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MUTABLE MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DO DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(attrUnionCaseDecls) = PUBLIC PRIVATE LPAREN LBRACK_LESS INTERNAL IDENT
first(attrUnionCaseDecl) = PUBLIC PRIVATE LPAREN LBRACK_LESS INTERNAL IDENT
first(atomicPatterns) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(atomicPatternLongIdent) = PUBLIC PRIVATE LPAREN INTERNAL IDENT
first(atomicPattern) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
first(atomType) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(asSpec) = AS
first(arrayTypeSuffix) = LBRACK
first(arrayExpr) = LBRACK_BAR
first(argExprQualification) = error LPAREN LBRACK INT32 IDENT EOF
first(argExprNoHPA) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PREFIX_OP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN
first(argExprAfterType) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN
first(argExpr) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PREFIX_OP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN
first(appTypePrexifArguments) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(appType) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
first(appExpr) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PREFIX_OP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN
first(anonMatchingExpr) = OFUNCTION FUNCTION
first(anonLambdaExpr) = OFUN FUN
first(access) = PUBLIC PRIVATE INTERNAL
first(abstractMemberFlags) = ABSTRACT
minimal(wrappedNamedModuleDefn) = (* 2 *) STRUCT END
minimal(withPatternClauses) = (* 3 *) UNDERSCORE RARROW ASSERT
minimal(withClausses) = (* 4 *) WITH UNDERSCORE RARROW ASSERT
minimal(valSpfn) = (* 4 *) VAL IDENT COLON UNDERSCORE
minimal(unionRepr) = (* 2 *) BAR IDENT
minimal(unionCaseRepr) = (* 1 *) UNDERSCORE
minimal(unionCaseName) = (* 1 *) IDENT
minimal(typedSeqExprBlockR) = (* 1 *) ASSERT
minimal(typedSeqExprBlock) = (* 1 *) ASSERT
minimal(typedSeqExpr) = (* 1 *) ASSERT
minimal(typedExprWithStaticOptimizationsBlock) = (* 1 *) ASSERT
minimal(typedExprWithStaticOptimizations) = (* 1 *) ASSERT
minimal(typeWithTypeConstraints) = (* 1 *) UNDERSCORE
minimal(typeListElements) = (* 0 *)
minimal(typeConstraints) = (* 4 *) QUOTE IDENT COLON_GREATER UNDERSCORE
minimal(typeConstraint) = (* 4 *) QUOTE IDENT COLON_GREATER UNDERSCORE
minimal(typeArgsActual) = (* 2 *) LESS GREATER
minimal(typeArgs) = (* 2 *) LESS GREATER
minimal(typarDecl) = (* 2 *) QUOTE IDENT
minimal(typar) = (* 2 *) QUOTE IDENT
minimal(typ) = (* 1 *) UNDERSCORE
minimal(tyconSpfns) = (* 2 *) TYPE IDENT
minimal(tyconSpfn_list) = (* 1 *) IDENT
minimal(tyconSpfnRhsBlock) = (* 1 *) UNDERSCORE
minimal(tyconSpfnRhs) = (* 1 *) UNDERSCORE
minimal(tyconSpfn) = (* 1 *) IDENT
minimal(tyconNameAndTyparDecls) = (* 1 *) IDENT
minimal(tyconDefnRhsBlock) = (* 1 *) UNDERSCORE
minimal(tyconDefnRhs) = (* 1 *) UNDERSCORE
minimal(tyconDefnOrSpfnSimpleRepr) = (* 1 *) UNDERSCORE
minimal(tyconDefnList) = (* 0 *)
minimal(tyconDefnAugmentation) = (* 2 *) WITH ODECLEND
minimal(tyconDefn) = (* 3 *) IDENT EQUALS UNDERSCORE
minimal(tyconClassSpfn) = (* 2 *) OBLOCKBEGIN OBLOCKEND
minimal(tyconClassDefn) = (* 2 *) OBLOCKBEGIN OBLOCKEND
minimal(tupleTypeElements) = (* 1 *) UNDERSCORE
minimal(tupleType) = (* 1 *) UNDERSCORE
minimal(tuplePatternElements) = (* 3 *) UNDERSCORE COMMA UNDERSCORE
minimal(tupleParenPatternElements) = (* 3 *) UNDERSCORE COMMA UNDERSCORE
minimal(tupleExpr) = (* 3 *) ASSERT COMMA ASSERT
minimal(top_seps) = (* 1 *) SEMICOLON
minimal(top_sep) = (* 1 *) SEMICOLON
minimal(topTypeWithTypeConstraints) = (* 1 *) UNDERSCORE
minimal(topType) = (* 1 *) UNDERSCORE
minimal(topTupleTypeElements) = (* 1 *) UNDERSCORE
minimal(topTupleType) = (* 1 *) UNDERSCORE
minimal(topAppType) = (* 1 *) UNDERSCORE
minimal(structOrBegin) = (* 1 *) STRUCT
minimal(staticallyKnownHeadTypars) = (* 2 *) INFIX_AT_HAT_OP IDENT
minimal(staticallyKnownHeadTypar) = (* 2 *) INFIX_AT_HAT_OP IDENT
minimal(staticOptimizationConditions) = (* 4 *) QUOTE IDENT COLON UNDERSCORE
minimal(staticOptimizationCondition) = (* 4 *) QUOTE IDENT COLON UNDERSCORE
minimal(staticOptimization) = (* 7 *) WHEN QUOTE IDENT COLON UNDERSCORE EQUALS ASSERT
minimal(specifications) = (* 0 *)
minimal(simplePatterns) = (* 2 *) LPAREN RPAREN
minimal(simplePatternCommaList) = (* 1 *) IDENT
minimal(simplePattern) = (* 1 *) IDENT
minimal(signatureFile) = (* 1 *) EOF
minimal(sigOrBegin) = (* 1 *) SIG
minimal(seqExpr) = (* 1 *) ASSERT
minimal(seps) = (* 1 *) OBLOCKSEP
minimal(recover) = (* 1 *) EOF
minimal(recordPatternElements) = (* 3 *) IDENT EQUALS UNDERSCORE
minimal(recdFieldDeclList) = (* 3 *) IDENT COLON UNDERSCORE
minimal(recdFieldDecl) = (* 3 *) IDENT COLON UNDERSCORE
minimal(recdExprBindings) = (* 0 *)
minimal(recdExpr) = (* 0 *)
minimal(rangeSequenceExpr) = (* 3 *) ASSERT TO ASSERT
minimal(quoteExpr) = (* 3 *) LQUOTE ASSERT RQUOTE
minimal(prefixTyparDecls) = (* 2 *) QUOTE IDENT
minimal(prefixTyparDeclList) = (* 2 *) QUOTE IDENT
minimal(postfixTyparDecls) = (* 4 *) LESS QUOTE IDENT GREATER
minimal(polyType) = (* 1 *) UNDERSCORE
minimal(patternResult) = (* 2 *) RARROW ASSERT
minimal(patternGuard) = (* 0 *)
minimal(patternClauses) = (* 3 *) UNDERSCORE RARROW ASSERT
minimal(patternAndGuard) = (* 1 *) UNDERSCORE
minimal(pathop) = (* 1 *) IDENT
minimal(path) = (* 1 *) IDENT
minimal(parenPatternBody) = (* 0 *)
minimal(parenPattern) = (* 1 *) UNDERSCORE
minimal(parenExprBody) = (* 0 *)
minimal(parenExpr) = (* 2 *) LPAREN RPAREN
minimal(opt_typeConstraints) = (* 0 *)
minimal(opt_top_seps) = (* 0 *)
minimal(opt_topReturnTypeWithTypeConstraints) = (* 0 *)
minimal(opt_staticOptimizations) = (* 0 *)
minimal(opt_signature) = (* 0 *)
minimal(opt_seps) = (* 0 *)
minimal(opt_rec) = (* 0 *)
minimal(opt_objExprBindings) = (* 0 *)
minimal(opt_mutable) = (* 0 *)
minimal(opt_literalValue) = (* 0 *)
minimal(opt_itop_seps) = (* 0 *)
minimal(opt_interfaceImplDefn) = (* 0 *)
minimal(opt_inlineAssemblyTypeArg) = (* 0 *)
minimal(opt_inlineAssemblyReturnTypes) = (* 0 *)
minimal(opt_inline) = (* 0 *)
minimal(opt_explicitValTyparDecls2) = (* 0 *)
minimal(opt_explicitValTyparDecls) = (* 0 *)
minimal(opt_decl_visibility) = (* 0 *)
minimal(opt_decl_end) = (* 0 *)
minimal(opt_curriedArgExprs) = (* 0 *)
minimal(opt_classSpfn) = (* 0 *)
minimal(opt_classDefn) = (* 0 *)
minimal(opt_bar) = (* 0 *)
minimal(opt_attributes) = (* 0 *)
minimal(opt_as) = (* 0 *)
minimal(opt_argExprAfterType) = (* 0 *)
minimal(opt_access) = (* 0 *)
minimal(opt_ODECLEND) = (* 0 *)
minimal(opt_OBLOCKSEP) = (* 0 *)
minimal(opt_HIGH_PRECEDENCE_TYAPP) = (* 0 *)
minimal(opt_HIGH_PRECEDENCE_APP) = (* 0 *)
minimal(opt_HASH) = (* 0 *)
minimal(optRange) = (* 1 *) STAR
minimal(operatorName) = (* 1 *) PREFIX_OP
minimal(openDecl) = (* 2 *) OPEN IDENT
minimal(objectImplementationMembers) = (* 4 *) MEMBER UNDERSCORE EQUALS ASSERT
minimal(objectImplementationMember) = (* 4 *) MEMBER UNDERSCORE EQUALS ASSERT
minimal(objectImplementationBlock) = (* 4 *) MEMBER UNDERSCORE EQUALS ASSERT
minimal(objExprInterfaces) = (* 0 *)
minimal(objExprInterface) = (* 2 *) INTERFACE UNDERSCORE
minimal(objExprBindings) = (* 3 *) WITH DO ASSERT
minimal(objExprBaseCall) = (* 2 *) NEW UNDERSCORE
minimal(objExpr) = (* 2 *) NEW UNDERSCORE
minimal(namespaceSpecs) = (* 0 *)
minimal(namespaceSpecList) = (* 2 *) NAMESPACE IDENT
minimal(namespaceSpec) = (* 2 *) NAMESPACE IDENT
minimal(namespaceIntro) = (* 2 *) NAMESPACE IDENT
minimal(namespaceImpls) = (* 0 *)
minimal(namespaceImplList) = (* 2 *) NAMESPACE IDENT
minimal(namespaceImpl) = (* 2 *) NAMESPACE IDENT
minimal(nameop) = (* 1 *) IDENT
minimal(namedModuleDefnBlock) = (* 2 *) OBLOCKBEGIN OBLOCKEND
minimal(namedModuleAbbrevBlock) = (* 1 *) IDENT
minimal(more_localBindings) = (* 0 *)
minimal(moreRecordPatternElements) = (* 0 *)
minimal(moreListPatternElements) = (* 0 *)
minimal(moreListExprElements) = (* 0 *)
minimal(monadicWithPatternClauses) = (* 4 *) UNDERSCORE RARROW YIELD ASSERT
minimal(monadicWithClauses) = (* 5 *) WITH UNDERSCORE RARROW YIELD ASSERT
minimal(monadicWhenCondition) = (* 2 *) WHEN ASSERT
minimal(monadicSingleLineQualifiersThenArrowThenExprR) = (* 2 *) RARROW ASSERT
minimal(monadicPatternResult) = (* 3 *) RARROW YIELD ASSERT
minimal(monadicPatternClauses) = (* 4 *) UNDERSCORE RARROW YIELD ASSERT
minimal(monadicIfExprThen) = (* 3 *) THEN YIELD ASSERT
minimal(monadicIfExprElifs) = (* 0 *)
minimal(monadicIfExprCases) = (* 3 *) THEN YIELD ASSERT
minimal(monadicExprNonEmptyNonInitialBlockR) = (* 2 *) YIELD ASSERT
minimal(monadicExprNonEmptyNonInitialBlock) = (* 2 *) YIELD ASSERT
minimal(monadicExprNonEmptyNonInitial) = (* 2 *) YIELD ASSERT
minimal(monadicExprNonEmptyInitial) = (* 2 *) YIELD ASSERT
minimal(monadicExprInitial) = (* 2 *) YIELD ASSERT
minimal(monadicExprBindings) = (* 3 *) ODO_BANG ASSERT ODECLEND
minimal(monadicExpr) = (* 0 *)
minimal(moduleSpecBlock) = (* 2 *) OBLOCKBEGIN OBLOCKEND
minimal(moduleSpec) = (* 0 *)
minimal(moduleOrNamespaceSpfn) = (* 2 *) TYPE IDENT
minimal(moduleOrNamespaceDefns) = (* 0 *)
minimal(moduleOrNamespaceDefn) = (* 2 *) EXCEPTION IDENT
minimal(moduleIntro) = (* 2 *) MODULE IDENT
minimal(moduleImpl) = (* 0 *)
minimal(minusExpr) = (* 1 *) IDENT
minimal(memberSpecFlags) = (* 1 *) MEMBER
minimal(memberOrOverride) = (* 1 *) MEMBER
minimal(memberFlags) = (* 1 *) MEMBER
minimal(memberCore) = (* 3 *) UNDERSCORE EQUALS ASSERT
minimal(localBindings) = (* 2 *) DO ASSERT
minimal(localBinding) = (* 3 *) UNDERSCORE EQUALS ASSERT
minimal(listPatternElements) = (* 0 *)
minimal(listExprElements) = (* 0 *)
minimal(itop_seps) = (* 1 *) SEMICOLON
minimal(itop_sep) = (* 1 *) SEMICOLON
minimal(interfaceMember) = (* 1 *) INTERFACE
minimal(interactiveTerminator) = (* 1 *) SEMICOLON_SEMICOLON
minimal(interactiveExprOrDefinitions) = (* 1 *) SEMICOLON_SEMICOLON
minimal(interactiveDefinitions) = (* 1 *) SEMICOLON_SEMICOLON
minimal(interaction) = (* 1 *) SEMICOLON_SEMICOLON
minimal(inlineAssemblyTyconRepr) = (* 2 *) HASH STRING
minimal(inlineAssemblyExpr) = (* 2 *) HASH STRING
minimal(inheritsDefn) = (* 2 *) INHERIT UNDERSCORE
minimal(implementationFile) = (* 1 *) EOF
minimal(ifExprThen) = (* 2 *) THEN ASSERT
minimal(ifExprElifs) = (* 0 *)
minimal(ifExprCases) = (* 2 *) THEN ASSERT
minimal(identop) = (* 1 *) IDENT
minimal(ident) = (* 1 *) IDENT
minimal(headBindingPattern) = (* 1 *) UNDERSCORE
minimal(hashDirectiveArgs) = (* 0 *)
minimal(hashDirectiveArg) = (* 1 *) STRING
minimal(hashDirective) = (* 1 *) HASH_KEYWORD
minimal(hardwhiteLetBindings) = (* 4 *) OLET DO ASSERT ODECLEND
minimal(hardwhiteDoBinding) = (* 3 *) ODO ASSERT ODECLEND
minimal(hardwhiteDefnBindingsTerminator) = (* 1 *) ODECLEND
minimal(hardwhiteDefnBindings) = (* 3 *) ODO ASSERT ODECLEND
minimal(grab_doc) = (* 0 *)
minimal(forLoopRange) = (* 5 *) UNDERSCORE EQUALS ASSERT TO ASSERT
minimal(forLoopBinder) = (* 3 *) UNDERSCORE IN ASSERT
minimal(firstUnionCaseDeclOfMany) = (* 1 *) IDENT
minimal(firstUnionCaseDecl) = (* 3 *) IDENT OF UNDERSCORE
minimal(fieldDecl) = (* 3 *) IDENT COLON UNDERSCORE
minimal(exprOrDefinitions) = (* 0 *)
minimal(explicitValTyparDeclsCore) = (* 0 *)
minimal(explicitValTyparDecls) = (* 2 *) LESS GREATER
minimal(exconSpfn) = (* 2 *) EXCEPTION IDENT
minimal(exconRepr) = (* 0 *)
minimal(exconIntro) = (* 1 *) IDENT
minimal(exconDefn) = (* 2 *) EXCEPTION IDENT
minimal(exconCore) = (* 2 *) EXCEPTION IDENT
minimal(done_term) = (* 1 *) DONE
minimal(do_or_odo) = (* 1 *) DO
minimal(doBinding) = (* 2 *) DO ASSERT
minimal(direction) = (* 1 *) TO
minimal(deprecated_opt_equals) = (* 0 *)
minimal(defnBindings) = (* 3 *) LET DO ASSERT
minimal(decl_end) = (* 1 *) ODECLEND
minimal(declExpr) = (* 1 *) ASSERT
minimal(constrPattern) = (* 1 *) UNDERSCORE
minimal(constant) = (* 1 *) INT8
minimal(conjPatternElements) = (* 3 *) UNDERSCORE AMP UNDERSCORE
minimal(conjParenPatternElements) = (* 3 *) UNDERSCORE AMP UNDERSCORE
minimal(componentInfo) = (* 1 *) IDENT
minimal(colonOrEquals) = (* 1 *) COLON
minimal(classSpfnMembers) = (* 0 *)
minimal(classSpfnBlockKindUnspecified) = (* 2 *) OBLOCKBEGIN OBLOCKEND
minimal(classSpfnBlock) = (* 0 *)
minimal(classOrInterfaceOrStruct) = (* 1 *) CLASS
minimal(classMemberSpfnGetSetElements) = (* 1 *) IDENT
minimal(classMemberSpfnGetSet) = (* 0 *)
minimal(classMemberSpfn) = (* 2 *) INTERFACE UNDERSCORE
minimal(classDefnMembers) = (* 0 *)
minimal(classDefnMemberGetSetElements) = (* 3 *) UNDERSCORE EQUALS ASSERT
minimal(classDefnMemberGetSetElement) = (* 3 *) UNDERSCORE EQUALS ASSERT
minimal(classDefnMemberGetSet) = (* 4 *) WITH UNDERSCORE EQUALS ASSERT
minimal(classDefnMember) = (* 2 *) INTERFACE UNDERSCORE
minimal(classDefnBlockKindUnspecified) = (* 2 *) OBLOCKBEGIN OBLOCKEND
minimal(classDefnBlock) = (* 0 *)
minimal(cType) = (* 1 *) IDENT
minimal(cRetType) = (* 1 *) IDENT
minimal(cPrototype) = (* 5 *) EXTERN IDENT IDENT LPAREN RPAREN
minimal(cMoreArgs) = (* 3 *) IDENT COMMA IDENT
minimal(cArgs) = (* 0 *)
minimal(cArg) = (* 1 *) IDENT
minimal(braceFieldDeclList) = (* 5 *) LBRACE IDENT COLON UNDERSCORE RBRACE
minimal(braceExprBody) = (* 0 *)
minimal(braceExpr) = (* 2 *) LBRACE RBRACE
minimal(bindingPattern) = (* 1 *) UNDERSCORE
minimal(beginEndExpr) = (* 2 *) BEGIN END
minimal(barNames) = (* 2 *) BAR IDENT
minimal(attributes) = (* 3 *) LBRACK_LESS IDENT GREATER_RBRACK
minimal(attributeTarget) = (* 1 *) MODULE
minimal(attributeListElements) = (* 1 *) IDENT
minimal(attributeList) = (* 3 *) LBRACK_LESS IDENT GREATER_RBRACK
minimal(attribute) = (* 1 *) IDENT
minimal(attr_localBinding) = (* 2 *) DO ASSERT
minimal(attrUnionCaseDecls) = (* 1 *) IDENT
minimal(attrUnionCaseDecl) = (* 1 *) IDENT
minimal(atomicPatterns) = (* 1 *) UNDERSCORE
minimal(atomicPatternLongIdent) = (* 1 *) IDENT
minimal(atomicPattern) = (* 1 *) UNDERSCORE
minimal(atomType) = (* 1 *) UNDERSCORE
minimal(asSpec) = (* 2 *) AS IDENT
minimal(arrayTypeSuffix) = (* 2 *) LBRACK RBRACK
minimal(arrayExpr) = (* 2 *) LBRACK_BAR BAR_RBRACK
minimal(argExprQualification) = (* 1 *) IDENT
minimal(argExprNoHPA) = (* 1 *) IDENT
minimal(argExprAfterType) = (* 1 *) INT8
minimal(argExpr) = (* 1 *) IDENT
minimal(appTypePrexifArguments) = (* 3 *) UNDERSCORE COMMA UNDERSCORE
minimal(appType) = (* 1 *) UNDERSCORE
minimal(appExpr) = (* 1 *) IDENT
minimal(anonMatchingExpr) = (* 4 *) FUNCTION UNDERSCORE RARROW ASSERT
minimal(anonLambdaExpr) = (* 4 *) FUN UNDERSCORE RARROW ASSERT
minimal(access) = (* 1 *) PRIVATE
minimal(abstractMemberFlags) = (* 1 *) ABSTRACT
maximal(wrappedNamedModuleDefn) = infinity
maximal(withPatternClauses) = infinity
maximal(withClausses) = infinity
maximal(valSpfn) = infinity
maximal(unionRepr) = infinity
maximal(unionCaseRepr) = infinity
maximal(unionCaseName) = infinity
maximal(typedSeqExprBlockR) = infinity
maximal(typedSeqExprBlock) = infinity
maximal(typedSeqExpr) = infinity
maximal(typedExprWithStaticOptimizationsBlock) = infinity
maximal(typedExprWithStaticOptimizations) = infinity
maximal(typeWithTypeConstraints) = infinity
maximal(typeListElements) = infinity
maximal(typeConstraints) = infinity
maximal(typeConstraint) = infinity
maximal(typeArgsActual) = infinity
maximal(typeArgs) = infinity
maximal(typarDecl) = infinity
maximal(typar) = 2
maximal(typ) = infinity
maximal(tyconSpfns) = infinity
maximal(tyconSpfn_list) = infinity
maximal(tyconSpfnRhsBlock) = infinity
maximal(tyconSpfnRhs) = infinity
maximal(tyconSpfn) = infinity
maximal(tyconNameAndTyparDecls) = infinity
maximal(tyconDefnRhsBlock) = infinity
maximal(tyconDefnRhs) = infinity
maximal(tyconDefnOrSpfnSimpleRepr) = infinity
maximal(tyconDefnList) = infinity
maximal(tyconDefnAugmentation) = infinity
maximal(tyconDefn) = infinity
maximal(tyconClassSpfn) = infinity
maximal(tyconClassDefn) = infinity
maximal(tupleTypeElements) = infinity
maximal(tupleType) = infinity
maximal(tuplePatternElements) = infinity
maximal(tupleParenPatternElements) = infinity
maximal(tupleExpr) = infinity
maximal(top_seps) = infinity
maximal(top_sep) = 1
maximal(topTypeWithTypeConstraints) = infinity
maximal(topType) = infinity
maximal(topTupleTypeElements) = infinity
maximal(topTupleType) = infinity
maximal(topAppType) = infinity
maximal(structOrBegin) = 1
maximal(staticallyKnownHeadTypars) = 7
maximal(staticallyKnownHeadTypar) = 2
maximal(staticOptimizationConditions) = infinity
maximal(staticOptimizationCondition) = infinity
maximal(staticOptimization) = infinity
maximal(specifications) = infinity
maximal(simplePatterns) = infinity
maximal(simplePatternCommaList) = infinity
maximal(simplePattern) = infinity
maximal(signatureFile) = infinity
maximal(sigOrBegin) = 1
maximal(seqExpr) = infinity
maximal(seps) = 2
maximal(recover) = 1
maximal(recordPatternElements) = infinity
maximal(recdFieldDeclList) = infinity
maximal(recdFieldDecl) = infinity
maximal(recdExprBindings) = infinity
maximal(recdExpr) = infinity
maximal(rangeSequenceExpr) = infinity
maximal(quoteExpr) = infinity
maximal(prefixTyparDecls) = infinity
maximal(prefixTyparDeclList) = infinity
maximal(postfixTyparDecls) = infinity
maximal(polyType) = infinity
maximal(patternResult) = infinity
maximal(patternGuard) = infinity
maximal(patternClauses) = infinity
maximal(patternAndGuard) = infinity
maximal(pathop) = infinity
maximal(path) = infinity
maximal(parenPatternBody) = infinity
maximal(parenPattern) = infinity
maximal(parenExprBody) = infinity
maximal(parenExpr) = infinity
maximal(opt_typeConstraints) = infinity
maximal(opt_top_seps) = infinity
maximal(opt_topReturnTypeWithTypeConstraints) = infinity
maximal(opt_staticOptimizations) = infinity
maximal(opt_signature) = infinity
maximal(opt_seps) = 2
maximal(opt_rec) = 1
maximal(opt_objExprBindings) = infinity
maximal(opt_mutable) = 1
maximal(opt_literalValue) = infinity
maximal(opt_itop_seps) = infinity
maximal(opt_interfaceImplDefn) = infinity
maximal(opt_inlineAssemblyTypeArg) = infinity
maximal(opt_inlineAssemblyReturnTypes) = infinity
maximal(opt_inline) = 1
maximal(opt_explicitValTyparDecls2) = infinity
maximal(opt_explicitValTyparDecls) = infinity
maximal(opt_decl_visibility) = 1
maximal(opt_decl_end) = 1
maximal(opt_curriedArgExprs) = infinity
maximal(opt_classSpfn) = infinity
maximal(opt_classDefn) = infinity
maximal(opt_bar) = 1
maximal(opt_attributes) = infinity
maximal(opt_as) = 2
maximal(opt_argExprAfterType) = infinity
maximal(opt_access) = 1
maximal(opt_ODECLEND) = 1
maximal(opt_OBLOCKSEP) = 1
maximal(opt_HIGH_PRECEDENCE_TYAPP) = 1
maximal(opt_HIGH_PRECEDENCE_APP) = 1
maximal(opt_HASH) = 1
maximal(optRange) = infinity
maximal(operatorName) = 2
maximal(openDecl) = infinity
maximal(objectImplementationMembers) = infinity
maximal(objectImplementationMember) = infinity
maximal(objectImplementationBlock) = infinity
maximal(objExprInterfaces) = infinity
maximal(objExprInterface) = infinity
maximal(objExprBindings) = infinity
maximal(objExprBaseCall) = infinity
maximal(objExpr) = infinity
maximal(namespaceSpecs) = infinity
maximal(namespaceSpecList) = infinity
maximal(namespaceSpec) = infinity
maximal(namespaceIntro) = infinity
maximal(namespaceImpls) = infinity
maximal(namespaceImplList) = infinity
maximal(namespaceImpl) = infinity
maximal(nameop) = infinity
maximal(namedModuleDefnBlock) = infinity
maximal(namedModuleAbbrevBlock) = infinity
maximal(more_localBindings) = infinity
maximal(moreRecordPatternElements) = infinity
maximal(moreListPatternElements) = infinity
maximal(moreListExprElements) = infinity
maximal(monadicWithPatternClauses) = infinity
maximal(monadicWithClauses) = infinity
maximal(monadicWhenCondition) = infinity
maximal(monadicSingleLineQualifiersThenArrowThenExprR) = infinity
maximal(monadicPatternResult) = infinity
maximal(monadicPatternClauses) = infinity
maximal(monadicIfExprThen) = infinity
maximal(monadicIfExprElifs) = infinity
maximal(monadicIfExprCases) = infinity
maximal(monadicExprNonEmptyNonInitialBlockR) = infinity
maximal(monadicExprNonEmptyNonInitialBlock) = infinity
maximal(monadicExprNonEmptyNonInitial) = infinity
maximal(monadicExprNonEmptyInitial) = infinity
maximal(monadicExprInitial) = infinity
maximal(monadicExprBindings) = infinity
maximal(monadicExpr) = infinity
maximal(moduleSpecBlock) = infinity
maximal(moduleSpec) = infinity
maximal(moduleOrNamespaceSpfn) = infinity
maximal(moduleOrNamespaceDefns) = infinity
maximal(moduleOrNamespaceDefn) = infinity
maximal(moduleIntro) = infinity
maximal(moduleImpl) = infinity
maximal(minusExpr) = infinity
maximal(memberSpecFlags) = 2
maximal(memberOrOverride) = 1
maximal(memberFlags) = 2
maximal(memberCore) = infinity
maximal(localBindings) = infinity
maximal(localBinding) = infinity
maximal(listPatternElements) = infinity
maximal(listExprElements) = infinity
maximal(itop_seps) = infinity
maximal(itop_sep) = 1
maximal(interfaceMember) = 1
maximal(interactiveTerminator) = 1
maximal(interactiveExprOrDefinitions) = infinity
maximal(interactiveDefinitions) = infinity
maximal(interaction) = infinity
maximal(inlineAssemblyTyconRepr) = 3
maximal(inlineAssemblyExpr) = infinity
maximal(inheritsDefn) = infinity
maximal(implementationFile) = infinity
maximal(ifExprThen) = infinity
maximal(ifExprElifs) = infinity
maximal(ifExprCases) = infinity
maximal(identop) = infinity
maximal(ident) = 1
maximal(headBindingPattern) = infinity
maximal(hashDirectiveArgs) = infinity
maximal(hashDirectiveArg) = 1
maximal(hashDirective) = infinity
maximal(hardwhiteLetBindings) = infinity
maximal(hardwhiteDoBinding) = infinity
maximal(hardwhiteDefnBindingsTerminator) = 1
maximal(hardwhiteDefnBindings) = infinity
maximal(grab_doc) = 0
maximal(forLoopRange) = infinity
maximal(forLoopBinder) = infinity
maximal(firstUnionCaseDeclOfMany) = infinity
maximal(firstUnionCaseDecl) = infinity
maximal(fieldDecl) = infinity
maximal(exprOrDefinitions) = infinity
maximal(explicitValTyparDeclsCore) = infinity
maximal(explicitValTyparDecls) = infinity
maximal(exconSpfn) = infinity
maximal(exconRepr) = infinity
maximal(exconIntro) = infinity
maximal(exconDefn) = infinity
maximal(exconCore) = infinity
maximal(done_term) = 1
maximal(do_or_odo) = 1
maximal(doBinding) = infinity
maximal(direction) = 1
maximal(deprecated_opt_equals) = 1
maximal(defnBindings) = infinity
maximal(decl_end) = 1
maximal(declExpr) = infinity
maximal(constrPattern) = infinity
maximal(constant) = 1
maximal(conjPatternElements) = infinity
maximal(conjParenPatternElements) = infinity
maximal(componentInfo) = infinity
maximal(colonOrEquals) = 1
maximal(classSpfnMembers) = infinity
maximal(classSpfnBlockKindUnspecified) = infinity
maximal(classSpfnBlock) = infinity
maximal(classOrInterfaceOrStruct) = 1
maximal(classMemberSpfnGetSetElements) = infinity
maximal(classMemberSpfnGetSet) = infinity
maximal(classMemberSpfn) = infinity
maximal(classDefnMembers) = infinity
maximal(classDefnMemberGetSetElements) = infinity
maximal(classDefnMemberGetSetElement) = infinity
maximal(classDefnMemberGetSet) = infinity
maximal(classDefnMember) = infinity
maximal(classDefnBlockKindUnspecified) = infinity
maximal(classDefnBlock) = infinity
maximal(cType) = infinity
maximal(cRetType) = infinity
maximal(cPrototype) = infinity
maximal(cMoreArgs) = infinity
maximal(cArgs) = infinity
maximal(cArg) = infinity
maximal(braceFieldDeclList) = infinity
maximal(braceExprBody) = infinity
maximal(braceExpr) = infinity
maximal(bindingPattern) = infinity
maximal(beginEndExpr) = infinity
maximal(barNames) = infinity
maximal(attributes) = infinity
maximal(attributeTarget) = 1
maximal(attributeListElements) = infinity
maximal(attributeList) = infinity
maximal(attribute) = infinity
maximal(attr_localBinding) = infinity
maximal(attrUnionCaseDecls) = infinity
maximal(attrUnionCaseDecl) = infinity
maximal(atomicPatterns) = infinity
maximal(atomicPatternLongIdent) = infinity
maximal(atomicPattern) = infinity
maximal(atomType) = infinity
maximal(asSpec) = 2
maximal(arrayTypeSuffix) = 5
maximal(arrayExpr) = infinity
maximal(argExprQualification) = infinity
maximal(argExprNoHPA) = infinity
maximal(argExprAfterType) = infinity
maximal(argExpr) = infinity
maximal(appTypePrexifArguments) = infinity
maximal(appType) = infinity
maximal(appExpr) = infinity
maximal(anonMatchingExpr) = infinity
maximal(anonLambdaExpr) = infinity
maximal(access) = 1
maximal(abstractMemberFlags) = 2
follow(wrappedNamedModuleDefn) = error TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(withPatternClauses) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(withClausses) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(valSpfn) = error VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OBLOCKSEP OBLOCKEND NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EOF END
follow(unionRepr) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(unionCaseRepr) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT BAR AND ABSTRACT
follow(unionCaseName) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OF OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT COLON BAR AND ABSTRACT
follow(typedSeqExprBlockR) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typedSeqExprBlock) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typedSeqExpr) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typedExprWithStaticOptimizationsBlock) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(typedExprWithStaticOptimizations) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(typeWithTypeConstraints) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typeListElements) = RPAREN GREATER COMMA
follow(typeConstraints) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LPAREN LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typeConstraint) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LPAREN LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typeArgsActual) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typeArgs) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typarDecl) = WHEN RPAREN GREATER COMMA
follow(typar) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(typ) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(tyconSpfns) = error VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OBLOCKSEP OBLOCKEND NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EOF END
follow(tyconSpfn_list) = error VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OBLOCKSEP OBLOCKEND NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EOF END
follow(tyconSpfnRhsBlock) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXCEPTION EOF END DEFAULT AND ABSTRACT
follow(tyconSpfnRhs) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXCEPTION EOF END DEFAULT AND ABSTRACT
follow(tyconSpfn) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXCEPTION EOF END DEFAULT AND ABSTRACT
follow(tyconNameAndTyparDecls) = error WITH WHEN VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LPAREN LBRACK_LESS INTERNAL INTERFACE INHERIT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH EXCEPTION EQUALS EOF END DEFAULT AND ABSTRACT
follow(tyconDefnRhsBlock) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(tyconDefnRhs) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(tyconDefnOrSpfnSimpleRepr) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(tyconDefnList) = error TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(tyconDefnAugmentation) = error TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(tyconDefn) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(tyconClassSpfn) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXCEPTION EOF END DEFAULT AND ABSTRACT
follow(tyconClassDefn) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(tupleTypeElements) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(tupleType) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(tuplePatternElements) = WITH OWITH EQUALS COMMA COLON_COLON COLON BAR AS AMP
follow(tupleParenPatternElements) = error WHEN SEMICOLON RPAREN RBRACK RBRACE RARROW OBLOCKSEP IN EQUALS EOF COMMA COLON_GREATER COLON_COLON COLON BAR_RBRACK BAR AS AMP
follow(tupleExpr) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(top_seps) = error WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF END DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(top_sep) = error WHILE VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF END DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(topTypeWithTypeConstraints) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OWITH OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT ABSTRACT
follow(topType) = error WITH WHEN VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OWITH OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT BAR AND ABSTRACT
follow(topTupleTypeElements) = error WITH WHEN VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN RARROW PUBLIC PRIVATE OWITH OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT BAR AND ABSTRACT
follow(topTupleType) = error WITH WHEN VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN RARROW PUBLIC PRIVATE OWITH OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT BAR AND ABSTRACT
follow(topAppType) = error WITH WHEN VIRTUAL VAL TYPE STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RARROW PUBLIC PRIVATE OWITH OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT BAR AND ABSTRACT
follow(structOrBegin) = error WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF END DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(staticallyKnownHeadTypars) = COLON
follow(staticallyKnownHeadTypar) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(staticOptimizationConditions) = EQUALS AND
follow(staticOptimizationCondition) = EQUALS AND
follow(staticOptimization) = error WITH WHEN VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(specifications) = OBLOCKEND NAMESPACE LBRACK_LESS EOF END
follow(simplePatterns) = EQUALS AS
follow(simplePatternCommaList) = error RPAREN EOF
follow(simplePattern) = error RPAREN EOF COMMA COLON
follow(signatureFile) = #
follow(sigOrBegin) = error VAL TYPE PUBLIC PRIVATE OPEN MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION END
follow(seqExpr) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(seps) = error YIELD WITH WHILE WHEN VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE TO THEN STRING STATIC STAR SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MUTABLE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH GREATER_RBRACK GREATER FUNCTION FUN FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOWNCAST DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR ASSERT AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(recover) = error YIELD_BANG YIELD WITH WHILE WHEN VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE TO THEN STRING STATIC STAR SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OEND OELSE ODO_BANG ODO ODECLEND OBLOCKSEP OBLOCKEND OBLOCKBEGIN OBINDER NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IF IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FUNCTION FUN FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DO_BANG DOWNTO DOWNCAST DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR ASSERT AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(recordPatternElements) = RBRACE
follow(recdFieldDeclList) = error RBRACE EOF
follow(recdFieldDecl) = error SEMICOLON RBRACE OBLOCKSEP EOF
follow(recdExprBindings) = error SEMICOLON RBRACE OEND OBLOCKSEP EOF
follow(recdExpr) = error RBRACE EOF
follow(rangeSequenceExpr) = error WHEN RBRACK RBRACE RARROW2 RARROW ODO OBLOCKSEP FOR EOF DO BAR_RBRACK
follow(quoteExpr) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(prefixTyparDecls) = IDENT
follow(prefixTyparDeclList) = WHEN RPAREN GREATER COMMA
follow(postfixTyparDecls) = error WITH WHEN VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LPAREN LBRACK_LESS INTERNAL INTERFACE INHERIT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH EXCEPTION EQUALS EOF END DEFAULT AND ABSTRACT
follow(polyType) = error WITH VIRTUAL VAL STATIC SEMICOLON RPAREN RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(patternResult) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(patternGuard) = RARROW
follow(patternClauses) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(patternAndGuard) = RARROW
follow(pathop) = error WITH WHEN UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING SEMICOLON RPAREN RBRACK RBRACE RARROW QMARK PUBLIC PRIVATE OWITH OBLOCKSEP NULL NATIVEINT MINUS LQUOTE LPAREN LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP FALSE EQUALS EOF DECIMAL COMMA COLON_GREATER COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BAR_RBRACK BAR AS AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(path) = error WITH WHILE WHEN VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE TO THEN STRING STATIC STAR SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IF IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FUNCTION FUN FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOWNCAST DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR ASSERT AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(parenPatternBody) = error RPAREN EOF
follow(parenPattern) = error WHEN SEMICOLON RPAREN RBRACK RBRACE RARROW OBLOCKSEP IN EQUALS EOF COMMA COLON_GREATER COLON_COLON COLON BAR_RBRACK BAR AS AMP
follow(parenExprBody) = error RPAREN EOF
follow(parenExpr) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(opt_typeConstraints) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LPAREN LBRACK_LESS INTERNAL INTERFACE INHERIT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER EXCEPTION EQUALS EOF END DEFAULT AND ABSTRACT
follow(opt_top_seps) = error VAL TYPE PUBLIC PRIVATE OPEN OBLOCKEND NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EOF END
follow(opt_topReturnTypeWithTypeConstraints) = WITH OWITH EQUALS
follow(opt_staticOptimizations) = error WITH WHEN VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(opt_signature) = EQUALS
follow(opt_seps) = error WITH VIRTUAL VAL STATIC RBRACK RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT GREATER_RBRACK EXTERN EOF END DO DEFAULT BAR_RBRACK ABSTRACT
follow(opt_rec) = error UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MUTABLE MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DO DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
follow(opt_objExprBindings) = error RBRACE OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP INTERFACE EOF END
follow(opt_mutable) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
follow(opt_literalValue) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXCEPTION EOF END DEFAULT ABSTRACT
follow(opt_itop_seps) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL SEMICOLON_SEMICOLON QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(opt_interfaceImplDefn) = error WITH VIRTUAL VAL STATIC SEMICOLON PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(opt_inlineAssemblyTypeArg) = error UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING RPAREN QMARK PREFIX_OP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT HASH FALSE EOF DECIMAL COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN
follow(opt_inlineAssemblyReturnTypes) = error RPAREN HASH EOF
follow(opt_inline) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MUTABLE MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
follow(opt_explicitValTyparDecls2) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP FALSE DECIMAL CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
follow(opt_explicitValTyparDecls) = COLON
follow(opt_decl_visibility) = VIRTUAL VAL TYPE STATIC OVERRIDE OLET OINTERFACE_MEMBER ODO NEW MODULE METHOD MEMBER LET INTERFACE INHERIT EXTERN EXCEPTION DO DEFAULT ABSTRACT
follow(opt_decl_end) = error RBRACE OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP INTERFACE EOF END
follow(opt_curriedArgExprs) = error UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING RPAREN QMARK PREFIX_OP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT HASH FALSE EOF DECIMAL COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN
follow(opt_classSpfn) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXCEPTION EOF END DEFAULT AND ABSTRACT
follow(opt_classDefn) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(opt_bar) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
follow(opt_attributes) = VOID VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE STRING STATIC QUOTE QMARK PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER ODO NULL NEW NATIVEINT NAMESPACE MUTABLE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE INTERNAL INTERFACE INT8 INT64 INT32 INT16 INLINE INHERIT INFIX_AT_HAT_OP IEEE64 IEEE32 IDENT FALSE EXTERN EXCEPTION DOLLAR DO DEFAULT DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(opt_as) = error WITH VIRTUAL VAL STATIC SEMICOLON RBRACE PUBLIC PRIVATE OWITH OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EQUALS EOF END DO DEFAULT ABSTRACT
follow(opt_argExprAfterType) = error WITH SEMICOLON RBRACE OWITH OINTERFACE_MEMBER OBLOCKSEP INTERFACE GREATER_RBRACK EOF AS
follow(opt_access) = QUOTE LPAREN INFIX_AT_HAT_OP IDENT DOLLAR
follow(opt_ODECLEND) = error WITH VIRTUAL VAL STATIC SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(opt_OBLOCKSEP) = error YIELD_BANG YIELD WITH WHILE WHEN VOID VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW2 RARROW QUOTE QMARK PUBLIC PRIVATE OWITH OVERRIDE ORIGHT_BLOCK_END OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO_BANG ODO ODECLEND OBLOCKSEP OBLOCKEND OBINDER NULL NEW NATIVEINT NAMESPACE MUTABLE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INTERFACE INT8 INT64 INT32 INT16 INLINE INHERIT INFIX_AT_HAT_OP IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FOR FINALLY FALSE EXTERN EXCEPTION EOF END ELSE ELIF DO_BANG DONE DOLLAR DO DEFAULT DECIMAL COLON_QMARK CHAR BYTEARRAY BINDER BIGNUM BIGINT BAR_RBRACK BAR AND ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(opt_HIGH_PRECEDENCE_TYAPP) = LESS
follow(opt_HIGH_PRECEDENCE_APP) = error WITH UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING SEMICOLON RBRACE OWITH OINTERFACE_MEMBER OBLOCKSEP NULL NATIVEINT LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERFACE INT8 INT64 INT32 INT16 IEEE64 IEEE32 GREATER_RBRACK FALSE EOF DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN AS
follow(opt_HASH) = error RPAREN EOF
follow(optRange) = RBRACK COMMA
follow(operatorName) = RPAREN
follow(openDecl) = error TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(objectImplementationMembers) = error RBRACE OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND INTERFACE EOF END
follow(objectImplementationMember) = error SEMICOLON RBRACE OVERRIDE OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND MEMBER LBRACK_LESS INTERFACE EOF END
follow(objectImplementationBlock) = error RBRACE OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP INTERFACE EOF END
follow(objExprInterfaces) = error RBRACE EOF
follow(objExprInterface) = error RBRACE OINTERFACE_MEMBER INTERFACE EOF
follow(objExprBindings) = error RBRACE OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP INTERFACE EOF END
follow(objExprBaseCall) = error WITH RBRACE OWITH OINTERFACE_MEMBER OBLOCKSEP INTERFACE EOF
follow(objExpr) = error RBRACE EOF
follow(namespaceSpecs) = EOF
follow(namespaceSpecList) = EOF
follow(namespaceSpec) = NAMESPACE LBRACK_LESS EOF
follow(namespaceIntro) = error WHILE VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT NAMESPACE MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EQUALS EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(namespaceImpls) = EOF
follow(namespaceImplList) = EOF
follow(namespaceImpl) = NAMESPACE LBRACK_LESS EOF
follow(nameop) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OF OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(namedModuleDefnBlock) = error TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(namedModuleAbbrevBlock) = error VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(more_localBindings) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT ABSTRACT
follow(moreRecordPatternElements) = SEMICOLON RBRACE OBLOCKSEP
follow(moreListPatternElements) = SEMICOLON RBRACK OBLOCKSEP BAR_RBRACK
follow(moreListExprElements) = error SEMICOLON RBRACK OBLOCKSEP EOF BAR_RBRACK
follow(monadicWithPatternClauses) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicWithClauses) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicWhenCondition) = WHEN RARROW2 RARROW ODO OBLOCKSEP FOR DO
follow(monadicSingleLineQualifiersThenArrowThenExprR) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicPatternResult) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicPatternClauses) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicIfExprThen) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicIfExprElifs) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicIfExprCases) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicExprNonEmptyNonInitialBlockR) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicExprNonEmptyNonInitialBlock) = ODECLEND DONE
follow(monadicExprNonEmptyNonInitial) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicExprNonEmptyInitial) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicExprInitial) = error RBRACK RBRACE EOF BAR_RBRACK
follow(monadicExprBindings) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(monadicExpr) = error WITH RBRACK RBRACE OWITH ORIGHT_BLOCK_END OEND OELSE ODECLEND OBLOCKSEP OBLOCKEND FINALLY EOF ELSE ELIF DONE BAR_RBRACK BAR
follow(moduleSpecBlock) = error VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OBLOCKSEP OBLOCKEND NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EQUALS EOF END
follow(moduleSpec) = NAMESPACE LBRACK_LESS EOF
follow(moduleOrNamespaceSpfn) = error VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OBLOCKSEP OBLOCKEND NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EOF END
follow(moduleOrNamespaceDefns) = error OBLOCKEND NAMESPACE LBRACK_LESS EOF END
follow(moduleOrNamespaceDefn) = error TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(moduleIntro) = error WHILE VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT NAMESPACE MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EQUALS EOF DOWNCAST DO DECIMAL COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(moduleImpl) = NAMESPACE LBRACK_LESS EOF
follow(minusExpr) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS LARROW INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(memberSpecFlags) = PUBLIC PRIVATE LPAREN INTERNAL INLINE IDENT
follow(memberOrOverride) = error UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
follow(memberFlags) = UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING QMARK PUBLIC PRIVATE NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 INLINE IEEE64 IEEE32 IDENT FALSE DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP
follow(memberCore) = error WITH VIRTUAL VAL STATIC SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(localBindings) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT ABSTRACT
follow(localBinding) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(listPatternElements) = RBRACK BAR_RBRACK
follow(listExprElements) = error RBRACK EOF BAR_RBRACK
follow(itop_seps) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL SEMICOLON_SEMICOLON QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(itop_sep) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO OBLOCKSEP NULL NEW NATIVEINT MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(interfaceMember) = UNDERSCORE QUOTE LPAREN INFIX_AT_HAT_OP IDENT HASH DOLLAR
follow(interactiveTerminator) = #
follow(interactiveExprOrDefinitions) = #
follow(interactiveDefinitions) = #
follow(interaction) = #
follow(inlineAssemblyTyconRepr) = RPAREN
follow(inlineAssemblyExpr) = error RPAREN EOF
follow(inheritsDefn) = error WITH VIRTUAL VAL STATIC SEMICOLON PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(implementationFile) = #
follow(ifExprThen) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(ifExprElifs) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(ifExprCases) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(identop) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OF OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(ident) = error WITH WHILE WHEN VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE TO THEN STRING STATIC STAR SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OF OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IF IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FUNCTION FUN FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOWNCAST DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR ASSERT AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(headBindingPattern) = WITH OWITH EQUALS COMMA COLON_COLON COLON BAR AS AMP
follow(hashDirectiveArgs) = STRING SEMICOLON_SEMICOLON SEMICOLON OBLOCKSEP EOF
follow(hashDirectiveArg) = STRING SEMICOLON_SEMICOLON SEMICOLON OBLOCKSEP EOF
follow(hashDirective) = SEMICOLON_SEMICOLON SEMICOLON OBLOCKSEP EOF
follow(hardwhiteLetBindings) = error YIELD_BANG YIELD WITH WHILE WHEN VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING STATIC SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON RARROW2 RARROW QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OVERRIDE OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OEND ODO_BANG ODO ODECLEND OBLOCKSEP OBLOCKEND OBLOCKBEGIN OBINDER NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF END DO_BANG DOWNCAST DO DEFAULT DECIMAL CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(hardwhiteDoBinding) = error YIELD_BANG YIELD WITH WHILE WHEN VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING STATIC SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON RBRACK RBRACE RARROW2 RARROW QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE ORIGHT_BLOCK_END OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OEND OELSE ODO_BANG ODO ODECLEND OBLOCKSEP OBLOCKEND OBLOCKBEGIN OBINDER NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FINALLY FALSE EXTERN EXCEPTION EOF END ELSE ELIF DO_BANG DOWNCAST DONE DO DEFAULT DECIMAL CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN BAR_RBRACK BAR ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(hardwhiteDefnBindingsTerminator) = error YIELD_BANG YIELD WITH WHILE WHEN VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING STATIC SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON RBRACK RBRACE RARROW2 RARROW QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE ORIGHT_BLOCK_END OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OEND OELSE ODO_BANG ODO ODECLEND OBLOCKSEP OBLOCKEND OBLOCKBEGIN OBINDER NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FINALLY FALSE EXTERN EXCEPTION EOF END ELSE ELIF DO_BANG DOWNCAST DONE DO DEFAULT DECIMAL CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN BAR_RBRACK BAR ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(hardwhiteDefnBindings) = error WITH WHILE VIRTUAL VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING STATIC SPLICE_SYMBOL SEMICOLON_SEMICOLON SEMICOLON QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OVERRIDE OPEN OLET OINTERFACE_MEMBER OFUNCTION OFUN OEND ODO ODECLEND OBLOCKSEP OBLOCKEND OBLOCKBEGIN NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF END DOWNCAST DO DEFAULT DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(grab_doc) = WITH QUOTE PUBLIC PRIVATE OWITH LPAREN LESS INTERNAL INFIX_AT_HAT_OP IDENT HIGH_PRECEDENCE_TYAPP EQUALS DOLLAR COLON
follow(forLoopRange) = ODO DO
follow(forLoopBinder) = WHEN RARROW2 RARROW ODO OBLOCKSEP FOR DO
follow(firstUnionCaseDeclOfMany) = BAR
follow(firstUnionCaseDecl) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT BAR AND ABSTRACT
follow(fieldDecl) = error WITH VIRTUAL VAL STATIC SEMICOLON RPAREN RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(exprOrDefinitions) = error OBLOCKEND NAMESPACE LBRACK_LESS EOF END
follow(explicitValTyparDeclsCore) = WHEN GREATER
follow(explicitValTyparDecls) = error WITH WHEN UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING SEMICOLON RPAREN RBRACK RBRACE RARROW QMARK PUBLIC PRIVATE OWITH OBLOCKSEP NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP FALSE EQUALS EOF DECIMAL COMMA COLON_GREATER COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BAR_RBRACK BAR AS AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(exconSpfn) = error VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OBLOCKSEP OBLOCKEND NAMESPACE MODULE LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXCEPTION EOF END
follow(exconRepr) = error WITH VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(exconIntro) = error WITH VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO
follow(exconDefn) = error TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(exconCore) = error WITH VAL TYPE SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OPEN OLET ODO OBLOCKSEP OBLOCKEND NAMESPACE MODULE LET LBRACK_LESS INTERNAL HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO
follow(done_term) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(do_or_odo) = error YIELD_BANG YIELD WHILE WHEN UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL RARROW2 RARROW QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO_BANG ODO OBLOCKBEGIN OBINDER NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DO_BANG DOWNCAST DO DECIMAL CHAR BYTEARRAY BINDER BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(doBinding) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT ABSTRACT
follow(direction) = WHILE UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRY TRUE STRING SPLICE_SYMBOL QMARK PREFIX_OP PLUS_MINUS_OP PERCENT_OP OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT MINUS MATCH LQUOTE LPAREN LET LBRACK_BAR LBRACK LBRACE LAZY INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT FUNCTION FUN FOR FALSE EXTERN DOWNCAST DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(deprecated_opt_equals) = error WHILE VAL UPCAST UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRY TRUE STRING SPLICE_SYMBOL QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OPEN OLET OFUNCTION OFUN ODO NULL NEW NATIVEINT NAMESPACE MODULE MINUS MATCH LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INT8 INT64 INT32 INT16 IF IEEE64 IEEE32 IDENT HASH_KEYWORD HASH FUNCTION FUN FOR FALSE EXTERN EXCEPTION EOF DOWNCAST DO DECIMAL CHAR BYTEARRAY BIGNUM BIGINT BEGIN ASSERT AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(defnBindings) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT ABSTRACT
follow(decl_end) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(declExpr) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(constrPattern) = error WITH WHEN SEMICOLON RPAREN RBRACK RBRACE RARROW OWITH OBLOCKSEP IN EQUALS EOF COMMA COLON_GREATER COLON_COLON COLON BAR_RBRACK BAR AS AMP
follow(constant) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(conjPatternElements) = WITH OWITH EQUALS COMMA COLON_COLON COLON BAR AS AMP
follow(conjParenPatternElements) = error WHEN SEMICOLON RPAREN RBRACK RBRACE RARROW OBLOCKSEP IN EQUALS EOF COMMA COLON_GREATER COLON_COLON COLON BAR_RBRACK BAR AS AMP
follow(componentInfo) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LPAREN LBRACK_LESS INTERNAL INTERFACE INHERIT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH EXCEPTION EQUALS EOF END DEFAULT AND ABSTRACT
follow(colonOrEquals) = SIG OBLOCKBEGIN IDENT BEGIN
follow(classSpfnMembers) = error WITH OEND ODECLEND OBLOCKEND EOF END
follow(classSpfnBlockKindUnspecified) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXCEPTION EOF END DEFAULT AND ABSTRACT
follow(classSpfnBlock) = error OEND ODECLEND EOF END
follow(classOrInterfaceOrStruct) = error VIRTUAL VAL STATIC PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER ODO OBLOCKBEGIN NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(classMemberSpfnGetSetElements) = error WITH VIRTUAL VAL STATIC SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EQUALS EOF END DO DEFAULT ABSTRACT
follow(classMemberSpfnGetSet) = error WITH VIRTUAL VAL STATIC SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EQUALS EOF END DO DEFAULT ABSTRACT
follow(classMemberSpfn) = error WITH VIRTUAL VAL STATIC SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OINTERFACE_MEMBER OEND ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LBRACK_LESS INTERNAL INTERFACE INHERIT EOF END DEFAULT ABSTRACT
follow(classDefnMembers) = error WITH OEND ODECLEND OBLOCKEND EOF END
follow(classDefnMemberGetSetElements) = error WITH VIRTUAL VAL STATIC SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(classDefnMemberGetSetElement) = error WITH VIRTUAL VAL STATIC SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT AND ABSTRACT
follow(classDefnMemberGetSet) = error WITH VIRTUAL VAL STATIC SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(classDefnMember) = error WITH VIRTUAL VAL STATIC SEMICOLON PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EOF END DO DEFAULT ABSTRACT
follow(classDefnBlockKindUnspecified) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(classDefnBlock) = error OEND ODECLEND EOF END
follow(cType) = STAR RPAREN PUBLIC PRIVATE LBRACK INTERNAL IDENT HIGH_PRECEDENCE_APP COMMA AMP
follow(cRetType) = PUBLIC PRIVATE INTERNAL IDENT
follow(cPrototype) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT ABSTRACT
follow(cMoreArgs) = RPAREN COMMA
follow(cArgs) = RPAREN
follow(cArg) = RPAREN COMMA
follow(braceFieldDeclList) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EQUALS EOF END DO DEFAULT BAR AND ABSTRACT
follow(braceExprBody) = error RBRACE EOF
follow(braceExpr) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(bindingPattern) = WITH OWITH EQUALS COLON
follow(beginEndExpr) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(barNames) = BAR
follow(attributes) = VOID VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE STRING STATIC QUOTE QMARK PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER ODO NULL NEW NATIVEINT NAMESPACE MUTABLE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INTERFACE INT8 INT64 INT32 INT16 INLINE INHERIT INFIX_AT_HAT_OP IEEE64 IEEE32 IDENT HASH FALSE EXTERN EXCEPTION DOLLAR DO DEFAULT DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(attributeTarget) = COLON
follow(attributeListElements) = SEMICOLON OBLOCKSEP GREATER_RBRACK
follow(attributeList) = VOID VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE STRING STATIC QUOTE QMARK PUBLIC PRIVATE OVERRIDE OLET OINTERFACE_MEMBER ODO NULL NEW NATIVEINT NAMESPACE MUTABLE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LBRACK_LESS LBRACK_BAR LBRACK LBRACE INTERNAL INTERFACE INT8 INT64 INT32 INT16 INLINE INHERIT INFIX_AT_HAT_OP IEEE64 IEEE32 IDENT HASH FALSE EXTERN EXCEPTION DOLLAR DO DEFAULT DECIMAL COLON_QMARK CHAR BYTEARRAY BIGNUM BIGINT ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(attribute) = SEMICOLON OBLOCKSEP GREATER_RBRACK
follow(attr_localBinding) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RBRACE PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT IN HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(attrUnionCaseDecls) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT AND ABSTRACT
follow(attrUnionCaseDecl) = error WITH VIRTUAL VAL TYPE STATIC SEMICOLON_SEMICOLON SEMICOLON RPAREN PUBLIC PRIVATE OVERRIDE OPEN OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT HASH_KEYWORD HASH EXTERN EXCEPTION EOF END DO DEFAULT BAR AND ABSTRACT
follow(atomicPatterns) = error WITH WHEN SEMICOLON RPAREN RBRACK RBRACE RARROW OWITH OBLOCKSEP IN EQUALS EOF COMMA COLON_GREATER COLON_COLON COLON BAR_RBRACK BAR AS AMP
follow(atomicPatternLongIdent) = error WITH WHEN UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING SEMICOLON RPAREN RBRACK RBRACE RARROW QMARK PUBLIC PRIVATE OWITH OBLOCKSEP NULL NATIVEINT MINUS LQUOTE LPAREN LESS LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP FALSE EQUALS EOF DECIMAL COMMA COLON_GREATER COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BAR_RBRACK BAR AS AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(atomicPattern) = error WITH WHEN UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TRUE STRING SEMICOLON RPAREN RBRACK RBRACE RARROW QMARK PUBLIC PRIVATE OWITH OBLOCKSEP NULL NATIVEINT MINUS LQUOTE LPAREN LBRACK_BAR LBRACK LBRACE INTERNAL INT8 INT64 INT32 INT16 IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP FALSE EQUALS EOF DECIMAL COMMA COLON_GREATER COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BAR_RBRACK BAR AS AMP ADJACENT_PREFIX_PLUS_MINUS_OP
follow(atomType) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(asSpec) = error WITH VIRTUAL VAL STATIC SEMICOLON RBRACE PUBLIC PRIVATE OWITH OVERRIDE OLET OINTERFACE_MEMBER OEND ODO ODECLEND OBLOCKSEP OBLOCKEND NEW METHOD MEMBER LET LBRACK_LESS INTERNAL INTERFACE INHERIT EXTERN EQUALS EOF END DO DEFAULT ABSTRACT
follow(arrayTypeSuffix) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(arrayExpr) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(argExprQualification) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(argExprNoHPA) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(argExprAfterType) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER_RBRACK GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(argExpr) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_TYAPP HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(appTypePrexifArguments) = RPAREN
follow(appType) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LAZY INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HIGH_PRECEDENCE_APP HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AS AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(appExpr) = error WITH WHEN VIRTUAL VAL UNDERSCORE UNATIVEINT UINT8 UINT64 UINT32 UINT16 TYPE TRUE TO THEN STRING STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK QMARK PUBLIC PRIVATE PREFIX_OP PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NULL NEW NATIVEINT NAMESPACE MODULE MINUS METHOD MEMBER LQUOTE LPAREN LET LESS LBRACK_LESS LBRACK_BAR LBRACK LBRACE LARROW INTERNAL INTERFACE INT8 INT64 INT32 INT16 INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN IEEE64 IEEE32 IDENT HASH_KEYWORD HASH GREATER FOR FINALLY FALSE EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT DECIMAL COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BIGNUM BIGINT BEGIN BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(anonMatchingExpr) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(anonLambdaExpr) = error WITH WHEN VIRTUAL VAL TYPE TO THEN STATIC STAR SEMICOLON_SEMICOLON SEMICOLON RQUOTE RPAREN RBRACK RBRACE RARROW2 RARROW QMARK_QMARK PUBLIC PRIVATE PLUS_MINUS_OP PERCENT_OP OWITH OVERRIDE OTHEN ORIGHT_BLOCK_END OR OPEN OLET OINTERFACE_MEMBER OEND OELSE ODO ODECLEND OBLOCKSEP OBLOCKEND NEW NAMESPACE MODULE MINUS METHOD MEMBER LET LESS LBRACK_LESS INTERNAL INTERFACE INHERIT INFIX_STAR_STAR_OP INFIX_STAR_DIV_MOD_OP INFIX_COMPARE_OP INFIX_BAR_OP INFIX_AT_HAT_OP INFIX_AMP_OP IN HASH_KEYWORD HASH GREATER FOR FINALLY EXTERN EXCEPTION EQUALS EOF END ELSE ELIF DOWNTO DOT_DOT DONE DOLLAR DO DEFAULT COMMA COLON_QMARK_GREATER COLON_QMARK COLON_GREATER COLON_EQUALS COLON_COLON COLON BAR_RBRACK BAR_BAR BAR AND AMP_AMP AMP ADJACENT_PREFIX_PLUS_MINUS_OP ABSTRACT
follow(access) = VIRTUAL VAL TYPE STATIC QUOTE OVERRIDE OLET OINTERFACE_MEMBER ODO NEW MODULE METHOD MEMBER LPAREN LET INTERFACE INHERIT INFIX_AT_HAT_OP IDENT EXTERN EXCEPTION DOLLAR DO DEFAULT ABSTRACT
follow(abstractMemberFlags) = LPAREN INLINE IDENT
Built an LR(0) automaton with 1610 states.
The grammar is not SLR(1) -- 206 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 2762 states.
1611 shift/reduce conflicts were silently solved.
Only 2760 states remain after resolving shift/reduce conflicts.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to BIGINT is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to BIGNUM is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to BYTEARRAY is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to CHAR is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to DECIMAL is never useful.
File "fsharp.mly", line 314, characters 0-9:
Warning: the precedence level assigned to FALSE is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to IEEE32 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to IEEE64 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to INT16 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to INT32 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to INT64 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to INT8 is never useful.
File "fsharp.mly", line 313, characters 0-9:
Warning: the precedence level assigned to LBRACE is never useful.
File "fsharp.mly", line 313, characters 0-9:
Warning: the precedence level assigned to LBRACK_BAR is never useful.
File "fsharp.mly", line 313, characters 0-9:
Warning: the precedence level assigned to LPAREN is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to NATIVEINT is never useful.
File "fsharp.mly", line 314, characters 0-9:
Warning: the precedence level assigned to NULL is never useful.
File "fsharp.mly", line 366, characters 0-9:
Warning: the precedence level assigned to OPEN is never useful.
File "fsharp.mly", line 285, characters 0-9:
Warning: the precedence level assigned to RPAREN is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to STRING is never useful.
File "fsharp.mly", line 314, characters 0-9:
Warning: the precedence level assigned to TRUE is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to UINT16 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to UINT32 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to UINT64 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to UINT8 is never useful.
File "fsharp.mly", line 312, characters 0-9:
Warning: the precedence level assigned to UNATIVEINT is never useful.
File "fsharp.mly", line 351, characters 0-9:
Warning: the precedence level assigned to decl_do is never useful.
File "fsharp.mly", line 351, characters 0-9:
Warning: the precedence level assigned to decl_match is never useful.
File "fsharp.mly", line 394, characters 0-5:
Warning: the precedence level assigned to expr_app is never useful.
File "fsharp.mly", line 395, characters 0-5:
Warning: the precedence level assigned to expr_args is never useful.
File "fsharp.mly", line 350, characters 0-9:
Warning: the precedence level assigned to expr_do is never useful.
File "fsharp.mly", line 350, characters 0-9:
Warning: the precedence level assigned to expr_fun is never useful.
File "fsharp.mly", line 350, characters 0-9:
Warning: the precedence level assigned to expr_function is never useful.
File "fsharp.mly", line 352, characters 0-9:
Warning: the precedence level assigned to expr_if is never useful.
File "fsharp.mly", line 388, characters 0-9:
Warning: the precedence level assigned to expr_isinst is never useful.
File "fsharp.mly", line 348, characters 0-9:
Warning: the precedence level assigned to expr_let is never useful.
File "fsharp.mly", line 350, characters 0-9:
Warning: the precedence level assigned to expr_match is never useful.
File "fsharp.mly", line 384, characters 0-9:
Warning: the precedence level assigned to expr_not is never useful.
File "fsharp.mly", line 393, characters 0-9:
Warning: the precedence level assigned to expr_prefix_plus_minus is never useful.
File "fsharp.mly", line 350, characters 0-9:
Warning: the precedence level assigned to expr_try is never useful.
File "fsharp.mly", line 396, characters 0-6:
Warning: the precedence level assigned to matching_bar is never useful.
File "fsharp.mly", line 378, characters 0-9:
Warning: the precedence level assigned to paren_pat_colon is never useful.
File "fsharp.mly", line 397, characters 0-5:
Warning: the precedence level assigned to pat_app is never useful.
File "fsharp.mly", line 398, characters 0-5:
Warning: the precedence level assigned to pat_args is never useful.
File "fsharp.mly", line 388, characters 0-9:
Warning: the precedence level assigned to pat_isinst is never useful.
File "fsharp.mly", line 278, characters 0-9:
Warning: the precedence level assigned to prec_args_error is never useful.
File "fsharp.mly", line 279, characters 0-9:
Warning: the precedence level assigned to prec_atomexpr_lparen_error is never useful.
File "fsharp.mly", line 311, characters 0-9:
Warning: the precedence level assigned to prec_atompat_pathop is never useful.
File "fsharp.mly", line 301, characters 0-6:
Warning: the precedence level assigned to prec_defn_sep is never useful.
File "fsharp.mly", line 405, characters 0-9:
Warning: the precedence level assigned to prec_interaction_empty is never useful.
File "fsharp.mly", line 369, characters 0-9:
Warning: the precedence level assigned to prec_interfaces_prefix is never useful.
File "fsharp.mly", line 365, characters 0-9:
Warning: the precedence level assigned to prec_no_more_attr_bindings is never useful.
File "fsharp.mly", line 300, characters 0-6:
Warning: the precedence level assigned to prec_semiexpr_sep is never useful.
File "fsharp.mly", line 296, characters 0-5:
Warning: the precedence level assigned to prec_then_before is never useful.
File "fsharp.mly", line 328, characters 0-9:
Warning: the precedence level assigned to prec_toptuptyptail_prefix is never useful.
File "fsharp.mly", line 376, characters 0-9:
Warning: the precedence level assigned to slice_comma is never useful.
File "fsharp.mly", line 2610, characters 43-56:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2612, characters 49-62:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2614, characters 55-68:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2097, characters 31-39:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2712, characters 39-52:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2174, characters 52-63:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2747, characters 24-41:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2751, characters 37-58:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1783, characters 33-52:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1755, characters 39-47:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1749, characters 98-105:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1751, characters 32-42:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1914, characters 40-48:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1916, characters 39-47:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1918, characters 36-44:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1921, characters 51-59:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1923, characters 45-53:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1926, characters 61-69:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1929, characters 55-63:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1932, characters 27-40:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1934, characters 26-34:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1936, characters 59-69:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1937, characters 59-67:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1938, characters 59-67:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1940, characters 34-41:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2001, characters 20-42:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2051, characters 52-64:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2070, characters 28-50:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2074, characters 52-74:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 572, characters 56-64:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 580, characters 76-84:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 585, characters 76-84:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 590, characters 55-63:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2388, characters 71-79:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2390, characters 71-79:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2392, characters 60-68:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2394, characters 60-68:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2397, characters 56-64:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2399, characters 53-61:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2401, characters 108-116:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2406, characters 138-146:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2411, characters 78-86:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2414, characters 96-104:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2329, characters 74-82:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2331, characters 68-76:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2333, characters 83-91:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2338, characters 77-85:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2340, characters 71-79:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2342, characters 86-94:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2345, characters 41-48:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2350, characters 70-78:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2353, characters 82-90:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2356, characters 59-69:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2481, characters 46-58:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2482, characters 69-81:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2457, characters 74-82:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2462, characters 77-85:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2467, characters 84-92:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2474, characters 87-95:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2382, characters 46-56:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2384, characters 47-57:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1620, characters 10-36:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2586, characters 10-32:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2515, characters 44-53:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2244, characters 25-51:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1839, characters 54-69:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2302, characters 38-46:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1905, characters 32-48:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1906, characters 60-76:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1709, characters 35-52:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 2658, characters 21-46:
Warning: this %prec declaration is never useful.
File "fsharp.mly", line 1896, characters 43-54:
Warning: this %prec declaration is never useful.
Warning: 148 states have shift/reduce conflicts.
Warning: 2 states have reduce/reduce conflicts.
Warning: 333 shift/reduce conflicts were arbitrarily resolved.
File "fsharp.mly", line 1744, characters 4-46:
Warning: production conjPatternElements -> conjPatternElements AMP headBindingPattern is never reduced.
Warning: in total, 1 production is never reduced.
1077 out of 2760 states have a default reduction.
1399 out of 2760 states are represented.
0 out of 453 symbols keep track of their start position.
0 out of 453 symbols keep track of their end position.
422 out of 848 productions exploit shiftreduce optimization.
664 out of 2760 states can peek at an error.
6650 functions before inlining, 1552 functions after inlining.
