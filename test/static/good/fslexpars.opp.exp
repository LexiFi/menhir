File "fslexpars.mly", line 13, characters 15-18:
Warning: the token DOT is unused.
%{
(* (c) Microsoft Corporation 2005-2006.  *)

open Fslexast

%}
%start spec
%token AND
%token BAR
%token <char> CHAR
%token <Fslexast.code> CODE
%token DASH
%token DOT
%token EOF
%token EQUALS
%token HAT
%token <string> IDENT
%token LBRACK
%token LET
%token LPAREN
%token PARSE
%token PLUS
%token QMARK
%token RBRACK
%token RPAREN
%token RULE
%token STAR
%token <string> STRING
%token UNDERSCORE
%left BAR
%left regexp_alt
%left regexp_seq
%nonassoc regexp_opt
%nonassoc regexp_plus regexp_star
%type <Fslexast.spec> spec
%%

spec:
  _1 = codeopt _2 = macros _3 = RULE _4 = rules _5 = codeopt
    {                                        ( { topcode=_1;macros=_2;rules=_4;botcode=_5 } )}

codeopt:
  _1 = CODE
    {              ( _1 )}
| 
    {                       ( "", Parsing.symbol_start_pos () )}

macros:
  
    {         ( [] )}
| _1 = macro _2 = macros
    {                               ( _1 :: _2 )}

macro:
  _1 = LET _2 = IDENT _3 = EQUALS _4 = regexp
    {                               ( (_2, _4) )}

rules:
  _1 = rule _2 = AND _3 = rules
    {                      ( _1 :: _3 )}
| _1 = rule
    {                                          ( [_1] )}

rule:
  _1 = IDENT _2 = args _3 = EQUALS _4 = PARSE _5 = optbar _6 = clauses
    {                                             ( (_1,_2,_6) )}

args:
  
    {      ( [] )}
| _1 = IDENT _2 = args
    {                          ( _1 :: _2 )}

optbar:
  
    {        ( )}
| _1 = BAR
    {                  ( )}

clauses:
  _1 = clause _2 = BAR _3 = clauses
    {                            (_1 :: _3 )}
| _1 = clause
    {                                                 ( [_1] )}

clause:
  _1 = regexp _2 = CODE
    {                    ( _1, _2 )}

regexp:
  _1 = CHAR
    {       ( Inp(LChar _1) )}
| _1 = EOF
    {      ( Inp(LEof) )}
| _1 = UNDERSCORE
    {             ( Alt(mapi (fun n -> Inp(LChar (Char.chr n))) 255) )}
| _1 = STRING
    {         ( Seq(mapi (fun n -> Inp(LChar (String.get _1 n))) (String.length _1 - 1)) )}
| _1 = IDENT
    {        ( Macro(_1) )}
| _1 = regexp _2 = regexp %prec regexp_seq
    {                                  ( Seq[_1;_2] )}
| _1 = regexp _2 = PLUS %prec regexp_plus
    {                                 ( Seq[_1;Star _1] )}
| _1 = regexp _2 = STAR %prec regexp_star
    {                                 ( Star _1 )}
| _1 = regexp _2 = QMARK %prec regexp_opt
    {                                 ( Alt[Seq[];_1] )}
| _1 = regexp _2 = BAR _3 = regexp %prec regexp_alt
    {                                      ( Alt[_1;_3] )}
| _1 = LPAREN _2 = regexp _3 = RPAREN
    {                        ( _2 )}
| _1 = LBRACK _2 = charset _3 = RBRACK
    {                          ( Alt (List.map (fun c -> Inp(LChar c)) _2) )}
| _1 = LBRACK _2 = HAT _3 = charset _4 = RBRACK
    {                              ( Alt(foldi(fun n l -> if List.mem (Char.chr n) _3 then l else Inp(LChar (Char.chr n))::l) 255 []) )}

charset:
  _1 = CHAR
    {        ( [_1] )}
| _1 = CHAR _2 = DASH _3 = CHAR
    {                  ( mapi(fun n -> Char.chr (n+Char.code _1)) (Char.code _3 - Char.code _1) )}
| _1 = charset _2 = charset
    {                   ( _1 @ _2 )}

%%
