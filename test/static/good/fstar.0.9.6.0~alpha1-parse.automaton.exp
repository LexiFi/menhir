State 0:
## Known stack suffix:
##
## LR(1) items:
inputFragment' -> . inputFragment [ # ]
## Transitions:
-- On PRAGMALIGHT shift to state 1
-- On inputFragment shift to state 3
-- On boption(__anonymous_0) shift to state 4
## Reductions:
-- On VAL reduce production boption(__anonymous_0) ->
-- On UNOPTEQUALITY reduce production boption(__anonymous_0) ->
-- On UNFOLDABLE reduce production boption(__anonymous_0) ->
-- On UNFOLD reduce production boption(__anonymous_0) ->
-- On TYPE reduce production boption(__anonymous_0) ->
-- On TOTAL reduce production boption(__anonymous_0) ->
-- On SUB_EFFECT reduce production boption(__anonymous_0) ->
-- On SPLICE reduce production boption(__anonymous_0) ->
-- On REIFIABLE reduce production boption(__anonymous_0) ->
-- On REFLECTABLE reduce production boption(__anonymous_0) ->
-- On PRIVATE reduce production boption(__anonymous_0) ->
-- On PRAGMA_SET_OPTIONS reduce production boption(__anonymous_0) ->
-- On PRAGMA_RESET_OPTIONS reduce production boption(__anonymous_0) ->
-- On OPEN reduce production boption(__anonymous_0) ->
-- On OPAQUE reduce production boption(__anonymous_0) ->
-- On NOEXTRACT reduce production boption(__anonymous_0) ->
-- On NOEQUALITY reduce production boption(__anonymous_0) ->
-- On NEW_EFFECT reduce production boption(__anonymous_0) ->
-- On NEW reduce production boption(__anonymous_0) ->
-- On MODULE reduce production boption(__anonymous_0) ->
-- On LOGIC reduce production boption(__anonymous_0) ->
-- On LET reduce production boption(__anonymous_0) ->
-- On LBRACK_AT reduce production boption(__anonymous_0) ->
-- On IRREDUCIBLE reduce production boption(__anonymous_0) ->
-- On INLINE_FOR_EXTRACTION reduce production boption(__anonymous_0) ->
-- On INLINE reduce production boption(__anonymous_0) ->
-- On INCLUDE reduce production boption(__anonymous_0) ->
-- On FSDOC_STANDALONE reduce production boption(__anonymous_0) ->
-- On FSDOC reduce production boption(__anonymous_0) ->
-- On EXCEPTION reduce production boption(__anonymous_0) ->
-- On EOF reduce production boption(__anonymous_0) ->
-- On EFFECT reduce production boption(__anonymous_0) ->
-- On DEFAULT reduce production boption(__anonymous_0) ->
-- On ASSUME reduce production boption(__anonymous_0) ->
-- On ABSTRACT reduce production boption(__anonymous_0) ->

State 1:
## Known stack suffix:
## PRAGMALIGHT
## LR(1) items:
boption(__anonymous_0) -> PRAGMALIGHT . STRING [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On STRING shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## PRAGMALIGHT STRING
## LR(1) items:
boption(__anonymous_0) -> PRAGMALIGHT STRING . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On UNOPTEQUALITY reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On UNFOLDABLE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On UNFOLD reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On TYPE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On TOTAL reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On SUB_EFFECT reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On SPLICE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On REIFIABLE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On REFLECTABLE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On PRIVATE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On PRAGMA_SET_OPTIONS reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On PRAGMA_RESET_OPTIONS reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On OPEN reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On OPAQUE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On NOEXTRACT reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On NOEQUALITY reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On NEW_EFFECT reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On NEW reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On MODULE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On LOGIC reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On LET reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On LBRACK_AT reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On IRREDUCIBLE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On INLINE_FOR_EXTRACTION reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On INLINE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On INCLUDE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On FSDOC_STANDALONE reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On FSDOC reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On EXCEPTION reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On EOF reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On EFFECT reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On DEFAULT reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On ASSUME reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING
-- On ABSTRACT reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING

State 3:
## Known stack suffix:
## inputFragment
## LR(1) items:
inputFragment' -> inputFragment . [ # ]
## Transitions:
## Reductions:
-- On # accept inputFragment

State 4:
## Known stack suffix:
## boption(__anonymous_0)
## LR(1) items:
inputFragment -> boption(__anonymous_0) . list(decl) EOF [ # ]
## Transitions:
-- On UNOPTEQUALITY shift to state 5
-- On UNFOLDABLE shift to state 6
-- On UNFOLD shift to state 7
-- On TOTAL shift to state 8
-- On REIFIABLE shift to state 9
-- On REFLECTABLE shift to state 10
-- On PRIVATE shift to state 11
-- On OPAQUE shift to state 12
-- On NOEXTRACT shift to state 13
-- On NOEQUALITY shift to state 14
-- On NEW shift to state 15
-- On LOGIC shift to state 16
-- On LBRACK_AT shift to state 17
-- On IRREDUCIBLE shift to state 685
-- On INLINE_FOR_EXTRACTION shift to state 686
-- On INLINE shift to state 687
-- On FSDOC shift to state 688
-- On DEFAULT shift to state 689
-- On ASSUME shift to state 690
-- On ABSTRACT shift to state 694
-- On qualifier shift to state 695
-- On list(decoration) shift to state 696
-- On list(decl) shift to state 869
-- On decoration shift to state 871
-- On decl shift to state 875
-- On attribute shift to state 874
## Reductions:
-- On VAL reduce production list(decoration) ->
-- On TYPE reduce production list(decoration) ->
-- On SUB_EFFECT reduce production list(decoration) ->
-- On SPLICE reduce production list(decoration) ->
-- On PRAGMA_SET_OPTIONS reduce production list(decoration) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(decoration) ->
-- On OPEN reduce production list(decoration) ->
-- On NEW_EFFECT reduce production list(decoration) ->
-- On MODULE reduce production list(decoration) ->
-- On LET reduce production list(decoration) ->
-- On INCLUDE reduce production list(decoration) ->
-- On FSDOC_STANDALONE reduce production list(decoration) ->
-- On EXCEPTION reduce production list(decoration) ->
-- On EOF reduce production list(decl) ->
-- On EFFECT reduce production list(decoration) ->

State 5:
## Known stack suffix:
## UNOPTEQUALITY
## LR(1) items:
qualifier -> UNOPTEQUALITY . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> UNOPTEQUALITY
-- On UNOPTEQUALITY reduce production qualifier -> UNOPTEQUALITY
-- On UNFOLDABLE reduce production qualifier -> UNOPTEQUALITY
-- On UNFOLD reduce production qualifier -> UNOPTEQUALITY
-- On TYPE reduce production qualifier -> UNOPTEQUALITY
-- On TOTAL reduce production qualifier -> UNOPTEQUALITY
-- On SUB_EFFECT reduce production qualifier -> UNOPTEQUALITY
-- On SPLICE reduce production qualifier -> UNOPTEQUALITY
-- On REIFIABLE reduce production qualifier -> UNOPTEQUALITY
-- On REFLECTABLE reduce production qualifier -> UNOPTEQUALITY
-- On PRIVATE reduce production qualifier -> UNOPTEQUALITY
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> UNOPTEQUALITY
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> UNOPTEQUALITY
-- On OPEN reduce production qualifier -> UNOPTEQUALITY
-- On OPAQUE reduce production qualifier -> UNOPTEQUALITY
-- On NOEXTRACT reduce production qualifier -> UNOPTEQUALITY
-- On NOEQUALITY reduce production qualifier -> UNOPTEQUALITY
-- On NEW_EFFECT reduce production qualifier -> UNOPTEQUALITY
-- On NEW reduce production qualifier -> UNOPTEQUALITY
-- On MODULE reduce production qualifier -> UNOPTEQUALITY
-- On LOGIC reduce production qualifier -> UNOPTEQUALITY
-- On LET reduce production qualifier -> UNOPTEQUALITY
-- On LBRACK_AT reduce production qualifier -> UNOPTEQUALITY
-- On IRREDUCIBLE reduce production qualifier -> UNOPTEQUALITY
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> UNOPTEQUALITY
-- On INLINE reduce production qualifier -> UNOPTEQUALITY
-- On INCLUDE reduce production qualifier -> UNOPTEQUALITY
-- On FSDOC_STANDALONE reduce production qualifier -> UNOPTEQUALITY
-- On FSDOC reduce production qualifier -> UNOPTEQUALITY
-- On EXCEPTION reduce production qualifier -> UNOPTEQUALITY
-- On EFFECT reduce production qualifier -> UNOPTEQUALITY
-- On DEFAULT reduce production qualifier -> UNOPTEQUALITY
-- On ASSUME reduce production qualifier -> UNOPTEQUALITY
-- On ABSTRACT reduce production qualifier -> UNOPTEQUALITY

State 6:
## Known stack suffix:
## UNFOLDABLE
## LR(1) items:
qualifier -> UNFOLDABLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> UNFOLDABLE
-- On UNOPTEQUALITY reduce production qualifier -> UNFOLDABLE
-- On UNFOLDABLE reduce production qualifier -> UNFOLDABLE
-- On UNFOLD reduce production qualifier -> UNFOLDABLE
-- On TYPE reduce production qualifier -> UNFOLDABLE
-- On TOTAL reduce production qualifier -> UNFOLDABLE
-- On SUB_EFFECT reduce production qualifier -> UNFOLDABLE
-- On SPLICE reduce production qualifier -> UNFOLDABLE
-- On REIFIABLE reduce production qualifier -> UNFOLDABLE
-- On REFLECTABLE reduce production qualifier -> UNFOLDABLE
-- On PRIVATE reduce production qualifier -> UNFOLDABLE
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> UNFOLDABLE
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> UNFOLDABLE
-- On OPEN reduce production qualifier -> UNFOLDABLE
-- On OPAQUE reduce production qualifier -> UNFOLDABLE
-- On NOEXTRACT reduce production qualifier -> UNFOLDABLE
-- On NOEQUALITY reduce production qualifier -> UNFOLDABLE
-- On NEW_EFFECT reduce production qualifier -> UNFOLDABLE
-- On NEW reduce production qualifier -> UNFOLDABLE
-- On MODULE reduce production qualifier -> UNFOLDABLE
-- On LOGIC reduce production qualifier -> UNFOLDABLE
-- On LET reduce production qualifier -> UNFOLDABLE
-- On LBRACK_AT reduce production qualifier -> UNFOLDABLE
-- On IRREDUCIBLE reduce production qualifier -> UNFOLDABLE
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> UNFOLDABLE
-- On INLINE reduce production qualifier -> UNFOLDABLE
-- On INCLUDE reduce production qualifier -> UNFOLDABLE
-- On FSDOC_STANDALONE reduce production qualifier -> UNFOLDABLE
-- On FSDOC reduce production qualifier -> UNFOLDABLE
-- On EXCEPTION reduce production qualifier -> UNFOLDABLE
-- On EFFECT reduce production qualifier -> UNFOLDABLE
-- On DEFAULT reduce production qualifier -> UNFOLDABLE
-- On ASSUME reduce production qualifier -> UNFOLDABLE
-- On ABSTRACT reduce production qualifier -> UNFOLDABLE

State 7:
## Known stack suffix:
## UNFOLD
## LR(1) items:
qualifier -> UNFOLD . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> UNFOLD
-- On UNOPTEQUALITY reduce production qualifier -> UNFOLD
-- On UNFOLDABLE reduce production qualifier -> UNFOLD
-- On UNFOLD reduce production qualifier -> UNFOLD
-- On TYPE reduce production qualifier -> UNFOLD
-- On TOTAL reduce production qualifier -> UNFOLD
-- On SUB_EFFECT reduce production qualifier -> UNFOLD
-- On SPLICE reduce production qualifier -> UNFOLD
-- On REIFIABLE reduce production qualifier -> UNFOLD
-- On REFLECTABLE reduce production qualifier -> UNFOLD
-- On PRIVATE reduce production qualifier -> UNFOLD
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> UNFOLD
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> UNFOLD
-- On OPEN reduce production qualifier -> UNFOLD
-- On OPAQUE reduce production qualifier -> UNFOLD
-- On NOEXTRACT reduce production qualifier -> UNFOLD
-- On NOEQUALITY reduce production qualifier -> UNFOLD
-- On NEW_EFFECT reduce production qualifier -> UNFOLD
-- On NEW reduce production qualifier -> UNFOLD
-- On MODULE reduce production qualifier -> UNFOLD
-- On LOGIC reduce production qualifier -> UNFOLD
-- On LET reduce production qualifier -> UNFOLD
-- On LBRACK_AT reduce production qualifier -> UNFOLD
-- On IRREDUCIBLE reduce production qualifier -> UNFOLD
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> UNFOLD
-- On INLINE reduce production qualifier -> UNFOLD
-- On INCLUDE reduce production qualifier -> UNFOLD
-- On FSDOC_STANDALONE reduce production qualifier -> UNFOLD
-- On FSDOC reduce production qualifier -> UNFOLD
-- On EXCEPTION reduce production qualifier -> UNFOLD
-- On EFFECT reduce production qualifier -> UNFOLD
-- On DEFAULT reduce production qualifier -> UNFOLD
-- On ASSUME reduce production qualifier -> UNFOLD
-- On ABSTRACT reduce production qualifier -> UNFOLD

State 8:
## Known stack suffix:
## TOTAL
## LR(1) items:
qualifier -> TOTAL . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> TOTAL
-- On UNOPTEQUALITY reduce production qualifier -> TOTAL
-- On UNFOLDABLE reduce production qualifier -> TOTAL
-- On UNFOLD reduce production qualifier -> TOTAL
-- On TYPE reduce production qualifier -> TOTAL
-- On TOTAL reduce production qualifier -> TOTAL
-- On SUB_EFFECT reduce production qualifier -> TOTAL
-- On SPLICE reduce production qualifier -> TOTAL
-- On REIFIABLE reduce production qualifier -> TOTAL
-- On REFLECTABLE reduce production qualifier -> TOTAL
-- On PRIVATE reduce production qualifier -> TOTAL
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> TOTAL
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> TOTAL
-- On OPEN reduce production qualifier -> TOTAL
-- On OPAQUE reduce production qualifier -> TOTAL
-- On NOEXTRACT reduce production qualifier -> TOTAL
-- On NOEQUALITY reduce production qualifier -> TOTAL
-- On NEW_EFFECT reduce production qualifier -> TOTAL
-- On NEW reduce production qualifier -> TOTAL
-- On MODULE reduce production qualifier -> TOTAL
-- On LOGIC reduce production qualifier -> TOTAL
-- On LET reduce production qualifier -> TOTAL
-- On LBRACK_AT reduce production qualifier -> TOTAL
-- On IRREDUCIBLE reduce production qualifier -> TOTAL
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> TOTAL
-- On INLINE reduce production qualifier -> TOTAL
-- On INCLUDE reduce production qualifier -> TOTAL
-- On FSDOC_STANDALONE reduce production qualifier -> TOTAL
-- On FSDOC reduce production qualifier -> TOTAL
-- On EXCEPTION reduce production qualifier -> TOTAL
-- On EFFECT reduce production qualifier -> TOTAL
-- On DEFAULT reduce production qualifier -> TOTAL
-- On ASSUME reduce production qualifier -> TOTAL
-- On ABSTRACT reduce production qualifier -> TOTAL

State 9:
## Known stack suffix:
## REIFIABLE
## LR(1) items:
qualifier -> REIFIABLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> REIFIABLE
-- On UNOPTEQUALITY reduce production qualifier -> REIFIABLE
-- On UNFOLDABLE reduce production qualifier -> REIFIABLE
-- On UNFOLD reduce production qualifier -> REIFIABLE
-- On TYPE reduce production qualifier -> REIFIABLE
-- On TOTAL reduce production qualifier -> REIFIABLE
-- On SUB_EFFECT reduce production qualifier -> REIFIABLE
-- On SPLICE reduce production qualifier -> REIFIABLE
-- On REIFIABLE reduce production qualifier -> REIFIABLE
-- On REFLECTABLE reduce production qualifier -> REIFIABLE
-- On PRIVATE reduce production qualifier -> REIFIABLE
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> REIFIABLE
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> REIFIABLE
-- On OPEN reduce production qualifier -> REIFIABLE
-- On OPAQUE reduce production qualifier -> REIFIABLE
-- On NOEXTRACT reduce production qualifier -> REIFIABLE
-- On NOEQUALITY reduce production qualifier -> REIFIABLE
-- On NEW_EFFECT reduce production qualifier -> REIFIABLE
-- On NEW reduce production qualifier -> REIFIABLE
-- On MODULE reduce production qualifier -> REIFIABLE
-- On LOGIC reduce production qualifier -> REIFIABLE
-- On LET reduce production qualifier -> REIFIABLE
-- On LBRACK_AT reduce production qualifier -> REIFIABLE
-- On IRREDUCIBLE reduce production qualifier -> REIFIABLE
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> REIFIABLE
-- On INLINE reduce production qualifier -> REIFIABLE
-- On INCLUDE reduce production qualifier -> REIFIABLE
-- On FSDOC_STANDALONE reduce production qualifier -> REIFIABLE
-- On FSDOC reduce production qualifier -> REIFIABLE
-- On EXCEPTION reduce production qualifier -> REIFIABLE
-- On EFFECT reduce production qualifier -> REIFIABLE
-- On DEFAULT reduce production qualifier -> REIFIABLE
-- On ASSUME reduce production qualifier -> REIFIABLE
-- On ABSTRACT reduce production qualifier -> REIFIABLE

State 10:
## Known stack suffix:
## REFLECTABLE
## LR(1) items:
qualifier -> REFLECTABLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> REFLECTABLE
-- On UNOPTEQUALITY reduce production qualifier -> REFLECTABLE
-- On UNFOLDABLE reduce production qualifier -> REFLECTABLE
-- On UNFOLD reduce production qualifier -> REFLECTABLE
-- On TYPE reduce production qualifier -> REFLECTABLE
-- On TOTAL reduce production qualifier -> REFLECTABLE
-- On SUB_EFFECT reduce production qualifier -> REFLECTABLE
-- On SPLICE reduce production qualifier -> REFLECTABLE
-- On REIFIABLE reduce production qualifier -> REFLECTABLE
-- On REFLECTABLE reduce production qualifier -> REFLECTABLE
-- On PRIVATE reduce production qualifier -> REFLECTABLE
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> REFLECTABLE
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> REFLECTABLE
-- On OPEN reduce production qualifier -> REFLECTABLE
-- On OPAQUE reduce production qualifier -> REFLECTABLE
-- On NOEXTRACT reduce production qualifier -> REFLECTABLE
-- On NOEQUALITY reduce production qualifier -> REFLECTABLE
-- On NEW_EFFECT reduce production qualifier -> REFLECTABLE
-- On NEW reduce production qualifier -> REFLECTABLE
-- On MODULE reduce production qualifier -> REFLECTABLE
-- On LOGIC reduce production qualifier -> REFLECTABLE
-- On LET reduce production qualifier -> REFLECTABLE
-- On LBRACK_AT reduce production qualifier -> REFLECTABLE
-- On IRREDUCIBLE reduce production qualifier -> REFLECTABLE
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> REFLECTABLE
-- On INLINE reduce production qualifier -> REFLECTABLE
-- On INCLUDE reduce production qualifier -> REFLECTABLE
-- On FSDOC_STANDALONE reduce production qualifier -> REFLECTABLE
-- On FSDOC reduce production qualifier -> REFLECTABLE
-- On EXCEPTION reduce production qualifier -> REFLECTABLE
-- On EFFECT reduce production qualifier -> REFLECTABLE
-- On DEFAULT reduce production qualifier -> REFLECTABLE
-- On ASSUME reduce production qualifier -> REFLECTABLE
-- On ABSTRACT reduce production qualifier -> REFLECTABLE

State 11:
## Known stack suffix:
## PRIVATE
## LR(1) items:
qualifier -> PRIVATE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> PRIVATE
-- On UNOPTEQUALITY reduce production qualifier -> PRIVATE
-- On UNFOLDABLE reduce production qualifier -> PRIVATE
-- On UNFOLD reduce production qualifier -> PRIVATE
-- On TYPE reduce production qualifier -> PRIVATE
-- On TOTAL reduce production qualifier -> PRIVATE
-- On SUB_EFFECT reduce production qualifier -> PRIVATE
-- On SPLICE reduce production qualifier -> PRIVATE
-- On REIFIABLE reduce production qualifier -> PRIVATE
-- On REFLECTABLE reduce production qualifier -> PRIVATE
-- On PRIVATE reduce production qualifier -> PRIVATE
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> PRIVATE
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> PRIVATE
-- On OPEN reduce production qualifier -> PRIVATE
-- On OPAQUE reduce production qualifier -> PRIVATE
-- On NOEXTRACT reduce production qualifier -> PRIVATE
-- On NOEQUALITY reduce production qualifier -> PRIVATE
-- On NEW_EFFECT reduce production qualifier -> PRIVATE
-- On NEW reduce production qualifier -> PRIVATE
-- On MODULE reduce production qualifier -> PRIVATE
-- On LOGIC reduce production qualifier -> PRIVATE
-- On LET reduce production qualifier -> PRIVATE
-- On LBRACK_AT reduce production qualifier -> PRIVATE
-- On IRREDUCIBLE reduce production qualifier -> PRIVATE
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> PRIVATE
-- On INLINE reduce production qualifier -> PRIVATE
-- On INCLUDE reduce production qualifier -> PRIVATE
-- On FSDOC_STANDALONE reduce production qualifier -> PRIVATE
-- On FSDOC reduce production qualifier -> PRIVATE
-- On EXCEPTION reduce production qualifier -> PRIVATE
-- On EFFECT reduce production qualifier -> PRIVATE
-- On DEFAULT reduce production qualifier -> PRIVATE
-- On ASSUME reduce production qualifier -> PRIVATE
-- On ABSTRACT reduce production qualifier -> PRIVATE

State 12:
## Known stack suffix:
## OPAQUE
## LR(1) items:
qualifier -> OPAQUE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> OPAQUE
-- On UNOPTEQUALITY reduce production qualifier -> OPAQUE
-- On UNFOLDABLE reduce production qualifier -> OPAQUE
-- On UNFOLD reduce production qualifier -> OPAQUE
-- On TYPE reduce production qualifier -> OPAQUE
-- On TOTAL reduce production qualifier -> OPAQUE
-- On SUB_EFFECT reduce production qualifier -> OPAQUE
-- On SPLICE reduce production qualifier -> OPAQUE
-- On REIFIABLE reduce production qualifier -> OPAQUE
-- On REFLECTABLE reduce production qualifier -> OPAQUE
-- On PRIVATE reduce production qualifier -> OPAQUE
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> OPAQUE
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> OPAQUE
-- On OPEN reduce production qualifier -> OPAQUE
-- On OPAQUE reduce production qualifier -> OPAQUE
-- On NOEXTRACT reduce production qualifier -> OPAQUE
-- On NOEQUALITY reduce production qualifier -> OPAQUE
-- On NEW_EFFECT reduce production qualifier -> OPAQUE
-- On NEW reduce production qualifier -> OPAQUE
-- On MODULE reduce production qualifier -> OPAQUE
-- On LOGIC reduce production qualifier -> OPAQUE
-- On LET reduce production qualifier -> OPAQUE
-- On LBRACK_AT reduce production qualifier -> OPAQUE
-- On IRREDUCIBLE reduce production qualifier -> OPAQUE
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> OPAQUE
-- On INLINE reduce production qualifier -> OPAQUE
-- On INCLUDE reduce production qualifier -> OPAQUE
-- On FSDOC_STANDALONE reduce production qualifier -> OPAQUE
-- On FSDOC reduce production qualifier -> OPAQUE
-- On EXCEPTION reduce production qualifier -> OPAQUE
-- On EFFECT reduce production qualifier -> OPAQUE
-- On DEFAULT reduce production qualifier -> OPAQUE
-- On ASSUME reduce production qualifier -> OPAQUE
-- On ABSTRACT reduce production qualifier -> OPAQUE

State 13:
## Known stack suffix:
## NOEXTRACT
## LR(1) items:
qualifier -> NOEXTRACT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> NOEXTRACT
-- On UNOPTEQUALITY reduce production qualifier -> NOEXTRACT
-- On UNFOLDABLE reduce production qualifier -> NOEXTRACT
-- On UNFOLD reduce production qualifier -> NOEXTRACT
-- On TYPE reduce production qualifier -> NOEXTRACT
-- On TOTAL reduce production qualifier -> NOEXTRACT
-- On SUB_EFFECT reduce production qualifier -> NOEXTRACT
-- On SPLICE reduce production qualifier -> NOEXTRACT
-- On REIFIABLE reduce production qualifier -> NOEXTRACT
-- On REFLECTABLE reduce production qualifier -> NOEXTRACT
-- On PRIVATE reduce production qualifier -> NOEXTRACT
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> NOEXTRACT
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> NOEXTRACT
-- On OPEN reduce production qualifier -> NOEXTRACT
-- On OPAQUE reduce production qualifier -> NOEXTRACT
-- On NOEXTRACT reduce production qualifier -> NOEXTRACT
-- On NOEQUALITY reduce production qualifier -> NOEXTRACT
-- On NEW_EFFECT reduce production qualifier -> NOEXTRACT
-- On NEW reduce production qualifier -> NOEXTRACT
-- On MODULE reduce production qualifier -> NOEXTRACT
-- On LOGIC reduce production qualifier -> NOEXTRACT
-- On LET reduce production qualifier -> NOEXTRACT
-- On LBRACK_AT reduce production qualifier -> NOEXTRACT
-- On IRREDUCIBLE reduce production qualifier -> NOEXTRACT
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> NOEXTRACT
-- On INLINE reduce production qualifier -> NOEXTRACT
-- On INCLUDE reduce production qualifier -> NOEXTRACT
-- On FSDOC_STANDALONE reduce production qualifier -> NOEXTRACT
-- On FSDOC reduce production qualifier -> NOEXTRACT
-- On EXCEPTION reduce production qualifier -> NOEXTRACT
-- On EFFECT reduce production qualifier -> NOEXTRACT
-- On DEFAULT reduce production qualifier -> NOEXTRACT
-- On ASSUME reduce production qualifier -> NOEXTRACT
-- On ABSTRACT reduce production qualifier -> NOEXTRACT

State 14:
## Known stack suffix:
## NOEQUALITY
## LR(1) items:
qualifier -> NOEQUALITY . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> NOEQUALITY
-- On UNOPTEQUALITY reduce production qualifier -> NOEQUALITY
-- On UNFOLDABLE reduce production qualifier -> NOEQUALITY
-- On UNFOLD reduce production qualifier -> NOEQUALITY
-- On TYPE reduce production qualifier -> NOEQUALITY
-- On TOTAL reduce production qualifier -> NOEQUALITY
-- On SUB_EFFECT reduce production qualifier -> NOEQUALITY
-- On SPLICE reduce production qualifier -> NOEQUALITY
-- On REIFIABLE reduce production qualifier -> NOEQUALITY
-- On REFLECTABLE reduce production qualifier -> NOEQUALITY
-- On PRIVATE reduce production qualifier -> NOEQUALITY
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> NOEQUALITY
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> NOEQUALITY
-- On OPEN reduce production qualifier -> NOEQUALITY
-- On OPAQUE reduce production qualifier -> NOEQUALITY
-- On NOEXTRACT reduce production qualifier -> NOEQUALITY
-- On NOEQUALITY reduce production qualifier -> NOEQUALITY
-- On NEW_EFFECT reduce production qualifier -> NOEQUALITY
-- On NEW reduce production qualifier -> NOEQUALITY
-- On MODULE reduce production qualifier -> NOEQUALITY
-- On LOGIC reduce production qualifier -> NOEQUALITY
-- On LET reduce production qualifier -> NOEQUALITY
-- On LBRACK_AT reduce production qualifier -> NOEQUALITY
-- On IRREDUCIBLE reduce production qualifier -> NOEQUALITY
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> NOEQUALITY
-- On INLINE reduce production qualifier -> NOEQUALITY
-- On INCLUDE reduce production qualifier -> NOEQUALITY
-- On FSDOC_STANDALONE reduce production qualifier -> NOEQUALITY
-- On FSDOC reduce production qualifier -> NOEQUALITY
-- On EXCEPTION reduce production qualifier -> NOEQUALITY
-- On EFFECT reduce production qualifier -> NOEQUALITY
-- On DEFAULT reduce production qualifier -> NOEQUALITY
-- On ASSUME reduce production qualifier -> NOEQUALITY
-- On ABSTRACT reduce production qualifier -> NOEQUALITY

State 15:
## Known stack suffix:
## NEW
## LR(1) items:
qualifier -> NEW . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> NEW
-- On UNOPTEQUALITY reduce production qualifier -> NEW
-- On UNFOLDABLE reduce production qualifier -> NEW
-- On UNFOLD reduce production qualifier -> NEW
-- On TYPE reduce production qualifier -> NEW
-- On TOTAL reduce production qualifier -> NEW
-- On SUB_EFFECT reduce production qualifier -> NEW
-- On SPLICE reduce production qualifier -> NEW
-- On REIFIABLE reduce production qualifier -> NEW
-- On REFLECTABLE reduce production qualifier -> NEW
-- On PRIVATE reduce production qualifier -> NEW
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> NEW
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> NEW
-- On OPEN reduce production qualifier -> NEW
-- On OPAQUE reduce production qualifier -> NEW
-- On NOEXTRACT reduce production qualifier -> NEW
-- On NOEQUALITY reduce production qualifier -> NEW
-- On NEW_EFFECT reduce production qualifier -> NEW
-- On NEW reduce production qualifier -> NEW
-- On MODULE reduce production qualifier -> NEW
-- On LOGIC reduce production qualifier -> NEW
-- On LET reduce production qualifier -> NEW
-- On LBRACK_AT reduce production qualifier -> NEW
-- On IRREDUCIBLE reduce production qualifier -> NEW
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> NEW
-- On INLINE reduce production qualifier -> NEW
-- On INCLUDE reduce production qualifier -> NEW
-- On FSDOC_STANDALONE reduce production qualifier -> NEW
-- On FSDOC reduce production qualifier -> NEW
-- On EXCEPTION reduce production qualifier -> NEW
-- On EFFECT reduce production qualifier -> NEW
-- On DEFAULT reduce production qualifier -> NEW
-- On ASSUME reduce production qualifier -> NEW
-- On ABSTRACT reduce production qualifier -> NEW

State 16:
## Known stack suffix:
## LOGIC
## LR(1) items:
qualifier -> LOGIC . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> LOGIC
-- On UNOPTEQUALITY reduce production qualifier -> LOGIC
-- On UNFOLDABLE reduce production qualifier -> LOGIC
-- On UNFOLD reduce production qualifier -> LOGIC
-- On TYPE reduce production qualifier -> LOGIC
-- On TOTAL reduce production qualifier -> LOGIC
-- On SUB_EFFECT reduce production qualifier -> LOGIC
-- On SPLICE reduce production qualifier -> LOGIC
-- On REIFIABLE reduce production qualifier -> LOGIC
-- On REFLECTABLE reduce production qualifier -> LOGIC
-- On PRIVATE reduce production qualifier -> LOGIC
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> LOGIC
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> LOGIC
-- On OPEN reduce production qualifier -> LOGIC
-- On OPAQUE reduce production qualifier -> LOGIC
-- On NOEXTRACT reduce production qualifier -> LOGIC
-- On NOEQUALITY reduce production qualifier -> LOGIC
-- On NEW_EFFECT reduce production qualifier -> LOGIC
-- On NEW reduce production qualifier -> LOGIC
-- On MODULE reduce production qualifier -> LOGIC
-- On LOGIC reduce production qualifier -> LOGIC
-- On LET reduce production qualifier -> LOGIC
-- On LBRACK_AT reduce production qualifier -> LOGIC
-- On IRREDUCIBLE reduce production qualifier -> LOGIC
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> LOGIC
-- On INLINE reduce production qualifier -> LOGIC
-- On INCLUDE reduce production qualifier -> LOGIC
-- On FSDOC_STANDALONE reduce production qualifier -> LOGIC
-- On FSDOC reduce production qualifier -> LOGIC
-- On EXCEPTION reduce production qualifier -> LOGIC
-- On EFFECT reduce production qualifier -> LOGIC
-- On DEFAULT reduce production qualifier -> LOGIC
-- On ASSUME reduce production qualifier -> LOGIC
-- On ABSTRACT reduce production qualifier -> LOGIC

State 17:
## Known stack suffix:
## LBRACK_AT
## LR(1) items:
attribute -> LBRACK_AT . list(atomicTerm) RBRACK [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(atomicTerm) shift to state 681
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 683
## Reductions:
-- On RBRACK reduce production list(atomicTerm) ->

State 18:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicTermNotQUident -> UNDERSCORE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> UNDERSCORE
-- On VAL reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNIV_HASH reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNFOLDABLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNFOLD reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNDERSCORE reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT8 reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT64 reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT32 reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT16 reduce production atomicTermNotQUident -> UNDERSCORE
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> UNDERSCORE
-- On TYPE reduce production atomicTermNotQUident -> UNDERSCORE
-- On TVAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On TRUE reduce production atomicTermNotQUident -> UNDERSCORE
-- On TOTAL reduce production atomicTermNotQUident -> UNDERSCORE
-- On THEN reduce production atomicTermNotQUident -> UNDERSCORE
-- On SUB_EFFECT reduce production atomicTermNotQUident -> UNDERSCORE
-- On SUBTYPE reduce production atomicTermNotQUident -> UNDERSCORE
-- On SUBKIND reduce production atomicTermNotQUident -> UNDERSCORE
-- On STRING reduce production atomicTermNotQUident -> UNDERSCORE
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> UNDERSCORE
-- On SPLICE reduce production atomicTermNotQUident -> UNDERSCORE
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> UNDERSCORE
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> UNDERSCORE
-- On SEMICOLON reduce production atomicTermNotQUident -> UNDERSCORE
-- On RPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On REIFY reduce production atomicTermNotQUident -> UNDERSCORE
-- On REIFIABLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On REFLECTABLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On RBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On RBRACE reduce production atomicTermNotQUident -> UNDERSCORE
-- On RARROW reduce production atomicTermNotQUident -> UNDERSCORE
-- On RANGE_OF reduce production atomicTermNotQUident -> UNDERSCORE
-- On PRIVATE reduce production atomicTermNotQUident -> UNDERSCORE
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> UNDERSCORE
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> UNDERSCORE
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> UNDERSCORE
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPPREFIX reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX4 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX3 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX2 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX1 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0d reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0c reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0b reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0a reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPEN reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPAQUE reduce production atomicTermNotQUident -> UNDERSCORE
-- On NOEXTRACT reduce production atomicTermNotQUident -> UNDERSCORE
-- On NOEQUALITY reduce production atomicTermNotQUident -> UNDERSCORE
-- On NEW_EFFECT reduce production atomicTermNotQUident -> UNDERSCORE
-- On NEW reduce production atomicTermNotQUident -> UNDERSCORE
-- On NAME reduce production atomicTermNotQUident -> UNDERSCORE
-- On MODULE reduce production atomicTermNotQUident -> UNDERSCORE
-- On MINUS reduce production atomicTermNotQUident -> UNDERSCORE
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On LPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On LOGIC reduce production atomicTermNotQUident -> UNDERSCORE
-- On LET reduce production atomicTermNotQUident -> UNDERSCORE
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> UNDERSCORE
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> UNDERSCORE
-- On LBRACK_BAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On LBRACK_AT reduce production atomicTermNotQUident -> UNDERSCORE
-- On LBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On LBRACE reduce production atomicTermNotQUident -> UNDERSCORE
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT8 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT64 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT32 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT16 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT reduce production atomicTermNotQUident -> UNDERSCORE
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On INLINE reduce production atomicTermNotQUident -> UNDERSCORE
-- On INCLUDE reduce production atomicTermNotQUident -> UNDERSCORE
-- On IN reduce production atomicTermNotQUident -> UNDERSCORE
-- On IMPLIES reduce production atomicTermNotQUident -> UNDERSCORE
-- On IFF reduce production atomicTermNotQUident -> UNDERSCORE
-- On IEEE64 reduce production atomicTermNotQUident -> UNDERSCORE
-- On IDENT reduce production atomicTermNotQUident -> UNDERSCORE
-- On HASH reduce production atomicTermNotQUident -> UNDERSCORE
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> UNDERSCORE
-- On FSDOC reduce production atomicTermNotQUident -> UNDERSCORE
-- On FALSE reduce production atomicTermNotQUident -> UNDERSCORE
-- On EXCEPTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On EQUALS reduce production atomicTermNotQUident -> UNDERSCORE
-- On EOF reduce production atomicTermNotQUident -> UNDERSCORE
-- On END reduce production atomicTermNotQUident -> UNDERSCORE
-- On ELSE reduce production atomicTermNotQUident -> UNDERSCORE
-- On EFFECT reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On DISJUNCTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On DEFAULT reduce production atomicTermNotQUident -> UNDERSCORE
-- On CONJUNCTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On COMMA reduce production atomicTermNotQUident -> UNDERSCORE
-- On COLON_EQUALS reduce production atomicTermNotQUident -> UNDERSCORE
-- On COLON_COLON reduce production atomicTermNotQUident -> UNDERSCORE
-- On CHAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On BYTEARRAY reduce production atomicTermNotQUident -> UNDERSCORE
-- On BY reduce production atomicTermNotQUident -> UNDERSCORE
-- On BEGIN reduce production atomicTermNotQUident -> UNDERSCORE
-- On BAR_RBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On BAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On BANG_LBRACE reduce production atomicTermNotQUident -> UNDERSCORE
-- On BACKTICK reduce production atomicTermNotQUident -> UNDERSCORE
-- On ASSUME reduce production atomicTermNotQUident -> UNDERSCORE
-- On AND reduce production atomicTermNotQUident -> UNDERSCORE
-- On AMP reduce production atomicTermNotQUident -> UNDERSCORE
-- On ABSTRACT reduce production atomicTermNotQUident -> UNDERSCORE
-- On # reduce production atomicTermNotQUident -> UNDERSCORE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> UNDERSCORE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 19:
## Known stack suffix:
## UINT8
## LR(1) items:
constant -> UINT8 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> UINT8
-- On WHEN reduce production constant -> UINT8
-- On VAL reduce production constant -> UINT8
-- On UNOPTEQUALITY reduce production constant -> UINT8
-- On UNIV_HASH reduce production constant -> UINT8
-- On UNFOLDABLE reduce production constant -> UINT8
-- On UNFOLD reduce production constant -> UINT8
-- On UNDERSCORE reduce production constant -> UINT8
-- On UINT8 reduce production constant -> UINT8
-- On UINT64 reduce production constant -> UINT8
-- On UINT32 reduce production constant -> UINT8
-- On UINT16 reduce production constant -> UINT8
-- On TYP_APP_GREATER reduce production constant -> UINT8
-- On TYPE reduce production constant -> UINT8
-- On TVAR reduce production constant -> UINT8
-- On TRUE reduce production constant -> UINT8
-- On TOTAL reduce production constant -> UINT8
-- On THEN reduce production constant -> UINT8
-- On SUB_EFFECT reduce production constant -> UINT8
-- On SUBTYPE reduce production constant -> UINT8
-- On SUBKIND reduce production constant -> UINT8
-- On STRING reduce production constant -> UINT8
-- On SQUIGGLY_RARROW reduce production constant -> UINT8
-- On SPLICE reduce production constant -> UINT8
-- On SET_RANGE_OF reduce production constant -> UINT8
-- On SEMICOLON_SEMICOLON reduce production constant -> UINT8
-- On SEMICOLON reduce production constant -> UINT8
-- On RPAREN reduce production constant -> UINT8
-- On REIFY reduce production constant -> UINT8
-- On REIFIABLE reduce production constant -> UINT8
-- On REFLECTABLE reduce production constant -> UINT8
-- On RBRACK reduce production constant -> UINT8
-- On RBRACE reduce production constant -> UINT8
-- On RARROW reduce production constant -> UINT8
-- On RANGE_OF reduce production constant -> UINT8
-- On PRIVATE reduce production constant -> UINT8
-- On PRAGMA_SET_OPTIONS reduce production constant -> UINT8
-- On PRAGMA_RESET_OPTIONS reduce production constant -> UINT8
-- On PIPE_RIGHT reduce production constant -> UINT8
-- On PERCENT_LBRACK reduce production constant -> UINT8
-- On OPPREFIX reduce production constant -> UINT8
-- On OPINFIX4 reduce production constant -> UINT8
-- On OPINFIX3 reduce production constant -> UINT8
-- On OPINFIX2 reduce production constant -> UINT8
-- On OPINFIX1 reduce production constant -> UINT8
-- On OPINFIX0d reduce production constant -> UINT8
-- On OPINFIX0c reduce production constant -> UINT8
-- On OPINFIX0b reduce production constant -> UINT8
-- On OPINFIX0a reduce production constant -> UINT8
-- On OPEN reduce production constant -> UINT8
-- On OPAQUE reduce production constant -> UINT8
-- On NOEXTRACT reduce production constant -> UINT8
-- On NOEQUALITY reduce production constant -> UINT8
-- On NEW_EFFECT reduce production constant -> UINT8
-- On NEW reduce production constant -> UINT8
-- On NAME reduce production constant -> UINT8
-- On MODULE reduce production constant -> UINT8
-- On MINUS reduce production constant -> UINT8
-- On LPAREN_RPAREN reduce production constant -> UINT8
-- On LPAREN reduce production constant -> UINT8
-- On LOGIC reduce production constant -> UINT8
-- On LET reduce production constant -> UINT8
-- On LENS_PAREN_RIGHT reduce production constant -> UINT8
-- On LENS_PAREN_LEFT reduce production constant -> UINT8
-- On LBRACK_BAR reduce production constant -> UINT8
-- On LBRACK_AT reduce production constant -> UINT8
-- On LBRACK reduce production constant -> UINT8
-- On LBRACE reduce production constant -> UINT8
-- On IRREDUCIBLE reduce production constant -> UINT8
-- On INT8 reduce production constant -> UINT8
-- On INT64 reduce production constant -> UINT8
-- On INT32 reduce production constant -> UINT8
-- On INT16 reduce production constant -> UINT8
-- On INT reduce production constant -> UINT8
-- On INLINE_FOR_EXTRACTION reduce production constant -> UINT8
-- On INLINE reduce production constant -> UINT8
-- On INCLUDE reduce production constant -> UINT8
-- On IN reduce production constant -> UINT8
-- On IMPLIES reduce production constant -> UINT8
-- On IFF reduce production constant -> UINT8
-- On IEEE64 reduce production constant -> UINT8
-- On IDENT reduce production constant -> UINT8
-- On HASH reduce production constant -> UINT8
-- On FSDOC_STANDALONE reduce production constant -> UINT8
-- On FSDOC reduce production constant -> UINT8
-- On FALSE reduce production constant -> UINT8
-- On EXCEPTION reduce production constant -> UINT8
-- On EQUALS reduce production constant -> UINT8
-- On EOF reduce production constant -> UINT8
-- On END reduce production constant -> UINT8
-- On ELSE reduce production constant -> UINT8
-- On EFFECT reduce production constant -> UINT8
-- On DOT_LPAREN reduce production constant -> UINT8
-- On DOT_LENS_PAREN_LEFT reduce production constant -> UINT8
-- On DOT_LBRACK_BAR reduce production constant -> UINT8
-- On DOT_LBRACK reduce production constant -> UINT8
-- On DOLLAR reduce production constant -> UINT8
-- On DISJUNCTION reduce production constant -> UINT8
-- On DEFAULT reduce production constant -> UINT8
-- On CONJUNCTION reduce production constant -> UINT8
-- On COMMA reduce production constant -> UINT8
-- On COLON_EQUALS reduce production constant -> UINT8
-- On COLON_COLON reduce production constant -> UINT8
-- On COLON reduce production constant -> UINT8
-- On CHAR reduce production constant -> UINT8
-- On BYTEARRAY reduce production constant -> UINT8
-- On BY reduce production constant -> UINT8
-- On BEGIN reduce production constant -> UINT8
-- On BAR_RBRACK reduce production constant -> UINT8
-- On BAR reduce production constant -> UINT8
-- On BANG_LBRACE reduce production constant -> UINT8
-- On BACKTICK reduce production constant -> UINT8
-- On ASSUME reduce production constant -> UINT8
-- On AND reduce production constant -> UINT8
-- On AMP reduce production constant -> UINT8
-- On ABSTRACT reduce production constant -> UINT8
-- On # reduce production constant -> UINT8
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> UINT8
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 20:
## Known stack suffix:
## UINT64
## LR(1) items:
constant -> UINT64 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> UINT64
-- On WHEN reduce production constant -> UINT64
-- On VAL reduce production constant -> UINT64
-- On UNOPTEQUALITY reduce production constant -> UINT64
-- On UNIV_HASH reduce production constant -> UINT64
-- On UNFOLDABLE reduce production constant -> UINT64
-- On UNFOLD reduce production constant -> UINT64
-- On UNDERSCORE reduce production constant -> UINT64
-- On UINT8 reduce production constant -> UINT64
-- On UINT64 reduce production constant -> UINT64
-- On UINT32 reduce production constant -> UINT64
-- On UINT16 reduce production constant -> UINT64
-- On TYP_APP_GREATER reduce production constant -> UINT64
-- On TYPE reduce production constant -> UINT64
-- On TVAR reduce production constant -> UINT64
-- On TRUE reduce production constant -> UINT64
-- On TOTAL reduce production constant -> UINT64
-- On THEN reduce production constant -> UINT64
-- On SUB_EFFECT reduce production constant -> UINT64
-- On SUBTYPE reduce production constant -> UINT64
-- On SUBKIND reduce production constant -> UINT64
-- On STRING reduce production constant -> UINT64
-- On SQUIGGLY_RARROW reduce production constant -> UINT64
-- On SPLICE reduce production constant -> UINT64
-- On SET_RANGE_OF reduce production constant -> UINT64
-- On SEMICOLON_SEMICOLON reduce production constant -> UINT64
-- On SEMICOLON reduce production constant -> UINT64
-- On RPAREN reduce production constant -> UINT64
-- On REIFY reduce production constant -> UINT64
-- On REIFIABLE reduce production constant -> UINT64
-- On REFLECTABLE reduce production constant -> UINT64
-- On RBRACK reduce production constant -> UINT64
-- On RBRACE reduce production constant -> UINT64
-- On RARROW reduce production constant -> UINT64
-- On RANGE_OF reduce production constant -> UINT64
-- On PRIVATE reduce production constant -> UINT64
-- On PRAGMA_SET_OPTIONS reduce production constant -> UINT64
-- On PRAGMA_RESET_OPTIONS reduce production constant -> UINT64
-- On PIPE_RIGHT reduce production constant -> UINT64
-- On PERCENT_LBRACK reduce production constant -> UINT64
-- On OPPREFIX reduce production constant -> UINT64
-- On OPINFIX4 reduce production constant -> UINT64
-- On OPINFIX3 reduce production constant -> UINT64
-- On OPINFIX2 reduce production constant -> UINT64
-- On OPINFIX1 reduce production constant -> UINT64
-- On OPINFIX0d reduce production constant -> UINT64
-- On OPINFIX0c reduce production constant -> UINT64
-- On OPINFIX0b reduce production constant -> UINT64
-- On OPINFIX0a reduce production constant -> UINT64
-- On OPEN reduce production constant -> UINT64
-- On OPAQUE reduce production constant -> UINT64
-- On NOEXTRACT reduce production constant -> UINT64
-- On NOEQUALITY reduce production constant -> UINT64
-- On NEW_EFFECT reduce production constant -> UINT64
-- On NEW reduce production constant -> UINT64
-- On NAME reduce production constant -> UINT64
-- On MODULE reduce production constant -> UINT64
-- On MINUS reduce production constant -> UINT64
-- On LPAREN_RPAREN reduce production constant -> UINT64
-- On LPAREN reduce production constant -> UINT64
-- On LOGIC reduce production constant -> UINT64
-- On LET reduce production constant -> UINT64
-- On LENS_PAREN_RIGHT reduce production constant -> UINT64
-- On LENS_PAREN_LEFT reduce production constant -> UINT64
-- On LBRACK_BAR reduce production constant -> UINT64
-- On LBRACK_AT reduce production constant -> UINT64
-- On LBRACK reduce production constant -> UINT64
-- On LBRACE reduce production constant -> UINT64
-- On IRREDUCIBLE reduce production constant -> UINT64
-- On INT8 reduce production constant -> UINT64
-- On INT64 reduce production constant -> UINT64
-- On INT32 reduce production constant -> UINT64
-- On INT16 reduce production constant -> UINT64
-- On INT reduce production constant -> UINT64
-- On INLINE_FOR_EXTRACTION reduce production constant -> UINT64
-- On INLINE reduce production constant -> UINT64
-- On INCLUDE reduce production constant -> UINT64
-- On IN reduce production constant -> UINT64
-- On IMPLIES reduce production constant -> UINT64
-- On IFF reduce production constant -> UINT64
-- On IEEE64 reduce production constant -> UINT64
-- On IDENT reduce production constant -> UINT64
-- On HASH reduce production constant -> UINT64
-- On FSDOC_STANDALONE reduce production constant -> UINT64
-- On FSDOC reduce production constant -> UINT64
-- On FALSE reduce production constant -> UINT64
-- On EXCEPTION reduce production constant -> UINT64
-- On EQUALS reduce production constant -> UINT64
-- On EOF reduce production constant -> UINT64
-- On END reduce production constant -> UINT64
-- On ELSE reduce production constant -> UINT64
-- On EFFECT reduce production constant -> UINT64
-- On DOT_LPAREN reduce production constant -> UINT64
-- On DOT_LENS_PAREN_LEFT reduce production constant -> UINT64
-- On DOT_LBRACK_BAR reduce production constant -> UINT64
-- On DOT_LBRACK reduce production constant -> UINT64
-- On DOLLAR reduce production constant -> UINT64
-- On DISJUNCTION reduce production constant -> UINT64
-- On DEFAULT reduce production constant -> UINT64
-- On CONJUNCTION reduce production constant -> UINT64
-- On COMMA reduce production constant -> UINT64
-- On COLON_EQUALS reduce production constant -> UINT64
-- On COLON_COLON reduce production constant -> UINT64
-- On COLON reduce production constant -> UINT64
-- On CHAR reduce production constant -> UINT64
-- On BYTEARRAY reduce production constant -> UINT64
-- On BY reduce production constant -> UINT64
-- On BEGIN reduce production constant -> UINT64
-- On BAR_RBRACK reduce production constant -> UINT64
-- On BAR reduce production constant -> UINT64
-- On BANG_LBRACE reduce production constant -> UINT64
-- On BACKTICK reduce production constant -> UINT64
-- On ASSUME reduce production constant -> UINT64
-- On AND reduce production constant -> UINT64
-- On AMP reduce production constant -> UINT64
-- On ABSTRACT reduce production constant -> UINT64
-- On # reduce production constant -> UINT64
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> UINT64
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
## Known stack suffix:
## UINT32
## LR(1) items:
constant -> UINT32 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> UINT32
-- On WHEN reduce production constant -> UINT32
-- On VAL reduce production constant -> UINT32
-- On UNOPTEQUALITY reduce production constant -> UINT32
-- On UNIV_HASH reduce production constant -> UINT32
-- On UNFOLDABLE reduce production constant -> UINT32
-- On UNFOLD reduce production constant -> UINT32
-- On UNDERSCORE reduce production constant -> UINT32
-- On UINT8 reduce production constant -> UINT32
-- On UINT64 reduce production constant -> UINT32
-- On UINT32 reduce production constant -> UINT32
-- On UINT16 reduce production constant -> UINT32
-- On TYP_APP_GREATER reduce production constant -> UINT32
-- On TYPE reduce production constant -> UINT32
-- On TVAR reduce production constant -> UINT32
-- On TRUE reduce production constant -> UINT32
-- On TOTAL reduce production constant -> UINT32
-- On THEN reduce production constant -> UINT32
-- On SUB_EFFECT reduce production constant -> UINT32
-- On SUBTYPE reduce production constant -> UINT32
-- On SUBKIND reduce production constant -> UINT32
-- On STRING reduce production constant -> UINT32
-- On SQUIGGLY_RARROW reduce production constant -> UINT32
-- On SPLICE reduce production constant -> UINT32
-- On SET_RANGE_OF reduce production constant -> UINT32
-- On SEMICOLON_SEMICOLON reduce production constant -> UINT32
-- On SEMICOLON reduce production constant -> UINT32
-- On RPAREN reduce production constant -> UINT32
-- On REIFY reduce production constant -> UINT32
-- On REIFIABLE reduce production constant -> UINT32
-- On REFLECTABLE reduce production constant -> UINT32
-- On RBRACK reduce production constant -> UINT32
-- On RBRACE reduce production constant -> UINT32
-- On RARROW reduce production constant -> UINT32
-- On RANGE_OF reduce production constant -> UINT32
-- On PRIVATE reduce production constant -> UINT32
-- On PRAGMA_SET_OPTIONS reduce production constant -> UINT32
-- On PRAGMA_RESET_OPTIONS reduce production constant -> UINT32
-- On PIPE_RIGHT reduce production constant -> UINT32
-- On PERCENT_LBRACK reduce production constant -> UINT32
-- On OPPREFIX reduce production constant -> UINT32
-- On OPINFIX4 reduce production constant -> UINT32
-- On OPINFIX3 reduce production constant -> UINT32
-- On OPINFIX2 reduce production constant -> UINT32
-- On OPINFIX1 reduce production constant -> UINT32
-- On OPINFIX0d reduce production constant -> UINT32
-- On OPINFIX0c reduce production constant -> UINT32
-- On OPINFIX0b reduce production constant -> UINT32
-- On OPINFIX0a reduce production constant -> UINT32
-- On OPEN reduce production constant -> UINT32
-- On OPAQUE reduce production constant -> UINT32
-- On NOEXTRACT reduce production constant -> UINT32
-- On NOEQUALITY reduce production constant -> UINT32
-- On NEW_EFFECT reduce production constant -> UINT32
-- On NEW reduce production constant -> UINT32
-- On NAME reduce production constant -> UINT32
-- On MODULE reduce production constant -> UINT32
-- On MINUS reduce production constant -> UINT32
-- On LPAREN_RPAREN reduce production constant -> UINT32
-- On LPAREN reduce production constant -> UINT32
-- On LOGIC reduce production constant -> UINT32
-- On LET reduce production constant -> UINT32
-- On LENS_PAREN_RIGHT reduce production constant -> UINT32
-- On LENS_PAREN_LEFT reduce production constant -> UINT32
-- On LBRACK_BAR reduce production constant -> UINT32
-- On LBRACK_AT reduce production constant -> UINT32
-- On LBRACK reduce production constant -> UINT32
-- On LBRACE reduce production constant -> UINT32
-- On IRREDUCIBLE reduce production constant -> UINT32
-- On INT8 reduce production constant -> UINT32
-- On INT64 reduce production constant -> UINT32
-- On INT32 reduce production constant -> UINT32
-- On INT16 reduce production constant -> UINT32
-- On INT reduce production constant -> UINT32
-- On INLINE_FOR_EXTRACTION reduce production constant -> UINT32
-- On INLINE reduce production constant -> UINT32
-- On INCLUDE reduce production constant -> UINT32
-- On IN reduce production constant -> UINT32
-- On IMPLIES reduce production constant -> UINT32
-- On IFF reduce production constant -> UINT32
-- On IEEE64 reduce production constant -> UINT32
-- On IDENT reduce production constant -> UINT32
-- On HASH reduce production constant -> UINT32
-- On FSDOC_STANDALONE reduce production constant -> UINT32
-- On FSDOC reduce production constant -> UINT32
-- On FALSE reduce production constant -> UINT32
-- On EXCEPTION reduce production constant -> UINT32
-- On EQUALS reduce production constant -> UINT32
-- On EOF reduce production constant -> UINT32
-- On END reduce production constant -> UINT32
-- On ELSE reduce production constant -> UINT32
-- On EFFECT reduce production constant -> UINT32
-- On DOT_LPAREN reduce production constant -> UINT32
-- On DOT_LENS_PAREN_LEFT reduce production constant -> UINT32
-- On DOT_LBRACK_BAR reduce production constant -> UINT32
-- On DOT_LBRACK reduce production constant -> UINT32
-- On DOLLAR reduce production constant -> UINT32
-- On DISJUNCTION reduce production constant -> UINT32
-- On DEFAULT reduce production constant -> UINT32
-- On CONJUNCTION reduce production constant -> UINT32
-- On COMMA reduce production constant -> UINT32
-- On COLON_EQUALS reduce production constant -> UINT32
-- On COLON_COLON reduce production constant -> UINT32
-- On COLON reduce production constant -> UINT32
-- On CHAR reduce production constant -> UINT32
-- On BYTEARRAY reduce production constant -> UINT32
-- On BY reduce production constant -> UINT32
-- On BEGIN reduce production constant -> UINT32
-- On BAR_RBRACK reduce production constant -> UINT32
-- On BAR reduce production constant -> UINT32
-- On BANG_LBRACE reduce production constant -> UINT32
-- On BACKTICK reduce production constant -> UINT32
-- On ASSUME reduce production constant -> UINT32
-- On AND reduce production constant -> UINT32
-- On AMP reduce production constant -> UINT32
-- On ABSTRACT reduce production constant -> UINT32
-- On # reduce production constant -> UINT32
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> UINT32
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 22:
## Known stack suffix:
## UINT16
## LR(1) items:
constant -> UINT16 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> UINT16
-- On WHEN reduce production constant -> UINT16
-- On VAL reduce production constant -> UINT16
-- On UNOPTEQUALITY reduce production constant -> UINT16
-- On UNIV_HASH reduce production constant -> UINT16
-- On UNFOLDABLE reduce production constant -> UINT16
-- On UNFOLD reduce production constant -> UINT16
-- On UNDERSCORE reduce production constant -> UINT16
-- On UINT8 reduce production constant -> UINT16
-- On UINT64 reduce production constant -> UINT16
-- On UINT32 reduce production constant -> UINT16
-- On UINT16 reduce production constant -> UINT16
-- On TYP_APP_GREATER reduce production constant -> UINT16
-- On TYPE reduce production constant -> UINT16
-- On TVAR reduce production constant -> UINT16
-- On TRUE reduce production constant -> UINT16
-- On TOTAL reduce production constant -> UINT16
-- On THEN reduce production constant -> UINT16
-- On SUB_EFFECT reduce production constant -> UINT16
-- On SUBTYPE reduce production constant -> UINT16
-- On SUBKIND reduce production constant -> UINT16
-- On STRING reduce production constant -> UINT16
-- On SQUIGGLY_RARROW reduce production constant -> UINT16
-- On SPLICE reduce production constant -> UINT16
-- On SET_RANGE_OF reduce production constant -> UINT16
-- On SEMICOLON_SEMICOLON reduce production constant -> UINT16
-- On SEMICOLON reduce production constant -> UINT16
-- On RPAREN reduce production constant -> UINT16
-- On REIFY reduce production constant -> UINT16
-- On REIFIABLE reduce production constant -> UINT16
-- On REFLECTABLE reduce production constant -> UINT16
-- On RBRACK reduce production constant -> UINT16
-- On RBRACE reduce production constant -> UINT16
-- On RARROW reduce production constant -> UINT16
-- On RANGE_OF reduce production constant -> UINT16
-- On PRIVATE reduce production constant -> UINT16
-- On PRAGMA_SET_OPTIONS reduce production constant -> UINT16
-- On PRAGMA_RESET_OPTIONS reduce production constant -> UINT16
-- On PIPE_RIGHT reduce production constant -> UINT16
-- On PERCENT_LBRACK reduce production constant -> UINT16
-- On OPPREFIX reduce production constant -> UINT16
-- On OPINFIX4 reduce production constant -> UINT16
-- On OPINFIX3 reduce production constant -> UINT16
-- On OPINFIX2 reduce production constant -> UINT16
-- On OPINFIX1 reduce production constant -> UINT16
-- On OPINFIX0d reduce production constant -> UINT16
-- On OPINFIX0c reduce production constant -> UINT16
-- On OPINFIX0b reduce production constant -> UINT16
-- On OPINFIX0a reduce production constant -> UINT16
-- On OPEN reduce production constant -> UINT16
-- On OPAQUE reduce production constant -> UINT16
-- On NOEXTRACT reduce production constant -> UINT16
-- On NOEQUALITY reduce production constant -> UINT16
-- On NEW_EFFECT reduce production constant -> UINT16
-- On NEW reduce production constant -> UINT16
-- On NAME reduce production constant -> UINT16
-- On MODULE reduce production constant -> UINT16
-- On MINUS reduce production constant -> UINT16
-- On LPAREN_RPAREN reduce production constant -> UINT16
-- On LPAREN reduce production constant -> UINT16
-- On LOGIC reduce production constant -> UINT16
-- On LET reduce production constant -> UINT16
-- On LENS_PAREN_RIGHT reduce production constant -> UINT16
-- On LENS_PAREN_LEFT reduce production constant -> UINT16
-- On LBRACK_BAR reduce production constant -> UINT16
-- On LBRACK_AT reduce production constant -> UINT16
-- On LBRACK reduce production constant -> UINT16
-- On LBRACE reduce production constant -> UINT16
-- On IRREDUCIBLE reduce production constant -> UINT16
-- On INT8 reduce production constant -> UINT16
-- On INT64 reduce production constant -> UINT16
-- On INT32 reduce production constant -> UINT16
-- On INT16 reduce production constant -> UINT16
-- On INT reduce production constant -> UINT16
-- On INLINE_FOR_EXTRACTION reduce production constant -> UINT16
-- On INLINE reduce production constant -> UINT16
-- On INCLUDE reduce production constant -> UINT16
-- On IN reduce production constant -> UINT16
-- On IMPLIES reduce production constant -> UINT16
-- On IFF reduce production constant -> UINT16
-- On IEEE64 reduce production constant -> UINT16
-- On IDENT reduce production constant -> UINT16
-- On HASH reduce production constant -> UINT16
-- On FSDOC_STANDALONE reduce production constant -> UINT16
-- On FSDOC reduce production constant -> UINT16
-- On FALSE reduce production constant -> UINT16
-- On EXCEPTION reduce production constant -> UINT16
-- On EQUALS reduce production constant -> UINT16
-- On EOF reduce production constant -> UINT16
-- On END reduce production constant -> UINT16
-- On ELSE reduce production constant -> UINT16
-- On EFFECT reduce production constant -> UINT16
-- On DOT_LPAREN reduce production constant -> UINT16
-- On DOT_LENS_PAREN_LEFT reduce production constant -> UINT16
-- On DOT_LBRACK_BAR reduce production constant -> UINT16
-- On DOT_LBRACK reduce production constant -> UINT16
-- On DOLLAR reduce production constant -> UINT16
-- On DISJUNCTION reduce production constant -> UINT16
-- On DEFAULT reduce production constant -> UINT16
-- On CONJUNCTION reduce production constant -> UINT16
-- On COMMA reduce production constant -> UINT16
-- On COLON_EQUALS reduce production constant -> UINT16
-- On COLON_COLON reduce production constant -> UINT16
-- On COLON reduce production constant -> UINT16
-- On CHAR reduce production constant -> UINT16
-- On BYTEARRAY reduce production constant -> UINT16
-- On BY reduce production constant -> UINT16
-- On BEGIN reduce production constant -> UINT16
-- On BAR_RBRACK reduce production constant -> UINT16
-- On BAR reduce production constant -> UINT16
-- On BANG_LBRACE reduce production constant -> UINT16
-- On BACKTICK reduce production constant -> UINT16
-- On ASSUME reduce production constant -> UINT16
-- On AND reduce production constant -> UINT16
-- On AMP reduce production constant -> UINT16
-- On ABSTRACT reduce production constant -> UINT16
-- On # reduce production constant -> UINT16
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> UINT16
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
## Known stack suffix:
## TVAR
## LR(1) items:
tvar -> TVAR . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tvar -> TVAR
-- On WHEN reduce production tvar -> TVAR
-- On VAL reduce production tvar -> TVAR
-- On UNOPTEQUALITY reduce production tvar -> TVAR
-- On UNIV_HASH reduce production tvar -> TVAR
-- On UNFOLDABLE reduce production tvar -> TVAR
-- On UNFOLD reduce production tvar -> TVAR
-- On UNDERSCORE reduce production tvar -> TVAR
-- On UINT8 reduce production tvar -> TVAR
-- On UINT64 reduce production tvar -> TVAR
-- On UINT32 reduce production tvar -> TVAR
-- On UINT16 reduce production tvar -> TVAR
-- On TYP_APP_GREATER reduce production tvar -> TVAR
-- On TYPE reduce production tvar -> TVAR
-- On TVAR reduce production tvar -> TVAR
-- On TRUE reduce production tvar -> TVAR
-- On TOTAL reduce production tvar -> TVAR
-- On THEN reduce production tvar -> TVAR
-- On SUB_EFFECT reduce production tvar -> TVAR
-- On SUBTYPE reduce production tvar -> TVAR
-- On SUBKIND reduce production tvar -> TVAR
-- On STRING reduce production tvar -> TVAR
-- On SQUIGGLY_RARROW reduce production tvar -> TVAR
-- On SPLICE reduce production tvar -> TVAR
-- On SET_RANGE_OF reduce production tvar -> TVAR
-- On SEMICOLON_SEMICOLON reduce production tvar -> TVAR
-- On SEMICOLON reduce production tvar -> TVAR
-- On RPAREN reduce production tvar -> TVAR
-- On REIFY reduce production tvar -> TVAR
-- On REIFIABLE reduce production tvar -> TVAR
-- On REFLECTABLE reduce production tvar -> TVAR
-- On RBRACK reduce production tvar -> TVAR
-- On RBRACE reduce production tvar -> TVAR
-- On RARROW reduce production tvar -> TVAR
-- On RANGE_OF reduce production tvar -> TVAR
-- On PRIVATE reduce production tvar -> TVAR
-- On PRAGMA_SET_OPTIONS reduce production tvar -> TVAR
-- On PRAGMA_RESET_OPTIONS reduce production tvar -> TVAR
-- On PIPE_RIGHT reduce production tvar -> TVAR
-- On PERCENT_LBRACK reduce production tvar -> TVAR
-- On OPPREFIX reduce production tvar -> TVAR
-- On OPINFIX4 reduce production tvar -> TVAR
-- On OPINFIX3 reduce production tvar -> TVAR
-- On OPINFIX2 reduce production tvar -> TVAR
-- On OPINFIX1 reduce production tvar -> TVAR
-- On OPINFIX0d reduce production tvar -> TVAR
-- On OPINFIX0c reduce production tvar -> TVAR
-- On OPINFIX0b reduce production tvar -> TVAR
-- On OPINFIX0a reduce production tvar -> TVAR
-- On OPEN reduce production tvar -> TVAR
-- On OPAQUE reduce production tvar -> TVAR
-- On NOEXTRACT reduce production tvar -> TVAR
-- On NOEQUALITY reduce production tvar -> TVAR
-- On NEW_EFFECT reduce production tvar -> TVAR
-- On NEW reduce production tvar -> TVAR
-- On NAME reduce production tvar -> TVAR
-- On MODULE reduce production tvar -> TVAR
-- On MINUS reduce production tvar -> TVAR
-- On LPAREN_RPAREN reduce production tvar -> TVAR
-- On LPAREN reduce production tvar -> TVAR
-- On LOGIC reduce production tvar -> TVAR
-- On LET reduce production tvar -> TVAR
-- On LENS_PAREN_RIGHT reduce production tvar -> TVAR
-- On LENS_PAREN_LEFT reduce production tvar -> TVAR
-- On LBRACK_BAR reduce production tvar -> TVAR
-- On LBRACK_AT reduce production tvar -> TVAR
-- On LBRACK reduce production tvar -> TVAR
-- On LBRACE reduce production tvar -> TVAR
-- On IRREDUCIBLE reduce production tvar -> TVAR
-- On INT8 reduce production tvar -> TVAR
-- On INT64 reduce production tvar -> TVAR
-- On INT32 reduce production tvar -> TVAR
-- On INT16 reduce production tvar -> TVAR
-- On INT reduce production tvar -> TVAR
-- On INLINE_FOR_EXTRACTION reduce production tvar -> TVAR
-- On INLINE reduce production tvar -> TVAR
-- On INCLUDE reduce production tvar -> TVAR
-- On IN reduce production tvar -> TVAR
-- On IMPLIES reduce production tvar -> TVAR
-- On IFF reduce production tvar -> TVAR
-- On IEEE64 reduce production tvar -> TVAR
-- On IDENT reduce production tvar -> TVAR
-- On HASH reduce production tvar -> TVAR
-- On FSDOC_STANDALONE reduce production tvar -> TVAR
-- On FSDOC reduce production tvar -> TVAR
-- On FALSE reduce production tvar -> TVAR
-- On EXCEPTION reduce production tvar -> TVAR
-- On EQUALS reduce production tvar -> TVAR
-- On EOF reduce production tvar -> TVAR
-- On END reduce production tvar -> TVAR
-- On ELSE reduce production tvar -> TVAR
-- On EFFECT reduce production tvar -> TVAR
-- On DOT_LPAREN reduce production tvar -> TVAR
-- On DOT_LENS_PAREN_LEFT reduce production tvar -> TVAR
-- On DOT_LBRACK_BAR reduce production tvar -> TVAR
-- On DOT_LBRACK reduce production tvar -> TVAR
-- On DOT reduce production tvar -> TVAR
-- On DOLLAR reduce production tvar -> TVAR
-- On DISJUNCTION reduce production tvar -> TVAR
-- On DEFAULT reduce production tvar -> TVAR
-- On CONJUNCTION reduce production tvar -> TVAR
-- On COMMA reduce production tvar -> TVAR
-- On COLON_EQUALS reduce production tvar -> TVAR
-- On COLON_COLON reduce production tvar -> TVAR
-- On COLON reduce production tvar -> TVAR
-- On CHAR reduce production tvar -> TVAR
-- On BYTEARRAY reduce production tvar -> TVAR
-- On BY reduce production tvar -> TVAR
-- On BEGIN reduce production tvar -> TVAR
-- On BAR_RBRACK reduce production tvar -> TVAR
-- On BAR reduce production tvar -> TVAR
-- On BANG_LBRACE reduce production tvar -> TVAR
-- On BACKTICK reduce production tvar -> TVAR
-- On ASSUME reduce production tvar -> TVAR
-- On AND reduce production tvar -> TVAR
-- On AMP reduce production tvar -> TVAR
-- On ABSTRACT reduce production tvar -> TVAR
-- On # reduce production tvar -> TVAR
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tvar -> TVAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 24:
## Known stack suffix:
## TRUE
## LR(1) items:
constant -> TRUE . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> TRUE
-- On WHEN reduce production constant -> TRUE
-- On VAL reduce production constant -> TRUE
-- On UNOPTEQUALITY reduce production constant -> TRUE
-- On UNIV_HASH reduce production constant -> TRUE
-- On UNFOLDABLE reduce production constant -> TRUE
-- On UNFOLD reduce production constant -> TRUE
-- On UNDERSCORE reduce production constant -> TRUE
-- On UINT8 reduce production constant -> TRUE
-- On UINT64 reduce production constant -> TRUE
-- On UINT32 reduce production constant -> TRUE
-- On UINT16 reduce production constant -> TRUE
-- On TYP_APP_GREATER reduce production constant -> TRUE
-- On TYPE reduce production constant -> TRUE
-- On TVAR reduce production constant -> TRUE
-- On TRUE reduce production constant -> TRUE
-- On TOTAL reduce production constant -> TRUE
-- On THEN reduce production constant -> TRUE
-- On SUB_EFFECT reduce production constant -> TRUE
-- On SUBTYPE reduce production constant -> TRUE
-- On SUBKIND reduce production constant -> TRUE
-- On STRING reduce production constant -> TRUE
-- On SQUIGGLY_RARROW reduce production constant -> TRUE
-- On SPLICE reduce production constant -> TRUE
-- On SET_RANGE_OF reduce production constant -> TRUE
-- On SEMICOLON_SEMICOLON reduce production constant -> TRUE
-- On SEMICOLON reduce production constant -> TRUE
-- On RPAREN reduce production constant -> TRUE
-- On REIFY reduce production constant -> TRUE
-- On REIFIABLE reduce production constant -> TRUE
-- On REFLECTABLE reduce production constant -> TRUE
-- On RBRACK reduce production constant -> TRUE
-- On RBRACE reduce production constant -> TRUE
-- On RARROW reduce production constant -> TRUE
-- On RANGE_OF reduce production constant -> TRUE
-- On PRIVATE reduce production constant -> TRUE
-- On PRAGMA_SET_OPTIONS reduce production constant -> TRUE
-- On PRAGMA_RESET_OPTIONS reduce production constant -> TRUE
-- On PIPE_RIGHT reduce production constant -> TRUE
-- On PERCENT_LBRACK reduce production constant -> TRUE
-- On OPPREFIX reduce production constant -> TRUE
-- On OPINFIX4 reduce production constant -> TRUE
-- On OPINFIX3 reduce production constant -> TRUE
-- On OPINFIX2 reduce production constant -> TRUE
-- On OPINFIX1 reduce production constant -> TRUE
-- On OPINFIX0d reduce production constant -> TRUE
-- On OPINFIX0c reduce production constant -> TRUE
-- On OPINFIX0b reduce production constant -> TRUE
-- On OPINFIX0a reduce production constant -> TRUE
-- On OPEN reduce production constant -> TRUE
-- On OPAQUE reduce production constant -> TRUE
-- On NOEXTRACT reduce production constant -> TRUE
-- On NOEQUALITY reduce production constant -> TRUE
-- On NEW_EFFECT reduce production constant -> TRUE
-- On NEW reduce production constant -> TRUE
-- On NAME reduce production constant -> TRUE
-- On MODULE reduce production constant -> TRUE
-- On MINUS reduce production constant -> TRUE
-- On LPAREN_RPAREN reduce production constant -> TRUE
-- On LPAREN reduce production constant -> TRUE
-- On LOGIC reduce production constant -> TRUE
-- On LET reduce production constant -> TRUE
-- On LENS_PAREN_RIGHT reduce production constant -> TRUE
-- On LENS_PAREN_LEFT reduce production constant -> TRUE
-- On LBRACK_BAR reduce production constant -> TRUE
-- On LBRACK_AT reduce production constant -> TRUE
-- On LBRACK reduce production constant -> TRUE
-- On LBRACE reduce production constant -> TRUE
-- On IRREDUCIBLE reduce production constant -> TRUE
-- On INT8 reduce production constant -> TRUE
-- On INT64 reduce production constant -> TRUE
-- On INT32 reduce production constant -> TRUE
-- On INT16 reduce production constant -> TRUE
-- On INT reduce production constant -> TRUE
-- On INLINE_FOR_EXTRACTION reduce production constant -> TRUE
-- On INLINE reduce production constant -> TRUE
-- On INCLUDE reduce production constant -> TRUE
-- On IN reduce production constant -> TRUE
-- On IMPLIES reduce production constant -> TRUE
-- On IFF reduce production constant -> TRUE
-- On IEEE64 reduce production constant -> TRUE
-- On IDENT reduce production constant -> TRUE
-- On HASH reduce production constant -> TRUE
-- On FSDOC_STANDALONE reduce production constant -> TRUE
-- On FSDOC reduce production constant -> TRUE
-- On FALSE reduce production constant -> TRUE
-- On EXCEPTION reduce production constant -> TRUE
-- On EQUALS reduce production constant -> TRUE
-- On EOF reduce production constant -> TRUE
-- On END reduce production constant -> TRUE
-- On ELSE reduce production constant -> TRUE
-- On EFFECT reduce production constant -> TRUE
-- On DOT_LPAREN reduce production constant -> TRUE
-- On DOT_LENS_PAREN_LEFT reduce production constant -> TRUE
-- On DOT_LBRACK_BAR reduce production constant -> TRUE
-- On DOT_LBRACK reduce production constant -> TRUE
-- On DOLLAR reduce production constant -> TRUE
-- On DISJUNCTION reduce production constant -> TRUE
-- On DEFAULT reduce production constant -> TRUE
-- On CONJUNCTION reduce production constant -> TRUE
-- On COMMA reduce production constant -> TRUE
-- On COLON_EQUALS reduce production constant -> TRUE
-- On COLON_COLON reduce production constant -> TRUE
-- On COLON reduce production constant -> TRUE
-- On CHAR reduce production constant -> TRUE
-- On BYTEARRAY reduce production constant -> TRUE
-- On BY reduce production constant -> TRUE
-- On BEGIN reduce production constant -> TRUE
-- On BAR_RBRACK reduce production constant -> TRUE
-- On BAR reduce production constant -> TRUE
-- On BANG_LBRACE reduce production constant -> TRUE
-- On BACKTICK reduce production constant -> TRUE
-- On ASSUME reduce production constant -> TRUE
-- On AND reduce production constant -> TRUE
-- On AMP reduce production constant -> TRUE
-- On ABSTRACT reduce production constant -> TRUE
-- On # reduce production constant -> TRUE
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> TRUE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 25:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> STRING
-- On WHEN reduce production constant -> STRING
-- On VAL reduce production constant -> STRING
-- On UNOPTEQUALITY reduce production constant -> STRING
-- On UNIV_HASH reduce production constant -> STRING
-- On UNFOLDABLE reduce production constant -> STRING
-- On UNFOLD reduce production constant -> STRING
-- On UNDERSCORE reduce production constant -> STRING
-- On UINT8 reduce production constant -> STRING
-- On UINT64 reduce production constant -> STRING
-- On UINT32 reduce production constant -> STRING
-- On UINT16 reduce production constant -> STRING
-- On TYP_APP_GREATER reduce production constant -> STRING
-- On TYPE reduce production constant -> STRING
-- On TVAR reduce production constant -> STRING
-- On TRUE reduce production constant -> STRING
-- On TOTAL reduce production constant -> STRING
-- On THEN reduce production constant -> STRING
-- On SUB_EFFECT reduce production constant -> STRING
-- On SUBTYPE reduce production constant -> STRING
-- On SUBKIND reduce production constant -> STRING
-- On STRING reduce production constant -> STRING
-- On SQUIGGLY_RARROW reduce production constant -> STRING
-- On SPLICE reduce production constant -> STRING
-- On SET_RANGE_OF reduce production constant -> STRING
-- On SEMICOLON_SEMICOLON reduce production constant -> STRING
-- On SEMICOLON reduce production constant -> STRING
-- On RPAREN reduce production constant -> STRING
-- On REIFY reduce production constant -> STRING
-- On REIFIABLE reduce production constant -> STRING
-- On REFLECTABLE reduce production constant -> STRING
-- On RBRACK reduce production constant -> STRING
-- On RBRACE reduce production constant -> STRING
-- On RARROW reduce production constant -> STRING
-- On RANGE_OF reduce production constant -> STRING
-- On PRIVATE reduce production constant -> STRING
-- On PRAGMA_SET_OPTIONS reduce production constant -> STRING
-- On PRAGMA_RESET_OPTIONS reduce production constant -> STRING
-- On PIPE_RIGHT reduce production constant -> STRING
-- On PERCENT_LBRACK reduce production constant -> STRING
-- On OPPREFIX reduce production constant -> STRING
-- On OPINFIX4 reduce production constant -> STRING
-- On OPINFIX3 reduce production constant -> STRING
-- On OPINFIX2 reduce production constant -> STRING
-- On OPINFIX1 reduce production constant -> STRING
-- On OPINFIX0d reduce production constant -> STRING
-- On OPINFIX0c reduce production constant -> STRING
-- On OPINFIX0b reduce production constant -> STRING
-- On OPINFIX0a reduce production constant -> STRING
-- On OPEN reduce production constant -> STRING
-- On OPAQUE reduce production constant -> STRING
-- On NOEXTRACT reduce production constant -> STRING
-- On NOEQUALITY reduce production constant -> STRING
-- On NEW_EFFECT reduce production constant -> STRING
-- On NEW reduce production constant -> STRING
-- On NAME reduce production constant -> STRING
-- On MODULE reduce production constant -> STRING
-- On MINUS reduce production constant -> STRING
-- On LPAREN_RPAREN reduce production constant -> STRING
-- On LPAREN reduce production constant -> STRING
-- On LOGIC reduce production constant -> STRING
-- On LET reduce production constant -> STRING
-- On LENS_PAREN_RIGHT reduce production constant -> STRING
-- On LENS_PAREN_LEFT reduce production constant -> STRING
-- On LBRACK_BAR reduce production constant -> STRING
-- On LBRACK_AT reduce production constant -> STRING
-- On LBRACK reduce production constant -> STRING
-- On LBRACE reduce production constant -> STRING
-- On IRREDUCIBLE reduce production constant -> STRING
-- On INT8 reduce production constant -> STRING
-- On INT64 reduce production constant -> STRING
-- On INT32 reduce production constant -> STRING
-- On INT16 reduce production constant -> STRING
-- On INT reduce production constant -> STRING
-- On INLINE_FOR_EXTRACTION reduce production constant -> STRING
-- On INLINE reduce production constant -> STRING
-- On INCLUDE reduce production constant -> STRING
-- On IN reduce production constant -> STRING
-- On IMPLIES reduce production constant -> STRING
-- On IFF reduce production constant -> STRING
-- On IEEE64 reduce production constant -> STRING
-- On IDENT reduce production constant -> STRING
-- On HASH reduce production constant -> STRING
-- On FSDOC_STANDALONE reduce production constant -> STRING
-- On FSDOC reduce production constant -> STRING
-- On FALSE reduce production constant -> STRING
-- On EXCEPTION reduce production constant -> STRING
-- On EQUALS reduce production constant -> STRING
-- On EOF reduce production constant -> STRING
-- On END reduce production constant -> STRING
-- On ELSE reduce production constant -> STRING
-- On EFFECT reduce production constant -> STRING
-- On DOT_LPAREN reduce production constant -> STRING
-- On DOT_LENS_PAREN_LEFT reduce production constant -> STRING
-- On DOT_LBRACK_BAR reduce production constant -> STRING
-- On DOT_LBRACK reduce production constant -> STRING
-- On DOLLAR reduce production constant -> STRING
-- On DISJUNCTION reduce production constant -> STRING
-- On DEFAULT reduce production constant -> STRING
-- On CONJUNCTION reduce production constant -> STRING
-- On COMMA reduce production constant -> STRING
-- On COLON_EQUALS reduce production constant -> STRING
-- On COLON_COLON reduce production constant -> STRING
-- On COLON reduce production constant -> STRING
-- On CHAR reduce production constant -> STRING
-- On BYTEARRAY reduce production constant -> STRING
-- On BY reduce production constant -> STRING
-- On BEGIN reduce production constant -> STRING
-- On BAR_RBRACK reduce production constant -> STRING
-- On BAR reduce production constant -> STRING
-- On BANG_LBRACE reduce production constant -> STRING
-- On BACKTICK reduce production constant -> STRING
-- On ASSUME reduce production constant -> STRING
-- On AND reduce production constant -> STRING
-- On AMP reduce production constant -> STRING
-- On ABSTRACT reduce production constant -> STRING
-- On # reduce production constant -> STRING
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> STRING
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
## Known stack suffix:
## SET_RANGE_OF
## LR(1) items:
constant -> SET_RANGE_OF . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> SET_RANGE_OF
-- On WHEN reduce production constant -> SET_RANGE_OF
-- On VAL reduce production constant -> SET_RANGE_OF
-- On UNOPTEQUALITY reduce production constant -> SET_RANGE_OF
-- On UNIV_HASH reduce production constant -> SET_RANGE_OF
-- On UNFOLDABLE reduce production constant -> SET_RANGE_OF
-- On UNFOLD reduce production constant -> SET_RANGE_OF
-- On UNDERSCORE reduce production constant -> SET_RANGE_OF
-- On UINT8 reduce production constant -> SET_RANGE_OF
-- On UINT64 reduce production constant -> SET_RANGE_OF
-- On UINT32 reduce production constant -> SET_RANGE_OF
-- On UINT16 reduce production constant -> SET_RANGE_OF
-- On TYP_APP_GREATER reduce production constant -> SET_RANGE_OF
-- On TYPE reduce production constant -> SET_RANGE_OF
-- On TVAR reduce production constant -> SET_RANGE_OF
-- On TRUE reduce production constant -> SET_RANGE_OF
-- On TOTAL reduce production constant -> SET_RANGE_OF
-- On THEN reduce production constant -> SET_RANGE_OF
-- On SUB_EFFECT reduce production constant -> SET_RANGE_OF
-- On SUBTYPE reduce production constant -> SET_RANGE_OF
-- On SUBKIND reduce production constant -> SET_RANGE_OF
-- On STRING reduce production constant -> SET_RANGE_OF
-- On SQUIGGLY_RARROW reduce production constant -> SET_RANGE_OF
-- On SPLICE reduce production constant -> SET_RANGE_OF
-- On SET_RANGE_OF reduce production constant -> SET_RANGE_OF
-- On SEMICOLON_SEMICOLON reduce production constant -> SET_RANGE_OF
-- On SEMICOLON reduce production constant -> SET_RANGE_OF
-- On RPAREN reduce production constant -> SET_RANGE_OF
-- On REIFY reduce production constant -> SET_RANGE_OF
-- On REIFIABLE reduce production constant -> SET_RANGE_OF
-- On REFLECTABLE reduce production constant -> SET_RANGE_OF
-- On RBRACK reduce production constant -> SET_RANGE_OF
-- On RBRACE reduce production constant -> SET_RANGE_OF
-- On RARROW reduce production constant -> SET_RANGE_OF
-- On RANGE_OF reduce production constant -> SET_RANGE_OF
-- On PRIVATE reduce production constant -> SET_RANGE_OF
-- On PRAGMA_SET_OPTIONS reduce production constant -> SET_RANGE_OF
-- On PRAGMA_RESET_OPTIONS reduce production constant -> SET_RANGE_OF
-- On PIPE_RIGHT reduce production constant -> SET_RANGE_OF
-- On PERCENT_LBRACK reduce production constant -> SET_RANGE_OF
-- On OPPREFIX reduce production constant -> SET_RANGE_OF
-- On OPINFIX4 reduce production constant -> SET_RANGE_OF
-- On OPINFIX3 reduce production constant -> SET_RANGE_OF
-- On OPINFIX2 reduce production constant -> SET_RANGE_OF
-- On OPINFIX1 reduce production constant -> SET_RANGE_OF
-- On OPINFIX0d reduce production constant -> SET_RANGE_OF
-- On OPINFIX0c reduce production constant -> SET_RANGE_OF
-- On OPINFIX0b reduce production constant -> SET_RANGE_OF
-- On OPINFIX0a reduce production constant -> SET_RANGE_OF
-- On OPEN reduce production constant -> SET_RANGE_OF
-- On OPAQUE reduce production constant -> SET_RANGE_OF
-- On NOEXTRACT reduce production constant -> SET_RANGE_OF
-- On NOEQUALITY reduce production constant -> SET_RANGE_OF
-- On NEW_EFFECT reduce production constant -> SET_RANGE_OF
-- On NEW reduce production constant -> SET_RANGE_OF
-- On NAME reduce production constant -> SET_RANGE_OF
-- On MODULE reduce production constant -> SET_RANGE_OF
-- On MINUS reduce production constant -> SET_RANGE_OF
-- On LPAREN_RPAREN reduce production constant -> SET_RANGE_OF
-- On LPAREN reduce production constant -> SET_RANGE_OF
-- On LOGIC reduce production constant -> SET_RANGE_OF
-- On LET reduce production constant -> SET_RANGE_OF
-- On LENS_PAREN_RIGHT reduce production constant -> SET_RANGE_OF
-- On LENS_PAREN_LEFT reduce production constant -> SET_RANGE_OF
-- On LBRACK_BAR reduce production constant -> SET_RANGE_OF
-- On LBRACK_AT reduce production constant -> SET_RANGE_OF
-- On LBRACK reduce production constant -> SET_RANGE_OF
-- On LBRACE reduce production constant -> SET_RANGE_OF
-- On IRREDUCIBLE reduce production constant -> SET_RANGE_OF
-- On INT8 reduce production constant -> SET_RANGE_OF
-- On INT64 reduce production constant -> SET_RANGE_OF
-- On INT32 reduce production constant -> SET_RANGE_OF
-- On INT16 reduce production constant -> SET_RANGE_OF
-- On INT reduce production constant -> SET_RANGE_OF
-- On INLINE_FOR_EXTRACTION reduce production constant -> SET_RANGE_OF
-- On INLINE reduce production constant -> SET_RANGE_OF
-- On INCLUDE reduce production constant -> SET_RANGE_OF
-- On IN reduce production constant -> SET_RANGE_OF
-- On IMPLIES reduce production constant -> SET_RANGE_OF
-- On IFF reduce production constant -> SET_RANGE_OF
-- On IEEE64 reduce production constant -> SET_RANGE_OF
-- On IDENT reduce production constant -> SET_RANGE_OF
-- On HASH reduce production constant -> SET_RANGE_OF
-- On FSDOC_STANDALONE reduce production constant -> SET_RANGE_OF
-- On FSDOC reduce production constant -> SET_RANGE_OF
-- On FALSE reduce production constant -> SET_RANGE_OF
-- On EXCEPTION reduce production constant -> SET_RANGE_OF
-- On EQUALS reduce production constant -> SET_RANGE_OF
-- On EOF reduce production constant -> SET_RANGE_OF
-- On END reduce production constant -> SET_RANGE_OF
-- On ELSE reduce production constant -> SET_RANGE_OF
-- On EFFECT reduce production constant -> SET_RANGE_OF
-- On DOT_LPAREN reduce production constant -> SET_RANGE_OF
-- On DOT_LENS_PAREN_LEFT reduce production constant -> SET_RANGE_OF
-- On DOT_LBRACK_BAR reduce production constant -> SET_RANGE_OF
-- On DOT_LBRACK reduce production constant -> SET_RANGE_OF
-- On DOLLAR reduce production constant -> SET_RANGE_OF
-- On DISJUNCTION reduce production constant -> SET_RANGE_OF
-- On DEFAULT reduce production constant -> SET_RANGE_OF
-- On CONJUNCTION reduce production constant -> SET_RANGE_OF
-- On COMMA reduce production constant -> SET_RANGE_OF
-- On COLON_EQUALS reduce production constant -> SET_RANGE_OF
-- On COLON_COLON reduce production constant -> SET_RANGE_OF
-- On COLON reduce production constant -> SET_RANGE_OF
-- On CHAR reduce production constant -> SET_RANGE_OF
-- On BYTEARRAY reduce production constant -> SET_RANGE_OF
-- On BY reduce production constant -> SET_RANGE_OF
-- On BEGIN reduce production constant -> SET_RANGE_OF
-- On BAR_RBRACK reduce production constant -> SET_RANGE_OF
-- On BAR reduce production constant -> SET_RANGE_OF
-- On BANG_LBRACE reduce production constant -> SET_RANGE_OF
-- On BACKTICK reduce production constant -> SET_RANGE_OF
-- On ASSUME reduce production constant -> SET_RANGE_OF
-- On AND reduce production constant -> SET_RANGE_OF
-- On AMP reduce production constant -> SET_RANGE_OF
-- On ABSTRACT reduce production constant -> SET_RANGE_OF
-- On # reduce production constant -> SET_RANGE_OF
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> SET_RANGE_OF
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 27:
## Known stack suffix:
## REIFY
## LR(1) items:
constant -> REIFY . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> REIFY
-- On WHEN reduce production constant -> REIFY
-- On VAL reduce production constant -> REIFY
-- On UNOPTEQUALITY reduce production constant -> REIFY
-- On UNIV_HASH reduce production constant -> REIFY
-- On UNFOLDABLE reduce production constant -> REIFY
-- On UNFOLD reduce production constant -> REIFY
-- On UNDERSCORE reduce production constant -> REIFY
-- On UINT8 reduce production constant -> REIFY
-- On UINT64 reduce production constant -> REIFY
-- On UINT32 reduce production constant -> REIFY
-- On UINT16 reduce production constant -> REIFY
-- On TYP_APP_GREATER reduce production constant -> REIFY
-- On TYPE reduce production constant -> REIFY
-- On TVAR reduce production constant -> REIFY
-- On TRUE reduce production constant -> REIFY
-- On TOTAL reduce production constant -> REIFY
-- On THEN reduce production constant -> REIFY
-- On SUB_EFFECT reduce production constant -> REIFY
-- On SUBTYPE reduce production constant -> REIFY
-- On SUBKIND reduce production constant -> REIFY
-- On STRING reduce production constant -> REIFY
-- On SQUIGGLY_RARROW reduce production constant -> REIFY
-- On SPLICE reduce production constant -> REIFY
-- On SET_RANGE_OF reduce production constant -> REIFY
-- On SEMICOLON_SEMICOLON reduce production constant -> REIFY
-- On SEMICOLON reduce production constant -> REIFY
-- On RPAREN reduce production constant -> REIFY
-- On REIFY reduce production constant -> REIFY
-- On REIFIABLE reduce production constant -> REIFY
-- On REFLECTABLE reduce production constant -> REIFY
-- On RBRACK reduce production constant -> REIFY
-- On RBRACE reduce production constant -> REIFY
-- On RARROW reduce production constant -> REIFY
-- On RANGE_OF reduce production constant -> REIFY
-- On PRIVATE reduce production constant -> REIFY
-- On PRAGMA_SET_OPTIONS reduce production constant -> REIFY
-- On PRAGMA_RESET_OPTIONS reduce production constant -> REIFY
-- On PIPE_RIGHT reduce production constant -> REIFY
-- On PERCENT_LBRACK reduce production constant -> REIFY
-- On OPPREFIX reduce production constant -> REIFY
-- On OPINFIX4 reduce production constant -> REIFY
-- On OPINFIX3 reduce production constant -> REIFY
-- On OPINFIX2 reduce production constant -> REIFY
-- On OPINFIX1 reduce production constant -> REIFY
-- On OPINFIX0d reduce production constant -> REIFY
-- On OPINFIX0c reduce production constant -> REIFY
-- On OPINFIX0b reduce production constant -> REIFY
-- On OPINFIX0a reduce production constant -> REIFY
-- On OPEN reduce production constant -> REIFY
-- On OPAQUE reduce production constant -> REIFY
-- On NOEXTRACT reduce production constant -> REIFY
-- On NOEQUALITY reduce production constant -> REIFY
-- On NEW_EFFECT reduce production constant -> REIFY
-- On NEW reduce production constant -> REIFY
-- On NAME reduce production constant -> REIFY
-- On MODULE reduce production constant -> REIFY
-- On MINUS reduce production constant -> REIFY
-- On LPAREN_RPAREN reduce production constant -> REIFY
-- On LPAREN reduce production constant -> REIFY
-- On LOGIC reduce production constant -> REIFY
-- On LET reduce production constant -> REIFY
-- On LENS_PAREN_RIGHT reduce production constant -> REIFY
-- On LENS_PAREN_LEFT reduce production constant -> REIFY
-- On LBRACK_BAR reduce production constant -> REIFY
-- On LBRACK_AT reduce production constant -> REIFY
-- On LBRACK reduce production constant -> REIFY
-- On LBRACE reduce production constant -> REIFY
-- On IRREDUCIBLE reduce production constant -> REIFY
-- On INT8 reduce production constant -> REIFY
-- On INT64 reduce production constant -> REIFY
-- On INT32 reduce production constant -> REIFY
-- On INT16 reduce production constant -> REIFY
-- On INT reduce production constant -> REIFY
-- On INLINE_FOR_EXTRACTION reduce production constant -> REIFY
-- On INLINE reduce production constant -> REIFY
-- On INCLUDE reduce production constant -> REIFY
-- On IN reduce production constant -> REIFY
-- On IMPLIES reduce production constant -> REIFY
-- On IFF reduce production constant -> REIFY
-- On IEEE64 reduce production constant -> REIFY
-- On IDENT reduce production constant -> REIFY
-- On HASH reduce production constant -> REIFY
-- On FSDOC_STANDALONE reduce production constant -> REIFY
-- On FSDOC reduce production constant -> REIFY
-- On FALSE reduce production constant -> REIFY
-- On EXCEPTION reduce production constant -> REIFY
-- On EQUALS reduce production constant -> REIFY
-- On EOF reduce production constant -> REIFY
-- On END reduce production constant -> REIFY
-- On ELSE reduce production constant -> REIFY
-- On EFFECT reduce production constant -> REIFY
-- On DOT_LPAREN reduce production constant -> REIFY
-- On DOT_LENS_PAREN_LEFT reduce production constant -> REIFY
-- On DOT_LBRACK_BAR reduce production constant -> REIFY
-- On DOT_LBRACK reduce production constant -> REIFY
-- On DOLLAR reduce production constant -> REIFY
-- On DISJUNCTION reduce production constant -> REIFY
-- On DEFAULT reduce production constant -> REIFY
-- On CONJUNCTION reduce production constant -> REIFY
-- On COMMA reduce production constant -> REIFY
-- On COLON_EQUALS reduce production constant -> REIFY
-- On COLON_COLON reduce production constant -> REIFY
-- On COLON reduce production constant -> REIFY
-- On CHAR reduce production constant -> REIFY
-- On BYTEARRAY reduce production constant -> REIFY
-- On BY reduce production constant -> REIFY
-- On BEGIN reduce production constant -> REIFY
-- On BAR_RBRACK reduce production constant -> REIFY
-- On BAR reduce production constant -> REIFY
-- On BANG_LBRACE reduce production constant -> REIFY
-- On BACKTICK reduce production constant -> REIFY
-- On ASSUME reduce production constant -> REIFY
-- On AND reduce production constant -> REIFY
-- On AMP reduce production constant -> REIFY
-- On ABSTRACT reduce production constant -> REIFY
-- On # reduce production constant -> REIFY
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> REIFY
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 28:
## Known stack suffix:
## RANGE_OF
## LR(1) items:
constant -> RANGE_OF . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> RANGE_OF
-- On WHEN reduce production constant -> RANGE_OF
-- On VAL reduce production constant -> RANGE_OF
-- On UNOPTEQUALITY reduce production constant -> RANGE_OF
-- On UNIV_HASH reduce production constant -> RANGE_OF
-- On UNFOLDABLE reduce production constant -> RANGE_OF
-- On UNFOLD reduce production constant -> RANGE_OF
-- On UNDERSCORE reduce production constant -> RANGE_OF
-- On UINT8 reduce production constant -> RANGE_OF
-- On UINT64 reduce production constant -> RANGE_OF
-- On UINT32 reduce production constant -> RANGE_OF
-- On UINT16 reduce production constant -> RANGE_OF
-- On TYP_APP_GREATER reduce production constant -> RANGE_OF
-- On TYPE reduce production constant -> RANGE_OF
-- On TVAR reduce production constant -> RANGE_OF
-- On TRUE reduce production constant -> RANGE_OF
-- On TOTAL reduce production constant -> RANGE_OF
-- On THEN reduce production constant -> RANGE_OF
-- On SUB_EFFECT reduce production constant -> RANGE_OF
-- On SUBTYPE reduce production constant -> RANGE_OF
-- On SUBKIND reduce production constant -> RANGE_OF
-- On STRING reduce production constant -> RANGE_OF
-- On SQUIGGLY_RARROW reduce production constant -> RANGE_OF
-- On SPLICE reduce production constant -> RANGE_OF
-- On SET_RANGE_OF reduce production constant -> RANGE_OF
-- On SEMICOLON_SEMICOLON reduce production constant -> RANGE_OF
-- On SEMICOLON reduce production constant -> RANGE_OF
-- On RPAREN reduce production constant -> RANGE_OF
-- On REIFY reduce production constant -> RANGE_OF
-- On REIFIABLE reduce production constant -> RANGE_OF
-- On REFLECTABLE reduce production constant -> RANGE_OF
-- On RBRACK reduce production constant -> RANGE_OF
-- On RBRACE reduce production constant -> RANGE_OF
-- On RARROW reduce production constant -> RANGE_OF
-- On RANGE_OF reduce production constant -> RANGE_OF
-- On PRIVATE reduce production constant -> RANGE_OF
-- On PRAGMA_SET_OPTIONS reduce production constant -> RANGE_OF
-- On PRAGMA_RESET_OPTIONS reduce production constant -> RANGE_OF
-- On PIPE_RIGHT reduce production constant -> RANGE_OF
-- On PERCENT_LBRACK reduce production constant -> RANGE_OF
-- On OPPREFIX reduce production constant -> RANGE_OF
-- On OPINFIX4 reduce production constant -> RANGE_OF
-- On OPINFIX3 reduce production constant -> RANGE_OF
-- On OPINFIX2 reduce production constant -> RANGE_OF
-- On OPINFIX1 reduce production constant -> RANGE_OF
-- On OPINFIX0d reduce production constant -> RANGE_OF
-- On OPINFIX0c reduce production constant -> RANGE_OF
-- On OPINFIX0b reduce production constant -> RANGE_OF
-- On OPINFIX0a reduce production constant -> RANGE_OF
-- On OPEN reduce production constant -> RANGE_OF
-- On OPAQUE reduce production constant -> RANGE_OF
-- On NOEXTRACT reduce production constant -> RANGE_OF
-- On NOEQUALITY reduce production constant -> RANGE_OF
-- On NEW_EFFECT reduce production constant -> RANGE_OF
-- On NEW reduce production constant -> RANGE_OF
-- On NAME reduce production constant -> RANGE_OF
-- On MODULE reduce production constant -> RANGE_OF
-- On MINUS reduce production constant -> RANGE_OF
-- On LPAREN_RPAREN reduce production constant -> RANGE_OF
-- On LPAREN reduce production constant -> RANGE_OF
-- On LOGIC reduce production constant -> RANGE_OF
-- On LET reduce production constant -> RANGE_OF
-- On LENS_PAREN_RIGHT reduce production constant -> RANGE_OF
-- On LENS_PAREN_LEFT reduce production constant -> RANGE_OF
-- On LBRACK_BAR reduce production constant -> RANGE_OF
-- On LBRACK_AT reduce production constant -> RANGE_OF
-- On LBRACK reduce production constant -> RANGE_OF
-- On LBRACE reduce production constant -> RANGE_OF
-- On IRREDUCIBLE reduce production constant -> RANGE_OF
-- On INT8 reduce production constant -> RANGE_OF
-- On INT64 reduce production constant -> RANGE_OF
-- On INT32 reduce production constant -> RANGE_OF
-- On INT16 reduce production constant -> RANGE_OF
-- On INT reduce production constant -> RANGE_OF
-- On INLINE_FOR_EXTRACTION reduce production constant -> RANGE_OF
-- On INLINE reduce production constant -> RANGE_OF
-- On INCLUDE reduce production constant -> RANGE_OF
-- On IN reduce production constant -> RANGE_OF
-- On IMPLIES reduce production constant -> RANGE_OF
-- On IFF reduce production constant -> RANGE_OF
-- On IEEE64 reduce production constant -> RANGE_OF
-- On IDENT reduce production constant -> RANGE_OF
-- On HASH reduce production constant -> RANGE_OF
-- On FSDOC_STANDALONE reduce production constant -> RANGE_OF
-- On FSDOC reduce production constant -> RANGE_OF
-- On FALSE reduce production constant -> RANGE_OF
-- On EXCEPTION reduce production constant -> RANGE_OF
-- On EQUALS reduce production constant -> RANGE_OF
-- On EOF reduce production constant -> RANGE_OF
-- On END reduce production constant -> RANGE_OF
-- On ELSE reduce production constant -> RANGE_OF
-- On EFFECT reduce production constant -> RANGE_OF
-- On DOT_LPAREN reduce production constant -> RANGE_OF
-- On DOT_LENS_PAREN_LEFT reduce production constant -> RANGE_OF
-- On DOT_LBRACK_BAR reduce production constant -> RANGE_OF
-- On DOT_LBRACK reduce production constant -> RANGE_OF
-- On DOLLAR reduce production constant -> RANGE_OF
-- On DISJUNCTION reduce production constant -> RANGE_OF
-- On DEFAULT reduce production constant -> RANGE_OF
-- On CONJUNCTION reduce production constant -> RANGE_OF
-- On COMMA reduce production constant -> RANGE_OF
-- On COLON_EQUALS reduce production constant -> RANGE_OF
-- On COLON_COLON reduce production constant -> RANGE_OF
-- On COLON reduce production constant -> RANGE_OF
-- On CHAR reduce production constant -> RANGE_OF
-- On BYTEARRAY reduce production constant -> RANGE_OF
-- On BY reduce production constant -> RANGE_OF
-- On BEGIN reduce production constant -> RANGE_OF
-- On BAR_RBRACK reduce production constant -> RANGE_OF
-- On BAR reduce production constant -> RANGE_OF
-- On BANG_LBRACE reduce production constant -> RANGE_OF
-- On BACKTICK reduce production constant -> RANGE_OF
-- On ASSUME reduce production constant -> RANGE_OF
-- On AND reduce production constant -> RANGE_OF
-- On AMP reduce production constant -> RANGE_OF
-- On ABSTRACT reduce production constant -> RANGE_OF
-- On # reduce production constant -> RANGE_OF
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> RANGE_OF
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 29:
## Known stack suffix:
## PERCENT_LBRACK
## LR(1) items:
projectionLHS -> PERCENT_LBRACK . right_flexible_list(SEMICOLON,noSeqTerm) RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 679
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 30:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicTermNotQUident -> UNDERSCORE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
lidentOrUnderscore -> UNDERSCORE . [ LONG_LEFT_ARROW COLON ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> UNDERSCORE
-- On VAL reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNIV_HASH reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNFOLDABLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNFOLD reduce production atomicTermNotQUident -> UNDERSCORE
-- On UNDERSCORE reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT8 reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT64 reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT32 reduce production atomicTermNotQUident -> UNDERSCORE
-- On UINT16 reduce production atomicTermNotQUident -> UNDERSCORE
-- On TYPE reduce production atomicTermNotQUident -> UNDERSCORE
-- On TVAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On TRUE reduce production atomicTermNotQUident -> UNDERSCORE
-- On TOTAL reduce production atomicTermNotQUident -> UNDERSCORE
-- On THEN reduce production atomicTermNotQUident -> UNDERSCORE
-- On SUB_EFFECT reduce production atomicTermNotQUident -> UNDERSCORE
-- On SUBTYPE reduce production atomicTermNotQUident -> UNDERSCORE
-- On SUBKIND reduce production atomicTermNotQUident -> UNDERSCORE
-- On STRING reduce production atomicTermNotQUident -> UNDERSCORE
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> UNDERSCORE
-- On SPLICE reduce production atomicTermNotQUident -> UNDERSCORE
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> UNDERSCORE
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> UNDERSCORE
-- On SEMICOLON reduce production atomicTermNotQUident -> UNDERSCORE
-- On RPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On REIFY reduce production atomicTermNotQUident -> UNDERSCORE
-- On REIFIABLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On REFLECTABLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On RBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On RBRACE reduce production atomicTermNotQUident -> UNDERSCORE
-- On RARROW reduce production atomicTermNotQUident -> UNDERSCORE
-- On RANGE_OF reduce production atomicTermNotQUident -> UNDERSCORE
-- On PRIVATE reduce production atomicTermNotQUident -> UNDERSCORE
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> UNDERSCORE
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> UNDERSCORE
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> UNDERSCORE
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPPREFIX reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX4 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX3 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX2 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX1 reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0d reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0c reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0b reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPINFIX0a reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPEN reduce production atomicTermNotQUident -> UNDERSCORE
-- On OPAQUE reduce production atomicTermNotQUident -> UNDERSCORE
-- On NOEXTRACT reduce production atomicTermNotQUident -> UNDERSCORE
-- On NOEQUALITY reduce production atomicTermNotQUident -> UNDERSCORE
-- On NEW_EFFECT reduce production atomicTermNotQUident -> UNDERSCORE
-- On NEW reduce production atomicTermNotQUident -> UNDERSCORE
-- On NAME reduce production atomicTermNotQUident -> UNDERSCORE
-- On MODULE reduce production atomicTermNotQUident -> UNDERSCORE
-- On MINUS reduce production atomicTermNotQUident -> UNDERSCORE
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On LPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On LONG_LEFT_ARROW reduce production lidentOrUnderscore -> UNDERSCORE
-- On LOGIC reduce production atomicTermNotQUident -> UNDERSCORE
-- On LET reduce production atomicTermNotQUident -> UNDERSCORE
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> UNDERSCORE
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> UNDERSCORE
-- On LBRACK_BAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On LBRACK_AT reduce production atomicTermNotQUident -> UNDERSCORE
-- On LBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT8 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT64 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT32 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT16 reduce production atomicTermNotQUident -> UNDERSCORE
-- On INT reduce production atomicTermNotQUident -> UNDERSCORE
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On INLINE reduce production atomicTermNotQUident -> UNDERSCORE
-- On INCLUDE reduce production atomicTermNotQUident -> UNDERSCORE
-- On IN reduce production atomicTermNotQUident -> UNDERSCORE
-- On IMPLIES reduce production atomicTermNotQUident -> UNDERSCORE
-- On IFF reduce production atomicTermNotQUident -> UNDERSCORE
-- On IEEE64 reduce production atomicTermNotQUident -> UNDERSCORE
-- On IDENT reduce production atomicTermNotQUident -> UNDERSCORE
-- On HASH reduce production atomicTermNotQUident -> UNDERSCORE
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> UNDERSCORE
-- On FSDOC reduce production atomicTermNotQUident -> UNDERSCORE
-- On FALSE reduce production atomicTermNotQUident -> UNDERSCORE
-- On EXCEPTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On EQUALS reduce production atomicTermNotQUident -> UNDERSCORE
-- On EOF reduce production atomicTermNotQUident -> UNDERSCORE
-- On END reduce production atomicTermNotQUident -> UNDERSCORE
-- On ELSE reduce production atomicTermNotQUident -> UNDERSCORE
-- On EFFECT reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LPAREN reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On DOT_LBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On DISJUNCTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On DEFAULT reduce production atomicTermNotQUident -> UNDERSCORE
-- On CONJUNCTION reduce production atomicTermNotQUident -> UNDERSCORE
-- On COMMA reduce production atomicTermNotQUident -> UNDERSCORE
-- On COLON_EQUALS reduce production atomicTermNotQUident -> UNDERSCORE
-- On COLON_COLON reduce production atomicTermNotQUident -> UNDERSCORE
-- On COLON reduce production lidentOrUnderscore -> UNDERSCORE
-- On CHAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On BYTEARRAY reduce production atomicTermNotQUident -> UNDERSCORE
-- On BY reduce production atomicTermNotQUident -> UNDERSCORE
-- On BEGIN reduce production atomicTermNotQUident -> UNDERSCORE
-- On BAR_RBRACK reduce production atomicTermNotQUident -> UNDERSCORE
-- On BAR reduce production atomicTermNotQUident -> UNDERSCORE
-- On BANG_LBRACE reduce production atomicTermNotQUident -> UNDERSCORE
-- On BACKTICK reduce production atomicTermNotQUident -> UNDERSCORE
-- On ASSUME reduce production atomicTermNotQUident -> UNDERSCORE
-- On AND reduce production atomicTermNotQUident -> UNDERSCORE
-- On AMP reduce production atomicTermNotQUident -> UNDERSCORE
-- On ABSTRACT reduce production atomicTermNotQUident -> UNDERSCORE
-- On # reduce production atomicTermNotQUident -> UNDERSCORE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LONG_LEFT_ARROW LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> UNDERSCORE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 31:
## Known stack suffix:
## TRY
## LR(1) items:
noSeqTerm -> TRY . term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 676
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 32:
## Known stack suffix:
## TILDE
## LR(1) items:
tmNoEqWith(tmRefinement) -> TILDE . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 675
## Reductions:

State 33:
## Known stack suffix:
## OPPREFIX
## LR(1) items:
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX . atomicTermNotQUident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
opPrefixTerm(atomicTermQUident) -> OPPREFIX . atomicTermQUident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 34
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 645
-- On atomicTermNotQUident shift to state 646
## Reductions:

State 34:
## Known stack suffix:
## OPPREFIX
## LR(1) items:
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX . atomicTermNotQUident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 34
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 674
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermNotQUident shift to state 646
## Reductions:

State 35:
## Known stack suffix:
## NAME
## LR(1) items:
uident -> NAME . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE OF NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production uident -> NAME
-- On WHEN reduce production uident -> NAME
-- On VAL reduce production uident -> NAME
-- On UNOPTEQUALITY reduce production uident -> NAME
-- On UNIV_HASH reduce production uident -> NAME
-- On UNFOLDABLE reduce production uident -> NAME
-- On UNFOLD reduce production uident -> NAME
-- On UNDERSCORE reduce production uident -> NAME
-- On UINT8 reduce production uident -> NAME
-- On UINT64 reduce production uident -> NAME
-- On UINT32 reduce production uident -> NAME
-- On UINT16 reduce production uident -> NAME
-- On TYP_APP_LESS reduce production uident -> NAME
-- On TYP_APP_GREATER reduce production uident -> NAME
-- On TYPE reduce production uident -> NAME
-- On TVAR reduce production uident -> NAME
-- On TRUE reduce production uident -> NAME
-- On TOTAL reduce production uident -> NAME
-- On THEN reduce production uident -> NAME
-- On SUB_EFFECT reduce production uident -> NAME
-- On SUBTYPE reduce production uident -> NAME
-- On SUBKIND reduce production uident -> NAME
-- On STRING reduce production uident -> NAME
-- On SQUIGGLY_RARROW reduce production uident -> NAME
-- On SPLICE reduce production uident -> NAME
-- On SET_RANGE_OF reduce production uident -> NAME
-- On SEMICOLON_SEMICOLON reduce production uident -> NAME
-- On SEMICOLON reduce production uident -> NAME
-- On RPAREN reduce production uident -> NAME
-- On REIFY reduce production uident -> NAME
-- On REIFIABLE reduce production uident -> NAME
-- On REFLECTABLE reduce production uident -> NAME
-- On RBRACK reduce production uident -> NAME
-- On RBRACE reduce production uident -> NAME
-- On RARROW reduce production uident -> NAME
-- On RANGE_OF reduce production uident -> NAME
-- On QMARK_DOT reduce production uident -> NAME
-- On QMARK reduce production uident -> NAME
-- On PRIVATE reduce production uident -> NAME
-- On PRAGMA_SET_OPTIONS reduce production uident -> NAME
-- On PRAGMA_RESET_OPTIONS reduce production uident -> NAME
-- On PIPE_RIGHT reduce production uident -> NAME
-- On PERCENT_LBRACK reduce production uident -> NAME
-- On OPPREFIX reduce production uident -> NAME
-- On OPINFIX4 reduce production uident -> NAME
-- On OPINFIX3 reduce production uident -> NAME
-- On OPINFIX2 reduce production uident -> NAME
-- On OPINFIX1 reduce production uident -> NAME
-- On OPINFIX0d reduce production uident -> NAME
-- On OPINFIX0c reduce production uident -> NAME
-- On OPINFIX0b reduce production uident -> NAME
-- On OPINFIX0a reduce production uident -> NAME
-- On OPEN reduce production uident -> NAME
-- On OPAQUE reduce production uident -> NAME
-- On OF reduce production uident -> NAME
-- On NOEXTRACT reduce production uident -> NAME
-- On NOEQUALITY reduce production uident -> NAME
-- On NEW_EFFECT reduce production uident -> NAME
-- On NEW reduce production uident -> NAME
-- On NAME reduce production uident -> NAME
-- On MODULE reduce production uident -> NAME
-- On MINUS reduce production uident -> NAME
-- On LPAREN_RPAREN reduce production uident -> NAME
-- On LPAREN reduce production uident -> NAME
-- On LOGIC reduce production uident -> NAME
-- On LET reduce production uident -> NAME
-- On LENS_PAREN_RIGHT reduce production uident -> NAME
-- On LENS_PAREN_LEFT reduce production uident -> NAME
-- On LBRACK_BAR reduce production uident -> NAME
-- On LBRACK_AT reduce production uident -> NAME
-- On LBRACK reduce production uident -> NAME
-- On LBRACE reduce production uident -> NAME
-- On IRREDUCIBLE reduce production uident -> NAME
-- On INT8 reduce production uident -> NAME
-- On INT64 reduce production uident -> NAME
-- On INT32 reduce production uident -> NAME
-- On INT16 reduce production uident -> NAME
-- On INT reduce production uident -> NAME
-- On INLINE_FOR_EXTRACTION reduce production uident -> NAME
-- On INLINE reduce production uident -> NAME
-- On INCLUDE reduce production uident -> NAME
-- On IN reduce production uident -> NAME
-- On IMPLIES reduce production uident -> NAME
-- On IFF reduce production uident -> NAME
-- On IEEE64 reduce production uident -> NAME
-- On IDENT reduce production uident -> NAME
-- On HASH reduce production uident -> NAME
-- On FSDOC_STANDALONE reduce production uident -> NAME
-- On FSDOC reduce production uident -> NAME
-- On FALSE reduce production uident -> NAME
-- On EXCEPTION reduce production uident -> NAME
-- On EQUALS reduce production uident -> NAME
-- On EOF reduce production uident -> NAME
-- On END reduce production uident -> NAME
-- On ELSE reduce production uident -> NAME
-- On EFFECT reduce production uident -> NAME
-- On DOT_LPAREN reduce production uident -> NAME
-- On DOT reduce production uident -> NAME
-- On DOLLAR reduce production uident -> NAME
-- On DISJUNCTION reduce production uident -> NAME
-- On DEFAULT reduce production uident -> NAME
-- On CONJUNCTION reduce production uident -> NAME
-- On COMMA reduce production uident -> NAME
-- On COLON_EQUALS reduce production uident -> NAME
-- On COLON_COLON reduce production uident -> NAME
-- On COLON reduce production uident -> NAME
-- On CHAR reduce production uident -> NAME
-- On BYTEARRAY reduce production uident -> NAME
-- On BY reduce production uident -> NAME
-- On BEGIN reduce production uident -> NAME
-- On BAR_RBRACK reduce production uident -> NAME
-- On BAR reduce production uident -> NAME
-- On BANG_LBRACE reduce production uident -> NAME
-- On BACKTICK reduce production uident -> NAME
-- On ASSUME reduce production uident -> NAME
-- On AND reduce production uident -> NAME
-- On AMP reduce production uident -> NAME
-- On ABSTRACT reduce production uident -> NAME
-- On # reduce production uident -> NAME
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE OF NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production uident -> NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 36:
## Known stack suffix:
## LPAREN_RPAREN
## LR(1) items:
constant -> LPAREN_RPAREN . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> LPAREN_RPAREN
-- On WHEN reduce production constant -> LPAREN_RPAREN
-- On VAL reduce production constant -> LPAREN_RPAREN
-- On UNOPTEQUALITY reduce production constant -> LPAREN_RPAREN
-- On UNIV_HASH reduce production constant -> LPAREN_RPAREN
-- On UNFOLDABLE reduce production constant -> LPAREN_RPAREN
-- On UNFOLD reduce production constant -> LPAREN_RPAREN
-- On UNDERSCORE reduce production constant -> LPAREN_RPAREN
-- On UINT8 reduce production constant -> LPAREN_RPAREN
-- On UINT64 reduce production constant -> LPAREN_RPAREN
-- On UINT32 reduce production constant -> LPAREN_RPAREN
-- On UINT16 reduce production constant -> LPAREN_RPAREN
-- On TYP_APP_GREATER reduce production constant -> LPAREN_RPAREN
-- On TYPE reduce production constant -> LPAREN_RPAREN
-- On TVAR reduce production constant -> LPAREN_RPAREN
-- On TRUE reduce production constant -> LPAREN_RPAREN
-- On TOTAL reduce production constant -> LPAREN_RPAREN
-- On THEN reduce production constant -> LPAREN_RPAREN
-- On SUB_EFFECT reduce production constant -> LPAREN_RPAREN
-- On SUBTYPE reduce production constant -> LPAREN_RPAREN
-- On SUBKIND reduce production constant -> LPAREN_RPAREN
-- On STRING reduce production constant -> LPAREN_RPAREN
-- On SQUIGGLY_RARROW reduce production constant -> LPAREN_RPAREN
-- On SPLICE reduce production constant -> LPAREN_RPAREN
-- On SET_RANGE_OF reduce production constant -> LPAREN_RPAREN
-- On SEMICOLON_SEMICOLON reduce production constant -> LPAREN_RPAREN
-- On SEMICOLON reduce production constant -> LPAREN_RPAREN
-- On RPAREN reduce production constant -> LPAREN_RPAREN
-- On REIFY reduce production constant -> LPAREN_RPAREN
-- On REIFIABLE reduce production constant -> LPAREN_RPAREN
-- On REFLECTABLE reduce production constant -> LPAREN_RPAREN
-- On RBRACK reduce production constant -> LPAREN_RPAREN
-- On RBRACE reduce production constant -> LPAREN_RPAREN
-- On RARROW reduce production constant -> LPAREN_RPAREN
-- On RANGE_OF reduce production constant -> LPAREN_RPAREN
-- On PRIVATE reduce production constant -> LPAREN_RPAREN
-- On PRAGMA_SET_OPTIONS reduce production constant -> LPAREN_RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production constant -> LPAREN_RPAREN
-- On PIPE_RIGHT reduce production constant -> LPAREN_RPAREN
-- On PERCENT_LBRACK reduce production constant -> LPAREN_RPAREN
-- On OPPREFIX reduce production constant -> LPAREN_RPAREN
-- On OPINFIX4 reduce production constant -> LPAREN_RPAREN
-- On OPINFIX3 reduce production constant -> LPAREN_RPAREN
-- On OPINFIX2 reduce production constant -> LPAREN_RPAREN
-- On OPINFIX1 reduce production constant -> LPAREN_RPAREN
-- On OPINFIX0d reduce production constant -> LPAREN_RPAREN
-- On OPINFIX0c reduce production constant -> LPAREN_RPAREN
-- On OPINFIX0b reduce production constant -> LPAREN_RPAREN
-- On OPINFIX0a reduce production constant -> LPAREN_RPAREN
-- On OPEN reduce production constant -> LPAREN_RPAREN
-- On OPAQUE reduce production constant -> LPAREN_RPAREN
-- On NOEXTRACT reduce production constant -> LPAREN_RPAREN
-- On NOEQUALITY reduce production constant -> LPAREN_RPAREN
-- On NEW_EFFECT reduce production constant -> LPAREN_RPAREN
-- On NEW reduce production constant -> LPAREN_RPAREN
-- On NAME reduce production constant -> LPAREN_RPAREN
-- On MODULE reduce production constant -> LPAREN_RPAREN
-- On MINUS reduce production constant -> LPAREN_RPAREN
-- On LPAREN_RPAREN reduce production constant -> LPAREN_RPAREN
-- On LPAREN reduce production constant -> LPAREN_RPAREN
-- On LOGIC reduce production constant -> LPAREN_RPAREN
-- On LET reduce production constant -> LPAREN_RPAREN
-- On LENS_PAREN_RIGHT reduce production constant -> LPAREN_RPAREN
-- On LENS_PAREN_LEFT reduce production constant -> LPAREN_RPAREN
-- On LBRACK_BAR reduce production constant -> LPAREN_RPAREN
-- On LBRACK_AT reduce production constant -> LPAREN_RPAREN
-- On LBRACK reduce production constant -> LPAREN_RPAREN
-- On LBRACE reduce production constant -> LPAREN_RPAREN
-- On IRREDUCIBLE reduce production constant -> LPAREN_RPAREN
-- On INT8 reduce production constant -> LPAREN_RPAREN
-- On INT64 reduce production constant -> LPAREN_RPAREN
-- On INT32 reduce production constant -> LPAREN_RPAREN
-- On INT16 reduce production constant -> LPAREN_RPAREN
-- On INT reduce production constant -> LPAREN_RPAREN
-- On INLINE_FOR_EXTRACTION reduce production constant -> LPAREN_RPAREN
-- On INLINE reduce production constant -> LPAREN_RPAREN
-- On INCLUDE reduce production constant -> LPAREN_RPAREN
-- On IN reduce production constant -> LPAREN_RPAREN
-- On IMPLIES reduce production constant -> LPAREN_RPAREN
-- On IFF reduce production constant -> LPAREN_RPAREN
-- On IEEE64 reduce production constant -> LPAREN_RPAREN
-- On IDENT reduce production constant -> LPAREN_RPAREN
-- On HASH reduce production constant -> LPAREN_RPAREN
-- On FSDOC_STANDALONE reduce production constant -> LPAREN_RPAREN
-- On FSDOC reduce production constant -> LPAREN_RPAREN
-- On FALSE reduce production constant -> LPAREN_RPAREN
-- On EXCEPTION reduce production constant -> LPAREN_RPAREN
-- On EQUALS reduce production constant -> LPAREN_RPAREN
-- On EOF reduce production constant -> LPAREN_RPAREN
-- On END reduce production constant -> LPAREN_RPAREN
-- On ELSE reduce production constant -> LPAREN_RPAREN
-- On EFFECT reduce production constant -> LPAREN_RPAREN
-- On DOT_LPAREN reduce production constant -> LPAREN_RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production constant -> LPAREN_RPAREN
-- On DOT_LBRACK_BAR reduce production constant -> LPAREN_RPAREN
-- On DOT_LBRACK reduce production constant -> LPAREN_RPAREN
-- On DOLLAR reduce production constant -> LPAREN_RPAREN
-- On DISJUNCTION reduce production constant -> LPAREN_RPAREN
-- On DEFAULT reduce production constant -> LPAREN_RPAREN
-- On CONJUNCTION reduce production constant -> LPAREN_RPAREN
-- On COMMA reduce production constant -> LPAREN_RPAREN
-- On COLON_EQUALS reduce production constant -> LPAREN_RPAREN
-- On COLON_COLON reduce production constant -> LPAREN_RPAREN
-- On COLON reduce production constant -> LPAREN_RPAREN
-- On CHAR reduce production constant -> LPAREN_RPAREN
-- On BYTEARRAY reduce production constant -> LPAREN_RPAREN
-- On BY reduce production constant -> LPAREN_RPAREN
-- On BEGIN reduce production constant -> LPAREN_RPAREN
-- On BAR_RBRACK reduce production constant -> LPAREN_RPAREN
-- On BAR reduce production constant -> LPAREN_RPAREN
-- On BANG_LBRACE reduce production constant -> LPAREN_RPAREN
-- On BACKTICK reduce production constant -> LPAREN_RPAREN
-- On ASSUME reduce production constant -> LPAREN_RPAREN
-- On AND reduce production constant -> LPAREN_RPAREN
-- On AMP reduce production constant -> LPAREN_RPAREN
-- On ABSTRACT reduce production constant -> LPAREN_RPAREN
-- On # reduce production constant -> LPAREN_RPAREN
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> LPAREN_RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 37:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN . OPPREFIX RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX3 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX4 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0a RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0b RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0c RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0d RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX1 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX2 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . PIPE_RIGHT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_EQUALS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_COLON RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> LPAREN . term option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PIPE_RIGHT shift to state 48
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OP_MIXFIX_ASSIGNMENT shift to state 50
-- On OP_MIXFIX_ACCESS shift to state 52
-- On OPPREFIX shift to state 54
-- On OPINFIX4 shift to state 484
-- On OPINFIX3 shift to state 486
-- On OPINFIX2 shift to state 488
-- On OPINFIX1 shift to state 490
-- On OPINFIX0d shift to state 492
-- On OPINFIX0c shift to state 494
-- On OPINFIX0b shift to state 496
-- On OPINFIX0a shift to state 498
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 500
-- On COLON_COLON shift to state 502
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 504
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 38:
## Known stack suffix:
## SYNTH
## LR(1) items:
noSeqTerm -> SYNTH . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 673
## Reductions:

State 39:
## Known stack suffix:
## LENS_PAREN_LEFT
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT . tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 669
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 40:
## Known stack suffix:
## QUOTE
## LR(1) items:
tmEqWith(tmRefinement) -> QUOTE . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 668
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 41:
## Known stack suffix:
## PERC_BACKTICK
## LR(1) items:
tmNoEqWith(tmRefinement) -> PERC_BACKTICK . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 667
## Reductions:

State 42:
## Known stack suffix:
## LBRACK_BAR
## LR(1) items:
projectionLHS -> LBRACK_BAR . right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 665
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On BAR_RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 43:
## Known stack suffix:
## REQUIRES
## LR(1) items:
noSeqTerm -> REQUIRES . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 664
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 44:
## Known stack suffix:
## MINUS
## LR(1) items:
tmEqWith(tmRefinement) -> MINUS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 663
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 45:
## Known stack suffix:
## LBRACK
## LR(1) items:
projectionLHS -> LBRACK . right_flexible_list(SEMICOLON,noSeqTerm) RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 658
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 46:
## Known stack suffix:
## MATCH
## LR(1) items:
noSeqTerm -> MATCH . term WITH reverse_left_flexible_list(BAR,__anonymous_7) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 652
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 47:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN . OPPREFIX RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX3 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX4 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0a RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0b RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0c RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0d RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX1 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX2 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . PIPE_RIGHT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_EQUALS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_COLON RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> LPAREN . term option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
tmArrow(tmFormula) -> LPAREN . aqual tmFormula RPAREN RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PIPE_RIGHT shift to state 48
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OP_MIXFIX_ASSIGNMENT shift to state 50
-- On OP_MIXFIX_ACCESS shift to state 52
-- On OPPREFIX shift to state 54
-- On OPINFIX4 shift to state 484
-- On OPINFIX3 shift to state 486
-- On OPINFIX2 shift to state 488
-- On OPINFIX1 shift to state 490
-- On OPINFIX0d shift to state 492
-- On OPINFIX0c shift to state 494
-- On OPINFIX0b shift to state 496
-- On OPINFIX0a shift to state 498
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 500
-- On COLON_COLON shift to state 502
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 504
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 647
-- On appTerm shift to state 320
## Reductions:

State 48:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
atomicTermNotQUident -> LPAREN PIPE_RIGHT . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 50:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 52:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 54:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
atomicTermNotQUident -> LPAREN OPPREFIX . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX . atomicTermNotQUident [ UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE SUBTYPE SUBKIND STRING SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY RARROW RANGE_OF PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IMPLIES IFF IEEE64 IDENT HASH FALSE EQUALS DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK AMP ]
opPrefixTerm(atomicTermQUident) -> OPPREFIX . atomicTermQUident [ UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE SUBTYPE SUBKIND STRING SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY RARROW RANGE_OF PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IMPLIES IFF IEEE64 IDENT HASH FALSE EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On RPAREN shift to state 55
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 34
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 645
-- On atomicTermNotQUident shift to state 646
## Reductions:

State 55:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPPREFIX RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 56:
## Known stack suffix:
## INT8
## LR(1) items:
constant -> INT8 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> INT8
-- On WHEN reduce production constant -> INT8
-- On VAL reduce production constant -> INT8
-- On UNOPTEQUALITY reduce production constant -> INT8
-- On UNIV_HASH reduce production constant -> INT8
-- On UNFOLDABLE reduce production constant -> INT8
-- On UNFOLD reduce production constant -> INT8
-- On UNDERSCORE reduce production constant -> INT8
-- On UINT8 reduce production constant -> INT8
-- On UINT64 reduce production constant -> INT8
-- On UINT32 reduce production constant -> INT8
-- On UINT16 reduce production constant -> INT8
-- On TYP_APP_GREATER reduce production constant -> INT8
-- On TYPE reduce production constant -> INT8
-- On TVAR reduce production constant -> INT8
-- On TRUE reduce production constant -> INT8
-- On TOTAL reduce production constant -> INT8
-- On THEN reduce production constant -> INT8
-- On SUB_EFFECT reduce production constant -> INT8
-- On SUBTYPE reduce production constant -> INT8
-- On SUBKIND reduce production constant -> INT8
-- On STRING reduce production constant -> INT8
-- On SQUIGGLY_RARROW reduce production constant -> INT8
-- On SPLICE reduce production constant -> INT8
-- On SET_RANGE_OF reduce production constant -> INT8
-- On SEMICOLON_SEMICOLON reduce production constant -> INT8
-- On SEMICOLON reduce production constant -> INT8
-- On RPAREN reduce production constant -> INT8
-- On REIFY reduce production constant -> INT8
-- On REIFIABLE reduce production constant -> INT8
-- On REFLECTABLE reduce production constant -> INT8
-- On RBRACK reduce production constant -> INT8
-- On RBRACE reduce production constant -> INT8
-- On RARROW reduce production constant -> INT8
-- On RANGE_OF reduce production constant -> INT8
-- On PRIVATE reduce production constant -> INT8
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT8
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT8
-- On PIPE_RIGHT reduce production constant -> INT8
-- On PERCENT_LBRACK reduce production constant -> INT8
-- On OPPREFIX reduce production constant -> INT8
-- On OPINFIX4 reduce production constant -> INT8
-- On OPINFIX3 reduce production constant -> INT8
-- On OPINFIX2 reduce production constant -> INT8
-- On OPINFIX1 reduce production constant -> INT8
-- On OPINFIX0d reduce production constant -> INT8
-- On OPINFIX0c reduce production constant -> INT8
-- On OPINFIX0b reduce production constant -> INT8
-- On OPINFIX0a reduce production constant -> INT8
-- On OPEN reduce production constant -> INT8
-- On OPAQUE reduce production constant -> INT8
-- On NOEXTRACT reduce production constant -> INT8
-- On NOEQUALITY reduce production constant -> INT8
-- On NEW_EFFECT reduce production constant -> INT8
-- On NEW reduce production constant -> INT8
-- On NAME reduce production constant -> INT8
-- On MODULE reduce production constant -> INT8
-- On MINUS reduce production constant -> INT8
-- On LPAREN_RPAREN reduce production constant -> INT8
-- On LPAREN reduce production constant -> INT8
-- On LOGIC reduce production constant -> INT8
-- On LET reduce production constant -> INT8
-- On LENS_PAREN_RIGHT reduce production constant -> INT8
-- On LENS_PAREN_LEFT reduce production constant -> INT8
-- On LBRACK_BAR reduce production constant -> INT8
-- On LBRACK_AT reduce production constant -> INT8
-- On LBRACK reduce production constant -> INT8
-- On LBRACE reduce production constant -> INT8
-- On IRREDUCIBLE reduce production constant -> INT8
-- On INT8 reduce production constant -> INT8
-- On INT64 reduce production constant -> INT8
-- On INT32 reduce production constant -> INT8
-- On INT16 reduce production constant -> INT8
-- On INT reduce production constant -> INT8
-- On INLINE_FOR_EXTRACTION reduce production constant -> INT8
-- On INLINE reduce production constant -> INT8
-- On INCLUDE reduce production constant -> INT8
-- On IN reduce production constant -> INT8
-- On IMPLIES reduce production constant -> INT8
-- On IFF reduce production constant -> INT8
-- On IEEE64 reduce production constant -> INT8
-- On IDENT reduce production constant -> INT8
-- On HASH reduce production constant -> INT8
-- On FSDOC_STANDALONE reduce production constant -> INT8
-- On FSDOC reduce production constant -> INT8
-- On FALSE reduce production constant -> INT8
-- On EXCEPTION reduce production constant -> INT8
-- On EQUALS reduce production constant -> INT8
-- On EOF reduce production constant -> INT8
-- On END reduce production constant -> INT8
-- On ELSE reduce production constant -> INT8
-- On EFFECT reduce production constant -> INT8
-- On DOT_LPAREN reduce production constant -> INT8
-- On DOT_LENS_PAREN_LEFT reduce production constant -> INT8
-- On DOT_LBRACK_BAR reduce production constant -> INT8
-- On DOT_LBRACK reduce production constant -> INT8
-- On DOLLAR reduce production constant -> INT8
-- On DISJUNCTION reduce production constant -> INT8
-- On DEFAULT reduce production constant -> INT8
-- On CONJUNCTION reduce production constant -> INT8
-- On COMMA reduce production constant -> INT8
-- On COLON_EQUALS reduce production constant -> INT8
-- On COLON_COLON reduce production constant -> INT8
-- On COLON reduce production constant -> INT8
-- On CHAR reduce production constant -> INT8
-- On BYTEARRAY reduce production constant -> INT8
-- On BY reduce production constant -> INT8
-- On BEGIN reduce production constant -> INT8
-- On BAR_RBRACK reduce production constant -> INT8
-- On BAR reduce production constant -> INT8
-- On BANG_LBRACE reduce production constant -> INT8
-- On BACKTICK reduce production constant -> INT8
-- On ASSUME reduce production constant -> INT8
-- On AND reduce production constant -> INT8
-- On AMP reduce production constant -> INT8
-- On ABSTRACT reduce production constant -> INT8
-- On # reduce production constant -> INT8
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> INT8
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 57:
## Known stack suffix:
## INT64
## LR(1) items:
constant -> INT64 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> INT64
-- On WHEN reduce production constant -> INT64
-- On VAL reduce production constant -> INT64
-- On UNOPTEQUALITY reduce production constant -> INT64
-- On UNIV_HASH reduce production constant -> INT64
-- On UNFOLDABLE reduce production constant -> INT64
-- On UNFOLD reduce production constant -> INT64
-- On UNDERSCORE reduce production constant -> INT64
-- On UINT8 reduce production constant -> INT64
-- On UINT64 reduce production constant -> INT64
-- On UINT32 reduce production constant -> INT64
-- On UINT16 reduce production constant -> INT64
-- On TYP_APP_GREATER reduce production constant -> INT64
-- On TYPE reduce production constant -> INT64
-- On TVAR reduce production constant -> INT64
-- On TRUE reduce production constant -> INT64
-- On TOTAL reduce production constant -> INT64
-- On THEN reduce production constant -> INT64
-- On SUB_EFFECT reduce production constant -> INT64
-- On SUBTYPE reduce production constant -> INT64
-- On SUBKIND reduce production constant -> INT64
-- On STRING reduce production constant -> INT64
-- On SQUIGGLY_RARROW reduce production constant -> INT64
-- On SPLICE reduce production constant -> INT64
-- On SET_RANGE_OF reduce production constant -> INT64
-- On SEMICOLON_SEMICOLON reduce production constant -> INT64
-- On SEMICOLON reduce production constant -> INT64
-- On RPAREN reduce production constant -> INT64
-- On REIFY reduce production constant -> INT64
-- On REIFIABLE reduce production constant -> INT64
-- On REFLECTABLE reduce production constant -> INT64
-- On RBRACK reduce production constant -> INT64
-- On RBRACE reduce production constant -> INT64
-- On RARROW reduce production constant -> INT64
-- On RANGE_OF reduce production constant -> INT64
-- On PRIVATE reduce production constant -> INT64
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT64
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT64
-- On PIPE_RIGHT reduce production constant -> INT64
-- On PERCENT_LBRACK reduce production constant -> INT64
-- On OPPREFIX reduce production constant -> INT64
-- On OPINFIX4 reduce production constant -> INT64
-- On OPINFIX3 reduce production constant -> INT64
-- On OPINFIX2 reduce production constant -> INT64
-- On OPINFIX1 reduce production constant -> INT64
-- On OPINFIX0d reduce production constant -> INT64
-- On OPINFIX0c reduce production constant -> INT64
-- On OPINFIX0b reduce production constant -> INT64
-- On OPINFIX0a reduce production constant -> INT64
-- On OPEN reduce production constant -> INT64
-- On OPAQUE reduce production constant -> INT64
-- On NOEXTRACT reduce production constant -> INT64
-- On NOEQUALITY reduce production constant -> INT64
-- On NEW_EFFECT reduce production constant -> INT64
-- On NEW reduce production constant -> INT64
-- On NAME reduce production constant -> INT64
-- On MODULE reduce production constant -> INT64
-- On MINUS reduce production constant -> INT64
-- On LPAREN_RPAREN reduce production constant -> INT64
-- On LPAREN reduce production constant -> INT64
-- On LOGIC reduce production constant -> INT64
-- On LET reduce production constant -> INT64
-- On LENS_PAREN_RIGHT reduce production constant -> INT64
-- On LENS_PAREN_LEFT reduce production constant -> INT64
-- On LBRACK_BAR reduce production constant -> INT64
-- On LBRACK_AT reduce production constant -> INT64
-- On LBRACK reduce production constant -> INT64
-- On LBRACE reduce production constant -> INT64
-- On IRREDUCIBLE reduce production constant -> INT64
-- On INT8 reduce production constant -> INT64
-- On INT64 reduce production constant -> INT64
-- On INT32 reduce production constant -> INT64
-- On INT16 reduce production constant -> INT64
-- On INT reduce production constant -> INT64
-- On INLINE_FOR_EXTRACTION reduce production constant -> INT64
-- On INLINE reduce production constant -> INT64
-- On INCLUDE reduce production constant -> INT64
-- On IN reduce production constant -> INT64
-- On IMPLIES reduce production constant -> INT64
-- On IFF reduce production constant -> INT64
-- On IEEE64 reduce production constant -> INT64
-- On IDENT reduce production constant -> INT64
-- On HASH reduce production constant -> INT64
-- On FSDOC_STANDALONE reduce production constant -> INT64
-- On FSDOC reduce production constant -> INT64
-- On FALSE reduce production constant -> INT64
-- On EXCEPTION reduce production constant -> INT64
-- On EQUALS reduce production constant -> INT64
-- On EOF reduce production constant -> INT64
-- On END reduce production constant -> INT64
-- On ELSE reduce production constant -> INT64
-- On EFFECT reduce production constant -> INT64
-- On DOT_LPAREN reduce production constant -> INT64
-- On DOT_LENS_PAREN_LEFT reduce production constant -> INT64
-- On DOT_LBRACK_BAR reduce production constant -> INT64
-- On DOT_LBRACK reduce production constant -> INT64
-- On DOLLAR reduce production constant -> INT64
-- On DISJUNCTION reduce production constant -> INT64
-- On DEFAULT reduce production constant -> INT64
-- On CONJUNCTION reduce production constant -> INT64
-- On COMMA reduce production constant -> INT64
-- On COLON_EQUALS reduce production constant -> INT64
-- On COLON_COLON reduce production constant -> INT64
-- On COLON reduce production constant -> INT64
-- On CHAR reduce production constant -> INT64
-- On BYTEARRAY reduce production constant -> INT64
-- On BY reduce production constant -> INT64
-- On BEGIN reduce production constant -> INT64
-- On BAR_RBRACK reduce production constant -> INT64
-- On BAR reduce production constant -> INT64
-- On BANG_LBRACE reduce production constant -> INT64
-- On BACKTICK reduce production constant -> INT64
-- On ASSUME reduce production constant -> INT64
-- On AND reduce production constant -> INT64
-- On AMP reduce production constant -> INT64
-- On ABSTRACT reduce production constant -> INT64
-- On # reduce production constant -> INT64
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> INT64
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 58:
## Known stack suffix:
## INT32
## LR(1) items:
constant -> INT32 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> INT32
-- On WHEN reduce production constant -> INT32
-- On VAL reduce production constant -> INT32
-- On UNOPTEQUALITY reduce production constant -> INT32
-- On UNIV_HASH reduce production constant -> INT32
-- On UNFOLDABLE reduce production constant -> INT32
-- On UNFOLD reduce production constant -> INT32
-- On UNDERSCORE reduce production constant -> INT32
-- On UINT8 reduce production constant -> INT32
-- On UINT64 reduce production constant -> INT32
-- On UINT32 reduce production constant -> INT32
-- On UINT16 reduce production constant -> INT32
-- On TYP_APP_GREATER reduce production constant -> INT32
-- On TYPE reduce production constant -> INT32
-- On TVAR reduce production constant -> INT32
-- On TRUE reduce production constant -> INT32
-- On TOTAL reduce production constant -> INT32
-- On THEN reduce production constant -> INT32
-- On SUB_EFFECT reduce production constant -> INT32
-- On SUBTYPE reduce production constant -> INT32
-- On SUBKIND reduce production constant -> INT32
-- On STRING reduce production constant -> INT32
-- On SQUIGGLY_RARROW reduce production constant -> INT32
-- On SPLICE reduce production constant -> INT32
-- On SET_RANGE_OF reduce production constant -> INT32
-- On SEMICOLON_SEMICOLON reduce production constant -> INT32
-- On SEMICOLON reduce production constant -> INT32
-- On RPAREN reduce production constant -> INT32
-- On REIFY reduce production constant -> INT32
-- On REIFIABLE reduce production constant -> INT32
-- On REFLECTABLE reduce production constant -> INT32
-- On RBRACK reduce production constant -> INT32
-- On RBRACE reduce production constant -> INT32
-- On RARROW reduce production constant -> INT32
-- On RANGE_OF reduce production constant -> INT32
-- On PRIVATE reduce production constant -> INT32
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT32
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT32
-- On PIPE_RIGHT reduce production constant -> INT32
-- On PERCENT_LBRACK reduce production constant -> INT32
-- On OPPREFIX reduce production constant -> INT32
-- On OPINFIX4 reduce production constant -> INT32
-- On OPINFIX3 reduce production constant -> INT32
-- On OPINFIX2 reduce production constant -> INT32
-- On OPINFIX1 reduce production constant -> INT32
-- On OPINFIX0d reduce production constant -> INT32
-- On OPINFIX0c reduce production constant -> INT32
-- On OPINFIX0b reduce production constant -> INT32
-- On OPINFIX0a reduce production constant -> INT32
-- On OPEN reduce production constant -> INT32
-- On OPAQUE reduce production constant -> INT32
-- On NOEXTRACT reduce production constant -> INT32
-- On NOEQUALITY reduce production constant -> INT32
-- On NEW_EFFECT reduce production constant -> INT32
-- On NEW reduce production constant -> INT32
-- On NAME reduce production constant -> INT32
-- On MODULE reduce production constant -> INT32
-- On MINUS reduce production constant -> INT32
-- On LPAREN_RPAREN reduce production constant -> INT32
-- On LPAREN reduce production constant -> INT32
-- On LOGIC reduce production constant -> INT32
-- On LET reduce production constant -> INT32
-- On LENS_PAREN_RIGHT reduce production constant -> INT32
-- On LENS_PAREN_LEFT reduce production constant -> INT32
-- On LBRACK_BAR reduce production constant -> INT32
-- On LBRACK_AT reduce production constant -> INT32
-- On LBRACK reduce production constant -> INT32
-- On LBRACE reduce production constant -> INT32
-- On IRREDUCIBLE reduce production constant -> INT32
-- On INT8 reduce production constant -> INT32
-- On INT64 reduce production constant -> INT32
-- On INT32 reduce production constant -> INT32
-- On INT16 reduce production constant -> INT32
-- On INT reduce production constant -> INT32
-- On INLINE_FOR_EXTRACTION reduce production constant -> INT32
-- On INLINE reduce production constant -> INT32
-- On INCLUDE reduce production constant -> INT32
-- On IN reduce production constant -> INT32
-- On IMPLIES reduce production constant -> INT32
-- On IFF reduce production constant -> INT32
-- On IEEE64 reduce production constant -> INT32
-- On IDENT reduce production constant -> INT32
-- On HASH reduce production constant -> INT32
-- On FSDOC_STANDALONE reduce production constant -> INT32
-- On FSDOC reduce production constant -> INT32
-- On FALSE reduce production constant -> INT32
-- On EXCEPTION reduce production constant -> INT32
-- On EQUALS reduce production constant -> INT32
-- On EOF reduce production constant -> INT32
-- On END reduce production constant -> INT32
-- On ELSE reduce production constant -> INT32
-- On EFFECT reduce production constant -> INT32
-- On DOT_LPAREN reduce production constant -> INT32
-- On DOT_LENS_PAREN_LEFT reduce production constant -> INT32
-- On DOT_LBRACK_BAR reduce production constant -> INT32
-- On DOT_LBRACK reduce production constant -> INT32
-- On DOLLAR reduce production constant -> INT32
-- On DISJUNCTION reduce production constant -> INT32
-- On DEFAULT reduce production constant -> INT32
-- On CONJUNCTION reduce production constant -> INT32
-- On COMMA reduce production constant -> INT32
-- On COLON_EQUALS reduce production constant -> INT32
-- On COLON_COLON reduce production constant -> INT32
-- On COLON reduce production constant -> INT32
-- On CHAR reduce production constant -> INT32
-- On BYTEARRAY reduce production constant -> INT32
-- On BY reduce production constant -> INT32
-- On BEGIN reduce production constant -> INT32
-- On BAR_RBRACK reduce production constant -> INT32
-- On BAR reduce production constant -> INT32
-- On BANG_LBRACE reduce production constant -> INT32
-- On BACKTICK reduce production constant -> INT32
-- On ASSUME reduce production constant -> INT32
-- On AND reduce production constant -> INT32
-- On AMP reduce production constant -> INT32
-- On ABSTRACT reduce production constant -> INT32
-- On # reduce production constant -> INT32
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> INT32
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 59:
## Known stack suffix:
## INT16
## LR(1) items:
constant -> INT16 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> INT16
-- On WHEN reduce production constant -> INT16
-- On VAL reduce production constant -> INT16
-- On UNOPTEQUALITY reduce production constant -> INT16
-- On UNIV_HASH reduce production constant -> INT16
-- On UNFOLDABLE reduce production constant -> INT16
-- On UNFOLD reduce production constant -> INT16
-- On UNDERSCORE reduce production constant -> INT16
-- On UINT8 reduce production constant -> INT16
-- On UINT64 reduce production constant -> INT16
-- On UINT32 reduce production constant -> INT16
-- On UINT16 reduce production constant -> INT16
-- On TYP_APP_GREATER reduce production constant -> INT16
-- On TYPE reduce production constant -> INT16
-- On TVAR reduce production constant -> INT16
-- On TRUE reduce production constant -> INT16
-- On TOTAL reduce production constant -> INT16
-- On THEN reduce production constant -> INT16
-- On SUB_EFFECT reduce production constant -> INT16
-- On SUBTYPE reduce production constant -> INT16
-- On SUBKIND reduce production constant -> INT16
-- On STRING reduce production constant -> INT16
-- On SQUIGGLY_RARROW reduce production constant -> INT16
-- On SPLICE reduce production constant -> INT16
-- On SET_RANGE_OF reduce production constant -> INT16
-- On SEMICOLON_SEMICOLON reduce production constant -> INT16
-- On SEMICOLON reduce production constant -> INT16
-- On RPAREN reduce production constant -> INT16
-- On REIFY reduce production constant -> INT16
-- On REIFIABLE reduce production constant -> INT16
-- On REFLECTABLE reduce production constant -> INT16
-- On RBRACK reduce production constant -> INT16
-- On RBRACE reduce production constant -> INT16
-- On RARROW reduce production constant -> INT16
-- On RANGE_OF reduce production constant -> INT16
-- On PRIVATE reduce production constant -> INT16
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT16
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT16
-- On PIPE_RIGHT reduce production constant -> INT16
-- On PERCENT_LBRACK reduce production constant -> INT16
-- On OPPREFIX reduce production constant -> INT16
-- On OPINFIX4 reduce production constant -> INT16
-- On OPINFIX3 reduce production constant -> INT16
-- On OPINFIX2 reduce production constant -> INT16
-- On OPINFIX1 reduce production constant -> INT16
-- On OPINFIX0d reduce production constant -> INT16
-- On OPINFIX0c reduce production constant -> INT16
-- On OPINFIX0b reduce production constant -> INT16
-- On OPINFIX0a reduce production constant -> INT16
-- On OPEN reduce production constant -> INT16
-- On OPAQUE reduce production constant -> INT16
-- On NOEXTRACT reduce production constant -> INT16
-- On NOEQUALITY reduce production constant -> INT16
-- On NEW_EFFECT reduce production constant -> INT16
-- On NEW reduce production constant -> INT16
-- On NAME reduce production constant -> INT16
-- On MODULE reduce production constant -> INT16
-- On MINUS reduce production constant -> INT16
-- On LPAREN_RPAREN reduce production constant -> INT16
-- On LPAREN reduce production constant -> INT16
-- On LOGIC reduce production constant -> INT16
-- On LET reduce production constant -> INT16
-- On LENS_PAREN_RIGHT reduce production constant -> INT16
-- On LENS_PAREN_LEFT reduce production constant -> INT16
-- On LBRACK_BAR reduce production constant -> INT16
-- On LBRACK_AT reduce production constant -> INT16
-- On LBRACK reduce production constant -> INT16
-- On LBRACE reduce production constant -> INT16
-- On IRREDUCIBLE reduce production constant -> INT16
-- On INT8 reduce production constant -> INT16
-- On INT64 reduce production constant -> INT16
-- On INT32 reduce production constant -> INT16
-- On INT16 reduce production constant -> INT16
-- On INT reduce production constant -> INT16
-- On INLINE_FOR_EXTRACTION reduce production constant -> INT16
-- On INLINE reduce production constant -> INT16
-- On INCLUDE reduce production constant -> INT16
-- On IN reduce production constant -> INT16
-- On IMPLIES reduce production constant -> INT16
-- On IFF reduce production constant -> INT16
-- On IEEE64 reduce production constant -> INT16
-- On IDENT reduce production constant -> INT16
-- On HASH reduce production constant -> INT16
-- On FSDOC_STANDALONE reduce production constant -> INT16
-- On FSDOC reduce production constant -> INT16
-- On FALSE reduce production constant -> INT16
-- On EXCEPTION reduce production constant -> INT16
-- On EQUALS reduce production constant -> INT16
-- On EOF reduce production constant -> INT16
-- On END reduce production constant -> INT16
-- On ELSE reduce production constant -> INT16
-- On EFFECT reduce production constant -> INT16
-- On DOT_LPAREN reduce production constant -> INT16
-- On DOT_LENS_PAREN_LEFT reduce production constant -> INT16
-- On DOT_LBRACK_BAR reduce production constant -> INT16
-- On DOT_LBRACK reduce production constant -> INT16
-- On DOLLAR reduce production constant -> INT16
-- On DISJUNCTION reduce production constant -> INT16
-- On DEFAULT reduce production constant -> INT16
-- On CONJUNCTION reduce production constant -> INT16
-- On COMMA reduce production constant -> INT16
-- On COLON_EQUALS reduce production constant -> INT16
-- On COLON_COLON reduce production constant -> INT16
-- On COLON reduce production constant -> INT16
-- On CHAR reduce production constant -> INT16
-- On BYTEARRAY reduce production constant -> INT16
-- On BY reduce production constant -> INT16
-- On BEGIN reduce production constant -> INT16
-- On BAR_RBRACK reduce production constant -> INT16
-- On BAR reduce production constant -> INT16
-- On BANG_LBRACE reduce production constant -> INT16
-- On BACKTICK reduce production constant -> INT16
-- On ASSUME reduce production constant -> INT16
-- On AND reduce production constant -> INT16
-- On AMP reduce production constant -> INT16
-- On ABSTRACT reduce production constant -> INT16
-- On # reduce production constant -> INT16
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> INT16
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 60:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> INT
-- On WHEN reduce production constant -> INT
-- On VAL reduce production constant -> INT
-- On UNOPTEQUALITY reduce production constant -> INT
-- On UNIV_HASH reduce production constant -> INT
-- On UNFOLDABLE reduce production constant -> INT
-- On UNFOLD reduce production constant -> INT
-- On UNDERSCORE reduce production constant -> INT
-- On UINT8 reduce production constant -> INT
-- On UINT64 reduce production constant -> INT
-- On UINT32 reduce production constant -> INT
-- On UINT16 reduce production constant -> INT
-- On TYP_APP_GREATER reduce production constant -> INT
-- On TYPE reduce production constant -> INT
-- On TVAR reduce production constant -> INT
-- On TRUE reduce production constant -> INT
-- On TOTAL reduce production constant -> INT
-- On THEN reduce production constant -> INT
-- On SUB_EFFECT reduce production constant -> INT
-- On SUBTYPE reduce production constant -> INT
-- On SUBKIND reduce production constant -> INT
-- On STRING reduce production constant -> INT
-- On SQUIGGLY_RARROW reduce production constant -> INT
-- On SPLICE reduce production constant -> INT
-- On SET_RANGE_OF reduce production constant -> INT
-- On SEMICOLON_SEMICOLON reduce production constant -> INT
-- On SEMICOLON reduce production constant -> INT
-- On RPAREN reduce production constant -> INT
-- On REIFY reduce production constant -> INT
-- On REIFIABLE reduce production constant -> INT
-- On REFLECTABLE reduce production constant -> INT
-- On RBRACK reduce production constant -> INT
-- On RBRACE reduce production constant -> INT
-- On RARROW reduce production constant -> INT
-- On RANGE_OF reduce production constant -> INT
-- On PRIVATE reduce production constant -> INT
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT
-- On PIPE_RIGHT reduce production constant -> INT
-- On PERCENT_LBRACK reduce production constant -> INT
-- On OPPREFIX reduce production constant -> INT
-- On OPINFIX4 reduce production constant -> INT
-- On OPINFIX3 reduce production constant -> INT
-- On OPINFIX2 reduce production constant -> INT
-- On OPINFIX1 reduce production constant -> INT
-- On OPINFIX0d reduce production constant -> INT
-- On OPINFIX0c reduce production constant -> INT
-- On OPINFIX0b reduce production constant -> INT
-- On OPINFIX0a reduce production constant -> INT
-- On OPEN reduce production constant -> INT
-- On OPAQUE reduce production constant -> INT
-- On NOEXTRACT reduce production constant -> INT
-- On NOEQUALITY reduce production constant -> INT
-- On NEW_EFFECT reduce production constant -> INT
-- On NEW reduce production constant -> INT
-- On NAME reduce production constant -> INT
-- On MODULE reduce production constant -> INT
-- On MINUS reduce production constant -> INT
-- On LPAREN_RPAREN reduce production constant -> INT
-- On LPAREN reduce production constant -> INT
-- On LOGIC reduce production constant -> INT
-- On LET reduce production constant -> INT
-- On LENS_PAREN_RIGHT reduce production constant -> INT
-- On LENS_PAREN_LEFT reduce production constant -> INT
-- On LBRACK_BAR reduce production constant -> INT
-- On LBRACK_AT reduce production constant -> INT
-- On LBRACK reduce production constant -> INT
-- On LBRACE reduce production constant -> INT
-- On IRREDUCIBLE reduce production constant -> INT
-- On INT8 reduce production constant -> INT
-- On INT64 reduce production constant -> INT
-- On INT32 reduce production constant -> INT
-- On INT16 reduce production constant -> INT
-- On INT reduce production constant -> INT
-- On INLINE_FOR_EXTRACTION reduce production constant -> INT
-- On INLINE reduce production constant -> INT
-- On INCLUDE reduce production constant -> INT
-- On IN reduce production constant -> INT
-- On IMPLIES reduce production constant -> INT
-- On IFF reduce production constant -> INT
-- On IEEE64 reduce production constant -> INT
-- On IDENT reduce production constant -> INT
-- On HASH reduce production constant -> INT
-- On FSDOC_STANDALONE reduce production constant -> INT
-- On FSDOC reduce production constant -> INT
-- On FALSE reduce production constant -> INT
-- On EXCEPTION reduce production constant -> INT
-- On EQUALS reduce production constant -> INT
-- On EOF reduce production constant -> INT
-- On END reduce production constant -> INT
-- On ELSE reduce production constant -> INT
-- On EFFECT reduce production constant -> INT
-- On DOT_LPAREN reduce production constant -> INT
-- On DOT_LENS_PAREN_LEFT reduce production constant -> INT
-- On DOT_LBRACK_BAR reduce production constant -> INT
-- On DOT_LBRACK reduce production constant -> INT
-- On DOLLAR reduce production constant -> INT
-- On DISJUNCTION reduce production constant -> INT
-- On DEFAULT reduce production constant -> INT
-- On CONJUNCTION reduce production constant -> INT
-- On COMMA reduce production constant -> INT
-- On COLON_EQUALS reduce production constant -> INT
-- On COLON_COLON reduce production constant -> INT
-- On COLON reduce production constant -> INT
-- On CHAR reduce production constant -> INT
-- On BYTEARRAY reduce production constant -> INT
-- On BY reduce production constant -> INT
-- On BEGIN reduce production constant -> INT
-- On BAR_RBRACK reduce production constant -> INT
-- On BAR reduce production constant -> INT
-- On BANG_LBRACE reduce production constant -> INT
-- On BACKTICK reduce production constant -> INT
-- On ASSUME reduce production constant -> INT
-- On AND reduce production constant -> INT
-- On AMP reduce production constant -> INT
-- On ABSTRACT reduce production constant -> INT
-- On # reduce production constant -> INT
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 61:
## Known stack suffix:
## IEEE64
## LR(1) items:
constant -> IEEE64 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> IEEE64
-- On WHEN reduce production constant -> IEEE64
-- On VAL reduce production constant -> IEEE64
-- On UNOPTEQUALITY reduce production constant -> IEEE64
-- On UNIV_HASH reduce production constant -> IEEE64
-- On UNFOLDABLE reduce production constant -> IEEE64
-- On UNFOLD reduce production constant -> IEEE64
-- On UNDERSCORE reduce production constant -> IEEE64
-- On UINT8 reduce production constant -> IEEE64
-- On UINT64 reduce production constant -> IEEE64
-- On UINT32 reduce production constant -> IEEE64
-- On UINT16 reduce production constant -> IEEE64
-- On TYP_APP_GREATER reduce production constant -> IEEE64
-- On TYPE reduce production constant -> IEEE64
-- On TVAR reduce production constant -> IEEE64
-- On TRUE reduce production constant -> IEEE64
-- On TOTAL reduce production constant -> IEEE64
-- On THEN reduce production constant -> IEEE64
-- On SUB_EFFECT reduce production constant -> IEEE64
-- On SUBTYPE reduce production constant -> IEEE64
-- On SUBKIND reduce production constant -> IEEE64
-- On STRING reduce production constant -> IEEE64
-- On SQUIGGLY_RARROW reduce production constant -> IEEE64
-- On SPLICE reduce production constant -> IEEE64
-- On SET_RANGE_OF reduce production constant -> IEEE64
-- On SEMICOLON_SEMICOLON reduce production constant -> IEEE64
-- On SEMICOLON reduce production constant -> IEEE64
-- On RPAREN reduce production constant -> IEEE64
-- On REIFY reduce production constant -> IEEE64
-- On REIFIABLE reduce production constant -> IEEE64
-- On REFLECTABLE reduce production constant -> IEEE64
-- On RBRACK reduce production constant -> IEEE64
-- On RBRACE reduce production constant -> IEEE64
-- On RARROW reduce production constant -> IEEE64
-- On RANGE_OF reduce production constant -> IEEE64
-- On PRIVATE reduce production constant -> IEEE64
-- On PRAGMA_SET_OPTIONS reduce production constant -> IEEE64
-- On PRAGMA_RESET_OPTIONS reduce production constant -> IEEE64
-- On PIPE_RIGHT reduce production constant -> IEEE64
-- On PERCENT_LBRACK reduce production constant -> IEEE64
-- On OPPREFIX reduce production constant -> IEEE64
-- On OPINFIX4 reduce production constant -> IEEE64
-- On OPINFIX3 reduce production constant -> IEEE64
-- On OPINFIX2 reduce production constant -> IEEE64
-- On OPINFIX1 reduce production constant -> IEEE64
-- On OPINFIX0d reduce production constant -> IEEE64
-- On OPINFIX0c reduce production constant -> IEEE64
-- On OPINFIX0b reduce production constant -> IEEE64
-- On OPINFIX0a reduce production constant -> IEEE64
-- On OPEN reduce production constant -> IEEE64
-- On OPAQUE reduce production constant -> IEEE64
-- On NOEXTRACT reduce production constant -> IEEE64
-- On NOEQUALITY reduce production constant -> IEEE64
-- On NEW_EFFECT reduce production constant -> IEEE64
-- On NEW reduce production constant -> IEEE64
-- On NAME reduce production constant -> IEEE64
-- On MODULE reduce production constant -> IEEE64
-- On MINUS reduce production constant -> IEEE64
-- On LPAREN_RPAREN reduce production constant -> IEEE64
-- On LPAREN reduce production constant -> IEEE64
-- On LOGIC reduce production constant -> IEEE64
-- On LET reduce production constant -> IEEE64
-- On LENS_PAREN_RIGHT reduce production constant -> IEEE64
-- On LENS_PAREN_LEFT reduce production constant -> IEEE64
-- On LBRACK_BAR reduce production constant -> IEEE64
-- On LBRACK_AT reduce production constant -> IEEE64
-- On LBRACK reduce production constant -> IEEE64
-- On LBRACE reduce production constant -> IEEE64
-- On IRREDUCIBLE reduce production constant -> IEEE64
-- On INT8 reduce production constant -> IEEE64
-- On INT64 reduce production constant -> IEEE64
-- On INT32 reduce production constant -> IEEE64
-- On INT16 reduce production constant -> IEEE64
-- On INT reduce production constant -> IEEE64
-- On INLINE_FOR_EXTRACTION reduce production constant -> IEEE64
-- On INLINE reduce production constant -> IEEE64
-- On INCLUDE reduce production constant -> IEEE64
-- On IN reduce production constant -> IEEE64
-- On IMPLIES reduce production constant -> IEEE64
-- On IFF reduce production constant -> IEEE64
-- On IEEE64 reduce production constant -> IEEE64
-- On IDENT reduce production constant -> IEEE64
-- On HASH reduce production constant -> IEEE64
-- On FSDOC_STANDALONE reduce production constant -> IEEE64
-- On FSDOC reduce production constant -> IEEE64
-- On FALSE reduce production constant -> IEEE64
-- On EXCEPTION reduce production constant -> IEEE64
-- On EQUALS reduce production constant -> IEEE64
-- On EOF reduce production constant -> IEEE64
-- On END reduce production constant -> IEEE64
-- On ELSE reduce production constant -> IEEE64
-- On EFFECT reduce production constant -> IEEE64
-- On DOT_LPAREN reduce production constant -> IEEE64
-- On DOT_LENS_PAREN_LEFT reduce production constant -> IEEE64
-- On DOT_LBRACK_BAR reduce production constant -> IEEE64
-- On DOT_LBRACK reduce production constant -> IEEE64
-- On DOLLAR reduce production constant -> IEEE64
-- On DISJUNCTION reduce production constant -> IEEE64
-- On DEFAULT reduce production constant -> IEEE64
-- On CONJUNCTION reduce production constant -> IEEE64
-- On COMMA reduce production constant -> IEEE64
-- On COLON_EQUALS reduce production constant -> IEEE64
-- On COLON_COLON reduce production constant -> IEEE64
-- On COLON reduce production constant -> IEEE64
-- On CHAR reduce production constant -> IEEE64
-- On BYTEARRAY reduce production constant -> IEEE64
-- On BY reduce production constant -> IEEE64
-- On BEGIN reduce production constant -> IEEE64
-- On BAR_RBRACK reduce production constant -> IEEE64
-- On BAR reduce production constant -> IEEE64
-- On BANG_LBRACE reduce production constant -> IEEE64
-- On BACKTICK reduce production constant -> IEEE64
-- On ASSUME reduce production constant -> IEEE64
-- On AND reduce production constant -> IEEE64
-- On AMP reduce production constant -> IEEE64
-- On ABSTRACT reduce production constant -> IEEE64
-- On # reduce production constant -> IEEE64
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> IEEE64
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 62:
## Known stack suffix:
## IDENT
## LR(1) items:
lident -> IDENT . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production lident -> IDENT
-- On WHEN reduce production lident -> IDENT
-- On VAL reduce production lident -> IDENT
-- On UNOPTEQUALITY reduce production lident -> IDENT
-- On UNIV_HASH reduce production lident -> IDENT
-- On UNFOLDABLE reduce production lident -> IDENT
-- On UNFOLD reduce production lident -> IDENT
-- On UNDERSCORE reduce production lident -> IDENT
-- On UINT8 reduce production lident -> IDENT
-- On UINT64 reduce production lident -> IDENT
-- On UINT32 reduce production lident -> IDENT
-- On UINT16 reduce production lident -> IDENT
-- On TYP_APP_LESS reduce production lident -> IDENT
-- On TYP_APP_GREATER reduce production lident -> IDENT
-- On TYPE reduce production lident -> IDENT
-- On TVAR reduce production lident -> IDENT
-- On TRUE reduce production lident -> IDENT
-- On TOTAL reduce production lident -> IDENT
-- On THEN reduce production lident -> IDENT
-- On SUB_EFFECT reduce production lident -> IDENT
-- On SUBTYPE reduce production lident -> IDENT
-- On SUBKIND reduce production lident -> IDENT
-- On STRING reduce production lident -> IDENT
-- On SQUIGGLY_RARROW reduce production lident -> IDENT
-- On SPLICE reduce production lident -> IDENT
-- On SET_RANGE_OF reduce production lident -> IDENT
-- On SEMICOLON_SEMICOLON reduce production lident -> IDENT
-- On SEMICOLON reduce production lident -> IDENT
-- On RPAREN reduce production lident -> IDENT
-- On REIFY reduce production lident -> IDENT
-- On REIFIABLE reduce production lident -> IDENT
-- On REFLECTABLE reduce production lident -> IDENT
-- On RBRACK reduce production lident -> IDENT
-- On RBRACE reduce production lident -> IDENT
-- On RARROW reduce production lident -> IDENT
-- On RANGE_OF reduce production lident -> IDENT
-- On PRIVATE reduce production lident -> IDENT
-- On PRAGMA_SET_OPTIONS reduce production lident -> IDENT
-- On PRAGMA_RESET_OPTIONS reduce production lident -> IDENT
-- On PIPE_RIGHT reduce production lident -> IDENT
-- On PERCENT_LBRACK reduce production lident -> IDENT
-- On OPPREFIX reduce production lident -> IDENT
-- On OPINFIX4 reduce production lident -> IDENT
-- On OPINFIX3 reduce production lident -> IDENT
-- On OPINFIX2 reduce production lident -> IDENT
-- On OPINFIX1 reduce production lident -> IDENT
-- On OPINFIX0d reduce production lident -> IDENT
-- On OPINFIX0c reduce production lident -> IDENT
-- On OPINFIX0b reduce production lident -> IDENT
-- On OPINFIX0a reduce production lident -> IDENT
-- On OPEN reduce production lident -> IDENT
-- On OPAQUE reduce production lident -> IDENT
-- On NOEXTRACT reduce production lident -> IDENT
-- On NOEQUALITY reduce production lident -> IDENT
-- On NEW_EFFECT reduce production lident -> IDENT
-- On NEW reduce production lident -> IDENT
-- On NAME reduce production lident -> IDENT
-- On MODULE reduce production lident -> IDENT
-- On MINUS reduce production lident -> IDENT
-- On LPAREN_RPAREN reduce production lident -> IDENT
-- On LPAREN reduce production lident -> IDENT
-- On LOGIC reduce production lident -> IDENT
-- On LET reduce production lident -> IDENT
-- On LENS_PAREN_RIGHT reduce production lident -> IDENT
-- On LENS_PAREN_LEFT reduce production lident -> IDENT
-- On LBRACK_BAR reduce production lident -> IDENT
-- On LBRACK_AT reduce production lident -> IDENT
-- On LBRACK reduce production lident -> IDENT
-- On LBRACE reduce production lident -> IDENT
-- On IRREDUCIBLE reduce production lident -> IDENT
-- On INT8 reduce production lident -> IDENT
-- On INT64 reduce production lident -> IDENT
-- On INT32 reduce production lident -> IDENT
-- On INT16 reduce production lident -> IDENT
-- On INT reduce production lident -> IDENT
-- On INLINE_FOR_EXTRACTION reduce production lident -> IDENT
-- On INLINE reduce production lident -> IDENT
-- On INCLUDE reduce production lident -> IDENT
-- On IN reduce production lident -> IDENT
-- On IMPLIES reduce production lident -> IDENT
-- On IFF reduce production lident -> IDENT
-- On IEEE64 reduce production lident -> IDENT
-- On IDENT reduce production lident -> IDENT
-- On HASH reduce production lident -> IDENT
-- On FSDOC_STANDALONE reduce production lident -> IDENT
-- On FSDOC reduce production lident -> IDENT
-- On FALSE reduce production lident -> IDENT
-- On EXCEPTION reduce production lident -> IDENT
-- On EQUALS reduce production lident -> IDENT
-- On EOF reduce production lident -> IDENT
-- On END reduce production lident -> IDENT
-- On ELSE reduce production lident -> IDENT
-- On EFFECT reduce production lident -> IDENT
-- On DOT_LPAREN reduce production lident -> IDENT
-- On DOT_LENS_PAREN_LEFT reduce production lident -> IDENT
-- On DOT_LBRACK_BAR reduce production lident -> IDENT
-- On DOT_LBRACK reduce production lident -> IDENT
-- On DOT reduce production lident -> IDENT
-- On DOLLAR reduce production lident -> IDENT
-- On DISJUNCTION reduce production lident -> IDENT
-- On DEFAULT reduce production lident -> IDENT
-- On CONJUNCTION reduce production lident -> IDENT
-- On COMMA reduce production lident -> IDENT
-- On COLON_EQUALS reduce production lident -> IDENT
-- On COLON_COLON reduce production lident -> IDENT
-- On COLON reduce production lident -> IDENT
-- On CHAR reduce production lident -> IDENT
-- On BYTEARRAY reduce production lident -> IDENT
-- On BY reduce production lident -> IDENT
-- On BEGIN reduce production lident -> IDENT
-- On BAR_RBRACK reduce production lident -> IDENT
-- On BAR reduce production lident -> IDENT
-- On BANG_LBRACE reduce production lident -> IDENT
-- On BACKTICK reduce production lident -> IDENT
-- On ASSUME reduce production lident -> IDENT
-- On AND reduce production lident -> IDENT
-- On AMP reduce production lident -> IDENT
-- On ABSTRACT reduce production lident -> IDENT
-- On # reduce production lident -> IDENT
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production lident -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 63:
## Known stack suffix:
## FALSE
## LR(1) items:
constant -> FALSE . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> FALSE
-- On WHEN reduce production constant -> FALSE
-- On VAL reduce production constant -> FALSE
-- On UNOPTEQUALITY reduce production constant -> FALSE
-- On UNIV_HASH reduce production constant -> FALSE
-- On UNFOLDABLE reduce production constant -> FALSE
-- On UNFOLD reduce production constant -> FALSE
-- On UNDERSCORE reduce production constant -> FALSE
-- On UINT8 reduce production constant -> FALSE
-- On UINT64 reduce production constant -> FALSE
-- On UINT32 reduce production constant -> FALSE
-- On UINT16 reduce production constant -> FALSE
-- On TYP_APP_GREATER reduce production constant -> FALSE
-- On TYPE reduce production constant -> FALSE
-- On TVAR reduce production constant -> FALSE
-- On TRUE reduce production constant -> FALSE
-- On TOTAL reduce production constant -> FALSE
-- On THEN reduce production constant -> FALSE
-- On SUB_EFFECT reduce production constant -> FALSE
-- On SUBTYPE reduce production constant -> FALSE
-- On SUBKIND reduce production constant -> FALSE
-- On STRING reduce production constant -> FALSE
-- On SQUIGGLY_RARROW reduce production constant -> FALSE
-- On SPLICE reduce production constant -> FALSE
-- On SET_RANGE_OF reduce production constant -> FALSE
-- On SEMICOLON_SEMICOLON reduce production constant -> FALSE
-- On SEMICOLON reduce production constant -> FALSE
-- On RPAREN reduce production constant -> FALSE
-- On REIFY reduce production constant -> FALSE
-- On REIFIABLE reduce production constant -> FALSE
-- On REFLECTABLE reduce production constant -> FALSE
-- On RBRACK reduce production constant -> FALSE
-- On RBRACE reduce production constant -> FALSE
-- On RARROW reduce production constant -> FALSE
-- On RANGE_OF reduce production constant -> FALSE
-- On PRIVATE reduce production constant -> FALSE
-- On PRAGMA_SET_OPTIONS reduce production constant -> FALSE
-- On PRAGMA_RESET_OPTIONS reduce production constant -> FALSE
-- On PIPE_RIGHT reduce production constant -> FALSE
-- On PERCENT_LBRACK reduce production constant -> FALSE
-- On OPPREFIX reduce production constant -> FALSE
-- On OPINFIX4 reduce production constant -> FALSE
-- On OPINFIX3 reduce production constant -> FALSE
-- On OPINFIX2 reduce production constant -> FALSE
-- On OPINFIX1 reduce production constant -> FALSE
-- On OPINFIX0d reduce production constant -> FALSE
-- On OPINFIX0c reduce production constant -> FALSE
-- On OPINFIX0b reduce production constant -> FALSE
-- On OPINFIX0a reduce production constant -> FALSE
-- On OPEN reduce production constant -> FALSE
-- On OPAQUE reduce production constant -> FALSE
-- On NOEXTRACT reduce production constant -> FALSE
-- On NOEQUALITY reduce production constant -> FALSE
-- On NEW_EFFECT reduce production constant -> FALSE
-- On NEW reduce production constant -> FALSE
-- On NAME reduce production constant -> FALSE
-- On MODULE reduce production constant -> FALSE
-- On MINUS reduce production constant -> FALSE
-- On LPAREN_RPAREN reduce production constant -> FALSE
-- On LPAREN reduce production constant -> FALSE
-- On LOGIC reduce production constant -> FALSE
-- On LET reduce production constant -> FALSE
-- On LENS_PAREN_RIGHT reduce production constant -> FALSE
-- On LENS_PAREN_LEFT reduce production constant -> FALSE
-- On LBRACK_BAR reduce production constant -> FALSE
-- On LBRACK_AT reduce production constant -> FALSE
-- On LBRACK reduce production constant -> FALSE
-- On LBRACE reduce production constant -> FALSE
-- On IRREDUCIBLE reduce production constant -> FALSE
-- On INT8 reduce production constant -> FALSE
-- On INT64 reduce production constant -> FALSE
-- On INT32 reduce production constant -> FALSE
-- On INT16 reduce production constant -> FALSE
-- On INT reduce production constant -> FALSE
-- On INLINE_FOR_EXTRACTION reduce production constant -> FALSE
-- On INLINE reduce production constant -> FALSE
-- On INCLUDE reduce production constant -> FALSE
-- On IN reduce production constant -> FALSE
-- On IMPLIES reduce production constant -> FALSE
-- On IFF reduce production constant -> FALSE
-- On IEEE64 reduce production constant -> FALSE
-- On IDENT reduce production constant -> FALSE
-- On HASH reduce production constant -> FALSE
-- On FSDOC_STANDALONE reduce production constant -> FALSE
-- On FSDOC reduce production constant -> FALSE
-- On FALSE reduce production constant -> FALSE
-- On EXCEPTION reduce production constant -> FALSE
-- On EQUALS reduce production constant -> FALSE
-- On EOF reduce production constant -> FALSE
-- On END reduce production constant -> FALSE
-- On ELSE reduce production constant -> FALSE
-- On EFFECT reduce production constant -> FALSE
-- On DOT_LPAREN reduce production constant -> FALSE
-- On DOT_LENS_PAREN_LEFT reduce production constant -> FALSE
-- On DOT_LBRACK_BAR reduce production constant -> FALSE
-- On DOT_LBRACK reduce production constant -> FALSE
-- On DOLLAR reduce production constant -> FALSE
-- On DISJUNCTION reduce production constant -> FALSE
-- On DEFAULT reduce production constant -> FALSE
-- On CONJUNCTION reduce production constant -> FALSE
-- On COMMA reduce production constant -> FALSE
-- On COLON_EQUALS reduce production constant -> FALSE
-- On COLON_COLON reduce production constant -> FALSE
-- On COLON reduce production constant -> FALSE
-- On CHAR reduce production constant -> FALSE
-- On BYTEARRAY reduce production constant -> FALSE
-- On BY reduce production constant -> FALSE
-- On BEGIN reduce production constant -> FALSE
-- On BAR_RBRACK reduce production constant -> FALSE
-- On BAR reduce production constant -> FALSE
-- On BANG_LBRACE reduce production constant -> FALSE
-- On BACKTICK reduce production constant -> FALSE
-- On ASSUME reduce production constant -> FALSE
-- On AND reduce production constant -> FALSE
-- On AMP reduce production constant -> FALSE
-- On ABSTRACT reduce production constant -> FALSE
-- On # reduce production constant -> FALSE
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> FALSE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 64:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> CHAR
-- On WHEN reduce production constant -> CHAR
-- On VAL reduce production constant -> CHAR
-- On UNOPTEQUALITY reduce production constant -> CHAR
-- On UNIV_HASH reduce production constant -> CHAR
-- On UNFOLDABLE reduce production constant -> CHAR
-- On UNFOLD reduce production constant -> CHAR
-- On UNDERSCORE reduce production constant -> CHAR
-- On UINT8 reduce production constant -> CHAR
-- On UINT64 reduce production constant -> CHAR
-- On UINT32 reduce production constant -> CHAR
-- On UINT16 reduce production constant -> CHAR
-- On TYP_APP_GREATER reduce production constant -> CHAR
-- On TYPE reduce production constant -> CHAR
-- On TVAR reduce production constant -> CHAR
-- On TRUE reduce production constant -> CHAR
-- On TOTAL reduce production constant -> CHAR
-- On THEN reduce production constant -> CHAR
-- On SUB_EFFECT reduce production constant -> CHAR
-- On SUBTYPE reduce production constant -> CHAR
-- On SUBKIND reduce production constant -> CHAR
-- On STRING reduce production constant -> CHAR
-- On SQUIGGLY_RARROW reduce production constant -> CHAR
-- On SPLICE reduce production constant -> CHAR
-- On SET_RANGE_OF reduce production constant -> CHAR
-- On SEMICOLON_SEMICOLON reduce production constant -> CHAR
-- On SEMICOLON reduce production constant -> CHAR
-- On RPAREN reduce production constant -> CHAR
-- On REIFY reduce production constant -> CHAR
-- On REIFIABLE reduce production constant -> CHAR
-- On REFLECTABLE reduce production constant -> CHAR
-- On RBRACK reduce production constant -> CHAR
-- On RBRACE reduce production constant -> CHAR
-- On RARROW reduce production constant -> CHAR
-- On RANGE_OF reduce production constant -> CHAR
-- On PRIVATE reduce production constant -> CHAR
-- On PRAGMA_SET_OPTIONS reduce production constant -> CHAR
-- On PRAGMA_RESET_OPTIONS reduce production constant -> CHAR
-- On PIPE_RIGHT reduce production constant -> CHAR
-- On PERCENT_LBRACK reduce production constant -> CHAR
-- On OPPREFIX reduce production constant -> CHAR
-- On OPINFIX4 reduce production constant -> CHAR
-- On OPINFIX3 reduce production constant -> CHAR
-- On OPINFIX2 reduce production constant -> CHAR
-- On OPINFIX1 reduce production constant -> CHAR
-- On OPINFIX0d reduce production constant -> CHAR
-- On OPINFIX0c reduce production constant -> CHAR
-- On OPINFIX0b reduce production constant -> CHAR
-- On OPINFIX0a reduce production constant -> CHAR
-- On OPEN reduce production constant -> CHAR
-- On OPAQUE reduce production constant -> CHAR
-- On NOEXTRACT reduce production constant -> CHAR
-- On NOEQUALITY reduce production constant -> CHAR
-- On NEW_EFFECT reduce production constant -> CHAR
-- On NEW reduce production constant -> CHAR
-- On NAME reduce production constant -> CHAR
-- On MODULE reduce production constant -> CHAR
-- On MINUS reduce production constant -> CHAR
-- On LPAREN_RPAREN reduce production constant -> CHAR
-- On LPAREN reduce production constant -> CHAR
-- On LOGIC reduce production constant -> CHAR
-- On LET reduce production constant -> CHAR
-- On LENS_PAREN_RIGHT reduce production constant -> CHAR
-- On LENS_PAREN_LEFT reduce production constant -> CHAR
-- On LBRACK_BAR reduce production constant -> CHAR
-- On LBRACK_AT reduce production constant -> CHAR
-- On LBRACK reduce production constant -> CHAR
-- On LBRACE reduce production constant -> CHAR
-- On IRREDUCIBLE reduce production constant -> CHAR
-- On INT8 reduce production constant -> CHAR
-- On INT64 reduce production constant -> CHAR
-- On INT32 reduce production constant -> CHAR
-- On INT16 reduce production constant -> CHAR
-- On INT reduce production constant -> CHAR
-- On INLINE_FOR_EXTRACTION reduce production constant -> CHAR
-- On INLINE reduce production constant -> CHAR
-- On INCLUDE reduce production constant -> CHAR
-- On IN reduce production constant -> CHAR
-- On IMPLIES reduce production constant -> CHAR
-- On IFF reduce production constant -> CHAR
-- On IEEE64 reduce production constant -> CHAR
-- On IDENT reduce production constant -> CHAR
-- On HASH reduce production constant -> CHAR
-- On FSDOC_STANDALONE reduce production constant -> CHAR
-- On FSDOC reduce production constant -> CHAR
-- On FALSE reduce production constant -> CHAR
-- On EXCEPTION reduce production constant -> CHAR
-- On EQUALS reduce production constant -> CHAR
-- On EOF reduce production constant -> CHAR
-- On END reduce production constant -> CHAR
-- On ELSE reduce production constant -> CHAR
-- On EFFECT reduce production constant -> CHAR
-- On DOT_LPAREN reduce production constant -> CHAR
-- On DOT_LENS_PAREN_LEFT reduce production constant -> CHAR
-- On DOT_LBRACK_BAR reduce production constant -> CHAR
-- On DOT_LBRACK reduce production constant -> CHAR
-- On DOLLAR reduce production constant -> CHAR
-- On DISJUNCTION reduce production constant -> CHAR
-- On DEFAULT reduce production constant -> CHAR
-- On CONJUNCTION reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLON_EQUALS reduce production constant -> CHAR
-- On COLON_COLON reduce production constant -> CHAR
-- On COLON reduce production constant -> CHAR
-- On CHAR reduce production constant -> CHAR
-- On BYTEARRAY reduce production constant -> CHAR
-- On BY reduce production constant -> CHAR
-- On BEGIN reduce production constant -> CHAR
-- On BAR_RBRACK reduce production constant -> CHAR
-- On BAR reduce production constant -> CHAR
-- On BANG_LBRACE reduce production constant -> CHAR
-- On BACKTICK reduce production constant -> CHAR
-- On ASSUME reduce production constant -> CHAR
-- On AND reduce production constant -> CHAR
-- On AMP reduce production constant -> CHAR
-- On ABSTRACT reduce production constant -> CHAR
-- On # reduce production constant -> CHAR
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> CHAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 65:
## Known stack suffix:
## BYTEARRAY
## LR(1) items:
constant -> BYTEARRAY . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production constant -> BYTEARRAY
-- On WHEN reduce production constant -> BYTEARRAY
-- On VAL reduce production constant -> BYTEARRAY
-- On UNOPTEQUALITY reduce production constant -> BYTEARRAY
-- On UNIV_HASH reduce production constant -> BYTEARRAY
-- On UNFOLDABLE reduce production constant -> BYTEARRAY
-- On UNFOLD reduce production constant -> BYTEARRAY
-- On UNDERSCORE reduce production constant -> BYTEARRAY
-- On UINT8 reduce production constant -> BYTEARRAY
-- On UINT64 reduce production constant -> BYTEARRAY
-- On UINT32 reduce production constant -> BYTEARRAY
-- On UINT16 reduce production constant -> BYTEARRAY
-- On TYP_APP_GREATER reduce production constant -> BYTEARRAY
-- On TYPE reduce production constant -> BYTEARRAY
-- On TVAR reduce production constant -> BYTEARRAY
-- On TRUE reduce production constant -> BYTEARRAY
-- On TOTAL reduce production constant -> BYTEARRAY
-- On THEN reduce production constant -> BYTEARRAY
-- On SUB_EFFECT reduce production constant -> BYTEARRAY
-- On SUBTYPE reduce production constant -> BYTEARRAY
-- On SUBKIND reduce production constant -> BYTEARRAY
-- On STRING reduce production constant -> BYTEARRAY
-- On SQUIGGLY_RARROW reduce production constant -> BYTEARRAY
-- On SPLICE reduce production constant -> BYTEARRAY
-- On SET_RANGE_OF reduce production constant -> BYTEARRAY
-- On SEMICOLON_SEMICOLON reduce production constant -> BYTEARRAY
-- On SEMICOLON reduce production constant -> BYTEARRAY
-- On RPAREN reduce production constant -> BYTEARRAY
-- On REIFY reduce production constant -> BYTEARRAY
-- On REIFIABLE reduce production constant -> BYTEARRAY
-- On REFLECTABLE reduce production constant -> BYTEARRAY
-- On RBRACK reduce production constant -> BYTEARRAY
-- On RBRACE reduce production constant -> BYTEARRAY
-- On RARROW reduce production constant -> BYTEARRAY
-- On RANGE_OF reduce production constant -> BYTEARRAY
-- On PRIVATE reduce production constant -> BYTEARRAY
-- On PRAGMA_SET_OPTIONS reduce production constant -> BYTEARRAY
-- On PRAGMA_RESET_OPTIONS reduce production constant -> BYTEARRAY
-- On PIPE_RIGHT reduce production constant -> BYTEARRAY
-- On PERCENT_LBRACK reduce production constant -> BYTEARRAY
-- On OPPREFIX reduce production constant -> BYTEARRAY
-- On OPINFIX4 reduce production constant -> BYTEARRAY
-- On OPINFIX3 reduce production constant -> BYTEARRAY
-- On OPINFIX2 reduce production constant -> BYTEARRAY
-- On OPINFIX1 reduce production constant -> BYTEARRAY
-- On OPINFIX0d reduce production constant -> BYTEARRAY
-- On OPINFIX0c reduce production constant -> BYTEARRAY
-- On OPINFIX0b reduce production constant -> BYTEARRAY
-- On OPINFIX0a reduce production constant -> BYTEARRAY
-- On OPEN reduce production constant -> BYTEARRAY
-- On OPAQUE reduce production constant -> BYTEARRAY
-- On NOEXTRACT reduce production constant -> BYTEARRAY
-- On NOEQUALITY reduce production constant -> BYTEARRAY
-- On NEW_EFFECT reduce production constant -> BYTEARRAY
-- On NEW reduce production constant -> BYTEARRAY
-- On NAME reduce production constant -> BYTEARRAY
-- On MODULE reduce production constant -> BYTEARRAY
-- On MINUS reduce production constant -> BYTEARRAY
-- On LPAREN_RPAREN reduce production constant -> BYTEARRAY
-- On LPAREN reduce production constant -> BYTEARRAY
-- On LOGIC reduce production constant -> BYTEARRAY
-- On LET reduce production constant -> BYTEARRAY
-- On LENS_PAREN_RIGHT reduce production constant -> BYTEARRAY
-- On LENS_PAREN_LEFT reduce production constant -> BYTEARRAY
-- On LBRACK_BAR reduce production constant -> BYTEARRAY
-- On LBRACK_AT reduce production constant -> BYTEARRAY
-- On LBRACK reduce production constant -> BYTEARRAY
-- On LBRACE reduce production constant -> BYTEARRAY
-- On IRREDUCIBLE reduce production constant -> BYTEARRAY
-- On INT8 reduce production constant -> BYTEARRAY
-- On INT64 reduce production constant -> BYTEARRAY
-- On INT32 reduce production constant -> BYTEARRAY
-- On INT16 reduce production constant -> BYTEARRAY
-- On INT reduce production constant -> BYTEARRAY
-- On INLINE_FOR_EXTRACTION reduce production constant -> BYTEARRAY
-- On INLINE reduce production constant -> BYTEARRAY
-- On INCLUDE reduce production constant -> BYTEARRAY
-- On IN reduce production constant -> BYTEARRAY
-- On IMPLIES reduce production constant -> BYTEARRAY
-- On IFF reduce production constant -> BYTEARRAY
-- On IEEE64 reduce production constant -> BYTEARRAY
-- On IDENT reduce production constant -> BYTEARRAY
-- On HASH reduce production constant -> BYTEARRAY
-- On FSDOC_STANDALONE reduce production constant -> BYTEARRAY
-- On FSDOC reduce production constant -> BYTEARRAY
-- On FALSE reduce production constant -> BYTEARRAY
-- On EXCEPTION reduce production constant -> BYTEARRAY
-- On EQUALS reduce production constant -> BYTEARRAY
-- On EOF reduce production constant -> BYTEARRAY
-- On END reduce production constant -> BYTEARRAY
-- On ELSE reduce production constant -> BYTEARRAY
-- On EFFECT reduce production constant -> BYTEARRAY
-- On DOT_LPAREN reduce production constant -> BYTEARRAY
-- On DOT_LENS_PAREN_LEFT reduce production constant -> BYTEARRAY
-- On DOT_LBRACK_BAR reduce production constant -> BYTEARRAY
-- On DOT_LBRACK reduce production constant -> BYTEARRAY
-- On DOLLAR reduce production constant -> BYTEARRAY
-- On DISJUNCTION reduce production constant -> BYTEARRAY
-- On DEFAULT reduce production constant -> BYTEARRAY
-- On CONJUNCTION reduce production constant -> BYTEARRAY
-- On COMMA reduce production constant -> BYTEARRAY
-- On COLON_EQUALS reduce production constant -> BYTEARRAY
-- On COLON_COLON reduce production constant -> BYTEARRAY
-- On COLON reduce production constant -> BYTEARRAY
-- On CHAR reduce production constant -> BYTEARRAY
-- On BYTEARRAY reduce production constant -> BYTEARRAY
-- On BY reduce production constant -> BYTEARRAY
-- On BEGIN reduce production constant -> BYTEARRAY
-- On BAR_RBRACK reduce production constant -> BYTEARRAY
-- On BAR reduce production constant -> BYTEARRAY
-- On BANG_LBRACE reduce production constant -> BYTEARRAY
-- On BACKTICK reduce production constant -> BYTEARRAY
-- On ASSUME reduce production constant -> BYTEARRAY
-- On AND reduce production constant -> BYTEARRAY
-- On AMP reduce production constant -> BYTEARRAY
-- On ABSTRACT reduce production constant -> BYTEARRAY
-- On # reduce production constant -> BYTEARRAY
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production constant -> BYTEARRAY
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 66:
## Known stack suffix:
## BEGIN
## LR(1) items:
atomicTermNotQUident -> BEGIN . term END [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 643
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 67:
## Known stack suffix:
## LET
## LR(1) items:
noSeqTerm -> LET . OPEN quident IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> LET . letqualifier letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On REC shift to state 68
-- On OPEN shift to state 69
-- On MUTABLE shift to state 400
-- On letqualifier shift to state 638
## Reductions:
-- On UNDERSCORE reduce production letqualifier ->
-- On UINT8 reduce production letqualifier ->
-- On UINT64 reduce production letqualifier ->
-- On UINT32 reduce production letqualifier ->
-- On UINT16 reduce production letqualifier ->
-- On TVAR reduce production letqualifier ->
-- On TRUE reduce production letqualifier ->
-- On STRING reduce production letqualifier ->
-- On SQUIGGLY_RARROW reduce production letqualifier ->
-- On SET_RANGE_OF reduce production letqualifier ->
-- On REIFY reduce production letqualifier ->
-- On RANGE_OF reduce production letqualifier ->
-- On NAME reduce production letqualifier ->
-- On LPAREN_RPAREN reduce production letqualifier ->
-- On LPAREN reduce production letqualifier ->
-- On LENS_PAREN_LEFT reduce production letqualifier ->
-- On LBRACK reduce production letqualifier ->
-- On LBRACE reduce production letqualifier ->
-- On INT8 reduce production letqualifier ->
-- On INT64 reduce production letqualifier ->
-- On INT32 reduce production letqualifier ->
-- On INT16 reduce production letqualifier ->
-- On INT reduce production letqualifier ->
-- On IEEE64 reduce production letqualifier ->
-- On IDENT reduce production letqualifier ->
-- On HASH reduce production letqualifier ->
-- On FALSE reduce production letqualifier ->
-- On DOLLAR reduce production letqualifier ->
-- On CHAR reduce production letqualifier ->
-- On BYTEARRAY reduce production letqualifier ->

State 68:
## Known stack suffix:
## REC
## LR(1) items:
letqualifier -> REC . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production letqualifier -> REC
-- On UINT8 reduce production letqualifier -> REC
-- On UINT64 reduce production letqualifier -> REC
-- On UINT32 reduce production letqualifier -> REC
-- On UINT16 reduce production letqualifier -> REC
-- On TVAR reduce production letqualifier -> REC
-- On TRUE reduce production letqualifier -> REC
-- On STRING reduce production letqualifier -> REC
-- On SQUIGGLY_RARROW reduce production letqualifier -> REC
-- On SET_RANGE_OF reduce production letqualifier -> REC
-- On REIFY reduce production letqualifier -> REC
-- On RANGE_OF reduce production letqualifier -> REC
-- On NAME reduce production letqualifier -> REC
-- On LPAREN_RPAREN reduce production letqualifier -> REC
-- On LPAREN reduce production letqualifier -> REC
-- On LENS_PAREN_LEFT reduce production letqualifier -> REC
-- On LBRACK reduce production letqualifier -> REC
-- On LBRACE reduce production letqualifier -> REC
-- On INT8 reduce production letqualifier -> REC
-- On INT64 reduce production letqualifier -> REC
-- On INT32 reduce production letqualifier -> REC
-- On INT16 reduce production letqualifier -> REC
-- On INT reduce production letqualifier -> REC
-- On IEEE64 reduce production letqualifier -> REC
-- On IDENT reduce production letqualifier -> REC
-- On HASH reduce production letqualifier -> REC
-- On FALSE reduce production letqualifier -> REC
-- On DOLLAR reduce production letqualifier -> REC
-- On CHAR reduce production letqualifier -> REC
-- On BYTEARRAY reduce production letqualifier -> REC

State 69:
## Known stack suffix:
## LET OPEN
## LR(1) items:
noSeqTerm -> LET OPEN . quident IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 73
-- On path(uident) shift to state 100
## Reductions:

State 70:
## Known stack suffix:
## uident
## LR(1) items:
path(uident) -> uident . [ WHEN VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ABSTRACT ]
path(uident) -> uident . DOT path(uident) [ WHEN VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ABSTRACT ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On WHEN reduce production path(uident) -> uident
-- On VAL reduce production path(uident) -> uident
-- On UNOPTEQUALITY reduce production path(uident) -> uident
-- On UNFOLDABLE reduce production path(uident) -> uident
-- On UNFOLD reduce production path(uident) -> uident
-- On UNDERSCORE reduce production path(uident) -> uident
-- On UINT8 reduce production path(uident) -> uident
-- On UINT64 reduce production path(uident) -> uident
-- On UINT32 reduce production path(uident) -> uident
-- On UINT16 reduce production path(uident) -> uident
-- On TYPE reduce production path(uident) -> uident
-- On TVAR reduce production path(uident) -> uident
-- On TRUE reduce production path(uident) -> uident
-- On TOTAL reduce production path(uident) -> uident
-- On SUB_EFFECT reduce production path(uident) -> uident
-- On STRING reduce production path(uident) -> uident
-- On SQUIGGLY_RARROW reduce production path(uident) -> uident
-- On SPLICE reduce production path(uident) -> uident
-- On SET_RANGE_OF reduce production path(uident) -> uident
-- On SEMICOLON reduce production path(uident) -> uident
-- On RPAREN reduce production path(uident) -> uident
-- On REIFY reduce production path(uident) -> uident
-- On REIFIABLE reduce production path(uident) -> uident
-- On REFLECTABLE reduce production path(uident) -> uident
-- On RBRACK reduce production path(uident) -> uident
-- On RBRACE reduce production path(uident) -> uident
-- On RARROW reduce production path(uident) -> uident
-- On RANGE_OF reduce production path(uident) -> uident
-- On PRIVATE reduce production path(uident) -> uident
-- On PRAGMA_SET_OPTIONS reduce production path(uident) -> uident
-- On PRAGMA_RESET_OPTIONS reduce production path(uident) -> uident
-- On OPEN reduce production path(uident) -> uident
-- On OPAQUE reduce production path(uident) -> uident
-- On NOEXTRACT reduce production path(uident) -> uident
-- On NOEQUALITY reduce production path(uident) -> uident
-- On NEW_EFFECT reduce production path(uident) -> uident
-- On NEW reduce production path(uident) -> uident
-- On NAME reduce production path(uident) -> uident
-- On MODULE reduce production path(uident) -> uident
-- On LPAREN_RPAREN reduce production path(uident) -> uident
-- On LPAREN reduce production path(uident) -> uident
-- On LOGIC reduce production path(uident) -> uident
-- On LET reduce production path(uident) -> uident
-- On LENS_PAREN_RIGHT reduce production path(uident) -> uident
-- On LENS_PAREN_LEFT reduce production path(uident) -> uident
-- On LBRACK_AT reduce production path(uident) -> uident
-- On LBRACK reduce production path(uident) -> uident
-- On LBRACE reduce production path(uident) -> uident
-- On IRREDUCIBLE reduce production path(uident) -> uident
-- On INT8 reduce production path(uident) -> uident
-- On INT64 reduce production path(uident) -> uident
-- On INT32 reduce production path(uident) -> uident
-- On INT16 reduce production path(uident) -> uident
-- On INT reduce production path(uident) -> uident
-- On INLINE_FOR_EXTRACTION reduce production path(uident) -> uident
-- On INLINE reduce production path(uident) -> uident
-- On INCLUDE reduce production path(uident) -> uident
-- On IN reduce production path(uident) -> uident
-- On IEEE64 reduce production path(uident) -> uident
-- On IDENT reduce production path(uident) -> uident
-- On HASH reduce production path(uident) -> uident
-- On FSDOC_STANDALONE reduce production path(uident) -> uident
-- On FSDOC reduce production path(uident) -> uident
-- On FALSE reduce production path(uident) -> uident
-- On EXCEPTION reduce production path(uident) -> uident
-- On EQUALS reduce production path(uident) -> uident
-- On EOF reduce production path(uident) -> uident
-- On EFFECT reduce production path(uident) -> uident
-- On DOLLAR reduce production path(uident) -> uident
-- On DEFAULT reduce production path(uident) -> uident
-- On COMMA reduce production path(uident) -> uident
-- On COLON_COLON reduce production path(uident) -> uident
-- On COLON reduce production path(uident) -> uident
-- On CHAR reduce production path(uident) -> uident
-- On BYTEARRAY reduce production path(uident) -> uident
-- On BAR reduce production path(uident) -> uident
-- On ASSUME reduce production path(uident) -> uident
-- On ABSTRACT reduce production path(uident) -> uident

State 71:
## Known stack suffix:
## uident DOT
## LR(1) items:
path(uident) -> uident DOT . path(uident) [ WHEN VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On path(uident) shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## uident DOT path(uident)
## LR(1) items:
path(uident) -> uident DOT path(uident) . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production path(uident) -> uident DOT path(uident)
-- On WHEN reduce production path(uident) -> uident DOT path(uident)
-- On VAL reduce production path(uident) -> uident DOT path(uident)
-- On UNOPTEQUALITY reduce production path(uident) -> uident DOT path(uident)
-- On UNIV_HASH reduce production path(uident) -> uident DOT path(uident)
-- On UNFOLDABLE reduce production path(uident) -> uident DOT path(uident)
-- On UNFOLD reduce production path(uident) -> uident DOT path(uident)
-- On UNDERSCORE reduce production path(uident) -> uident DOT path(uident)
-- On UINT8 reduce production path(uident) -> uident DOT path(uident)
-- On UINT64 reduce production path(uident) -> uident DOT path(uident)
-- On UINT32 reduce production path(uident) -> uident DOT path(uident)
-- On UINT16 reduce production path(uident) -> uident DOT path(uident)
-- On TYP_APP_LESS reduce production path(uident) -> uident DOT path(uident)
-- On TYP_APP_GREATER reduce production path(uident) -> uident DOT path(uident)
-- On TYPE reduce production path(uident) -> uident DOT path(uident)
-- On TVAR reduce production path(uident) -> uident DOT path(uident)
-- On TRUE reduce production path(uident) -> uident DOT path(uident)
-- On TOTAL reduce production path(uident) -> uident DOT path(uident)
-- On THEN reduce production path(uident) -> uident DOT path(uident)
-- On SUB_EFFECT reduce production path(uident) -> uident DOT path(uident)
-- On SUBTYPE reduce production path(uident) -> uident DOT path(uident)
-- On SUBKIND reduce production path(uident) -> uident DOT path(uident)
-- On STRING reduce production path(uident) -> uident DOT path(uident)
-- On SQUIGGLY_RARROW reduce production path(uident) -> uident DOT path(uident)
-- On SPLICE reduce production path(uident) -> uident DOT path(uident)
-- On SET_RANGE_OF reduce production path(uident) -> uident DOT path(uident)
-- On SEMICOLON_SEMICOLON reduce production path(uident) -> uident DOT path(uident)
-- On SEMICOLON reduce production path(uident) -> uident DOT path(uident)
-- On RPAREN reduce production path(uident) -> uident DOT path(uident)
-- On REIFY reduce production path(uident) -> uident DOT path(uident)
-- On REIFIABLE reduce production path(uident) -> uident DOT path(uident)
-- On REFLECTABLE reduce production path(uident) -> uident DOT path(uident)
-- On RBRACK reduce production path(uident) -> uident DOT path(uident)
-- On RBRACE reduce production path(uident) -> uident DOT path(uident)
-- On RARROW reduce production path(uident) -> uident DOT path(uident)
-- On RANGE_OF reduce production path(uident) -> uident DOT path(uident)
-- On QMARK_DOT reduce production path(uident) -> uident DOT path(uident)
-- On QMARK reduce production path(uident) -> uident DOT path(uident)
-- On PRIVATE reduce production path(uident) -> uident DOT path(uident)
-- On PRAGMA_SET_OPTIONS reduce production path(uident) -> uident DOT path(uident)
-- On PRAGMA_RESET_OPTIONS reduce production path(uident) -> uident DOT path(uident)
-- On PIPE_RIGHT reduce production path(uident) -> uident DOT path(uident)
-- On PERCENT_LBRACK reduce production path(uident) -> uident DOT path(uident)
-- On OPPREFIX reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX4 reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX3 reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX2 reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX1 reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX0d reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX0c reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX0b reduce production path(uident) -> uident DOT path(uident)
-- On OPINFIX0a reduce production path(uident) -> uident DOT path(uident)
-- On OPEN reduce production path(uident) -> uident DOT path(uident)
-- On OPAQUE reduce production path(uident) -> uident DOT path(uident)
-- On NOEXTRACT reduce production path(uident) -> uident DOT path(uident)
-- On NOEQUALITY reduce production path(uident) -> uident DOT path(uident)
-- On NEW_EFFECT reduce production path(uident) -> uident DOT path(uident)
-- On NEW reduce production path(uident) -> uident DOT path(uident)
-- On NAME reduce production path(uident) -> uident DOT path(uident)
-- On MODULE reduce production path(uident) -> uident DOT path(uident)
-- On MINUS reduce production path(uident) -> uident DOT path(uident)
-- On LPAREN_RPAREN reduce production path(uident) -> uident DOT path(uident)
-- On LPAREN reduce production path(uident) -> uident DOT path(uident)
-- On LOGIC reduce production path(uident) -> uident DOT path(uident)
-- On LET reduce production path(uident) -> uident DOT path(uident)
-- On LENS_PAREN_RIGHT reduce production path(uident) -> uident DOT path(uident)
-- On LENS_PAREN_LEFT reduce production path(uident) -> uident DOT path(uident)
-- On LBRACK_BAR reduce production path(uident) -> uident DOT path(uident)
-- On LBRACK_AT reduce production path(uident) -> uident DOT path(uident)
-- On LBRACK reduce production path(uident) -> uident DOT path(uident)
-- On LBRACE reduce production path(uident) -> uident DOT path(uident)
-- On IRREDUCIBLE reduce production path(uident) -> uident DOT path(uident)
-- On INT8 reduce production path(uident) -> uident DOT path(uident)
-- On INT64 reduce production path(uident) -> uident DOT path(uident)
-- On INT32 reduce production path(uident) -> uident DOT path(uident)
-- On INT16 reduce production path(uident) -> uident DOT path(uident)
-- On INT reduce production path(uident) -> uident DOT path(uident)
-- On INLINE_FOR_EXTRACTION reduce production path(uident) -> uident DOT path(uident)
-- On INLINE reduce production path(uident) -> uident DOT path(uident)
-- On INCLUDE reduce production path(uident) -> uident DOT path(uident)
-- On IN reduce production path(uident) -> uident DOT path(uident)
-- On IMPLIES reduce production path(uident) -> uident DOT path(uident)
-- On IFF reduce production path(uident) -> uident DOT path(uident)
-- On IEEE64 reduce production path(uident) -> uident DOT path(uident)
-- On IDENT reduce production path(uident) -> uident DOT path(uident)
-- On HASH reduce production path(uident) -> uident DOT path(uident)
-- On FSDOC_STANDALONE reduce production path(uident) -> uident DOT path(uident)
-- On FSDOC reduce production path(uident) -> uident DOT path(uident)
-- On FALSE reduce production path(uident) -> uident DOT path(uident)
-- On EXCEPTION reduce production path(uident) -> uident DOT path(uident)
-- On EQUALS reduce production path(uident) -> uident DOT path(uident)
-- On EOF reduce production path(uident) -> uident DOT path(uident)
-- On END reduce production path(uident) -> uident DOT path(uident)
-- On ELSE reduce production path(uident) -> uident DOT path(uident)
-- On EFFECT reduce production path(uident) -> uident DOT path(uident)
-- On DOT_LPAREN reduce production path(uident) -> uident DOT path(uident)
-- On DOLLAR reduce production path(uident) -> uident DOT path(uident)
-- On DISJUNCTION reduce production path(uident) -> uident DOT path(uident)
-- On DEFAULT reduce production path(uident) -> uident DOT path(uident)
-- On CONJUNCTION reduce production path(uident) -> uident DOT path(uident)
-- On COMMA reduce production path(uident) -> uident DOT path(uident)
-- On COLON_EQUALS reduce production path(uident) -> uident DOT path(uident)
-- On COLON_COLON reduce production path(uident) -> uident DOT path(uident)
-- On COLON reduce production path(uident) -> uident DOT path(uident)
-- On CHAR reduce production path(uident) -> uident DOT path(uident)
-- On BYTEARRAY reduce production path(uident) -> uident DOT path(uident)
-- On BY reduce production path(uident) -> uident DOT path(uident)
-- On BEGIN reduce production path(uident) -> uident DOT path(uident)
-- On BAR_RBRACK reduce production path(uident) -> uident DOT path(uident)
-- On BAR reduce production path(uident) -> uident DOT path(uident)
-- On BANG_LBRACE reduce production path(uident) -> uident DOT path(uident)
-- On BACKTICK reduce production path(uident) -> uident DOT path(uident)
-- On ASSUME reduce production path(uident) -> uident DOT path(uident)
-- On AND reduce production path(uident) -> uident DOT path(uident)
-- On AMP reduce production path(uident) -> uident DOT path(uident)
-- On ABSTRACT reduce production path(uident) -> uident DOT path(uident)
-- On # reduce production path(uident) -> uident DOT path(uident)
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production path(uident) -> uident DOT path(uident)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 73:
## Known stack suffix:
## LET OPEN quident
## LR(1) items:
noSeqTerm -> LET OPEN quident . IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IN shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## LET OPEN quident IN
## LR(1) items:
noSeqTerm -> LET OPEN quident IN . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 637
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 75:
## Known stack suffix:
## LBRACE
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE . recordExp RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 590
-- On recordExp shift to state 635
-- On quident shift to state 83
-- On qlident shift to state 593
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 594
## Reductions:

State 76:
## Known stack suffix:
## BANG_LBRACE
## LR(1) items:
projectionLHS -> BANG_LBRACE . loption(separated_nonempty_list(COMMA,appTerm)) RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,appTerm) shift to state 82
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On loption(separated_nonempty_list(COMMA,appTerm)) shift to state 630
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 632
## Reductions:
-- On RBRACE reduce production loption(separated_nonempty_list(COMMA,appTerm)) ->

State 77:
## Known stack suffix:
## uident
## LR(1) items:
path(lident) -> uident . DOT path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
path(uident) -> uident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
path(uident) -> uident . DOT path(uident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 78
## Reductions:
-- On WITH reduce production path(uident) -> uident
-- On VAL reduce production path(uident) -> uident
-- On UNOPTEQUALITY reduce production path(uident) -> uident
-- On UNIV_HASH reduce production path(uident) -> uident
-- On UNFOLDABLE reduce production path(uident) -> uident
-- On UNFOLD reduce production path(uident) -> uident
-- On UNDERSCORE reduce production path(uident) -> uident
-- On UINT8 reduce production path(uident) -> uident
-- On UINT64 reduce production path(uident) -> uident
-- On UINT32 reduce production path(uident) -> uident
-- On UINT16 reduce production path(uident) -> uident
-- On TYP_APP_LESS reduce production path(uident) -> uident
-- On TYP_APP_GREATER reduce production path(uident) -> uident
-- On TYPE reduce production path(uident) -> uident
-- On TVAR reduce production path(uident) -> uident
-- On TRUE reduce production path(uident) -> uident
-- On TOTAL reduce production path(uident) -> uident
-- On THEN reduce production path(uident) -> uident
-- On SUB_EFFECT reduce production path(uident) -> uident
-- On SUBTYPE reduce production path(uident) -> uident
-- On SUBKIND reduce production path(uident) -> uident
-- On STRING reduce production path(uident) -> uident
-- On SQUIGGLY_RARROW reduce production path(uident) -> uident
-- On SPLICE reduce production path(uident) -> uident
-- On SET_RANGE_OF reduce production path(uident) -> uident
-- On SEMICOLON_SEMICOLON reduce production path(uident) -> uident
-- On SEMICOLON reduce production path(uident) -> uident
-- On RPAREN reduce production path(uident) -> uident
-- On REIFY reduce production path(uident) -> uident
-- On REIFIABLE reduce production path(uident) -> uident
-- On REFLECTABLE reduce production path(uident) -> uident
-- On RBRACK reduce production path(uident) -> uident
-- On RBRACE reduce production path(uident) -> uident
-- On RARROW reduce production path(uident) -> uident
-- On RANGE_OF reduce production path(uident) -> uident
-- On QMARK_DOT reduce production path(uident) -> uident
-- On QMARK reduce production path(uident) -> uident
-- On PRIVATE reduce production path(uident) -> uident
-- On PRAGMA_SET_OPTIONS reduce production path(uident) -> uident
-- On PRAGMA_RESET_OPTIONS reduce production path(uident) -> uident
-- On PIPE_RIGHT reduce production path(uident) -> uident
-- On PERCENT_LBRACK reduce production path(uident) -> uident
-- On OPPREFIX reduce production path(uident) -> uident
-- On OPINFIX4 reduce production path(uident) -> uident
-- On OPINFIX3 reduce production path(uident) -> uident
-- On OPINFIX2 reduce production path(uident) -> uident
-- On OPINFIX1 reduce production path(uident) -> uident
-- On OPINFIX0d reduce production path(uident) -> uident
-- On OPINFIX0c reduce production path(uident) -> uident
-- On OPINFIX0b reduce production path(uident) -> uident
-- On OPINFIX0a reduce production path(uident) -> uident
-- On OPEN reduce production path(uident) -> uident
-- On OPAQUE reduce production path(uident) -> uident
-- On NOEXTRACT reduce production path(uident) -> uident
-- On NOEQUALITY reduce production path(uident) -> uident
-- On NEW_EFFECT reduce production path(uident) -> uident
-- On NEW reduce production path(uident) -> uident
-- On NAME reduce production path(uident) -> uident
-- On MODULE reduce production path(uident) -> uident
-- On MINUS reduce production path(uident) -> uident
-- On LPAREN_RPAREN reduce production path(uident) -> uident
-- On LPAREN reduce production path(uident) -> uident
-- On LOGIC reduce production path(uident) -> uident
-- On LET reduce production path(uident) -> uident
-- On LENS_PAREN_RIGHT reduce production path(uident) -> uident
-- On LENS_PAREN_LEFT reduce production path(uident) -> uident
-- On LBRACK_BAR reduce production path(uident) -> uident
-- On LBRACK_AT reduce production path(uident) -> uident
-- On LBRACK reduce production path(uident) -> uident
-- On LBRACE reduce production path(uident) -> uident
-- On IRREDUCIBLE reduce production path(uident) -> uident
-- On INT8 reduce production path(uident) -> uident
-- On INT64 reduce production path(uident) -> uident
-- On INT32 reduce production path(uident) -> uident
-- On INT16 reduce production path(uident) -> uident
-- On INT reduce production path(uident) -> uident
-- On INLINE_FOR_EXTRACTION reduce production path(uident) -> uident
-- On INLINE reduce production path(uident) -> uident
-- On INCLUDE reduce production path(uident) -> uident
-- On IN reduce production path(uident) -> uident
-- On IMPLIES reduce production path(uident) -> uident
-- On IFF reduce production path(uident) -> uident
-- On IEEE64 reduce production path(uident) -> uident
-- On IDENT reduce production path(uident) -> uident
-- On HASH reduce production path(uident) -> uident
-- On FSDOC_STANDALONE reduce production path(uident) -> uident
-- On FSDOC reduce production path(uident) -> uident
-- On FALSE reduce production path(uident) -> uident
-- On EXCEPTION reduce production path(uident) -> uident
-- On EQUALS reduce production path(uident) -> uident
-- On EOF reduce production path(uident) -> uident
-- On END reduce production path(uident) -> uident
-- On ELSE reduce production path(uident) -> uident
-- On EFFECT reduce production path(uident) -> uident
-- On DOT_LPAREN reduce production path(uident) -> uident
-- On DISJUNCTION reduce production path(uident) -> uident
-- On DEFAULT reduce production path(uident) -> uident
-- On CONJUNCTION reduce production path(uident) -> uident
-- On COMMA reduce production path(uident) -> uident
-- On COLON_EQUALS reduce production path(uident) -> uident
-- On COLON_COLON reduce production path(uident) -> uident
-- On CHAR reduce production path(uident) -> uident
-- On BYTEARRAY reduce production path(uident) -> uident
-- On BY reduce production path(uident) -> uident
-- On BEGIN reduce production path(uident) -> uident
-- On BAR_RBRACK reduce production path(uident) -> uident
-- On BAR reduce production path(uident) -> uident
-- On BANG_LBRACE reduce production path(uident) -> uident
-- On BACKTICK reduce production path(uident) -> uident
-- On ASSUME reduce production path(uident) -> uident
-- On AND reduce production path(uident) -> uident
-- On AMP reduce production path(uident) -> uident
-- On ABSTRACT reduce production path(uident) -> uident
-- On # reduce production path(uident) -> uident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production path(uident) -> uident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 78:
## Known stack suffix:
## uident DOT
## LR(1) items:
path(lident) -> uident DOT . path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
path(uident) -> uident DOT . path(uident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 77
-- On path(uident) shift to state 72
-- On path(lident) shift to state 79
-- On lident shift to state 80
## Reductions:

State 79:
## Known stack suffix:
## uident DOT path(lident)
## LR(1) items:
path(lident) -> uident DOT path(lident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production path(lident) -> uident DOT path(lident)
-- On VAL reduce production path(lident) -> uident DOT path(lident)
-- On UNOPTEQUALITY reduce production path(lident) -> uident DOT path(lident)
-- On UNIV_HASH reduce production path(lident) -> uident DOT path(lident)
-- On UNFOLDABLE reduce production path(lident) -> uident DOT path(lident)
-- On UNFOLD reduce production path(lident) -> uident DOT path(lident)
-- On UNDERSCORE reduce production path(lident) -> uident DOT path(lident)
-- On UINT8 reduce production path(lident) -> uident DOT path(lident)
-- On UINT64 reduce production path(lident) -> uident DOT path(lident)
-- On UINT32 reduce production path(lident) -> uident DOT path(lident)
-- On UINT16 reduce production path(lident) -> uident DOT path(lident)
-- On TYP_APP_LESS reduce production path(lident) -> uident DOT path(lident)
-- On TYP_APP_GREATER reduce production path(lident) -> uident DOT path(lident)
-- On TYPE reduce production path(lident) -> uident DOT path(lident)
-- On TVAR reduce production path(lident) -> uident DOT path(lident)
-- On TRUE reduce production path(lident) -> uident DOT path(lident)
-- On TOTAL reduce production path(lident) -> uident DOT path(lident)
-- On THEN reduce production path(lident) -> uident DOT path(lident)
-- On SUB_EFFECT reduce production path(lident) -> uident DOT path(lident)
-- On SUBTYPE reduce production path(lident) -> uident DOT path(lident)
-- On SUBKIND reduce production path(lident) -> uident DOT path(lident)
-- On STRING reduce production path(lident) -> uident DOT path(lident)
-- On SQUIGGLY_RARROW reduce production path(lident) -> uident DOT path(lident)
-- On SPLICE reduce production path(lident) -> uident DOT path(lident)
-- On SET_RANGE_OF reduce production path(lident) -> uident DOT path(lident)
-- On SEMICOLON_SEMICOLON reduce production path(lident) -> uident DOT path(lident)
-- On SEMICOLON reduce production path(lident) -> uident DOT path(lident)
-- On RPAREN reduce production path(lident) -> uident DOT path(lident)
-- On REIFY reduce production path(lident) -> uident DOT path(lident)
-- On REIFIABLE reduce production path(lident) -> uident DOT path(lident)
-- On REFLECTABLE reduce production path(lident) -> uident DOT path(lident)
-- On RBRACK reduce production path(lident) -> uident DOT path(lident)
-- On RBRACE reduce production path(lident) -> uident DOT path(lident)
-- On RARROW reduce production path(lident) -> uident DOT path(lident)
-- On RANGE_OF reduce production path(lident) -> uident DOT path(lident)
-- On PRIVATE reduce production path(lident) -> uident DOT path(lident)
-- On PRAGMA_SET_OPTIONS reduce production path(lident) -> uident DOT path(lident)
-- On PRAGMA_RESET_OPTIONS reduce production path(lident) -> uident DOT path(lident)
-- On PIPE_RIGHT reduce production path(lident) -> uident DOT path(lident)
-- On PERCENT_LBRACK reduce production path(lident) -> uident DOT path(lident)
-- On OPPREFIX reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX4 reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX3 reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX2 reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX1 reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX0d reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX0c reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX0b reduce production path(lident) -> uident DOT path(lident)
-- On OPINFIX0a reduce production path(lident) -> uident DOT path(lident)
-- On OPEN reduce production path(lident) -> uident DOT path(lident)
-- On OPAQUE reduce production path(lident) -> uident DOT path(lident)
-- On NOEXTRACT reduce production path(lident) -> uident DOT path(lident)
-- On NOEQUALITY reduce production path(lident) -> uident DOT path(lident)
-- On NEW_EFFECT reduce production path(lident) -> uident DOT path(lident)
-- On NEW reduce production path(lident) -> uident DOT path(lident)
-- On NAME reduce production path(lident) -> uident DOT path(lident)
-- On MODULE reduce production path(lident) -> uident DOT path(lident)
-- On MINUS reduce production path(lident) -> uident DOT path(lident)
-- On LPAREN_RPAREN reduce production path(lident) -> uident DOT path(lident)
-- On LPAREN reduce production path(lident) -> uident DOT path(lident)
-- On LOGIC reduce production path(lident) -> uident DOT path(lident)
-- On LET reduce production path(lident) -> uident DOT path(lident)
-- On LENS_PAREN_RIGHT reduce production path(lident) -> uident DOT path(lident)
-- On LENS_PAREN_LEFT reduce production path(lident) -> uident DOT path(lident)
-- On LBRACK_BAR reduce production path(lident) -> uident DOT path(lident)
-- On LBRACK_AT reduce production path(lident) -> uident DOT path(lident)
-- On LBRACK reduce production path(lident) -> uident DOT path(lident)
-- On LBRACE reduce production path(lident) -> uident DOT path(lident)
-- On IRREDUCIBLE reduce production path(lident) -> uident DOT path(lident)
-- On INT8 reduce production path(lident) -> uident DOT path(lident)
-- On INT64 reduce production path(lident) -> uident DOT path(lident)
-- On INT32 reduce production path(lident) -> uident DOT path(lident)
-- On INT16 reduce production path(lident) -> uident DOT path(lident)
-- On INT reduce production path(lident) -> uident DOT path(lident)
-- On INLINE_FOR_EXTRACTION reduce production path(lident) -> uident DOT path(lident)
-- On INLINE reduce production path(lident) -> uident DOT path(lident)
-- On INCLUDE reduce production path(lident) -> uident DOT path(lident)
-- On IN reduce production path(lident) -> uident DOT path(lident)
-- On IMPLIES reduce production path(lident) -> uident DOT path(lident)
-- On IFF reduce production path(lident) -> uident DOT path(lident)
-- On IEEE64 reduce production path(lident) -> uident DOT path(lident)
-- On IDENT reduce production path(lident) -> uident DOT path(lident)
-- On HASH reduce production path(lident) -> uident DOT path(lident)
-- On FSDOC_STANDALONE reduce production path(lident) -> uident DOT path(lident)
-- On FSDOC reduce production path(lident) -> uident DOT path(lident)
-- On FALSE reduce production path(lident) -> uident DOT path(lident)
-- On EXCEPTION reduce production path(lident) -> uident DOT path(lident)
-- On EQUALS reduce production path(lident) -> uident DOT path(lident)
-- On EOF reduce production path(lident) -> uident DOT path(lident)
-- On END reduce production path(lident) -> uident DOT path(lident)
-- On ELSE reduce production path(lident) -> uident DOT path(lident)
-- On EFFECT reduce production path(lident) -> uident DOT path(lident)
-- On DOT_LPAREN reduce production path(lident) -> uident DOT path(lident)
-- On DOT_LENS_PAREN_LEFT reduce production path(lident) -> uident DOT path(lident)
-- On DOT_LBRACK_BAR reduce production path(lident) -> uident DOT path(lident)
-- On DOT_LBRACK reduce production path(lident) -> uident DOT path(lident)
-- On DOT reduce production path(lident) -> uident DOT path(lident)
-- On DISJUNCTION reduce production path(lident) -> uident DOT path(lident)
-- On DEFAULT reduce production path(lident) -> uident DOT path(lident)
-- On CONJUNCTION reduce production path(lident) -> uident DOT path(lident)
-- On COMMA reduce production path(lident) -> uident DOT path(lident)
-- On COLON_EQUALS reduce production path(lident) -> uident DOT path(lident)
-- On COLON_COLON reduce production path(lident) -> uident DOT path(lident)
-- On CHAR reduce production path(lident) -> uident DOT path(lident)
-- On BYTEARRAY reduce production path(lident) -> uident DOT path(lident)
-- On BY reduce production path(lident) -> uident DOT path(lident)
-- On BEGIN reduce production path(lident) -> uident DOT path(lident)
-- On BAR_RBRACK reduce production path(lident) -> uident DOT path(lident)
-- On BAR reduce production path(lident) -> uident DOT path(lident)
-- On BANG_LBRACE reduce production path(lident) -> uident DOT path(lident)
-- On BACKTICK reduce production path(lident) -> uident DOT path(lident)
-- On ASSUME reduce production path(lident) -> uident DOT path(lident)
-- On AND reduce production path(lident) -> uident DOT path(lident)
-- On AMP reduce production path(lident) -> uident DOT path(lident)
-- On ABSTRACT reduce production path(lident) -> uident DOT path(lident)
-- On # reduce production path(lident) -> uident DOT path(lident)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production path(lident) -> uident DOT path(lident)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 80:
## Known stack suffix:
## lident
## LR(1) items:
path(lident) -> lident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production path(lident) -> lident
-- On VAL reduce production path(lident) -> lident
-- On UNOPTEQUALITY reduce production path(lident) -> lident
-- On UNIV_HASH reduce production path(lident) -> lident
-- On UNFOLDABLE reduce production path(lident) -> lident
-- On UNFOLD reduce production path(lident) -> lident
-- On UNDERSCORE reduce production path(lident) -> lident
-- On UINT8 reduce production path(lident) -> lident
-- On UINT64 reduce production path(lident) -> lident
-- On UINT32 reduce production path(lident) -> lident
-- On UINT16 reduce production path(lident) -> lident
-- On TYP_APP_LESS reduce production path(lident) -> lident
-- On TYP_APP_GREATER reduce production path(lident) -> lident
-- On TYPE reduce production path(lident) -> lident
-- On TVAR reduce production path(lident) -> lident
-- On TRUE reduce production path(lident) -> lident
-- On TOTAL reduce production path(lident) -> lident
-- On THEN reduce production path(lident) -> lident
-- On SUB_EFFECT reduce production path(lident) -> lident
-- On SUBTYPE reduce production path(lident) -> lident
-- On SUBKIND reduce production path(lident) -> lident
-- On STRING reduce production path(lident) -> lident
-- On SQUIGGLY_RARROW reduce production path(lident) -> lident
-- On SPLICE reduce production path(lident) -> lident
-- On SET_RANGE_OF reduce production path(lident) -> lident
-- On SEMICOLON_SEMICOLON reduce production path(lident) -> lident
-- On SEMICOLON reduce production path(lident) -> lident
-- On RPAREN reduce production path(lident) -> lident
-- On REIFY reduce production path(lident) -> lident
-- On REIFIABLE reduce production path(lident) -> lident
-- On REFLECTABLE reduce production path(lident) -> lident
-- On RBRACK reduce production path(lident) -> lident
-- On RBRACE reduce production path(lident) -> lident
-- On RARROW reduce production path(lident) -> lident
-- On RANGE_OF reduce production path(lident) -> lident
-- On PRIVATE reduce production path(lident) -> lident
-- On PRAGMA_SET_OPTIONS reduce production path(lident) -> lident
-- On PRAGMA_RESET_OPTIONS reduce production path(lident) -> lident
-- On PIPE_RIGHT reduce production path(lident) -> lident
-- On PERCENT_LBRACK reduce production path(lident) -> lident
-- On OPPREFIX reduce production path(lident) -> lident
-- On OPINFIX4 reduce production path(lident) -> lident
-- On OPINFIX3 reduce production path(lident) -> lident
-- On OPINFIX2 reduce production path(lident) -> lident
-- On OPINFIX1 reduce production path(lident) -> lident
-- On OPINFIX0d reduce production path(lident) -> lident
-- On OPINFIX0c reduce production path(lident) -> lident
-- On OPINFIX0b reduce production path(lident) -> lident
-- On OPINFIX0a reduce production path(lident) -> lident
-- On OPEN reduce production path(lident) -> lident
-- On OPAQUE reduce production path(lident) -> lident
-- On NOEXTRACT reduce production path(lident) -> lident
-- On NOEQUALITY reduce production path(lident) -> lident
-- On NEW_EFFECT reduce production path(lident) -> lident
-- On NEW reduce production path(lident) -> lident
-- On NAME reduce production path(lident) -> lident
-- On MODULE reduce production path(lident) -> lident
-- On MINUS reduce production path(lident) -> lident
-- On LPAREN_RPAREN reduce production path(lident) -> lident
-- On LPAREN reduce production path(lident) -> lident
-- On LOGIC reduce production path(lident) -> lident
-- On LET reduce production path(lident) -> lident
-- On LENS_PAREN_RIGHT reduce production path(lident) -> lident
-- On LENS_PAREN_LEFT reduce production path(lident) -> lident
-- On LBRACK_BAR reduce production path(lident) -> lident
-- On LBRACK_AT reduce production path(lident) -> lident
-- On LBRACK reduce production path(lident) -> lident
-- On LBRACE reduce production path(lident) -> lident
-- On IRREDUCIBLE reduce production path(lident) -> lident
-- On INT8 reduce production path(lident) -> lident
-- On INT64 reduce production path(lident) -> lident
-- On INT32 reduce production path(lident) -> lident
-- On INT16 reduce production path(lident) -> lident
-- On INT reduce production path(lident) -> lident
-- On INLINE_FOR_EXTRACTION reduce production path(lident) -> lident
-- On INLINE reduce production path(lident) -> lident
-- On INCLUDE reduce production path(lident) -> lident
-- On IN reduce production path(lident) -> lident
-- On IMPLIES reduce production path(lident) -> lident
-- On IFF reduce production path(lident) -> lident
-- On IEEE64 reduce production path(lident) -> lident
-- On IDENT reduce production path(lident) -> lident
-- On HASH reduce production path(lident) -> lident
-- On FSDOC_STANDALONE reduce production path(lident) -> lident
-- On FSDOC reduce production path(lident) -> lident
-- On FALSE reduce production path(lident) -> lident
-- On EXCEPTION reduce production path(lident) -> lident
-- On EQUALS reduce production path(lident) -> lident
-- On EOF reduce production path(lident) -> lident
-- On END reduce production path(lident) -> lident
-- On ELSE reduce production path(lident) -> lident
-- On EFFECT reduce production path(lident) -> lident
-- On DOT_LPAREN reduce production path(lident) -> lident
-- On DOT_LENS_PAREN_LEFT reduce production path(lident) -> lident
-- On DOT_LBRACK_BAR reduce production path(lident) -> lident
-- On DOT_LBRACK reduce production path(lident) -> lident
-- On DOT reduce production path(lident) -> lident
-- On DISJUNCTION reduce production path(lident) -> lident
-- On DEFAULT reduce production path(lident) -> lident
-- On CONJUNCTION reduce production path(lident) -> lident
-- On COMMA reduce production path(lident) -> lident
-- On COLON_EQUALS reduce production path(lident) -> lident
-- On COLON_COLON reduce production path(lident) -> lident
-- On CHAR reduce production path(lident) -> lident
-- On BYTEARRAY reduce production path(lident) -> lident
-- On BY reduce production path(lident) -> lident
-- On BEGIN reduce production path(lident) -> lident
-- On BAR_RBRACK reduce production path(lident) -> lident
-- On BAR reduce production path(lident) -> lident
-- On BANG_LBRACE reduce production path(lident) -> lident
-- On BACKTICK reduce production path(lident) -> lident
-- On ASSUME reduce production path(lident) -> lident
-- On AND reduce production path(lident) -> lident
-- On AMP reduce production path(lident) -> lident
-- On ABSTRACT reduce production path(lident) -> lident
-- On # reduce production path(lident) -> lident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production path(lident) -> lident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 81:
## Known stack suffix:
## tvar
## LR(1) items:
atomicTermNotQUident -> tvar . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> tvar
-- On VAL reduce production atomicTermNotQUident -> tvar
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> tvar
-- On UNIV_HASH reduce production atomicTermNotQUident -> tvar
-- On UNFOLDABLE reduce production atomicTermNotQUident -> tvar
-- On UNFOLD reduce production atomicTermNotQUident -> tvar
-- On UNDERSCORE reduce production atomicTermNotQUident -> tvar
-- On UINT8 reduce production atomicTermNotQUident -> tvar
-- On UINT64 reduce production atomicTermNotQUident -> tvar
-- On UINT32 reduce production atomicTermNotQUident -> tvar
-- On UINT16 reduce production atomicTermNotQUident -> tvar
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> tvar
-- On TYPE reduce production atomicTermNotQUident -> tvar
-- On TVAR reduce production atomicTermNotQUident -> tvar
-- On TRUE reduce production atomicTermNotQUident -> tvar
-- On TOTAL reduce production atomicTermNotQUident -> tvar
-- On THEN reduce production atomicTermNotQUident -> tvar
-- On SUB_EFFECT reduce production atomicTermNotQUident -> tvar
-- On SUBTYPE reduce production atomicTermNotQUident -> tvar
-- On SUBKIND reduce production atomicTermNotQUident -> tvar
-- On STRING reduce production atomicTermNotQUident -> tvar
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> tvar
-- On SPLICE reduce production atomicTermNotQUident -> tvar
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> tvar
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> tvar
-- On SEMICOLON reduce production atomicTermNotQUident -> tvar
-- On RPAREN reduce production atomicTermNotQUident -> tvar
-- On REIFY reduce production atomicTermNotQUident -> tvar
-- On REIFIABLE reduce production atomicTermNotQUident -> tvar
-- On REFLECTABLE reduce production atomicTermNotQUident -> tvar
-- On RBRACK reduce production atomicTermNotQUident -> tvar
-- On RBRACE reduce production atomicTermNotQUident -> tvar
-- On RARROW reduce production atomicTermNotQUident -> tvar
-- On RANGE_OF reduce production atomicTermNotQUident -> tvar
-- On PRIVATE reduce production atomicTermNotQUident -> tvar
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> tvar
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> tvar
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> tvar
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> tvar
-- On OPPREFIX reduce production atomicTermNotQUident -> tvar
-- On OPINFIX4 reduce production atomicTermNotQUident -> tvar
-- On OPINFIX3 reduce production atomicTermNotQUident -> tvar
-- On OPINFIX2 reduce production atomicTermNotQUident -> tvar
-- On OPINFIX1 reduce production atomicTermNotQUident -> tvar
-- On OPINFIX0d reduce production atomicTermNotQUident -> tvar
-- On OPINFIX0c reduce production atomicTermNotQUident -> tvar
-- On OPINFIX0b reduce production atomicTermNotQUident -> tvar
-- On OPINFIX0a reduce production atomicTermNotQUident -> tvar
-- On OPEN reduce production atomicTermNotQUident -> tvar
-- On OPAQUE reduce production atomicTermNotQUident -> tvar
-- On NOEXTRACT reduce production atomicTermNotQUident -> tvar
-- On NOEQUALITY reduce production atomicTermNotQUident -> tvar
-- On NEW_EFFECT reduce production atomicTermNotQUident -> tvar
-- On NEW reduce production atomicTermNotQUident -> tvar
-- On NAME reduce production atomicTermNotQUident -> tvar
-- On MODULE reduce production atomicTermNotQUident -> tvar
-- On MINUS reduce production atomicTermNotQUident -> tvar
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> tvar
-- On LPAREN reduce production atomicTermNotQUident -> tvar
-- On LOGIC reduce production atomicTermNotQUident -> tvar
-- On LET reduce production atomicTermNotQUident -> tvar
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> tvar
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> tvar
-- On LBRACK_BAR reduce production atomicTermNotQUident -> tvar
-- On LBRACK_AT reduce production atomicTermNotQUident -> tvar
-- On LBRACK reduce production atomicTermNotQUident -> tvar
-- On LBRACE reduce production atomicTermNotQUident -> tvar
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> tvar
-- On INT8 reduce production atomicTermNotQUident -> tvar
-- On INT64 reduce production atomicTermNotQUident -> tvar
-- On INT32 reduce production atomicTermNotQUident -> tvar
-- On INT16 reduce production atomicTermNotQUident -> tvar
-- On INT reduce production atomicTermNotQUident -> tvar
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> tvar
-- On INLINE reduce production atomicTermNotQUident -> tvar
-- On INCLUDE reduce production atomicTermNotQUident -> tvar
-- On IN reduce production atomicTermNotQUident -> tvar
-- On IMPLIES reduce production atomicTermNotQUident -> tvar
-- On IFF reduce production atomicTermNotQUident -> tvar
-- On IEEE64 reduce production atomicTermNotQUident -> tvar
-- On IDENT reduce production atomicTermNotQUident -> tvar
-- On HASH reduce production atomicTermNotQUident -> tvar
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> tvar
-- On FSDOC reduce production atomicTermNotQUident -> tvar
-- On FALSE reduce production atomicTermNotQUident -> tvar
-- On EXCEPTION reduce production atomicTermNotQUident -> tvar
-- On EQUALS reduce production atomicTermNotQUident -> tvar
-- On EOF reduce production atomicTermNotQUident -> tvar
-- On END reduce production atomicTermNotQUident -> tvar
-- On ELSE reduce production atomicTermNotQUident -> tvar
-- On EFFECT reduce production atomicTermNotQUident -> tvar
-- On DOT_LPAREN reduce production atomicTermNotQUident -> tvar
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> tvar
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> tvar
-- On DOT_LBRACK reduce production atomicTermNotQUident -> tvar
-- On DISJUNCTION reduce production atomicTermNotQUident -> tvar
-- On DEFAULT reduce production atomicTermNotQUident -> tvar
-- On CONJUNCTION reduce production atomicTermNotQUident -> tvar
-- On COMMA reduce production atomicTermNotQUident -> tvar
-- On COLON_EQUALS reduce production atomicTermNotQUident -> tvar
-- On COLON_COLON reduce production atomicTermNotQUident -> tvar
-- On CHAR reduce production atomicTermNotQUident -> tvar
-- On BYTEARRAY reduce production atomicTermNotQUident -> tvar
-- On BY reduce production atomicTermNotQUident -> tvar
-- On BEGIN reduce production atomicTermNotQUident -> tvar
-- On BAR_RBRACK reduce production atomicTermNotQUident -> tvar
-- On BAR reduce production atomicTermNotQUident -> tvar
-- On BANG_LBRACE reduce production atomicTermNotQUident -> tvar
-- On BACKTICK reduce production atomicTermNotQUident -> tvar
-- On ASSUME reduce production atomicTermNotQUident -> tvar
-- On AND reduce production atomicTermNotQUident -> tvar
-- On AMP reduce production atomicTermNotQUident -> tvar
-- On ABSTRACT reduce production atomicTermNotQUident -> tvar
-- On # reduce production atomicTermNotQUident -> tvar
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> tvar
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 82:
## Known stack suffix:
## separated_nonempty_list(COMMA,appTerm)
## LR(1) items:
loption(separated_nonempty_list(COMMA,appTerm)) -> separated_nonempty_list(COMMA,appTerm) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production loption(separated_nonempty_list(COMMA,appTerm)) -> separated_nonempty_list(COMMA,appTerm)

State 83:
## Known stack suffix:
## quident
## LR(1) items:
atomicTermQUident -> quident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermQUident -> quident . DOT_LPAREN term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> quident . QMARK_DOT lident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> quident . QMARK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident . some(fsTypeArgs) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On QMARK_DOT shift to state 109
-- On QMARK shift to state 111
-- On DOT_LPAREN shift to state 112
-- On some(fsTypeArgs) shift to state 628
-- On fsTypeArgs shift to state 629
## Reductions:
-- On WITH reduce production atomicTermQUident -> quident
-- On VAL reduce production atomicTermQUident -> quident
-- On UNOPTEQUALITY reduce production atomicTermQUident -> quident
-- On UNIV_HASH reduce production atomicTermQUident -> quident
-- On UNFOLDABLE reduce production atomicTermQUident -> quident
-- On UNFOLD reduce production atomicTermQUident -> quident
-- On UNDERSCORE reduce production atomicTermQUident -> quident
-- On UINT8 reduce production atomicTermQUident -> quident
-- On UINT64 reduce production atomicTermQUident -> quident
-- On UINT32 reduce production atomicTermQUident -> quident
-- On UINT16 reduce production atomicTermQUident -> quident
-- On TYP_APP_GREATER reduce production atomicTermQUident -> quident
-- On TYPE reduce production atomicTermQUident -> quident
-- On TVAR reduce production atomicTermQUident -> quident
-- On TRUE reduce production atomicTermQUident -> quident
-- On TOTAL reduce production atomicTermQUident -> quident
-- On THEN reduce production atomicTermQUident -> quident
-- On SUB_EFFECT reduce production atomicTermQUident -> quident
-- On SUBTYPE reduce production atomicTermQUident -> quident
-- On SUBKIND reduce production atomicTermQUident -> quident
-- On STRING reduce production atomicTermQUident -> quident
-- On SQUIGGLY_RARROW reduce production atomicTermQUident -> quident
-- On SPLICE reduce production atomicTermQUident -> quident
-- On SET_RANGE_OF reduce production atomicTermQUident -> quident
-- On SEMICOLON_SEMICOLON reduce production atomicTermQUident -> quident
-- On SEMICOLON reduce production atomicTermQUident -> quident
-- On RPAREN reduce production atomicTermQUident -> quident
-- On REIFY reduce production atomicTermQUident -> quident
-- On REIFIABLE reduce production atomicTermQUident -> quident
-- On REFLECTABLE reduce production atomicTermQUident -> quident
-- On RBRACK reduce production atomicTermQUident -> quident
-- On RBRACE reduce production atomicTermQUident -> quident
-- On RARROW reduce production atomicTermQUident -> quident
-- On RANGE_OF reduce production atomicTermQUident -> quident
-- On PRIVATE reduce production atomicTermQUident -> quident
-- On PRAGMA_SET_OPTIONS reduce production atomicTermQUident -> quident
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermQUident -> quident
-- On PIPE_RIGHT reduce production atomicTermQUident -> quident
-- On PERCENT_LBRACK reduce production atomicTermQUident -> quident
-- On OPPREFIX reduce production atomicTermQUident -> quident
-- On OPINFIX4 reduce production atomicTermQUident -> quident
-- On OPINFIX3 reduce production atomicTermQUident -> quident
-- On OPINFIX2 reduce production atomicTermQUident -> quident
-- On OPINFIX1 reduce production atomicTermQUident -> quident
-- On OPINFIX0d reduce production atomicTermQUident -> quident
-- On OPINFIX0c reduce production atomicTermQUident -> quident
-- On OPINFIX0b reduce production atomicTermQUident -> quident
-- On OPINFIX0a reduce production atomicTermQUident -> quident
-- On OPEN reduce production atomicTermQUident -> quident
-- On OPAQUE reduce production atomicTermQUident -> quident
-- On NOEXTRACT reduce production atomicTermQUident -> quident
-- On NOEQUALITY reduce production atomicTermQUident -> quident
-- On NEW_EFFECT reduce production atomicTermQUident -> quident
-- On NEW reduce production atomicTermQUident -> quident
-- On NAME reduce production atomicTermQUident -> quident
-- On MODULE reduce production atomicTermQUident -> quident
-- On MINUS reduce production atomicTermQUident -> quident
-- On LPAREN_RPAREN reduce production atomicTermQUident -> quident
-- On LPAREN reduce production atomicTermQUident -> quident
-- On LOGIC reduce production atomicTermQUident -> quident
-- On LET reduce production atomicTermQUident -> quident
-- On LENS_PAREN_RIGHT reduce production atomicTermQUident -> quident
-- On LENS_PAREN_LEFT reduce production atomicTermQUident -> quident
-- On LBRACK_BAR reduce production atomicTermQUident -> quident
-- On LBRACK_AT reduce production atomicTermQUident -> quident
-- On LBRACK reduce production atomicTermQUident -> quident
-- On LBRACE reduce production atomicTermQUident -> quident
-- On IRREDUCIBLE reduce production atomicTermQUident -> quident
-- On INT8 reduce production atomicTermQUident -> quident
-- On INT64 reduce production atomicTermQUident -> quident
-- On INT32 reduce production atomicTermQUident -> quident
-- On INT16 reduce production atomicTermQUident -> quident
-- On INT reduce production atomicTermQUident -> quident
-- On INLINE_FOR_EXTRACTION reduce production atomicTermQUident -> quident
-- On INLINE reduce production atomicTermQUident -> quident
-- On INCLUDE reduce production atomicTermQUident -> quident
-- On IN reduce production atomicTermQUident -> quident
-- On IMPLIES reduce production atomicTermQUident -> quident
-- On IFF reduce production atomicTermQUident -> quident
-- On IEEE64 reduce production atomicTermQUident -> quident
-- On IDENT reduce production atomicTermQUident -> quident
-- On HASH reduce production atomicTermQUident -> quident
-- On FSDOC_STANDALONE reduce production atomicTermQUident -> quident
-- On FSDOC reduce production atomicTermQUident -> quident
-- On FALSE reduce production atomicTermQUident -> quident
-- On EXCEPTION reduce production atomicTermQUident -> quident
-- On EQUALS reduce production atomicTermQUident -> quident
-- On EOF reduce production atomicTermQUident -> quident
-- On END reduce production atomicTermQUident -> quident
-- On ELSE reduce production atomicTermQUident -> quident
-- On EFFECT reduce production atomicTermQUident -> quident
-- On DISJUNCTION reduce production atomicTermQUident -> quident
-- On DEFAULT reduce production atomicTermQUident -> quident
-- On CONJUNCTION reduce production atomicTermQUident -> quident
-- On COMMA reduce production atomicTermQUident -> quident
-- On COLON_EQUALS reduce production atomicTermQUident -> quident
-- On COLON_COLON reduce production atomicTermQUident -> quident
-- On CHAR reduce production atomicTermQUident -> quident
-- On BYTEARRAY reduce production atomicTermQUident -> quident
-- On BY reduce production atomicTermQUident -> quident
-- On BEGIN reduce production atomicTermQUident -> quident
-- On BAR_RBRACK reduce production atomicTermQUident -> quident
-- On BAR reduce production atomicTermQUident -> quident
-- On BANG_LBRACE reduce production atomicTermQUident -> quident
-- On BACKTICK reduce production atomicTermQUident -> quident
-- On ASSUME reduce production atomicTermQUident -> quident
-- On AND reduce production atomicTermQUident -> quident
-- On AMP reduce production atomicTermQUident -> quident
-- On ABSTRACT reduce production atomicTermQUident -> quident
-- On # reduce production atomicTermQUident -> quident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermQUident -> quident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 84:
## Known stack suffix:
## TYP_APP_LESS
## LR(1) items:
fsTypeArgs -> TYP_APP_LESS . separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,atomicTerm) shift to state 85
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 106
## Reductions:

State 85:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm)
## LR(1) items:
fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) . TYP_APP_GREATER [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_GREATER shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
## LR(1) items:
fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On VAL reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UNOPTEQUALITY reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UNIV_HASH reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UNFOLDABLE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UNFOLD reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UNDERSCORE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UINT8 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UINT64 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UINT32 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On UINT16 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On TYP_APP_GREATER reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On TYPE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On TVAR reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On TRUE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On TOTAL reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On THEN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SUB_EFFECT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SUBTYPE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SUBKIND reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On STRING reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SQUIGGLY_RARROW reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SPLICE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SET_RANGE_OF reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SEMICOLON_SEMICOLON reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On SEMICOLON reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On RPAREN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On REIFY reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On REIFIABLE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On REFLECTABLE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On RBRACK reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On RBRACE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On RARROW reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On RANGE_OF reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On PRIVATE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On PRAGMA_SET_OPTIONS reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On PRAGMA_RESET_OPTIONS reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On PIPE_RIGHT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On PERCENT_LBRACK reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPPREFIX reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX4 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX3 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX2 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX1 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX0d reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX0c reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX0b reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPINFIX0a reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPEN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On OPAQUE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On NOEXTRACT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On NOEQUALITY reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On NEW_EFFECT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On NEW reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On NAME reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On MODULE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On MINUS reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LPAREN_RPAREN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LPAREN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LOGIC reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LET reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LENS_PAREN_RIGHT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LENS_PAREN_LEFT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LBRACK_BAR reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LBRACK_AT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LBRACK reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On LBRACE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On IRREDUCIBLE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INT8 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INT64 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INT32 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INT16 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INLINE_FOR_EXTRACTION reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INLINE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On INCLUDE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On IN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On IMPLIES reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On IFF reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On IEEE64 reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On IDENT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On HASH reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On FSDOC_STANDALONE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On FSDOC reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On FALSE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On EXCEPTION reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On EQUALS reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On EOF reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On END reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On ELSE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On EFFECT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On DOT_LPAREN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On DOT_LENS_PAREN_LEFT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On DOT_LBRACK_BAR reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On DOT_LBRACK reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On DOT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On DISJUNCTION reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On DEFAULT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On CONJUNCTION reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On COMMA reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On COLON_EQUALS reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On COLON_COLON reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On CHAR reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On BYTEARRAY reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On BY reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On BEGIN reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On BAR_RBRACK reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On BAR reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On BANG_LBRACE reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On BACKTICK reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On ASSUME reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On AND reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On AMP reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On ABSTRACT reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
-- On # reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 87:
## Known stack suffix:
## qlident
## LR(1) items:
qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident . option(fsTypeArgs) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On option(fsTypeArgs) shift to state 88
-- On fsTypeArgs shift to state 89
## Reductions:
-- On WITH reduce production option(fsTypeArgs) ->
-- On VAL reduce production option(fsTypeArgs) ->
-- On UNOPTEQUALITY reduce production option(fsTypeArgs) ->
-- On UNIV_HASH reduce production option(fsTypeArgs) ->
-- On UNFOLDABLE reduce production option(fsTypeArgs) ->
-- On UNFOLD reduce production option(fsTypeArgs) ->
-- On UNDERSCORE reduce production option(fsTypeArgs) ->
-- On UINT8 reduce production option(fsTypeArgs) ->
-- On UINT64 reduce production option(fsTypeArgs) ->
-- On UINT32 reduce production option(fsTypeArgs) ->
-- On UINT16 reduce production option(fsTypeArgs) ->
-- On TYP_APP_GREATER reduce production option(fsTypeArgs) ->
-- On TYPE reduce production option(fsTypeArgs) ->
-- On TVAR reduce production option(fsTypeArgs) ->
-- On TRUE reduce production option(fsTypeArgs) ->
-- On TOTAL reduce production option(fsTypeArgs) ->
-- On THEN reduce production option(fsTypeArgs) ->
-- On SUB_EFFECT reduce production option(fsTypeArgs) ->
-- On SUBTYPE reduce production option(fsTypeArgs) ->
-- On SUBKIND reduce production option(fsTypeArgs) ->
-- On STRING reduce production option(fsTypeArgs) ->
-- On SQUIGGLY_RARROW reduce production option(fsTypeArgs) ->
-- On SPLICE reduce production option(fsTypeArgs) ->
-- On SET_RANGE_OF reduce production option(fsTypeArgs) ->
-- On SEMICOLON_SEMICOLON reduce production option(fsTypeArgs) ->
-- On SEMICOLON reduce production option(fsTypeArgs) ->
-- On RPAREN reduce production option(fsTypeArgs) ->
-- On REIFY reduce production option(fsTypeArgs) ->
-- On REIFIABLE reduce production option(fsTypeArgs) ->
-- On REFLECTABLE reduce production option(fsTypeArgs) ->
-- On RBRACK reduce production option(fsTypeArgs) ->
-- On RBRACE reduce production option(fsTypeArgs) ->
-- On RARROW reduce production option(fsTypeArgs) ->
-- On RANGE_OF reduce production option(fsTypeArgs) ->
-- On PRIVATE reduce production option(fsTypeArgs) ->
-- On PRAGMA_SET_OPTIONS reduce production option(fsTypeArgs) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(fsTypeArgs) ->
-- On PIPE_RIGHT reduce production option(fsTypeArgs) ->
-- On PERCENT_LBRACK reduce production option(fsTypeArgs) ->
-- On OPPREFIX reduce production option(fsTypeArgs) ->
-- On OPINFIX4 reduce production option(fsTypeArgs) ->
-- On OPINFIX3 reduce production option(fsTypeArgs) ->
-- On OPINFIX2 reduce production option(fsTypeArgs) ->
-- On OPINFIX1 reduce production option(fsTypeArgs) ->
-- On OPINFIX0d reduce production option(fsTypeArgs) ->
-- On OPINFIX0c reduce production option(fsTypeArgs) ->
-- On OPINFIX0b reduce production option(fsTypeArgs) ->
-- On OPINFIX0a reduce production option(fsTypeArgs) ->
-- On OPEN reduce production option(fsTypeArgs) ->
-- On OPAQUE reduce production option(fsTypeArgs) ->
-- On NOEXTRACT reduce production option(fsTypeArgs) ->
-- On NOEQUALITY reduce production option(fsTypeArgs) ->
-- On NEW_EFFECT reduce production option(fsTypeArgs) ->
-- On NEW reduce production option(fsTypeArgs) ->
-- On NAME reduce production option(fsTypeArgs) ->
-- On MODULE reduce production option(fsTypeArgs) ->
-- On MINUS reduce production option(fsTypeArgs) ->
-- On LPAREN_RPAREN reduce production option(fsTypeArgs) ->
-- On LPAREN reduce production option(fsTypeArgs) ->
-- On LOGIC reduce production option(fsTypeArgs) ->
-- On LET reduce production option(fsTypeArgs) ->
-- On LENS_PAREN_RIGHT reduce production option(fsTypeArgs) ->
-- On LENS_PAREN_LEFT reduce production option(fsTypeArgs) ->
-- On LBRACK_BAR reduce production option(fsTypeArgs) ->
-- On LBRACK_AT reduce production option(fsTypeArgs) ->
-- On LBRACK reduce production option(fsTypeArgs) ->
-- On LBRACE reduce production option(fsTypeArgs) ->
-- On IRREDUCIBLE reduce production option(fsTypeArgs) ->
-- On INT8 reduce production option(fsTypeArgs) ->
-- On INT64 reduce production option(fsTypeArgs) ->
-- On INT32 reduce production option(fsTypeArgs) ->
-- On INT16 reduce production option(fsTypeArgs) ->
-- On INT reduce production option(fsTypeArgs) ->
-- On INLINE_FOR_EXTRACTION reduce production option(fsTypeArgs) ->
-- On INLINE reduce production option(fsTypeArgs) ->
-- On INCLUDE reduce production option(fsTypeArgs) ->
-- On IN reduce production option(fsTypeArgs) ->
-- On IMPLIES reduce production option(fsTypeArgs) ->
-- On IFF reduce production option(fsTypeArgs) ->
-- On IEEE64 reduce production option(fsTypeArgs) ->
-- On IDENT reduce production option(fsTypeArgs) ->
-- On HASH reduce production option(fsTypeArgs) ->
-- On FSDOC_STANDALONE reduce production option(fsTypeArgs) ->
-- On FSDOC reduce production option(fsTypeArgs) ->
-- On FALSE reduce production option(fsTypeArgs) ->
-- On EXCEPTION reduce production option(fsTypeArgs) ->
-- On EQUALS reduce production option(fsTypeArgs) ->
-- On EOF reduce production option(fsTypeArgs) ->
-- On END reduce production option(fsTypeArgs) ->
-- On ELSE reduce production option(fsTypeArgs) ->
-- On EFFECT reduce production option(fsTypeArgs) ->
-- On DOT_LPAREN reduce production option(fsTypeArgs) ->
-- On DOT_LENS_PAREN_LEFT reduce production option(fsTypeArgs) ->
-- On DOT_LBRACK_BAR reduce production option(fsTypeArgs) ->
-- On DOT_LBRACK reduce production option(fsTypeArgs) ->
-- On DOT reduce production option(fsTypeArgs) ->
-- On DISJUNCTION reduce production option(fsTypeArgs) ->
-- On DEFAULT reduce production option(fsTypeArgs) ->
-- On CONJUNCTION reduce production option(fsTypeArgs) ->
-- On COMMA reduce production option(fsTypeArgs) ->
-- On COLON_EQUALS reduce production option(fsTypeArgs) ->
-- On COLON_COLON reduce production option(fsTypeArgs) ->
-- On CHAR reduce production option(fsTypeArgs) ->
-- On BYTEARRAY reduce production option(fsTypeArgs) ->
-- On BY reduce production option(fsTypeArgs) ->
-- On BEGIN reduce production option(fsTypeArgs) ->
-- On BAR_RBRACK reduce production option(fsTypeArgs) ->
-- On BAR reduce production option(fsTypeArgs) ->
-- On BANG_LBRACE reduce production option(fsTypeArgs) ->
-- On BACKTICK reduce production option(fsTypeArgs) ->
-- On ASSUME reduce production option(fsTypeArgs) ->
-- On AND reduce production option(fsTypeArgs) ->
-- On AMP reduce production option(fsTypeArgs) ->
-- On ABSTRACT reduce production option(fsTypeArgs) ->
-- On # reduce production option(fsTypeArgs) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production option(fsTypeArgs) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 88:
## Known stack suffix:
## qlident option(fsTypeArgs)
## LR(1) items:
qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On VAL reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UNOPTEQUALITY reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UNIV_HASH reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UNFOLDABLE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UNFOLD reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UNDERSCORE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UINT8 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UINT64 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UINT32 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On UINT16 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On TYP_APP_GREATER reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On TYPE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On TVAR reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On TRUE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On TOTAL reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On THEN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SUB_EFFECT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SUBTYPE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SUBKIND reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On STRING reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SQUIGGLY_RARROW reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SPLICE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SET_RANGE_OF reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SEMICOLON_SEMICOLON reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On SEMICOLON reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On RPAREN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On REIFY reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On REIFIABLE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On REFLECTABLE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On RBRACK reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On RBRACE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On RARROW reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On RANGE_OF reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On PRIVATE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On PRAGMA_SET_OPTIONS reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On PRAGMA_RESET_OPTIONS reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On PIPE_RIGHT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On PERCENT_LBRACK reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPPREFIX reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX4 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX3 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX2 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX1 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX0d reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX0c reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX0b reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPINFIX0a reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPEN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On OPAQUE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On NOEXTRACT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On NOEQUALITY reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On NEW_EFFECT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On NEW reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On NAME reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On MODULE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On MINUS reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LPAREN_RPAREN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LPAREN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LOGIC reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LET reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LENS_PAREN_RIGHT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LENS_PAREN_LEFT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LBRACK_BAR reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LBRACK_AT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LBRACK reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On LBRACE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On IRREDUCIBLE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INT8 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INT64 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INT32 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INT16 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INLINE_FOR_EXTRACTION reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INLINE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On INCLUDE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On IN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On IMPLIES reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On IFF reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On IEEE64 reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On IDENT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On HASH reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On FSDOC_STANDALONE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On FSDOC reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On FALSE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On EXCEPTION reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On EQUALS reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On EOF reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On END reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On ELSE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On EFFECT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On DOT_LPAREN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On DOT_LENS_PAREN_LEFT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On DOT_LBRACK_BAR reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On DOT_LBRACK reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On DOT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On DISJUNCTION reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On DEFAULT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On CONJUNCTION reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On COMMA reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On COLON_EQUALS reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On COLON_COLON reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On CHAR reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On BYTEARRAY reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On BY reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On BEGIN reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On BAR_RBRACK reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On BAR reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On BANG_LBRACE reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On BACKTICK reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On ASSUME reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On AND reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On AMP reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On ABSTRACT reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
-- On # reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 89:
## Known stack suffix:
## fsTypeArgs
## LR(1) items:
option(fsTypeArgs) -> fsTypeArgs . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production option(fsTypeArgs) -> fsTypeArgs
-- On VAL reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UNOPTEQUALITY reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UNIV_HASH reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UNFOLDABLE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UNFOLD reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UNDERSCORE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UINT8 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UINT64 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UINT32 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On UINT16 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On TYP_APP_GREATER reduce production option(fsTypeArgs) -> fsTypeArgs
-- On TYPE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On TVAR reduce production option(fsTypeArgs) -> fsTypeArgs
-- On TRUE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On TOTAL reduce production option(fsTypeArgs) -> fsTypeArgs
-- On THEN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SUB_EFFECT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SUBTYPE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SUBKIND reduce production option(fsTypeArgs) -> fsTypeArgs
-- On STRING reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SQUIGGLY_RARROW reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SPLICE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SET_RANGE_OF reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SEMICOLON_SEMICOLON reduce production option(fsTypeArgs) -> fsTypeArgs
-- On SEMICOLON reduce production option(fsTypeArgs) -> fsTypeArgs
-- On RPAREN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On REIFY reduce production option(fsTypeArgs) -> fsTypeArgs
-- On REIFIABLE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On REFLECTABLE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On RBRACK reduce production option(fsTypeArgs) -> fsTypeArgs
-- On RBRACE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On RARROW reduce production option(fsTypeArgs) -> fsTypeArgs
-- On RANGE_OF reduce production option(fsTypeArgs) -> fsTypeArgs
-- On PRIVATE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On PRAGMA_SET_OPTIONS reduce production option(fsTypeArgs) -> fsTypeArgs
-- On PRAGMA_RESET_OPTIONS reduce production option(fsTypeArgs) -> fsTypeArgs
-- On PIPE_RIGHT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On PERCENT_LBRACK reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPPREFIX reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX4 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX3 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX2 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX1 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0d reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0c reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0b reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0a reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPEN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On OPAQUE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On NOEXTRACT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On NOEQUALITY reduce production option(fsTypeArgs) -> fsTypeArgs
-- On NEW_EFFECT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On NEW reduce production option(fsTypeArgs) -> fsTypeArgs
-- On NAME reduce production option(fsTypeArgs) -> fsTypeArgs
-- On MODULE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On MINUS reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LPAREN_RPAREN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LPAREN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LOGIC reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LET reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LENS_PAREN_RIGHT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LENS_PAREN_LEFT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LBRACK_BAR reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LBRACK_AT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LBRACK reduce production option(fsTypeArgs) -> fsTypeArgs
-- On LBRACE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On IRREDUCIBLE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INT8 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INT64 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INT32 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INT16 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INLINE_FOR_EXTRACTION reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INLINE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On INCLUDE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On IN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On IMPLIES reduce production option(fsTypeArgs) -> fsTypeArgs
-- On IFF reduce production option(fsTypeArgs) -> fsTypeArgs
-- On IEEE64 reduce production option(fsTypeArgs) -> fsTypeArgs
-- On IDENT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On HASH reduce production option(fsTypeArgs) -> fsTypeArgs
-- On FSDOC_STANDALONE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On FSDOC reduce production option(fsTypeArgs) -> fsTypeArgs
-- On FALSE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On EXCEPTION reduce production option(fsTypeArgs) -> fsTypeArgs
-- On EQUALS reduce production option(fsTypeArgs) -> fsTypeArgs
-- On EOF reduce production option(fsTypeArgs) -> fsTypeArgs
-- On END reduce production option(fsTypeArgs) -> fsTypeArgs
-- On ELSE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On EFFECT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On DOT_LPAREN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On DOT_LENS_PAREN_LEFT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On DOT_LBRACK_BAR reduce production option(fsTypeArgs) -> fsTypeArgs
-- On DOT_LBRACK reduce production option(fsTypeArgs) -> fsTypeArgs
-- On DOT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On DISJUNCTION reduce production option(fsTypeArgs) -> fsTypeArgs
-- On DEFAULT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On CONJUNCTION reduce production option(fsTypeArgs) -> fsTypeArgs
-- On COMMA reduce production option(fsTypeArgs) -> fsTypeArgs
-- On COLON_EQUALS reduce production option(fsTypeArgs) -> fsTypeArgs
-- On COLON_COLON reduce production option(fsTypeArgs) -> fsTypeArgs
-- On CHAR reduce production option(fsTypeArgs) -> fsTypeArgs
-- On BYTEARRAY reduce production option(fsTypeArgs) -> fsTypeArgs
-- On BY reduce production option(fsTypeArgs) -> fsTypeArgs
-- On BEGIN reduce production option(fsTypeArgs) -> fsTypeArgs
-- On BAR_RBRACK reduce production option(fsTypeArgs) -> fsTypeArgs
-- On BAR reduce production option(fsTypeArgs) -> fsTypeArgs
-- On BANG_LBRACE reduce production option(fsTypeArgs) -> fsTypeArgs
-- On BACKTICK reduce production option(fsTypeArgs) -> fsTypeArgs
-- On ASSUME reduce production option(fsTypeArgs) -> fsTypeArgs
-- On AND reduce production option(fsTypeArgs) -> fsTypeArgs
-- On AMP reduce production option(fsTypeArgs) -> fsTypeArgs
-- On ABSTRACT reduce production option(fsTypeArgs) -> fsTypeArgs
-- On # reduce production option(fsTypeArgs) -> fsTypeArgs
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production option(fsTypeArgs) -> fsTypeArgs
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 90:
## Known stack suffix:
## qidentWithTypeArgs(quident,some(fsTypeArgs))
## LR(1) items:
projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs)) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On VAL reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UNOPTEQUALITY reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UNIV_HASH reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UNFOLDABLE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UNFOLD reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UNDERSCORE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UINT8 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UINT64 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UINT32 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On UINT16 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On TYP_APP_GREATER reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On TYPE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On TVAR reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On TRUE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On TOTAL reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On THEN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SUB_EFFECT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SUBTYPE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SUBKIND reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On STRING reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SQUIGGLY_RARROW reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SPLICE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SET_RANGE_OF reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On SEMICOLON reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On RPAREN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On REIFY reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On REIFIABLE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On REFLECTABLE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On RBRACK reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On RBRACE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On RARROW reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On RANGE_OF reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On PRIVATE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On PIPE_RIGHT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On PERCENT_LBRACK reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPPREFIX reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX4 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX3 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX2 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX1 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX0d reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX0c reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX0b reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPINFIX0a reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPEN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On OPAQUE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On NOEXTRACT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On NOEQUALITY reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On NEW_EFFECT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On NEW reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On NAME reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On MODULE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On MINUS reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LPAREN_RPAREN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LPAREN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LOGIC reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LET reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LENS_PAREN_LEFT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LBRACK_BAR reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LBRACK_AT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LBRACK reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On LBRACE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On IRREDUCIBLE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INT8 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INT64 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INT32 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INT16 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INLINE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On INCLUDE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On IN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On IMPLIES reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On IFF reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On IEEE64 reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On IDENT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On HASH reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On FSDOC_STANDALONE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On FSDOC reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On FALSE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On EXCEPTION reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On EQUALS reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On EOF reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On END reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On ELSE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On EFFECT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On DOT_LPAREN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On DOT_LBRACK_BAR reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On DOT_LBRACK reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On DOT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On DISJUNCTION reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On DEFAULT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On CONJUNCTION reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On COMMA reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On COLON_EQUALS reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On COLON_COLON reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On CHAR reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On BYTEARRAY reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On BY reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On BEGIN reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On BAR_RBRACK reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On BAR reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On BANG_LBRACE reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On BACKTICK reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On ASSUME reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On AND reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On AMP reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On ABSTRACT reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
-- On # reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 91:
## Known stack suffix:
## qidentWithTypeArgs(qlident,option(fsTypeArgs))
## LR(1) items:
projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs)) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On VAL reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UNOPTEQUALITY reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UNIV_HASH reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UNFOLDABLE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UNFOLD reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UNDERSCORE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UINT8 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UINT64 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UINT32 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On UINT16 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On TYP_APP_GREATER reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On TYPE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On TVAR reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On TRUE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On TOTAL reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On THEN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SUB_EFFECT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SUBTYPE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SUBKIND reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On STRING reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SQUIGGLY_RARROW reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SPLICE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SET_RANGE_OF reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On SEMICOLON reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On RPAREN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On REIFY reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On REIFIABLE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On REFLECTABLE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On RBRACK reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On RBRACE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On RARROW reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On RANGE_OF reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On PRIVATE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On PIPE_RIGHT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On PERCENT_LBRACK reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPPREFIX reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX4 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX3 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX2 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX1 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX0d reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX0c reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX0b reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPINFIX0a reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPEN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On OPAQUE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On NOEXTRACT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On NOEQUALITY reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On NEW_EFFECT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On NEW reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On NAME reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On MODULE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On MINUS reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LPAREN_RPAREN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LPAREN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LOGIC reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LET reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LENS_PAREN_LEFT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LBRACK_BAR reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LBRACK_AT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LBRACK reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On LBRACE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On IRREDUCIBLE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INT8 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INT64 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INT32 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INT16 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INLINE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On INCLUDE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On IN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On IMPLIES reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On IFF reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On IEEE64 reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On IDENT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On HASH reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On FSDOC_STANDALONE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On FSDOC reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On FALSE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On EXCEPTION reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On EQUALS reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On EOF reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On END reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On ELSE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On EFFECT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On DOT_LPAREN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On DOT_LBRACK_BAR reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On DOT_LBRACK reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On DOT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On DISJUNCTION reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On DEFAULT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On CONJUNCTION reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On COMMA reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On COLON_EQUALS reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On COLON_COLON reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On CHAR reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On BYTEARRAY reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On BY reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On BEGIN reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On BAR_RBRACK reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On BAR reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On BANG_LBRACE reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On BACKTICK reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On ASSUME reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On AND reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On AMP reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On ABSTRACT reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
-- On # reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 92:
## Known stack suffix:
## projectionLHS
## LR(1) items:
atomicTermNotQUident -> projectionLHS . list(__anonymous_10) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 93
-- On list(__anonymous_10) shift to state 99
## Reductions:
-- On WITH reduce production list(__anonymous_10) ->
-- On VAL reduce production list(__anonymous_10) ->
-- On UNOPTEQUALITY reduce production list(__anonymous_10) ->
-- On UNIV_HASH reduce production list(__anonymous_10) ->
-- On UNFOLDABLE reduce production list(__anonymous_10) ->
-- On UNFOLD reduce production list(__anonymous_10) ->
-- On UNDERSCORE reduce production list(__anonymous_10) ->
-- On UINT8 reduce production list(__anonymous_10) ->
-- On UINT64 reduce production list(__anonymous_10) ->
-- On UINT32 reduce production list(__anonymous_10) ->
-- On UINT16 reduce production list(__anonymous_10) ->
-- On TYP_APP_GREATER reduce production list(__anonymous_10) ->
-- On TYPE reduce production list(__anonymous_10) ->
-- On TVAR reduce production list(__anonymous_10) ->
-- On TRUE reduce production list(__anonymous_10) ->
-- On TOTAL reduce production list(__anonymous_10) ->
-- On THEN reduce production list(__anonymous_10) ->
-- On SUB_EFFECT reduce production list(__anonymous_10) ->
-- On SUBTYPE reduce production list(__anonymous_10) ->
-- On SUBKIND reduce production list(__anonymous_10) ->
-- On STRING reduce production list(__anonymous_10) ->
-- On SQUIGGLY_RARROW reduce production list(__anonymous_10) ->
-- On SPLICE reduce production list(__anonymous_10) ->
-- On SET_RANGE_OF reduce production list(__anonymous_10) ->
-- On SEMICOLON_SEMICOLON reduce production list(__anonymous_10) ->
-- On SEMICOLON reduce production list(__anonymous_10) ->
-- On RPAREN reduce production list(__anonymous_10) ->
-- On REIFY reduce production list(__anonymous_10) ->
-- On REIFIABLE reduce production list(__anonymous_10) ->
-- On REFLECTABLE reduce production list(__anonymous_10) ->
-- On RBRACK reduce production list(__anonymous_10) ->
-- On RBRACE reduce production list(__anonymous_10) ->
-- On RARROW reduce production list(__anonymous_10) ->
-- On RANGE_OF reduce production list(__anonymous_10) ->
-- On PRIVATE reduce production list(__anonymous_10) ->
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_10) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_10) ->
-- On PIPE_RIGHT reduce production list(__anonymous_10) ->
-- On PERCENT_LBRACK reduce production list(__anonymous_10) ->
-- On OPPREFIX reduce production list(__anonymous_10) ->
-- On OPINFIX4 reduce production list(__anonymous_10) ->
-- On OPINFIX3 reduce production list(__anonymous_10) ->
-- On OPINFIX2 reduce production list(__anonymous_10) ->
-- On OPINFIX1 reduce production list(__anonymous_10) ->
-- On OPINFIX0d reduce production list(__anonymous_10) ->
-- On OPINFIX0c reduce production list(__anonymous_10) ->
-- On OPINFIX0b reduce production list(__anonymous_10) ->
-- On OPINFIX0a reduce production list(__anonymous_10) ->
-- On OPEN reduce production list(__anonymous_10) ->
-- On OPAQUE reduce production list(__anonymous_10) ->
-- On NOEXTRACT reduce production list(__anonymous_10) ->
-- On NOEQUALITY reduce production list(__anonymous_10) ->
-- On NEW_EFFECT reduce production list(__anonymous_10) ->
-- On NEW reduce production list(__anonymous_10) ->
-- On NAME reduce production list(__anonymous_10) ->
-- On MODULE reduce production list(__anonymous_10) ->
-- On MINUS reduce production list(__anonymous_10) ->
-- On LPAREN_RPAREN reduce production list(__anonymous_10) ->
-- On LPAREN reduce production list(__anonymous_10) ->
-- On LOGIC reduce production list(__anonymous_10) ->
-- On LET reduce production list(__anonymous_10) ->
-- On LENS_PAREN_RIGHT reduce production list(__anonymous_10) ->
-- On LENS_PAREN_LEFT reduce production list(__anonymous_10) ->
-- On LBRACK_BAR reduce production list(__anonymous_10) ->
-- On LBRACK_AT reduce production list(__anonymous_10) ->
-- On LBRACK reduce production list(__anonymous_10) ->
-- On LBRACE reduce production list(__anonymous_10) ->
-- On IRREDUCIBLE reduce production list(__anonymous_10) ->
-- On INT8 reduce production list(__anonymous_10) ->
-- On INT64 reduce production list(__anonymous_10) ->
-- On INT32 reduce production list(__anonymous_10) ->
-- On INT16 reduce production list(__anonymous_10) ->
-- On INT reduce production list(__anonymous_10) ->
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_10) ->
-- On INLINE reduce production list(__anonymous_10) ->
-- On INCLUDE reduce production list(__anonymous_10) ->
-- On IN reduce production list(__anonymous_10) ->
-- On IMPLIES reduce production list(__anonymous_10) ->
-- On IFF reduce production list(__anonymous_10) ->
-- On IEEE64 reduce production list(__anonymous_10) ->
-- On IDENT reduce production list(__anonymous_10) ->
-- On HASH reduce production list(__anonymous_10) ->
-- On FSDOC_STANDALONE reduce production list(__anonymous_10) ->
-- On FSDOC reduce production list(__anonymous_10) ->
-- On FALSE reduce production list(__anonymous_10) ->
-- On EXCEPTION reduce production list(__anonymous_10) ->
-- On EQUALS reduce production list(__anonymous_10) ->
-- On EOF reduce production list(__anonymous_10) ->
-- On END reduce production list(__anonymous_10) ->
-- On ELSE reduce production list(__anonymous_10) ->
-- On EFFECT reduce production list(__anonymous_10) ->
-- On DOT_LPAREN reduce production list(__anonymous_10) ->
-- On DOT_LENS_PAREN_LEFT reduce production list(__anonymous_10) ->
-- On DOT_LBRACK_BAR reduce production list(__anonymous_10) ->
-- On DOT_LBRACK reduce production list(__anonymous_10) ->
-- On DISJUNCTION reduce production list(__anonymous_10) ->
-- On DEFAULT reduce production list(__anonymous_10) ->
-- On CONJUNCTION reduce production list(__anonymous_10) ->
-- On COMMA reduce production list(__anonymous_10) ->
-- On COLON_EQUALS reduce production list(__anonymous_10) ->
-- On COLON_COLON reduce production list(__anonymous_10) ->
-- On CHAR reduce production list(__anonymous_10) ->
-- On BYTEARRAY reduce production list(__anonymous_10) ->
-- On BY reduce production list(__anonymous_10) ->
-- On BEGIN reduce production list(__anonymous_10) ->
-- On BAR_RBRACK reduce production list(__anonymous_10) ->
-- On BAR reduce production list(__anonymous_10) ->
-- On BANG_LBRACE reduce production list(__anonymous_10) ->
-- On BACKTICK reduce production list(__anonymous_10) ->
-- On ASSUME reduce production list(__anonymous_10) ->
-- On AND reduce production list(__anonymous_10) ->
-- On AMP reduce production list(__anonymous_10) ->
-- On ABSTRACT reduce production list(__anonymous_10) ->
-- On # reduce production list(__anonymous_10) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production list(__anonymous_10) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 93:
## Known stack suffix:
## DOT
## LR(1) items:
list(__anonymous_10) -> DOT . qlident list(__anonymous_10) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On qlident shift to state 96
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 94:
## Known stack suffix:
## uident
## LR(1) items:
path(lident) -> uident . DOT path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## uident DOT
## LR(1) items:
path(lident) -> uident DOT . path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On path(lident) shift to state 79
-- On lident shift to state 80
## Reductions:

State 96:
## Known stack suffix:
## DOT qlident
## LR(1) items:
list(__anonymous_10) -> DOT qlident . list(__anonymous_10) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 93
-- On list(__anonymous_10) shift to state 97
## Reductions:
-- On WITH reduce production list(__anonymous_10) ->
-- On VAL reduce production list(__anonymous_10) ->
-- On UNOPTEQUALITY reduce production list(__anonymous_10) ->
-- On UNIV_HASH reduce production list(__anonymous_10) ->
-- On UNFOLDABLE reduce production list(__anonymous_10) ->
-- On UNFOLD reduce production list(__anonymous_10) ->
-- On UNDERSCORE reduce production list(__anonymous_10) ->
-- On UINT8 reduce production list(__anonymous_10) ->
-- On UINT64 reduce production list(__anonymous_10) ->
-- On UINT32 reduce production list(__anonymous_10) ->
-- On UINT16 reduce production list(__anonymous_10) ->
-- On TYP_APP_GREATER reduce production list(__anonymous_10) ->
-- On TYPE reduce production list(__anonymous_10) ->
-- On TVAR reduce production list(__anonymous_10) ->
-- On TRUE reduce production list(__anonymous_10) ->
-- On TOTAL reduce production list(__anonymous_10) ->
-- On THEN reduce production list(__anonymous_10) ->
-- On SUB_EFFECT reduce production list(__anonymous_10) ->
-- On SUBTYPE reduce production list(__anonymous_10) ->
-- On SUBKIND reduce production list(__anonymous_10) ->
-- On STRING reduce production list(__anonymous_10) ->
-- On SQUIGGLY_RARROW reduce production list(__anonymous_10) ->
-- On SPLICE reduce production list(__anonymous_10) ->
-- On SET_RANGE_OF reduce production list(__anonymous_10) ->
-- On SEMICOLON_SEMICOLON reduce production list(__anonymous_10) ->
-- On SEMICOLON reduce production list(__anonymous_10) ->
-- On RPAREN reduce production list(__anonymous_10) ->
-- On REIFY reduce production list(__anonymous_10) ->
-- On REIFIABLE reduce production list(__anonymous_10) ->
-- On REFLECTABLE reduce production list(__anonymous_10) ->
-- On RBRACK reduce production list(__anonymous_10) ->
-- On RBRACE reduce production list(__anonymous_10) ->
-- On RARROW reduce production list(__anonymous_10) ->
-- On RANGE_OF reduce production list(__anonymous_10) ->
-- On PRIVATE reduce production list(__anonymous_10) ->
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_10) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_10) ->
-- On PIPE_RIGHT reduce production list(__anonymous_10) ->
-- On PERCENT_LBRACK reduce production list(__anonymous_10) ->
-- On OPPREFIX reduce production list(__anonymous_10) ->
-- On OPINFIX4 reduce production list(__anonymous_10) ->
-- On OPINFIX3 reduce production list(__anonymous_10) ->
-- On OPINFIX2 reduce production list(__anonymous_10) ->
-- On OPINFIX1 reduce production list(__anonymous_10) ->
-- On OPINFIX0d reduce production list(__anonymous_10) ->
-- On OPINFIX0c reduce production list(__anonymous_10) ->
-- On OPINFIX0b reduce production list(__anonymous_10) ->
-- On OPINFIX0a reduce production list(__anonymous_10) ->
-- On OPEN reduce production list(__anonymous_10) ->
-- On OPAQUE reduce production list(__anonymous_10) ->
-- On NOEXTRACT reduce production list(__anonymous_10) ->
-- On NOEQUALITY reduce production list(__anonymous_10) ->
-- On NEW_EFFECT reduce production list(__anonymous_10) ->
-- On NEW reduce production list(__anonymous_10) ->
-- On NAME reduce production list(__anonymous_10) ->
-- On MODULE reduce production list(__anonymous_10) ->
-- On MINUS reduce production list(__anonymous_10) ->
-- On LPAREN_RPAREN reduce production list(__anonymous_10) ->
-- On LPAREN reduce production list(__anonymous_10) ->
-- On LOGIC reduce production list(__anonymous_10) ->
-- On LET reduce production list(__anonymous_10) ->
-- On LENS_PAREN_RIGHT reduce production list(__anonymous_10) ->
-- On LENS_PAREN_LEFT reduce production list(__anonymous_10) ->
-- On LBRACK_BAR reduce production list(__anonymous_10) ->
-- On LBRACK_AT reduce production list(__anonymous_10) ->
-- On LBRACK reduce production list(__anonymous_10) ->
-- On LBRACE reduce production list(__anonymous_10) ->
-- On IRREDUCIBLE reduce production list(__anonymous_10) ->
-- On INT8 reduce production list(__anonymous_10) ->
-- On INT64 reduce production list(__anonymous_10) ->
-- On INT32 reduce production list(__anonymous_10) ->
-- On INT16 reduce production list(__anonymous_10) ->
-- On INT reduce production list(__anonymous_10) ->
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_10) ->
-- On INLINE reduce production list(__anonymous_10) ->
-- On INCLUDE reduce production list(__anonymous_10) ->
-- On IN reduce production list(__anonymous_10) ->
-- On IMPLIES reduce production list(__anonymous_10) ->
-- On IFF reduce production list(__anonymous_10) ->
-- On IEEE64 reduce production list(__anonymous_10) ->
-- On IDENT reduce production list(__anonymous_10) ->
-- On HASH reduce production list(__anonymous_10) ->
-- On FSDOC_STANDALONE reduce production list(__anonymous_10) ->
-- On FSDOC reduce production list(__anonymous_10) ->
-- On FALSE reduce production list(__anonymous_10) ->
-- On EXCEPTION reduce production list(__anonymous_10) ->
-- On EQUALS reduce production list(__anonymous_10) ->
-- On EOF reduce production list(__anonymous_10) ->
-- On END reduce production list(__anonymous_10) ->
-- On ELSE reduce production list(__anonymous_10) ->
-- On EFFECT reduce production list(__anonymous_10) ->
-- On DOT_LPAREN reduce production list(__anonymous_10) ->
-- On DOT_LENS_PAREN_LEFT reduce production list(__anonymous_10) ->
-- On DOT_LBRACK_BAR reduce production list(__anonymous_10) ->
-- On DOT_LBRACK reduce production list(__anonymous_10) ->
-- On DISJUNCTION reduce production list(__anonymous_10) ->
-- On DEFAULT reduce production list(__anonymous_10) ->
-- On CONJUNCTION reduce production list(__anonymous_10) ->
-- On COMMA reduce production list(__anonymous_10) ->
-- On COLON_EQUALS reduce production list(__anonymous_10) ->
-- On COLON_COLON reduce production list(__anonymous_10) ->
-- On CHAR reduce production list(__anonymous_10) ->
-- On BYTEARRAY reduce production list(__anonymous_10) ->
-- On BY reduce production list(__anonymous_10) ->
-- On BEGIN reduce production list(__anonymous_10) ->
-- On BAR_RBRACK reduce production list(__anonymous_10) ->
-- On BAR reduce production list(__anonymous_10) ->
-- On BANG_LBRACE reduce production list(__anonymous_10) ->
-- On BACKTICK reduce production list(__anonymous_10) ->
-- On ASSUME reduce production list(__anonymous_10) ->
-- On AND reduce production list(__anonymous_10) ->
-- On AMP reduce production list(__anonymous_10) ->
-- On ABSTRACT reduce production list(__anonymous_10) ->
-- On # reduce production list(__anonymous_10) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production list(__anonymous_10) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 97:
## Known stack suffix:
## DOT qlident list(__anonymous_10)
## LR(1) items:
list(__anonymous_10) -> DOT qlident list(__anonymous_10) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On VAL reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UNOPTEQUALITY reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UNIV_HASH reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UNFOLDABLE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UNFOLD reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UNDERSCORE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UINT8 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UINT64 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UINT32 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On UINT16 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On TYP_APP_GREATER reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On TYPE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On TVAR reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On TRUE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On TOTAL reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On THEN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SUB_EFFECT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SUBTYPE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SUBKIND reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On STRING reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SQUIGGLY_RARROW reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SPLICE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SET_RANGE_OF reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SEMICOLON_SEMICOLON reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On SEMICOLON reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On RPAREN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On REIFY reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On REIFIABLE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On REFLECTABLE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On RBRACK reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On RBRACE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On RARROW reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On RANGE_OF reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On PRIVATE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On PIPE_RIGHT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On PERCENT_LBRACK reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPPREFIX reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX4 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX3 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX2 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX1 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX0d reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX0c reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX0b reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPINFIX0a reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPEN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On OPAQUE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On NOEXTRACT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On NOEQUALITY reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On NEW_EFFECT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On NEW reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On NAME reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On MODULE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On MINUS reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LPAREN_RPAREN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LPAREN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LOGIC reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LET reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LENS_PAREN_RIGHT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LENS_PAREN_LEFT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LBRACK_BAR reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LBRACK_AT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LBRACK reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On LBRACE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On IRREDUCIBLE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INT8 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INT64 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INT32 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INT16 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INLINE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On INCLUDE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On IN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On IMPLIES reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On IFF reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On IEEE64 reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On IDENT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On HASH reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On FSDOC_STANDALONE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On FSDOC reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On FALSE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On EXCEPTION reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On EQUALS reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On EOF reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On END reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On ELSE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On EFFECT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On DOT_LPAREN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On DOT_LENS_PAREN_LEFT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On DOT_LBRACK_BAR reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On DOT_LBRACK reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On DISJUNCTION reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On DEFAULT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On CONJUNCTION reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On COMMA reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On COLON_EQUALS reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On COLON_COLON reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On CHAR reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On BYTEARRAY reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On BY reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On BEGIN reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On BAR_RBRACK reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On BAR reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On BANG_LBRACE reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On BACKTICK reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On ASSUME reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On AND reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On AMP reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On ABSTRACT reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
-- On # reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production list(__anonymous_10) -> DOT qlident list(__anonymous_10)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 98:
## Known stack suffix:
## path(lident)
## LR(1) items:
qlident -> path(lident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production qlident -> path(lident)
-- On VAL reduce production qlident -> path(lident)
-- On UNOPTEQUALITY reduce production qlident -> path(lident)
-- On UNIV_HASH reduce production qlident -> path(lident)
-- On UNFOLDABLE reduce production qlident -> path(lident)
-- On UNFOLD reduce production qlident -> path(lident)
-- On UNDERSCORE reduce production qlident -> path(lident)
-- On UINT8 reduce production qlident -> path(lident)
-- On UINT64 reduce production qlident -> path(lident)
-- On UINT32 reduce production qlident -> path(lident)
-- On UINT16 reduce production qlident -> path(lident)
-- On TYP_APP_LESS reduce production qlident -> path(lident)
-- On TYP_APP_GREATER reduce production qlident -> path(lident)
-- On TYPE reduce production qlident -> path(lident)
-- On TVAR reduce production qlident -> path(lident)
-- On TRUE reduce production qlident -> path(lident)
-- On TOTAL reduce production qlident -> path(lident)
-- On THEN reduce production qlident -> path(lident)
-- On SUB_EFFECT reduce production qlident -> path(lident)
-- On SUBTYPE reduce production qlident -> path(lident)
-- On SUBKIND reduce production qlident -> path(lident)
-- On STRING reduce production qlident -> path(lident)
-- On SQUIGGLY_RARROW reduce production qlident -> path(lident)
-- On SPLICE reduce production qlident -> path(lident)
-- On SET_RANGE_OF reduce production qlident -> path(lident)
-- On SEMICOLON_SEMICOLON reduce production qlident -> path(lident)
-- On SEMICOLON reduce production qlident -> path(lident)
-- On RPAREN reduce production qlident -> path(lident)
-- On REIFY reduce production qlident -> path(lident)
-- On REIFIABLE reduce production qlident -> path(lident)
-- On REFLECTABLE reduce production qlident -> path(lident)
-- On RBRACK reduce production qlident -> path(lident)
-- On RBRACE reduce production qlident -> path(lident)
-- On RARROW reduce production qlident -> path(lident)
-- On RANGE_OF reduce production qlident -> path(lident)
-- On PRIVATE reduce production qlident -> path(lident)
-- On PRAGMA_SET_OPTIONS reduce production qlident -> path(lident)
-- On PRAGMA_RESET_OPTIONS reduce production qlident -> path(lident)
-- On PIPE_RIGHT reduce production qlident -> path(lident)
-- On PERCENT_LBRACK reduce production qlident -> path(lident)
-- On OPPREFIX reduce production qlident -> path(lident)
-- On OPINFIX4 reduce production qlident -> path(lident)
-- On OPINFIX3 reduce production qlident -> path(lident)
-- On OPINFIX2 reduce production qlident -> path(lident)
-- On OPINFIX1 reduce production qlident -> path(lident)
-- On OPINFIX0d reduce production qlident -> path(lident)
-- On OPINFIX0c reduce production qlident -> path(lident)
-- On OPINFIX0b reduce production qlident -> path(lident)
-- On OPINFIX0a reduce production qlident -> path(lident)
-- On OPEN reduce production qlident -> path(lident)
-- On OPAQUE reduce production qlident -> path(lident)
-- On NOEXTRACT reduce production qlident -> path(lident)
-- On NOEQUALITY reduce production qlident -> path(lident)
-- On NEW_EFFECT reduce production qlident -> path(lident)
-- On NEW reduce production qlident -> path(lident)
-- On NAME reduce production qlident -> path(lident)
-- On MODULE reduce production qlident -> path(lident)
-- On MINUS reduce production qlident -> path(lident)
-- On LPAREN_RPAREN reduce production qlident -> path(lident)
-- On LPAREN reduce production qlident -> path(lident)
-- On LOGIC reduce production qlident -> path(lident)
-- On LET reduce production qlident -> path(lident)
-- On LENS_PAREN_RIGHT reduce production qlident -> path(lident)
-- On LENS_PAREN_LEFT reduce production qlident -> path(lident)
-- On LBRACK_BAR reduce production qlident -> path(lident)
-- On LBRACK_AT reduce production qlident -> path(lident)
-- On LBRACK reduce production qlident -> path(lident)
-- On LBRACE reduce production qlident -> path(lident)
-- On IRREDUCIBLE reduce production qlident -> path(lident)
-- On INT8 reduce production qlident -> path(lident)
-- On INT64 reduce production qlident -> path(lident)
-- On INT32 reduce production qlident -> path(lident)
-- On INT16 reduce production qlident -> path(lident)
-- On INT reduce production qlident -> path(lident)
-- On INLINE_FOR_EXTRACTION reduce production qlident -> path(lident)
-- On INLINE reduce production qlident -> path(lident)
-- On INCLUDE reduce production qlident -> path(lident)
-- On IN reduce production qlident -> path(lident)
-- On IMPLIES reduce production qlident -> path(lident)
-- On IFF reduce production qlident -> path(lident)
-- On IEEE64 reduce production qlident -> path(lident)
-- On IDENT reduce production qlident -> path(lident)
-- On HASH reduce production qlident -> path(lident)
-- On FSDOC_STANDALONE reduce production qlident -> path(lident)
-- On FSDOC reduce production qlident -> path(lident)
-- On FALSE reduce production qlident -> path(lident)
-- On EXCEPTION reduce production qlident -> path(lident)
-- On EQUALS reduce production qlident -> path(lident)
-- On EOF reduce production qlident -> path(lident)
-- On END reduce production qlident -> path(lident)
-- On ELSE reduce production qlident -> path(lident)
-- On EFFECT reduce production qlident -> path(lident)
-- On DOT_LPAREN reduce production qlident -> path(lident)
-- On DOT_LENS_PAREN_LEFT reduce production qlident -> path(lident)
-- On DOT_LBRACK_BAR reduce production qlident -> path(lident)
-- On DOT_LBRACK reduce production qlident -> path(lident)
-- On DOT reduce production qlident -> path(lident)
-- On DISJUNCTION reduce production qlident -> path(lident)
-- On DEFAULT reduce production qlident -> path(lident)
-- On CONJUNCTION reduce production qlident -> path(lident)
-- On COMMA reduce production qlident -> path(lident)
-- On COLON_EQUALS reduce production qlident -> path(lident)
-- On COLON_COLON reduce production qlident -> path(lident)
-- On CHAR reduce production qlident -> path(lident)
-- On BYTEARRAY reduce production qlident -> path(lident)
-- On BY reduce production qlident -> path(lident)
-- On BEGIN reduce production qlident -> path(lident)
-- On BAR_RBRACK reduce production qlident -> path(lident)
-- On BAR reduce production qlident -> path(lident)
-- On BANG_LBRACE reduce production qlident -> path(lident)
-- On BACKTICK reduce production qlident -> path(lident)
-- On ASSUME reduce production qlident -> path(lident)
-- On AND reduce production qlident -> path(lident)
-- On AMP reduce production qlident -> path(lident)
-- On ABSTRACT reduce production qlident -> path(lident)
-- On # reduce production qlident -> path(lident)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production qlident -> path(lident)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 99:
## Known stack suffix:
## projectionLHS list(__anonymous_10)
## LR(1) items:
atomicTermNotQUident -> projectionLHS list(__anonymous_10) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On VAL reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UNIV_HASH reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UNFOLDABLE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UNFOLD reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UNDERSCORE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UINT8 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UINT64 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UINT32 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On UINT16 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On TYPE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On TVAR reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On TRUE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On TOTAL reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On THEN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SUB_EFFECT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SUBTYPE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SUBKIND reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On STRING reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SPLICE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On SEMICOLON reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On RPAREN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On REIFY reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On REIFIABLE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On REFLECTABLE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On RBRACK reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On RBRACE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On RARROW reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On RANGE_OF reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On PRIVATE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPPREFIX reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX4 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX3 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX2 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX1 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX0d reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX0c reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX0b reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPINFIX0a reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPEN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On OPAQUE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On NOEXTRACT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On NOEQUALITY reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On NEW_EFFECT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On NEW reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On NAME reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On MODULE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On MINUS reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LPAREN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LOGIC reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LET reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LBRACK_BAR reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LBRACK_AT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LBRACK reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On LBRACE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INT8 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INT64 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INT32 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INT16 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INLINE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On INCLUDE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On IN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On IMPLIES reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On IFF reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On IEEE64 reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On IDENT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On HASH reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On FSDOC reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On FALSE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On EXCEPTION reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On EQUALS reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On EOF reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On END reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On ELSE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On EFFECT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On DOT_LPAREN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On DOT_LBRACK reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On DISJUNCTION reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On DEFAULT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On CONJUNCTION reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On COMMA reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On COLON_EQUALS reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On COLON_COLON reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On CHAR reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On BYTEARRAY reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On BY reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On BEGIN reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On BAR_RBRACK reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On BAR reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On BANG_LBRACE reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On BACKTICK reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On ASSUME reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On AND reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On AMP reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On ABSTRACT reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
-- On # reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> projectionLHS list(__anonymous_10)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 100:
## Known stack suffix:
## path(uident)
## LR(1) items:
quident -> path(uident) . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production quident -> path(uident)
-- On WHEN reduce production quident -> path(uident)
-- On VAL reduce production quident -> path(uident)
-- On UNOPTEQUALITY reduce production quident -> path(uident)
-- On UNIV_HASH reduce production quident -> path(uident)
-- On UNFOLDABLE reduce production quident -> path(uident)
-- On UNFOLD reduce production quident -> path(uident)
-- On UNDERSCORE reduce production quident -> path(uident)
-- On UINT8 reduce production quident -> path(uident)
-- On UINT64 reduce production quident -> path(uident)
-- On UINT32 reduce production quident -> path(uident)
-- On UINT16 reduce production quident -> path(uident)
-- On TYP_APP_LESS reduce production quident -> path(uident)
-- On TYP_APP_GREATER reduce production quident -> path(uident)
-- On TYPE reduce production quident -> path(uident)
-- On TVAR reduce production quident -> path(uident)
-- On TRUE reduce production quident -> path(uident)
-- On TOTAL reduce production quident -> path(uident)
-- On THEN reduce production quident -> path(uident)
-- On SUB_EFFECT reduce production quident -> path(uident)
-- On SUBTYPE reduce production quident -> path(uident)
-- On SUBKIND reduce production quident -> path(uident)
-- On STRING reduce production quident -> path(uident)
-- On SQUIGGLY_RARROW reduce production quident -> path(uident)
-- On SPLICE reduce production quident -> path(uident)
-- On SET_RANGE_OF reduce production quident -> path(uident)
-- On SEMICOLON_SEMICOLON reduce production quident -> path(uident)
-- On SEMICOLON reduce production quident -> path(uident)
-- On RPAREN reduce production quident -> path(uident)
-- On REIFY reduce production quident -> path(uident)
-- On REIFIABLE reduce production quident -> path(uident)
-- On REFLECTABLE reduce production quident -> path(uident)
-- On RBRACK reduce production quident -> path(uident)
-- On RBRACE reduce production quident -> path(uident)
-- On RARROW reduce production quident -> path(uident)
-- On RANGE_OF reduce production quident -> path(uident)
-- On QMARK_DOT reduce production quident -> path(uident)
-- On QMARK reduce production quident -> path(uident)
-- On PRIVATE reduce production quident -> path(uident)
-- On PRAGMA_SET_OPTIONS reduce production quident -> path(uident)
-- On PRAGMA_RESET_OPTIONS reduce production quident -> path(uident)
-- On PIPE_RIGHT reduce production quident -> path(uident)
-- On PERCENT_LBRACK reduce production quident -> path(uident)
-- On OPPREFIX reduce production quident -> path(uident)
-- On OPINFIX4 reduce production quident -> path(uident)
-- On OPINFIX3 reduce production quident -> path(uident)
-- On OPINFIX2 reduce production quident -> path(uident)
-- On OPINFIX1 reduce production quident -> path(uident)
-- On OPINFIX0d reduce production quident -> path(uident)
-- On OPINFIX0c reduce production quident -> path(uident)
-- On OPINFIX0b reduce production quident -> path(uident)
-- On OPINFIX0a reduce production quident -> path(uident)
-- On OPEN reduce production quident -> path(uident)
-- On OPAQUE reduce production quident -> path(uident)
-- On NOEXTRACT reduce production quident -> path(uident)
-- On NOEQUALITY reduce production quident -> path(uident)
-- On NEW_EFFECT reduce production quident -> path(uident)
-- On NEW reduce production quident -> path(uident)
-- On NAME reduce production quident -> path(uident)
-- On MODULE reduce production quident -> path(uident)
-- On MINUS reduce production quident -> path(uident)
-- On LPAREN_RPAREN reduce production quident -> path(uident)
-- On LPAREN reduce production quident -> path(uident)
-- On LOGIC reduce production quident -> path(uident)
-- On LET reduce production quident -> path(uident)
-- On LENS_PAREN_RIGHT reduce production quident -> path(uident)
-- On LENS_PAREN_LEFT reduce production quident -> path(uident)
-- On LBRACK_BAR reduce production quident -> path(uident)
-- On LBRACK_AT reduce production quident -> path(uident)
-- On LBRACK reduce production quident -> path(uident)
-- On LBRACE reduce production quident -> path(uident)
-- On IRREDUCIBLE reduce production quident -> path(uident)
-- On INT8 reduce production quident -> path(uident)
-- On INT64 reduce production quident -> path(uident)
-- On INT32 reduce production quident -> path(uident)
-- On INT16 reduce production quident -> path(uident)
-- On INT reduce production quident -> path(uident)
-- On INLINE_FOR_EXTRACTION reduce production quident -> path(uident)
-- On INLINE reduce production quident -> path(uident)
-- On INCLUDE reduce production quident -> path(uident)
-- On IN reduce production quident -> path(uident)
-- On IMPLIES reduce production quident -> path(uident)
-- On IFF reduce production quident -> path(uident)
-- On IEEE64 reduce production quident -> path(uident)
-- On IDENT reduce production quident -> path(uident)
-- On HASH reduce production quident -> path(uident)
-- On FSDOC_STANDALONE reduce production quident -> path(uident)
-- On FSDOC reduce production quident -> path(uident)
-- On FALSE reduce production quident -> path(uident)
-- On EXCEPTION reduce production quident -> path(uident)
-- On EQUALS reduce production quident -> path(uident)
-- On EOF reduce production quident -> path(uident)
-- On END reduce production quident -> path(uident)
-- On ELSE reduce production quident -> path(uident)
-- On EFFECT reduce production quident -> path(uident)
-- On DOT_LPAREN reduce production quident -> path(uident)
-- On DOLLAR reduce production quident -> path(uident)
-- On DISJUNCTION reduce production quident -> path(uident)
-- On DEFAULT reduce production quident -> path(uident)
-- On CONJUNCTION reduce production quident -> path(uident)
-- On COMMA reduce production quident -> path(uident)
-- On COLON_EQUALS reduce production quident -> path(uident)
-- On COLON_COLON reduce production quident -> path(uident)
-- On COLON reduce production quident -> path(uident)
-- On CHAR reduce production quident -> path(uident)
-- On BYTEARRAY reduce production quident -> path(uident)
-- On BY reduce production quident -> path(uident)
-- On BEGIN reduce production quident -> path(uident)
-- On BAR_RBRACK reduce production quident -> path(uident)
-- On BAR reduce production quident -> path(uident)
-- On BANG_LBRACE reduce production quident -> path(uident)
-- On BACKTICK reduce production quident -> path(uident)
-- On ASSUME reduce production quident -> path(uident)
-- On AND reduce production quident -> path(uident)
-- On AMP reduce production quident -> path(uident)
-- On ABSTRACT reduce production quident -> path(uident)
-- On # reduce production quident -> path(uident)
** End-of-stream conflict on WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production quident -> path(uident)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 101:
## Known stack suffix:
## opPrefixTerm(atomicTermQUident)
## LR(1) items:
atomicTerm -> opPrefixTerm(atomicTermQUident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On VAL reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UNOPTEQUALITY reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UNIV_HASH reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UNFOLDABLE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UNFOLD reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UNDERSCORE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UINT8 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UINT64 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UINT32 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On UINT16 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On TYP_APP_GREATER reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On TYPE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On TVAR reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On TRUE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On TOTAL reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On THEN reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SUB_EFFECT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SUBTYPE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SUBKIND reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On STRING reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SQUIGGLY_RARROW reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SPLICE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SET_RANGE_OF reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On SEMICOLON reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On RPAREN reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On REIFY reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On REIFIABLE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On REFLECTABLE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On RBRACK reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On RBRACE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On RARROW reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On RANGE_OF reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On PRIVATE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On PIPE_RIGHT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On PERCENT_LBRACK reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPPREFIX reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX4 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX3 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX2 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX1 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX0d reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX0c reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX0b reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPINFIX0a reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPEN reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On OPAQUE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On NOEXTRACT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On NOEQUALITY reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On NEW_EFFECT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On NEW reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On NAME reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On MODULE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On MINUS reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LPAREN_RPAREN reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LPAREN reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LOGIC reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LET reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LENS_PAREN_LEFT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LBRACK_BAR reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LBRACK_AT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LBRACK reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On LBRACE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On IRREDUCIBLE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INT8 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INT64 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INT32 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INT16 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INLINE_FOR_EXTRACTION reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INLINE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On INCLUDE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On IN reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On IMPLIES reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On IFF reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On IEEE64 reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On IDENT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On HASH reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On FSDOC_STANDALONE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On FSDOC reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On FALSE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On EXCEPTION reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On EQUALS reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On EOF reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On END reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On ELSE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On EFFECT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On DISJUNCTION reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On DEFAULT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On CONJUNCTION reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On COMMA reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On COLON_EQUALS reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On COLON_COLON reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On CHAR reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On BYTEARRAY reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On BY reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On BEGIN reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On BAR_RBRACK reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On BAR reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On BANG_LBRACE reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On BACKTICK reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On ASSUME reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On AND reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On AMP reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On ABSTRACT reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
-- On # reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTerm -> opPrefixTerm(atomicTermQUident)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 102:
## Known stack suffix:
## opPrefixTerm(atomicTermNotQUident)
## LR(1) items:
atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On VAL reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UNIV_HASH reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UNFOLDABLE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UNFOLD reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UNDERSCORE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UINT8 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UINT64 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UINT32 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On UINT16 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On TYPE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On TVAR reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On TRUE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On TOTAL reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On THEN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SUB_EFFECT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SUBTYPE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SUBKIND reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On STRING reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SPLICE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On SEMICOLON reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On RPAREN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On REIFY reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On REIFIABLE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On REFLECTABLE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On RBRACK reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On RBRACE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On RARROW reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On RANGE_OF reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On PRIVATE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPPREFIX reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX4 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX3 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX2 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX1 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX0d reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX0c reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX0b reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPINFIX0a reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPEN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On OPAQUE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On NOEXTRACT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On NOEQUALITY reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On NEW_EFFECT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On NEW reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On NAME reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On MODULE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On MINUS reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LPAREN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LOGIC reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LET reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LBRACK_BAR reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LBRACK_AT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LBRACK reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On LBRACE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INT8 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INT64 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INT32 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INT16 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INLINE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On INCLUDE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On IN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On IMPLIES reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On IFF reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On IEEE64 reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On IDENT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On HASH reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On FSDOC reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On FALSE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On EXCEPTION reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On EQUALS reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On EOF reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On END reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On ELSE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On EFFECT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On DOT_LPAREN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On DOT_LBRACK reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On DISJUNCTION reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On DEFAULT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On CONJUNCTION reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On COMMA reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On COLON_EQUALS reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On COLON_COLON reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On CHAR reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On BYTEARRAY reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On BY reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On BEGIN reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On BAR_RBRACK reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On BAR reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On BANG_LBRACE reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On BACKTICK reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On ASSUME reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On AND reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On AMP reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On ABSTRACT reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
-- On # reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 103:
## Known stack suffix:
## constant
## LR(1) items:
atomicTermNotQUident -> constant . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> constant
-- On VAL reduce production atomicTermNotQUident -> constant
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> constant
-- On UNIV_HASH reduce production atomicTermNotQUident -> constant
-- On UNFOLDABLE reduce production atomicTermNotQUident -> constant
-- On UNFOLD reduce production atomicTermNotQUident -> constant
-- On UNDERSCORE reduce production atomicTermNotQUident -> constant
-- On UINT8 reduce production atomicTermNotQUident -> constant
-- On UINT64 reduce production atomicTermNotQUident -> constant
-- On UINT32 reduce production atomicTermNotQUident -> constant
-- On UINT16 reduce production atomicTermNotQUident -> constant
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> constant
-- On TYPE reduce production atomicTermNotQUident -> constant
-- On TVAR reduce production atomicTermNotQUident -> constant
-- On TRUE reduce production atomicTermNotQUident -> constant
-- On TOTAL reduce production atomicTermNotQUident -> constant
-- On THEN reduce production atomicTermNotQUident -> constant
-- On SUB_EFFECT reduce production atomicTermNotQUident -> constant
-- On SUBTYPE reduce production atomicTermNotQUident -> constant
-- On SUBKIND reduce production atomicTermNotQUident -> constant
-- On STRING reduce production atomicTermNotQUident -> constant
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> constant
-- On SPLICE reduce production atomicTermNotQUident -> constant
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> constant
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> constant
-- On SEMICOLON reduce production atomicTermNotQUident -> constant
-- On RPAREN reduce production atomicTermNotQUident -> constant
-- On REIFY reduce production atomicTermNotQUident -> constant
-- On REIFIABLE reduce production atomicTermNotQUident -> constant
-- On REFLECTABLE reduce production atomicTermNotQUident -> constant
-- On RBRACK reduce production atomicTermNotQUident -> constant
-- On RBRACE reduce production atomicTermNotQUident -> constant
-- On RARROW reduce production atomicTermNotQUident -> constant
-- On RANGE_OF reduce production atomicTermNotQUident -> constant
-- On PRIVATE reduce production atomicTermNotQUident -> constant
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> constant
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> constant
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> constant
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> constant
-- On OPPREFIX reduce production atomicTermNotQUident -> constant
-- On OPINFIX4 reduce production atomicTermNotQUident -> constant
-- On OPINFIX3 reduce production atomicTermNotQUident -> constant
-- On OPINFIX2 reduce production atomicTermNotQUident -> constant
-- On OPINFIX1 reduce production atomicTermNotQUident -> constant
-- On OPINFIX0d reduce production atomicTermNotQUident -> constant
-- On OPINFIX0c reduce production atomicTermNotQUident -> constant
-- On OPINFIX0b reduce production atomicTermNotQUident -> constant
-- On OPINFIX0a reduce production atomicTermNotQUident -> constant
-- On OPEN reduce production atomicTermNotQUident -> constant
-- On OPAQUE reduce production atomicTermNotQUident -> constant
-- On NOEXTRACT reduce production atomicTermNotQUident -> constant
-- On NOEQUALITY reduce production atomicTermNotQUident -> constant
-- On NEW_EFFECT reduce production atomicTermNotQUident -> constant
-- On NEW reduce production atomicTermNotQUident -> constant
-- On NAME reduce production atomicTermNotQUident -> constant
-- On MODULE reduce production atomicTermNotQUident -> constant
-- On MINUS reduce production atomicTermNotQUident -> constant
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> constant
-- On LPAREN reduce production atomicTermNotQUident -> constant
-- On LOGIC reduce production atomicTermNotQUident -> constant
-- On LET reduce production atomicTermNotQUident -> constant
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> constant
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> constant
-- On LBRACK_BAR reduce production atomicTermNotQUident -> constant
-- On LBRACK_AT reduce production atomicTermNotQUident -> constant
-- On LBRACK reduce production atomicTermNotQUident -> constant
-- On LBRACE reduce production atomicTermNotQUident -> constant
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> constant
-- On INT8 reduce production atomicTermNotQUident -> constant
-- On INT64 reduce production atomicTermNotQUident -> constant
-- On INT32 reduce production atomicTermNotQUident -> constant
-- On INT16 reduce production atomicTermNotQUident -> constant
-- On INT reduce production atomicTermNotQUident -> constant
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> constant
-- On INLINE reduce production atomicTermNotQUident -> constant
-- On INCLUDE reduce production atomicTermNotQUident -> constant
-- On IN reduce production atomicTermNotQUident -> constant
-- On IMPLIES reduce production atomicTermNotQUident -> constant
-- On IFF reduce production atomicTermNotQUident -> constant
-- On IEEE64 reduce production atomicTermNotQUident -> constant
-- On IDENT reduce production atomicTermNotQUident -> constant
-- On HASH reduce production atomicTermNotQUident -> constant
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> constant
-- On FSDOC reduce production atomicTermNotQUident -> constant
-- On FALSE reduce production atomicTermNotQUident -> constant
-- On EXCEPTION reduce production atomicTermNotQUident -> constant
-- On EQUALS reduce production atomicTermNotQUident -> constant
-- On EOF reduce production atomicTermNotQUident -> constant
-- On END reduce production atomicTermNotQUident -> constant
-- On ELSE reduce production atomicTermNotQUident -> constant
-- On EFFECT reduce production atomicTermNotQUident -> constant
-- On DOT_LPAREN reduce production atomicTermNotQUident -> constant
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> constant
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> constant
-- On DOT_LBRACK reduce production atomicTermNotQUident -> constant
-- On DISJUNCTION reduce production atomicTermNotQUident -> constant
-- On DEFAULT reduce production atomicTermNotQUident -> constant
-- On CONJUNCTION reduce production atomicTermNotQUident -> constant
-- On COMMA reduce production atomicTermNotQUident -> constant
-- On COLON_EQUALS reduce production atomicTermNotQUident -> constant
-- On COLON_COLON reduce production atomicTermNotQUident -> constant
-- On CHAR reduce production atomicTermNotQUident -> constant
-- On BYTEARRAY reduce production atomicTermNotQUident -> constant
-- On BY reduce production atomicTermNotQUident -> constant
-- On BEGIN reduce production atomicTermNotQUident -> constant
-- On BAR_RBRACK reduce production atomicTermNotQUident -> constant
-- On BAR reduce production atomicTermNotQUident -> constant
-- On BANG_LBRACE reduce production atomicTermNotQUident -> constant
-- On BACKTICK reduce production atomicTermNotQUident -> constant
-- On ASSUME reduce production atomicTermNotQUident -> constant
-- On AND reduce production atomicTermNotQUident -> constant
-- On AMP reduce production atomicTermNotQUident -> constant
-- On ABSTRACT reduce production atomicTermNotQUident -> constant
-- On # reduce production atomicTermNotQUident -> constant
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> constant
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 104:
## Known stack suffix:
## atomicTermQUident
## LR(1) items:
atomicTerm -> atomicTermQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTerm -> atomicTermQUident
-- On VAL reduce production atomicTerm -> atomicTermQUident
-- On UNOPTEQUALITY reduce production atomicTerm -> atomicTermQUident
-- On UNIV_HASH reduce production atomicTerm -> atomicTermQUident
-- On UNFOLDABLE reduce production atomicTerm -> atomicTermQUident
-- On UNFOLD reduce production atomicTerm -> atomicTermQUident
-- On UNDERSCORE reduce production atomicTerm -> atomicTermQUident
-- On UINT8 reduce production atomicTerm -> atomicTermQUident
-- On UINT64 reduce production atomicTerm -> atomicTermQUident
-- On UINT32 reduce production atomicTerm -> atomicTermQUident
-- On UINT16 reduce production atomicTerm -> atomicTermQUident
-- On TYP_APP_GREATER reduce production atomicTerm -> atomicTermQUident
-- On TYPE reduce production atomicTerm -> atomicTermQUident
-- On TVAR reduce production atomicTerm -> atomicTermQUident
-- On TRUE reduce production atomicTerm -> atomicTermQUident
-- On TOTAL reduce production atomicTerm -> atomicTermQUident
-- On THEN reduce production atomicTerm -> atomicTermQUident
-- On SUB_EFFECT reduce production atomicTerm -> atomicTermQUident
-- On SUBTYPE reduce production atomicTerm -> atomicTermQUident
-- On SUBKIND reduce production atomicTerm -> atomicTermQUident
-- On STRING reduce production atomicTerm -> atomicTermQUident
-- On SQUIGGLY_RARROW reduce production atomicTerm -> atomicTermQUident
-- On SPLICE reduce production atomicTerm -> atomicTermQUident
-- On SET_RANGE_OF reduce production atomicTerm -> atomicTermQUident
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> atomicTermQUident
-- On SEMICOLON reduce production atomicTerm -> atomicTermQUident
-- On RPAREN reduce production atomicTerm -> atomicTermQUident
-- On REIFY reduce production atomicTerm -> atomicTermQUident
-- On REIFIABLE reduce production atomicTerm -> atomicTermQUident
-- On REFLECTABLE reduce production atomicTerm -> atomicTermQUident
-- On RBRACK reduce production atomicTerm -> atomicTermQUident
-- On RBRACE reduce production atomicTerm -> atomicTermQUident
-- On RARROW reduce production atomicTerm -> atomicTermQUident
-- On RANGE_OF reduce production atomicTerm -> atomicTermQUident
-- On PRIVATE reduce production atomicTerm -> atomicTermQUident
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> atomicTermQUident
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> atomicTermQUident
-- On PIPE_RIGHT reduce production atomicTerm -> atomicTermQUident
-- On PERCENT_LBRACK reduce production atomicTerm -> atomicTermQUident
-- On OPPREFIX reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX4 reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX3 reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX2 reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX1 reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX0d reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX0c reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX0b reduce production atomicTerm -> atomicTermQUident
-- On OPINFIX0a reduce production atomicTerm -> atomicTermQUident
-- On OPEN reduce production atomicTerm -> atomicTermQUident
-- On OPAQUE reduce production atomicTerm -> atomicTermQUident
-- On NOEXTRACT reduce production atomicTerm -> atomicTermQUident
-- On NOEQUALITY reduce production atomicTerm -> atomicTermQUident
-- On NEW_EFFECT reduce production atomicTerm -> atomicTermQUident
-- On NEW reduce production atomicTerm -> atomicTermQUident
-- On NAME reduce production atomicTerm -> atomicTermQUident
-- On MODULE reduce production atomicTerm -> atomicTermQUident
-- On MINUS reduce production atomicTerm -> atomicTermQUident
-- On LPAREN_RPAREN reduce production atomicTerm -> atomicTermQUident
-- On LPAREN reduce production atomicTerm -> atomicTermQUident
-- On LOGIC reduce production atomicTerm -> atomicTermQUident
-- On LET reduce production atomicTerm -> atomicTermQUident
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> atomicTermQUident
-- On LENS_PAREN_LEFT reduce production atomicTerm -> atomicTermQUident
-- On LBRACK_BAR reduce production atomicTerm -> atomicTermQUident
-- On LBRACK_AT reduce production atomicTerm -> atomicTermQUident
-- On LBRACK reduce production atomicTerm -> atomicTermQUident
-- On LBRACE reduce production atomicTerm -> atomicTermQUident
-- On IRREDUCIBLE reduce production atomicTerm -> atomicTermQUident
-- On INT8 reduce production atomicTerm -> atomicTermQUident
-- On INT64 reduce production atomicTerm -> atomicTermQUident
-- On INT32 reduce production atomicTerm -> atomicTermQUident
-- On INT16 reduce production atomicTerm -> atomicTermQUident
-- On INT reduce production atomicTerm -> atomicTermQUident
-- On INLINE_FOR_EXTRACTION reduce production atomicTerm -> atomicTermQUident
-- On INLINE reduce production atomicTerm -> atomicTermQUident
-- On INCLUDE reduce production atomicTerm -> atomicTermQUident
-- On IN reduce production atomicTerm -> atomicTermQUident
-- On IMPLIES reduce production atomicTerm -> atomicTermQUident
-- On IFF reduce production atomicTerm -> atomicTermQUident
-- On IEEE64 reduce production atomicTerm -> atomicTermQUident
-- On IDENT reduce production atomicTerm -> atomicTermQUident
-- On HASH reduce production atomicTerm -> atomicTermQUident
-- On FSDOC_STANDALONE reduce production atomicTerm -> atomicTermQUident
-- On FSDOC reduce production atomicTerm -> atomicTermQUident
-- On FALSE reduce production atomicTerm -> atomicTermQUident
-- On EXCEPTION reduce production atomicTerm -> atomicTermQUident
-- On EQUALS reduce production atomicTerm -> atomicTermQUident
-- On EOF reduce production atomicTerm -> atomicTermQUident
-- On END reduce production atomicTerm -> atomicTermQUident
-- On ELSE reduce production atomicTerm -> atomicTermQUident
-- On EFFECT reduce production atomicTerm -> atomicTermQUident
-- On DISJUNCTION reduce production atomicTerm -> atomicTermQUident
-- On DEFAULT reduce production atomicTerm -> atomicTermQUident
-- On CONJUNCTION reduce production atomicTerm -> atomicTermQUident
-- On COMMA reduce production atomicTerm -> atomicTermQUident
-- On COLON_EQUALS reduce production atomicTerm -> atomicTermQUident
-- On COLON_COLON reduce production atomicTerm -> atomicTermQUident
-- On CHAR reduce production atomicTerm -> atomicTermQUident
-- On BYTEARRAY reduce production atomicTerm -> atomicTermQUident
-- On BY reduce production atomicTerm -> atomicTermQUident
-- On BEGIN reduce production atomicTerm -> atomicTermQUident
-- On BAR_RBRACK reduce production atomicTerm -> atomicTermQUident
-- On BAR reduce production atomicTerm -> atomicTermQUident
-- On BANG_LBRACE reduce production atomicTerm -> atomicTermQUident
-- On BACKTICK reduce production atomicTerm -> atomicTermQUident
-- On ASSUME reduce production atomicTerm -> atomicTermQUident
-- On AND reduce production atomicTerm -> atomicTermQUident
-- On AMP reduce production atomicTerm -> atomicTermQUident
-- On ABSTRACT reduce production atomicTerm -> atomicTermQUident
-- On # reduce production atomicTerm -> atomicTermQUident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTerm -> atomicTermQUident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 105:
## Known stack suffix:
## atomicTermNotQUident
## LR(1) items:
atomicTerm -> atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTerm -> atomicTermNotQUident
-- On VAL reduce production atomicTerm -> atomicTermNotQUident
-- On UNOPTEQUALITY reduce production atomicTerm -> atomicTermNotQUident
-- On UNFOLDABLE reduce production atomicTerm -> atomicTermNotQUident
-- On UNFOLD reduce production atomicTerm -> atomicTermNotQUident
-- On UNDERSCORE reduce production atomicTerm -> atomicTermNotQUident
-- On UINT8 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT64 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT32 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT16 reduce production atomicTerm -> atomicTermNotQUident
-- On TYP_APP_GREATER reduce production atomicTerm -> atomicTermNotQUident
-- On TYPE reduce production atomicTerm -> atomicTermNotQUident
-- On TVAR reduce production atomicTerm -> atomicTermNotQUident
-- On TRUE reduce production atomicTerm -> atomicTermNotQUident
-- On TOTAL reduce production atomicTerm -> atomicTermNotQUident
-- On THEN reduce production atomicTerm -> atomicTermNotQUident
-- On SUB_EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On SUBTYPE reduce production atomicTerm -> atomicTermNotQUident
-- On SUBKIND reduce production atomicTerm -> atomicTermNotQUident
-- On STRING reduce production atomicTerm -> atomicTermNotQUident
-- On SQUIGGLY_RARROW reduce production atomicTerm -> atomicTermNotQUident
-- On SPLICE reduce production atomicTerm -> atomicTermNotQUident
-- On SET_RANGE_OF reduce production atomicTerm -> atomicTermNotQUident
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> atomicTermNotQUident
-- On SEMICOLON reduce production atomicTerm -> atomicTermNotQUident
-- On RPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On REIFY reduce production atomicTerm -> atomicTermNotQUident
-- On REIFIABLE reduce production atomicTerm -> atomicTermNotQUident
-- On REFLECTABLE reduce production atomicTerm -> atomicTermNotQUident
-- On RBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On RBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On RARROW reduce production atomicTerm -> atomicTermNotQUident
-- On RANGE_OF reduce production atomicTerm -> atomicTermNotQUident
-- On PRIVATE reduce production atomicTerm -> atomicTermNotQUident
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> atomicTermNotQUident
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> atomicTermNotQUident
-- On PIPE_RIGHT reduce production atomicTerm -> atomicTermNotQUident
-- On PERCENT_LBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On OPPREFIX reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX4 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX3 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX2 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX1 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0d reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0c reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0b reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0a reduce production atomicTerm -> atomicTermNotQUident
-- On OPEN reduce production atomicTerm -> atomicTermNotQUident
-- On OPAQUE reduce production atomicTerm -> atomicTermNotQUident
-- On NOEXTRACT reduce production atomicTerm -> atomicTermNotQUident
-- On NOEQUALITY reduce production atomicTerm -> atomicTermNotQUident
-- On NEW_EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On NEW reduce production atomicTerm -> atomicTermNotQUident
-- On NAME reduce production atomicTerm -> atomicTermNotQUident
-- On MODULE reduce production atomicTerm -> atomicTermNotQUident
-- On MINUS reduce production atomicTerm -> atomicTermNotQUident
-- On LPAREN_RPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On LPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On LOGIC reduce production atomicTerm -> atomicTermNotQUident
-- On LET reduce production atomicTerm -> atomicTermNotQUident
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> atomicTermNotQUident
-- On LENS_PAREN_LEFT reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK_BAR reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK_AT reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On IRREDUCIBLE reduce production atomicTerm -> atomicTermNotQUident
-- On INT8 reduce production atomicTerm -> atomicTermNotQUident
-- On INT64 reduce production atomicTerm -> atomicTermNotQUident
-- On INT32 reduce production atomicTerm -> atomicTermNotQUident
-- On INT16 reduce production atomicTerm -> atomicTermNotQUident
-- On INT reduce production atomicTerm -> atomicTermNotQUident
-- On INLINE_FOR_EXTRACTION reduce production atomicTerm -> atomicTermNotQUident
-- On INLINE reduce production atomicTerm -> atomicTermNotQUident
-- On INCLUDE reduce production atomicTerm -> atomicTermNotQUident
-- On IN reduce production atomicTerm -> atomicTermNotQUident
-- On IMPLIES reduce production atomicTerm -> atomicTermNotQUident
-- On IFF reduce production atomicTerm -> atomicTermNotQUident
-- On IEEE64 reduce production atomicTerm -> atomicTermNotQUident
-- On IDENT reduce production atomicTerm -> atomicTermNotQUident
-- On FSDOC_STANDALONE reduce production atomicTerm -> atomicTermNotQUident
-- On FSDOC reduce production atomicTerm -> atomicTermNotQUident
-- On FALSE reduce production atomicTerm -> atomicTermNotQUident
-- On EXCEPTION reduce production atomicTerm -> atomicTermNotQUident
-- On EQUALS reduce production atomicTerm -> atomicTermNotQUident
-- On EOF reduce production atomicTerm -> atomicTermNotQUident
-- On END reduce production atomicTerm -> atomicTermNotQUident
-- On ELSE reduce production atomicTerm -> atomicTermNotQUident
-- On EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On DISJUNCTION reduce production atomicTerm -> atomicTermNotQUident
-- On DEFAULT reduce production atomicTerm -> atomicTermNotQUident
-- On CONJUNCTION reduce production atomicTerm -> atomicTermNotQUident
-- On COMMA reduce production atomicTerm -> atomicTermNotQUident
-- On COLON_EQUALS reduce production atomicTerm -> atomicTermNotQUident
-- On COLON_COLON reduce production atomicTerm -> atomicTermNotQUident
-- On CHAR reduce production atomicTerm -> atomicTermNotQUident
-- On BYTEARRAY reduce production atomicTerm -> atomicTermNotQUident
-- On BY reduce production atomicTerm -> atomicTermNotQUident
-- On BEGIN reduce production atomicTerm -> atomicTermNotQUident
-- On BAR_RBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On BAR reduce production atomicTerm -> atomicTermNotQUident
-- On BANG_LBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On BACKTICK reduce production atomicTerm -> atomicTermNotQUident
-- On ASSUME reduce production atomicTerm -> atomicTermNotQUident
-- On AND reduce production atomicTerm -> atomicTermNotQUident
-- On AMP reduce production atomicTerm -> atomicTermNotQUident
-- On ABSTRACT reduce production atomicTerm -> atomicTermNotQUident
-- On # reduce production atomicTerm -> atomicTermNotQUident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTerm -> atomicTermNotQUident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 106:
## Known stack suffix:
## atomicTerm
## LR(1) items:
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm . [ TYP_APP_GREATER ]
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm . COMMA separated_nonempty_list(COMMA,atomicTerm) [ TYP_APP_GREATER ]
## Transitions:
-- On COMMA shift to state 107
## Reductions:
-- On TYP_APP_GREATER reduce production separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm

State 107:
## Known stack suffix:
## atomicTerm COMMA
## LR(1) items:
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm COMMA . separated_nonempty_list(COMMA,atomicTerm) [ TYP_APP_GREATER ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,atomicTerm) shift to state 108
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 106
## Reductions:

State 108:
## Known stack suffix:
## atomicTerm COMMA separated_nonempty_list(COMMA,atomicTerm)
## LR(1) items:
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm COMMA separated_nonempty_list(COMMA,atomicTerm) . [ TYP_APP_GREATER ]
## Transitions:
## Reductions:
-- On TYP_APP_GREATER reduce production separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm COMMA separated_nonempty_list(COMMA,atomicTerm)

State 109:
## Known stack suffix:
## quident QMARK_DOT
## LR(1) items:
projectionLHS -> quident QMARK_DOT . lident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On IDENT shift to state 62
-- On lident shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## quident QMARK_DOT lident
## LR(1) items:
projectionLHS -> quident QMARK_DOT lident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> quident QMARK_DOT lident
-- On VAL reduce production projectionLHS -> quident QMARK_DOT lident
-- On UNOPTEQUALITY reduce production projectionLHS -> quident QMARK_DOT lident
-- On UNIV_HASH reduce production projectionLHS -> quident QMARK_DOT lident
-- On UNFOLDABLE reduce production projectionLHS -> quident QMARK_DOT lident
-- On UNFOLD reduce production projectionLHS -> quident QMARK_DOT lident
-- On UNDERSCORE reduce production projectionLHS -> quident QMARK_DOT lident
-- On UINT8 reduce production projectionLHS -> quident QMARK_DOT lident
-- On UINT64 reduce production projectionLHS -> quident QMARK_DOT lident
-- On UINT32 reduce production projectionLHS -> quident QMARK_DOT lident
-- On UINT16 reduce production projectionLHS -> quident QMARK_DOT lident
-- On TYP_APP_GREATER reduce production projectionLHS -> quident QMARK_DOT lident
-- On TYPE reduce production projectionLHS -> quident QMARK_DOT lident
-- On TVAR reduce production projectionLHS -> quident QMARK_DOT lident
-- On TRUE reduce production projectionLHS -> quident QMARK_DOT lident
-- On TOTAL reduce production projectionLHS -> quident QMARK_DOT lident
-- On THEN reduce production projectionLHS -> quident QMARK_DOT lident
-- On SUB_EFFECT reduce production projectionLHS -> quident QMARK_DOT lident
-- On SUBTYPE reduce production projectionLHS -> quident QMARK_DOT lident
-- On SUBKIND reduce production projectionLHS -> quident QMARK_DOT lident
-- On STRING reduce production projectionLHS -> quident QMARK_DOT lident
-- On SQUIGGLY_RARROW reduce production projectionLHS -> quident QMARK_DOT lident
-- On SPLICE reduce production projectionLHS -> quident QMARK_DOT lident
-- On SET_RANGE_OF reduce production projectionLHS -> quident QMARK_DOT lident
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> quident QMARK_DOT lident
-- On SEMICOLON reduce production projectionLHS -> quident QMARK_DOT lident
-- On RPAREN reduce production projectionLHS -> quident QMARK_DOT lident
-- On REIFY reduce production projectionLHS -> quident QMARK_DOT lident
-- On REIFIABLE reduce production projectionLHS -> quident QMARK_DOT lident
-- On REFLECTABLE reduce production projectionLHS -> quident QMARK_DOT lident
-- On RBRACK reduce production projectionLHS -> quident QMARK_DOT lident
-- On RBRACE reduce production projectionLHS -> quident QMARK_DOT lident
-- On RARROW reduce production projectionLHS -> quident QMARK_DOT lident
-- On RANGE_OF reduce production projectionLHS -> quident QMARK_DOT lident
-- On PRIVATE reduce production projectionLHS -> quident QMARK_DOT lident
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> quident QMARK_DOT lident
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> quident QMARK_DOT lident
-- On PIPE_RIGHT reduce production projectionLHS -> quident QMARK_DOT lident
-- On PERCENT_LBRACK reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPPREFIX reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX4 reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX3 reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX2 reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX1 reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX0d reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX0c reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX0b reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPINFIX0a reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPEN reduce production projectionLHS -> quident QMARK_DOT lident
-- On OPAQUE reduce production projectionLHS -> quident QMARK_DOT lident
-- On NOEXTRACT reduce production projectionLHS -> quident QMARK_DOT lident
-- On NOEQUALITY reduce production projectionLHS -> quident QMARK_DOT lident
-- On NEW_EFFECT reduce production projectionLHS -> quident QMARK_DOT lident
-- On NEW reduce production projectionLHS -> quident QMARK_DOT lident
-- On NAME reduce production projectionLHS -> quident QMARK_DOT lident
-- On MODULE reduce production projectionLHS -> quident QMARK_DOT lident
-- On MINUS reduce production projectionLHS -> quident QMARK_DOT lident
-- On LPAREN_RPAREN reduce production projectionLHS -> quident QMARK_DOT lident
-- On LPAREN reduce production projectionLHS -> quident QMARK_DOT lident
-- On LOGIC reduce production projectionLHS -> quident QMARK_DOT lident
-- On LET reduce production projectionLHS -> quident QMARK_DOT lident
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> quident QMARK_DOT lident
-- On LENS_PAREN_LEFT reduce production projectionLHS -> quident QMARK_DOT lident
-- On LBRACK_BAR reduce production projectionLHS -> quident QMARK_DOT lident
-- On LBRACK_AT reduce production projectionLHS -> quident QMARK_DOT lident
-- On LBRACK reduce production projectionLHS -> quident QMARK_DOT lident
-- On LBRACE reduce production projectionLHS -> quident QMARK_DOT lident
-- On IRREDUCIBLE reduce production projectionLHS -> quident QMARK_DOT lident
-- On INT8 reduce production projectionLHS -> quident QMARK_DOT lident
-- On INT64 reduce production projectionLHS -> quident QMARK_DOT lident
-- On INT32 reduce production projectionLHS -> quident QMARK_DOT lident
-- On INT16 reduce production projectionLHS -> quident QMARK_DOT lident
-- On INT reduce production projectionLHS -> quident QMARK_DOT lident
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> quident QMARK_DOT lident
-- On INLINE reduce production projectionLHS -> quident QMARK_DOT lident
-- On INCLUDE reduce production projectionLHS -> quident QMARK_DOT lident
-- On IN reduce production projectionLHS -> quident QMARK_DOT lident
-- On IMPLIES reduce production projectionLHS -> quident QMARK_DOT lident
-- On IFF reduce production projectionLHS -> quident QMARK_DOT lident
-- On IEEE64 reduce production projectionLHS -> quident QMARK_DOT lident
-- On IDENT reduce production projectionLHS -> quident QMARK_DOT lident
-- On HASH reduce production projectionLHS -> quident QMARK_DOT lident
-- On FSDOC_STANDALONE reduce production projectionLHS -> quident QMARK_DOT lident
-- On FSDOC reduce production projectionLHS -> quident QMARK_DOT lident
-- On FALSE reduce production projectionLHS -> quident QMARK_DOT lident
-- On EXCEPTION reduce production projectionLHS -> quident QMARK_DOT lident
-- On EQUALS reduce production projectionLHS -> quident QMARK_DOT lident
-- On EOF reduce production projectionLHS -> quident QMARK_DOT lident
-- On END reduce production projectionLHS -> quident QMARK_DOT lident
-- On ELSE reduce production projectionLHS -> quident QMARK_DOT lident
-- On EFFECT reduce production projectionLHS -> quident QMARK_DOT lident
-- On DOT_LPAREN reduce production projectionLHS -> quident QMARK_DOT lident
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> quident QMARK_DOT lident
-- On DOT_LBRACK_BAR reduce production projectionLHS -> quident QMARK_DOT lident
-- On DOT_LBRACK reduce production projectionLHS -> quident QMARK_DOT lident
-- On DOT reduce production projectionLHS -> quident QMARK_DOT lident
-- On DISJUNCTION reduce production projectionLHS -> quident QMARK_DOT lident
-- On DEFAULT reduce production projectionLHS -> quident QMARK_DOT lident
-- On CONJUNCTION reduce production projectionLHS -> quident QMARK_DOT lident
-- On COMMA reduce production projectionLHS -> quident QMARK_DOT lident
-- On COLON_EQUALS reduce production projectionLHS -> quident QMARK_DOT lident
-- On COLON_COLON reduce production projectionLHS -> quident QMARK_DOT lident
-- On CHAR reduce production projectionLHS -> quident QMARK_DOT lident
-- On BYTEARRAY reduce production projectionLHS -> quident QMARK_DOT lident
-- On BY reduce production projectionLHS -> quident QMARK_DOT lident
-- On BEGIN reduce production projectionLHS -> quident QMARK_DOT lident
-- On BAR_RBRACK reduce production projectionLHS -> quident QMARK_DOT lident
-- On BAR reduce production projectionLHS -> quident QMARK_DOT lident
-- On BANG_LBRACE reduce production projectionLHS -> quident QMARK_DOT lident
-- On BACKTICK reduce production projectionLHS -> quident QMARK_DOT lident
-- On ASSUME reduce production projectionLHS -> quident QMARK_DOT lident
-- On AND reduce production projectionLHS -> quident QMARK_DOT lident
-- On AMP reduce production projectionLHS -> quident QMARK_DOT lident
-- On ABSTRACT reduce production projectionLHS -> quident QMARK_DOT lident
-- On # reduce production projectionLHS -> quident QMARK_DOT lident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> quident QMARK_DOT lident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 111:
## Known stack suffix:
## quident QMARK
## LR(1) items:
projectionLHS -> quident QMARK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> quident QMARK
-- On VAL reduce production projectionLHS -> quident QMARK
-- On UNOPTEQUALITY reduce production projectionLHS -> quident QMARK
-- On UNIV_HASH reduce production projectionLHS -> quident QMARK
-- On UNFOLDABLE reduce production projectionLHS -> quident QMARK
-- On UNFOLD reduce production projectionLHS -> quident QMARK
-- On UNDERSCORE reduce production projectionLHS -> quident QMARK
-- On UINT8 reduce production projectionLHS -> quident QMARK
-- On UINT64 reduce production projectionLHS -> quident QMARK
-- On UINT32 reduce production projectionLHS -> quident QMARK
-- On UINT16 reduce production projectionLHS -> quident QMARK
-- On TYP_APP_GREATER reduce production projectionLHS -> quident QMARK
-- On TYPE reduce production projectionLHS -> quident QMARK
-- On TVAR reduce production projectionLHS -> quident QMARK
-- On TRUE reduce production projectionLHS -> quident QMARK
-- On TOTAL reduce production projectionLHS -> quident QMARK
-- On THEN reduce production projectionLHS -> quident QMARK
-- On SUB_EFFECT reduce production projectionLHS -> quident QMARK
-- On SUBTYPE reduce production projectionLHS -> quident QMARK
-- On SUBKIND reduce production projectionLHS -> quident QMARK
-- On STRING reduce production projectionLHS -> quident QMARK
-- On SQUIGGLY_RARROW reduce production projectionLHS -> quident QMARK
-- On SPLICE reduce production projectionLHS -> quident QMARK
-- On SET_RANGE_OF reduce production projectionLHS -> quident QMARK
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> quident QMARK
-- On SEMICOLON reduce production projectionLHS -> quident QMARK
-- On RPAREN reduce production projectionLHS -> quident QMARK
-- On REIFY reduce production projectionLHS -> quident QMARK
-- On REIFIABLE reduce production projectionLHS -> quident QMARK
-- On REFLECTABLE reduce production projectionLHS -> quident QMARK
-- On RBRACK reduce production projectionLHS -> quident QMARK
-- On RBRACE reduce production projectionLHS -> quident QMARK
-- On RARROW reduce production projectionLHS -> quident QMARK
-- On RANGE_OF reduce production projectionLHS -> quident QMARK
-- On PRIVATE reduce production projectionLHS -> quident QMARK
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> quident QMARK
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> quident QMARK
-- On PIPE_RIGHT reduce production projectionLHS -> quident QMARK
-- On PERCENT_LBRACK reduce production projectionLHS -> quident QMARK
-- On OPPREFIX reduce production projectionLHS -> quident QMARK
-- On OPINFIX4 reduce production projectionLHS -> quident QMARK
-- On OPINFIX3 reduce production projectionLHS -> quident QMARK
-- On OPINFIX2 reduce production projectionLHS -> quident QMARK
-- On OPINFIX1 reduce production projectionLHS -> quident QMARK
-- On OPINFIX0d reduce production projectionLHS -> quident QMARK
-- On OPINFIX0c reduce production projectionLHS -> quident QMARK
-- On OPINFIX0b reduce production projectionLHS -> quident QMARK
-- On OPINFIX0a reduce production projectionLHS -> quident QMARK
-- On OPEN reduce production projectionLHS -> quident QMARK
-- On OPAQUE reduce production projectionLHS -> quident QMARK
-- On NOEXTRACT reduce production projectionLHS -> quident QMARK
-- On NOEQUALITY reduce production projectionLHS -> quident QMARK
-- On NEW_EFFECT reduce production projectionLHS -> quident QMARK
-- On NEW reduce production projectionLHS -> quident QMARK
-- On NAME reduce production projectionLHS -> quident QMARK
-- On MODULE reduce production projectionLHS -> quident QMARK
-- On MINUS reduce production projectionLHS -> quident QMARK
-- On LPAREN_RPAREN reduce production projectionLHS -> quident QMARK
-- On LPAREN reduce production projectionLHS -> quident QMARK
-- On LOGIC reduce production projectionLHS -> quident QMARK
-- On LET reduce production projectionLHS -> quident QMARK
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> quident QMARK
-- On LENS_PAREN_LEFT reduce production projectionLHS -> quident QMARK
-- On LBRACK_BAR reduce production projectionLHS -> quident QMARK
-- On LBRACK_AT reduce production projectionLHS -> quident QMARK
-- On LBRACK reduce production projectionLHS -> quident QMARK
-- On LBRACE reduce production projectionLHS -> quident QMARK
-- On IRREDUCIBLE reduce production projectionLHS -> quident QMARK
-- On INT8 reduce production projectionLHS -> quident QMARK
-- On INT64 reduce production projectionLHS -> quident QMARK
-- On INT32 reduce production projectionLHS -> quident QMARK
-- On INT16 reduce production projectionLHS -> quident QMARK
-- On INT reduce production projectionLHS -> quident QMARK
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> quident QMARK
-- On INLINE reduce production projectionLHS -> quident QMARK
-- On INCLUDE reduce production projectionLHS -> quident QMARK
-- On IN reduce production projectionLHS -> quident QMARK
-- On IMPLIES reduce production projectionLHS -> quident QMARK
-- On IFF reduce production projectionLHS -> quident QMARK
-- On IEEE64 reduce production projectionLHS -> quident QMARK
-- On IDENT reduce production projectionLHS -> quident QMARK
-- On HASH reduce production projectionLHS -> quident QMARK
-- On FSDOC_STANDALONE reduce production projectionLHS -> quident QMARK
-- On FSDOC reduce production projectionLHS -> quident QMARK
-- On FALSE reduce production projectionLHS -> quident QMARK
-- On EXCEPTION reduce production projectionLHS -> quident QMARK
-- On EQUALS reduce production projectionLHS -> quident QMARK
-- On EOF reduce production projectionLHS -> quident QMARK
-- On END reduce production projectionLHS -> quident QMARK
-- On ELSE reduce production projectionLHS -> quident QMARK
-- On EFFECT reduce production projectionLHS -> quident QMARK
-- On DOT_LPAREN reduce production projectionLHS -> quident QMARK
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> quident QMARK
-- On DOT_LBRACK_BAR reduce production projectionLHS -> quident QMARK
-- On DOT_LBRACK reduce production projectionLHS -> quident QMARK
-- On DOT reduce production projectionLHS -> quident QMARK
-- On DISJUNCTION reduce production projectionLHS -> quident QMARK
-- On DEFAULT reduce production projectionLHS -> quident QMARK
-- On CONJUNCTION reduce production projectionLHS -> quident QMARK
-- On COMMA reduce production projectionLHS -> quident QMARK
-- On COLON_EQUALS reduce production projectionLHS -> quident QMARK
-- On COLON_COLON reduce production projectionLHS -> quident QMARK
-- On CHAR reduce production projectionLHS -> quident QMARK
-- On BYTEARRAY reduce production projectionLHS -> quident QMARK
-- On BY reduce production projectionLHS -> quident QMARK
-- On BEGIN reduce production projectionLHS -> quident QMARK
-- On BAR_RBRACK reduce production projectionLHS -> quident QMARK
-- On BAR reduce production projectionLHS -> quident QMARK
-- On BANG_LBRACE reduce production projectionLHS -> quident QMARK
-- On BACKTICK reduce production projectionLHS -> quident QMARK
-- On ASSUME reduce production projectionLHS -> quident QMARK
-- On AND reduce production projectionLHS -> quident QMARK
-- On AMP reduce production projectionLHS -> quident QMARK
-- On ABSTRACT reduce production projectionLHS -> quident QMARK
-- On # reduce production projectionLHS -> quident QMARK
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> quident QMARK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 112:
## Known stack suffix:
## quident DOT_LPAREN
## LR(1) items:
atomicTermQUident -> quident DOT_LPAREN . term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 626
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 113:
## Known stack suffix:
## IF
## LR(1) items:
noSeqTerm -> IF . noSeqTerm THEN noSeqTerm ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF . noSeqTerm THEN noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 621
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 114:
## Known stack suffix:
## IDENT
## LR(1) items:
lident -> IDENT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
lidentOrUnderscore -> IDENT . [ LONG_LEFT_ARROW COLON ]
## Transitions:
## Reductions:
-- On WITH reduce production lident -> IDENT
-- On VAL reduce production lident -> IDENT
-- On UNOPTEQUALITY reduce production lident -> IDENT
-- On UNIV_HASH reduce production lident -> IDENT
-- On UNFOLDABLE reduce production lident -> IDENT
-- On UNFOLD reduce production lident -> IDENT
-- On UNDERSCORE reduce production lident -> IDENT
-- On UINT8 reduce production lident -> IDENT
-- On UINT64 reduce production lident -> IDENT
-- On UINT32 reduce production lident -> IDENT
-- On UINT16 reduce production lident -> IDENT
-- On TYP_APP_LESS reduce production lident -> IDENT
-- On TYPE reduce production lident -> IDENT
-- On TVAR reduce production lident -> IDENT
-- On TRUE reduce production lident -> IDENT
-- On TOTAL reduce production lident -> IDENT
-- On THEN reduce production lident -> IDENT
-- On SUB_EFFECT reduce production lident -> IDENT
-- On SUBTYPE reduce production lident -> IDENT
-- On SUBKIND reduce production lident -> IDENT
-- On STRING reduce production lident -> IDENT
-- On SQUIGGLY_RARROW reduce production lident -> IDENT
-- On SPLICE reduce production lident -> IDENT
-- On SET_RANGE_OF reduce production lident -> IDENT
-- On SEMICOLON_SEMICOLON reduce production lident -> IDENT
-- On SEMICOLON reduce production lident -> IDENT
-- On RPAREN reduce production lident -> IDENT
-- On REIFY reduce production lident -> IDENT
-- On REIFIABLE reduce production lident -> IDENT
-- On REFLECTABLE reduce production lident -> IDENT
-- On RBRACK reduce production lident -> IDENT
-- On RBRACE reduce production lident -> IDENT
-- On RARROW reduce production lident -> IDENT
-- On RANGE_OF reduce production lident -> IDENT
-- On PRIVATE reduce production lident -> IDENT
-- On PRAGMA_SET_OPTIONS reduce production lident -> IDENT
-- On PRAGMA_RESET_OPTIONS reduce production lident -> IDENT
-- On PIPE_RIGHT reduce production lident -> IDENT
-- On PERCENT_LBRACK reduce production lident -> IDENT
-- On OPPREFIX reduce production lident -> IDENT
-- On OPINFIX4 reduce production lident -> IDENT
-- On OPINFIX3 reduce production lident -> IDENT
-- On OPINFIX2 reduce production lident -> IDENT
-- On OPINFIX1 reduce production lident -> IDENT
-- On OPINFIX0d reduce production lident -> IDENT
-- On OPINFIX0c reduce production lident -> IDENT
-- On OPINFIX0b reduce production lident -> IDENT
-- On OPINFIX0a reduce production lident -> IDENT
-- On OPEN reduce production lident -> IDENT
-- On OPAQUE reduce production lident -> IDENT
-- On NOEXTRACT reduce production lident -> IDENT
-- On NOEQUALITY reduce production lident -> IDENT
-- On NEW_EFFECT reduce production lident -> IDENT
-- On NEW reduce production lident -> IDENT
-- On NAME reduce production lident -> IDENT
-- On MODULE reduce production lident -> IDENT
-- On MINUS reduce production lident -> IDENT
-- On LPAREN_RPAREN reduce production lident -> IDENT
-- On LPAREN reduce production lident -> IDENT
-- On LONG_LEFT_ARROW reduce production lidentOrUnderscore -> IDENT
-- On LOGIC reduce production lident -> IDENT
-- On LET reduce production lident -> IDENT
-- On LENS_PAREN_RIGHT reduce production lident -> IDENT
-- On LENS_PAREN_LEFT reduce production lident -> IDENT
-- On LBRACK_BAR reduce production lident -> IDENT
-- On LBRACK_AT reduce production lident -> IDENT
-- On LBRACK reduce production lident -> IDENT
-- On IRREDUCIBLE reduce production lident -> IDENT
-- On INT8 reduce production lident -> IDENT
-- On INT64 reduce production lident -> IDENT
-- On INT32 reduce production lident -> IDENT
-- On INT16 reduce production lident -> IDENT
-- On INT reduce production lident -> IDENT
-- On INLINE_FOR_EXTRACTION reduce production lident -> IDENT
-- On INLINE reduce production lident -> IDENT
-- On INCLUDE reduce production lident -> IDENT
-- On IN reduce production lident -> IDENT
-- On IMPLIES reduce production lident -> IDENT
-- On IFF reduce production lident -> IDENT
-- On IEEE64 reduce production lident -> IDENT
-- On IDENT reduce production lident -> IDENT
-- On HASH reduce production lident -> IDENT
-- On FSDOC_STANDALONE reduce production lident -> IDENT
-- On FSDOC reduce production lident -> IDENT
-- On FALSE reduce production lident -> IDENT
-- On EXCEPTION reduce production lident -> IDENT
-- On EQUALS reduce production lident -> IDENT
-- On EOF reduce production lident -> IDENT
-- On END reduce production lident -> IDENT
-- On ELSE reduce production lident -> IDENT
-- On EFFECT reduce production lident -> IDENT
-- On DOT_LPAREN reduce production lident -> IDENT
-- On DOT_LENS_PAREN_LEFT reduce production lident -> IDENT
-- On DOT_LBRACK_BAR reduce production lident -> IDENT
-- On DOT_LBRACK reduce production lident -> IDENT
-- On DOT reduce production lident -> IDENT
-- On DISJUNCTION reduce production lident -> IDENT
-- On DEFAULT reduce production lident -> IDENT
-- On CONJUNCTION reduce production lident -> IDENT
-- On COMMA reduce production lident -> IDENT
-- On COLON_EQUALS reduce production lident -> IDENT
-- On COLON_COLON reduce production lident -> IDENT
-- On COLON reduce production lidentOrUnderscore -> IDENT
-- On CHAR reduce production lident -> IDENT
-- On BYTEARRAY reduce production lident -> IDENT
-- On BY reduce production lident -> IDENT
-- On BEGIN reduce production lident -> IDENT
-- On BAR_RBRACK reduce production lident -> IDENT
-- On BAR reduce production lident -> IDENT
-- On BANG_LBRACE reduce production lident -> IDENT
-- On BACKTICK reduce production lident -> IDENT
-- On ASSUME reduce production lident -> IDENT
-- On AND reduce production lident -> IDENT
-- On AMP reduce production lident -> IDENT
-- On ABSTRACT reduce production lident -> IDENT
-- On # reduce production lident -> IDENT
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LONG_LEFT_ARROW LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production lident -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 115:
## Known stack suffix:
## HASH
## LR(1) items:
aqualUniverses -> HASH . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production aqualUniverses -> HASH
-- On UINT8 reduce production aqualUniverses -> HASH
-- On UINT64 reduce production aqualUniverses -> HASH
-- On UINT32 reduce production aqualUniverses -> HASH
-- On UINT16 reduce production aqualUniverses -> HASH
-- On TVAR reduce production aqualUniverses -> HASH
-- On TRUE reduce production aqualUniverses -> HASH
-- On TILDE reduce production aqualUniverses -> HASH
-- On STRING reduce production aqualUniverses -> HASH
-- On SET_RANGE_OF reduce production aqualUniverses -> HASH
-- On REIFY reduce production aqualUniverses -> HASH
-- On RANGE_OF reduce production aqualUniverses -> HASH
-- On QUOTE reduce production aqualUniverses -> HASH
-- On PERC_BACKTICK reduce production aqualUniverses -> HASH
-- On PERCENT_LBRACK reduce production aqualUniverses -> HASH
-- On OPPREFIX reduce production aqualUniverses -> HASH
-- On NAME reduce production aqualUniverses -> HASH
-- On MINUS reduce production aqualUniverses -> HASH
-- On LPAREN_RPAREN reduce production aqualUniverses -> HASH
-- On LPAREN reduce production aqualUniverses -> HASH
-- On LENS_PAREN_LEFT reduce production aqualUniverses -> HASH
-- On LBRACK_BAR reduce production aqualUniverses -> HASH
-- On LBRACK reduce production aqualUniverses -> HASH
-- On LBRACE reduce production aqualUniverses -> HASH
-- On INT8 reduce production aqualUniverses -> HASH
-- On INT64 reduce production aqualUniverses -> HASH
-- On INT32 reduce production aqualUniverses -> HASH
-- On INT16 reduce production aqualUniverses -> HASH
-- On INT reduce production aqualUniverses -> HASH
-- On IEEE64 reduce production aqualUniverses -> HASH
-- On IDENT reduce production aqualUniverses -> HASH
-- On FALSE reduce production aqualUniverses -> HASH
-- On CHAR reduce production aqualUniverses -> HASH
-- On BYTEARRAY reduce production aqualUniverses -> HASH
-- On BEGIN reduce production aqualUniverses -> HASH
-- On BANG_LBRACE reduce production aqualUniverses -> HASH
-- On BACKTICK_HASH reduce production aqualUniverses -> HASH
-- On BACKTICK_AT reduce production aqualUniverses -> HASH
-- On BACKTICK reduce production aqualUniverses -> HASH

State 116:
## Known stack suffix:
## FUNCTION
## LR(1) items:
noSeqTerm -> FUNCTION . reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BAR shift to state 602
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On reverse_left_flexible_nonempty_list(BAR,patternBranch) shift to state 617
-- On quident shift to state 156
-- On patternBranch shift to state 620
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 117:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicPattern -> UNDERSCORE . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> UNDERSCORE
-- On UNDERSCORE reduce production atomicPattern -> UNDERSCORE
-- On UINT8 reduce production atomicPattern -> UNDERSCORE
-- On UINT64 reduce production atomicPattern -> UNDERSCORE
-- On UINT32 reduce production atomicPattern -> UNDERSCORE
-- On UINT16 reduce production atomicPattern -> UNDERSCORE
-- On TVAR reduce production atomicPattern -> UNDERSCORE
-- On TRUE reduce production atomicPattern -> UNDERSCORE
-- On STRING reduce production atomicPattern -> UNDERSCORE
-- On SQUIGGLY_RARROW reduce production atomicPattern -> UNDERSCORE
-- On SET_RANGE_OF reduce production atomicPattern -> UNDERSCORE
-- On SEMICOLON reduce production atomicPattern -> UNDERSCORE
-- On RPAREN reduce production atomicPattern -> UNDERSCORE
-- On REIFY reduce production atomicPattern -> UNDERSCORE
-- On RBRACK reduce production atomicPattern -> UNDERSCORE
-- On RBRACE reduce production atomicPattern -> UNDERSCORE
-- On RARROW reduce production atomicPattern -> UNDERSCORE
-- On RANGE_OF reduce production atomicPattern -> UNDERSCORE
-- On NAME reduce production atomicPattern -> UNDERSCORE
-- On LPAREN_RPAREN reduce production atomicPattern -> UNDERSCORE
-- On LPAREN reduce production atomicPattern -> UNDERSCORE
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> UNDERSCORE
-- On LENS_PAREN_LEFT reduce production atomicPattern -> UNDERSCORE
-- On LBRACK reduce production atomicPattern -> UNDERSCORE
-- On LBRACE reduce production atomicPattern -> UNDERSCORE
-- On INT8 reduce production atomicPattern -> UNDERSCORE
-- On INT64 reduce production atomicPattern -> UNDERSCORE
-- On INT32 reduce production atomicPattern -> UNDERSCORE
-- On INT16 reduce production atomicPattern -> UNDERSCORE
-- On INT reduce production atomicPattern -> UNDERSCORE
-- On IEEE64 reduce production atomicPattern -> UNDERSCORE
-- On IDENT reduce production atomicPattern -> UNDERSCORE
-- On HASH reduce production atomicPattern -> UNDERSCORE
-- On FALSE reduce production atomicPattern -> UNDERSCORE
-- On EQUALS reduce production atomicPattern -> UNDERSCORE
-- On DOLLAR reduce production atomicPattern -> UNDERSCORE
-- On COMMA reduce production atomicPattern -> UNDERSCORE
-- On COLON_COLON reduce production atomicPattern -> UNDERSCORE
-- On COLON reduce production atomicPattern -> UNDERSCORE
-- On CHAR reduce production atomicPattern -> UNDERSCORE
-- On BYTEARRAY reduce production atomicPattern -> UNDERSCORE
-- On BAR reduce production atomicPattern -> UNDERSCORE

State 118:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicPattern -> LPAREN . tuplePattern COLON simpleArrow refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . tuplePattern RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPPREFIX RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX3 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX4 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0a RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0b RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0c RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0d RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX1 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX2 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . PIPE_RIGHT RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . COLON_EQUALS RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . COLON_COLON RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PIPE_RIGHT shift to state 119
-- On OP_MIXFIX_ASSIGNMENT shift to state 121
-- On OP_MIXFIX_ACCESS shift to state 123
-- On OPPREFIX shift to state 125
-- On OPINFIX4 shift to state 127
-- On OPINFIX3 shift to state 129
-- On OPINFIX2 shift to state 131
-- On OPINFIX1 shift to state 133
-- On OPINFIX0d shift to state 135
-- On OPINFIX0c shift to state 137
-- On OPINFIX0b shift to state 139
-- On OPINFIX0a shift to state 141
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 185
-- On COLON_COLON shift to state 187
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 189
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 119:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On STRING reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On NAME reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On INT reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On HASH reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On COLON reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On BAR reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN

State 121:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN

State 123:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN

State 125:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPPREFIX RPAREN

State 127:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN

State 129:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN

State 131:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN

State 133:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN

State 135:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN

State 137:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN

State 139:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN

State 141:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On STRING reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On NAME reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On INT reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On HASH reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On BAR reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN

State 143:
## Known stack suffix:
## LENS_PAREN_LEFT
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT . constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 181
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 144:
## Known stack suffix:
## LBRACK
## LR(1) items:
atomicPattern -> LBRACK . loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 175
-- On separated_nonempty_list(SEMICOLON,tuplePattern) shift to state 178
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On loption(separated_nonempty_list(SEMICOLON,tuplePattern)) shift to state 179
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On RBRACK reduce production loption(separated_nonempty_list(SEMICOLON,tuplePattern)) ->

State 145:
## Known stack suffix:
## LBRACE
## LR(1) items:
atomicPattern -> LBRACE . separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On separated_nonempty_list(SEMICOLON,fieldPattern) shift to state 146
-- On qlident shift to state 148
-- On path(lident) shift to state 98
-- On lident shift to state 80
-- On fieldPattern shift to state 172
## Reductions:

State 146:
## Known stack suffix:
## LBRACE separated_nonempty_list(SEMICOLON,fieldPattern)
## LR(1) items:
atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) . RBRACE [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RBRACE shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
## LR(1) items:
atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On UNDERSCORE reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On UINT8 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On UINT64 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On UINT32 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On UINT16 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On TVAR reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On TRUE reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On STRING reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On SET_RANGE_OF reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On SEMICOLON reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On RPAREN reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On REIFY reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On RBRACK reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On RBRACE reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On RARROW reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On RANGE_OF reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On NAME reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On LPAREN_RPAREN reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On LPAREN reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On LBRACK reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On LBRACE reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On INT8 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On INT64 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On INT32 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On INT16 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On INT reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On IEEE64 reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On IDENT reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On HASH reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On FALSE reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On EQUALS reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On DOLLAR reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On COMMA reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On COLON_COLON reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On COLON reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On CHAR reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On BYTEARRAY reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
-- On BAR reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE

State 148:
## Known stack suffix:
## qlident
## LR(1) items:
fieldPattern -> qlident . EQUALS tuplePattern [ SEMICOLON RBRACE ]
fieldPattern -> qlident . [ SEMICOLON RBRACE ]
## Transitions:
-- On EQUALS shift to state 149
## Reductions:
-- On SEMICOLON reduce production fieldPattern -> qlident
-- On RBRACE reduce production fieldPattern -> qlident

State 149:
## Known stack suffix:
## qlident EQUALS
## LR(1) items:
fieldPattern -> qlident EQUALS . tuplePattern [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 154
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 150:
## Known stack suffix:
## HASH
## LR(1) items:
aqualUniverses -> HASH . [ IDENT ]
atomicPattern -> HASH . UNDERSCORE [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 151
## Reductions:
-- On IDENT reduce production aqualUniverses -> HASH

State 151:
## Known stack suffix:
## HASH UNDERSCORE
## LR(1) items:
atomicPattern -> HASH UNDERSCORE . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> HASH UNDERSCORE
-- On UNDERSCORE reduce production atomicPattern -> HASH UNDERSCORE
-- On UINT8 reduce production atomicPattern -> HASH UNDERSCORE
-- On UINT64 reduce production atomicPattern -> HASH UNDERSCORE
-- On UINT32 reduce production atomicPattern -> HASH UNDERSCORE
-- On UINT16 reduce production atomicPattern -> HASH UNDERSCORE
-- On TVAR reduce production atomicPattern -> HASH UNDERSCORE
-- On TRUE reduce production atomicPattern -> HASH UNDERSCORE
-- On STRING reduce production atomicPattern -> HASH UNDERSCORE
-- On SQUIGGLY_RARROW reduce production atomicPattern -> HASH UNDERSCORE
-- On SET_RANGE_OF reduce production atomicPattern -> HASH UNDERSCORE
-- On SEMICOLON reduce production atomicPattern -> HASH UNDERSCORE
-- On RPAREN reduce production atomicPattern -> HASH UNDERSCORE
-- On REIFY reduce production atomicPattern -> HASH UNDERSCORE
-- On RBRACK reduce production atomicPattern -> HASH UNDERSCORE
-- On RBRACE reduce production atomicPattern -> HASH UNDERSCORE
-- On RARROW reduce production atomicPattern -> HASH UNDERSCORE
-- On RANGE_OF reduce production atomicPattern -> HASH UNDERSCORE
-- On NAME reduce production atomicPattern -> HASH UNDERSCORE
-- On LPAREN_RPAREN reduce production atomicPattern -> HASH UNDERSCORE
-- On LPAREN reduce production atomicPattern -> HASH UNDERSCORE
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> HASH UNDERSCORE
-- On LENS_PAREN_LEFT reduce production atomicPattern -> HASH UNDERSCORE
-- On LBRACK reduce production atomicPattern -> HASH UNDERSCORE
-- On LBRACE reduce production atomicPattern -> HASH UNDERSCORE
-- On INT8 reduce production atomicPattern -> HASH UNDERSCORE
-- On INT64 reduce production atomicPattern -> HASH UNDERSCORE
-- On INT32 reduce production atomicPattern -> HASH UNDERSCORE
-- On INT16 reduce production atomicPattern -> HASH UNDERSCORE
-- On INT reduce production atomicPattern -> HASH UNDERSCORE
-- On IEEE64 reduce production atomicPattern -> HASH UNDERSCORE
-- On IDENT reduce production atomicPattern -> HASH UNDERSCORE
-- On HASH reduce production atomicPattern -> HASH UNDERSCORE
-- On FALSE reduce production atomicPattern -> HASH UNDERSCORE
-- On EQUALS reduce production atomicPattern -> HASH UNDERSCORE
-- On DOLLAR reduce production atomicPattern -> HASH UNDERSCORE
-- On COMMA reduce production atomicPattern -> HASH UNDERSCORE
-- On COLON_COLON reduce production atomicPattern -> HASH UNDERSCORE
-- On COLON reduce production atomicPattern -> HASH UNDERSCORE
-- On CHAR reduce production atomicPattern -> HASH UNDERSCORE
-- On BYTEARRAY reduce production atomicPattern -> HASH UNDERSCORE
-- On BAR reduce production atomicPattern -> HASH UNDERSCORE

State 152:
## Known stack suffix:
## DOLLAR
## LR(1) items:
aqualUniverses -> DOLLAR . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production aqualUniverses -> DOLLAR
-- On UINT8 reduce production aqualUniverses -> DOLLAR
-- On UINT64 reduce production aqualUniverses -> DOLLAR
-- On UINT32 reduce production aqualUniverses -> DOLLAR
-- On UINT16 reduce production aqualUniverses -> DOLLAR
-- On TVAR reduce production aqualUniverses -> DOLLAR
-- On TRUE reduce production aqualUniverses -> DOLLAR
-- On TILDE reduce production aqualUniverses -> DOLLAR
-- On STRING reduce production aqualUniverses -> DOLLAR
-- On SET_RANGE_OF reduce production aqualUniverses -> DOLLAR
-- On REIFY reduce production aqualUniverses -> DOLLAR
-- On RANGE_OF reduce production aqualUniverses -> DOLLAR
-- On QUOTE reduce production aqualUniverses -> DOLLAR
-- On PERC_BACKTICK reduce production aqualUniverses -> DOLLAR
-- On PERCENT_LBRACK reduce production aqualUniverses -> DOLLAR
-- On OPPREFIX reduce production aqualUniverses -> DOLLAR
-- On NAME reduce production aqualUniverses -> DOLLAR
-- On MINUS reduce production aqualUniverses -> DOLLAR
-- On LPAREN_RPAREN reduce production aqualUniverses -> DOLLAR
-- On LPAREN reduce production aqualUniverses -> DOLLAR
-- On LENS_PAREN_LEFT reduce production aqualUniverses -> DOLLAR
-- On LBRACK_BAR reduce production aqualUniverses -> DOLLAR
-- On LBRACK reduce production aqualUniverses -> DOLLAR
-- On LBRACE reduce production aqualUniverses -> DOLLAR
-- On INT8 reduce production aqualUniverses -> DOLLAR
-- On INT64 reduce production aqualUniverses -> DOLLAR
-- On INT32 reduce production aqualUniverses -> DOLLAR
-- On INT16 reduce production aqualUniverses -> DOLLAR
-- On INT reduce production aqualUniverses -> DOLLAR
-- On IEEE64 reduce production aqualUniverses -> DOLLAR
-- On IDENT reduce production aqualUniverses -> DOLLAR
-- On FALSE reduce production aqualUniverses -> DOLLAR
-- On CHAR reduce production aqualUniverses -> DOLLAR
-- On BYTEARRAY reduce production aqualUniverses -> DOLLAR
-- On BEGIN reduce production aqualUniverses -> DOLLAR
-- On BANG_LBRACE reduce production aqualUniverses -> DOLLAR
-- On BACKTICK_HASH reduce production aqualUniverses -> DOLLAR
-- On BACKTICK_AT reduce production aqualUniverses -> DOLLAR
-- On BACKTICK reduce production aqualUniverses -> DOLLAR

State 153:
## Known stack suffix:
## tvar
## LR(1) items:
atomicPattern -> tvar . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> tvar
-- On UNDERSCORE reduce production atomicPattern -> tvar
-- On UINT8 reduce production atomicPattern -> tvar
-- On UINT64 reduce production atomicPattern -> tvar
-- On UINT32 reduce production atomicPattern -> tvar
-- On UINT16 reduce production atomicPattern -> tvar
-- On TVAR reduce production atomicPattern -> tvar
-- On TRUE reduce production atomicPattern -> tvar
-- On STRING reduce production atomicPattern -> tvar
-- On SQUIGGLY_RARROW reduce production atomicPattern -> tvar
-- On SET_RANGE_OF reduce production atomicPattern -> tvar
-- On SEMICOLON reduce production atomicPattern -> tvar
-- On RPAREN reduce production atomicPattern -> tvar
-- On REIFY reduce production atomicPattern -> tvar
-- On RBRACK reduce production atomicPattern -> tvar
-- On RBRACE reduce production atomicPattern -> tvar
-- On RARROW reduce production atomicPattern -> tvar
-- On RANGE_OF reduce production atomicPattern -> tvar
-- On NAME reduce production atomicPattern -> tvar
-- On LPAREN_RPAREN reduce production atomicPattern -> tvar
-- On LPAREN reduce production atomicPattern -> tvar
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> tvar
-- On LENS_PAREN_LEFT reduce production atomicPattern -> tvar
-- On LBRACK reduce production atomicPattern -> tvar
-- On LBRACE reduce production atomicPattern -> tvar
-- On INT8 reduce production atomicPattern -> tvar
-- On INT64 reduce production atomicPattern -> tvar
-- On INT32 reduce production atomicPattern -> tvar
-- On INT16 reduce production atomicPattern -> tvar
-- On INT reduce production atomicPattern -> tvar
-- On IEEE64 reduce production atomicPattern -> tvar
-- On IDENT reduce production atomicPattern -> tvar
-- On HASH reduce production atomicPattern -> tvar
-- On FALSE reduce production atomicPattern -> tvar
-- On EQUALS reduce production atomicPattern -> tvar
-- On DOLLAR reduce production atomicPattern -> tvar
-- On COMMA reduce production atomicPattern -> tvar
-- On COLON_COLON reduce production atomicPattern -> tvar
-- On COLON reduce production atomicPattern -> tvar
-- On CHAR reduce production atomicPattern -> tvar
-- On BYTEARRAY reduce production atomicPattern -> tvar
-- On BAR reduce production atomicPattern -> tvar

State 154:
## Known stack suffix:
## qlident EQUALS tuplePattern
## LR(1) items:
fieldPattern -> qlident EQUALS tuplePattern . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production fieldPattern -> qlident EQUALS tuplePattern
-- On RBRACE reduce production fieldPattern -> qlident EQUALS tuplePattern

State 155:
## Known stack suffix:
## separated_nonempty_list(COMMA,constructorPattern)
## LR(1) items:
tuplePattern -> separated_nonempty_list(COMMA,constructorPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW EQUALS COLON BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On SQUIGGLY_RARROW reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On SEMICOLON reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On RPAREN reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On RBRACK reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On RBRACE reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On RARROW reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On EQUALS reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On COLON reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)
-- On BAR reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)

State 156:
## Known stack suffix:
## quident
## LR(1) items:
atomicPattern -> quident . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
constructorPattern -> quident . nonempty_list(atomicPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On path(uident) shift to state 100
-- On nonempty_list(atomicPattern) shift to state 158
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 161
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On WHEN reduce production atomicPattern -> quident
-- On SQUIGGLY_RARROW reduce production atomicPattern -> quident
-- On SEMICOLON reduce production atomicPattern -> quident
-- On RPAREN reduce production atomicPattern -> quident
-- On RBRACK reduce production atomicPattern -> quident
-- On RBRACE reduce production atomicPattern -> quident
-- On RARROW reduce production atomicPattern -> quident
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> quident
-- On EQUALS reduce production atomicPattern -> quident
-- On COMMA reduce production atomicPattern -> quident
-- On COLON_COLON reduce production atomicPattern -> quident
-- On COLON reduce production atomicPattern -> quident
-- On BAR reduce production atomicPattern -> quident

State 157:
## Known stack suffix:
## quident
## LR(1) items:
atomicPattern -> quident . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> quident
-- On UNDERSCORE reduce production atomicPattern -> quident
-- On UINT8 reduce production atomicPattern -> quident
-- On UINT64 reduce production atomicPattern -> quident
-- On UINT32 reduce production atomicPattern -> quident
-- On UINT16 reduce production atomicPattern -> quident
-- On TVAR reduce production atomicPattern -> quident
-- On TRUE reduce production atomicPattern -> quident
-- On STRING reduce production atomicPattern -> quident
-- On SQUIGGLY_RARROW reduce production atomicPattern -> quident
-- On SET_RANGE_OF reduce production atomicPattern -> quident
-- On SEMICOLON reduce production atomicPattern -> quident
-- On RPAREN reduce production atomicPattern -> quident
-- On REIFY reduce production atomicPattern -> quident
-- On RBRACK reduce production atomicPattern -> quident
-- On RBRACE reduce production atomicPattern -> quident
-- On RARROW reduce production atomicPattern -> quident
-- On RANGE_OF reduce production atomicPattern -> quident
-- On NAME reduce production atomicPattern -> quident
-- On LPAREN_RPAREN reduce production atomicPattern -> quident
-- On LPAREN reduce production atomicPattern -> quident
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> quident
-- On LENS_PAREN_LEFT reduce production atomicPattern -> quident
-- On LBRACK reduce production atomicPattern -> quident
-- On LBRACE reduce production atomicPattern -> quident
-- On INT8 reduce production atomicPattern -> quident
-- On INT64 reduce production atomicPattern -> quident
-- On INT32 reduce production atomicPattern -> quident
-- On INT16 reduce production atomicPattern -> quident
-- On INT reduce production atomicPattern -> quident
-- On IEEE64 reduce production atomicPattern -> quident
-- On IDENT reduce production atomicPattern -> quident
-- On HASH reduce production atomicPattern -> quident
-- On FALSE reduce production atomicPattern -> quident
-- On EQUALS reduce production atomicPattern -> quident
-- On DOLLAR reduce production atomicPattern -> quident
-- On COMMA reduce production atomicPattern -> quident
-- On COLON_COLON reduce production atomicPattern -> quident
-- On COLON reduce production atomicPattern -> quident
-- On CHAR reduce production atomicPattern -> quident
-- On BYTEARRAY reduce production atomicPattern -> quident
-- On BAR reduce production atomicPattern -> quident

State 158:
## Known stack suffix:
## quident nonempty_list(atomicPattern)
## LR(1) items:
constructorPattern -> quident nonempty_list(atomicPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On SQUIGGLY_RARROW reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On SEMICOLON reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On RPAREN reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On RBRACK reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On RBRACE reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On RARROW reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On LENS_PAREN_RIGHT reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On EQUALS reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On COMMA reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On COLON_COLON reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On COLON reduce production constructorPattern -> quident nonempty_list(atomicPattern)
-- On BAR reduce production constructorPattern -> quident nonempty_list(atomicPattern)

State 159:
## Known stack suffix:
## lident
## LR(1) items:
aqualified(lident) -> lident . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production aqualified(lident) -> lident
-- On UNDERSCORE reduce production aqualified(lident) -> lident
-- On UINT8 reduce production aqualified(lident) -> lident
-- On UINT64 reduce production aqualified(lident) -> lident
-- On UINT32 reduce production aqualified(lident) -> lident
-- On UINT16 reduce production aqualified(lident) -> lident
-- On TVAR reduce production aqualified(lident) -> lident
-- On TRUE reduce production aqualified(lident) -> lident
-- On STRING reduce production aqualified(lident) -> lident
-- On SQUIGGLY_RARROW reduce production aqualified(lident) -> lident
-- On SET_RANGE_OF reduce production aqualified(lident) -> lident
-- On SEMICOLON reduce production aqualified(lident) -> lident
-- On RPAREN reduce production aqualified(lident) -> lident
-- On REIFY reduce production aqualified(lident) -> lident
-- On RBRACK reduce production aqualified(lident) -> lident
-- On RBRACE reduce production aqualified(lident) -> lident
-- On RARROW reduce production aqualified(lident) -> lident
-- On RANGE_OF reduce production aqualified(lident) -> lident
-- On NAME reduce production aqualified(lident) -> lident
-- On LPAREN_RPAREN reduce production aqualified(lident) -> lident
-- On LPAREN reduce production aqualified(lident) -> lident
-- On LENS_PAREN_RIGHT reduce production aqualified(lident) -> lident
-- On LENS_PAREN_LEFT reduce production aqualified(lident) -> lident
-- On LBRACK reduce production aqualified(lident) -> lident
-- On LBRACE reduce production aqualified(lident) -> lident
-- On INT8 reduce production aqualified(lident) -> lident
-- On INT64 reduce production aqualified(lident) -> lident
-- On INT32 reduce production aqualified(lident) -> lident
-- On INT16 reduce production aqualified(lident) -> lident
-- On INT reduce production aqualified(lident) -> lident
-- On IEEE64 reduce production aqualified(lident) -> lident
-- On IDENT reduce production aqualified(lident) -> lident
-- On HASH reduce production aqualified(lident) -> lident
-- On FALSE reduce production aqualified(lident) -> lident
-- On EQUALS reduce production aqualified(lident) -> lident
-- On DOLLAR reduce production aqualified(lident) -> lident
-- On COMMA reduce production aqualified(lident) -> lident
-- On COLON_COLON reduce production aqualified(lident) -> lident
-- On COLON reduce production aqualified(lident) -> lident
-- On CHAR reduce production aqualified(lident) -> lident
-- On BYTEARRAY reduce production aqualified(lident) -> lident
-- On BAR reduce production aqualified(lident) -> lident

State 160:
## Known stack suffix:
## constant
## LR(1) items:
atomicPattern -> constant . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> constant
-- On UNDERSCORE reduce production atomicPattern -> constant
-- On UINT8 reduce production atomicPattern -> constant
-- On UINT64 reduce production atomicPattern -> constant
-- On UINT32 reduce production atomicPattern -> constant
-- On UINT16 reduce production atomicPattern -> constant
-- On TVAR reduce production atomicPattern -> constant
-- On TRUE reduce production atomicPattern -> constant
-- On STRING reduce production atomicPattern -> constant
-- On SQUIGGLY_RARROW reduce production atomicPattern -> constant
-- On SET_RANGE_OF reduce production atomicPattern -> constant
-- On SEMICOLON reduce production atomicPattern -> constant
-- On RPAREN reduce production atomicPattern -> constant
-- On REIFY reduce production atomicPattern -> constant
-- On RBRACK reduce production atomicPattern -> constant
-- On RBRACE reduce production atomicPattern -> constant
-- On RARROW reduce production atomicPattern -> constant
-- On RANGE_OF reduce production atomicPattern -> constant
-- On NAME reduce production atomicPattern -> constant
-- On LPAREN_RPAREN reduce production atomicPattern -> constant
-- On LPAREN reduce production atomicPattern -> constant
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> constant
-- On LENS_PAREN_LEFT reduce production atomicPattern -> constant
-- On LBRACK reduce production atomicPattern -> constant
-- On LBRACE reduce production atomicPattern -> constant
-- On INT8 reduce production atomicPattern -> constant
-- On INT64 reduce production atomicPattern -> constant
-- On INT32 reduce production atomicPattern -> constant
-- On INT16 reduce production atomicPattern -> constant
-- On INT reduce production atomicPattern -> constant
-- On IEEE64 reduce production atomicPattern -> constant
-- On IDENT reduce production atomicPattern -> constant
-- On HASH reduce production atomicPattern -> constant
-- On FALSE reduce production atomicPattern -> constant
-- On EQUALS reduce production atomicPattern -> constant
-- On DOLLAR reduce production atomicPattern -> constant
-- On COMMA reduce production atomicPattern -> constant
-- On COLON_COLON reduce production atomicPattern -> constant
-- On COLON reduce production atomicPattern -> constant
-- On CHAR reduce production atomicPattern -> constant
-- On BYTEARRAY reduce production atomicPattern -> constant
-- On BAR reduce production atomicPattern -> constant

State 161:
## Known stack suffix:
## atomicPattern
## LR(1) items:
nonempty_list(atomicPattern) -> atomicPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
nonempty_list(atomicPattern) -> atomicPattern . nonempty_list(atomicPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On path(uident) shift to state 100
-- On nonempty_list(atomicPattern) shift to state 162
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 161
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On WHEN reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On SQUIGGLY_RARROW reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On SEMICOLON reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On RPAREN reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On RBRACK reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On RBRACE reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On RARROW reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On LENS_PAREN_RIGHT reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On EQUALS reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On COMMA reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On COLON_COLON reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On COLON reduce production nonempty_list(atomicPattern) -> atomicPattern
-- On BAR reduce production nonempty_list(atomicPattern) -> atomicPattern

State 162:
## Known stack suffix:
## atomicPattern nonempty_list(atomicPattern)
## LR(1) items:
nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On SQUIGGLY_RARROW reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On SEMICOLON reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On RPAREN reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On RBRACK reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On RBRACE reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On RARROW reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On LENS_PAREN_RIGHT reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On EQUALS reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On COMMA reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On COLON_COLON reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On COLON reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)
-- On BAR reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)

State 163:
## Known stack suffix:
## aqualified(lident)
## LR(1) items:
atomicPattern -> aqualified(lident) . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> aqualified(lident)
-- On UNDERSCORE reduce production atomicPattern -> aqualified(lident)
-- On UINT8 reduce production atomicPattern -> aqualified(lident)
-- On UINT64 reduce production atomicPattern -> aqualified(lident)
-- On UINT32 reduce production atomicPattern -> aqualified(lident)
-- On UINT16 reduce production atomicPattern -> aqualified(lident)
-- On TVAR reduce production atomicPattern -> aqualified(lident)
-- On TRUE reduce production atomicPattern -> aqualified(lident)
-- On STRING reduce production atomicPattern -> aqualified(lident)
-- On SQUIGGLY_RARROW reduce production atomicPattern -> aqualified(lident)
-- On SET_RANGE_OF reduce production atomicPattern -> aqualified(lident)
-- On SEMICOLON reduce production atomicPattern -> aqualified(lident)
-- On RPAREN reduce production atomicPattern -> aqualified(lident)
-- On REIFY reduce production atomicPattern -> aqualified(lident)
-- On RBRACK reduce production atomicPattern -> aqualified(lident)
-- On RBRACE reduce production atomicPattern -> aqualified(lident)
-- On RARROW reduce production atomicPattern -> aqualified(lident)
-- On RANGE_OF reduce production atomicPattern -> aqualified(lident)
-- On NAME reduce production atomicPattern -> aqualified(lident)
-- On LPAREN_RPAREN reduce production atomicPattern -> aqualified(lident)
-- On LPAREN reduce production atomicPattern -> aqualified(lident)
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> aqualified(lident)
-- On LENS_PAREN_LEFT reduce production atomicPattern -> aqualified(lident)
-- On LBRACK reduce production atomicPattern -> aqualified(lident)
-- On LBRACE reduce production atomicPattern -> aqualified(lident)
-- On INT8 reduce production atomicPattern -> aqualified(lident)
-- On INT64 reduce production atomicPattern -> aqualified(lident)
-- On INT32 reduce production atomicPattern -> aqualified(lident)
-- On INT16 reduce production atomicPattern -> aqualified(lident)
-- On INT reduce production atomicPattern -> aqualified(lident)
-- On IEEE64 reduce production atomicPattern -> aqualified(lident)
-- On IDENT reduce production atomicPattern -> aqualified(lident)
-- On HASH reduce production atomicPattern -> aqualified(lident)
-- On FALSE reduce production atomicPattern -> aqualified(lident)
-- On EQUALS reduce production atomicPattern -> aqualified(lident)
-- On DOLLAR reduce production atomicPattern -> aqualified(lident)
-- On COMMA reduce production atomicPattern -> aqualified(lident)
-- On COLON_COLON reduce production atomicPattern -> aqualified(lident)
-- On COLON reduce production atomicPattern -> aqualified(lident)
-- On CHAR reduce production atomicPattern -> aqualified(lident)
-- On BYTEARRAY reduce production atomicPattern -> aqualified(lident)
-- On BAR reduce production atomicPattern -> aqualified(lident)

State 164:
## Known stack suffix:
## aqualUniverses
## LR(1) items:
aqualified(lident) -> aqualUniverses . lident [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On IDENT shift to state 62
-- On lident shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## aqualUniverses lident
## LR(1) items:
aqualified(lident) -> aqualUniverses lident . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production aqualified(lident) -> aqualUniverses lident
-- On UNDERSCORE reduce production aqualified(lident) -> aqualUniverses lident
-- On UINT8 reduce production aqualified(lident) -> aqualUniverses lident
-- On UINT64 reduce production aqualified(lident) -> aqualUniverses lident
-- On UINT32 reduce production aqualified(lident) -> aqualUniverses lident
-- On UINT16 reduce production aqualified(lident) -> aqualUniverses lident
-- On TVAR reduce production aqualified(lident) -> aqualUniverses lident
-- On TRUE reduce production aqualified(lident) -> aqualUniverses lident
-- On STRING reduce production aqualified(lident) -> aqualUniverses lident
-- On SQUIGGLY_RARROW reduce production aqualified(lident) -> aqualUniverses lident
-- On SET_RANGE_OF reduce production aqualified(lident) -> aqualUniverses lident
-- On SEMICOLON reduce production aqualified(lident) -> aqualUniverses lident
-- On RPAREN reduce production aqualified(lident) -> aqualUniverses lident
-- On REIFY reduce production aqualified(lident) -> aqualUniverses lident
-- On RBRACK reduce production aqualified(lident) -> aqualUniverses lident
-- On RBRACE reduce production aqualified(lident) -> aqualUniverses lident
-- On RARROW reduce production aqualified(lident) -> aqualUniverses lident
-- On RANGE_OF reduce production aqualified(lident) -> aqualUniverses lident
-- On NAME reduce production aqualified(lident) -> aqualUniverses lident
-- On LPAREN_RPAREN reduce production aqualified(lident) -> aqualUniverses lident
-- On LPAREN reduce production aqualified(lident) -> aqualUniverses lident
-- On LENS_PAREN_RIGHT reduce production aqualified(lident) -> aqualUniverses lident
-- On LENS_PAREN_LEFT reduce production aqualified(lident) -> aqualUniverses lident
-- On LBRACK reduce production aqualified(lident) -> aqualUniverses lident
-- On LBRACE reduce production aqualified(lident) -> aqualUniverses lident
-- On INT8 reduce production aqualified(lident) -> aqualUniverses lident
-- On INT64 reduce production aqualified(lident) -> aqualUniverses lident
-- On INT32 reduce production aqualified(lident) -> aqualUniverses lident
-- On INT16 reduce production aqualified(lident) -> aqualUniverses lident
-- On INT reduce production aqualified(lident) -> aqualUniverses lident
-- On IEEE64 reduce production aqualified(lident) -> aqualUniverses lident
-- On IDENT reduce production aqualified(lident) -> aqualUniverses lident
-- On HASH reduce production aqualified(lident) -> aqualUniverses lident
-- On FALSE reduce production aqualified(lident) -> aqualUniverses lident
-- On EQUALS reduce production aqualified(lident) -> aqualUniverses lident
-- On DOLLAR reduce production aqualified(lident) -> aqualUniverses lident
-- On COMMA reduce production aqualified(lident) -> aqualUniverses lident
-- On COLON_COLON reduce production aqualified(lident) -> aqualUniverses lident
-- On COLON reduce production aqualified(lident) -> aqualUniverses lident
-- On CHAR reduce production aqualified(lident) -> aqualUniverses lident
-- On BYTEARRAY reduce production aqualified(lident) -> aqualUniverses lident
-- On BAR reduce production aqualified(lident) -> aqualUniverses lident

State 166:
## Known stack suffix:
## constructorPattern
## LR(1) items:
constructorPattern -> constructorPattern . COLON_COLON constructorPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern . COMMA separated_nonempty_list(COMMA,constructorPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
## Transitions:
-- On COMMA shift to state 167
-- On COLON_COLON shift to state 170
## Reductions:
-- On WHEN reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On SQUIGGLY_RARROW reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On SEMICOLON reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On RPAREN reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On RBRACK reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On RBRACE reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On RARROW reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On LENS_PAREN_RIGHT reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On EQUALS reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On COLON reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern
-- On BAR reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern

State 167:
## Known stack suffix:
## constructorPattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA . separated_nonempty_list(COMMA,constructorPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 168
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 168:
## Known stack suffix:
## constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
## LR(1) items:
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On SQUIGGLY_RARROW reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On SEMICOLON reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On RPAREN reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On RBRACK reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On RBRACE reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On RARROW reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On LENS_PAREN_RIGHT reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On EQUALS reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On COLON reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
-- On BAR reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)

State 169:
## Known stack suffix:
## atomicPattern
## LR(1) items:
constructorPattern -> atomicPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production constructorPattern -> atomicPattern
-- On SQUIGGLY_RARROW reduce production constructorPattern -> atomicPattern
-- On SEMICOLON reduce production constructorPattern -> atomicPattern
-- On RPAREN reduce production constructorPattern -> atomicPattern
-- On RBRACK reduce production constructorPattern -> atomicPattern
-- On RBRACE reduce production constructorPattern -> atomicPattern
-- On RARROW reduce production constructorPattern -> atomicPattern
-- On LENS_PAREN_RIGHT reduce production constructorPattern -> atomicPattern
-- On EQUALS reduce production constructorPattern -> atomicPattern
-- On COMMA reduce production constructorPattern -> atomicPattern
-- On COLON_COLON reduce production constructorPattern -> atomicPattern
-- On COLON reduce production constructorPattern -> atomicPattern
-- On BAR reduce production constructorPattern -> atomicPattern

State 170:
## Known stack suffix:
## constructorPattern COLON_COLON
## LR(1) items:
constructorPattern -> constructorPattern COLON_COLON . constructorPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 171
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 171:
## Known stack suffix:
## constructorPattern COLON_COLON constructorPattern
## LR(1) items:
constructorPattern -> constructorPattern . COLON_COLON constructorPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
constructorPattern -> constructorPattern COLON_COLON constructorPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On COLON_COLON shift to state 170
## Reductions:
-- On WHEN reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On SQUIGGLY_RARROW reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On SEMICOLON reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On RPAREN reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On RBRACK reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On RBRACE reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On RARROW reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On LENS_PAREN_RIGHT reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On EQUALS reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On COMMA reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On COLON reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern
-- On BAR reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern

State 172:
## Known stack suffix:
## fieldPattern
## LR(1) items:
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern . [ RBRACE ]
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern . SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 173
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern

State 173:
## Known stack suffix:
## fieldPattern SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern SEMICOLON . separated_nonempty_list(SEMICOLON,fieldPattern) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On separated_nonempty_list(SEMICOLON,fieldPattern) shift to state 174
-- On qlident shift to state 148
-- On path(lident) shift to state 98
-- On lident shift to state 80
-- On fieldPattern shift to state 172
## Reductions:

State 174:
## Known stack suffix:
## fieldPattern SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern)
## LR(1) items:
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern)

State 175:
## Known stack suffix:
## tuplePattern
## LR(1) items:
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern . [ RBRACK ]
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern . SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern) [ RBRACK ]
## Transitions:
-- On SEMICOLON shift to state 176
## Reductions:
-- On RBRACK reduce production separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern

State 176:
## Known stack suffix:
## tuplePattern SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern SEMICOLON . separated_nonempty_list(SEMICOLON,tuplePattern) [ RBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 175
-- On separated_nonempty_list(SEMICOLON,tuplePattern) shift to state 177
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 177:
## Known stack suffix:
## tuplePattern SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern)
## LR(1) items:
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern)

State 178:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,tuplePattern)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,tuplePattern)) -> separated_nonempty_list(SEMICOLON,tuplePattern) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production loption(separated_nonempty_list(SEMICOLON,tuplePattern)) -> separated_nonempty_list(SEMICOLON,tuplePattern)

State 179:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern))
## LR(1) items:
atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) . RBRACK [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RBRACK shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
## LR(1) items:
atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On UNDERSCORE reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On UINT8 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On UINT64 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On UINT32 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On UINT16 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On TVAR reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On TRUE reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On STRING reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On SET_RANGE_OF reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On SEMICOLON reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On RPAREN reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On REIFY reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On RBRACK reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On RBRACE reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On RARROW reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On RANGE_OF reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On NAME reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On LPAREN_RPAREN reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On LPAREN reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On LBRACK reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On LBRACE reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On INT8 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On INT64 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On INT32 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On INT16 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On INT reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On IEEE64 reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On IDENT reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On HASH reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On FALSE reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On EQUALS reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On DOLLAR reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On COMMA reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On COLON_COLON reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On COLON reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On CHAR reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On BYTEARRAY reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
-- On BAR reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK

State 181:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern . COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
constructorPattern -> constructorPattern . COLON_COLON constructorPattern [ COMMA COLON_COLON ]
## Transitions:
-- On COMMA shift to state 182
-- On COLON_COLON shift to state 170
## Reductions:

State 182:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern COMMA
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA . separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 183
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 183:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) . LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On UNDERSCORE reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On UINT8 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On UINT64 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On UINT32 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On UINT16 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On TVAR reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On TRUE reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On STRING reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On SET_RANGE_OF reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On SEMICOLON reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On RPAREN reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On REIFY reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On RBRACK reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On RBRACE reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On RARROW reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On RANGE_OF reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On NAME reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On LPAREN_RPAREN reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On LPAREN reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On LBRACK reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On LBRACE reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On INT8 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On INT64 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On INT32 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On INT16 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On INT reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On IEEE64 reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On IDENT reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On HASH reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On FALSE reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On EQUALS reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On DOLLAR reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On COMMA reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On COLON_COLON reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On COLON reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On CHAR reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On BYTEARRAY reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
-- On BAR reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT

State 185:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On STRING reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On NAME reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On INT reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On HASH reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On COLON reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On BAR reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN

State 187:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On STRING reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On NAME reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On INT reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On HASH reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On COLON reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On BAR reduce production atomicPattern -> LPAREN COLON_COLON RPAREN

State 189:
## Known stack suffix:
## LPAREN tuplePattern
## LR(1) items:
atomicPattern -> LPAREN tuplePattern . COLON simpleArrow refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN tuplePattern . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 190
-- On COLON shift to state 191
## Reductions:

State 190:
## Known stack suffix:
## LPAREN tuplePattern RPAREN
## LR(1) items:
atomicPattern -> LPAREN tuplePattern RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On STRING reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On NAME reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On INT reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On HASH reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On COLON reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN tuplePattern RPAREN
-- On BAR reduce production atomicPattern -> LPAREN tuplePattern RPAREN

State 191:
## Known stack suffix:
## LPAREN tuplePattern COLON
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON . simpleArrow refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 599
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 192:
## Known stack suffix:
## TILDE
## LR(1) items:
tmNoEqWith(appTerm) -> TILDE . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## TILDE atomicTerm
## LR(1) items:
tmNoEqWith(appTerm) -> TILDE atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On RARROW reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX4 reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX3 reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On MINUS reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On LBRACE reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On EQUALS reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On BACKTICK reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm
-- On AMP reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm

State 194:
## Known stack suffix:
## QUOTE
## LR(1) items:
tmEqWith(appTerm) -> QUOTE . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 598
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 195:
## Known stack suffix:
## PERC_BACKTICK
## LR(1) items:
tmNoEqWith(appTerm) -> PERC_BACKTICK . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## PERC_BACKTICK atomicTerm
## LR(1) items:
tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On RARROW reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX4 reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX3 reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On MINUS reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On LBRACE reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On EQUALS reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On BACKTICK reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm
-- On AMP reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm

State 197:
## Known stack suffix:
## MINUS
## LR(1) items:
tmEqWith(appTerm) -> MINUS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 597
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 198:
## Known stack suffix:
## LBRACE
## LR(1) items:
tmNoEqWith(appTerm) -> LBRACE . recordExp RBRACE [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 590
-- On recordExp shift to state 591
-- On quident shift to state 83
-- On qlident shift to state 593
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 594
## Reductions:

State 199:
## Known stack suffix:
## simpleDef
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef . [ RBRACE ]
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef . SEMICOLON right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 200
## Reductions:
-- On RBRACE reduce production right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef

State 200:
## Known stack suffix:
## simpleDef SEMICOLON
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON . right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On simpleDef shift to state 201
-- On right_flexible_list(SEMICOLON,simpleDef) shift to state 589
-- On qlident shift to state 204
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,simpleDef) ->

State 201:
## Known stack suffix:
## simpleDef
## LR(1) items:
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef . [ RBRACE ]
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef . SEMICOLON right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 202
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,simpleDef) -> simpleDef

State 202:
## Known stack suffix:
## simpleDef SEMICOLON
## LR(1) items:
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON . right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On simpleDef shift to state 201
-- On right_flexible_list(SEMICOLON,simpleDef) shift to state 203
-- On qlident shift to state 204
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,simpleDef) ->

State 203:
## Known stack suffix:
## simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)
## LR(1) items:
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)

State 204:
## Known stack suffix:
## qlident
## LR(1) items:
simpleDef -> qlident . EQUALS noSeqTerm [ SEMICOLON RBRACE ]
simpleDef -> qlident . [ SEMICOLON RBRACE ]
## Transitions:
-- On EQUALS shift to state 205
## Reductions:
-- On SEMICOLON reduce production simpleDef -> qlident
-- On RBRACE reduce production simpleDef -> qlident

State 205:
## Known stack suffix:
## qlident EQUALS
## LR(1) items:
simpleDef -> qlident EQUALS . noSeqTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 588
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 206:
## Known stack suffix:
## FUN
## LR(1) items:
simpleTerm -> FUN . nonempty_list(patternOrMultibinder) RARROW term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 207
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On patternOrMultibinder shift to state 532
-- On path(uident) shift to state 100
-- On nonempty_list(patternOrMultibinder) shift to state 585
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 534
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 207:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicPattern -> LPAREN . tuplePattern COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . tuplePattern RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPPREFIX RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX3 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX4 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0a RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0b RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0c RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0d RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX1 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX2 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . PIPE_RIGHT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . COLON_EQUALS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . COLON_COLON RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
patternOrMultibinder -> LPAREN . aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PIPE_RIGHT shift to state 119
-- On OP_MIXFIX_ASSIGNMENT shift to state 121
-- On OP_MIXFIX_ACCESS shift to state 123
-- On OPPREFIX shift to state 125
-- On OPINFIX4 shift to state 127
-- On OPINFIX3 shift to state 129
-- On OPINFIX2 shift to state 131
-- On OPINFIX1 shift to state 133
-- On OPINFIX0d shift to state 135
-- On OPINFIX0c shift to state 137
-- On OPINFIX0b shift to state 139
-- On OPINFIX0a shift to state 141
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 185
-- On COLON_COLON shift to state 187
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 189
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 208
-- On aqualUniverses shift to state 164
## Reductions:

State 208:
## Known stack suffix:
## LPAREN aqualified(lident)
## LR(1) items:
atomicPattern -> aqualified(lident) . [ RPAREN COMMA COLON_COLON COLON ]
patternOrMultibinder -> LPAREN aqualified(lident) . nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lident)) shift to state 209
-- On lident shift to state 159
-- On aqualified(lident) shift to state 583
-- On aqualUniverses shift to state 164
## Reductions:
-- On RPAREN reduce production atomicPattern -> aqualified(lident)
-- On COMMA reduce production atomicPattern -> aqualified(lident)
-- On COLON_COLON reduce production atomicPattern -> aqualified(lident)
-- On COLON reduce production atomicPattern -> aqualified(lident)

State 209:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident))
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) . COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On COLON shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON . simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 580
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 211:
## Known stack suffix:
## EQUALS
## LR(1) items:
aqual -> EQUALS . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production aqual -> EQUALS
-- On UINT8 reduce production aqual -> EQUALS
-- On UINT64 reduce production aqual -> EQUALS
-- On UINT32 reduce production aqual -> EQUALS
-- On UINT16 reduce production aqual -> EQUALS
-- On TVAR reduce production aqual -> EQUALS
-- On TRUE reduce production aqual -> EQUALS
-- On TILDE reduce production aqual -> EQUALS
-- On STRING reduce production aqual -> EQUALS
-- On SET_RANGE_OF reduce production aqual -> EQUALS
-- On REIFY reduce production aqual -> EQUALS
-- On RANGE_OF reduce production aqual -> EQUALS
-- On QUOTE reduce production aqual -> EQUALS
-- On PERC_BACKTICK reduce production aqual -> EQUALS
-- On PERCENT_LBRACK reduce production aqual -> EQUALS
-- On OPPREFIX reduce production aqual -> EQUALS
-- On NAME reduce production aqual -> EQUALS
-- On MINUS reduce production aqual -> EQUALS
-- On LPAREN_RPAREN reduce production aqual -> EQUALS
-- On LPAREN reduce production aqual -> EQUALS
-- On LENS_PAREN_LEFT reduce production aqual -> EQUALS
-- On LBRACK_BAR reduce production aqual -> EQUALS
-- On LBRACK reduce production aqual -> EQUALS
-- On LBRACE reduce production aqual -> EQUALS
-- On INT8 reduce production aqual -> EQUALS
-- On INT64 reduce production aqual -> EQUALS
-- On INT32 reduce production aqual -> EQUALS
-- On INT16 reduce production aqual -> EQUALS
-- On INT reduce production aqual -> EQUALS
-- On IEEE64 reduce production aqual -> EQUALS
-- On IDENT reduce production aqual -> EQUALS
-- On FALSE reduce production aqual -> EQUALS
-- On CHAR reduce production aqual -> EQUALS
-- On BYTEARRAY reduce production aqual -> EQUALS
-- On BEGIN reduce production aqual -> EQUALS
-- On BANG_LBRACE reduce production aqual -> EQUALS
-- On BACKTICK_HASH reduce production aqual -> EQUALS
-- On BACKTICK_AT reduce production aqual -> EQUALS
-- On BACKTICK reduce production aqual -> EQUALS

State 212:
## Known stack suffix:
## BACKTICK_HASH
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_HASH . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## BACKTICK_HASH atomicTerm
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On RARROW reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On MINUS reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On LBRACE reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On EQUALS reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm

State 214:
## Known stack suffix:
## BACKTICK_AT
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_AT . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## BACKTICK_AT atomicTerm
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_AT atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On RARROW reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On MINUS reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On LBRACE reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On EQUALS reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm

State 216:
## Known stack suffix:
## BACKTICK
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 579
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 217:
## Known stack suffix:
## tmNoEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On OPINFIX3 shift to state 569
-- On COLON_COLON shift to state 575
-- On BACKTICK shift to state 571
-- On AMP shift to state 577
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On MINUS reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)

State 218:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX4
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 219
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 219:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On RARROW reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On OPINFIX3 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On MINUS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On LBRACE reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On BACKTICK reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
-- On AMP reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)

State 220:
## Known stack suffix:
## indexingTerm
## LR(1) items:
appTerm -> indexingTerm . list(argTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNIV_HASH shift to state 221
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 238
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On universe shift to state 564
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(argTerm) shift to state 565
-- On lident shift to state 80
-- On indexingTerm shift to state 566
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On argTerm shift to state 567
## Reductions:
-- On WITH reduce production list(argTerm) ->
-- On VAL reduce production list(argTerm) ->
-- On UNOPTEQUALITY reduce production list(argTerm) ->
-- On UNFOLDABLE reduce production list(argTerm) ->
-- On UNFOLD reduce production list(argTerm) ->
-- On TYPE reduce production list(argTerm) ->
-- On TOTAL reduce production list(argTerm) ->
-- On THEN reduce production list(argTerm) ->
-- On SUB_EFFECT reduce production list(argTerm) ->
-- On SUBTYPE reduce production list(argTerm) ->
-- On SUBKIND reduce production list(argTerm) ->
-- On SQUIGGLY_RARROW reduce production list(argTerm) ->
-- On SPLICE reduce production list(argTerm) ->
-- On SEMICOLON_SEMICOLON reduce production list(argTerm) ->
-- On SEMICOLON reduce production list(argTerm) ->
-- On RPAREN reduce production list(argTerm) ->
-- On REIFIABLE reduce production list(argTerm) ->
-- On REFLECTABLE reduce production list(argTerm) ->
-- On RBRACK reduce production list(argTerm) ->
-- On RBRACE reduce production list(argTerm) ->
-- On RARROW reduce production list(argTerm) ->
-- On PRIVATE reduce production list(argTerm) ->
-- On PRAGMA_SET_OPTIONS reduce production list(argTerm) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(argTerm) ->
-- On PIPE_RIGHT reduce production list(argTerm) ->
-- On OPINFIX4 reduce production list(argTerm) ->
-- On OPINFIX3 reduce production list(argTerm) ->
-- On OPINFIX2 reduce production list(argTerm) ->
-- On OPINFIX1 reduce production list(argTerm) ->
-- On OPINFIX0d reduce production list(argTerm) ->
-- On OPINFIX0c reduce production list(argTerm) ->
-- On OPINFIX0b reduce production list(argTerm) ->
-- On OPINFIX0a reduce production list(argTerm) ->
-- On OPEN reduce production list(argTerm) ->
-- On OPAQUE reduce production list(argTerm) ->
-- On NOEXTRACT reduce production list(argTerm) ->
-- On NOEQUALITY reduce production list(argTerm) ->
-- On NEW_EFFECT reduce production list(argTerm) ->
-- On NEW reduce production list(argTerm) ->
-- On MODULE reduce production list(argTerm) ->
-- On MINUS reduce production list(argTerm) ->
-- On LOGIC reduce production list(argTerm) ->
-- On LET reduce production list(argTerm) ->
-- On LENS_PAREN_RIGHT reduce production list(argTerm) ->
-- On LBRACK_AT reduce production list(argTerm) ->
-- On LBRACE reduce production list(argTerm) ->
-- On IRREDUCIBLE reduce production list(argTerm) ->
-- On INLINE_FOR_EXTRACTION reduce production list(argTerm) ->
-- On INLINE reduce production list(argTerm) ->
-- On INCLUDE reduce production list(argTerm) ->
-- On IN reduce production list(argTerm) ->
-- On IMPLIES reduce production list(argTerm) ->
-- On IFF reduce production list(argTerm) ->
-- On FSDOC_STANDALONE reduce production list(argTerm) ->
-- On FSDOC reduce production list(argTerm) ->
-- On EXCEPTION reduce production list(argTerm) ->
-- On EQUALS reduce production list(argTerm) ->
-- On EOF reduce production list(argTerm) ->
-- On END reduce production list(argTerm) ->
-- On ELSE reduce production list(argTerm) ->
-- On EFFECT reduce production list(argTerm) ->
-- On DISJUNCTION reduce production list(argTerm) ->
-- On DEFAULT reduce production list(argTerm) ->
-- On CONJUNCTION reduce production list(argTerm) ->
-- On COMMA reduce production list(argTerm) ->
-- On COLON_EQUALS reduce production list(argTerm) ->
-- On COLON_COLON reduce production list(argTerm) ->
-- On BY reduce production list(argTerm) ->
-- On BAR_RBRACK reduce production list(argTerm) ->
-- On BAR reduce production list(argTerm) ->
-- On BACKTICK reduce production list(argTerm) ->
-- On ASSUME reduce production list(argTerm) ->
-- On AND reduce production list(argTerm) ->
-- On AMP reduce production list(argTerm) ->
-- On ABSTRACT reduce production list(argTerm) ->
-- On # reduce production list(argTerm) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production list(argTerm) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 221:
## Known stack suffix:
## UNIV_HASH
## LR(1) items:
universe -> UNIV_HASH . atomicUniverse [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On lident shift to state 233
-- On atomicUniverse shift to state 237
## Reductions:

State 222:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicUniverse -> UNDERSCORE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicUniverse -> UNDERSCORE
-- On VAL reduce production atomicUniverse -> UNDERSCORE
-- On UNOPTEQUALITY reduce production atomicUniverse -> UNDERSCORE
-- On UNIV_HASH reduce production atomicUniverse -> UNDERSCORE
-- On UNFOLDABLE reduce production atomicUniverse -> UNDERSCORE
-- On UNFOLD reduce production atomicUniverse -> UNDERSCORE
-- On UNDERSCORE reduce production atomicUniverse -> UNDERSCORE
-- On UINT8 reduce production atomicUniverse -> UNDERSCORE
-- On UINT64 reduce production atomicUniverse -> UNDERSCORE
-- On UINT32 reduce production atomicUniverse -> UNDERSCORE
-- On UINT16 reduce production atomicUniverse -> UNDERSCORE
-- On TYPE reduce production atomicUniverse -> UNDERSCORE
-- On TVAR reduce production atomicUniverse -> UNDERSCORE
-- On TRUE reduce production atomicUniverse -> UNDERSCORE
-- On TOTAL reduce production atomicUniverse -> UNDERSCORE
-- On THEN reduce production atomicUniverse -> UNDERSCORE
-- On SUB_EFFECT reduce production atomicUniverse -> UNDERSCORE
-- On SUBTYPE reduce production atomicUniverse -> UNDERSCORE
-- On SUBKIND reduce production atomicUniverse -> UNDERSCORE
-- On STRING reduce production atomicUniverse -> UNDERSCORE
-- On SQUIGGLY_RARROW reduce production atomicUniverse -> UNDERSCORE
-- On SPLICE reduce production atomicUniverse -> UNDERSCORE
-- On SET_RANGE_OF reduce production atomicUniverse -> UNDERSCORE
-- On SEMICOLON_SEMICOLON reduce production atomicUniverse -> UNDERSCORE
-- On SEMICOLON reduce production atomicUniverse -> UNDERSCORE
-- On RPAREN reduce production atomicUniverse -> UNDERSCORE
-- On REIFY reduce production atomicUniverse -> UNDERSCORE
-- On REIFIABLE reduce production atomicUniverse -> UNDERSCORE
-- On REFLECTABLE reduce production atomicUniverse -> UNDERSCORE
-- On RBRACK reduce production atomicUniverse -> UNDERSCORE
-- On RBRACE reduce production atomicUniverse -> UNDERSCORE
-- On RARROW reduce production atomicUniverse -> UNDERSCORE
-- On RANGE_OF reduce production atomicUniverse -> UNDERSCORE
-- On PRIVATE reduce production atomicUniverse -> UNDERSCORE
-- On PRAGMA_SET_OPTIONS reduce production atomicUniverse -> UNDERSCORE
-- On PRAGMA_RESET_OPTIONS reduce production atomicUniverse -> UNDERSCORE
-- On PIPE_RIGHT reduce production atomicUniverse -> UNDERSCORE
-- On PERCENT_LBRACK reduce production atomicUniverse -> UNDERSCORE
-- On OPPREFIX reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX4 reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX3 reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX2 reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX1 reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX0d reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX0c reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX0b reduce production atomicUniverse -> UNDERSCORE
-- On OPINFIX0a reduce production atomicUniverse -> UNDERSCORE
-- On OPEN reduce production atomicUniverse -> UNDERSCORE
-- On OPAQUE reduce production atomicUniverse -> UNDERSCORE
-- On NOEXTRACT reduce production atomicUniverse -> UNDERSCORE
-- On NOEQUALITY reduce production atomicUniverse -> UNDERSCORE
-- On NEW_EFFECT reduce production atomicUniverse -> UNDERSCORE
-- On NEW reduce production atomicUniverse -> UNDERSCORE
-- On NAME reduce production atomicUniverse -> UNDERSCORE
-- On MODULE reduce production atomicUniverse -> UNDERSCORE
-- On MINUS reduce production atomicUniverse -> UNDERSCORE
-- On LPAREN_RPAREN reduce production atomicUniverse -> UNDERSCORE
-- On LPAREN reduce production atomicUniverse -> UNDERSCORE
-- On LOGIC reduce production atomicUniverse -> UNDERSCORE
-- On LET reduce production atomicUniverse -> UNDERSCORE
-- On LENS_PAREN_RIGHT reduce production atomicUniverse -> UNDERSCORE
-- On LENS_PAREN_LEFT reduce production atomicUniverse -> UNDERSCORE
-- On LBRACK_BAR reduce production atomicUniverse -> UNDERSCORE
-- On LBRACK_AT reduce production atomicUniverse -> UNDERSCORE
-- On LBRACK reduce production atomicUniverse -> UNDERSCORE
-- On LBRACE reduce production atomicUniverse -> UNDERSCORE
-- On IRREDUCIBLE reduce production atomicUniverse -> UNDERSCORE
-- On INT8 reduce production atomicUniverse -> UNDERSCORE
-- On INT64 reduce production atomicUniverse -> UNDERSCORE
-- On INT32 reduce production atomicUniverse -> UNDERSCORE
-- On INT16 reduce production atomicUniverse -> UNDERSCORE
-- On INT reduce production atomicUniverse -> UNDERSCORE
-- On INLINE_FOR_EXTRACTION reduce production atomicUniverse -> UNDERSCORE
-- On INLINE reduce production atomicUniverse -> UNDERSCORE
-- On INCLUDE reduce production atomicUniverse -> UNDERSCORE
-- On IN reduce production atomicUniverse -> UNDERSCORE
-- On IMPLIES reduce production atomicUniverse -> UNDERSCORE
-- On IFF reduce production atomicUniverse -> UNDERSCORE
-- On IEEE64 reduce production atomicUniverse -> UNDERSCORE
-- On IDENT reduce production atomicUniverse -> UNDERSCORE
-- On HASH reduce production atomicUniverse -> UNDERSCORE
-- On FSDOC_STANDALONE reduce production atomicUniverse -> UNDERSCORE
-- On FSDOC reduce production atomicUniverse -> UNDERSCORE
-- On FALSE reduce production atomicUniverse -> UNDERSCORE
-- On EXCEPTION reduce production atomicUniverse -> UNDERSCORE
-- On EQUALS reduce production atomicUniverse -> UNDERSCORE
-- On EOF reduce production atomicUniverse -> UNDERSCORE
-- On END reduce production atomicUniverse -> UNDERSCORE
-- On ELSE reduce production atomicUniverse -> UNDERSCORE
-- On EFFECT reduce production atomicUniverse -> UNDERSCORE
-- On DISJUNCTION reduce production atomicUniverse -> UNDERSCORE
-- On DEFAULT reduce production atomicUniverse -> UNDERSCORE
-- On CONJUNCTION reduce production atomicUniverse -> UNDERSCORE
-- On COMMA reduce production atomicUniverse -> UNDERSCORE
-- On COLON_EQUALS reduce production atomicUniverse -> UNDERSCORE
-- On COLON_COLON reduce production atomicUniverse -> UNDERSCORE
-- On CHAR reduce production atomicUniverse -> UNDERSCORE
-- On BYTEARRAY reduce production atomicUniverse -> UNDERSCORE
-- On BY reduce production atomicUniverse -> UNDERSCORE
-- On BEGIN reduce production atomicUniverse -> UNDERSCORE
-- On BAR_RBRACK reduce production atomicUniverse -> UNDERSCORE
-- On BAR reduce production atomicUniverse -> UNDERSCORE
-- On BANG_LBRACE reduce production atomicUniverse -> UNDERSCORE
-- On BACKTICK reduce production atomicUniverse -> UNDERSCORE
-- On ASSUME reduce production atomicUniverse -> UNDERSCORE
-- On AND reduce production atomicUniverse -> UNDERSCORE
-- On AMP reduce production atomicUniverse -> UNDERSCORE
-- On ABSTRACT reduce production atomicUniverse -> UNDERSCORE
-- On # reduce production atomicUniverse -> UNDERSCORE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicUniverse -> UNDERSCORE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 223:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicUniverse -> LPAREN . universeFrom RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On NAME shift to state 35
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On universeFrom shift to state 225
-- On uident shift to state 229
-- On lident shift to state 230
-- On ident shift to state 231
-- On atomicUniverse shift to state 236
## Reductions:

State 224:
## Known stack suffix:
## INT
## LR(1) items:
atomicUniverse -> INT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicUniverse -> INT
-- On VAL reduce production atomicUniverse -> INT
-- On UNOPTEQUALITY reduce production atomicUniverse -> INT
-- On UNIV_HASH reduce production atomicUniverse -> INT
-- On UNFOLDABLE reduce production atomicUniverse -> INT
-- On UNFOLD reduce production atomicUniverse -> INT
-- On UNDERSCORE reduce production atomicUniverse -> INT
-- On UINT8 reduce production atomicUniverse -> INT
-- On UINT64 reduce production atomicUniverse -> INT
-- On UINT32 reduce production atomicUniverse -> INT
-- On UINT16 reduce production atomicUniverse -> INT
-- On TYPE reduce production atomicUniverse -> INT
-- On TVAR reduce production atomicUniverse -> INT
-- On TRUE reduce production atomicUniverse -> INT
-- On TOTAL reduce production atomicUniverse -> INT
-- On THEN reduce production atomicUniverse -> INT
-- On SUB_EFFECT reduce production atomicUniverse -> INT
-- On SUBTYPE reduce production atomicUniverse -> INT
-- On SUBKIND reduce production atomicUniverse -> INT
-- On STRING reduce production atomicUniverse -> INT
-- On SQUIGGLY_RARROW reduce production atomicUniverse -> INT
-- On SPLICE reduce production atomicUniverse -> INT
-- On SET_RANGE_OF reduce production atomicUniverse -> INT
-- On SEMICOLON_SEMICOLON reduce production atomicUniverse -> INT
-- On SEMICOLON reduce production atomicUniverse -> INT
-- On RPAREN reduce production atomicUniverse -> INT
-- On REIFY reduce production atomicUniverse -> INT
-- On REIFIABLE reduce production atomicUniverse -> INT
-- On REFLECTABLE reduce production atomicUniverse -> INT
-- On RBRACK reduce production atomicUniverse -> INT
-- On RBRACE reduce production atomicUniverse -> INT
-- On RARROW reduce production atomicUniverse -> INT
-- On RANGE_OF reduce production atomicUniverse -> INT
-- On PRIVATE reduce production atomicUniverse -> INT
-- On PRAGMA_SET_OPTIONS reduce production atomicUniverse -> INT
-- On PRAGMA_RESET_OPTIONS reduce production atomicUniverse -> INT
-- On PIPE_RIGHT reduce production atomicUniverse -> INT
-- On PERCENT_LBRACK reduce production atomicUniverse -> INT
-- On OPPREFIX reduce production atomicUniverse -> INT
-- On OPINFIX4 reduce production atomicUniverse -> INT
-- On OPINFIX3 reduce production atomicUniverse -> INT
-- On OPINFIX2 reduce production atomicUniverse -> INT
-- On OPINFIX1 reduce production atomicUniverse -> INT
-- On OPINFIX0d reduce production atomicUniverse -> INT
-- On OPINFIX0c reduce production atomicUniverse -> INT
-- On OPINFIX0b reduce production atomicUniverse -> INT
-- On OPINFIX0a reduce production atomicUniverse -> INT
-- On OPEN reduce production atomicUniverse -> INT
-- On OPAQUE reduce production atomicUniverse -> INT
-- On NOEXTRACT reduce production atomicUniverse -> INT
-- On NOEQUALITY reduce production atomicUniverse -> INT
-- On NEW_EFFECT reduce production atomicUniverse -> INT
-- On NEW reduce production atomicUniverse -> INT
-- On NAME reduce production atomicUniverse -> INT
-- On MODULE reduce production atomicUniverse -> INT
-- On MINUS reduce production atomicUniverse -> INT
-- On LPAREN_RPAREN reduce production atomicUniverse -> INT
-- On LPAREN reduce production atomicUniverse -> INT
-- On LOGIC reduce production atomicUniverse -> INT
-- On LET reduce production atomicUniverse -> INT
-- On LENS_PAREN_RIGHT reduce production atomicUniverse -> INT
-- On LENS_PAREN_LEFT reduce production atomicUniverse -> INT
-- On LBRACK_BAR reduce production atomicUniverse -> INT
-- On LBRACK_AT reduce production atomicUniverse -> INT
-- On LBRACK reduce production atomicUniverse -> INT
-- On LBRACE reduce production atomicUniverse -> INT
-- On IRREDUCIBLE reduce production atomicUniverse -> INT
-- On INT8 reduce production atomicUniverse -> INT
-- On INT64 reduce production atomicUniverse -> INT
-- On INT32 reduce production atomicUniverse -> INT
-- On INT16 reduce production atomicUniverse -> INT
-- On INT reduce production atomicUniverse -> INT
-- On INLINE_FOR_EXTRACTION reduce production atomicUniverse -> INT
-- On INLINE reduce production atomicUniverse -> INT
-- On INCLUDE reduce production atomicUniverse -> INT
-- On IN reduce production atomicUniverse -> INT
-- On IMPLIES reduce production atomicUniverse -> INT
-- On IFF reduce production atomicUniverse -> INT
-- On IEEE64 reduce production atomicUniverse -> INT
-- On IDENT reduce production atomicUniverse -> INT
-- On HASH reduce production atomicUniverse -> INT
-- On FSDOC_STANDALONE reduce production atomicUniverse -> INT
-- On FSDOC reduce production atomicUniverse -> INT
-- On FALSE reduce production atomicUniverse -> INT
-- On EXCEPTION reduce production atomicUniverse -> INT
-- On EQUALS reduce production atomicUniverse -> INT
-- On EOF reduce production atomicUniverse -> INT
-- On END reduce production atomicUniverse -> INT
-- On ELSE reduce production atomicUniverse -> INT
-- On EFFECT reduce production atomicUniverse -> INT
-- On DISJUNCTION reduce production atomicUniverse -> INT
-- On DEFAULT reduce production atomicUniverse -> INT
-- On CONJUNCTION reduce production atomicUniverse -> INT
-- On COMMA reduce production atomicUniverse -> INT
-- On COLON_EQUALS reduce production atomicUniverse -> INT
-- On COLON_COLON reduce production atomicUniverse -> INT
-- On CHAR reduce production atomicUniverse -> INT
-- On BYTEARRAY reduce production atomicUniverse -> INT
-- On BY reduce production atomicUniverse -> INT
-- On BEGIN reduce production atomicUniverse -> INT
-- On BAR_RBRACK reduce production atomicUniverse -> INT
-- On BAR reduce production atomicUniverse -> INT
-- On BANG_LBRACE reduce production atomicUniverse -> INT
-- On BACKTICK reduce production atomicUniverse -> INT
-- On ASSUME reduce production atomicUniverse -> INT
-- On AND reduce production atomicUniverse -> INT
-- On AMP reduce production atomicUniverse -> INT
-- On ABSTRACT reduce production atomicUniverse -> INT
-- On # reduce production atomicUniverse -> INT
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicUniverse -> INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 225:
## Known stack suffix:
## LPAREN universeFrom
## LR(1) items:
atomicUniverse -> LPAREN universeFrom . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
universeFrom -> universeFrom . OPINFIX2 universeFrom [ RPAREN OPINFIX2 ]
## Transitions:
-- On RPAREN shift to state 226
-- On OPINFIX2 shift to state 227
## Reductions:

State 226:
## Known stack suffix:
## LPAREN universeFrom RPAREN
## LR(1) items:
atomicUniverse -> LPAREN universeFrom RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On VAL reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UNOPTEQUALITY reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UNIV_HASH reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UNFOLDABLE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UNFOLD reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UNDERSCORE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UINT8 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UINT64 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UINT32 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On UINT16 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On TYPE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On TVAR reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On TRUE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On TOTAL reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On THEN reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SUB_EFFECT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SUBTYPE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SUBKIND reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On STRING reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SQUIGGLY_RARROW reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SPLICE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SET_RANGE_OF reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On SEMICOLON reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On RPAREN reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On REIFY reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On REIFIABLE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On REFLECTABLE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On RBRACK reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On RBRACE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On RARROW reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On RANGE_OF reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On PRIVATE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On PIPE_RIGHT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On PERCENT_LBRACK reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPPREFIX reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX4 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX3 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX2 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX1 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX0d reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX0c reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX0b reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPINFIX0a reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPEN reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On OPAQUE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On NOEXTRACT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On NOEQUALITY reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On NEW_EFFECT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On NEW reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On NAME reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On MODULE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On MINUS reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LPAREN_RPAREN reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LPAREN reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LOGIC reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LET reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LENS_PAREN_LEFT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LBRACK_BAR reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LBRACK_AT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LBRACK reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On LBRACE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On IRREDUCIBLE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INT8 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INT64 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INT32 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INT16 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INLINE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On INCLUDE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On IN reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On IMPLIES reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On IFF reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On IEEE64 reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On IDENT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On HASH reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On FSDOC_STANDALONE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On FSDOC reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On FALSE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On EXCEPTION reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On EQUALS reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On EOF reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On END reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On ELSE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On EFFECT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On DISJUNCTION reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On DEFAULT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On CONJUNCTION reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On COMMA reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On COLON_EQUALS reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On COLON_COLON reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On CHAR reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On BYTEARRAY reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On BY reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On BEGIN reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On BAR_RBRACK reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On BAR reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On BANG_LBRACE reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On BACKTICK reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On ASSUME reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On AND reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On AMP reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On ABSTRACT reduce production atomicUniverse -> LPAREN universeFrom RPAREN
-- On # reduce production atomicUniverse -> LPAREN universeFrom RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicUniverse -> LPAREN universeFrom RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 227:
## Known stack suffix:
## universeFrom OPINFIX2
## LR(1) items:
universeFrom -> universeFrom OPINFIX2 . universeFrom [ RPAREN OPINFIX2 ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On NAME shift to state 35
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On universeFrom shift to state 228
-- On uident shift to state 229
-- On lident shift to state 230
-- On ident shift to state 231
-- On atomicUniverse shift to state 236
## Reductions:

State 228:
## Known stack suffix:
## universeFrom OPINFIX2 universeFrom
## LR(1) items:
universeFrom -> universeFrom . OPINFIX2 universeFrom [ RPAREN OPINFIX2 ]
universeFrom -> universeFrom OPINFIX2 universeFrom . [ RPAREN OPINFIX2 ]
## Transitions:
## Reductions:
-- On RPAREN reduce production universeFrom -> universeFrom OPINFIX2 universeFrom
-- On OPINFIX2 reduce production universeFrom -> universeFrom OPINFIX2 universeFrom

State 229:
## Known stack suffix:
## uident
## LR(1) items:
ident -> uident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INT INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production ident -> uident
-- On UNOPTEQUALITY reduce production ident -> uident
-- On UNFOLDABLE reduce production ident -> uident
-- On UNFOLD reduce production ident -> uident
-- On UNDERSCORE reduce production ident -> uident
-- On TYP_APP_LESS reduce production ident -> uident
-- On TYPE reduce production ident -> uident
-- On TVAR reduce production ident -> uident
-- On TOTAL reduce production ident -> uident
-- On SUB_EFFECT reduce production ident -> uident
-- On SPLICE reduce production ident -> uident
-- On REIFIABLE reduce production ident -> uident
-- On REFLECTABLE reduce production ident -> uident
-- On PRIVATE reduce production ident -> uident
-- On PRAGMA_SET_OPTIONS reduce production ident -> uident
-- On PRAGMA_RESET_OPTIONS reduce production ident -> uident
-- On OPEN reduce production ident -> uident
-- On OPAQUE reduce production ident -> uident
-- On NOEXTRACT reduce production ident -> uident
-- On NOEQUALITY reduce production ident -> uident
-- On NEW_EFFECT reduce production ident -> uident
-- On NEW reduce production ident -> uident
-- On MODULE reduce production ident -> uident
-- On LPAREN reduce production ident -> uident
-- On LOGIC reduce production ident -> uident
-- On LET reduce production ident -> uident
-- On LBRACK_AT reduce production ident -> uident
-- On IRREDUCIBLE reduce production ident -> uident
-- On INT reduce production ident -> uident
-- On INLINE_FOR_EXTRACTION reduce production ident -> uident
-- On INLINE reduce production ident -> uident
-- On INCLUDE reduce production ident -> uident
-- On IDENT reduce production ident -> uident
-- On HASH reduce production ident -> uident
-- On FSDOC_STANDALONE reduce production ident -> uident
-- On FSDOC reduce production ident -> uident
-- On EXCEPTION reduce production ident -> uident
-- On EQUALS reduce production ident -> uident
-- On EOF reduce production ident -> uident
-- On EFFECT reduce production ident -> uident
-- On DOLLAR reduce production ident -> uident
-- On DEFAULT reduce production ident -> uident
-- On COLON reduce production ident -> uident
-- On ASSUME reduce production ident -> uident
-- On AND reduce production ident -> uident
-- On ABSTRACT reduce production ident -> uident

State 230:
## Known stack suffix:
## lident
## LR(1) items:
atomicUniverse -> lident . [ RPAREN OPINFIX2 ]
ident -> lident . [ UNDERSCORE LPAREN INT IDENT ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production ident -> lident
-- On RPAREN reduce production atomicUniverse -> lident
-- On OPINFIX2 reduce production atomicUniverse -> lident
-- On LPAREN reduce production ident -> lident
-- On INT reduce production ident -> lident
-- On IDENT reduce production ident -> lident

State 231:
## Known stack suffix:
## ident
## LR(1) items:
universeFrom -> ident . nonempty_list(atomicUniverse) [ RPAREN OPINFIX2 ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On nonempty_list(atomicUniverse) shift to state 232
-- On lident shift to state 233
-- On atomicUniverse shift to state 234
## Reductions:

State 232:
## Known stack suffix:
## ident nonempty_list(atomicUniverse)
## LR(1) items:
universeFrom -> ident nonempty_list(atomicUniverse) . [ RPAREN OPINFIX2 ]
## Transitions:
## Reductions:
-- On RPAREN reduce production universeFrom -> ident nonempty_list(atomicUniverse)
-- On OPINFIX2 reduce production universeFrom -> ident nonempty_list(atomicUniverse)

State 233:
## Known stack suffix:
## lident
## LR(1) items:
atomicUniverse -> lident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicUniverse -> lident
-- On VAL reduce production atomicUniverse -> lident
-- On UNOPTEQUALITY reduce production atomicUniverse -> lident
-- On UNIV_HASH reduce production atomicUniverse -> lident
-- On UNFOLDABLE reduce production atomicUniverse -> lident
-- On UNFOLD reduce production atomicUniverse -> lident
-- On UNDERSCORE reduce production atomicUniverse -> lident
-- On UINT8 reduce production atomicUniverse -> lident
-- On UINT64 reduce production atomicUniverse -> lident
-- On UINT32 reduce production atomicUniverse -> lident
-- On UINT16 reduce production atomicUniverse -> lident
-- On TYPE reduce production atomicUniverse -> lident
-- On TVAR reduce production atomicUniverse -> lident
-- On TRUE reduce production atomicUniverse -> lident
-- On TOTAL reduce production atomicUniverse -> lident
-- On THEN reduce production atomicUniverse -> lident
-- On SUB_EFFECT reduce production atomicUniverse -> lident
-- On SUBTYPE reduce production atomicUniverse -> lident
-- On SUBKIND reduce production atomicUniverse -> lident
-- On STRING reduce production atomicUniverse -> lident
-- On SQUIGGLY_RARROW reduce production atomicUniverse -> lident
-- On SPLICE reduce production atomicUniverse -> lident
-- On SET_RANGE_OF reduce production atomicUniverse -> lident
-- On SEMICOLON_SEMICOLON reduce production atomicUniverse -> lident
-- On SEMICOLON reduce production atomicUniverse -> lident
-- On RPAREN reduce production atomicUniverse -> lident
-- On REIFY reduce production atomicUniverse -> lident
-- On REIFIABLE reduce production atomicUniverse -> lident
-- On REFLECTABLE reduce production atomicUniverse -> lident
-- On RBRACK reduce production atomicUniverse -> lident
-- On RBRACE reduce production atomicUniverse -> lident
-- On RARROW reduce production atomicUniverse -> lident
-- On RANGE_OF reduce production atomicUniverse -> lident
-- On PRIVATE reduce production atomicUniverse -> lident
-- On PRAGMA_SET_OPTIONS reduce production atomicUniverse -> lident
-- On PRAGMA_RESET_OPTIONS reduce production atomicUniverse -> lident
-- On PIPE_RIGHT reduce production atomicUniverse -> lident
-- On PERCENT_LBRACK reduce production atomicUniverse -> lident
-- On OPPREFIX reduce production atomicUniverse -> lident
-- On OPINFIX4 reduce production atomicUniverse -> lident
-- On OPINFIX3 reduce production atomicUniverse -> lident
-- On OPINFIX2 reduce production atomicUniverse -> lident
-- On OPINFIX1 reduce production atomicUniverse -> lident
-- On OPINFIX0d reduce production atomicUniverse -> lident
-- On OPINFIX0c reduce production atomicUniverse -> lident
-- On OPINFIX0b reduce production atomicUniverse -> lident
-- On OPINFIX0a reduce production atomicUniverse -> lident
-- On OPEN reduce production atomicUniverse -> lident
-- On OPAQUE reduce production atomicUniverse -> lident
-- On NOEXTRACT reduce production atomicUniverse -> lident
-- On NOEQUALITY reduce production atomicUniverse -> lident
-- On NEW_EFFECT reduce production atomicUniverse -> lident
-- On NEW reduce production atomicUniverse -> lident
-- On NAME reduce production atomicUniverse -> lident
-- On MODULE reduce production atomicUniverse -> lident
-- On MINUS reduce production atomicUniverse -> lident
-- On LPAREN_RPAREN reduce production atomicUniverse -> lident
-- On LPAREN reduce production atomicUniverse -> lident
-- On LOGIC reduce production atomicUniverse -> lident
-- On LET reduce production atomicUniverse -> lident
-- On LENS_PAREN_RIGHT reduce production atomicUniverse -> lident
-- On LENS_PAREN_LEFT reduce production atomicUniverse -> lident
-- On LBRACK_BAR reduce production atomicUniverse -> lident
-- On LBRACK_AT reduce production atomicUniverse -> lident
-- On LBRACK reduce production atomicUniverse -> lident
-- On LBRACE reduce production atomicUniverse -> lident
-- On IRREDUCIBLE reduce production atomicUniverse -> lident
-- On INT8 reduce production atomicUniverse -> lident
-- On INT64 reduce production atomicUniverse -> lident
-- On INT32 reduce production atomicUniverse -> lident
-- On INT16 reduce production atomicUniverse -> lident
-- On INT reduce production atomicUniverse -> lident
-- On INLINE_FOR_EXTRACTION reduce production atomicUniverse -> lident
-- On INLINE reduce production atomicUniverse -> lident
-- On INCLUDE reduce production atomicUniverse -> lident
-- On IN reduce production atomicUniverse -> lident
-- On IMPLIES reduce production atomicUniverse -> lident
-- On IFF reduce production atomicUniverse -> lident
-- On IEEE64 reduce production atomicUniverse -> lident
-- On IDENT reduce production atomicUniverse -> lident
-- On HASH reduce production atomicUniverse -> lident
-- On FSDOC_STANDALONE reduce production atomicUniverse -> lident
-- On FSDOC reduce production atomicUniverse -> lident
-- On FALSE reduce production atomicUniverse -> lident
-- On EXCEPTION reduce production atomicUniverse -> lident
-- On EQUALS reduce production atomicUniverse -> lident
-- On EOF reduce production atomicUniverse -> lident
-- On END reduce production atomicUniverse -> lident
-- On ELSE reduce production atomicUniverse -> lident
-- On EFFECT reduce production atomicUniverse -> lident
-- On DISJUNCTION reduce production atomicUniverse -> lident
-- On DEFAULT reduce production atomicUniverse -> lident
-- On CONJUNCTION reduce production atomicUniverse -> lident
-- On COMMA reduce production atomicUniverse -> lident
-- On COLON_EQUALS reduce production atomicUniverse -> lident
-- On COLON_COLON reduce production atomicUniverse -> lident
-- On CHAR reduce production atomicUniverse -> lident
-- On BYTEARRAY reduce production atomicUniverse -> lident
-- On BY reduce production atomicUniverse -> lident
-- On BEGIN reduce production atomicUniverse -> lident
-- On BAR_RBRACK reduce production atomicUniverse -> lident
-- On BAR reduce production atomicUniverse -> lident
-- On BANG_LBRACE reduce production atomicUniverse -> lident
-- On BACKTICK reduce production atomicUniverse -> lident
-- On ASSUME reduce production atomicUniverse -> lident
-- On AND reduce production atomicUniverse -> lident
-- On AMP reduce production atomicUniverse -> lident
-- On ABSTRACT reduce production atomicUniverse -> lident
-- On # reduce production atomicUniverse -> lident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicUniverse -> lident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 234:
## Known stack suffix:
## atomicUniverse
## LR(1) items:
nonempty_list(atomicUniverse) -> atomicUniverse . [ RPAREN OPINFIX2 ]
nonempty_list(atomicUniverse) -> atomicUniverse . nonempty_list(atomicUniverse) [ RPAREN OPINFIX2 ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On nonempty_list(atomicUniverse) shift to state 235
-- On lident shift to state 233
-- On atomicUniverse shift to state 234
## Reductions:
-- On RPAREN reduce production nonempty_list(atomicUniverse) -> atomicUniverse
-- On OPINFIX2 reduce production nonempty_list(atomicUniverse) -> atomicUniverse

State 235:
## Known stack suffix:
## atomicUniverse nonempty_list(atomicUniverse)
## LR(1) items:
nonempty_list(atomicUniverse) -> atomicUniverse nonempty_list(atomicUniverse) . [ RPAREN OPINFIX2 ]
## Transitions:
## Reductions:
-- On RPAREN reduce production nonempty_list(atomicUniverse) -> atomicUniverse nonempty_list(atomicUniverse)
-- On OPINFIX2 reduce production nonempty_list(atomicUniverse) -> atomicUniverse nonempty_list(atomicUniverse)

State 236:
## Known stack suffix:
## atomicUniverse
## LR(1) items:
universeFrom -> atomicUniverse . [ RPAREN OPINFIX2 ]
## Transitions:
## Reductions:
-- On RPAREN reduce production universeFrom -> atomicUniverse
-- On OPINFIX2 reduce production universeFrom -> atomicUniverse

State 237:
## Known stack suffix:
## UNIV_HASH atomicUniverse
## LR(1) items:
universe -> UNIV_HASH atomicUniverse . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production universe -> UNIV_HASH atomicUniverse
-- On VAL reduce production universe -> UNIV_HASH atomicUniverse
-- On UNOPTEQUALITY reduce production universe -> UNIV_HASH atomicUniverse
-- On UNIV_HASH reduce production universe -> UNIV_HASH atomicUniverse
-- On UNFOLDABLE reduce production universe -> UNIV_HASH atomicUniverse
-- On UNFOLD reduce production universe -> UNIV_HASH atomicUniverse
-- On UNDERSCORE reduce production universe -> UNIV_HASH atomicUniverse
-- On UINT8 reduce production universe -> UNIV_HASH atomicUniverse
-- On UINT64 reduce production universe -> UNIV_HASH atomicUniverse
-- On UINT32 reduce production universe -> UNIV_HASH atomicUniverse
-- On UINT16 reduce production universe -> UNIV_HASH atomicUniverse
-- On TYPE reduce production universe -> UNIV_HASH atomicUniverse
-- On TVAR reduce production universe -> UNIV_HASH atomicUniverse
-- On TRUE reduce production universe -> UNIV_HASH atomicUniverse
-- On TOTAL reduce production universe -> UNIV_HASH atomicUniverse
-- On THEN reduce production universe -> UNIV_HASH atomicUniverse
-- On SUB_EFFECT reduce production universe -> UNIV_HASH atomicUniverse
-- On SUBTYPE reduce production universe -> UNIV_HASH atomicUniverse
-- On SUBKIND reduce production universe -> UNIV_HASH atomicUniverse
-- On STRING reduce production universe -> UNIV_HASH atomicUniverse
-- On SQUIGGLY_RARROW reduce production universe -> UNIV_HASH atomicUniverse
-- On SPLICE reduce production universe -> UNIV_HASH atomicUniverse
-- On SET_RANGE_OF reduce production universe -> UNIV_HASH atomicUniverse
-- On SEMICOLON_SEMICOLON reduce production universe -> UNIV_HASH atomicUniverse
-- On SEMICOLON reduce production universe -> UNIV_HASH atomicUniverse
-- On RPAREN reduce production universe -> UNIV_HASH atomicUniverse
-- On REIFY reduce production universe -> UNIV_HASH atomicUniverse
-- On REIFIABLE reduce production universe -> UNIV_HASH atomicUniverse
-- On REFLECTABLE reduce production universe -> UNIV_HASH atomicUniverse
-- On RBRACK reduce production universe -> UNIV_HASH atomicUniverse
-- On RBRACE reduce production universe -> UNIV_HASH atomicUniverse
-- On RARROW reduce production universe -> UNIV_HASH atomicUniverse
-- On RANGE_OF reduce production universe -> UNIV_HASH atomicUniverse
-- On PRIVATE reduce production universe -> UNIV_HASH atomicUniverse
-- On PRAGMA_SET_OPTIONS reduce production universe -> UNIV_HASH atomicUniverse
-- On PRAGMA_RESET_OPTIONS reduce production universe -> UNIV_HASH atomicUniverse
-- On PIPE_RIGHT reduce production universe -> UNIV_HASH atomicUniverse
-- On PERCENT_LBRACK reduce production universe -> UNIV_HASH atomicUniverse
-- On OPPREFIX reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX4 reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX3 reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX2 reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX1 reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX0d reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX0c reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX0b reduce production universe -> UNIV_HASH atomicUniverse
-- On OPINFIX0a reduce production universe -> UNIV_HASH atomicUniverse
-- On OPEN reduce production universe -> UNIV_HASH atomicUniverse
-- On OPAQUE reduce production universe -> UNIV_HASH atomicUniverse
-- On NOEXTRACT reduce production universe -> UNIV_HASH atomicUniverse
-- On NOEQUALITY reduce production universe -> UNIV_HASH atomicUniverse
-- On NEW_EFFECT reduce production universe -> UNIV_HASH atomicUniverse
-- On NEW reduce production universe -> UNIV_HASH atomicUniverse
-- On NAME reduce production universe -> UNIV_HASH atomicUniverse
-- On MODULE reduce production universe -> UNIV_HASH atomicUniverse
-- On MINUS reduce production universe -> UNIV_HASH atomicUniverse
-- On LPAREN_RPAREN reduce production universe -> UNIV_HASH atomicUniverse
-- On LPAREN reduce production universe -> UNIV_HASH atomicUniverse
-- On LOGIC reduce production universe -> UNIV_HASH atomicUniverse
-- On LET reduce production universe -> UNIV_HASH atomicUniverse
-- On LENS_PAREN_RIGHT reduce production universe -> UNIV_HASH atomicUniverse
-- On LENS_PAREN_LEFT reduce production universe -> UNIV_HASH atomicUniverse
-- On LBRACK_BAR reduce production universe -> UNIV_HASH atomicUniverse
-- On LBRACK_AT reduce production universe -> UNIV_HASH atomicUniverse
-- On LBRACK reduce production universe -> UNIV_HASH atomicUniverse
-- On LBRACE reduce production universe -> UNIV_HASH atomicUniverse
-- On IRREDUCIBLE reduce production universe -> UNIV_HASH atomicUniverse
-- On INT8 reduce production universe -> UNIV_HASH atomicUniverse
-- On INT64 reduce production universe -> UNIV_HASH atomicUniverse
-- On INT32 reduce production universe -> UNIV_HASH atomicUniverse
-- On INT16 reduce production universe -> UNIV_HASH atomicUniverse
-- On INT reduce production universe -> UNIV_HASH atomicUniverse
-- On INLINE_FOR_EXTRACTION reduce production universe -> UNIV_HASH atomicUniverse
-- On INLINE reduce production universe -> UNIV_HASH atomicUniverse
-- On INCLUDE reduce production universe -> UNIV_HASH atomicUniverse
-- On IN reduce production universe -> UNIV_HASH atomicUniverse
-- On IMPLIES reduce production universe -> UNIV_HASH atomicUniverse
-- On IFF reduce production universe -> UNIV_HASH atomicUniverse
-- On IEEE64 reduce production universe -> UNIV_HASH atomicUniverse
-- On IDENT reduce production universe -> UNIV_HASH atomicUniverse
-- On HASH reduce production universe -> UNIV_HASH atomicUniverse
-- On FSDOC_STANDALONE reduce production universe -> UNIV_HASH atomicUniverse
-- On FSDOC reduce production universe -> UNIV_HASH atomicUniverse
-- On FALSE reduce production universe -> UNIV_HASH atomicUniverse
-- On EXCEPTION reduce production universe -> UNIV_HASH atomicUniverse
-- On EQUALS reduce production universe -> UNIV_HASH atomicUniverse
-- On EOF reduce production universe -> UNIV_HASH atomicUniverse
-- On END reduce production universe -> UNIV_HASH atomicUniverse
-- On ELSE reduce production universe -> UNIV_HASH atomicUniverse
-- On EFFECT reduce production universe -> UNIV_HASH atomicUniverse
-- On DISJUNCTION reduce production universe -> UNIV_HASH atomicUniverse
-- On DEFAULT reduce production universe -> UNIV_HASH atomicUniverse
-- On CONJUNCTION reduce production universe -> UNIV_HASH atomicUniverse
-- On COMMA reduce production universe -> UNIV_HASH atomicUniverse
-- On COLON_EQUALS reduce production universe -> UNIV_HASH atomicUniverse
-- On COLON_COLON reduce production universe -> UNIV_HASH atomicUniverse
-- On CHAR reduce production universe -> UNIV_HASH atomicUniverse
-- On BYTEARRAY reduce production universe -> UNIV_HASH atomicUniverse
-- On BY reduce production universe -> UNIV_HASH atomicUniverse
-- On BEGIN reduce production universe -> UNIV_HASH atomicUniverse
-- On BAR_RBRACK reduce production universe -> UNIV_HASH atomicUniverse
-- On BAR reduce production universe -> UNIV_HASH atomicUniverse
-- On BANG_LBRACE reduce production universe -> UNIV_HASH atomicUniverse
-- On BACKTICK reduce production universe -> UNIV_HASH atomicUniverse
-- On ASSUME reduce production universe -> UNIV_HASH atomicUniverse
-- On AND reduce production universe -> UNIV_HASH atomicUniverse
-- On AMP reduce production universe -> UNIV_HASH atomicUniverse
-- On ABSTRACT reduce production universe -> UNIV_HASH atomicUniverse
-- On # reduce production universe -> UNIV_HASH atomicUniverse
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production universe -> UNIV_HASH atomicUniverse
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 238:
## Known stack suffix:
## HASH
## LR(1) items:
argTerm -> HASH . indexingTerm [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 239
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
## Reductions:

State 239:
## Known stack suffix:
## HASH indexingTerm
## LR(1) items:
argTerm -> HASH indexingTerm . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production argTerm -> HASH indexingTerm
-- On VAL reduce production argTerm -> HASH indexingTerm
-- On UNOPTEQUALITY reduce production argTerm -> HASH indexingTerm
-- On UNIV_HASH reduce production argTerm -> HASH indexingTerm
-- On UNFOLDABLE reduce production argTerm -> HASH indexingTerm
-- On UNFOLD reduce production argTerm -> HASH indexingTerm
-- On UNDERSCORE reduce production argTerm -> HASH indexingTerm
-- On UINT8 reduce production argTerm -> HASH indexingTerm
-- On UINT64 reduce production argTerm -> HASH indexingTerm
-- On UINT32 reduce production argTerm -> HASH indexingTerm
-- On UINT16 reduce production argTerm -> HASH indexingTerm
-- On TYPE reduce production argTerm -> HASH indexingTerm
-- On TVAR reduce production argTerm -> HASH indexingTerm
-- On TRUE reduce production argTerm -> HASH indexingTerm
-- On TOTAL reduce production argTerm -> HASH indexingTerm
-- On THEN reduce production argTerm -> HASH indexingTerm
-- On SUB_EFFECT reduce production argTerm -> HASH indexingTerm
-- On SUBTYPE reduce production argTerm -> HASH indexingTerm
-- On SUBKIND reduce production argTerm -> HASH indexingTerm
-- On STRING reduce production argTerm -> HASH indexingTerm
-- On SQUIGGLY_RARROW reduce production argTerm -> HASH indexingTerm
-- On SPLICE reduce production argTerm -> HASH indexingTerm
-- On SET_RANGE_OF reduce production argTerm -> HASH indexingTerm
-- On SEMICOLON_SEMICOLON reduce production argTerm -> HASH indexingTerm
-- On SEMICOLON reduce production argTerm -> HASH indexingTerm
-- On RPAREN reduce production argTerm -> HASH indexingTerm
-- On REIFY reduce production argTerm -> HASH indexingTerm
-- On REIFIABLE reduce production argTerm -> HASH indexingTerm
-- On REFLECTABLE reduce production argTerm -> HASH indexingTerm
-- On RBRACK reduce production argTerm -> HASH indexingTerm
-- On RBRACE reduce production argTerm -> HASH indexingTerm
-- On RARROW reduce production argTerm -> HASH indexingTerm
-- On RANGE_OF reduce production argTerm -> HASH indexingTerm
-- On PRIVATE reduce production argTerm -> HASH indexingTerm
-- On PRAGMA_SET_OPTIONS reduce production argTerm -> HASH indexingTerm
-- On PRAGMA_RESET_OPTIONS reduce production argTerm -> HASH indexingTerm
-- On PIPE_RIGHT reduce production argTerm -> HASH indexingTerm
-- On PERCENT_LBRACK reduce production argTerm -> HASH indexingTerm
-- On OPPREFIX reduce production argTerm -> HASH indexingTerm
-- On OPINFIX4 reduce production argTerm -> HASH indexingTerm
-- On OPINFIX3 reduce production argTerm -> HASH indexingTerm
-- On OPINFIX2 reduce production argTerm -> HASH indexingTerm
-- On OPINFIX1 reduce production argTerm -> HASH indexingTerm
-- On OPINFIX0d reduce production argTerm -> HASH indexingTerm
-- On OPINFIX0c reduce production argTerm -> HASH indexingTerm
-- On OPINFIX0b reduce production argTerm -> HASH indexingTerm
-- On OPINFIX0a reduce production argTerm -> HASH indexingTerm
-- On OPEN reduce production argTerm -> HASH indexingTerm
-- On OPAQUE reduce production argTerm -> HASH indexingTerm
-- On NOEXTRACT reduce production argTerm -> HASH indexingTerm
-- On NOEQUALITY reduce production argTerm -> HASH indexingTerm
-- On NEW_EFFECT reduce production argTerm -> HASH indexingTerm
-- On NEW reduce production argTerm -> HASH indexingTerm
-- On NAME reduce production argTerm -> HASH indexingTerm
-- On MODULE reduce production argTerm -> HASH indexingTerm
-- On MINUS reduce production argTerm -> HASH indexingTerm
-- On LPAREN_RPAREN reduce production argTerm -> HASH indexingTerm
-- On LPAREN reduce production argTerm -> HASH indexingTerm
-- On LOGIC reduce production argTerm -> HASH indexingTerm
-- On LET reduce production argTerm -> HASH indexingTerm
-- On LENS_PAREN_RIGHT reduce production argTerm -> HASH indexingTerm
-- On LENS_PAREN_LEFT reduce production argTerm -> HASH indexingTerm
-- On LBRACK_BAR reduce production argTerm -> HASH indexingTerm
-- On LBRACK_AT reduce production argTerm -> HASH indexingTerm
-- On LBRACK reduce production argTerm -> HASH indexingTerm
-- On LBRACE reduce production argTerm -> HASH indexingTerm
-- On IRREDUCIBLE reduce production argTerm -> HASH indexingTerm
-- On INT8 reduce production argTerm -> HASH indexingTerm
-- On INT64 reduce production argTerm -> HASH indexingTerm
-- On INT32 reduce production argTerm -> HASH indexingTerm
-- On INT16 reduce production argTerm -> HASH indexingTerm
-- On INT reduce production argTerm -> HASH indexingTerm
-- On INLINE_FOR_EXTRACTION reduce production argTerm -> HASH indexingTerm
-- On INLINE reduce production argTerm -> HASH indexingTerm
-- On INCLUDE reduce production argTerm -> HASH indexingTerm
-- On IN reduce production argTerm -> HASH indexingTerm
-- On IMPLIES reduce production argTerm -> HASH indexingTerm
-- On IFF reduce production argTerm -> HASH indexingTerm
-- On IEEE64 reduce production argTerm -> HASH indexingTerm
-- On IDENT reduce production argTerm -> HASH indexingTerm
-- On HASH reduce production argTerm -> HASH indexingTerm
-- On FSDOC_STANDALONE reduce production argTerm -> HASH indexingTerm
-- On FSDOC reduce production argTerm -> HASH indexingTerm
-- On FALSE reduce production argTerm -> HASH indexingTerm
-- On EXCEPTION reduce production argTerm -> HASH indexingTerm
-- On EQUALS reduce production argTerm -> HASH indexingTerm
-- On EOF reduce production argTerm -> HASH indexingTerm
-- On END reduce production argTerm -> HASH indexingTerm
-- On ELSE reduce production argTerm -> HASH indexingTerm
-- On EFFECT reduce production argTerm -> HASH indexingTerm
-- On DISJUNCTION reduce production argTerm -> HASH indexingTerm
-- On DEFAULT reduce production argTerm -> HASH indexingTerm
-- On CONJUNCTION reduce production argTerm -> HASH indexingTerm
-- On COMMA reduce production argTerm -> HASH indexingTerm
-- On COLON_EQUALS reduce production argTerm -> HASH indexingTerm
-- On COLON_COLON reduce production argTerm -> HASH indexingTerm
-- On CHAR reduce production argTerm -> HASH indexingTerm
-- On BYTEARRAY reduce production argTerm -> HASH indexingTerm
-- On BY reduce production argTerm -> HASH indexingTerm
-- On BEGIN reduce production argTerm -> HASH indexingTerm
-- On BAR_RBRACK reduce production argTerm -> HASH indexingTerm
-- On BAR reduce production argTerm -> HASH indexingTerm
-- On BANG_LBRACE reduce production argTerm -> HASH indexingTerm
-- On BACKTICK reduce production argTerm -> HASH indexingTerm
-- On ASSUME reduce production argTerm -> HASH indexingTerm
-- On AND reduce production argTerm -> HASH indexingTerm
-- On AMP reduce production argTerm -> HASH indexingTerm
-- On ABSTRACT reduce production argTerm -> HASH indexingTerm
-- On # reduce production argTerm -> HASH indexingTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production argTerm -> HASH indexingTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 240:
## Known stack suffix:
## atomicTermNotQUident
## LR(1) items:
atomicTerm -> atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
indexingTerm -> atomicTermNotQUident . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 479
## Reductions:
-- On WITH reduce production atomicTerm -> atomicTermNotQUident
-- On VAL reduce production atomicTerm -> atomicTermNotQUident
-- On UNOPTEQUALITY reduce production atomicTerm -> atomicTermNotQUident
-- On UNIV_HASH reduce production atomicTerm -> atomicTermNotQUident
-- On UNFOLDABLE reduce production atomicTerm -> atomicTermNotQUident
-- On UNFOLD reduce production atomicTerm -> atomicTermNotQUident
-- On UNDERSCORE reduce production atomicTerm -> atomicTermNotQUident
-- On UINT8 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT64 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT32 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT16 reduce production atomicTerm -> atomicTermNotQUident
-- On TYPE reduce production atomicTerm -> atomicTermNotQUident
-- On TVAR reduce production atomicTerm -> atomicTermNotQUident
-- On TRUE reduce production atomicTerm -> atomicTermNotQUident
-- On TOTAL reduce production atomicTerm -> atomicTermNotQUident
-- On THEN reduce production atomicTerm -> atomicTermNotQUident
-- On SUB_EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On SUBTYPE reduce production atomicTerm -> atomicTermNotQUident
-- On SUBKIND reduce production atomicTerm -> atomicTermNotQUident
-- On STRING reduce production atomicTerm -> atomicTermNotQUident
-- On SQUIGGLY_RARROW reduce production atomicTerm -> atomicTermNotQUident
-- On SPLICE reduce production atomicTerm -> atomicTermNotQUident
-- On SET_RANGE_OF reduce production atomicTerm -> atomicTermNotQUident
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> atomicTermNotQUident
-- On SEMICOLON reduce production atomicTerm -> atomicTermNotQUident
-- On RPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On REIFY reduce production atomicTerm -> atomicTermNotQUident
-- On REIFIABLE reduce production atomicTerm -> atomicTermNotQUident
-- On REFLECTABLE reduce production atomicTerm -> atomicTermNotQUident
-- On RBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On RBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On RARROW reduce production atomicTerm -> atomicTermNotQUident
-- On RANGE_OF reduce production atomicTerm -> atomicTermNotQUident
-- On PRIVATE reduce production atomicTerm -> atomicTermNotQUident
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> atomicTermNotQUident
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> atomicTermNotQUident
-- On PIPE_RIGHT reduce production atomicTerm -> atomicTermNotQUident
-- On PERCENT_LBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On OPPREFIX reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX4 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX3 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX2 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX1 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0d reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0c reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0b reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0a reduce production atomicTerm -> atomicTermNotQUident
-- On OPEN reduce production atomicTerm -> atomicTermNotQUident
-- On OPAQUE reduce production atomicTerm -> atomicTermNotQUident
-- On NOEXTRACT reduce production atomicTerm -> atomicTermNotQUident
-- On NOEQUALITY reduce production atomicTerm -> atomicTermNotQUident
-- On NEW_EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On NEW reduce production atomicTerm -> atomicTermNotQUident
-- On NAME reduce production atomicTerm -> atomicTermNotQUident
-- On MODULE reduce production atomicTerm -> atomicTermNotQUident
-- On MINUS reduce production atomicTerm -> atomicTermNotQUident
-- On LPAREN_RPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On LPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On LOGIC reduce production atomicTerm -> atomicTermNotQUident
-- On LET reduce production atomicTerm -> atomicTermNotQUident
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> atomicTermNotQUident
-- On LENS_PAREN_LEFT reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK_BAR reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK_AT reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On IRREDUCIBLE reduce production atomicTerm -> atomicTermNotQUident
-- On INT8 reduce production atomicTerm -> atomicTermNotQUident
-- On INT64 reduce production atomicTerm -> atomicTermNotQUident
-- On INT32 reduce production atomicTerm -> atomicTermNotQUident
-- On INT16 reduce production atomicTerm -> atomicTermNotQUident
-- On INT reduce production atomicTerm -> atomicTermNotQUident
-- On INLINE_FOR_EXTRACTION reduce production atomicTerm -> atomicTermNotQUident
-- On INLINE reduce production atomicTerm -> atomicTermNotQUident
-- On INCLUDE reduce production atomicTerm -> atomicTermNotQUident
-- On IN reduce production atomicTerm -> atomicTermNotQUident
-- On IMPLIES reduce production atomicTerm -> atomicTermNotQUident
-- On IFF reduce production atomicTerm -> atomicTermNotQUident
-- On IEEE64 reduce production atomicTerm -> atomicTermNotQUident
-- On IDENT reduce production atomicTerm -> atomicTermNotQUident
-- On HASH reduce production atomicTerm -> atomicTermNotQUident
-- On FSDOC_STANDALONE reduce production atomicTerm -> atomicTermNotQUident
-- On FSDOC reduce production atomicTerm -> atomicTermNotQUident
-- On FALSE reduce production atomicTerm -> atomicTermNotQUident
-- On EXCEPTION reduce production atomicTerm -> atomicTermNotQUident
-- On EQUALS reduce production atomicTerm -> atomicTermNotQUident
-- On EOF reduce production atomicTerm -> atomicTermNotQUident
-- On END reduce production atomicTerm -> atomicTermNotQUident
-- On ELSE reduce production atomicTerm -> atomicTermNotQUident
-- On EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On DISJUNCTION reduce production atomicTerm -> atomicTermNotQUident
-- On DEFAULT reduce production atomicTerm -> atomicTermNotQUident
-- On CONJUNCTION reduce production atomicTerm -> atomicTermNotQUident
-- On COMMA reduce production atomicTerm -> atomicTermNotQUident
-- On COLON_EQUALS reduce production atomicTerm -> atomicTermNotQUident
-- On COLON_COLON reduce production atomicTerm -> atomicTermNotQUident
-- On CHAR reduce production atomicTerm -> atomicTermNotQUident
-- On BYTEARRAY reduce production atomicTerm -> atomicTermNotQUident
-- On BY reduce production atomicTerm -> atomicTermNotQUident
-- On BEGIN reduce production atomicTerm -> atomicTermNotQUident
-- On BAR_RBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On BAR reduce production atomicTerm -> atomicTermNotQUident
-- On BANG_LBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On BACKTICK reduce production atomicTerm -> atomicTermNotQUident
-- On ASSUME reduce production atomicTerm -> atomicTermNotQUident
-- On AND reduce production atomicTerm -> atomicTermNotQUident
-- On AMP reduce production atomicTerm -> atomicTermNotQUident
-- On ABSTRACT reduce production atomicTerm -> atomicTermNotQUident
-- On # reduce production atomicTerm -> atomicTermNotQUident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTerm -> atomicTermNotQUident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 241:
## Known stack suffix:
## DOT_LPAREN
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 562
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 242:
## Known stack suffix:
## FORALL
## LR(1) items:
typ -> FORALL . binders DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 558
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On DOT reduce production list(__anonymous_4) ->

State 243:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
lidentOrUnderscore -> UNDERSCORE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production lidentOrUnderscore -> UNDERSCORE
-- On UNOPTEQUALITY reduce production lidentOrUnderscore -> UNDERSCORE
-- On UNFOLDABLE reduce production lidentOrUnderscore -> UNDERSCORE
-- On UNFOLD reduce production lidentOrUnderscore -> UNDERSCORE
-- On UNDERSCORE reduce production lidentOrUnderscore -> UNDERSCORE
-- On TYPE reduce production lidentOrUnderscore -> UNDERSCORE
-- On TVAR reduce production lidentOrUnderscore -> UNDERSCORE
-- On TOTAL reduce production lidentOrUnderscore -> UNDERSCORE
-- On SUB_EFFECT reduce production lidentOrUnderscore -> UNDERSCORE
-- On SPLICE reduce production lidentOrUnderscore -> UNDERSCORE
-- On REIFIABLE reduce production lidentOrUnderscore -> UNDERSCORE
-- On REFLECTABLE reduce production lidentOrUnderscore -> UNDERSCORE
-- On PRIVATE reduce production lidentOrUnderscore -> UNDERSCORE
-- On PRAGMA_SET_OPTIONS reduce production lidentOrUnderscore -> UNDERSCORE
-- On PRAGMA_RESET_OPTIONS reduce production lidentOrUnderscore -> UNDERSCORE
-- On OPEN reduce production lidentOrUnderscore -> UNDERSCORE
-- On OPAQUE reduce production lidentOrUnderscore -> UNDERSCORE
-- On NOEXTRACT reduce production lidentOrUnderscore -> UNDERSCORE
-- On NOEQUALITY reduce production lidentOrUnderscore -> UNDERSCORE
-- On NEW_EFFECT reduce production lidentOrUnderscore -> UNDERSCORE
-- On NEW reduce production lidentOrUnderscore -> UNDERSCORE
-- On MODULE reduce production lidentOrUnderscore -> UNDERSCORE
-- On LPAREN reduce production lidentOrUnderscore -> UNDERSCORE
-- On LOGIC reduce production lidentOrUnderscore -> UNDERSCORE
-- On LET reduce production lidentOrUnderscore -> UNDERSCORE
-- On LBRACK_AT reduce production lidentOrUnderscore -> UNDERSCORE
-- On IRREDUCIBLE reduce production lidentOrUnderscore -> UNDERSCORE
-- On INLINE_FOR_EXTRACTION reduce production lidentOrUnderscore -> UNDERSCORE
-- On INLINE reduce production lidentOrUnderscore -> UNDERSCORE
-- On INCLUDE reduce production lidentOrUnderscore -> UNDERSCORE
-- On IDENT reduce production lidentOrUnderscore -> UNDERSCORE
-- On HASH reduce production lidentOrUnderscore -> UNDERSCORE
-- On FSDOC_STANDALONE reduce production lidentOrUnderscore -> UNDERSCORE
-- On FSDOC reduce production lidentOrUnderscore -> UNDERSCORE
-- On EXCEPTION reduce production lidentOrUnderscore -> UNDERSCORE
-- On EQUALS reduce production lidentOrUnderscore -> UNDERSCORE
-- On EOF reduce production lidentOrUnderscore -> UNDERSCORE
-- On EFFECT reduce production lidentOrUnderscore -> UNDERSCORE
-- On DOT reduce production lidentOrUnderscore -> UNDERSCORE
-- On DOLLAR reduce production lidentOrUnderscore -> UNDERSCORE
-- On DEFAULT reduce production lidentOrUnderscore -> UNDERSCORE
-- On COLON reduce production lidentOrUnderscore -> UNDERSCORE
-- On ASSUME reduce production lidentOrUnderscore -> UNDERSCORE
-- On AND reduce production lidentOrUnderscore -> UNDERSCORE
-- On ABSTRACT reduce production lidentOrUnderscore -> UNDERSCORE

State 244:
## Known stack suffix:
## LPAREN
## LR(1) items:
multiBinder -> LPAREN . nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lidentOrUnderscore)) shift to state 246
-- On lidentOrUnderscore shift to state 284
-- On aqualified(lidentOrUnderscore) shift to state 556
-- On aqualUniverses shift to state 288
## Reductions:

State 245:
## Known stack suffix:
## IDENT
## LR(1) items:
lidentOrUnderscore -> IDENT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production lidentOrUnderscore -> IDENT
-- On UNOPTEQUALITY reduce production lidentOrUnderscore -> IDENT
-- On UNFOLDABLE reduce production lidentOrUnderscore -> IDENT
-- On UNFOLD reduce production lidentOrUnderscore -> IDENT
-- On UNDERSCORE reduce production lidentOrUnderscore -> IDENT
-- On TYPE reduce production lidentOrUnderscore -> IDENT
-- On TVAR reduce production lidentOrUnderscore -> IDENT
-- On TOTAL reduce production lidentOrUnderscore -> IDENT
-- On SUB_EFFECT reduce production lidentOrUnderscore -> IDENT
-- On SPLICE reduce production lidentOrUnderscore -> IDENT
-- On REIFIABLE reduce production lidentOrUnderscore -> IDENT
-- On REFLECTABLE reduce production lidentOrUnderscore -> IDENT
-- On PRIVATE reduce production lidentOrUnderscore -> IDENT
-- On PRAGMA_SET_OPTIONS reduce production lidentOrUnderscore -> IDENT
-- On PRAGMA_RESET_OPTIONS reduce production lidentOrUnderscore -> IDENT
-- On OPEN reduce production lidentOrUnderscore -> IDENT
-- On OPAQUE reduce production lidentOrUnderscore -> IDENT
-- On NOEXTRACT reduce production lidentOrUnderscore -> IDENT
-- On NOEQUALITY reduce production lidentOrUnderscore -> IDENT
-- On NEW_EFFECT reduce production lidentOrUnderscore -> IDENT
-- On NEW reduce production lidentOrUnderscore -> IDENT
-- On MODULE reduce production lidentOrUnderscore -> IDENT
-- On LPAREN reduce production lidentOrUnderscore -> IDENT
-- On LOGIC reduce production lidentOrUnderscore -> IDENT
-- On LET reduce production lidentOrUnderscore -> IDENT
-- On LBRACK_AT reduce production lidentOrUnderscore -> IDENT
-- On IRREDUCIBLE reduce production lidentOrUnderscore -> IDENT
-- On INLINE_FOR_EXTRACTION reduce production lidentOrUnderscore -> IDENT
-- On INLINE reduce production lidentOrUnderscore -> IDENT
-- On INCLUDE reduce production lidentOrUnderscore -> IDENT
-- On IDENT reduce production lidentOrUnderscore -> IDENT
-- On HASH reduce production lidentOrUnderscore -> IDENT
-- On FSDOC_STANDALONE reduce production lidentOrUnderscore -> IDENT
-- On FSDOC reduce production lidentOrUnderscore -> IDENT
-- On EXCEPTION reduce production lidentOrUnderscore -> IDENT
-- On EQUALS reduce production lidentOrUnderscore -> IDENT
-- On EOF reduce production lidentOrUnderscore -> IDENT
-- On EFFECT reduce production lidentOrUnderscore -> IDENT
-- On DOT reduce production lidentOrUnderscore -> IDENT
-- On DOLLAR reduce production lidentOrUnderscore -> IDENT
-- On DEFAULT reduce production lidentOrUnderscore -> IDENT
-- On COLON reduce production lidentOrUnderscore -> IDENT
-- On ASSUME reduce production lidentOrUnderscore -> IDENT
-- On AND reduce production lidentOrUnderscore -> IDENT
-- On ABSTRACT reduce production lidentOrUnderscore -> IDENT

State 246:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore))
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) . COLON simpleArrow refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On COLON shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON . simpleArrow refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 278
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 248:
## Known stack suffix:
## tmEqWith(appTerm)
## LR(1) items:
tmEqNoRefinement -> tmEqWith(appTerm) . [ RPAREN RARROW LBRACE ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On OPINFIX0b shift to state 263
-- On OPINFIX0a shift to state 267
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
-- On COLON_EQUALS shift to state 269
## Reductions:
-- On RPAREN reduce production tmEqNoRefinement -> tmEqWith(appTerm)
-- On RARROW reduce production tmEqNoRefinement -> tmEqWith(appTerm)
-- On LBRACE reduce production tmEqNoRefinement -> tmEqWith(appTerm)

State 249:
## Known stack suffix:
## tmEqWith(appTerm) PIPE_RIGHT
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 250
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 250:
## Known stack suffix:
## tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)

State 251:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX2
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 252
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 252:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On MINUS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)

State 253:
## Known stack suffix:
## atomicTerm
## LR(1) items:
indexingTerm -> atomicTerm . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production indexingTerm -> atomicTerm
-- On VAL reduce production indexingTerm -> atomicTerm
-- On UNOPTEQUALITY reduce production indexingTerm -> atomicTerm
-- On UNIV_HASH reduce production indexingTerm -> atomicTerm
-- On UNFOLDABLE reduce production indexingTerm -> atomicTerm
-- On UNFOLD reduce production indexingTerm -> atomicTerm
-- On UNDERSCORE reduce production indexingTerm -> atomicTerm
-- On UINT8 reduce production indexingTerm -> atomicTerm
-- On UINT64 reduce production indexingTerm -> atomicTerm
-- On UINT32 reduce production indexingTerm -> atomicTerm
-- On UINT16 reduce production indexingTerm -> atomicTerm
-- On TYPE reduce production indexingTerm -> atomicTerm
-- On TVAR reduce production indexingTerm -> atomicTerm
-- On TRUE reduce production indexingTerm -> atomicTerm
-- On TOTAL reduce production indexingTerm -> atomicTerm
-- On THEN reduce production indexingTerm -> atomicTerm
-- On SUB_EFFECT reduce production indexingTerm -> atomicTerm
-- On SUBTYPE reduce production indexingTerm -> atomicTerm
-- On SUBKIND reduce production indexingTerm -> atomicTerm
-- On STRING reduce production indexingTerm -> atomicTerm
-- On SQUIGGLY_RARROW reduce production indexingTerm -> atomicTerm
-- On SPLICE reduce production indexingTerm -> atomicTerm
-- On SET_RANGE_OF reduce production indexingTerm -> atomicTerm
-- On SEMICOLON_SEMICOLON reduce production indexingTerm -> atomicTerm
-- On SEMICOLON reduce production indexingTerm -> atomicTerm
-- On RPAREN reduce production indexingTerm -> atomicTerm
-- On REIFY reduce production indexingTerm -> atomicTerm
-- On REIFIABLE reduce production indexingTerm -> atomicTerm
-- On REFLECTABLE reduce production indexingTerm -> atomicTerm
-- On RBRACK reduce production indexingTerm -> atomicTerm
-- On RBRACE reduce production indexingTerm -> atomicTerm
-- On RARROW reduce production indexingTerm -> atomicTerm
-- On RANGE_OF reduce production indexingTerm -> atomicTerm
-- On PRIVATE reduce production indexingTerm -> atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production indexingTerm -> atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production indexingTerm -> atomicTerm
-- On PIPE_RIGHT reduce production indexingTerm -> atomicTerm
-- On PERCENT_LBRACK reduce production indexingTerm -> atomicTerm
-- On OPPREFIX reduce production indexingTerm -> atomicTerm
-- On OPINFIX4 reduce production indexingTerm -> atomicTerm
-- On OPINFIX3 reduce production indexingTerm -> atomicTerm
-- On OPINFIX2 reduce production indexingTerm -> atomicTerm
-- On OPINFIX1 reduce production indexingTerm -> atomicTerm
-- On OPINFIX0d reduce production indexingTerm -> atomicTerm
-- On OPINFIX0c reduce production indexingTerm -> atomicTerm
-- On OPINFIX0b reduce production indexingTerm -> atomicTerm
-- On OPINFIX0a reduce production indexingTerm -> atomicTerm
-- On OPEN reduce production indexingTerm -> atomicTerm
-- On OPAQUE reduce production indexingTerm -> atomicTerm
-- On NOEXTRACT reduce production indexingTerm -> atomicTerm
-- On NOEQUALITY reduce production indexingTerm -> atomicTerm
-- On NEW_EFFECT reduce production indexingTerm -> atomicTerm
-- On NEW reduce production indexingTerm -> atomicTerm
-- On NAME reduce production indexingTerm -> atomicTerm
-- On MODULE reduce production indexingTerm -> atomicTerm
-- On MINUS reduce production indexingTerm -> atomicTerm
-- On LPAREN_RPAREN reduce production indexingTerm -> atomicTerm
-- On LPAREN reduce production indexingTerm -> atomicTerm
-- On LOGIC reduce production indexingTerm -> atomicTerm
-- On LET reduce production indexingTerm -> atomicTerm
-- On LENS_PAREN_RIGHT reduce production indexingTerm -> atomicTerm
-- On LENS_PAREN_LEFT reduce production indexingTerm -> atomicTerm
-- On LBRACK_BAR reduce production indexingTerm -> atomicTerm
-- On LBRACK_AT reduce production indexingTerm -> atomicTerm
-- On LBRACK reduce production indexingTerm -> atomicTerm
-- On LBRACE reduce production indexingTerm -> atomicTerm
-- On IRREDUCIBLE reduce production indexingTerm -> atomicTerm
-- On INT8 reduce production indexingTerm -> atomicTerm
-- On INT64 reduce production indexingTerm -> atomicTerm
-- On INT32 reduce production indexingTerm -> atomicTerm
-- On INT16 reduce production indexingTerm -> atomicTerm
-- On INT reduce production indexingTerm -> atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production indexingTerm -> atomicTerm
-- On INLINE reduce production indexingTerm -> atomicTerm
-- On INCLUDE reduce production indexingTerm -> atomicTerm
-- On IN reduce production indexingTerm -> atomicTerm
-- On IMPLIES reduce production indexingTerm -> atomicTerm
-- On IFF reduce production indexingTerm -> atomicTerm
-- On IEEE64 reduce production indexingTerm -> atomicTerm
-- On IDENT reduce production indexingTerm -> atomicTerm
-- On HASH reduce production indexingTerm -> atomicTerm
-- On FSDOC_STANDALONE reduce production indexingTerm -> atomicTerm
-- On FSDOC reduce production indexingTerm -> atomicTerm
-- On FALSE reduce production indexingTerm -> atomicTerm
-- On EXCEPTION reduce production indexingTerm -> atomicTerm
-- On EQUALS reduce production indexingTerm -> atomicTerm
-- On EOF reduce production indexingTerm -> atomicTerm
-- On END reduce production indexingTerm -> atomicTerm
-- On ELSE reduce production indexingTerm -> atomicTerm
-- On EFFECT reduce production indexingTerm -> atomicTerm
-- On DISJUNCTION reduce production indexingTerm -> atomicTerm
-- On DEFAULT reduce production indexingTerm -> atomicTerm
-- On CONJUNCTION reduce production indexingTerm -> atomicTerm
-- On COMMA reduce production indexingTerm -> atomicTerm
-- On COLON_EQUALS reduce production indexingTerm -> atomicTerm
-- On COLON_COLON reduce production indexingTerm -> atomicTerm
-- On CHAR reduce production indexingTerm -> atomicTerm
-- On BYTEARRAY reduce production indexingTerm -> atomicTerm
-- On BY reduce production indexingTerm -> atomicTerm
-- On BEGIN reduce production indexingTerm -> atomicTerm
-- On BAR_RBRACK reduce production indexingTerm -> atomicTerm
-- On BAR reduce production indexingTerm -> atomicTerm
-- On BANG_LBRACE reduce production indexingTerm -> atomicTerm
-- On BACKTICK reduce production indexingTerm -> atomicTerm
-- On ASSUME reduce production indexingTerm -> atomicTerm
-- On AND reduce production indexingTerm -> atomicTerm
-- On AMP reduce production indexingTerm -> atomicTerm
-- On ABSTRACT reduce production indexingTerm -> atomicTerm
-- On # reduce production indexingTerm -> atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production indexingTerm -> atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 254:
## Known stack suffix:
## appTerm
## LR(1) items:
tmNoEqWith(appTerm) -> appTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> appTerm
-- On RARROW reduce production tmNoEqWith(appTerm) -> appTerm
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX4 reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX3 reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> appTerm
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> appTerm
-- On MINUS reduce production tmNoEqWith(appTerm) -> appTerm
-- On LBRACE reduce production tmNoEqWith(appTerm) -> appTerm
-- On EQUALS reduce production tmNoEqWith(appTerm) -> appTerm
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> appTerm
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> appTerm
-- On BACKTICK reduce production tmNoEqWith(appTerm) -> appTerm
-- On AMP reduce production tmNoEqWith(appTerm) -> appTerm

State 255:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX1
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 256
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 256:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)

State 257:
## Known stack suffix:
## tmEqWith(appTerm) MINUS
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 258
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 258:
## Known stack suffix:
## tmEqWith(appTerm) MINUS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On MINUS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)

State 259:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0d
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 260
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 260:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)

State 261:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0c
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 262
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 262:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)

State 263:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0b
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 264
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 264:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)

State 265:
## Known stack suffix:
## tmEqWith(appTerm) EQUALS
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 266
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 266:
## Known stack suffix:
## tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)

State 267:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0a
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 268
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 268:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On OPINFIX0b shift to state 263
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)

State 269:
## Known stack suffix:
## tmEqWith(appTerm) COLON_EQUALS
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 270
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 270:
## Known stack suffix:
## tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On OPINFIX0b shift to state 263
-- On OPINFIX0a shift to state 267
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm)

State 271:
## Known stack suffix:
## tmEqNoRefinement
## LR(1) items:
simpleArrow -> tmEqNoRefinement . [ RPAREN LBRACE ]
simpleArrowDomain -> tmEqNoRefinement . [ RARROW ]
## Transitions:
## Reductions:
-- On RPAREN reduce production simpleArrow -> tmEqNoRefinement
-- On RARROW reduce production simpleArrowDomain -> tmEqNoRefinement
-- On LBRACE reduce production simpleArrow -> tmEqNoRefinement

State 272:
## Known stack suffix:
## simpleArrowDomain
## LR(1) items:
simpleArrow -> simpleArrowDomain . RARROW simpleArrow [ RPAREN LBRACE ]
## Transitions:
-- On RARROW shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## simpleArrowDomain RARROW
## LR(1) items:
simpleArrow -> simpleArrowDomain RARROW . simpleArrow [ RPAREN LBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 274
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 274:
## Known stack suffix:
## simpleArrowDomain RARROW simpleArrow
## LR(1) items:
simpleArrow -> simpleArrowDomain RARROW simpleArrow . [ RPAREN LBRACE ]
## Transitions:
## Reductions:
-- On RPAREN reduce production simpleArrow -> simpleArrowDomain RARROW simpleArrow
-- On LBRACE reduce production simpleArrow -> simpleArrowDomain RARROW simpleArrow

State 275:
## Known stack suffix:
## aqualUniverses
## LR(1) items:
aqual -> aqualUniverses . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production aqual -> aqualUniverses
-- On UINT8 reduce production aqual -> aqualUniverses
-- On UINT64 reduce production aqual -> aqualUniverses
-- On UINT32 reduce production aqual -> aqualUniverses
-- On UINT16 reduce production aqual -> aqualUniverses
-- On TVAR reduce production aqual -> aqualUniverses
-- On TRUE reduce production aqual -> aqualUniverses
-- On TILDE reduce production aqual -> aqualUniverses
-- On STRING reduce production aqual -> aqualUniverses
-- On SET_RANGE_OF reduce production aqual -> aqualUniverses
-- On REIFY reduce production aqual -> aqualUniverses
-- On RANGE_OF reduce production aqual -> aqualUniverses
-- On QUOTE reduce production aqual -> aqualUniverses
-- On PERC_BACKTICK reduce production aqual -> aqualUniverses
-- On PERCENT_LBRACK reduce production aqual -> aqualUniverses
-- On OPPREFIX reduce production aqual -> aqualUniverses
-- On NAME reduce production aqual -> aqualUniverses
-- On MINUS reduce production aqual -> aqualUniverses
-- On LPAREN_RPAREN reduce production aqual -> aqualUniverses
-- On LPAREN reduce production aqual -> aqualUniverses
-- On LENS_PAREN_LEFT reduce production aqual -> aqualUniverses
-- On LBRACK_BAR reduce production aqual -> aqualUniverses
-- On LBRACK reduce production aqual -> aqualUniverses
-- On LBRACE reduce production aqual -> aqualUniverses
-- On INT8 reduce production aqual -> aqualUniverses
-- On INT64 reduce production aqual -> aqualUniverses
-- On INT32 reduce production aqual -> aqualUniverses
-- On INT16 reduce production aqual -> aqualUniverses
-- On INT reduce production aqual -> aqualUniverses
-- On IEEE64 reduce production aqual -> aqualUniverses
-- On IDENT reduce production aqual -> aqualUniverses
-- On FALSE reduce production aqual -> aqualUniverses
-- On CHAR reduce production aqual -> aqualUniverses
-- On BYTEARRAY reduce production aqual -> aqualUniverses
-- On BEGIN reduce production aqual -> aqualUniverses
-- On BANG_LBRACE reduce production aqual -> aqualUniverses
-- On BACKTICK_HASH reduce production aqual -> aqualUniverses
-- On BACKTICK_AT reduce production aqual -> aqualUniverses
-- On BACKTICK reduce production aqual -> aqualUniverses

State 276:
## Known stack suffix:
## aqual
## LR(1) items:
simpleArrowDomain -> aqual . tmEqNoRefinement [ RARROW ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 277
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 277:
## Known stack suffix:
## aqual tmEqNoRefinement
## LR(1) items:
simpleArrowDomain -> aqual tmEqNoRefinement . [ RARROW ]
## Transitions:
## Reductions:
-- On RARROW reduce production simpleArrowDomain -> aqual tmEqNoRefinement

State 278:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow . refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 554
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On RPAREN reduce production option(__anonymous_9) ->

State 279:
## Known stack suffix:
## LBRACE
## LR(1) items:
option(__anonymous_9) -> LBRACE . noSeqTerm RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 552
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 280:
## Known stack suffix:
## EXISTS
## LR(1) items:
typ -> EXISTS . binders DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 291
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On DOT reduce production list(__anonymous_4) ->

State 281:
## Known stack suffix:
## tvar
## LR(1) items:
binder -> tvar . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production binder -> tvar
-- On UNOPTEQUALITY reduce production binder -> tvar
-- On UNFOLDABLE reduce production binder -> tvar
-- On UNFOLD reduce production binder -> tvar
-- On UNDERSCORE reduce production binder -> tvar
-- On TYPE reduce production binder -> tvar
-- On TVAR reduce production binder -> tvar
-- On TOTAL reduce production binder -> tvar
-- On SUB_EFFECT reduce production binder -> tvar
-- On SPLICE reduce production binder -> tvar
-- On REIFIABLE reduce production binder -> tvar
-- On REFLECTABLE reduce production binder -> tvar
-- On PRIVATE reduce production binder -> tvar
-- On PRAGMA_SET_OPTIONS reduce production binder -> tvar
-- On PRAGMA_RESET_OPTIONS reduce production binder -> tvar
-- On OPEN reduce production binder -> tvar
-- On OPAQUE reduce production binder -> tvar
-- On NOEXTRACT reduce production binder -> tvar
-- On NOEQUALITY reduce production binder -> tvar
-- On NEW_EFFECT reduce production binder -> tvar
-- On NEW reduce production binder -> tvar
-- On MODULE reduce production binder -> tvar
-- On LPAREN reduce production binder -> tvar
-- On LOGIC reduce production binder -> tvar
-- On LET reduce production binder -> tvar
-- On LBRACK_AT reduce production binder -> tvar
-- On IRREDUCIBLE reduce production binder -> tvar
-- On INLINE_FOR_EXTRACTION reduce production binder -> tvar
-- On INLINE reduce production binder -> tvar
-- On INCLUDE reduce production binder -> tvar
-- On IDENT reduce production binder -> tvar
-- On HASH reduce production binder -> tvar
-- On FSDOC_STANDALONE reduce production binder -> tvar
-- On FSDOC reduce production binder -> tvar
-- On EXCEPTION reduce production binder -> tvar
-- On EQUALS reduce production binder -> tvar
-- On EOF reduce production binder -> tvar
-- On EFFECT reduce production binder -> tvar
-- On DOT reduce production binder -> tvar
-- On DOLLAR reduce production binder -> tvar
-- On DEFAULT reduce production binder -> tvar
-- On COLON reduce production binder -> tvar
-- On ASSUME reduce production binder -> tvar
-- On AND reduce production binder -> tvar
-- On ABSTRACT reduce production binder -> tvar

State 282:
## Known stack suffix:
## multiBinder
## LR(1) items:
list(__anonymous_4) -> multiBinder . list(__anonymous_4) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 283
-- On lidentOrUnderscore shift to state 284
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On VAL reduce production list(__anonymous_4) ->
-- On UNOPTEQUALITY reduce production list(__anonymous_4) ->
-- On UNFOLDABLE reduce production list(__anonymous_4) ->
-- On UNFOLD reduce production list(__anonymous_4) ->
-- On TYPE reduce production list(__anonymous_4) ->
-- On TOTAL reduce production list(__anonymous_4) ->
-- On SUB_EFFECT reduce production list(__anonymous_4) ->
-- On SPLICE reduce production list(__anonymous_4) ->
-- On REIFIABLE reduce production list(__anonymous_4) ->
-- On REFLECTABLE reduce production list(__anonymous_4) ->
-- On PRIVATE reduce production list(__anonymous_4) ->
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_4) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_4) ->
-- On OPEN reduce production list(__anonymous_4) ->
-- On OPAQUE reduce production list(__anonymous_4) ->
-- On NOEXTRACT reduce production list(__anonymous_4) ->
-- On NOEQUALITY reduce production list(__anonymous_4) ->
-- On NEW_EFFECT reduce production list(__anonymous_4) ->
-- On NEW reduce production list(__anonymous_4) ->
-- On MODULE reduce production list(__anonymous_4) ->
-- On LOGIC reduce production list(__anonymous_4) ->
-- On LET reduce production list(__anonymous_4) ->
-- On LBRACK_AT reduce production list(__anonymous_4) ->
-- On IRREDUCIBLE reduce production list(__anonymous_4) ->
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_4) ->
-- On INLINE reduce production list(__anonymous_4) ->
-- On INCLUDE reduce production list(__anonymous_4) ->
-- On FSDOC_STANDALONE reduce production list(__anonymous_4) ->
-- On FSDOC reduce production list(__anonymous_4) ->
-- On EXCEPTION reduce production list(__anonymous_4) ->
-- On EQUALS reduce production list(__anonymous_4) ->
-- On EOF reduce production list(__anonymous_4) ->
-- On EFFECT reduce production list(__anonymous_4) ->
-- On DOT reduce production list(__anonymous_4) ->
-- On DEFAULT reduce production list(__anonymous_4) ->
-- On COLON reduce production list(__anonymous_4) ->
-- On ASSUME reduce production list(__anonymous_4) ->
-- On AND reduce production list(__anonymous_4) ->
-- On ABSTRACT reduce production list(__anonymous_4) ->

State 283:
## Known stack suffix:
## multiBinder list(__anonymous_4)
## LR(1) items:
list(__anonymous_4) -> multiBinder list(__anonymous_4) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On UNOPTEQUALITY reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On UNFOLDABLE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On UNFOLD reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On TYPE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On TOTAL reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On SUB_EFFECT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On SPLICE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On REIFIABLE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On REFLECTABLE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On PRIVATE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On OPEN reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On OPAQUE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On NOEXTRACT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On NOEQUALITY reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On NEW_EFFECT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On NEW reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On MODULE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On LOGIC reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On LET reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On LBRACK_AT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On IRREDUCIBLE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On INLINE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On INCLUDE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On FSDOC_STANDALONE reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On FSDOC reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On EXCEPTION reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On EQUALS reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On EOF reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On EFFECT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On DOT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On DEFAULT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On COLON reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On ASSUME reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On AND reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)
-- On ABSTRACT reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)

State 284:
## Known stack suffix:
## lidentOrUnderscore
## LR(1) items:
aqualified(lidentOrUnderscore) -> lidentOrUnderscore . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On UNOPTEQUALITY reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On UNFOLDABLE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On UNFOLD reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On UNDERSCORE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On TYPE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On TVAR reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On TOTAL reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On SUB_EFFECT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On SPLICE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On REIFIABLE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On REFLECTABLE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On PRIVATE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On PRAGMA_SET_OPTIONS reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On PRAGMA_RESET_OPTIONS reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On OPEN reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On OPAQUE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On NOEXTRACT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On NOEQUALITY reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On NEW_EFFECT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On NEW reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On MODULE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On LPAREN reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On LOGIC reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On LET reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On LBRACK_AT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On IRREDUCIBLE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On INLINE_FOR_EXTRACTION reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On INLINE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On INCLUDE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On IDENT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On HASH reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On FSDOC_STANDALONE reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On FSDOC reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On EXCEPTION reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On EQUALS reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On EOF reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On EFFECT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On DOT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On DOLLAR reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On DEFAULT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On COLON reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On ASSUME reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On AND reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore
-- On ABSTRACT reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore

State 285:
## Known stack suffix:
## binder
## LR(1) items:
list(__anonymous_4) -> binder . list(__anonymous_4) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 286
-- On lidentOrUnderscore shift to state 284
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On VAL reduce production list(__anonymous_4) ->
-- On UNOPTEQUALITY reduce production list(__anonymous_4) ->
-- On UNFOLDABLE reduce production list(__anonymous_4) ->
-- On UNFOLD reduce production list(__anonymous_4) ->
-- On TYPE reduce production list(__anonymous_4) ->
-- On TOTAL reduce production list(__anonymous_4) ->
-- On SUB_EFFECT reduce production list(__anonymous_4) ->
-- On SPLICE reduce production list(__anonymous_4) ->
-- On REIFIABLE reduce production list(__anonymous_4) ->
-- On REFLECTABLE reduce production list(__anonymous_4) ->
-- On PRIVATE reduce production list(__anonymous_4) ->
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_4) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_4) ->
-- On OPEN reduce production list(__anonymous_4) ->
-- On OPAQUE reduce production list(__anonymous_4) ->
-- On NOEXTRACT reduce production list(__anonymous_4) ->
-- On NOEQUALITY reduce production list(__anonymous_4) ->
-- On NEW_EFFECT reduce production list(__anonymous_4) ->
-- On NEW reduce production list(__anonymous_4) ->
-- On MODULE reduce production list(__anonymous_4) ->
-- On LOGIC reduce production list(__anonymous_4) ->
-- On LET reduce production list(__anonymous_4) ->
-- On LBRACK_AT reduce production list(__anonymous_4) ->
-- On IRREDUCIBLE reduce production list(__anonymous_4) ->
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_4) ->
-- On INLINE reduce production list(__anonymous_4) ->
-- On INCLUDE reduce production list(__anonymous_4) ->
-- On FSDOC_STANDALONE reduce production list(__anonymous_4) ->
-- On FSDOC reduce production list(__anonymous_4) ->
-- On EXCEPTION reduce production list(__anonymous_4) ->
-- On EQUALS reduce production list(__anonymous_4) ->
-- On EOF reduce production list(__anonymous_4) ->
-- On EFFECT reduce production list(__anonymous_4) ->
-- On DOT reduce production list(__anonymous_4) ->
-- On DEFAULT reduce production list(__anonymous_4) ->
-- On COLON reduce production list(__anonymous_4) ->
-- On ASSUME reduce production list(__anonymous_4) ->
-- On AND reduce production list(__anonymous_4) ->
-- On ABSTRACT reduce production list(__anonymous_4) ->

State 286:
## Known stack suffix:
## binder list(__anonymous_4)
## LR(1) items:
list(__anonymous_4) -> binder list(__anonymous_4) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On UNOPTEQUALITY reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On UNFOLDABLE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On UNFOLD reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On TYPE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On TOTAL reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On SUB_EFFECT reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On SPLICE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On REIFIABLE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On REFLECTABLE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On PRIVATE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On OPEN reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On OPAQUE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On NOEXTRACT reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On NOEQUALITY reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On NEW_EFFECT reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On NEW reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On MODULE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On LOGIC reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On LET reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On LBRACK_AT reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On IRREDUCIBLE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On INLINE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On INCLUDE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On FSDOC_STANDALONE reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On FSDOC reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On EXCEPTION reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On EQUALS reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On EOF reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On EFFECT reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On DOT reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On DEFAULT reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On COLON reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On ASSUME reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On AND reduce production list(__anonymous_4) -> binder list(__anonymous_4)
-- On ABSTRACT reduce production list(__anonymous_4) -> binder list(__anonymous_4)

State 287:
## Known stack suffix:
## aqualified(lidentOrUnderscore)
## LR(1) items:
binder -> aqualified(lidentOrUnderscore) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production binder -> aqualified(lidentOrUnderscore)
-- On UNOPTEQUALITY reduce production binder -> aqualified(lidentOrUnderscore)
-- On UNFOLDABLE reduce production binder -> aqualified(lidentOrUnderscore)
-- On UNFOLD reduce production binder -> aqualified(lidentOrUnderscore)
-- On UNDERSCORE reduce production binder -> aqualified(lidentOrUnderscore)
-- On TYPE reduce production binder -> aqualified(lidentOrUnderscore)
-- On TVAR reduce production binder -> aqualified(lidentOrUnderscore)
-- On TOTAL reduce production binder -> aqualified(lidentOrUnderscore)
-- On SUB_EFFECT reduce production binder -> aqualified(lidentOrUnderscore)
-- On SPLICE reduce production binder -> aqualified(lidentOrUnderscore)
-- On REIFIABLE reduce production binder -> aqualified(lidentOrUnderscore)
-- On REFLECTABLE reduce production binder -> aqualified(lidentOrUnderscore)
-- On PRIVATE reduce production binder -> aqualified(lidentOrUnderscore)
-- On PRAGMA_SET_OPTIONS reduce production binder -> aqualified(lidentOrUnderscore)
-- On PRAGMA_RESET_OPTIONS reduce production binder -> aqualified(lidentOrUnderscore)
-- On OPEN reduce production binder -> aqualified(lidentOrUnderscore)
-- On OPAQUE reduce production binder -> aqualified(lidentOrUnderscore)
-- On NOEXTRACT reduce production binder -> aqualified(lidentOrUnderscore)
-- On NOEQUALITY reduce production binder -> aqualified(lidentOrUnderscore)
-- On NEW_EFFECT reduce production binder -> aqualified(lidentOrUnderscore)
-- On NEW reduce production binder -> aqualified(lidentOrUnderscore)
-- On MODULE reduce production binder -> aqualified(lidentOrUnderscore)
-- On LPAREN reduce production binder -> aqualified(lidentOrUnderscore)
-- On LOGIC reduce production binder -> aqualified(lidentOrUnderscore)
-- On LET reduce production binder -> aqualified(lidentOrUnderscore)
-- On LBRACK_AT reduce production binder -> aqualified(lidentOrUnderscore)
-- On IRREDUCIBLE reduce production binder -> aqualified(lidentOrUnderscore)
-- On INLINE_FOR_EXTRACTION reduce production binder -> aqualified(lidentOrUnderscore)
-- On INLINE reduce production binder -> aqualified(lidentOrUnderscore)
-- On INCLUDE reduce production binder -> aqualified(lidentOrUnderscore)
-- On IDENT reduce production binder -> aqualified(lidentOrUnderscore)
-- On HASH reduce production binder -> aqualified(lidentOrUnderscore)
-- On FSDOC_STANDALONE reduce production binder -> aqualified(lidentOrUnderscore)
-- On FSDOC reduce production binder -> aqualified(lidentOrUnderscore)
-- On EXCEPTION reduce production binder -> aqualified(lidentOrUnderscore)
-- On EQUALS reduce production binder -> aqualified(lidentOrUnderscore)
-- On EOF reduce production binder -> aqualified(lidentOrUnderscore)
-- On EFFECT reduce production binder -> aqualified(lidentOrUnderscore)
-- On DOT reduce production binder -> aqualified(lidentOrUnderscore)
-- On DOLLAR reduce production binder -> aqualified(lidentOrUnderscore)
-- On DEFAULT reduce production binder -> aqualified(lidentOrUnderscore)
-- On COLON reduce production binder -> aqualified(lidentOrUnderscore)
-- On ASSUME reduce production binder -> aqualified(lidentOrUnderscore)
-- On AND reduce production binder -> aqualified(lidentOrUnderscore)
-- On ABSTRACT reduce production binder -> aqualified(lidentOrUnderscore)

State 288:
## Known stack suffix:
## aqualUniverses
## LR(1) items:
aqualified(lidentOrUnderscore) -> aqualUniverses . lidentOrUnderscore [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On IDENT shift to state 245
-- On lidentOrUnderscore shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## aqualUniverses lidentOrUnderscore
## LR(1) items:
aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On UNOPTEQUALITY reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On UNFOLDABLE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On UNFOLD reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On UNDERSCORE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On TYPE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On TVAR reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On TOTAL reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On SUB_EFFECT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On SPLICE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On REIFIABLE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On REFLECTABLE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On PRIVATE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On PRAGMA_SET_OPTIONS reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On PRAGMA_RESET_OPTIONS reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On OPEN reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On OPAQUE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On NOEXTRACT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On NOEQUALITY reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On NEW_EFFECT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On NEW reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On MODULE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On LPAREN reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On LOGIC reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On LET reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On LBRACK_AT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On IRREDUCIBLE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On INLINE_FOR_EXTRACTION reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On INLINE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On INCLUDE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On IDENT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On HASH reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On FSDOC_STANDALONE reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On FSDOC reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On EXCEPTION reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On EQUALS reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On EOF reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On EFFECT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On DOT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On DOLLAR reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On DEFAULT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On COLON reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On ASSUME reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On AND reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore
-- On ABSTRACT reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore

State 290:
## Known stack suffix:
## list(__anonymous_4)
## LR(1) items:
binders -> list(__anonymous_4) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production binders -> list(__anonymous_4)
-- On UNOPTEQUALITY reduce production binders -> list(__anonymous_4)
-- On UNFOLDABLE reduce production binders -> list(__anonymous_4)
-- On UNFOLD reduce production binders -> list(__anonymous_4)
-- On TYPE reduce production binders -> list(__anonymous_4)
-- On TOTAL reduce production binders -> list(__anonymous_4)
-- On SUB_EFFECT reduce production binders -> list(__anonymous_4)
-- On SPLICE reduce production binders -> list(__anonymous_4)
-- On REIFIABLE reduce production binders -> list(__anonymous_4)
-- On REFLECTABLE reduce production binders -> list(__anonymous_4)
-- On PRIVATE reduce production binders -> list(__anonymous_4)
-- On PRAGMA_SET_OPTIONS reduce production binders -> list(__anonymous_4)
-- On PRAGMA_RESET_OPTIONS reduce production binders -> list(__anonymous_4)
-- On OPEN reduce production binders -> list(__anonymous_4)
-- On OPAQUE reduce production binders -> list(__anonymous_4)
-- On NOEXTRACT reduce production binders -> list(__anonymous_4)
-- On NOEQUALITY reduce production binders -> list(__anonymous_4)
-- On NEW_EFFECT reduce production binders -> list(__anonymous_4)
-- On NEW reduce production binders -> list(__anonymous_4)
-- On MODULE reduce production binders -> list(__anonymous_4)
-- On LOGIC reduce production binders -> list(__anonymous_4)
-- On LET reduce production binders -> list(__anonymous_4)
-- On LBRACK_AT reduce production binders -> list(__anonymous_4)
-- On IRREDUCIBLE reduce production binders -> list(__anonymous_4)
-- On INLINE_FOR_EXTRACTION reduce production binders -> list(__anonymous_4)
-- On INLINE reduce production binders -> list(__anonymous_4)
-- On INCLUDE reduce production binders -> list(__anonymous_4)
-- On FSDOC_STANDALONE reduce production binders -> list(__anonymous_4)
-- On FSDOC reduce production binders -> list(__anonymous_4)
-- On EXCEPTION reduce production binders -> list(__anonymous_4)
-- On EQUALS reduce production binders -> list(__anonymous_4)
-- On EOF reduce production binders -> list(__anonymous_4)
-- On EFFECT reduce production binders -> list(__anonymous_4)
-- On DOT reduce production binders -> list(__anonymous_4)
-- On DEFAULT reduce production binders -> list(__anonymous_4)
-- On COLON reduce production binders -> list(__anonymous_4)
-- On ASSUME reduce production binders -> list(__anonymous_4)
-- On AND reduce production binders -> list(__anonymous_4)
-- On ABSTRACT reduce production binders -> list(__anonymous_4)

State 291:
## Known stack suffix:
## EXISTS binders
## LR(1) items:
typ -> EXISTS binders . DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On DOT shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## EXISTS binders DOT
## LR(1) items:
typ -> EXISTS binders DOT . trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACE_COLON_PATTERN shift to state 293
-- On trigger shift to state 304
## Reductions:
-- On UNDERSCORE reduce production trigger ->
-- On UINT8 reduce production trigger ->
-- On UINT64 reduce production trigger ->
-- On UINT32 reduce production trigger ->
-- On UINT16 reduce production trigger ->
-- On TVAR reduce production trigger ->
-- On TRY reduce production trigger ->
-- On TRUE reduce production trigger ->
-- On TILDE reduce production trigger ->
-- On SYNTH reduce production trigger ->
-- On STRING reduce production trigger ->
-- On SET_RANGE_OF reduce production trigger ->
-- On REQUIRES reduce production trigger ->
-- On REIFY reduce production trigger ->
-- On RANGE_OF reduce production trigger ->
-- On QUOTE reduce production trigger ->
-- On PERC_BACKTICK reduce production trigger ->
-- On PERCENT_LBRACK reduce production trigger ->
-- On OPPREFIX reduce production trigger ->
-- On NAME reduce production trigger ->
-- On MINUS reduce production trigger ->
-- On MATCH reduce production trigger ->
-- On LPAREN_RPAREN reduce production trigger ->
-- On LPAREN reduce production trigger ->
-- On LET reduce production trigger ->
-- On LENS_PAREN_LEFT reduce production trigger ->
-- On LBRACK_BAR reduce production trigger ->
-- On LBRACK_AT reduce production trigger ->
-- On LBRACK reduce production trigger ->
-- On LBRACE reduce production trigger ->
-- On INT8 reduce production trigger ->
-- On INT64 reduce production trigger ->
-- On INT32 reduce production trigger ->
-- On INT16 reduce production trigger ->
-- On INT reduce production trigger ->
-- On IF reduce production trigger ->
-- On IEEE64 reduce production trigger ->
-- On IDENT reduce production trigger ->
-- On HASH reduce production trigger ->
-- On FUNCTION reduce production trigger ->
-- On FUN reduce production trigger ->
-- On FORALL reduce production trigger ->
-- On FALSE reduce production trigger ->
-- On EXISTS reduce production trigger ->
-- On EQUALS reduce production trigger ->
-- On ENSURES reduce production trigger ->
-- On DOLLAR reduce production trigger ->
-- On CHAR reduce production trigger ->
-- On BYTEARRAY reduce production trigger ->
-- On BEGIN reduce production trigger ->
-- On BANG_LBRACE reduce production trigger ->
-- On BACKTICK_HASH reduce production trigger ->
-- On BACKTICK_AT reduce production trigger ->
-- On BACKTICK reduce production trigger ->
-- On ATTRIBUTES reduce production trigger ->
-- On ASSUME reduce production trigger ->
-- On ASSERT reduce production trigger ->

State 293:
## Known stack suffix:
## LBRACE_COLON_PATTERN
## LR(1) items:
trigger -> LBRACE_COLON_PATTERN . disjunctivePats RBRACE [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(SEMICOLON,appTerm) shift to state 294
-- On separated_nonempty_list(DISJUNCTION,conjunctivePat) shift to state 295
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On disjunctivePats shift to state 296
-- On constant shift to state 103
-- On conjunctivePat shift to state 298
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 301
## Reductions:

State 294:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,appTerm)
## LR(1) items:
conjunctivePat -> separated_nonempty_list(SEMICOLON,appTerm) . [ RBRACE DISJUNCTION ]
## Transitions:
## Reductions:
-- On RBRACE reduce production conjunctivePat -> separated_nonempty_list(SEMICOLON,appTerm)
-- On DISJUNCTION reduce production conjunctivePat -> separated_nonempty_list(SEMICOLON,appTerm)

State 295:
## Known stack suffix:
## separated_nonempty_list(DISJUNCTION,conjunctivePat)
## LR(1) items:
disjunctivePats -> separated_nonempty_list(DISJUNCTION,conjunctivePat) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production disjunctivePats -> separated_nonempty_list(DISJUNCTION,conjunctivePat)

State 296:
## Known stack suffix:
## LBRACE_COLON_PATTERN disjunctivePats
## LR(1) items:
trigger -> LBRACE_COLON_PATTERN disjunctivePats . RBRACE [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
-- On RBRACE shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## LBRACE_COLON_PATTERN disjunctivePats RBRACE
## LR(1) items:
trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On UINT8 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On UINT64 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On UINT32 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On UINT16 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On TVAR reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On TRY reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On TRUE reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On TILDE reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On SYNTH reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On STRING reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On SET_RANGE_OF reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On REQUIRES reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On REIFY reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On RANGE_OF reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On QUOTE reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On PERC_BACKTICK reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On PERCENT_LBRACK reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On OPPREFIX reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On NAME reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On MINUS reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On MATCH reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LPAREN_RPAREN reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LPAREN reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LET reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LENS_PAREN_LEFT reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LBRACK_BAR reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LBRACK_AT reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LBRACK reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On LBRACE reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On INT8 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On INT64 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On INT32 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On INT16 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On INT reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On IF reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On IEEE64 reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On IDENT reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On HASH reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On FUNCTION reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On FUN reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On FORALL reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On FALSE reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On EXISTS reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On EQUALS reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On ENSURES reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On DOLLAR reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On CHAR reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On BYTEARRAY reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On BEGIN reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On BANG_LBRACE reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On BACKTICK_HASH reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On BACKTICK_AT reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On BACKTICK reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On ATTRIBUTES reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On ASSUME reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE
-- On ASSERT reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE

State 298:
## Known stack suffix:
## conjunctivePat
## LR(1) items:
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat . [ RBRACE ]
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat . DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat) [ RBRACE ]
## Transitions:
-- On DISJUNCTION shift to state 299
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat

State 299:
## Known stack suffix:
## conjunctivePat DISJUNCTION
## LR(1) items:
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat DISJUNCTION . separated_nonempty_list(DISJUNCTION,conjunctivePat) [ RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(SEMICOLON,appTerm) shift to state 294
-- On separated_nonempty_list(DISJUNCTION,conjunctivePat) shift to state 300
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On conjunctivePat shift to state 298
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 301
## Reductions:

State 300:
## Known stack suffix:
## conjunctivePat DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat)
## LR(1) items:
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat)

State 301:
## Known stack suffix:
## appTerm
## LR(1) items:
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm . [ RBRACE DISJUNCTION ]
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm . SEMICOLON separated_nonempty_list(SEMICOLON,appTerm) [ RBRACE DISJUNCTION ]
## Transitions:
-- On SEMICOLON shift to state 302
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(SEMICOLON,appTerm) -> appTerm
-- On DISJUNCTION reduce production separated_nonempty_list(SEMICOLON,appTerm) -> appTerm

State 302:
## Known stack suffix:
## appTerm SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm SEMICOLON . separated_nonempty_list(SEMICOLON,appTerm) [ RBRACE DISJUNCTION ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(SEMICOLON,appTerm) shift to state 303
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 301
## Reductions:

State 303:
## Known stack suffix:
## appTerm SEMICOLON separated_nonempty_list(SEMICOLON,appTerm)
## LR(1) items:
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm SEMICOLON separated_nonempty_list(SEMICOLON,appTerm) . [ RBRACE DISJUNCTION ]
## Transitions:
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(SEMICOLON,appTerm) -> appTerm SEMICOLON separated_nonempty_list(SEMICOLON,appTerm)
-- On DISJUNCTION reduce production separated_nonempty_list(SEMICOLON,appTerm) -> appTerm SEMICOLON separated_nonempty_list(SEMICOLON,appTerm)

State 304:
## Known stack suffix:
## EXISTS binders DOT trigger
## LR(1) items:
typ -> EXISTS binders DOT trigger . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 397
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 305:
## Known stack suffix:
## ENSURES
## LR(1) items:
noSeqTerm -> ENSURES . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 332
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 306:
## Known stack suffix:
## BACKTICK_HASH
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_HASH . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## BACKTICK_HASH atomicTerm
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On VAL reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On TYPE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On TOTAL reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On THEN reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On SPLICE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On RPAREN reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On RBRACK reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On RBRACE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On RARROW reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPEN reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On NEW reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On MODULE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On MINUS reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On LOGIC reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On LET reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On INLINE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On IN reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On IFF reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On FSDOC reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On EQUALS reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On EOF reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On END reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On ELSE reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On COMMA reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On BY reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On BAR reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On ASSUME reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On AND reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
-- On # reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 308:
## Known stack suffix:
## BACKTICK_AT
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_AT . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## BACKTICK_AT atomicTerm
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On VAL reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On TYPE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On TOTAL reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On THEN reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On SPLICE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On RPAREN reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On RBRACK reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On RBRACE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On RARROW reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPEN reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On NEW reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On MODULE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On MINUS reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On LOGIC reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On LET reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On INLINE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On IN reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On IFF reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On FSDOC reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On EQUALS reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On EOF reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On END reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On ELSE reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On COMMA reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On BY reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On BAR reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On ASSUME reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On AND reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
-- On # reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 310:
## Known stack suffix:
## BACKTICK
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 331
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 311:
## Known stack suffix:
## tmRefinement
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmRefinement . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On VAL reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On THEN reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX4 reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX3 reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On NEW reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On LET reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On IN reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On IFF reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On EOF reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On END reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On BY reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On BAR reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On BACKTICK reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On AND reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On AMP reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> tmRefinement
-- On # reduce production tmNoEqWith(tmRefinement) -> tmRefinement
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> tmRefinement
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 312:
## Known stack suffix:
## tmNoEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On MINUS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 313:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX4
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 314
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 314:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On VAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On THEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPINFIX3 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On NEW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On LET reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On IN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On IFF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On EOF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On END reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On BY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On BAR reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On BACKTICK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On AND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On AMP reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
-- On # reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 315:
## Known stack suffix:
## lidentOrUnderscore
## LR(1) items:
tmRefinement -> lidentOrUnderscore . COLON appTerm refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On COLON shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## lidentOrUnderscore COLON
## LR(1) items:
tmRefinement -> lidentOrUnderscore COLON . appTerm refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## lidentOrUnderscore COLON appTerm
## LR(1) items:
tmRefinement -> lidentOrUnderscore COLON appTerm . refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 318
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On WITH reduce production option(__anonymous_9) ->
-- On VAL reduce production option(__anonymous_9) ->
-- On UNOPTEQUALITY reduce production option(__anonymous_9) ->
-- On UNFOLDABLE reduce production option(__anonymous_9) ->
-- On UNFOLD reduce production option(__anonymous_9) ->
-- On TYPE reduce production option(__anonymous_9) ->
-- On TOTAL reduce production option(__anonymous_9) ->
-- On THEN reduce production option(__anonymous_9) ->
-- On SUB_EFFECT reduce production option(__anonymous_9) ->
-- On SUBTYPE reduce production option(__anonymous_9) ->
-- On SUBKIND reduce production option(__anonymous_9) ->
-- On SQUIGGLY_RARROW reduce production option(__anonymous_9) ->
-- On SPLICE reduce production option(__anonymous_9) ->
-- On SEMICOLON_SEMICOLON reduce production option(__anonymous_9) ->
-- On SEMICOLON reduce production option(__anonymous_9) ->
-- On RPAREN reduce production option(__anonymous_9) ->
-- On REIFIABLE reduce production option(__anonymous_9) ->
-- On REFLECTABLE reduce production option(__anonymous_9) ->
-- On RBRACK reduce production option(__anonymous_9) ->
-- On RBRACE reduce production option(__anonymous_9) ->
-- On RARROW reduce production option(__anonymous_9) ->
-- On PRIVATE reduce production option(__anonymous_9) ->
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_9) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_9) ->
-- On PIPE_RIGHT reduce production option(__anonymous_9) ->
-- On OPINFIX4 reduce production option(__anonymous_9) ->
-- On OPINFIX3 reduce production option(__anonymous_9) ->
-- On OPINFIX2 reduce production option(__anonymous_9) ->
-- On OPINFIX1 reduce production option(__anonymous_9) ->
-- On OPINFIX0d reduce production option(__anonymous_9) ->
-- On OPINFIX0c reduce production option(__anonymous_9) ->
-- On OPINFIX0b reduce production option(__anonymous_9) ->
-- On OPINFIX0a reduce production option(__anonymous_9) ->
-- On OPEN reduce production option(__anonymous_9) ->
-- On OPAQUE reduce production option(__anonymous_9) ->
-- On NOEXTRACT reduce production option(__anonymous_9) ->
-- On NOEQUALITY reduce production option(__anonymous_9) ->
-- On NEW_EFFECT reduce production option(__anonymous_9) ->
-- On NEW reduce production option(__anonymous_9) ->
-- On MODULE reduce production option(__anonymous_9) ->
-- On MINUS reduce production option(__anonymous_9) ->
-- On LOGIC reduce production option(__anonymous_9) ->
-- On LET reduce production option(__anonymous_9) ->
-- On LENS_PAREN_RIGHT reduce production option(__anonymous_9) ->
-- On LBRACK_AT reduce production option(__anonymous_9) ->
-- On IRREDUCIBLE reduce production option(__anonymous_9) ->
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_9) ->
-- On INLINE reduce production option(__anonymous_9) ->
-- On INCLUDE reduce production option(__anonymous_9) ->
-- On IN reduce production option(__anonymous_9) ->
-- On IMPLIES reduce production option(__anonymous_9) ->
-- On IFF reduce production option(__anonymous_9) ->
-- On FSDOC_STANDALONE reduce production option(__anonymous_9) ->
-- On FSDOC reduce production option(__anonymous_9) ->
-- On EXCEPTION reduce production option(__anonymous_9) ->
-- On EQUALS reduce production option(__anonymous_9) ->
-- On EOF reduce production option(__anonymous_9) ->
-- On END reduce production option(__anonymous_9) ->
-- On ELSE reduce production option(__anonymous_9) ->
-- On EFFECT reduce production option(__anonymous_9) ->
-- On DISJUNCTION reduce production option(__anonymous_9) ->
-- On DEFAULT reduce production option(__anonymous_9) ->
-- On CONJUNCTION reduce production option(__anonymous_9) ->
-- On COMMA reduce production option(__anonymous_9) ->
-- On COLON_EQUALS reduce production option(__anonymous_9) ->
-- On COLON_COLON reduce production option(__anonymous_9) ->
-- On BY reduce production option(__anonymous_9) ->
-- On BAR_RBRACK reduce production option(__anonymous_9) ->
-- On BAR reduce production option(__anonymous_9) ->
-- On BACKTICK reduce production option(__anonymous_9) ->
-- On ASSUME reduce production option(__anonymous_9) ->
-- On AND reduce production option(__anonymous_9) ->
-- On AMP reduce production option(__anonymous_9) ->
-- On ABSTRACT reduce production option(__anonymous_9) ->
-- On # reduce production option(__anonymous_9) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production option(__anonymous_9) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 318:
## Known stack suffix:
## lidentOrUnderscore COLON appTerm refineOpt
## LR(1) items:
tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On VAL reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On UNOPTEQUALITY reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On UNFOLDABLE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On UNFOLD reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On TYPE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On TOTAL reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On THEN reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On SUB_EFFECT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On SUBTYPE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On SUBKIND reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On SQUIGGLY_RARROW reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On SPLICE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On SEMICOLON_SEMICOLON reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On SEMICOLON reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On RPAREN reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On REIFIABLE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On REFLECTABLE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On RBRACK reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On RBRACE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On RARROW reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On PRIVATE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On PRAGMA_SET_OPTIONS reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On PRAGMA_RESET_OPTIONS reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On PIPE_RIGHT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX4 reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX3 reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX2 reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX1 reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX0d reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX0c reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX0b reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPINFIX0a reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPEN reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On OPAQUE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On NOEXTRACT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On NOEQUALITY reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On NEW_EFFECT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On NEW reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On MODULE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On MINUS reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On LOGIC reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On LET reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On LENS_PAREN_RIGHT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On LBRACK_AT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On IRREDUCIBLE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On INLINE_FOR_EXTRACTION reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On INLINE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On INCLUDE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On IN reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On IMPLIES reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On IFF reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On FSDOC_STANDALONE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On FSDOC reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On EXCEPTION reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On EQUALS reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On EOF reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On END reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On ELSE reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On EFFECT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On DISJUNCTION reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On DEFAULT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On CONJUNCTION reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On COMMA reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On COLON_EQUALS reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On COLON_COLON reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On BY reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On BAR_RBRACK reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On BAR reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On BACKTICK reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On ASSUME reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On AND reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On AMP reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On ABSTRACT reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
-- On # reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 319:
## Known stack suffix:
## option(__anonymous_9)
## LR(1) items:
refineOpt -> option(__anonymous_9) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production refineOpt -> option(__anonymous_9)
-- On VAL reduce production refineOpt -> option(__anonymous_9)
-- On UNOPTEQUALITY reduce production refineOpt -> option(__anonymous_9)
-- On UNFOLDABLE reduce production refineOpt -> option(__anonymous_9)
-- On UNFOLD reduce production refineOpt -> option(__anonymous_9)
-- On TYPE reduce production refineOpt -> option(__anonymous_9)
-- On TOTAL reduce production refineOpt -> option(__anonymous_9)
-- On THEN reduce production refineOpt -> option(__anonymous_9)
-- On SUB_EFFECT reduce production refineOpt -> option(__anonymous_9)
-- On SUBTYPE reduce production refineOpt -> option(__anonymous_9)
-- On SUBKIND reduce production refineOpt -> option(__anonymous_9)
-- On SQUIGGLY_RARROW reduce production refineOpt -> option(__anonymous_9)
-- On SPLICE reduce production refineOpt -> option(__anonymous_9)
-- On SEMICOLON_SEMICOLON reduce production refineOpt -> option(__anonymous_9)
-- On SEMICOLON reduce production refineOpt -> option(__anonymous_9)
-- On RPAREN reduce production refineOpt -> option(__anonymous_9)
-- On REIFIABLE reduce production refineOpt -> option(__anonymous_9)
-- On REFLECTABLE reduce production refineOpt -> option(__anonymous_9)
-- On RBRACK reduce production refineOpt -> option(__anonymous_9)
-- On RBRACE reduce production refineOpt -> option(__anonymous_9)
-- On RARROW reduce production refineOpt -> option(__anonymous_9)
-- On PRIVATE reduce production refineOpt -> option(__anonymous_9)
-- On PRAGMA_SET_OPTIONS reduce production refineOpt -> option(__anonymous_9)
-- On PRAGMA_RESET_OPTIONS reduce production refineOpt -> option(__anonymous_9)
-- On PIPE_RIGHT reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX4 reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX3 reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX2 reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX1 reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX0d reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX0c reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX0b reduce production refineOpt -> option(__anonymous_9)
-- On OPINFIX0a reduce production refineOpt -> option(__anonymous_9)
-- On OPEN reduce production refineOpt -> option(__anonymous_9)
-- On OPAQUE reduce production refineOpt -> option(__anonymous_9)
-- On NOEXTRACT reduce production refineOpt -> option(__anonymous_9)
-- On NOEQUALITY reduce production refineOpt -> option(__anonymous_9)
-- On NEW_EFFECT reduce production refineOpt -> option(__anonymous_9)
-- On NEW reduce production refineOpt -> option(__anonymous_9)
-- On MODULE reduce production refineOpt -> option(__anonymous_9)
-- On MINUS reduce production refineOpt -> option(__anonymous_9)
-- On LOGIC reduce production refineOpt -> option(__anonymous_9)
-- On LET reduce production refineOpt -> option(__anonymous_9)
-- On LENS_PAREN_RIGHT reduce production refineOpt -> option(__anonymous_9)
-- On LBRACK_AT reduce production refineOpt -> option(__anonymous_9)
-- On IRREDUCIBLE reduce production refineOpt -> option(__anonymous_9)
-- On INLINE_FOR_EXTRACTION reduce production refineOpt -> option(__anonymous_9)
-- On INLINE reduce production refineOpt -> option(__anonymous_9)
-- On INCLUDE reduce production refineOpt -> option(__anonymous_9)
-- On IN reduce production refineOpt -> option(__anonymous_9)
-- On IMPLIES reduce production refineOpt -> option(__anonymous_9)
-- On IFF reduce production refineOpt -> option(__anonymous_9)
-- On FSDOC_STANDALONE reduce production refineOpt -> option(__anonymous_9)
-- On FSDOC reduce production refineOpt -> option(__anonymous_9)
-- On EXCEPTION reduce production refineOpt -> option(__anonymous_9)
-- On EQUALS reduce production refineOpt -> option(__anonymous_9)
-- On EOF reduce production refineOpt -> option(__anonymous_9)
-- On END reduce production refineOpt -> option(__anonymous_9)
-- On ELSE reduce production refineOpt -> option(__anonymous_9)
-- On EFFECT reduce production refineOpt -> option(__anonymous_9)
-- On DISJUNCTION reduce production refineOpt -> option(__anonymous_9)
-- On DEFAULT reduce production refineOpt -> option(__anonymous_9)
-- On CONJUNCTION reduce production refineOpt -> option(__anonymous_9)
-- On COMMA reduce production refineOpt -> option(__anonymous_9)
-- On COLON_EQUALS reduce production refineOpt -> option(__anonymous_9)
-- On COLON_COLON reduce production refineOpt -> option(__anonymous_9)
-- On BY reduce production refineOpt -> option(__anonymous_9)
-- On BAR_RBRACK reduce production refineOpt -> option(__anonymous_9)
-- On BAR reduce production refineOpt -> option(__anonymous_9)
-- On BACKTICK reduce production refineOpt -> option(__anonymous_9)
-- On ASSUME reduce production refineOpt -> option(__anonymous_9)
-- On AND reduce production refineOpt -> option(__anonymous_9)
-- On AMP reduce production refineOpt -> option(__anonymous_9)
-- On ABSTRACT reduce production refineOpt -> option(__anonymous_9)
-- On # reduce production refineOpt -> option(__anonymous_9)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production refineOpt -> option(__anonymous_9)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 320:
## Known stack suffix:
## appTerm
## LR(1) items:
tmRefinement -> appTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmRefinement -> appTerm
-- On VAL reduce production tmRefinement -> appTerm
-- On UNOPTEQUALITY reduce production tmRefinement -> appTerm
-- On UNFOLDABLE reduce production tmRefinement -> appTerm
-- On UNFOLD reduce production tmRefinement -> appTerm
-- On TYPE reduce production tmRefinement -> appTerm
-- On TOTAL reduce production tmRefinement -> appTerm
-- On THEN reduce production tmRefinement -> appTerm
-- On SUB_EFFECT reduce production tmRefinement -> appTerm
-- On SUBTYPE reduce production tmRefinement -> appTerm
-- On SUBKIND reduce production tmRefinement -> appTerm
-- On SQUIGGLY_RARROW reduce production tmRefinement -> appTerm
-- On SPLICE reduce production tmRefinement -> appTerm
-- On SEMICOLON_SEMICOLON reduce production tmRefinement -> appTerm
-- On SEMICOLON reduce production tmRefinement -> appTerm
-- On RPAREN reduce production tmRefinement -> appTerm
-- On REIFIABLE reduce production tmRefinement -> appTerm
-- On REFLECTABLE reduce production tmRefinement -> appTerm
-- On RBRACK reduce production tmRefinement -> appTerm
-- On RBRACE reduce production tmRefinement -> appTerm
-- On RARROW reduce production tmRefinement -> appTerm
-- On PRIVATE reduce production tmRefinement -> appTerm
-- On PRAGMA_SET_OPTIONS reduce production tmRefinement -> appTerm
-- On PRAGMA_RESET_OPTIONS reduce production tmRefinement -> appTerm
-- On PIPE_RIGHT reduce production tmRefinement -> appTerm
-- On OPINFIX4 reduce production tmRefinement -> appTerm
-- On OPINFIX3 reduce production tmRefinement -> appTerm
-- On OPINFIX2 reduce production tmRefinement -> appTerm
-- On OPINFIX1 reduce production tmRefinement -> appTerm
-- On OPINFIX0d reduce production tmRefinement -> appTerm
-- On OPINFIX0c reduce production tmRefinement -> appTerm
-- On OPINFIX0b reduce production tmRefinement -> appTerm
-- On OPINFIX0a reduce production tmRefinement -> appTerm
-- On OPEN reduce production tmRefinement -> appTerm
-- On OPAQUE reduce production tmRefinement -> appTerm
-- On NOEXTRACT reduce production tmRefinement -> appTerm
-- On NOEQUALITY reduce production tmRefinement -> appTerm
-- On NEW_EFFECT reduce production tmRefinement -> appTerm
-- On NEW reduce production tmRefinement -> appTerm
-- On MODULE reduce production tmRefinement -> appTerm
-- On MINUS reduce production tmRefinement -> appTerm
-- On LOGIC reduce production tmRefinement -> appTerm
-- On LET reduce production tmRefinement -> appTerm
-- On LENS_PAREN_RIGHT reduce production tmRefinement -> appTerm
-- On LBRACK_AT reduce production tmRefinement -> appTerm
-- On IRREDUCIBLE reduce production tmRefinement -> appTerm
-- On INLINE_FOR_EXTRACTION reduce production tmRefinement -> appTerm
-- On INLINE reduce production tmRefinement -> appTerm
-- On INCLUDE reduce production tmRefinement -> appTerm
-- On IN reduce production tmRefinement -> appTerm
-- On IMPLIES reduce production tmRefinement -> appTerm
-- On IFF reduce production tmRefinement -> appTerm
-- On FSDOC_STANDALONE reduce production tmRefinement -> appTerm
-- On FSDOC reduce production tmRefinement -> appTerm
-- On EXCEPTION reduce production tmRefinement -> appTerm
-- On EQUALS reduce production tmRefinement -> appTerm
-- On EOF reduce production tmRefinement -> appTerm
-- On END reduce production tmRefinement -> appTerm
-- On ELSE reduce production tmRefinement -> appTerm
-- On EFFECT reduce production tmRefinement -> appTerm
-- On DISJUNCTION reduce production tmRefinement -> appTerm
-- On DEFAULT reduce production tmRefinement -> appTerm
-- On CONJUNCTION reduce production tmRefinement -> appTerm
-- On COMMA reduce production tmRefinement -> appTerm
-- On COLON_EQUALS reduce production tmRefinement -> appTerm
-- On COLON_COLON reduce production tmRefinement -> appTerm
-- On BY reduce production tmRefinement -> appTerm
-- On BAR_RBRACK reduce production tmRefinement -> appTerm
-- On BAR reduce production tmRefinement -> appTerm
-- On BACKTICK reduce production tmRefinement -> appTerm
-- On ASSUME reduce production tmRefinement -> appTerm
-- On AND reduce production tmRefinement -> appTerm
-- On AMP reduce production tmRefinement -> appTerm
-- On ABSTRACT reduce production tmRefinement -> appTerm
-- On # reduce production tmRefinement -> appTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmRefinement -> appTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 321:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX3
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 322
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 322:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On BACKTICK shift to state 323
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On VAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On THEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPINFIX3 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On NEW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On LET reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On IN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On IFF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On EOF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On END reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On BY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On BAR reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On AND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On AMP reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
-- On # reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 323:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK . qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On qlident shift to state 324
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 324:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK qlident
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident . BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On BACKTICK shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 326
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 326:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On VAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On THEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPINFIX3 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On NEW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On LET reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On IN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On IFF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On EOF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On END reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On BY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On BAR reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On BACKTICK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On AND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On AMP reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
-- On # reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 327:
## Known stack suffix:
## tmNoEqWith(tmRefinement) COLON_COLON
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 328
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 328:
## Known stack suffix:
## tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On VAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On THEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On NEW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On LET reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On IN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On IFF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On EOF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On END reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On BY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On BAR reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On AND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
-- On # reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 329:
## Known stack suffix:
## tmNoEqWith(tmRefinement) AMP
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 330
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 330:
## Known stack suffix:
## tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On VAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On THEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On NEW reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On LET reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On IN reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On IFF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On EOF reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On END reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On BY reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On BAR reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On AND reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
-- On # reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 331:
## Known stack suffix:
## BACKTICK tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On MINUS reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 332:
## Known stack suffix:
## ENSURES typ
## LR(1) items:
noSeqTerm -> ENSURES typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> ENSURES typ
-- On VAL reduce production noSeqTerm -> ENSURES typ
-- On UNOPTEQUALITY reduce production noSeqTerm -> ENSURES typ
-- On UNFOLDABLE reduce production noSeqTerm -> ENSURES typ
-- On UNFOLD reduce production noSeqTerm -> ENSURES typ
-- On TYPE reduce production noSeqTerm -> ENSURES typ
-- On TOTAL reduce production noSeqTerm -> ENSURES typ
-- On THEN reduce production noSeqTerm -> ENSURES typ
-- On SUB_EFFECT reduce production noSeqTerm -> ENSURES typ
-- On SUBKIND reduce production noSeqTerm -> ENSURES typ
-- On SPLICE reduce production noSeqTerm -> ENSURES typ
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> ENSURES typ
-- On SEMICOLON reduce production noSeqTerm -> ENSURES typ
-- On RPAREN reduce production noSeqTerm -> ENSURES typ
-- On REIFIABLE reduce production noSeqTerm -> ENSURES typ
-- On REFLECTABLE reduce production noSeqTerm -> ENSURES typ
-- On RBRACK reduce production noSeqTerm -> ENSURES typ
-- On RBRACE reduce production noSeqTerm -> ENSURES typ
-- On PRIVATE reduce production noSeqTerm -> ENSURES typ
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> ENSURES typ
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> ENSURES typ
-- On OPEN reduce production noSeqTerm -> ENSURES typ
-- On OPAQUE reduce production noSeqTerm -> ENSURES typ
-- On NOEXTRACT reduce production noSeqTerm -> ENSURES typ
-- On NOEQUALITY reduce production noSeqTerm -> ENSURES typ
-- On NEW_EFFECT reduce production noSeqTerm -> ENSURES typ
-- On NEW reduce production noSeqTerm -> ENSURES typ
-- On MODULE reduce production noSeqTerm -> ENSURES typ
-- On LOGIC reduce production noSeqTerm -> ENSURES typ
-- On LET reduce production noSeqTerm -> ENSURES typ
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> ENSURES typ
-- On LBRACK_AT reduce production noSeqTerm -> ENSURES typ
-- On IRREDUCIBLE reduce production noSeqTerm -> ENSURES typ
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> ENSURES typ
-- On INLINE reduce production noSeqTerm -> ENSURES typ
-- On INCLUDE reduce production noSeqTerm -> ENSURES typ
-- On IN reduce production noSeqTerm -> ENSURES typ
-- On FSDOC_STANDALONE reduce production noSeqTerm -> ENSURES typ
-- On FSDOC reduce production noSeqTerm -> ENSURES typ
-- On EXCEPTION reduce production noSeqTerm -> ENSURES typ
-- On EOF reduce production noSeqTerm -> ENSURES typ
-- On END reduce production noSeqTerm -> ENSURES typ
-- On ELSE reduce production noSeqTerm -> ENSURES typ
-- On EFFECT reduce production noSeqTerm -> ENSURES typ
-- On DEFAULT reduce production noSeqTerm -> ENSURES typ
-- On BAR_RBRACK reduce production noSeqTerm -> ENSURES typ
-- On BAR reduce production noSeqTerm -> ENSURES typ
-- On ASSUME reduce production noSeqTerm -> ENSURES typ
-- On AND reduce production noSeqTerm -> ENSURES typ
-- On ABSTRACT reduce production noSeqTerm -> ENSURES typ
-- On # reduce production noSeqTerm -> ENSURES typ
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> ENSURES typ
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 333:
## Known stack suffix:
## tmTuple
## LR(1) items:
tmConjunction -> tmTuple . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmConjunction -> tmTuple
-- On VAL reduce production tmConjunction -> tmTuple
-- On UNOPTEQUALITY reduce production tmConjunction -> tmTuple
-- On UNFOLDABLE reduce production tmConjunction -> tmTuple
-- On UNFOLD reduce production tmConjunction -> tmTuple
-- On TYPE reduce production tmConjunction -> tmTuple
-- On TOTAL reduce production tmConjunction -> tmTuple
-- On THEN reduce production tmConjunction -> tmTuple
-- On SUB_EFFECT reduce production tmConjunction -> tmTuple
-- On SUBTYPE reduce production tmConjunction -> tmTuple
-- On SUBKIND reduce production tmConjunction -> tmTuple
-- On SQUIGGLY_RARROW reduce production tmConjunction -> tmTuple
-- On SPLICE reduce production tmConjunction -> tmTuple
-- On SEMICOLON_SEMICOLON reduce production tmConjunction -> tmTuple
-- On SEMICOLON reduce production tmConjunction -> tmTuple
-- On RPAREN reduce production tmConjunction -> tmTuple
-- On REIFIABLE reduce production tmConjunction -> tmTuple
-- On REFLECTABLE reduce production tmConjunction -> tmTuple
-- On RBRACK reduce production tmConjunction -> tmTuple
-- On RBRACE reduce production tmConjunction -> tmTuple
-- On RARROW reduce production tmConjunction -> tmTuple
-- On PRIVATE reduce production tmConjunction -> tmTuple
-- On PRAGMA_SET_OPTIONS reduce production tmConjunction -> tmTuple
-- On PRAGMA_RESET_OPTIONS reduce production tmConjunction -> tmTuple
-- On OPEN reduce production tmConjunction -> tmTuple
-- On OPAQUE reduce production tmConjunction -> tmTuple
-- On NOEXTRACT reduce production tmConjunction -> tmTuple
-- On NOEQUALITY reduce production tmConjunction -> tmTuple
-- On NEW_EFFECT reduce production tmConjunction -> tmTuple
-- On NEW reduce production tmConjunction -> tmTuple
-- On MODULE reduce production tmConjunction -> tmTuple
-- On LOGIC reduce production tmConjunction -> tmTuple
-- On LET reduce production tmConjunction -> tmTuple
-- On LENS_PAREN_RIGHT reduce production tmConjunction -> tmTuple
-- On LBRACK_AT reduce production tmConjunction -> tmTuple
-- On IRREDUCIBLE reduce production tmConjunction -> tmTuple
-- On INLINE_FOR_EXTRACTION reduce production tmConjunction -> tmTuple
-- On INLINE reduce production tmConjunction -> tmTuple
-- On INCLUDE reduce production tmConjunction -> tmTuple
-- On IN reduce production tmConjunction -> tmTuple
-- On IMPLIES reduce production tmConjunction -> tmTuple
-- On IFF reduce production tmConjunction -> tmTuple
-- On FSDOC_STANDALONE reduce production tmConjunction -> tmTuple
-- On FSDOC reduce production tmConjunction -> tmTuple
-- On EXCEPTION reduce production tmConjunction -> tmTuple
-- On EOF reduce production tmConjunction -> tmTuple
-- On END reduce production tmConjunction -> tmTuple
-- On ELSE reduce production tmConjunction -> tmTuple
-- On EFFECT reduce production tmConjunction -> tmTuple
-- On DISJUNCTION reduce production tmConjunction -> tmTuple
-- On DEFAULT reduce production tmConjunction -> tmTuple
-- On CONJUNCTION reduce production tmConjunction -> tmTuple
-- On BY reduce production tmConjunction -> tmTuple
-- On BAR_RBRACK reduce production tmConjunction -> tmTuple
-- On BAR reduce production tmConjunction -> tmTuple
-- On ASSUME reduce production tmConjunction -> tmTuple
-- On AND reduce production tmConjunction -> tmTuple
-- On ABSTRACT reduce production tmConjunction -> tmTuple
-- On # reduce production tmConjunction -> tmTuple
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmConjunction -> tmTuple
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 334:
## Known stack suffix:
## tmImplies
## LR(1) items:
tmIff -> tmImplies . IFF tmIff [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmIff -> tmImplies . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IFF shift to state 335
## Reductions:
-- On WITH reduce production tmIff -> tmImplies
-- On VAL reduce production tmIff -> tmImplies
-- On UNOPTEQUALITY reduce production tmIff -> tmImplies
-- On UNFOLDABLE reduce production tmIff -> tmImplies
-- On UNFOLD reduce production tmIff -> tmImplies
-- On TYPE reduce production tmIff -> tmImplies
-- On TOTAL reduce production tmIff -> tmImplies
-- On THEN reduce production tmIff -> tmImplies
-- On SUB_EFFECT reduce production tmIff -> tmImplies
-- On SUBTYPE reduce production tmIff -> tmImplies
-- On SUBKIND reduce production tmIff -> tmImplies
-- On SPLICE reduce production tmIff -> tmImplies
-- On SEMICOLON_SEMICOLON reduce production tmIff -> tmImplies
-- On SEMICOLON reduce production tmIff -> tmImplies
-- On RPAREN reduce production tmIff -> tmImplies
-- On REIFIABLE reduce production tmIff -> tmImplies
-- On REFLECTABLE reduce production tmIff -> tmImplies
-- On RBRACK reduce production tmIff -> tmImplies
-- On RBRACE reduce production tmIff -> tmImplies
-- On PRIVATE reduce production tmIff -> tmImplies
-- On PRAGMA_SET_OPTIONS reduce production tmIff -> tmImplies
-- On PRAGMA_RESET_OPTIONS reduce production tmIff -> tmImplies
-- On OPEN reduce production tmIff -> tmImplies
-- On OPAQUE reduce production tmIff -> tmImplies
-- On NOEXTRACT reduce production tmIff -> tmImplies
-- On NOEQUALITY reduce production tmIff -> tmImplies
-- On NEW_EFFECT reduce production tmIff -> tmImplies
-- On NEW reduce production tmIff -> tmImplies
-- On MODULE reduce production tmIff -> tmImplies
-- On LOGIC reduce production tmIff -> tmImplies
-- On LET reduce production tmIff -> tmImplies
-- On LENS_PAREN_RIGHT reduce production tmIff -> tmImplies
-- On LBRACK_AT reduce production tmIff -> tmImplies
-- On IRREDUCIBLE reduce production tmIff -> tmImplies
-- On INLINE_FOR_EXTRACTION reduce production tmIff -> tmImplies
-- On INLINE reduce production tmIff -> tmImplies
-- On INCLUDE reduce production tmIff -> tmImplies
-- On IN reduce production tmIff -> tmImplies
-- On FSDOC_STANDALONE reduce production tmIff -> tmImplies
-- On FSDOC reduce production tmIff -> tmImplies
-- On EXCEPTION reduce production tmIff -> tmImplies
-- On EOF reduce production tmIff -> tmImplies
-- On END reduce production tmIff -> tmImplies
-- On ELSE reduce production tmIff -> tmImplies
-- On EFFECT reduce production tmIff -> tmImplies
-- On DEFAULT reduce production tmIff -> tmImplies
-- On BY reduce production tmIff -> tmImplies
-- On BAR_RBRACK reduce production tmIff -> tmImplies
-- On BAR reduce production tmIff -> tmImplies
-- On ASSUME reduce production tmIff -> tmImplies
-- On AND reduce production tmIff -> tmImplies
-- On ABSTRACT reduce production tmIff -> tmImplies
-- On # reduce production tmIff -> tmImplies
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmIff -> tmImplies
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 335:
## Known stack suffix:
## tmImplies IFF
## LR(1) items:
tmIff -> tmImplies IFF . tmIff [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 336
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 336:
## Known stack suffix:
## tmImplies IFF tmIff
## LR(1) items:
tmIff -> tmImplies IFF tmIff . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmIff -> tmImplies IFF tmIff
-- On VAL reduce production tmIff -> tmImplies IFF tmIff
-- On UNOPTEQUALITY reduce production tmIff -> tmImplies IFF tmIff
-- On UNFOLDABLE reduce production tmIff -> tmImplies IFF tmIff
-- On UNFOLD reduce production tmIff -> tmImplies IFF tmIff
-- On TYPE reduce production tmIff -> tmImplies IFF tmIff
-- On TOTAL reduce production tmIff -> tmImplies IFF tmIff
-- On THEN reduce production tmIff -> tmImplies IFF tmIff
-- On SUB_EFFECT reduce production tmIff -> tmImplies IFF tmIff
-- On SUBTYPE reduce production tmIff -> tmImplies IFF tmIff
-- On SUBKIND reduce production tmIff -> tmImplies IFF tmIff
-- On SPLICE reduce production tmIff -> tmImplies IFF tmIff
-- On SEMICOLON_SEMICOLON reduce production tmIff -> tmImplies IFF tmIff
-- On SEMICOLON reduce production tmIff -> tmImplies IFF tmIff
-- On RPAREN reduce production tmIff -> tmImplies IFF tmIff
-- On REIFIABLE reduce production tmIff -> tmImplies IFF tmIff
-- On REFLECTABLE reduce production tmIff -> tmImplies IFF tmIff
-- On RBRACK reduce production tmIff -> tmImplies IFF tmIff
-- On RBRACE reduce production tmIff -> tmImplies IFF tmIff
-- On PRIVATE reduce production tmIff -> tmImplies IFF tmIff
-- On PRAGMA_SET_OPTIONS reduce production tmIff -> tmImplies IFF tmIff
-- On PRAGMA_RESET_OPTIONS reduce production tmIff -> tmImplies IFF tmIff
-- On OPEN reduce production tmIff -> tmImplies IFF tmIff
-- On OPAQUE reduce production tmIff -> tmImplies IFF tmIff
-- On NOEXTRACT reduce production tmIff -> tmImplies IFF tmIff
-- On NOEQUALITY reduce production tmIff -> tmImplies IFF tmIff
-- On NEW_EFFECT reduce production tmIff -> tmImplies IFF tmIff
-- On NEW reduce production tmIff -> tmImplies IFF tmIff
-- On MODULE reduce production tmIff -> tmImplies IFF tmIff
-- On LOGIC reduce production tmIff -> tmImplies IFF tmIff
-- On LET reduce production tmIff -> tmImplies IFF tmIff
-- On LENS_PAREN_RIGHT reduce production tmIff -> tmImplies IFF tmIff
-- On LBRACK_AT reduce production tmIff -> tmImplies IFF tmIff
-- On IRREDUCIBLE reduce production tmIff -> tmImplies IFF tmIff
-- On INLINE_FOR_EXTRACTION reduce production tmIff -> tmImplies IFF tmIff
-- On INLINE reduce production tmIff -> tmImplies IFF tmIff
-- On INCLUDE reduce production tmIff -> tmImplies IFF tmIff
-- On IN reduce production tmIff -> tmImplies IFF tmIff
-- On FSDOC_STANDALONE reduce production tmIff -> tmImplies IFF tmIff
-- On FSDOC reduce production tmIff -> tmImplies IFF tmIff
-- On EXCEPTION reduce production tmIff -> tmImplies IFF tmIff
-- On EOF reduce production tmIff -> tmImplies IFF tmIff
-- On END reduce production tmIff -> tmImplies IFF tmIff
-- On ELSE reduce production tmIff -> tmImplies IFF tmIff
-- On EFFECT reduce production tmIff -> tmImplies IFF tmIff
-- On DEFAULT reduce production tmIff -> tmImplies IFF tmIff
-- On BY reduce production tmIff -> tmImplies IFF tmIff
-- On BAR_RBRACK reduce production tmIff -> tmImplies IFF tmIff
-- On BAR reduce production tmIff -> tmImplies IFF tmIff
-- On ASSUME reduce production tmIff -> tmImplies IFF tmIff
-- On AND reduce production tmIff -> tmImplies IFF tmIff
-- On ABSTRACT reduce production tmIff -> tmImplies IFF tmIff
-- On # reduce production tmIff -> tmImplies IFF tmIff
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmIff -> tmImplies IFF tmIff
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 337:
## Known stack suffix:
## tmFormula
## LR(1) items:
tmArrow(tmFormula) -> tmFormula . RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmArrow(tmFormula) -> tmFormula . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On RARROW shift to state 338
-- On DISJUNCTION shift to state 372
## Reductions:
-- On WITH reduce production tmArrow(tmFormula) -> tmFormula
-- On VAL reduce production tmArrow(tmFormula) -> tmFormula
-- On UNOPTEQUALITY reduce production tmArrow(tmFormula) -> tmFormula
-- On UNFOLDABLE reduce production tmArrow(tmFormula) -> tmFormula
-- On UNFOLD reduce production tmArrow(tmFormula) -> tmFormula
-- On TYPE reduce production tmArrow(tmFormula) -> tmFormula
-- On TOTAL reduce production tmArrow(tmFormula) -> tmFormula
-- On THEN reduce production tmArrow(tmFormula) -> tmFormula
-- On SUB_EFFECT reduce production tmArrow(tmFormula) -> tmFormula
-- On SUBTYPE reduce production tmArrow(tmFormula) -> tmFormula
-- On SUBKIND reduce production tmArrow(tmFormula) -> tmFormula
-- On SPLICE reduce production tmArrow(tmFormula) -> tmFormula
-- On SEMICOLON_SEMICOLON reduce production tmArrow(tmFormula) -> tmFormula
-- On SEMICOLON reduce production tmArrow(tmFormula) -> tmFormula
-- On RPAREN reduce production tmArrow(tmFormula) -> tmFormula
-- On REIFIABLE reduce production tmArrow(tmFormula) -> tmFormula
-- On REFLECTABLE reduce production tmArrow(tmFormula) -> tmFormula
-- On RBRACK reduce production tmArrow(tmFormula) -> tmFormula
-- On RBRACE reduce production tmArrow(tmFormula) -> tmFormula
-- On PRIVATE reduce production tmArrow(tmFormula) -> tmFormula
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmFormula) -> tmFormula
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmFormula) -> tmFormula
-- On OPEN reduce production tmArrow(tmFormula) -> tmFormula
-- On OPAQUE reduce production tmArrow(tmFormula) -> tmFormula
-- On NOEXTRACT reduce production tmArrow(tmFormula) -> tmFormula
-- On NOEQUALITY reduce production tmArrow(tmFormula) -> tmFormula
-- On NEW_EFFECT reduce production tmArrow(tmFormula) -> tmFormula
-- On NEW reduce production tmArrow(tmFormula) -> tmFormula
-- On MODULE reduce production tmArrow(tmFormula) -> tmFormula
-- On LOGIC reduce production tmArrow(tmFormula) -> tmFormula
-- On LET reduce production tmArrow(tmFormula) -> tmFormula
-- On LENS_PAREN_RIGHT reduce production tmArrow(tmFormula) -> tmFormula
-- On LBRACK_AT reduce production tmArrow(tmFormula) -> tmFormula
-- On IRREDUCIBLE reduce production tmArrow(tmFormula) -> tmFormula
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmFormula) -> tmFormula
-- On INLINE reduce production tmArrow(tmFormula) -> tmFormula
-- On INCLUDE reduce production tmArrow(tmFormula) -> tmFormula
-- On IN reduce production tmArrow(tmFormula) -> tmFormula
-- On IMPLIES reduce production tmArrow(tmFormula) -> tmFormula
-- On IFF reduce production tmArrow(tmFormula) -> tmFormula
-- On FSDOC_STANDALONE reduce production tmArrow(tmFormula) -> tmFormula
-- On FSDOC reduce production tmArrow(tmFormula) -> tmFormula
-- On EXCEPTION reduce production tmArrow(tmFormula) -> tmFormula
-- On EOF reduce production tmArrow(tmFormula) -> tmFormula
-- On END reduce production tmArrow(tmFormula) -> tmFormula
-- On ELSE reduce production tmArrow(tmFormula) -> tmFormula
-- On EFFECT reduce production tmArrow(tmFormula) -> tmFormula
-- On DEFAULT reduce production tmArrow(tmFormula) -> tmFormula
-- On BY reduce production tmArrow(tmFormula) -> tmFormula
-- On BAR_RBRACK reduce production tmArrow(tmFormula) -> tmFormula
-- On BAR reduce production tmArrow(tmFormula) -> tmFormula
-- On ASSUME reduce production tmArrow(tmFormula) -> tmFormula
-- On AND reduce production tmArrow(tmFormula) -> tmFormula
-- On ABSTRACT reduce production tmArrow(tmFormula) -> tmFormula
-- On # reduce production tmArrow(tmFormula) -> tmFormula
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmArrow(tmFormula) -> tmFormula
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 338:
## Known stack suffix:
## tmFormula RARROW
## LR(1) items:
tmArrow(tmFormula) -> tmFormula RARROW . tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 367
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 339:
## Known stack suffix:
## tmEqWith(tmRefinement)
## LR(1) items:
tmEq -> tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On OPINFIX0b shift to state 352
-- On OPINFIX0a shift to state 356
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
-- On COLON_EQUALS shift to state 358
## Reductions:
-- On WITH reduce production tmEq -> tmEqWith(tmRefinement)
-- On VAL reduce production tmEq -> tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEq -> tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEq -> tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEq -> tmEqWith(tmRefinement)
-- On TYPE reduce production tmEq -> tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEq -> tmEqWith(tmRefinement)
-- On THEN reduce production tmEq -> tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEq -> tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEq -> tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEq -> tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEq -> tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEq -> tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEq -> tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEq -> tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEq -> tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEq -> tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEq -> tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEq -> tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEq -> tmEqWith(tmRefinement)
-- On RARROW reduce production tmEq -> tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEq -> tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEq -> tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEq -> tmEqWith(tmRefinement)
-- On OPEN reduce production tmEq -> tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEq -> tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEq -> tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEq -> tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEq -> tmEqWith(tmRefinement)
-- On NEW reduce production tmEq -> tmEqWith(tmRefinement)
-- On MODULE reduce production tmEq -> tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEq -> tmEqWith(tmRefinement)
-- On LET reduce production tmEq -> tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEq -> tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEq -> tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEq -> tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEq -> tmEqWith(tmRefinement)
-- On INLINE reduce production tmEq -> tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEq -> tmEqWith(tmRefinement)
-- On IN reduce production tmEq -> tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEq -> tmEqWith(tmRefinement)
-- On IFF reduce production tmEq -> tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEq -> tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEq -> tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEq -> tmEqWith(tmRefinement)
-- On EOF reduce production tmEq -> tmEqWith(tmRefinement)
-- On END reduce production tmEq -> tmEqWith(tmRefinement)
-- On ELSE reduce production tmEq -> tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEq -> tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEq -> tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEq -> tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEq -> tmEqWith(tmRefinement)
-- On COMMA reduce production tmEq -> tmEqWith(tmRefinement)
-- On BY reduce production tmEq -> tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEq -> tmEqWith(tmRefinement)
-- On BAR reduce production tmEq -> tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEq -> tmEqWith(tmRefinement)
-- On AND reduce production tmEq -> tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEq -> tmEqWith(tmRefinement)
-- On # reduce production tmEq -> tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEq -> tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 340:
## Known stack suffix:
## tmEqWith(tmRefinement) PIPE_RIGHT
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 341
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 341:
## Known stack suffix:
## tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On MINUS shift to state 346
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 342:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX2
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 343
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 343:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On MINUS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 344:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX1
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 345
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 345:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On MINUS shift to state 346
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 346:
## Known stack suffix:
## tmEqWith(tmRefinement) MINUS
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 347
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 347:
## Known stack suffix:
## tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On MINUS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 348:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0d
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 349
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 349:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On MINUS shift to state 346
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 350:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0c
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 351
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 351:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On MINUS shift to state 346
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 352:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0b
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 353
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 353:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 354:
## Known stack suffix:
## tmEqWith(tmRefinement) EQUALS
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 355
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 355:
## Known stack suffix:
## tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On MINUS shift to state 346
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 356:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0a
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 357
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 357:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On OPINFIX0b shift to state 352
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 358:
## Known stack suffix:
## tmEqWith(tmRefinement) COLON_EQUALS
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 359
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 359:
## Known stack suffix:
## tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On OPINFIX0b shift to state 352
-- On OPINFIX0a shift to state 356
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 360:
## Known stack suffix:
## tmEq
## LR(1) items:
separated_nonempty_list(COMMA,tmEq) -> tmEq . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
separated_nonempty_list(COMMA,tmEq) -> tmEq . COMMA separated_nonempty_list(COMMA,tmEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On COMMA shift to state 361
## Reductions:
-- On WITH reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On VAL reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On UNOPTEQUALITY reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On UNFOLDABLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On UNFOLD reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On TYPE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On TOTAL reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On THEN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On SUB_EFFECT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On SUBTYPE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On SUBKIND reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On SQUIGGLY_RARROW reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On SPLICE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On SEMICOLON_SEMICOLON reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On SEMICOLON reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On RPAREN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On REIFIABLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On REFLECTABLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On RBRACK reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On RBRACE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On RARROW reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On PRIVATE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On PRAGMA_SET_OPTIONS reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On PRAGMA_RESET_OPTIONS reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On OPEN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On OPAQUE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On NOEXTRACT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On NOEQUALITY reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On NEW_EFFECT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On NEW reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On MODULE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On LOGIC reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On LET reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On LENS_PAREN_RIGHT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On LBRACK_AT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On IRREDUCIBLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On INLINE_FOR_EXTRACTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On INLINE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On INCLUDE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On IN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On IMPLIES reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On IFF reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On FSDOC_STANDALONE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On FSDOC reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On EXCEPTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On EOF reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On END reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On ELSE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On EFFECT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On DISJUNCTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On DEFAULT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On CONJUNCTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On BY reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On BAR_RBRACK reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On BAR reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On ASSUME reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On AND reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On ABSTRACT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
-- On # reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production separated_nonempty_list(COMMA,tmEq) -> tmEq
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 361:
## Known stack suffix:
## tmEq COMMA
## LR(1) items:
separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA . separated_nonempty_list(COMMA,tmEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On separated_nonempty_list(COMMA,tmEq) shift to state 362
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 362:
## Known stack suffix:
## tmEq COMMA separated_nonempty_list(COMMA,tmEq)
## LR(1) items:
separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On VAL reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On UNOPTEQUALITY reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On UNFOLDABLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On UNFOLD reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On TYPE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On TOTAL reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On THEN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On SUB_EFFECT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On SUBTYPE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On SUBKIND reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On SQUIGGLY_RARROW reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On SPLICE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On SEMICOLON_SEMICOLON reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On SEMICOLON reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On RPAREN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On REIFIABLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On REFLECTABLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On RBRACK reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On RBRACE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On RARROW reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On PRIVATE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On PRAGMA_SET_OPTIONS reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On PRAGMA_RESET_OPTIONS reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On OPEN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On OPAQUE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On NOEXTRACT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On NOEQUALITY reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On NEW_EFFECT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On NEW reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On MODULE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On LOGIC reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On LET reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On LENS_PAREN_RIGHT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On LBRACK_AT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On IRREDUCIBLE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On INLINE_FOR_EXTRACTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On INLINE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On INCLUDE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On IN reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On IMPLIES reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On IFF reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On FSDOC_STANDALONE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On FSDOC reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On EXCEPTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On EOF reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On END reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On ELSE reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On EFFECT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On DISJUNCTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On DEFAULT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On CONJUNCTION reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On BY reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On BAR_RBRACK reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On BAR reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On ASSUME reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On AND reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On ABSTRACT reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
-- On # reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 363:
## Known stack suffix:
## tmConjunction
## LR(1) items:
tmConjunction -> tmConjunction . CONJUNCTION tmTuple [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmConjunction . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On CONJUNCTION shift to state 364
## Reductions:
-- On WITH reduce production tmFormula -> tmConjunction
-- On VAL reduce production tmFormula -> tmConjunction
-- On UNOPTEQUALITY reduce production tmFormula -> tmConjunction
-- On UNFOLDABLE reduce production tmFormula -> tmConjunction
-- On UNFOLD reduce production tmFormula -> tmConjunction
-- On TYPE reduce production tmFormula -> tmConjunction
-- On TOTAL reduce production tmFormula -> tmConjunction
-- On THEN reduce production tmFormula -> tmConjunction
-- On SUB_EFFECT reduce production tmFormula -> tmConjunction
-- On SUBTYPE reduce production tmFormula -> tmConjunction
-- On SUBKIND reduce production tmFormula -> tmConjunction
-- On SQUIGGLY_RARROW reduce production tmFormula -> tmConjunction
-- On SPLICE reduce production tmFormula -> tmConjunction
-- On SEMICOLON_SEMICOLON reduce production tmFormula -> tmConjunction
-- On SEMICOLON reduce production tmFormula -> tmConjunction
-- On RPAREN reduce production tmFormula -> tmConjunction
-- On REIFIABLE reduce production tmFormula -> tmConjunction
-- On REFLECTABLE reduce production tmFormula -> tmConjunction
-- On RBRACK reduce production tmFormula -> tmConjunction
-- On RBRACE reduce production tmFormula -> tmConjunction
-- On RARROW reduce production tmFormula -> tmConjunction
-- On PRIVATE reduce production tmFormula -> tmConjunction
-- On PRAGMA_SET_OPTIONS reduce production tmFormula -> tmConjunction
-- On PRAGMA_RESET_OPTIONS reduce production tmFormula -> tmConjunction
-- On OPEN reduce production tmFormula -> tmConjunction
-- On OPAQUE reduce production tmFormula -> tmConjunction
-- On NOEXTRACT reduce production tmFormula -> tmConjunction
-- On NOEQUALITY reduce production tmFormula -> tmConjunction
-- On NEW_EFFECT reduce production tmFormula -> tmConjunction
-- On NEW reduce production tmFormula -> tmConjunction
-- On MODULE reduce production tmFormula -> tmConjunction
-- On LOGIC reduce production tmFormula -> tmConjunction
-- On LET reduce production tmFormula -> tmConjunction
-- On LENS_PAREN_RIGHT reduce production tmFormula -> tmConjunction
-- On LBRACK_AT reduce production tmFormula -> tmConjunction
-- On IRREDUCIBLE reduce production tmFormula -> tmConjunction
-- On INLINE_FOR_EXTRACTION reduce production tmFormula -> tmConjunction
-- On INLINE reduce production tmFormula -> tmConjunction
-- On INCLUDE reduce production tmFormula -> tmConjunction
-- On IN reduce production tmFormula -> tmConjunction
-- On IMPLIES reduce production tmFormula -> tmConjunction
-- On IFF reduce production tmFormula -> tmConjunction
-- On FSDOC_STANDALONE reduce production tmFormula -> tmConjunction
-- On FSDOC reduce production tmFormula -> tmConjunction
-- On EXCEPTION reduce production tmFormula -> tmConjunction
-- On EOF reduce production tmFormula -> tmConjunction
-- On END reduce production tmFormula -> tmConjunction
-- On ELSE reduce production tmFormula -> tmConjunction
-- On EFFECT reduce production tmFormula -> tmConjunction
-- On DISJUNCTION reduce production tmFormula -> tmConjunction
-- On DEFAULT reduce production tmFormula -> tmConjunction
-- On BY reduce production tmFormula -> tmConjunction
-- On BAR_RBRACK reduce production tmFormula -> tmConjunction
-- On BAR reduce production tmFormula -> tmConjunction
-- On ASSUME reduce production tmFormula -> tmConjunction
-- On AND reduce production tmFormula -> tmConjunction
-- On ABSTRACT reduce production tmFormula -> tmConjunction
-- On # reduce production tmFormula -> tmConjunction
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmFormula -> tmConjunction
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 364:
## Known stack suffix:
## tmConjunction CONJUNCTION
## LR(1) items:
tmConjunction -> tmConjunction CONJUNCTION . tmTuple [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 365
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 365:
## Known stack suffix:
## tmConjunction CONJUNCTION tmTuple
## LR(1) items:
tmConjunction -> tmConjunction CONJUNCTION tmTuple . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On VAL reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On UNOPTEQUALITY reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On UNFOLDABLE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On UNFOLD reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On TYPE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On TOTAL reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On THEN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SUB_EFFECT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SUBTYPE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SUBKIND reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SQUIGGLY_RARROW reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SPLICE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SEMICOLON_SEMICOLON reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SEMICOLON reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On RPAREN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On REIFIABLE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On REFLECTABLE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On RBRACK reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On RBRACE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On RARROW reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On PRIVATE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On PRAGMA_SET_OPTIONS reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On PRAGMA_RESET_OPTIONS reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On OPEN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On OPAQUE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On NOEXTRACT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On NOEQUALITY reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On NEW_EFFECT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On NEW reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On MODULE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On LOGIC reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On LET reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On LENS_PAREN_RIGHT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On LBRACK_AT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On IRREDUCIBLE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On INLINE_FOR_EXTRACTION reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On INLINE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On INCLUDE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On IN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On IMPLIES reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On IFF reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On FSDOC_STANDALONE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On FSDOC reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On EXCEPTION reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On EOF reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On END reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On ELSE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On EFFECT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On DISJUNCTION reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On DEFAULT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On CONJUNCTION reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On BY reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On BAR_RBRACK reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On BAR reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On ASSUME reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On AND reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On ABSTRACT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On # reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmConjunction -> tmConjunction CONJUNCTION tmTuple
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 366:
## Known stack suffix:
## separated_nonempty_list(COMMA,tmEq)
## LR(1) items:
tmTuple -> separated_nonempty_list(COMMA,tmEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On VAL reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On UNOPTEQUALITY reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On UNFOLDABLE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On UNFOLD reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On TYPE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On TOTAL reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On THEN reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On SUB_EFFECT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On SUBTYPE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On SUBKIND reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On SQUIGGLY_RARROW reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On SPLICE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On SEMICOLON_SEMICOLON reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On SEMICOLON reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On RPAREN reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On REIFIABLE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On REFLECTABLE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On RBRACK reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On RBRACE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On RARROW reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On PRIVATE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On PRAGMA_SET_OPTIONS reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On PRAGMA_RESET_OPTIONS reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On OPEN reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On OPAQUE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On NOEXTRACT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On NOEQUALITY reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On NEW_EFFECT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On NEW reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On MODULE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On LOGIC reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On LET reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On LENS_PAREN_RIGHT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On LBRACK_AT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On IRREDUCIBLE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On INLINE_FOR_EXTRACTION reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On INLINE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On INCLUDE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On IN reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On IMPLIES reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On IFF reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On FSDOC_STANDALONE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On FSDOC reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On EXCEPTION reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On EOF reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On END reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On ELSE reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On EFFECT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On DISJUNCTION reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On DEFAULT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On CONJUNCTION reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On BY reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On BAR_RBRACK reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On BAR reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On ASSUME reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On AND reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On ABSTRACT reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
-- On # reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmTuple -> separated_nonempty_list(COMMA,tmEq)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 367:
## Known stack suffix:
## tmFormula RARROW tmArrow(tmFormula)
## LR(1) items:
tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On VAL reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On UNOPTEQUALITY reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On UNFOLDABLE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On UNFOLD reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On TYPE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On TOTAL reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On THEN reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On SUB_EFFECT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On SUBTYPE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On SUBKIND reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On SPLICE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On SEMICOLON_SEMICOLON reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On SEMICOLON reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On RPAREN reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On REIFIABLE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On REFLECTABLE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On RBRACK reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On RBRACE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On PRIVATE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On OPEN reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On OPAQUE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On NOEXTRACT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On NOEQUALITY reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On NEW_EFFECT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On NEW reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On MODULE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On LOGIC reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On LET reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On LENS_PAREN_RIGHT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On LBRACK_AT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On IRREDUCIBLE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On INLINE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On INCLUDE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On IN reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On IMPLIES reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On IFF reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On FSDOC_STANDALONE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On FSDOC reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On EXCEPTION reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On EOF reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On END reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On ELSE reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On EFFECT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On DEFAULT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On BY reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On BAR_RBRACK reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On BAR reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On ASSUME reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On AND reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On ABSTRACT reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
-- On # reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 368:
## Known stack suffix:
## aqual
## LR(1) items:
tmArrow(tmFormula) -> aqual . tmFormula RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 369
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 369:
## Known stack suffix:
## aqual tmFormula
## LR(1) items:
tmArrow(tmFormula) -> aqual tmFormula . RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ RARROW DISJUNCTION ]
## Transitions:
-- On RARROW shift to state 370
-- On DISJUNCTION shift to state 372
## Reductions:

State 370:
## Known stack suffix:
## aqual tmFormula RARROW
## LR(1) items:
tmArrow(tmFormula) -> aqual tmFormula RARROW . tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 371
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 371:
## Known stack suffix:
## aqual tmFormula RARROW tmArrow(tmFormula)
## LR(1) items:
tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On VAL reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On UNOPTEQUALITY reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On UNFOLDABLE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On UNFOLD reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On TYPE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On TOTAL reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On THEN reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On SUB_EFFECT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On SUBTYPE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On SUBKIND reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On SPLICE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On SEMICOLON_SEMICOLON reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On SEMICOLON reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On RPAREN reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On REIFIABLE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On REFLECTABLE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On RBRACK reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On RBRACE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On PRIVATE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On OPEN reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On OPAQUE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On NOEXTRACT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On NOEQUALITY reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On NEW_EFFECT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On NEW reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On MODULE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On LOGIC reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On LET reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On LENS_PAREN_RIGHT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On LBRACK_AT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On IRREDUCIBLE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On INLINE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On INCLUDE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On IN reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On IMPLIES reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On IFF reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On FSDOC_STANDALONE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On FSDOC reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On EXCEPTION reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On EOF reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On END reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On ELSE reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On EFFECT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On DEFAULT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On BY reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On BAR_RBRACK reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On BAR reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On ASSUME reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On AND reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On ABSTRACT reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
-- On # reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 372:
## Known stack suffix:
## tmFormula DISJUNCTION
## LR(1) items:
tmFormula -> tmFormula DISJUNCTION . tmConjunction [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 373
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 373:
## Known stack suffix:
## tmFormula DISJUNCTION tmConjunction
## LR(1) items:
tmConjunction -> tmConjunction . CONJUNCTION tmTuple [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula DISJUNCTION tmConjunction . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On CONJUNCTION shift to state 364
## Reductions:
-- On WITH reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On VAL reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On UNOPTEQUALITY reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On UNFOLDABLE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On UNFOLD reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On TYPE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On TOTAL reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On THEN reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On SUB_EFFECT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On SUBTYPE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On SUBKIND reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On SQUIGGLY_RARROW reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On SPLICE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On SEMICOLON_SEMICOLON reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On SEMICOLON reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On RPAREN reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On REIFIABLE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On REFLECTABLE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On RBRACK reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On RBRACE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On RARROW reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On PRIVATE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On PRAGMA_SET_OPTIONS reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On PRAGMA_RESET_OPTIONS reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On OPEN reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On OPAQUE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On NOEXTRACT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On NOEQUALITY reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On NEW_EFFECT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On NEW reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On MODULE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On LOGIC reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On LET reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On LENS_PAREN_RIGHT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On LBRACK_AT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On IRREDUCIBLE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On INLINE_FOR_EXTRACTION reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On INLINE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On INCLUDE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On IN reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On IMPLIES reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On IFF reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On FSDOC_STANDALONE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On FSDOC reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On EXCEPTION reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On EOF reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On END reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On ELSE reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On EFFECT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On DISJUNCTION reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On DEFAULT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On BY reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On BAR_RBRACK reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On BAR reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On ASSUME reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On AND reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On ABSTRACT reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
-- On # reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmFormula -> tmFormula DISJUNCTION tmConjunction
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 374:
## Known stack suffix:
## tmArrow(tmFormula)
## LR(1) items:
tmImplies -> tmArrow(tmFormula) . IMPLIES tmImplies [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmImplies -> tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IMPLIES shift to state 375
## Reductions:
-- On WITH reduce production tmImplies -> tmArrow(tmFormula)
-- On VAL reduce production tmImplies -> tmArrow(tmFormula)
-- On UNOPTEQUALITY reduce production tmImplies -> tmArrow(tmFormula)
-- On UNFOLDABLE reduce production tmImplies -> tmArrow(tmFormula)
-- On UNFOLD reduce production tmImplies -> tmArrow(tmFormula)
-- On TYPE reduce production tmImplies -> tmArrow(tmFormula)
-- On TOTAL reduce production tmImplies -> tmArrow(tmFormula)
-- On THEN reduce production tmImplies -> tmArrow(tmFormula)
-- On SUB_EFFECT reduce production tmImplies -> tmArrow(tmFormula)
-- On SUBTYPE reduce production tmImplies -> tmArrow(tmFormula)
-- On SUBKIND reduce production tmImplies -> tmArrow(tmFormula)
-- On SPLICE reduce production tmImplies -> tmArrow(tmFormula)
-- On SEMICOLON_SEMICOLON reduce production tmImplies -> tmArrow(tmFormula)
-- On SEMICOLON reduce production tmImplies -> tmArrow(tmFormula)
-- On RPAREN reduce production tmImplies -> tmArrow(tmFormula)
-- On REIFIABLE reduce production tmImplies -> tmArrow(tmFormula)
-- On REFLECTABLE reduce production tmImplies -> tmArrow(tmFormula)
-- On RBRACK reduce production tmImplies -> tmArrow(tmFormula)
-- On RBRACE reduce production tmImplies -> tmArrow(tmFormula)
-- On PRIVATE reduce production tmImplies -> tmArrow(tmFormula)
-- On PRAGMA_SET_OPTIONS reduce production tmImplies -> tmArrow(tmFormula)
-- On PRAGMA_RESET_OPTIONS reduce production tmImplies -> tmArrow(tmFormula)
-- On OPEN reduce production tmImplies -> tmArrow(tmFormula)
-- On OPAQUE reduce production tmImplies -> tmArrow(tmFormula)
-- On NOEXTRACT reduce production tmImplies -> tmArrow(tmFormula)
-- On NOEQUALITY reduce production tmImplies -> tmArrow(tmFormula)
-- On NEW_EFFECT reduce production tmImplies -> tmArrow(tmFormula)
-- On NEW reduce production tmImplies -> tmArrow(tmFormula)
-- On MODULE reduce production tmImplies -> tmArrow(tmFormula)
-- On LOGIC reduce production tmImplies -> tmArrow(tmFormula)
-- On LET reduce production tmImplies -> tmArrow(tmFormula)
-- On LENS_PAREN_RIGHT reduce production tmImplies -> tmArrow(tmFormula)
-- On LBRACK_AT reduce production tmImplies -> tmArrow(tmFormula)
-- On IRREDUCIBLE reduce production tmImplies -> tmArrow(tmFormula)
-- On INLINE_FOR_EXTRACTION reduce production tmImplies -> tmArrow(tmFormula)
-- On INLINE reduce production tmImplies -> tmArrow(tmFormula)
-- On INCLUDE reduce production tmImplies -> tmArrow(tmFormula)
-- On IN reduce production tmImplies -> tmArrow(tmFormula)
-- On IFF reduce production tmImplies -> tmArrow(tmFormula)
-- On FSDOC_STANDALONE reduce production tmImplies -> tmArrow(tmFormula)
-- On FSDOC reduce production tmImplies -> tmArrow(tmFormula)
-- On EXCEPTION reduce production tmImplies -> tmArrow(tmFormula)
-- On EOF reduce production tmImplies -> tmArrow(tmFormula)
-- On END reduce production tmImplies -> tmArrow(tmFormula)
-- On ELSE reduce production tmImplies -> tmArrow(tmFormula)
-- On EFFECT reduce production tmImplies -> tmArrow(tmFormula)
-- On DEFAULT reduce production tmImplies -> tmArrow(tmFormula)
-- On BY reduce production tmImplies -> tmArrow(tmFormula)
-- On BAR_RBRACK reduce production tmImplies -> tmArrow(tmFormula)
-- On BAR reduce production tmImplies -> tmArrow(tmFormula)
-- On ASSUME reduce production tmImplies -> tmArrow(tmFormula)
-- On AND reduce production tmImplies -> tmArrow(tmFormula)
-- On ABSTRACT reduce production tmImplies -> tmArrow(tmFormula)
-- On # reduce production tmImplies -> tmArrow(tmFormula)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmImplies -> tmArrow(tmFormula)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 375:
## Known stack suffix:
## tmArrow(tmFormula) IMPLIES
## LR(1) items:
tmImplies -> tmArrow(tmFormula) IMPLIES . tmImplies [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 376
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 376:
## Known stack suffix:
## tmArrow(tmFormula) IMPLIES tmImplies
## LR(1) items:
tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On VAL reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On UNOPTEQUALITY reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On UNFOLDABLE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On UNFOLD reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On TYPE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On TOTAL reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On THEN reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On SUB_EFFECT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On SUBTYPE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On SUBKIND reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On SPLICE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On SEMICOLON_SEMICOLON reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On SEMICOLON reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On RPAREN reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On REIFIABLE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On REFLECTABLE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On RBRACK reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On RBRACE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On PRIVATE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On PRAGMA_SET_OPTIONS reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On PRAGMA_RESET_OPTIONS reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On OPEN reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On OPAQUE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On NOEXTRACT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On NOEQUALITY reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On NEW_EFFECT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On NEW reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On MODULE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On LOGIC reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On LET reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On LENS_PAREN_RIGHT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On LBRACK_AT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On IRREDUCIBLE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On INLINE_FOR_EXTRACTION reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On INLINE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On INCLUDE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On IN reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On IFF reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On FSDOC_STANDALONE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On FSDOC reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On EXCEPTION reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On EOF reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On END reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On ELSE reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On EFFECT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On DEFAULT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On BY reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On BAR_RBRACK reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On BAR reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On ASSUME reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On AND reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On ABSTRACT reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
-- On # reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 377:
## Known stack suffix:
## tmIff
## LR(1) items:
simpleTerm -> tmIff . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production simpleTerm -> tmIff
-- On VAL reduce production simpleTerm -> tmIff
-- On UNOPTEQUALITY reduce production simpleTerm -> tmIff
-- On UNFOLDABLE reduce production simpleTerm -> tmIff
-- On UNFOLD reduce production simpleTerm -> tmIff
-- On TYPE reduce production simpleTerm -> tmIff
-- On TOTAL reduce production simpleTerm -> tmIff
-- On THEN reduce production simpleTerm -> tmIff
-- On SUB_EFFECT reduce production simpleTerm -> tmIff
-- On SUBKIND reduce production simpleTerm -> tmIff
-- On SPLICE reduce production simpleTerm -> tmIff
-- On SEMICOLON_SEMICOLON reduce production simpleTerm -> tmIff
-- On SEMICOLON reduce production simpleTerm -> tmIff
-- On RPAREN reduce production simpleTerm -> tmIff
-- On REIFIABLE reduce production simpleTerm -> tmIff
-- On REFLECTABLE reduce production simpleTerm -> tmIff
-- On RBRACK reduce production simpleTerm -> tmIff
-- On RBRACE reduce production simpleTerm -> tmIff
-- On PRIVATE reduce production simpleTerm -> tmIff
-- On PRAGMA_SET_OPTIONS reduce production simpleTerm -> tmIff
-- On PRAGMA_RESET_OPTIONS reduce production simpleTerm -> tmIff
-- On OPEN reduce production simpleTerm -> tmIff
-- On OPAQUE reduce production simpleTerm -> tmIff
-- On NOEXTRACT reduce production simpleTerm -> tmIff
-- On NOEQUALITY reduce production simpleTerm -> tmIff
-- On NEW_EFFECT reduce production simpleTerm -> tmIff
-- On NEW reduce production simpleTerm -> tmIff
-- On MODULE reduce production simpleTerm -> tmIff
-- On LOGIC reduce production simpleTerm -> tmIff
-- On LET reduce production simpleTerm -> tmIff
-- On LENS_PAREN_RIGHT reduce production simpleTerm -> tmIff
-- On LBRACK_AT reduce production simpleTerm -> tmIff
-- On IRREDUCIBLE reduce production simpleTerm -> tmIff
-- On INLINE_FOR_EXTRACTION reduce production simpleTerm -> tmIff
-- On INLINE reduce production simpleTerm -> tmIff
-- On INCLUDE reduce production simpleTerm -> tmIff
-- On IN reduce production simpleTerm -> tmIff
-- On FSDOC_STANDALONE reduce production simpleTerm -> tmIff
-- On FSDOC reduce production simpleTerm -> tmIff
-- On EXCEPTION reduce production simpleTerm -> tmIff
-- On EOF reduce production simpleTerm -> tmIff
-- On END reduce production simpleTerm -> tmIff
-- On ELSE reduce production simpleTerm -> tmIff
-- On EFFECT reduce production simpleTerm -> tmIff
-- On DEFAULT reduce production simpleTerm -> tmIff
-- On BAR_RBRACK reduce production simpleTerm -> tmIff
-- On BAR reduce production simpleTerm -> tmIff
-- On ASSUME reduce production simpleTerm -> tmIff
-- On AND reduce production simpleTerm -> tmIff
-- On ABSTRACT reduce production simpleTerm -> tmIff
-- On # reduce production simpleTerm -> tmIff
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production simpleTerm -> tmIff
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 378:
## Known stack suffix:
## simpleTerm
## LR(1) items:
typ -> simpleTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production typ -> simpleTerm
-- On VAL reduce production typ -> simpleTerm
-- On UNOPTEQUALITY reduce production typ -> simpleTerm
-- On UNFOLDABLE reduce production typ -> simpleTerm
-- On UNFOLD reduce production typ -> simpleTerm
-- On TYPE reduce production typ -> simpleTerm
-- On TOTAL reduce production typ -> simpleTerm
-- On THEN reduce production typ -> simpleTerm
-- On SUB_EFFECT reduce production typ -> simpleTerm
-- On SUBKIND reduce production typ -> simpleTerm
-- On SPLICE reduce production typ -> simpleTerm
-- On SEMICOLON_SEMICOLON reduce production typ -> simpleTerm
-- On SEMICOLON reduce production typ -> simpleTerm
-- On RPAREN reduce production typ -> simpleTerm
-- On REIFIABLE reduce production typ -> simpleTerm
-- On REFLECTABLE reduce production typ -> simpleTerm
-- On RBRACK reduce production typ -> simpleTerm
-- On RBRACE reduce production typ -> simpleTerm
-- On PRIVATE reduce production typ -> simpleTerm
-- On PRAGMA_SET_OPTIONS reduce production typ -> simpleTerm
-- On PRAGMA_RESET_OPTIONS reduce production typ -> simpleTerm
-- On OPEN reduce production typ -> simpleTerm
-- On OPAQUE reduce production typ -> simpleTerm
-- On NOEXTRACT reduce production typ -> simpleTerm
-- On NOEQUALITY reduce production typ -> simpleTerm
-- On NEW_EFFECT reduce production typ -> simpleTerm
-- On NEW reduce production typ -> simpleTerm
-- On MODULE reduce production typ -> simpleTerm
-- On LOGIC reduce production typ -> simpleTerm
-- On LET reduce production typ -> simpleTerm
-- On LENS_PAREN_RIGHT reduce production typ -> simpleTerm
-- On LBRACK_AT reduce production typ -> simpleTerm
-- On IRREDUCIBLE reduce production typ -> simpleTerm
-- On INLINE_FOR_EXTRACTION reduce production typ -> simpleTerm
-- On INLINE reduce production typ -> simpleTerm
-- On INCLUDE reduce production typ -> simpleTerm
-- On IN reduce production typ -> simpleTerm
-- On FSDOC_STANDALONE reduce production typ -> simpleTerm
-- On FSDOC reduce production typ -> simpleTerm
-- On EXCEPTION reduce production typ -> simpleTerm
-- On EOF reduce production typ -> simpleTerm
-- On END reduce production typ -> simpleTerm
-- On ELSE reduce production typ -> simpleTerm
-- On EFFECT reduce production typ -> simpleTerm
-- On DEFAULT reduce production typ -> simpleTerm
-- On BAR_RBRACK reduce production typ -> simpleTerm
-- On BAR reduce production typ -> simpleTerm
-- On ASSUME reduce production typ -> simpleTerm
-- On AND reduce production typ -> simpleTerm
-- On ABSTRACT reduce production typ -> simpleTerm
-- On # reduce production typ -> simpleTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production typ -> simpleTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 379:
## Known stack suffix:
## ATTRIBUTES
## LR(1) items:
noSeqTerm -> ATTRIBUTES . nonempty_list(atomicTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On nonempty_list(atomicTerm) shift to state 380
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 381
## Reductions:

State 380:
## Known stack suffix:
## ATTRIBUTES nonempty_list(atomicTerm)
## LR(1) items:
noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On VAL reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On UNOPTEQUALITY reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On UNFOLDABLE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On UNFOLD reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On TYPE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On TOTAL reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On THEN reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On SUB_EFFECT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On SUBKIND reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On SPLICE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On SEMICOLON reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On RPAREN reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On REIFIABLE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On REFLECTABLE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On RBRACK reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On RBRACE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On PRIVATE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On OPEN reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On OPAQUE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On NOEXTRACT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On NOEQUALITY reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On NEW_EFFECT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On NEW reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On MODULE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On LOGIC reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On LET reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On LBRACK_AT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On IRREDUCIBLE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On INLINE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On INCLUDE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On IN reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On FSDOC_STANDALONE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On FSDOC reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On EXCEPTION reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On EOF reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On END reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On ELSE reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On EFFECT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On DEFAULT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On BAR_RBRACK reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On BAR reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On ASSUME reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On AND reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On ABSTRACT reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
-- On # reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 381:
## Known stack suffix:
## atomicTerm
## LR(1) items:
nonempty_list(atomicTerm) -> atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(atomicTerm) -> atomicTerm . nonempty_list(atomicTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On nonempty_list(atomicTerm) shift to state 382
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 381
## Reductions:
-- On WITH reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On VAL reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On UNOPTEQUALITY reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On UNFOLDABLE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On UNFOLD reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On TYPE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On TOTAL reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On THEN reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On SUB_EFFECT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On SUBKIND reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On SPLICE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On SEMICOLON reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On RPAREN reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On REIFIABLE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On REFLECTABLE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On RBRACK reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On RBRACE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On PRIVATE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On OPEN reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On OPAQUE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On NOEXTRACT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On NOEQUALITY reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On NEW_EFFECT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On NEW reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On MODULE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On LOGIC reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On LET reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On LENS_PAREN_RIGHT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On LBRACK_AT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On IRREDUCIBLE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On INLINE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On INCLUDE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On IN reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On FSDOC_STANDALONE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On FSDOC reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On EXCEPTION reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On EOF reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On END reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On ELSE reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On EFFECT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On DEFAULT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On BAR_RBRACK reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On BAR reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On ASSUME reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On AND reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On ABSTRACT reduce production nonempty_list(atomicTerm) -> atomicTerm
-- On # reduce production nonempty_list(atomicTerm) -> atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT FSDOC_STANDALONE FSDOC FALSE EXCEPTION EOF END ELSE EFFECT DEFAULT CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(atomicTerm) -> atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 382:
## Known stack suffix:
## atomicTerm nonempty_list(atomicTerm)
## LR(1) items:
nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On VAL reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On UNOPTEQUALITY reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On UNFOLDABLE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On UNFOLD reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On TYPE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On TOTAL reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On THEN reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On SUB_EFFECT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On SUBKIND reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On SPLICE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On SEMICOLON reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On RPAREN reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On REIFIABLE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On REFLECTABLE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On RBRACK reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On RBRACE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On PRIVATE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On OPEN reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On OPAQUE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On NOEXTRACT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On NOEQUALITY reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On NEW_EFFECT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On NEW reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On MODULE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On LOGIC reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On LET reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On LENS_PAREN_RIGHT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On LBRACK_AT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On IRREDUCIBLE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On INLINE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On INCLUDE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On IN reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On FSDOC_STANDALONE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On FSDOC reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On EXCEPTION reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On EOF reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On END reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On ELSE reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On EFFECT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On DEFAULT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On BAR_RBRACK reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On BAR reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On ASSUME reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On AND reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On ABSTRACT reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
-- On # reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 383:
## Known stack suffix:
## ASSUME
## LR(1) items:
noSeqTerm -> ASSUME . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## ASSUME atomicTerm
## LR(1) items:
noSeqTerm -> ASSUME atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> ASSUME atomicTerm
-- On VAL reduce production noSeqTerm -> ASSUME atomicTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> ASSUME atomicTerm
-- On UNFOLDABLE reduce production noSeqTerm -> ASSUME atomicTerm
-- On UNFOLD reduce production noSeqTerm -> ASSUME atomicTerm
-- On TYPE reduce production noSeqTerm -> ASSUME atomicTerm
-- On TOTAL reduce production noSeqTerm -> ASSUME atomicTerm
-- On THEN reduce production noSeqTerm -> ASSUME atomicTerm
-- On SUB_EFFECT reduce production noSeqTerm -> ASSUME atomicTerm
-- On SUBKIND reduce production noSeqTerm -> ASSUME atomicTerm
-- On SPLICE reduce production noSeqTerm -> ASSUME atomicTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> ASSUME atomicTerm
-- On SEMICOLON reduce production noSeqTerm -> ASSUME atomicTerm
-- On RPAREN reduce production noSeqTerm -> ASSUME atomicTerm
-- On REIFIABLE reduce production noSeqTerm -> ASSUME atomicTerm
-- On REFLECTABLE reduce production noSeqTerm -> ASSUME atomicTerm
-- On RBRACK reduce production noSeqTerm -> ASSUME atomicTerm
-- On RBRACE reduce production noSeqTerm -> ASSUME atomicTerm
-- On PRIVATE reduce production noSeqTerm -> ASSUME atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> ASSUME atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> ASSUME atomicTerm
-- On OPEN reduce production noSeqTerm -> ASSUME atomicTerm
-- On OPAQUE reduce production noSeqTerm -> ASSUME atomicTerm
-- On NOEXTRACT reduce production noSeqTerm -> ASSUME atomicTerm
-- On NOEQUALITY reduce production noSeqTerm -> ASSUME atomicTerm
-- On NEW_EFFECT reduce production noSeqTerm -> ASSUME atomicTerm
-- On NEW reduce production noSeqTerm -> ASSUME atomicTerm
-- On MODULE reduce production noSeqTerm -> ASSUME atomicTerm
-- On LOGIC reduce production noSeqTerm -> ASSUME atomicTerm
-- On LET reduce production noSeqTerm -> ASSUME atomicTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> ASSUME atomicTerm
-- On LBRACK_AT reduce production noSeqTerm -> ASSUME atomicTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> ASSUME atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> ASSUME atomicTerm
-- On INLINE reduce production noSeqTerm -> ASSUME atomicTerm
-- On INCLUDE reduce production noSeqTerm -> ASSUME atomicTerm
-- On IN reduce production noSeqTerm -> ASSUME atomicTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> ASSUME atomicTerm
-- On FSDOC reduce production noSeqTerm -> ASSUME atomicTerm
-- On EXCEPTION reduce production noSeqTerm -> ASSUME atomicTerm
-- On EOF reduce production noSeqTerm -> ASSUME atomicTerm
-- On END reduce production noSeqTerm -> ASSUME atomicTerm
-- On ELSE reduce production noSeqTerm -> ASSUME atomicTerm
-- On EFFECT reduce production noSeqTerm -> ASSUME atomicTerm
-- On DEFAULT reduce production noSeqTerm -> ASSUME atomicTerm
-- On BAR_RBRACK reduce production noSeqTerm -> ASSUME atomicTerm
-- On BAR reduce production noSeqTerm -> ASSUME atomicTerm
-- On ASSUME reduce production noSeqTerm -> ASSUME atomicTerm
-- On AND reduce production noSeqTerm -> ASSUME atomicTerm
-- On ABSTRACT reduce production noSeqTerm -> ASSUME atomicTerm
-- On # reduce production noSeqTerm -> ASSUME atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> ASSUME atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 385:
## Known stack suffix:
## ASSERT
## LR(1) items:
noSeqTerm -> ASSERT . atomicTerm option(__anonymous_8) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## ASSERT atomicTerm
## LR(1) items:
noSeqTerm -> ASSERT atomicTerm . option(__anonymous_8) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BY shift to state 387
-- On option(__anonymous_8) shift to state 389
## Reductions:
-- On WITH reduce production option(__anonymous_8) ->
-- On VAL reduce production option(__anonymous_8) ->
-- On UNOPTEQUALITY reduce production option(__anonymous_8) ->
-- On UNFOLDABLE reduce production option(__anonymous_8) ->
-- On UNFOLD reduce production option(__anonymous_8) ->
-- On TYPE reduce production option(__anonymous_8) ->
-- On TOTAL reduce production option(__anonymous_8) ->
-- On THEN reduce production option(__anonymous_8) ->
-- On SUB_EFFECT reduce production option(__anonymous_8) ->
-- On SUBKIND reduce production option(__anonymous_8) ->
-- On SPLICE reduce production option(__anonymous_8) ->
-- On SEMICOLON_SEMICOLON reduce production option(__anonymous_8) ->
-- On SEMICOLON reduce production option(__anonymous_8) ->
-- On RPAREN reduce production option(__anonymous_8) ->
-- On REIFIABLE reduce production option(__anonymous_8) ->
-- On REFLECTABLE reduce production option(__anonymous_8) ->
-- On RBRACK reduce production option(__anonymous_8) ->
-- On RBRACE reduce production option(__anonymous_8) ->
-- On PRIVATE reduce production option(__anonymous_8) ->
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_8) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_8) ->
-- On OPEN reduce production option(__anonymous_8) ->
-- On OPAQUE reduce production option(__anonymous_8) ->
-- On NOEXTRACT reduce production option(__anonymous_8) ->
-- On NOEQUALITY reduce production option(__anonymous_8) ->
-- On NEW_EFFECT reduce production option(__anonymous_8) ->
-- On NEW reduce production option(__anonymous_8) ->
-- On MODULE reduce production option(__anonymous_8) ->
-- On LOGIC reduce production option(__anonymous_8) ->
-- On LET reduce production option(__anonymous_8) ->
-- On LENS_PAREN_RIGHT reduce production option(__anonymous_8) ->
-- On LBRACK_AT reduce production option(__anonymous_8) ->
-- On IRREDUCIBLE reduce production option(__anonymous_8) ->
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_8) ->
-- On INLINE reduce production option(__anonymous_8) ->
-- On INCLUDE reduce production option(__anonymous_8) ->
-- On IN reduce production option(__anonymous_8) ->
-- On FSDOC_STANDALONE reduce production option(__anonymous_8) ->
-- On FSDOC reduce production option(__anonymous_8) ->
-- On EXCEPTION reduce production option(__anonymous_8) ->
-- On EOF reduce production option(__anonymous_8) ->
-- On END reduce production option(__anonymous_8) ->
-- On ELSE reduce production option(__anonymous_8) ->
-- On EFFECT reduce production option(__anonymous_8) ->
-- On DEFAULT reduce production option(__anonymous_8) ->
-- On BAR_RBRACK reduce production option(__anonymous_8) ->
-- On BAR reduce production option(__anonymous_8) ->
-- On ASSUME reduce production option(__anonymous_8) ->
-- On AND reduce production option(__anonymous_8) ->
-- On ABSTRACT reduce production option(__anonymous_8) ->
-- On # reduce production option(__anonymous_8) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production option(__anonymous_8) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 387:
## Known stack suffix:
## BY
## LR(1) items:
option(__anonymous_8) -> BY . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 388
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 388:
## Known stack suffix:
## BY typ
## LR(1) items:
option(__anonymous_8) -> BY typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production option(__anonymous_8) -> BY typ
-- On VAL reduce production option(__anonymous_8) -> BY typ
-- On UNOPTEQUALITY reduce production option(__anonymous_8) -> BY typ
-- On UNFOLDABLE reduce production option(__anonymous_8) -> BY typ
-- On UNFOLD reduce production option(__anonymous_8) -> BY typ
-- On TYPE reduce production option(__anonymous_8) -> BY typ
-- On TOTAL reduce production option(__anonymous_8) -> BY typ
-- On THEN reduce production option(__anonymous_8) -> BY typ
-- On SUB_EFFECT reduce production option(__anonymous_8) -> BY typ
-- On SUBKIND reduce production option(__anonymous_8) -> BY typ
-- On SPLICE reduce production option(__anonymous_8) -> BY typ
-- On SEMICOLON_SEMICOLON reduce production option(__anonymous_8) -> BY typ
-- On SEMICOLON reduce production option(__anonymous_8) -> BY typ
-- On RPAREN reduce production option(__anonymous_8) -> BY typ
-- On REIFIABLE reduce production option(__anonymous_8) -> BY typ
-- On REFLECTABLE reduce production option(__anonymous_8) -> BY typ
-- On RBRACK reduce production option(__anonymous_8) -> BY typ
-- On RBRACE reduce production option(__anonymous_8) -> BY typ
-- On PRIVATE reduce production option(__anonymous_8) -> BY typ
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_8) -> BY typ
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_8) -> BY typ
-- On OPEN reduce production option(__anonymous_8) -> BY typ
-- On OPAQUE reduce production option(__anonymous_8) -> BY typ
-- On NOEXTRACT reduce production option(__anonymous_8) -> BY typ
-- On NOEQUALITY reduce production option(__anonymous_8) -> BY typ
-- On NEW_EFFECT reduce production option(__anonymous_8) -> BY typ
-- On NEW reduce production option(__anonymous_8) -> BY typ
-- On MODULE reduce production option(__anonymous_8) -> BY typ
-- On LOGIC reduce production option(__anonymous_8) -> BY typ
-- On LET reduce production option(__anonymous_8) -> BY typ
-- On LENS_PAREN_RIGHT reduce production option(__anonymous_8) -> BY typ
-- On LBRACK_AT reduce production option(__anonymous_8) -> BY typ
-- On IRREDUCIBLE reduce production option(__anonymous_8) -> BY typ
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_8) -> BY typ
-- On INLINE reduce production option(__anonymous_8) -> BY typ
-- On INCLUDE reduce production option(__anonymous_8) -> BY typ
-- On IN reduce production option(__anonymous_8) -> BY typ
-- On FSDOC_STANDALONE reduce production option(__anonymous_8) -> BY typ
-- On FSDOC reduce production option(__anonymous_8) -> BY typ
-- On EXCEPTION reduce production option(__anonymous_8) -> BY typ
-- On EOF reduce production option(__anonymous_8) -> BY typ
-- On END reduce production option(__anonymous_8) -> BY typ
-- On ELSE reduce production option(__anonymous_8) -> BY typ
-- On EFFECT reduce production option(__anonymous_8) -> BY typ
-- On DEFAULT reduce production option(__anonymous_8) -> BY typ
-- On BAR_RBRACK reduce production option(__anonymous_8) -> BY typ
-- On BAR reduce production option(__anonymous_8) -> BY typ
-- On ASSUME reduce production option(__anonymous_8) -> BY typ
-- On AND reduce production option(__anonymous_8) -> BY typ
-- On ABSTRACT reduce production option(__anonymous_8) -> BY typ
-- On # reduce production option(__anonymous_8) -> BY typ
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production option(__anonymous_8) -> BY typ
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 389:
## Known stack suffix:
## ASSERT atomicTerm option(__anonymous_8)
## LR(1) items:
noSeqTerm -> ASSERT atomicTerm option(__anonymous_8) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On VAL reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On UNOPTEQUALITY reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On UNFOLDABLE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On UNFOLD reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On TYPE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On TOTAL reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On THEN reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On SUB_EFFECT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On SUBKIND reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On SPLICE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On SEMICOLON reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On RPAREN reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On REIFIABLE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On REFLECTABLE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On RBRACK reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On RBRACE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On PRIVATE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On OPEN reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On OPAQUE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On NOEXTRACT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On NOEQUALITY reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On NEW_EFFECT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On NEW reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On MODULE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On LOGIC reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On LET reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On LBRACK_AT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On IRREDUCIBLE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On INLINE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On INCLUDE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On IN reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On FSDOC_STANDALONE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On FSDOC reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On EXCEPTION reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On EOF reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On END reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On ELSE reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On EFFECT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On DEFAULT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On BAR_RBRACK reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On BAR reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On ASSUME reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On AND reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On ABSTRACT reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
-- On # reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 390:
## Known stack suffix:
## typ
## LR(1) items:
noSeqTerm -> typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> typ
-- On VAL reduce production noSeqTerm -> typ
-- On UNOPTEQUALITY reduce production noSeqTerm -> typ
-- On UNFOLDABLE reduce production noSeqTerm -> typ
-- On UNFOLD reduce production noSeqTerm -> typ
-- On TYPE reduce production noSeqTerm -> typ
-- On TOTAL reduce production noSeqTerm -> typ
-- On THEN reduce production noSeqTerm -> typ
-- On SUB_EFFECT reduce production noSeqTerm -> typ
-- On SUBKIND reduce production noSeqTerm -> typ
-- On SPLICE reduce production noSeqTerm -> typ
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> typ
-- On SEMICOLON reduce production noSeqTerm -> typ
-- On RPAREN reduce production noSeqTerm -> typ
-- On REIFIABLE reduce production noSeqTerm -> typ
-- On REFLECTABLE reduce production noSeqTerm -> typ
-- On RBRACK reduce production noSeqTerm -> typ
-- On RBRACE reduce production noSeqTerm -> typ
-- On PRIVATE reduce production noSeqTerm -> typ
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> typ
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> typ
-- On OPEN reduce production noSeqTerm -> typ
-- On OPAQUE reduce production noSeqTerm -> typ
-- On NOEXTRACT reduce production noSeqTerm -> typ
-- On NOEQUALITY reduce production noSeqTerm -> typ
-- On NEW_EFFECT reduce production noSeqTerm -> typ
-- On NEW reduce production noSeqTerm -> typ
-- On MODULE reduce production noSeqTerm -> typ
-- On LOGIC reduce production noSeqTerm -> typ
-- On LET reduce production noSeqTerm -> typ
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> typ
-- On LBRACK_AT reduce production noSeqTerm -> typ
-- On IRREDUCIBLE reduce production noSeqTerm -> typ
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> typ
-- On INLINE reduce production noSeqTerm -> typ
-- On INCLUDE reduce production noSeqTerm -> typ
-- On IN reduce production noSeqTerm -> typ
-- On FSDOC_STANDALONE reduce production noSeqTerm -> typ
-- On FSDOC reduce production noSeqTerm -> typ
-- On EXCEPTION reduce production noSeqTerm -> typ
-- On EOF reduce production noSeqTerm -> typ
-- On END reduce production noSeqTerm -> typ
-- On ELSE reduce production noSeqTerm -> typ
-- On EFFECT reduce production noSeqTerm -> typ
-- On DEFAULT reduce production noSeqTerm -> typ
-- On BAR_RBRACK reduce production noSeqTerm -> typ
-- On BAR reduce production noSeqTerm -> typ
-- On ASSUME reduce production noSeqTerm -> typ
-- On AND reduce production noSeqTerm -> typ
-- On ABSTRACT reduce production noSeqTerm -> typ
-- On # reduce production noSeqTerm -> typ
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> typ
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 391:
## Known stack suffix:
## tmIff
## LR(1) items:
noSeqTerm -> tmIff . SUBTYPE tmIff option(__anonymous_6) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
simpleTerm -> tmIff . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SUBTYPE shift to state 392
## Reductions:
-- On WITH reduce production simpleTerm -> tmIff
-- On VAL reduce production simpleTerm -> tmIff
-- On UNOPTEQUALITY reduce production simpleTerm -> tmIff
-- On UNFOLDABLE reduce production simpleTerm -> tmIff
-- On UNFOLD reduce production simpleTerm -> tmIff
-- On TYPE reduce production simpleTerm -> tmIff
-- On TOTAL reduce production simpleTerm -> tmIff
-- On THEN reduce production simpleTerm -> tmIff
-- On SUB_EFFECT reduce production simpleTerm -> tmIff
-- On SUBKIND reduce production simpleTerm -> tmIff
-- On SPLICE reduce production simpleTerm -> tmIff
-- On SEMICOLON_SEMICOLON reduce production simpleTerm -> tmIff
-- On SEMICOLON reduce production simpleTerm -> tmIff
-- On RPAREN reduce production simpleTerm -> tmIff
-- On REIFIABLE reduce production simpleTerm -> tmIff
-- On REFLECTABLE reduce production simpleTerm -> tmIff
-- On RBRACK reduce production simpleTerm -> tmIff
-- On RBRACE reduce production simpleTerm -> tmIff
-- On PRIVATE reduce production simpleTerm -> tmIff
-- On PRAGMA_SET_OPTIONS reduce production simpleTerm -> tmIff
-- On PRAGMA_RESET_OPTIONS reduce production simpleTerm -> tmIff
-- On OPEN reduce production simpleTerm -> tmIff
-- On OPAQUE reduce production simpleTerm -> tmIff
-- On NOEXTRACT reduce production simpleTerm -> tmIff
-- On NOEQUALITY reduce production simpleTerm -> tmIff
-- On NEW_EFFECT reduce production simpleTerm -> tmIff
-- On NEW reduce production simpleTerm -> tmIff
-- On MODULE reduce production simpleTerm -> tmIff
-- On LOGIC reduce production simpleTerm -> tmIff
-- On LET reduce production simpleTerm -> tmIff
-- On LENS_PAREN_RIGHT reduce production simpleTerm -> tmIff
-- On LBRACK_AT reduce production simpleTerm -> tmIff
-- On IRREDUCIBLE reduce production simpleTerm -> tmIff
-- On INLINE_FOR_EXTRACTION reduce production simpleTerm -> tmIff
-- On INLINE reduce production simpleTerm -> tmIff
-- On INCLUDE reduce production simpleTerm -> tmIff
-- On IN reduce production simpleTerm -> tmIff
-- On FSDOC_STANDALONE reduce production simpleTerm -> tmIff
-- On FSDOC reduce production simpleTerm -> tmIff
-- On EXCEPTION reduce production simpleTerm -> tmIff
-- On EOF reduce production simpleTerm -> tmIff
-- On END reduce production simpleTerm -> tmIff
-- On ELSE reduce production simpleTerm -> tmIff
-- On EFFECT reduce production simpleTerm -> tmIff
-- On DEFAULT reduce production simpleTerm -> tmIff
-- On BAR_RBRACK reduce production simpleTerm -> tmIff
-- On BAR reduce production simpleTerm -> tmIff
-- On ASSUME reduce production simpleTerm -> tmIff
-- On AND reduce production simpleTerm -> tmIff
-- On ABSTRACT reduce production simpleTerm -> tmIff
-- On # reduce production simpleTerm -> tmIff
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production simpleTerm -> tmIff
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 392:
## Known stack suffix:
## tmIff SUBTYPE
## LR(1) items:
noSeqTerm -> tmIff SUBTYPE . tmIff option(__anonymous_6) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 393
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 393:
## Known stack suffix:
## tmIff SUBTYPE tmIff
## LR(1) items:
noSeqTerm -> tmIff SUBTYPE tmIff . option(__anonymous_6) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BY shift to state 394
-- On option(__anonymous_6) shift to state 396
## Reductions:
-- On WITH reduce production option(__anonymous_6) ->
-- On VAL reduce production option(__anonymous_6) ->
-- On UNOPTEQUALITY reduce production option(__anonymous_6) ->
-- On UNFOLDABLE reduce production option(__anonymous_6) ->
-- On UNFOLD reduce production option(__anonymous_6) ->
-- On TYPE reduce production option(__anonymous_6) ->
-- On TOTAL reduce production option(__anonymous_6) ->
-- On THEN reduce production option(__anonymous_6) ->
-- On SUB_EFFECT reduce production option(__anonymous_6) ->
-- On SUBKIND reduce production option(__anonymous_6) ->
-- On SPLICE reduce production option(__anonymous_6) ->
-- On SEMICOLON_SEMICOLON reduce production option(__anonymous_6) ->
-- On SEMICOLON reduce production option(__anonymous_6) ->
-- On RPAREN reduce production option(__anonymous_6) ->
-- On REIFIABLE reduce production option(__anonymous_6) ->
-- On REFLECTABLE reduce production option(__anonymous_6) ->
-- On RBRACK reduce production option(__anonymous_6) ->
-- On RBRACE reduce production option(__anonymous_6) ->
-- On PRIVATE reduce production option(__anonymous_6) ->
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_6) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_6) ->
-- On OPEN reduce production option(__anonymous_6) ->
-- On OPAQUE reduce production option(__anonymous_6) ->
-- On NOEXTRACT reduce production option(__anonymous_6) ->
-- On NOEQUALITY reduce production option(__anonymous_6) ->
-- On NEW_EFFECT reduce production option(__anonymous_6) ->
-- On NEW reduce production option(__anonymous_6) ->
-- On MODULE reduce production option(__anonymous_6) ->
-- On LOGIC reduce production option(__anonymous_6) ->
-- On LET reduce production option(__anonymous_6) ->
-- On LENS_PAREN_RIGHT reduce production option(__anonymous_6) ->
-- On LBRACK_AT reduce production option(__anonymous_6) ->
-- On IRREDUCIBLE reduce production option(__anonymous_6) ->
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_6) ->
-- On INLINE reduce production option(__anonymous_6) ->
-- On INCLUDE reduce production option(__anonymous_6) ->
-- On IN reduce production option(__anonymous_6) ->
-- On FSDOC_STANDALONE reduce production option(__anonymous_6) ->
-- On FSDOC reduce production option(__anonymous_6) ->
-- On EXCEPTION reduce production option(__anonymous_6) ->
-- On EOF reduce production option(__anonymous_6) ->
-- On END reduce production option(__anonymous_6) ->
-- On ELSE reduce production option(__anonymous_6) ->
-- On EFFECT reduce production option(__anonymous_6) ->
-- On DEFAULT reduce production option(__anonymous_6) ->
-- On BAR_RBRACK reduce production option(__anonymous_6) ->
-- On BAR reduce production option(__anonymous_6) ->
-- On ASSUME reduce production option(__anonymous_6) ->
-- On AND reduce production option(__anonymous_6) ->
-- On ABSTRACT reduce production option(__anonymous_6) ->
-- On # reduce production option(__anonymous_6) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production option(__anonymous_6) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 394:
## Known stack suffix:
## BY
## LR(1) items:
option(__anonymous_6) -> BY . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 395
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 395:
## Known stack suffix:
## BY typ
## LR(1) items:
option(__anonymous_6) -> BY typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production option(__anonymous_6) -> BY typ
-- On VAL reduce production option(__anonymous_6) -> BY typ
-- On UNOPTEQUALITY reduce production option(__anonymous_6) -> BY typ
-- On UNFOLDABLE reduce production option(__anonymous_6) -> BY typ
-- On UNFOLD reduce production option(__anonymous_6) -> BY typ
-- On TYPE reduce production option(__anonymous_6) -> BY typ
-- On TOTAL reduce production option(__anonymous_6) -> BY typ
-- On THEN reduce production option(__anonymous_6) -> BY typ
-- On SUB_EFFECT reduce production option(__anonymous_6) -> BY typ
-- On SUBKIND reduce production option(__anonymous_6) -> BY typ
-- On SPLICE reduce production option(__anonymous_6) -> BY typ
-- On SEMICOLON_SEMICOLON reduce production option(__anonymous_6) -> BY typ
-- On SEMICOLON reduce production option(__anonymous_6) -> BY typ
-- On RPAREN reduce production option(__anonymous_6) -> BY typ
-- On REIFIABLE reduce production option(__anonymous_6) -> BY typ
-- On REFLECTABLE reduce production option(__anonymous_6) -> BY typ
-- On RBRACK reduce production option(__anonymous_6) -> BY typ
-- On RBRACE reduce production option(__anonymous_6) -> BY typ
-- On PRIVATE reduce production option(__anonymous_6) -> BY typ
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_6) -> BY typ
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_6) -> BY typ
-- On OPEN reduce production option(__anonymous_6) -> BY typ
-- On OPAQUE reduce production option(__anonymous_6) -> BY typ
-- On NOEXTRACT reduce production option(__anonymous_6) -> BY typ
-- On NOEQUALITY reduce production option(__anonymous_6) -> BY typ
-- On NEW_EFFECT reduce production option(__anonymous_6) -> BY typ
-- On NEW reduce production option(__anonymous_6) -> BY typ
-- On MODULE reduce production option(__anonymous_6) -> BY typ
-- On LOGIC reduce production option(__anonymous_6) -> BY typ
-- On LET reduce production option(__anonymous_6) -> BY typ
-- On LENS_PAREN_RIGHT reduce production option(__anonymous_6) -> BY typ
-- On LBRACK_AT reduce production option(__anonymous_6) -> BY typ
-- On IRREDUCIBLE reduce production option(__anonymous_6) -> BY typ
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_6) -> BY typ
-- On INLINE reduce production option(__anonymous_6) -> BY typ
-- On INCLUDE reduce production option(__anonymous_6) -> BY typ
-- On IN reduce production option(__anonymous_6) -> BY typ
-- On FSDOC_STANDALONE reduce production option(__anonymous_6) -> BY typ
-- On FSDOC reduce production option(__anonymous_6) -> BY typ
-- On EXCEPTION reduce production option(__anonymous_6) -> BY typ
-- On EOF reduce production option(__anonymous_6) -> BY typ
-- On END reduce production option(__anonymous_6) -> BY typ
-- On ELSE reduce production option(__anonymous_6) -> BY typ
-- On EFFECT reduce production option(__anonymous_6) -> BY typ
-- On DEFAULT reduce production option(__anonymous_6) -> BY typ
-- On BAR_RBRACK reduce production option(__anonymous_6) -> BY typ
-- On BAR reduce production option(__anonymous_6) -> BY typ
-- On ASSUME reduce production option(__anonymous_6) -> BY typ
-- On AND reduce production option(__anonymous_6) -> BY typ
-- On ABSTRACT reduce production option(__anonymous_6) -> BY typ
-- On # reduce production option(__anonymous_6) -> BY typ
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production option(__anonymous_6) -> BY typ
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 396:
## Known stack suffix:
## tmIff SUBTYPE tmIff option(__anonymous_6)
## LR(1) items:
noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On VAL reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On UNOPTEQUALITY reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On UNFOLDABLE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On UNFOLD reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On TYPE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On TOTAL reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On THEN reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On SUB_EFFECT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On SUBKIND reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On SPLICE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On SEMICOLON reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On RPAREN reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On REIFIABLE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On REFLECTABLE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On RBRACK reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On RBRACE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On PRIVATE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On OPEN reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On OPAQUE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On NOEXTRACT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On NOEQUALITY reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On NEW_EFFECT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On NEW reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On MODULE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On LOGIC reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On LET reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On LBRACK_AT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On IRREDUCIBLE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On INLINE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On INCLUDE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On IN reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On FSDOC_STANDALONE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On FSDOC reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On EXCEPTION reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On EOF reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On END reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On ELSE reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On EFFECT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On DEFAULT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On BAR_RBRACK reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On BAR reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On ASSUME reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On AND reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On ABSTRACT reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
-- On # reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 397:
## Known stack suffix:
## EXISTS binders DOT trigger noSeqTerm
## LR(1) items:
typ -> EXISTS binders DOT trigger noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On VAL reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On UNOPTEQUALITY reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On UNFOLDABLE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On UNFOLD reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On TYPE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On TOTAL reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On THEN reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On SUB_EFFECT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On SUBKIND reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On SPLICE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On SEMICOLON reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On RPAREN reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On REIFIABLE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On REFLECTABLE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On RBRACK reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On RBRACE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On PRIVATE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On OPEN reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On OPAQUE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On NOEXTRACT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On NOEQUALITY reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On NEW_EFFECT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On NEW reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On MODULE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On LOGIC reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On LET reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On LENS_PAREN_RIGHT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On LBRACK_AT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On IRREDUCIBLE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On INLINE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On INCLUDE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On IN reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On FSDOC_STANDALONE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On FSDOC reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On EXCEPTION reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On EOF reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On END reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On ELSE reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On EFFECT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On DEFAULT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On BAR_RBRACK reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On BAR reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On ASSUME reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On AND reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On ABSTRACT reduce production typ -> EXISTS binders DOT trigger noSeqTerm
-- On # reduce production typ -> EXISTS binders DOT trigger noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production typ -> EXISTS binders DOT trigger noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 398:
## Known stack suffix:
## attribute
## LR(1) items:
noSeqTerm -> attribute . LET letqualifier letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LET shift to state 399
## Reductions:

State 399:
## Known stack suffix:
## attribute LET
## LR(1) items:
noSeqTerm -> attribute LET . letqualifier letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On REC shift to state 68
-- On MUTABLE shift to state 400
-- On letqualifier shift to state 401
## Reductions:
-- On UNDERSCORE reduce production letqualifier ->
-- On UINT8 reduce production letqualifier ->
-- On UINT64 reduce production letqualifier ->
-- On UINT32 reduce production letqualifier ->
-- On UINT16 reduce production letqualifier ->
-- On TVAR reduce production letqualifier ->
-- On TRUE reduce production letqualifier ->
-- On STRING reduce production letqualifier ->
-- On SQUIGGLY_RARROW reduce production letqualifier ->
-- On SET_RANGE_OF reduce production letqualifier ->
-- On REIFY reduce production letqualifier ->
-- On RANGE_OF reduce production letqualifier ->
-- On NAME reduce production letqualifier ->
-- On LPAREN_RPAREN reduce production letqualifier ->
-- On LPAREN reduce production letqualifier ->
-- On LENS_PAREN_LEFT reduce production letqualifier ->
-- On LBRACK reduce production letqualifier ->
-- On LBRACE reduce production letqualifier ->
-- On INT8 reduce production letqualifier ->
-- On INT64 reduce production letqualifier ->
-- On INT32 reduce production letqualifier ->
-- On INT16 reduce production letqualifier ->
-- On INT reduce production letqualifier ->
-- On IEEE64 reduce production letqualifier ->
-- On IDENT reduce production letqualifier ->
-- On HASH reduce production letqualifier ->
-- On FALSE reduce production letqualifier ->
-- On DOLLAR reduce production letqualifier ->
-- On CHAR reduce production letqualifier ->
-- On BYTEARRAY reduce production letqualifier ->

State 400:
## Known stack suffix:
## MUTABLE
## LR(1) items:
letqualifier -> MUTABLE . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production letqualifier -> MUTABLE
-- On UINT8 reduce production letqualifier -> MUTABLE
-- On UINT64 reduce production letqualifier -> MUTABLE
-- On UINT32 reduce production letqualifier -> MUTABLE
-- On UINT16 reduce production letqualifier -> MUTABLE
-- On TVAR reduce production letqualifier -> MUTABLE
-- On TRUE reduce production letqualifier -> MUTABLE
-- On STRING reduce production letqualifier -> MUTABLE
-- On SQUIGGLY_RARROW reduce production letqualifier -> MUTABLE
-- On SET_RANGE_OF reduce production letqualifier -> MUTABLE
-- On REIFY reduce production letqualifier -> MUTABLE
-- On RANGE_OF reduce production letqualifier -> MUTABLE
-- On NAME reduce production letqualifier -> MUTABLE
-- On LPAREN_RPAREN reduce production letqualifier -> MUTABLE
-- On LPAREN reduce production letqualifier -> MUTABLE
-- On LENS_PAREN_LEFT reduce production letqualifier -> MUTABLE
-- On LBRACK reduce production letqualifier -> MUTABLE
-- On LBRACE reduce production letqualifier -> MUTABLE
-- On INT8 reduce production letqualifier -> MUTABLE
-- On INT64 reduce production letqualifier -> MUTABLE
-- On INT32 reduce production letqualifier -> MUTABLE
-- On INT16 reduce production letqualifier -> MUTABLE
-- On INT reduce production letqualifier -> MUTABLE
-- On IEEE64 reduce production letqualifier -> MUTABLE
-- On IDENT reduce production letqualifier -> MUTABLE
-- On HASH reduce production letqualifier -> MUTABLE
-- On FALSE reduce production letqualifier -> MUTABLE
-- On DOLLAR reduce production letqualifier -> MUTABLE
-- On CHAR reduce production letqualifier -> MUTABLE
-- On BYTEARRAY reduce production letqualifier -> MUTABLE

State 401:
## Known stack suffix:
## attribute LET letqualifier
## LR(1) items:
noSeqTerm -> attribute LET letqualifier . letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 540
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On TVAR reduce production boption(SQUIGGLY_RARROW) ->
-- On TRUE reduce production boption(SQUIGGLY_RARROW) ->
-- On STRING reduce production boption(SQUIGGLY_RARROW) ->
-- On SET_RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On REIFY reduce production boption(SQUIGGLY_RARROW) ->
-- On RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On NAME reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN_RPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LENS_PAREN_LEFT reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACK reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACE reduce production boption(SQUIGGLY_RARROW) ->
-- On INT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT reduce production boption(SQUIGGLY_RARROW) ->
-- On IEEE64 reduce production boption(SQUIGGLY_RARROW) ->
-- On IDENT reduce production boption(SQUIGGLY_RARROW) ->
-- On HASH reduce production boption(SQUIGGLY_RARROW) ->
-- On FALSE reduce production boption(SQUIGGLY_RARROW) ->
-- On DOLLAR reduce production boption(SQUIGGLY_RARROW) ->
-- On CHAR reduce production boption(SQUIGGLY_RARROW) ->
-- On BYTEARRAY reduce production boption(SQUIGGLY_RARROW) ->

State 402:
## Known stack suffix:
## SQUIGGLY_RARROW
## LR(1) items:
boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On UINT8 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On UINT64 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On UINT32 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On UINT16 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On TVAR reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On TRUE reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On STRING reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On SET_RANGE_OF reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On REIFY reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On RANGE_OF reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On NAME reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On LPAREN_RPAREN reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On LPAREN reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On LENS_PAREN_LEFT reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On LBRACK reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On LBRACE reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On INT8 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On INT64 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On INT32 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On INT16 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On INT reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On IEEE64 reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On IDENT reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On HASH reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On FALSE reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On DOLLAR reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On CHAR reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW
-- On BYTEARRAY reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW

State 403:
## Known stack suffix:
## maybeFocus
## LR(1) items:
letbinding -> maybeFocus . lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
letbinding -> maybeFocus . tuplePattern ascribeTyp EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
letbinding -> maybeFocus . tuplePattern EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 404
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 433
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 434
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lidentOrOperator shift to state 531
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 404:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicPattern -> LPAREN . tuplePattern COLON simpleArrow refineOpt RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . tuplePattern RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPPREFIX RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX3 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX4 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0a RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0b RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0c RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0d RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX1 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX2 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . PIPE_RIGHT RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . COLON_EQUALS RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . COLON_COLON RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN . OPPREFIX RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX3 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX4 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0a RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0b RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0c RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0d RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX1 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX2 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . PIPE_RIGHT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . COLON_EQUALS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . COLON_COLON RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PIPE_RIGHT shift to state 405
-- On OP_MIXFIX_ASSIGNMENT shift to state 407
-- On OP_MIXFIX_ACCESS shift to state 409
-- On OPPREFIX shift to state 411
-- On OPINFIX4 shift to state 413
-- On OPINFIX3 shift to state 415
-- On OPINFIX2 shift to state 417
-- On OPINFIX1 shift to state 419
-- On OPINFIX0d shift to state 421
-- On OPINFIX0c shift to state 423
-- On OPINFIX0b shift to state 425
-- On OPINFIX0a shift to state 427
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 429
-- On COLON_COLON shift to state 431
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 189
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 405:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN PIPE_RIGHT . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On COLON reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN

State 407:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN

State 409:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN

State 411:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPPREFIX . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 412
## Reductions:

State 412:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPPREFIX RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN

State 413:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX4 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 414
## Reductions:

State 414:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX4 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN

State 415:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX3 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX3 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN

State 417:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX2 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 418
## Reductions:

State 418:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX2 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN

State 419:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX1 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX1 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN

State 421:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0d . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 422
## Reductions:

State 422:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0d RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN

State 423:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0c . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 424
## Reductions:

State 424:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0c RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN

State 425:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0b . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0b RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN

State 427:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0a . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 428
## Reductions:

State 428:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0a RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On COLON reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN

State 429:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_EQUALS . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 430
## Reductions:

State 430:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_EQUALS RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On COLON reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN

State 431:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_COLON . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_COLON RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On UINT8 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On UINT64 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On UINT32 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On UINT16 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On TVAR reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On TRUE reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On STRING reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On SET_RANGE_OF reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On REIFY reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On RANGE_OF reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On NAME reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On LPAREN_RPAREN reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On LBRACK reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On LBRACE reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On INT8 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On INT64 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On INT32 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On INT16 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On INT reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On IEEE64 reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On IDENT reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On HASH reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On FALSE reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On DOLLAR reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On COLON reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On CHAR reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On BYTEARRAY reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN

State 433:
## Known stack suffix:
## IDENT
## LR(1) items:
lident -> IDENT . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> IDENT . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production lidentOrOperator -> IDENT
-- On UINT8 reduce production lidentOrOperator -> IDENT
-- On UINT64 reduce production lidentOrOperator -> IDENT
-- On UINT32 reduce production lidentOrOperator -> IDENT
-- On UINT16 reduce production lidentOrOperator -> IDENT
-- On TVAR reduce production lidentOrOperator -> IDENT
-- On TRUE reduce production lidentOrOperator -> IDENT
-- On STRING reduce production lidentOrOperator -> IDENT
-- On SET_RANGE_OF reduce production lidentOrOperator -> IDENT
-- On REIFY reduce production lidentOrOperator -> IDENT
-- On RANGE_OF reduce production lidentOrOperator -> IDENT
-- On NAME reduce production lidentOrOperator -> IDENT
-- On LPAREN_RPAREN reduce production lidentOrOperator -> IDENT
-- On LPAREN reduce production lidentOrOperator -> IDENT
-- On LENS_PAREN_LEFT reduce production lidentOrOperator -> IDENT
-- On LBRACK reduce production lidentOrOperator -> IDENT
-- On LBRACE reduce production lidentOrOperator -> IDENT
-- On INT8 reduce production lidentOrOperator -> IDENT
-- On INT64 reduce production lidentOrOperator -> IDENT
-- On INT32 reduce production lidentOrOperator -> IDENT
-- On INT16 reduce production lidentOrOperator -> IDENT
-- On INT reduce production lidentOrOperator -> IDENT
-- On IEEE64 reduce production lidentOrOperator -> IDENT
-- On IDENT reduce production lidentOrOperator -> IDENT
-- On HASH reduce production lidentOrOperator -> IDENT
-- On FALSE reduce production lidentOrOperator -> IDENT
-- On EQUALS reduce production lident -> IDENT
-- On DOLLAR reduce production lidentOrOperator -> IDENT
-- On COMMA reduce production lident -> IDENT
-- On COLON_COLON reduce production lident -> IDENT
-- On COLON reduce production lident -> IDENT
-- On CHAR reduce production lidentOrOperator -> IDENT
-- On BYTEARRAY reduce production lidentOrOperator -> IDENT

State 434:
## Known stack suffix:
## maybeFocus tuplePattern
## LR(1) items:
letbinding -> maybeFocus tuplePattern . ascribeTyp EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
letbinding -> maybeFocus tuplePattern . EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 435
-- On COLON shift to state 482
-- On ascribeTyp shift to state 528
## Reductions:

State 435:
## Known stack suffix:
## maybeFocus tuplePattern EQUALS
## LR(1) items:
letbinding -> maybeFocus tuplePattern EQUALS . term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 436
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 436:
## Known stack suffix:
## maybeFocus tuplePattern EQUALS term
## LR(1) items:
letbinding -> maybeFocus tuplePattern EQUALS term . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On UNOPTEQUALITY reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On UNFOLDABLE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On UNFOLD reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On TYPE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On TOTAL reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On SUB_EFFECT reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On SPLICE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On REIFIABLE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On REFLECTABLE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On PRIVATE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On PRAGMA_SET_OPTIONS reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On PRAGMA_RESET_OPTIONS reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On OPEN reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On OPAQUE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On NOEXTRACT reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On NOEQUALITY reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On NEW_EFFECT reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On NEW reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On MODULE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On LOGIC reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On LET reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On LBRACK_AT reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On IRREDUCIBLE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On INLINE_FOR_EXTRACTION reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On INLINE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On INCLUDE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On IN reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On FSDOC_STANDALONE reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On FSDOC reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On EXCEPTION reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On EOF reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On EFFECT reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On DEFAULT reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On ASSUME reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On AND reduce production letbinding -> maybeFocus tuplePattern EQUALS term
-- On ABSTRACT reduce production letbinding -> maybeFocus tuplePattern EQUALS term

State 437:
## Known stack suffix:
## noSeqTerm
## LR(1) items:
term -> noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
term -> noSeqTerm . SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
term -> noSeqTerm . SEMICOLON_SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SEMICOLON_SEMICOLON shift to state 438
-- On SEMICOLON shift to state 480
## Reductions:
-- On WITH reduce production term -> noSeqTerm
-- On VAL reduce production term -> noSeqTerm
-- On UNOPTEQUALITY reduce production term -> noSeqTerm
-- On UNFOLDABLE reduce production term -> noSeqTerm
-- On UNFOLD reduce production term -> noSeqTerm
-- On TYPE reduce production term -> noSeqTerm
-- On TOTAL reduce production term -> noSeqTerm
-- On THEN reduce production term -> noSeqTerm
-- On SUB_EFFECT reduce production term -> noSeqTerm
-- On SUBKIND reduce production term -> noSeqTerm
-- On SPLICE reduce production term -> noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production term -> noSeqTerm
-- On SEMICOLON reduce production term -> noSeqTerm
-- On RPAREN reduce production term -> noSeqTerm
-- On REIFIABLE reduce production term -> noSeqTerm
-- On REFLECTABLE reduce production term -> noSeqTerm
-- On RBRACK reduce production term -> noSeqTerm
-- On RBRACE reduce production term -> noSeqTerm
-- On PRIVATE reduce production term -> noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production term -> noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production term -> noSeqTerm
-- On OPEN reduce production term -> noSeqTerm
-- On OPAQUE reduce production term -> noSeqTerm
-- On NOEXTRACT reduce production term -> noSeqTerm
-- On NOEQUALITY reduce production term -> noSeqTerm
-- On NEW_EFFECT reduce production term -> noSeqTerm
-- On NEW reduce production term -> noSeqTerm
-- On MODULE reduce production term -> noSeqTerm
-- On LOGIC reduce production term -> noSeqTerm
-- On LET reduce production term -> noSeqTerm
-- On LENS_PAREN_RIGHT reduce production term -> noSeqTerm
-- On LBRACK_AT reduce production term -> noSeqTerm
-- On IRREDUCIBLE reduce production term -> noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production term -> noSeqTerm
-- On INLINE reduce production term -> noSeqTerm
-- On INCLUDE reduce production term -> noSeqTerm
-- On IN reduce production term -> noSeqTerm
-- On FSDOC_STANDALONE reduce production term -> noSeqTerm
-- On FSDOC reduce production term -> noSeqTerm
-- On EXCEPTION reduce production term -> noSeqTerm
-- On EOF reduce production term -> noSeqTerm
-- On END reduce production term -> noSeqTerm
-- On ELSE reduce production term -> noSeqTerm
-- On EFFECT reduce production term -> noSeqTerm
-- On DEFAULT reduce production term -> noSeqTerm
-- On BAR_RBRACK reduce production term -> noSeqTerm
-- On BAR reduce production term -> noSeqTerm
-- On ASSUME reduce production term -> noSeqTerm
-- On AND reduce production term -> noSeqTerm
-- On ABSTRACT reduce production term -> noSeqTerm
-- On # reduce production term -> noSeqTerm
** Conflict on SEMICOLON_SEMICOLON SEMICOLON
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production term -> noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 438:
## Known stack suffix:
## noSeqTerm SEMICOLON_SEMICOLON
## LR(1) items:
term -> noSeqTerm SEMICOLON_SEMICOLON . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 439
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 439:
## Known stack suffix:
## noSeqTerm SEMICOLON_SEMICOLON term
## LR(1) items:
term -> noSeqTerm SEMICOLON_SEMICOLON term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On VAL reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On UNOPTEQUALITY reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On UNFOLDABLE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On UNFOLD reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On TYPE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On TOTAL reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On THEN reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On SUB_EFFECT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On SUBKIND reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On SPLICE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On SEMICOLON_SEMICOLON reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On SEMICOLON reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On RPAREN reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On REIFIABLE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On REFLECTABLE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On RBRACK reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On RBRACE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On PRIVATE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On PRAGMA_SET_OPTIONS reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On PRAGMA_RESET_OPTIONS reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On OPEN reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On OPAQUE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On NOEXTRACT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On NOEQUALITY reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On NEW_EFFECT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On NEW reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On MODULE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On LOGIC reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On LET reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On LENS_PAREN_RIGHT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On LBRACK_AT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On IRREDUCIBLE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On INLINE_FOR_EXTRACTION reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On INLINE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On INCLUDE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On IN reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On FSDOC_STANDALONE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On FSDOC reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On EXCEPTION reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On EOF reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On END reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On ELSE reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On EFFECT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On DEFAULT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On BAR_RBRACK reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On BAR reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On ASSUME reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On AND reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On ABSTRACT reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
-- On # reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production term -> noSeqTerm SEMICOLON_SEMICOLON term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 440:
## Known stack suffix:
## lidentOrUnderscore
## LR(1) items:
term -> lidentOrUnderscore . LONG_LEFT_ARROW noSeqTerm SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmRefinement -> lidentOrUnderscore . COLON appTerm refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LONG_LEFT_ARROW shift to state 441
-- On COLON shift to state 316
## Reductions:

State 441:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW . noSeqTerm SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 442
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 442:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm . SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SEMICOLON shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 444
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 444:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On VAL reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On UNOPTEQUALITY reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On UNFOLDABLE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On UNFOLD reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On TYPE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On TOTAL reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On THEN reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On SUB_EFFECT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On SUBKIND reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On SPLICE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On SEMICOLON_SEMICOLON reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On SEMICOLON reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On RPAREN reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On REIFIABLE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On REFLECTABLE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On RBRACK reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On RBRACE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On PRIVATE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On PRAGMA_SET_OPTIONS reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On PRAGMA_RESET_OPTIONS reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On OPEN reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On OPAQUE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On NOEXTRACT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On NOEQUALITY reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On NEW_EFFECT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On NEW reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On MODULE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On LOGIC reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On LET reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On LENS_PAREN_RIGHT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On LBRACK_AT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On IRREDUCIBLE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On INLINE_FOR_EXTRACTION reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On INLINE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On INCLUDE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On IN reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On FSDOC_STANDALONE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On FSDOC reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On EXCEPTION reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On EOF reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On END reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On ELSE reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On EFFECT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On DEFAULT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On BAR_RBRACK reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On BAR reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On ASSUME reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On AND reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On ABSTRACT reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
-- On # reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 445:
## Known stack suffix:
## atomicTermNotQUident
## LR(1) items:
atomicTerm -> atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
indexingTerm -> atomicTermNotQUident . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LPAREN term RPAREN LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LBRACK term RBRACK LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 446
-- On DOT_LENS_PAREN_LEFT shift to state 464
-- On DOT_LBRACK_BAR shift to state 469
-- On DOT_LBRACK shift to state 474
-- On nonempty_list(dotOperator) shift to state 479
## Reductions:
-- On WITH reduce production atomicTerm -> atomicTermNotQUident
-- On VAL reduce production atomicTerm -> atomicTermNotQUident
-- On UNOPTEQUALITY reduce production atomicTerm -> atomicTermNotQUident
-- On UNIV_HASH reduce production atomicTerm -> atomicTermNotQUident
-- On UNFOLDABLE reduce production atomicTerm -> atomicTermNotQUident
-- On UNFOLD reduce production atomicTerm -> atomicTermNotQUident
-- On UNDERSCORE reduce production atomicTerm -> atomicTermNotQUident
-- On UINT8 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT64 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT32 reduce production atomicTerm -> atomicTermNotQUident
-- On UINT16 reduce production atomicTerm -> atomicTermNotQUident
-- On TYPE reduce production atomicTerm -> atomicTermNotQUident
-- On TVAR reduce production atomicTerm -> atomicTermNotQUident
-- On TRUE reduce production atomicTerm -> atomicTermNotQUident
-- On TOTAL reduce production atomicTerm -> atomicTermNotQUident
-- On THEN reduce production atomicTerm -> atomicTermNotQUident
-- On SUB_EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On SUBTYPE reduce production atomicTerm -> atomicTermNotQUident
-- On SUBKIND reduce production atomicTerm -> atomicTermNotQUident
-- On STRING reduce production atomicTerm -> atomicTermNotQUident
-- On SPLICE reduce production atomicTerm -> atomicTermNotQUident
-- On SET_RANGE_OF reduce production atomicTerm -> atomicTermNotQUident
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> atomicTermNotQUident
-- On SEMICOLON reduce production atomicTerm -> atomicTermNotQUident
-- On RPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On REIFY reduce production atomicTerm -> atomicTermNotQUident
-- On REIFIABLE reduce production atomicTerm -> atomicTermNotQUident
-- On REFLECTABLE reduce production atomicTerm -> atomicTermNotQUident
-- On RBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On RBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On RARROW reduce production atomicTerm -> atomicTermNotQUident
-- On RANGE_OF reduce production atomicTerm -> atomicTermNotQUident
-- On PRIVATE reduce production atomicTerm -> atomicTermNotQUident
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> atomicTermNotQUident
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> atomicTermNotQUident
-- On PIPE_RIGHT reduce production atomicTerm -> atomicTermNotQUident
-- On PERCENT_LBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On OPPREFIX reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX4 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX3 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX2 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX1 reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0d reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0c reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0b reduce production atomicTerm -> atomicTermNotQUident
-- On OPINFIX0a reduce production atomicTerm -> atomicTermNotQUident
-- On OPEN reduce production atomicTerm -> atomicTermNotQUident
-- On OPAQUE reduce production atomicTerm -> atomicTermNotQUident
-- On NOEXTRACT reduce production atomicTerm -> atomicTermNotQUident
-- On NOEQUALITY reduce production atomicTerm -> atomicTermNotQUident
-- On NEW_EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On NEW reduce production atomicTerm -> atomicTermNotQUident
-- On NAME reduce production atomicTerm -> atomicTermNotQUident
-- On MODULE reduce production atomicTerm -> atomicTermNotQUident
-- On MINUS reduce production atomicTerm -> atomicTermNotQUident
-- On LPAREN_RPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On LPAREN reduce production atomicTerm -> atomicTermNotQUident
-- On LOGIC reduce production atomicTerm -> atomicTermNotQUident
-- On LET reduce production atomicTerm -> atomicTermNotQUident
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> atomicTermNotQUident
-- On LENS_PAREN_LEFT reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK_BAR reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK_AT reduce production atomicTerm -> atomicTermNotQUident
-- On LBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On IRREDUCIBLE reduce production atomicTerm -> atomicTermNotQUident
-- On INT8 reduce production atomicTerm -> atomicTermNotQUident
-- On INT64 reduce production atomicTerm -> atomicTermNotQUident
-- On INT32 reduce production atomicTerm -> atomicTermNotQUident
-- On INT16 reduce production atomicTerm -> atomicTermNotQUident
-- On INT reduce production atomicTerm -> atomicTermNotQUident
-- On INLINE_FOR_EXTRACTION reduce production atomicTerm -> atomicTermNotQUident
-- On INLINE reduce production atomicTerm -> atomicTermNotQUident
-- On INCLUDE reduce production atomicTerm -> atomicTermNotQUident
-- On IN reduce production atomicTerm -> atomicTermNotQUident
-- On IMPLIES reduce production atomicTerm -> atomicTermNotQUident
-- On IFF reduce production atomicTerm -> atomicTermNotQUident
-- On IEEE64 reduce production atomicTerm -> atomicTermNotQUident
-- On IDENT reduce production atomicTerm -> atomicTermNotQUident
-- On HASH reduce production atomicTerm -> atomicTermNotQUident
-- On FSDOC_STANDALONE reduce production atomicTerm -> atomicTermNotQUident
-- On FSDOC reduce production atomicTerm -> atomicTermNotQUident
-- On FALSE reduce production atomicTerm -> atomicTermNotQUident
-- On EXCEPTION reduce production atomicTerm -> atomicTermNotQUident
-- On EQUALS reduce production atomicTerm -> atomicTermNotQUident
-- On EOF reduce production atomicTerm -> atomicTermNotQUident
-- On END reduce production atomicTerm -> atomicTermNotQUident
-- On ELSE reduce production atomicTerm -> atomicTermNotQUident
-- On EFFECT reduce production atomicTerm -> atomicTermNotQUident
-- On DISJUNCTION reduce production atomicTerm -> atomicTermNotQUident
-- On DEFAULT reduce production atomicTerm -> atomicTermNotQUident
-- On CONJUNCTION reduce production atomicTerm -> atomicTermNotQUident
-- On COMMA reduce production atomicTerm -> atomicTermNotQUident
-- On COLON_EQUALS reduce production atomicTerm -> atomicTermNotQUident
-- On COLON_COLON reduce production atomicTerm -> atomicTermNotQUident
-- On CHAR reduce production atomicTerm -> atomicTermNotQUident
-- On BYTEARRAY reduce production atomicTerm -> atomicTermNotQUident
-- On BEGIN reduce production atomicTerm -> atomicTermNotQUident
-- On BAR_RBRACK reduce production atomicTerm -> atomicTermNotQUident
-- On BAR reduce production atomicTerm -> atomicTermNotQUident
-- On BANG_LBRACE reduce production atomicTerm -> atomicTermNotQUident
-- On BACKTICK reduce production atomicTerm -> atomicTermNotQUident
-- On ASSUME reduce production atomicTerm -> atomicTermNotQUident
-- On AND reduce production atomicTerm -> atomicTermNotQUident
-- On AMP reduce production atomicTerm -> atomicTermNotQUident
-- On ABSTRACT reduce production atomicTerm -> atomicTermNotQUident
-- On # reduce production atomicTerm -> atomicTermNotQUident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTerm -> atomicTermNotQUident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 446:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN . term RPAREN LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 447
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 447:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term . RPAREN LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term RPAREN
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 449
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 463
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On END reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On # reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LARROW IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 449:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term RPAREN LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 450
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 450:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On VAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On UNFOLDABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On UNFOLD reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On TYPE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On TOTAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On THEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On SPLICE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On RPAREN reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On REIFIABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On REFLECTABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On RBRACE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On OPEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On NOEXTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On NOEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On NEW reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On MODULE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On LOGIC reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On LET reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On LBRACK_AT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On INLINE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On INCLUDE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On IN reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On FSDOC reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On EOF reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On END reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On ELSE reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On BAR reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On ASSUME reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On AND reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On ABSTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
-- On # reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 451:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 452
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 452:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 453
## Reductions:

State 453:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 462
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On END reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On # reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 454:
## Known stack suffix:
## DOT_LBRACK_BAR
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 455
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 455:
## Known stack suffix:
## DOT_LBRACK_BAR term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 456
## Reductions:

State 456:
## Known stack suffix:
## DOT_LBRACK_BAR term RBRACE
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 461
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On END reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On # reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 457:
## Known stack suffix:
## DOT_LBRACK
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 458
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 458:
## Known stack suffix:
## DOT_LBRACK term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 459
## Reductions:

State 459:
## Known stack suffix:
## DOT_LBRACK term RBRACK
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 460
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On END reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On # reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 460:
## Known stack suffix:
## DOT_LBRACK term RBRACK nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On END reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
-- On # reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 461:
## Known stack suffix:
## DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On END reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
-- On # reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 462:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On END reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
-- On # reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 463:
## Known stack suffix:
## DOT_LPAREN term RPAREN nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On END reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
-- On # reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 464:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 465
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 465:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 467
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 462
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On END reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
-- On # reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LARROW IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 467:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 468
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 468:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On VAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On UNFOLDABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On UNFOLD reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On TYPE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On TOTAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On THEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On SPLICE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On RPAREN reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On REIFIABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On REFLECTABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On RBRACE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On OPEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On NOEXTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On NOEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On NEW reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On MODULE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On LOGIC reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On LET reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On LBRACK_AT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On INLINE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On INCLUDE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On IN reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On FSDOC reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On EOF reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On END reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On ELSE reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On BAR reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On ASSUME reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On AND reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On ABSTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
-- On # reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 469:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR . term RBRACE LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 470
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 470:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term . RBRACE LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term RBRACE
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 472
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 461
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On END reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
-- On # reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LARROW IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 472:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 473
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 473:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On VAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On UNFOLDABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On UNFOLD reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On TYPE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On TOTAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On THEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On SPLICE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On RPAREN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On REIFIABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On REFLECTABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On RBRACE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On OPEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On NOEXTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On NOEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On NEW reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On MODULE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On LOGIC reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On LET reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On LBRACK_AT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On INLINE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On INCLUDE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On IN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On FSDOC reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On EOF reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On END reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On ELSE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On BAR reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On ASSUME reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On AND reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On ABSTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
-- On # reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 474:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK . term RBRACK LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 475
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 475:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term . RBRACK LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 476
## Reductions:

State 476:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term RBRACK
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 477
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 460
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On END reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
-- On # reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LARROW IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 477:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term RBRACK LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 478
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 478:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On VAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On UNFOLDABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On UNFOLD reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On TYPE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On TOTAL reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On THEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On SPLICE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On RPAREN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On REIFIABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On REFLECTABLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On RBRACE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On OPEN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On NOEXTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On NOEQUALITY reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On NEW reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On MODULE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On LOGIC reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On LET reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On LBRACK_AT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On INLINE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On INCLUDE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On IN reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On FSDOC reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On EOF reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On END reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On ELSE reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On EFFECT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On BAR reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On ASSUME reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On AND reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On ABSTRACT reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
-- On # reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 479:
## Known stack suffix:
## atomicTermNotQUident nonempty_list(dotOperator)
## LR(1) items:
indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On VAL reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UNOPTEQUALITY reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UNIV_HASH reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UNFOLDABLE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UNFOLD reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UNDERSCORE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UINT8 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UINT64 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UINT32 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On UINT16 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On TYPE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On TVAR reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On TRUE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On TOTAL reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On THEN reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SUB_EFFECT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SUBTYPE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SUBKIND reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On STRING reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SQUIGGLY_RARROW reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SPLICE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SET_RANGE_OF reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SEMICOLON_SEMICOLON reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On SEMICOLON reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On RPAREN reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On REIFY reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On REIFIABLE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On REFLECTABLE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On RBRACK reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On RBRACE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On RARROW reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On RANGE_OF reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On PRIVATE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On PRAGMA_SET_OPTIONS reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On PRAGMA_RESET_OPTIONS reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On PIPE_RIGHT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On PERCENT_LBRACK reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPPREFIX reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX4 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX3 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX2 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX1 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX0d reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX0c reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX0b reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPINFIX0a reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPEN reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On OPAQUE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On NOEXTRACT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On NOEQUALITY reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On NEW_EFFECT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On NEW reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On NAME reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On MODULE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On MINUS reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LPAREN_RPAREN reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LPAREN reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LOGIC reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LET reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LENS_PAREN_RIGHT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LENS_PAREN_LEFT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LBRACK_BAR reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LBRACK_AT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LBRACK reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On LBRACE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On IRREDUCIBLE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INT8 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INT64 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INT32 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INT16 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INLINE_FOR_EXTRACTION reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INLINE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On INCLUDE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On IN reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On IMPLIES reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On IFF reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On IEEE64 reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On IDENT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On HASH reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On FSDOC_STANDALONE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On FSDOC reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On FALSE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On EXCEPTION reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On EQUALS reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On EOF reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On END reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On ELSE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On EFFECT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On DISJUNCTION reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On DEFAULT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On CONJUNCTION reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On COMMA reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On COLON_EQUALS reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On COLON_COLON reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On CHAR reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On BYTEARRAY reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On BY reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On BEGIN reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On BAR_RBRACK reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On BAR reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On BANG_LBRACE reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On BACKTICK reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On ASSUME reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On AND reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On AMP reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On ABSTRACT reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
-- On # reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 480:
## Known stack suffix:
## noSeqTerm SEMICOLON
## LR(1) items:
term -> noSeqTerm SEMICOLON . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 481
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 481:
## Known stack suffix:
## noSeqTerm SEMICOLON term
## LR(1) items:
term -> noSeqTerm SEMICOLON term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production term -> noSeqTerm SEMICOLON term
-- On VAL reduce production term -> noSeqTerm SEMICOLON term
-- On UNOPTEQUALITY reduce production term -> noSeqTerm SEMICOLON term
-- On UNFOLDABLE reduce production term -> noSeqTerm SEMICOLON term
-- On UNFOLD reduce production term -> noSeqTerm SEMICOLON term
-- On TYPE reduce production term -> noSeqTerm SEMICOLON term
-- On TOTAL reduce production term -> noSeqTerm SEMICOLON term
-- On THEN reduce production term -> noSeqTerm SEMICOLON term
-- On SUB_EFFECT reduce production term -> noSeqTerm SEMICOLON term
-- On SUBKIND reduce production term -> noSeqTerm SEMICOLON term
-- On SPLICE reduce production term -> noSeqTerm SEMICOLON term
-- On SEMICOLON_SEMICOLON reduce production term -> noSeqTerm SEMICOLON term
-- On SEMICOLON reduce production term -> noSeqTerm SEMICOLON term
-- On RPAREN reduce production term -> noSeqTerm SEMICOLON term
-- On REIFIABLE reduce production term -> noSeqTerm SEMICOLON term
-- On REFLECTABLE reduce production term -> noSeqTerm SEMICOLON term
-- On RBRACK reduce production term -> noSeqTerm SEMICOLON term
-- On RBRACE reduce production term -> noSeqTerm SEMICOLON term
-- On PRIVATE reduce production term -> noSeqTerm SEMICOLON term
-- On PRAGMA_SET_OPTIONS reduce production term -> noSeqTerm SEMICOLON term
-- On PRAGMA_RESET_OPTIONS reduce production term -> noSeqTerm SEMICOLON term
-- On OPEN reduce production term -> noSeqTerm SEMICOLON term
-- On OPAQUE reduce production term -> noSeqTerm SEMICOLON term
-- On NOEXTRACT reduce production term -> noSeqTerm SEMICOLON term
-- On NOEQUALITY reduce production term -> noSeqTerm SEMICOLON term
-- On NEW_EFFECT reduce production term -> noSeqTerm SEMICOLON term
-- On NEW reduce production term -> noSeqTerm SEMICOLON term
-- On MODULE reduce production term -> noSeqTerm SEMICOLON term
-- On LOGIC reduce production term -> noSeqTerm SEMICOLON term
-- On LET reduce production term -> noSeqTerm SEMICOLON term
-- On LENS_PAREN_RIGHT reduce production term -> noSeqTerm SEMICOLON term
-- On LBRACK_AT reduce production term -> noSeqTerm SEMICOLON term
-- On IRREDUCIBLE reduce production term -> noSeqTerm SEMICOLON term
-- On INLINE_FOR_EXTRACTION reduce production term -> noSeqTerm SEMICOLON term
-- On INLINE reduce production term -> noSeqTerm SEMICOLON term
-- On INCLUDE reduce production term -> noSeqTerm SEMICOLON term
-- On IN reduce production term -> noSeqTerm SEMICOLON term
-- On FSDOC_STANDALONE reduce production term -> noSeqTerm SEMICOLON term
-- On FSDOC reduce production term -> noSeqTerm SEMICOLON term
-- On EXCEPTION reduce production term -> noSeqTerm SEMICOLON term
-- On EOF reduce production term -> noSeqTerm SEMICOLON term
-- On END reduce production term -> noSeqTerm SEMICOLON term
-- On ELSE reduce production term -> noSeqTerm SEMICOLON term
-- On EFFECT reduce production term -> noSeqTerm SEMICOLON term
-- On DEFAULT reduce production term -> noSeqTerm SEMICOLON term
-- On BAR_RBRACK reduce production term -> noSeqTerm SEMICOLON term
-- On BAR reduce production term -> noSeqTerm SEMICOLON term
-- On ASSUME reduce production term -> noSeqTerm SEMICOLON term
-- On AND reduce production term -> noSeqTerm SEMICOLON term
-- On ABSTRACT reduce production term -> noSeqTerm SEMICOLON term
-- On # reduce production term -> noSeqTerm SEMICOLON term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production term -> noSeqTerm SEMICOLON term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 482:
## Known stack suffix:
## COLON
## LR(1) items:
ascribeTyp -> COLON . tmArrow(tmNoEq) option(__anonymous_5) [ EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 524
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 483:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN . OPPREFIX RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX3 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX4 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0a RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0b RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0c RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0d RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX1 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX2 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . PIPE_RIGHT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . COLON_EQUALS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . COLON_COLON RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
projectionLHS -> LPAREN . term option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
tmArrow(tmNoEq) -> LPAREN . aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PIPE_RIGHT shift to state 48
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OP_MIXFIX_ASSIGNMENT shift to state 50
-- On OP_MIXFIX_ACCESS shift to state 52
-- On OPPREFIX shift to state 54
-- On OPINFIX4 shift to state 484
-- On OPINFIX3 shift to state 486
-- On OPINFIX2 shift to state 488
-- On OPINFIX1 shift to state 490
-- On OPINFIX0d shift to state 492
-- On OPINFIX0c shift to state 494
-- On OPINFIX0b shift to state 496
-- On OPINFIX0a shift to state 498
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 500
-- On COLON_COLON shift to state 502
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 504
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 510
-- On appTerm shift to state 320
## Reductions:

State 484:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX4 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 486:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX3 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 488:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX2 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 489
## Reductions:

State 489:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 490:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX1 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 491
## Reductions:

State 491:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 492:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0d . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 494:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0c . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 495
## Reductions:

State 495:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 496:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0b . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 498:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0a . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 499
## Reductions:

State 499:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 500:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_EQUALS . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 501
## Reductions:

State 501:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 502:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_COLON . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 503
## Reductions:

State 503:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_COLON RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On VAL reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UNIV_HASH reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UNFOLD reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UNDERSCORE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UINT8 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UINT64 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UINT32 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On UINT16 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On TYPE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On TVAR reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On TRUE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On TOTAL reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On THEN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SUBTYPE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SUBKIND reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On STRING reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SPLICE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On SEMICOLON reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On RPAREN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On REIFY reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On REIFIABLE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On REFLECTABLE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On RBRACK reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On RBRACE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On RARROW reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On RANGE_OF reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On PRIVATE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPPREFIX reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX4 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX3 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX2 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX1 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX0d reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX0c reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX0b reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPINFIX0a reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPEN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On OPAQUE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On NOEXTRACT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On NOEQUALITY reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On NEW reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On NAME reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On MODULE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On MINUS reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LPAREN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LOGIC reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LET reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LBRACK_AT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LBRACK reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On LBRACE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INT8 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INT64 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INT32 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INT16 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INLINE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On INCLUDE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On IN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On IMPLIES reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On IFF reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On IEEE64 reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On IDENT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On HASH reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On FSDOC reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On FALSE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On EXCEPTION reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On EQUALS reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On EOF reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On END reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On ELSE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On EFFECT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On DISJUNCTION reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On DEFAULT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On CONJUNCTION reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On COMMA reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On COLON_COLON reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On CHAR reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On BYTEARRAY reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On BY reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On BEGIN reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On BAR reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On BACKTICK reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On ASSUME reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On AND reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On AMP reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On ABSTRACT reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
-- On # reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 504:
## Known stack suffix:
## LPAREN term
## LR(1) items:
projectionLHS -> LPAREN term . option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On SUBKIND shift to state 505
-- On option(pair(hasSort,simpleTerm)) shift to state 506
-- On hasSort shift to state 508
## Reductions:
-- On RPAREN reduce production option(pair(hasSort,simpleTerm)) ->

State 505:
## Known stack suffix:
## SUBKIND
## LR(1) items:
hasSort -> SUBKIND . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FUN FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production hasSort -> SUBKIND
-- On UINT8 reduce production hasSort -> SUBKIND
-- On UINT64 reduce production hasSort -> SUBKIND
-- On UINT32 reduce production hasSort -> SUBKIND
-- On UINT16 reduce production hasSort -> SUBKIND
-- On TVAR reduce production hasSort -> SUBKIND
-- On TRUE reduce production hasSort -> SUBKIND
-- On TILDE reduce production hasSort -> SUBKIND
-- On STRING reduce production hasSort -> SUBKIND
-- On SET_RANGE_OF reduce production hasSort -> SUBKIND
-- On REIFY reduce production hasSort -> SUBKIND
-- On RANGE_OF reduce production hasSort -> SUBKIND
-- On QUOTE reduce production hasSort -> SUBKIND
-- On PERC_BACKTICK reduce production hasSort -> SUBKIND
-- On PERCENT_LBRACK reduce production hasSort -> SUBKIND
-- On OPPREFIX reduce production hasSort -> SUBKIND
-- On NAME reduce production hasSort -> SUBKIND
-- On MINUS reduce production hasSort -> SUBKIND
-- On LPAREN_RPAREN reduce production hasSort -> SUBKIND
-- On LPAREN reduce production hasSort -> SUBKIND
-- On LENS_PAREN_LEFT reduce production hasSort -> SUBKIND
-- On LBRACK_BAR reduce production hasSort -> SUBKIND
-- On LBRACK reduce production hasSort -> SUBKIND
-- On LBRACE reduce production hasSort -> SUBKIND
-- On INT8 reduce production hasSort -> SUBKIND
-- On INT64 reduce production hasSort -> SUBKIND
-- On INT32 reduce production hasSort -> SUBKIND
-- On INT16 reduce production hasSort -> SUBKIND
-- On INT reduce production hasSort -> SUBKIND
-- On IEEE64 reduce production hasSort -> SUBKIND
-- On IDENT reduce production hasSort -> SUBKIND
-- On HASH reduce production hasSort -> SUBKIND
-- On FUN reduce production hasSort -> SUBKIND
-- On FALSE reduce production hasSort -> SUBKIND
-- On EQUALS reduce production hasSort -> SUBKIND
-- On DOLLAR reduce production hasSort -> SUBKIND
-- On CHAR reduce production hasSort -> SUBKIND
-- On BYTEARRAY reduce production hasSort -> SUBKIND
-- On BEGIN reduce production hasSort -> SUBKIND
-- On BANG_LBRACE reduce production hasSort -> SUBKIND
-- On BACKTICK_HASH reduce production hasSort -> SUBKIND
-- On BACKTICK_AT reduce production hasSort -> SUBKIND
-- On BACKTICK reduce production hasSort -> SUBKIND

State 506:
## Known stack suffix:
## LPAREN term option(pair(hasSort,simpleTerm))
## LR(1) items:
projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 507
## Reductions:

State 507:
## Known stack suffix:
## LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
## LR(1) items:
projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On VAL reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UNOPTEQUALITY reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UNIV_HASH reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UNFOLDABLE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UNFOLD reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UNDERSCORE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UINT8 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UINT64 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UINT32 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On UINT16 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On TYP_APP_GREATER reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On TYPE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On TVAR reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On TRUE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On TOTAL reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On THEN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SUB_EFFECT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SUBTYPE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SUBKIND reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On STRING reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SQUIGGLY_RARROW reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SPLICE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SET_RANGE_OF reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On SEMICOLON reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On RPAREN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On REIFY reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On REIFIABLE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On REFLECTABLE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On RBRACK reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On RBRACE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On RARROW reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On RANGE_OF reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On PRIVATE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On PIPE_RIGHT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On PERCENT_LBRACK reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPPREFIX reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX4 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX3 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX2 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX1 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX0d reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX0c reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX0b reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPINFIX0a reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPEN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On OPAQUE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On NOEXTRACT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On NOEQUALITY reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On NEW_EFFECT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On NEW reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On NAME reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On MODULE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On MINUS reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LPAREN_RPAREN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LPAREN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LOGIC reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LET reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LENS_PAREN_LEFT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LBRACK_BAR reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LBRACK_AT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LBRACK reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On LBRACE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On IRREDUCIBLE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INT8 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INT64 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INT32 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INT16 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INLINE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On INCLUDE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On IN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On IMPLIES reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On IFF reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On IEEE64 reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On IDENT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On HASH reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On FSDOC_STANDALONE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On FSDOC reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On FALSE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On EXCEPTION reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On EQUALS reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On EOF reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On END reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On ELSE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On EFFECT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On DOT_LPAREN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On DOT_LBRACK_BAR reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On DOT_LBRACK reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On DOT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On DISJUNCTION reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On DEFAULT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On CONJUNCTION reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On COMMA reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On COLON_EQUALS reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On COLON_COLON reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On CHAR reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On BYTEARRAY reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On BY reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On BEGIN reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On BAR_RBRACK reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On BAR reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On BANG_LBRACE reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On BACKTICK reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On ASSUME reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On AND reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On AMP reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On ABSTRACT reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
-- On # reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 508:
## Known stack suffix:
## hasSort
## LR(1) items:
option(pair(hasSort,simpleTerm)) -> hasSort . simpleTerm [ RPAREN ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 509
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 509:
## Known stack suffix:
## hasSort simpleTerm
## LR(1) items:
option(pair(hasSort,simpleTerm)) -> hasSort simpleTerm . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production option(pair(hasSort,simpleTerm)) -> hasSort simpleTerm

State 510:
## Known stack suffix:
## LPAREN aqual
## LR(1) items:
tmArrow(tmFormula) -> aqual . tmFormula RARROW tmArrow(tmFormula) [ SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN IMPLIES IFF ]
tmArrow(tmNoEq) -> LPAREN aqual . tmNoEq RPAREN RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 511
-- On tmNoEq shift to state 512
-- On tmFormula shift to state 369
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 511:
## Known stack suffix:
## tmNoEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . [ RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS ]
tmNoEq -> tmNoEqWith(tmRefinement) . [ RPAREN ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On RPAREN reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On MINUS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)

State 512:
## Known stack suffix:
## LPAREN aqual tmNoEq
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq . RPAREN RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RPAREN shift to state 513
## Reductions:

State 513:
## Known stack suffix:
## LPAREN aqual tmNoEq RPAREN
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN . RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RARROW shift to state 514
## Reductions:

State 514:
## Known stack suffix:
## LPAREN aqual tmNoEq RPAREN RARROW
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW . tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 523
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 515:
## Known stack suffix:
## tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEq -> tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On VAL reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On UNFOLD reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On TYPE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On TOTAL reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On SPLICE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On REIFIABLE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On RARROW reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On PRIVATE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On OPEN reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On OPAQUE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On NEW reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On MODULE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On LOGIC reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On LET reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On INLINE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On INCLUDE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On FSDOC reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On EXCEPTION reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On EQUALS reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On EOF reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On EFFECT reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On DEFAULT reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On BY reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On ASSUME reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On AND reduce production tmNoEq -> tmNoEqWith(tmRefinement)
-- On ABSTRACT reduce production tmNoEq -> tmNoEqWith(tmRefinement)

State 516:
## Known stack suffix:
## tmNoEq
## LR(1) items:
tmArrow(tmNoEq) -> tmNoEq . RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
tmArrow(tmNoEq) -> tmNoEq . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RARROW shift to state 517
## Reductions:
-- On WITH reduce production tmArrow(tmNoEq) -> tmNoEq
-- On VAL reduce production tmArrow(tmNoEq) -> tmNoEq
-- On UNOPTEQUALITY reduce production tmArrow(tmNoEq) -> tmNoEq
-- On UNFOLDABLE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On UNFOLD reduce production tmArrow(tmNoEq) -> tmNoEq
-- On TYPE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On TOTAL reduce production tmArrow(tmNoEq) -> tmNoEq
-- On SUB_EFFECT reduce production tmArrow(tmNoEq) -> tmNoEq
-- On SPLICE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On REIFIABLE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On REFLECTABLE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On PRIVATE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmNoEq) -> tmNoEq
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmNoEq) -> tmNoEq
-- On OPEN reduce production tmArrow(tmNoEq) -> tmNoEq
-- On OPAQUE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On NOEXTRACT reduce production tmArrow(tmNoEq) -> tmNoEq
-- On NOEQUALITY reduce production tmArrow(tmNoEq) -> tmNoEq
-- On NEW_EFFECT reduce production tmArrow(tmNoEq) -> tmNoEq
-- On NEW reduce production tmArrow(tmNoEq) -> tmNoEq
-- On MODULE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On LOGIC reduce production tmArrow(tmNoEq) -> tmNoEq
-- On LET reduce production tmArrow(tmNoEq) -> tmNoEq
-- On LBRACK_AT reduce production tmArrow(tmNoEq) -> tmNoEq
-- On IRREDUCIBLE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmNoEq) -> tmNoEq
-- On INLINE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On INCLUDE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On FSDOC_STANDALONE reduce production tmArrow(tmNoEq) -> tmNoEq
-- On FSDOC reduce production tmArrow(tmNoEq) -> tmNoEq
-- On EXCEPTION reduce production tmArrow(tmNoEq) -> tmNoEq
-- On EQUALS reduce production tmArrow(tmNoEq) -> tmNoEq
-- On EOF reduce production tmArrow(tmNoEq) -> tmNoEq
-- On EFFECT reduce production tmArrow(tmNoEq) -> tmNoEq
-- On DEFAULT reduce production tmArrow(tmNoEq) -> tmNoEq
-- On BY reduce production tmArrow(tmNoEq) -> tmNoEq
-- On ASSUME reduce production tmArrow(tmNoEq) -> tmNoEq
-- On AND reduce production tmArrow(tmNoEq) -> tmNoEq
-- On ABSTRACT reduce production tmArrow(tmNoEq) -> tmNoEq

State 517:
## Known stack suffix:
## tmNoEq RARROW
## LR(1) items:
tmArrow(tmNoEq) -> tmNoEq RARROW . tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 518
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 518:
## Known stack suffix:
## tmNoEq RARROW tmArrow(tmNoEq)
## LR(1) items:
tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On VAL reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On UNOPTEQUALITY reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On UNFOLDABLE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On UNFOLD reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On TYPE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On TOTAL reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On SUB_EFFECT reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On SPLICE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On REIFIABLE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On REFLECTABLE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On PRIVATE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On OPEN reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On OPAQUE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On NOEXTRACT reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On NOEQUALITY reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On NEW_EFFECT reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On NEW reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On MODULE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On LOGIC reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On LET reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On LBRACK_AT reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On IRREDUCIBLE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On INLINE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On INCLUDE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On FSDOC_STANDALONE reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On FSDOC reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On EXCEPTION reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On EQUALS reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On EOF reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On EFFECT reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On DEFAULT reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On BY reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On ASSUME reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On AND reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)
-- On ABSTRACT reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)

State 519:
## Known stack suffix:
## aqual
## LR(1) items:
tmArrow(tmNoEq) -> aqual . tmNoEq RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 520
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 520:
## Known stack suffix:
## aqual tmNoEq
## LR(1) items:
tmArrow(tmNoEq) -> aqual tmNoEq . RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RARROW shift to state 521
## Reductions:

State 521:
## Known stack suffix:
## aqual tmNoEq RARROW
## LR(1) items:
tmArrow(tmNoEq) -> aqual tmNoEq RARROW . tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 522
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 522:
## Known stack suffix:
## aqual tmNoEq RARROW tmArrow(tmNoEq)
## LR(1) items:
tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On VAL reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On UNOPTEQUALITY reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On UNFOLDABLE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On UNFOLD reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On TYPE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On TOTAL reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On SUB_EFFECT reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On SPLICE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On REIFIABLE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On REFLECTABLE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On PRIVATE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On OPEN reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On OPAQUE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On NOEXTRACT reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On NOEQUALITY reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On NEW_EFFECT reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On NEW reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On MODULE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On LOGIC reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On LET reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On LBRACK_AT reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On IRREDUCIBLE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On INLINE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On INCLUDE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On FSDOC_STANDALONE reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On FSDOC reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On EXCEPTION reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On EQUALS reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On EOF reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On EFFECT reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On DEFAULT reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On BY reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On ASSUME reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On AND reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)
-- On ABSTRACT reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)

State 523:
## Known stack suffix:
## LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On VAL reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On UNOPTEQUALITY reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On UNFOLDABLE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On UNFOLD reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On TYPE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On TOTAL reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On SUB_EFFECT reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On SPLICE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On REIFIABLE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On REFLECTABLE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On PRIVATE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On OPEN reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On OPAQUE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On NOEXTRACT reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On NOEQUALITY reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On NEW_EFFECT reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On NEW reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On MODULE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On LOGIC reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On LET reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On LBRACK_AT reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On IRREDUCIBLE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On INLINE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On INCLUDE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On FSDOC_STANDALONE reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On FSDOC reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On EXCEPTION reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On EQUALS reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On EOF reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On EFFECT reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On DEFAULT reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On BY reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On ASSUME reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On AND reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
-- On ABSTRACT reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)

State 524:
## Known stack suffix:
## COLON tmArrow(tmNoEq)
## LR(1) items:
ascribeTyp -> COLON tmArrow(tmNoEq) . option(__anonymous_5) [ EQUALS ]
## Transitions:
-- On BY shift to state 525
-- On option(__anonymous_5) shift to state 527
## Reductions:
-- On EQUALS reduce production option(__anonymous_5) ->

State 525:
## Known stack suffix:
## BY
## LR(1) items:
option(__anonymous_5) -> BY . atomicTerm [ EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## BY atomicTerm
## LR(1) items:
option(__anonymous_5) -> BY atomicTerm . [ EQUALS ]
## Transitions:
## Reductions:
-- On EQUALS reduce production option(__anonymous_5) -> BY atomicTerm

State 527:
## Known stack suffix:
## COLON tmArrow(tmNoEq) option(__anonymous_5)
## LR(1) items:
ascribeTyp -> COLON tmArrow(tmNoEq) option(__anonymous_5) . [ EQUALS ]
## Transitions:
## Reductions:
-- On EQUALS reduce production ascribeTyp -> COLON tmArrow(tmNoEq) option(__anonymous_5)

State 528:
## Known stack suffix:
## maybeFocus tuplePattern ascribeTyp
## LR(1) items:
letbinding -> maybeFocus tuplePattern ascribeTyp . EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 529
## Reductions:

State 529:
## Known stack suffix:
## maybeFocus tuplePattern ascribeTyp EQUALS
## LR(1) items:
letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS . term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 530
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 530:
## Known stack suffix:
## maybeFocus tuplePattern ascribeTyp EQUALS term
## LR(1) items:
letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On UNOPTEQUALITY reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On UNFOLDABLE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On UNFOLD reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On TYPE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On TOTAL reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On SUB_EFFECT reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On SPLICE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On REIFIABLE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On REFLECTABLE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On PRIVATE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On PRAGMA_SET_OPTIONS reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On PRAGMA_RESET_OPTIONS reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On OPEN reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On OPAQUE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On NOEXTRACT reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On NOEQUALITY reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On NEW_EFFECT reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On NEW reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On MODULE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On LOGIC reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On LET reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On LBRACK_AT reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On IRREDUCIBLE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On INLINE_FOR_EXTRACTION reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On INLINE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On INCLUDE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On IN reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On FSDOC_STANDALONE reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On FSDOC reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On EXCEPTION reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On EOF reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On EFFECT reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On DEFAULT reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On ASSUME reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On AND reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term
-- On ABSTRACT reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term

State 531:
## Known stack suffix:
## maybeFocus lidentOrOperator
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator . nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 207
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On patternOrMultibinder shift to state 532
-- On path(uident) shift to state 100
-- On nonempty_list(patternOrMultibinder) shift to state 535
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 534
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 532:
## Known stack suffix:
## patternOrMultibinder
## LR(1) items:
nonempty_list(patternOrMultibinder) -> patternOrMultibinder . [ RARROW EQUALS COLON ]
nonempty_list(patternOrMultibinder) -> patternOrMultibinder . nonempty_list(patternOrMultibinder) [ RARROW EQUALS COLON ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 207
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On patternOrMultibinder shift to state 532
-- On path(uident) shift to state 100
-- On nonempty_list(patternOrMultibinder) shift to state 533
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 534
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On RARROW reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder
-- On EQUALS reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder
-- On COLON reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder

State 533:
## Known stack suffix:
## patternOrMultibinder nonempty_list(patternOrMultibinder)
## LR(1) items:
nonempty_list(patternOrMultibinder) -> patternOrMultibinder nonempty_list(patternOrMultibinder) . [ RARROW EQUALS COLON ]
## Transitions:
## Reductions:
-- On RARROW reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder nonempty_list(patternOrMultibinder)
-- On EQUALS reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder nonempty_list(patternOrMultibinder)
-- On COLON reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder nonempty_list(patternOrMultibinder)

State 534:
## Known stack suffix:
## atomicPattern
## LR(1) items:
patternOrMultibinder -> atomicPattern . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production patternOrMultibinder -> atomicPattern
-- On UINT8 reduce production patternOrMultibinder -> atomicPattern
-- On UINT64 reduce production patternOrMultibinder -> atomicPattern
-- On UINT32 reduce production patternOrMultibinder -> atomicPattern
-- On UINT16 reduce production patternOrMultibinder -> atomicPattern
-- On TVAR reduce production patternOrMultibinder -> atomicPattern
-- On TRUE reduce production patternOrMultibinder -> atomicPattern
-- On STRING reduce production patternOrMultibinder -> atomicPattern
-- On SET_RANGE_OF reduce production patternOrMultibinder -> atomicPattern
-- On REIFY reduce production patternOrMultibinder -> atomicPattern
-- On RARROW reduce production patternOrMultibinder -> atomicPattern
-- On RANGE_OF reduce production patternOrMultibinder -> atomicPattern
-- On NAME reduce production patternOrMultibinder -> atomicPattern
-- On LPAREN_RPAREN reduce production patternOrMultibinder -> atomicPattern
-- On LPAREN reduce production patternOrMultibinder -> atomicPattern
-- On LENS_PAREN_LEFT reduce production patternOrMultibinder -> atomicPattern
-- On LBRACK reduce production patternOrMultibinder -> atomicPattern
-- On LBRACE reduce production patternOrMultibinder -> atomicPattern
-- On INT8 reduce production patternOrMultibinder -> atomicPattern
-- On INT64 reduce production patternOrMultibinder -> atomicPattern
-- On INT32 reduce production patternOrMultibinder -> atomicPattern
-- On INT16 reduce production patternOrMultibinder -> atomicPattern
-- On INT reduce production patternOrMultibinder -> atomicPattern
-- On IEEE64 reduce production patternOrMultibinder -> atomicPattern
-- On IDENT reduce production patternOrMultibinder -> atomicPattern
-- On HASH reduce production patternOrMultibinder -> atomicPattern
-- On FALSE reduce production patternOrMultibinder -> atomicPattern
-- On EQUALS reduce production patternOrMultibinder -> atomicPattern
-- On DOLLAR reduce production patternOrMultibinder -> atomicPattern
-- On COLON reduce production patternOrMultibinder -> atomicPattern
-- On CHAR reduce production patternOrMultibinder -> atomicPattern
-- On BYTEARRAY reduce production patternOrMultibinder -> atomicPattern

State 535:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder)
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) . option(ascribeTyp) EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On COLON shift to state 482
-- On option(ascribeTyp) shift to state 536
-- On ascribeTyp shift to state 539
## Reductions:
-- On EQUALS reduce production option(ascribeTyp) ->

State 536:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp)
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) . EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 537
## Reductions:

State 537:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS . term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 538
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 538:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On UNOPTEQUALITY reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On UNFOLDABLE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On UNFOLD reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On TYPE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On TOTAL reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On SUB_EFFECT reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On SPLICE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On REIFIABLE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On REFLECTABLE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On PRIVATE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On PRAGMA_SET_OPTIONS reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On PRAGMA_RESET_OPTIONS reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On OPEN reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On OPAQUE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On NOEXTRACT reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On NOEQUALITY reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On NEW_EFFECT reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On NEW reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On MODULE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On LOGIC reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On LET reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On LBRACK_AT reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On IRREDUCIBLE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On INLINE_FOR_EXTRACTION reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On INLINE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On INCLUDE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On IN reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On FSDOC_STANDALONE reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On FSDOC reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On EXCEPTION reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On EOF reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On EFFECT reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On DEFAULT reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On ASSUME reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On AND reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
-- On ABSTRACT reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term

State 539:
## Known stack suffix:
## ascribeTyp
## LR(1) items:
option(ascribeTyp) -> ascribeTyp . [ EQUALS ]
## Transitions:
## Reductions:
-- On EQUALS reduce production option(ascribeTyp) -> ascribeTyp

State 540:
## Known stack suffix:
## attribute LET letqualifier letbinding
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding . list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACK_AT shift to state 17
-- On AND shift to state 541
-- On list(attr_letbinding) shift to state 544
-- On attribute shift to state 547
-- On attr_letbinding shift to state 550
## Reductions:
-- On IN reduce production list(attr_letbinding) ->

State 541:
## Known stack suffix:
## AND
## LR(1) items:
attr_letbinding -> AND . letbinding [ LBRACK_AT IN AND ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 542
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On TVAR reduce production boption(SQUIGGLY_RARROW) ->
-- On TRUE reduce production boption(SQUIGGLY_RARROW) ->
-- On STRING reduce production boption(SQUIGGLY_RARROW) ->
-- On SET_RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On REIFY reduce production boption(SQUIGGLY_RARROW) ->
-- On RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On NAME reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN_RPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LENS_PAREN_LEFT reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACK reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACE reduce production boption(SQUIGGLY_RARROW) ->
-- On INT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT reduce production boption(SQUIGGLY_RARROW) ->
-- On IEEE64 reduce production boption(SQUIGGLY_RARROW) ->
-- On IDENT reduce production boption(SQUIGGLY_RARROW) ->
-- On HASH reduce production boption(SQUIGGLY_RARROW) ->
-- On FALSE reduce production boption(SQUIGGLY_RARROW) ->
-- On DOLLAR reduce production boption(SQUIGGLY_RARROW) ->
-- On CHAR reduce production boption(SQUIGGLY_RARROW) ->
-- On BYTEARRAY reduce production boption(SQUIGGLY_RARROW) ->

State 542:
## Known stack suffix:
## AND letbinding
## LR(1) items:
attr_letbinding -> AND letbinding . [ LBRACK_AT IN AND ]
## Transitions:
## Reductions:
-- On LBRACK_AT reduce production attr_letbinding -> AND letbinding
-- On IN reduce production attr_letbinding -> AND letbinding
-- On AND reduce production attr_letbinding -> AND letbinding

State 543:
## Known stack suffix:
## boption(SQUIGGLY_RARROW)
## LR(1) items:
maybeFocus -> boption(SQUIGGLY_RARROW) . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On UINT8 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On UINT64 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On UINT32 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On UINT16 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On TVAR reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On TRUE reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On STRING reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On SET_RANGE_OF reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On REIFY reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On RANGE_OF reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On NAME reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On LPAREN_RPAREN reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On LPAREN reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On LENS_PAREN_LEFT reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On LBRACK reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On LBRACE reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On INT8 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On INT64 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On INT32 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On INT16 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On INT reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On IEEE64 reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On IDENT reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On HASH reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On FALSE reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On DOLLAR reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On CHAR reduce production maybeFocus -> boption(SQUIGGLY_RARROW)
-- On BYTEARRAY reduce production maybeFocus -> boption(SQUIGGLY_RARROW)

State 544:
## Known stack suffix:
## attribute LET letqualifier letbinding list(attr_letbinding)
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) . IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IN shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## attribute LET letqualifier letbinding list(attr_letbinding) IN
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 546
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 546:
## Known stack suffix:
## attribute LET letqualifier letbinding list(attr_letbinding) IN term
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On VAL reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On UNOPTEQUALITY reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On UNFOLDABLE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On UNFOLD reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On TYPE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On TOTAL reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On THEN reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On SUB_EFFECT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On SUBKIND reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On SPLICE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On SEMICOLON reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On RPAREN reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On REIFIABLE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On REFLECTABLE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On RBRACK reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On RBRACE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On PRIVATE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On OPEN reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On OPAQUE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On NOEXTRACT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On NOEQUALITY reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On NEW_EFFECT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On NEW reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On MODULE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On LOGIC reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On LET reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On LBRACK_AT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On IRREDUCIBLE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On INLINE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On INCLUDE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On IN reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On FSDOC_STANDALONE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On FSDOC reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On EXCEPTION reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On EOF reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On END reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On ELSE reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On EFFECT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On DEFAULT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On BAR_RBRACK reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On BAR reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On ASSUME reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On AND reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On ABSTRACT reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
-- On # reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 547:
## Known stack suffix:
## attribute
## LR(1) items:
attr_letbinding -> attribute . AND letbinding [ LBRACK_AT IN AND ]
## Transitions:
-- On AND shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## attribute AND
## LR(1) items:
attr_letbinding -> attribute AND . letbinding [ LBRACK_AT IN AND ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 549
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On TVAR reduce production boption(SQUIGGLY_RARROW) ->
-- On TRUE reduce production boption(SQUIGGLY_RARROW) ->
-- On STRING reduce production boption(SQUIGGLY_RARROW) ->
-- On SET_RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On REIFY reduce production boption(SQUIGGLY_RARROW) ->
-- On RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On NAME reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN_RPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LENS_PAREN_LEFT reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACK reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACE reduce production boption(SQUIGGLY_RARROW) ->
-- On INT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT reduce production boption(SQUIGGLY_RARROW) ->
-- On IEEE64 reduce production boption(SQUIGGLY_RARROW) ->
-- On IDENT reduce production boption(SQUIGGLY_RARROW) ->
-- On HASH reduce production boption(SQUIGGLY_RARROW) ->
-- On FALSE reduce production boption(SQUIGGLY_RARROW) ->
-- On DOLLAR reduce production boption(SQUIGGLY_RARROW) ->
-- On CHAR reduce production boption(SQUIGGLY_RARROW) ->
-- On BYTEARRAY reduce production boption(SQUIGGLY_RARROW) ->

State 549:
## Known stack suffix:
## attribute AND letbinding
## LR(1) items:
attr_letbinding -> attribute AND letbinding . [ LBRACK_AT IN AND ]
## Transitions:
## Reductions:
-- On LBRACK_AT reduce production attr_letbinding -> attribute AND letbinding
-- On IN reduce production attr_letbinding -> attribute AND letbinding
-- On AND reduce production attr_letbinding -> attribute AND letbinding

State 550:
## Known stack suffix:
## attr_letbinding
## LR(1) items:
list(attr_letbinding) -> attr_letbinding . list(attr_letbinding) [ IN ]
## Transitions:
-- On LBRACK_AT shift to state 17
-- On AND shift to state 541
-- On list(attr_letbinding) shift to state 551
-- On attribute shift to state 547
-- On attr_letbinding shift to state 550
## Reductions:
-- On IN reduce production list(attr_letbinding) ->

State 551:
## Known stack suffix:
## attr_letbinding list(attr_letbinding)
## LR(1) items:
list(attr_letbinding) -> attr_letbinding list(attr_letbinding) . [ IN ]
## Transitions:
## Reductions:
-- On IN reduce production list(attr_letbinding) -> attr_letbinding list(attr_letbinding)

State 552:
## Known stack suffix:
## LBRACE noSeqTerm
## LR(1) items:
option(__anonymous_9) -> LBRACE noSeqTerm . RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 553
## Reductions:

State 553:
## Known stack suffix:
## LBRACE noSeqTerm RBRACE
## LR(1) items:
option(__anonymous_9) -> LBRACE noSeqTerm RBRACE . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On VAL reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On UNOPTEQUALITY reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On UNFOLDABLE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On UNFOLD reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On TYPE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On TOTAL reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On THEN reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On SUB_EFFECT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On SUBTYPE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On SUBKIND reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On SQUIGGLY_RARROW reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On SPLICE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On SEMICOLON_SEMICOLON reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On SEMICOLON reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On RPAREN reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On REIFIABLE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On REFLECTABLE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On RBRACK reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On RBRACE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On RARROW reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On PRIVATE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On PIPE_RIGHT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX4 reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX3 reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX2 reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX1 reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX0d reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX0c reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX0b reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPINFIX0a reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPEN reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On OPAQUE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On NOEXTRACT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On NOEQUALITY reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On NEW_EFFECT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On NEW reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On MODULE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On MINUS reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On LOGIC reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On LET reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On LENS_PAREN_RIGHT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On LBRACK_AT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On IRREDUCIBLE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On INLINE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On INCLUDE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On IN reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On IMPLIES reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On IFF reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On FSDOC_STANDALONE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On FSDOC reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On EXCEPTION reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On EQUALS reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On EOF reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On END reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On ELSE reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On EFFECT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On DISJUNCTION reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On DEFAULT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On CONJUNCTION reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On COMMA reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On COLON_EQUALS reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On COLON_COLON reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On BY reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On BAR_RBRACK reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On BAR reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On BACKTICK reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On ASSUME reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On AND reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On AMP reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On ABSTRACT reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
-- On # reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 554:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt . RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On RPAREN shift to state 555
## Reductions:

State 555:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On UNOPTEQUALITY reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On UNFOLDABLE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On UNFOLD reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On UNDERSCORE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On TYPE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On TVAR reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On TOTAL reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On SUB_EFFECT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On SPLICE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On REIFIABLE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On REFLECTABLE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On PRIVATE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On PRAGMA_SET_OPTIONS reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On OPEN reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On OPAQUE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On NOEXTRACT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On NOEQUALITY reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On NEW_EFFECT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On NEW reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On MODULE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On LPAREN reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On LOGIC reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On LET reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On LBRACK_AT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On IRREDUCIBLE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On INLINE_FOR_EXTRACTION reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On INLINE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On INCLUDE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On IDENT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On HASH reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On FSDOC_STANDALONE reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On FSDOC reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On EXCEPTION reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On EQUALS reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On EOF reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On EFFECT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On DOT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On DOLLAR reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On DEFAULT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On COLON reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On ASSUME reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On AND reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
-- On ABSTRACT reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN

State 556:
## Known stack suffix:
## aqualified(lidentOrUnderscore)
## LR(1) items:
nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) . [ COLON ]
nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) . nonempty_list(aqualified(lidentOrUnderscore)) [ COLON ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lidentOrUnderscore)) shift to state 557
-- On lidentOrUnderscore shift to state 284
-- On aqualified(lidentOrUnderscore) shift to state 556
-- On aqualUniverses shift to state 288
## Reductions:
-- On COLON reduce production nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore)

State 557:
## Known stack suffix:
## aqualified(lidentOrUnderscore) nonempty_list(aqualified(lidentOrUnderscore))
## LR(1) items:
nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) nonempty_list(aqualified(lidentOrUnderscore)) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) nonempty_list(aqualified(lidentOrUnderscore))

State 558:
## Known stack suffix:
## FORALL binders
## LR(1) items:
typ -> FORALL binders . DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On DOT shift to state 559
## Reductions:

State 559:
## Known stack suffix:
## FORALL binders DOT
## LR(1) items:
typ -> FORALL binders DOT . trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACE_COLON_PATTERN shift to state 293
-- On trigger shift to state 560
## Reductions:
-- On UNDERSCORE reduce production trigger ->
-- On UINT8 reduce production trigger ->
-- On UINT64 reduce production trigger ->
-- On UINT32 reduce production trigger ->
-- On UINT16 reduce production trigger ->
-- On TVAR reduce production trigger ->
-- On TRY reduce production trigger ->
-- On TRUE reduce production trigger ->
-- On TILDE reduce production trigger ->
-- On SYNTH reduce production trigger ->
-- On STRING reduce production trigger ->
-- On SET_RANGE_OF reduce production trigger ->
-- On REQUIRES reduce production trigger ->
-- On REIFY reduce production trigger ->
-- On RANGE_OF reduce production trigger ->
-- On QUOTE reduce production trigger ->
-- On PERC_BACKTICK reduce production trigger ->
-- On PERCENT_LBRACK reduce production trigger ->
-- On OPPREFIX reduce production trigger ->
-- On NAME reduce production trigger ->
-- On MINUS reduce production trigger ->
-- On MATCH reduce production trigger ->
-- On LPAREN_RPAREN reduce production trigger ->
-- On LPAREN reduce production trigger ->
-- On LET reduce production trigger ->
-- On LENS_PAREN_LEFT reduce production trigger ->
-- On LBRACK_BAR reduce production trigger ->
-- On LBRACK_AT reduce production trigger ->
-- On LBRACK reduce production trigger ->
-- On LBRACE reduce production trigger ->
-- On INT8 reduce production trigger ->
-- On INT64 reduce production trigger ->
-- On INT32 reduce production trigger ->
-- On INT16 reduce production trigger ->
-- On INT reduce production trigger ->
-- On IF reduce production trigger ->
-- On IEEE64 reduce production trigger ->
-- On IDENT reduce production trigger ->
-- On HASH reduce production trigger ->
-- On FUNCTION reduce production trigger ->
-- On FUN reduce production trigger ->
-- On FORALL reduce production trigger ->
-- On FALSE reduce production trigger ->
-- On EXISTS reduce production trigger ->
-- On EQUALS reduce production trigger ->
-- On ENSURES reduce production trigger ->
-- On DOLLAR reduce production trigger ->
-- On CHAR reduce production trigger ->
-- On BYTEARRAY reduce production trigger ->
-- On BEGIN reduce production trigger ->
-- On BANG_LBRACE reduce production trigger ->
-- On BACKTICK_HASH reduce production trigger ->
-- On BACKTICK_AT reduce production trigger ->
-- On BACKTICK reduce production trigger ->
-- On ATTRIBUTES reduce production trigger ->
-- On ASSUME reduce production trigger ->
-- On ASSERT reduce production trigger ->

State 560:
## Known stack suffix:
## FORALL binders DOT trigger
## LR(1) items:
typ -> FORALL binders DOT trigger . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 561
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 561:
## Known stack suffix:
## FORALL binders DOT trigger noSeqTerm
## LR(1) items:
typ -> FORALL binders DOT trigger noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On VAL reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On UNOPTEQUALITY reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On UNFOLDABLE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On UNFOLD reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On TYPE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On TOTAL reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On THEN reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On SUB_EFFECT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On SUBKIND reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On SPLICE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On SEMICOLON reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On RPAREN reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On REIFIABLE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On REFLECTABLE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On RBRACK reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On RBRACE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On PRIVATE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On OPEN reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On OPAQUE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On NOEXTRACT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On NOEQUALITY reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On NEW_EFFECT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On NEW reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On MODULE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On LOGIC reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On LET reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On LENS_PAREN_RIGHT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On LBRACK_AT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On IRREDUCIBLE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On INLINE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On INCLUDE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On IN reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On FSDOC_STANDALONE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On FSDOC reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On EXCEPTION reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On EOF reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On END reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On ELSE reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On EFFECT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On DEFAULT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On BAR_RBRACK reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On BAR reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On ASSUME reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On AND reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On ABSTRACT reduce production typ -> FORALL binders DOT trigger noSeqTerm
-- On # reduce production typ -> FORALL binders DOT trigger noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production typ -> FORALL binders DOT trigger noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 562:
## Known stack suffix:
## DOT_LPAREN term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## DOT_LPAREN term RPAREN
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 463
## Reductions:
-- On WITH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On VAL reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNOPTEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNIV_HASH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNFOLDABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNFOLD reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UNDERSCORE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT8 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT32 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On UINT16 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TYPE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TVAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TRUE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On TOTAL reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On THEN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SUB_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SUBTYPE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SUBKIND reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On STRING reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SQUIGGLY_RARROW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SPLICE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SET_RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SEMICOLON_SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On SEMICOLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On REIFY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On REIFIABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On REFLECTABLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RARROW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On RANGE_OF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PRIVATE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PRAGMA_SET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PIPE_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On PERCENT_LBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPPREFIX reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX4 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX3 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX2 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX1 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0d reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0c reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0b reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPINFIX0a reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPEN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On OPAQUE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NOEXTRACT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NOEQUALITY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NEW_EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NEW reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On NAME reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On MODULE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On MINUS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LPAREN_RPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LPAREN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LOGIC reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LET reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LENS_PAREN_RIGHT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LENS_PAREN_LEFT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LBRACK_BAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LBRACK_AT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On LBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IRREDUCIBLE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT8 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT32 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT16 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INLINE_FOR_EXTRACTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INLINE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On INCLUDE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IMPLIES reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IFF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IEEE64 reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On IDENT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On HASH reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On FSDOC_STANDALONE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On FSDOC reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On FALSE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EXCEPTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EQUALS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EOF reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On END reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On ELSE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On EFFECT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On DISJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On DEFAULT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On CONJUNCTION reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On COMMA reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On COLON_EQUALS reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On COLON_COLON reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On CHAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BYTEARRAY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BY reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BEGIN reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BAR_RBRACK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BAR reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BANG_LBRACE reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On BACKTICK reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On ASSUME reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On AND reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On AMP reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On ABSTRACT reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
-- On # reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 564:
## Known stack suffix:
## universe
## LR(1) items:
argTerm -> universe . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production argTerm -> universe
-- On VAL reduce production argTerm -> universe
-- On UNOPTEQUALITY reduce production argTerm -> universe
-- On UNIV_HASH reduce production argTerm -> universe
-- On UNFOLDABLE reduce production argTerm -> universe
-- On UNFOLD reduce production argTerm -> universe
-- On UNDERSCORE reduce production argTerm -> universe
-- On UINT8 reduce production argTerm -> universe
-- On UINT64 reduce production argTerm -> universe
-- On UINT32 reduce production argTerm -> universe
-- On UINT16 reduce production argTerm -> universe
-- On TYPE reduce production argTerm -> universe
-- On TVAR reduce production argTerm -> universe
-- On TRUE reduce production argTerm -> universe
-- On TOTAL reduce production argTerm -> universe
-- On THEN reduce production argTerm -> universe
-- On SUB_EFFECT reduce production argTerm -> universe
-- On SUBTYPE reduce production argTerm -> universe
-- On SUBKIND reduce production argTerm -> universe
-- On STRING reduce production argTerm -> universe
-- On SQUIGGLY_RARROW reduce production argTerm -> universe
-- On SPLICE reduce production argTerm -> universe
-- On SET_RANGE_OF reduce production argTerm -> universe
-- On SEMICOLON_SEMICOLON reduce production argTerm -> universe
-- On SEMICOLON reduce production argTerm -> universe
-- On RPAREN reduce production argTerm -> universe
-- On REIFY reduce production argTerm -> universe
-- On REIFIABLE reduce production argTerm -> universe
-- On REFLECTABLE reduce production argTerm -> universe
-- On RBRACK reduce production argTerm -> universe
-- On RBRACE reduce production argTerm -> universe
-- On RARROW reduce production argTerm -> universe
-- On RANGE_OF reduce production argTerm -> universe
-- On PRIVATE reduce production argTerm -> universe
-- On PRAGMA_SET_OPTIONS reduce production argTerm -> universe
-- On PRAGMA_RESET_OPTIONS reduce production argTerm -> universe
-- On PIPE_RIGHT reduce production argTerm -> universe
-- On PERCENT_LBRACK reduce production argTerm -> universe
-- On OPPREFIX reduce production argTerm -> universe
-- On OPINFIX4 reduce production argTerm -> universe
-- On OPINFIX3 reduce production argTerm -> universe
-- On OPINFIX2 reduce production argTerm -> universe
-- On OPINFIX1 reduce production argTerm -> universe
-- On OPINFIX0d reduce production argTerm -> universe
-- On OPINFIX0c reduce production argTerm -> universe
-- On OPINFIX0b reduce production argTerm -> universe
-- On OPINFIX0a reduce production argTerm -> universe
-- On OPEN reduce production argTerm -> universe
-- On OPAQUE reduce production argTerm -> universe
-- On NOEXTRACT reduce production argTerm -> universe
-- On NOEQUALITY reduce production argTerm -> universe
-- On NEW_EFFECT reduce production argTerm -> universe
-- On NEW reduce production argTerm -> universe
-- On NAME reduce production argTerm -> universe
-- On MODULE reduce production argTerm -> universe
-- On MINUS reduce production argTerm -> universe
-- On LPAREN_RPAREN reduce production argTerm -> universe
-- On LPAREN reduce production argTerm -> universe
-- On LOGIC reduce production argTerm -> universe
-- On LET reduce production argTerm -> universe
-- On LENS_PAREN_RIGHT reduce production argTerm -> universe
-- On LENS_PAREN_LEFT reduce production argTerm -> universe
-- On LBRACK_BAR reduce production argTerm -> universe
-- On LBRACK_AT reduce production argTerm -> universe
-- On LBRACK reduce production argTerm -> universe
-- On LBRACE reduce production argTerm -> universe
-- On IRREDUCIBLE reduce production argTerm -> universe
-- On INT8 reduce production argTerm -> universe
-- On INT64 reduce production argTerm -> universe
-- On INT32 reduce production argTerm -> universe
-- On INT16 reduce production argTerm -> universe
-- On INT reduce production argTerm -> universe
-- On INLINE_FOR_EXTRACTION reduce production argTerm -> universe
-- On INLINE reduce production argTerm -> universe
-- On INCLUDE reduce production argTerm -> universe
-- On IN reduce production argTerm -> universe
-- On IMPLIES reduce production argTerm -> universe
-- On IFF reduce production argTerm -> universe
-- On IEEE64 reduce production argTerm -> universe
-- On IDENT reduce production argTerm -> universe
-- On HASH reduce production argTerm -> universe
-- On FSDOC_STANDALONE reduce production argTerm -> universe
-- On FSDOC reduce production argTerm -> universe
-- On FALSE reduce production argTerm -> universe
-- On EXCEPTION reduce production argTerm -> universe
-- On EQUALS reduce production argTerm -> universe
-- On EOF reduce production argTerm -> universe
-- On END reduce production argTerm -> universe
-- On ELSE reduce production argTerm -> universe
-- On EFFECT reduce production argTerm -> universe
-- On DISJUNCTION reduce production argTerm -> universe
-- On DEFAULT reduce production argTerm -> universe
-- On CONJUNCTION reduce production argTerm -> universe
-- On COMMA reduce production argTerm -> universe
-- On COLON_EQUALS reduce production argTerm -> universe
-- On COLON_COLON reduce production argTerm -> universe
-- On CHAR reduce production argTerm -> universe
-- On BYTEARRAY reduce production argTerm -> universe
-- On BY reduce production argTerm -> universe
-- On BEGIN reduce production argTerm -> universe
-- On BAR_RBRACK reduce production argTerm -> universe
-- On BAR reduce production argTerm -> universe
-- On BANG_LBRACE reduce production argTerm -> universe
-- On BACKTICK reduce production argTerm -> universe
-- On ASSUME reduce production argTerm -> universe
-- On AND reduce production argTerm -> universe
-- On AMP reduce production argTerm -> universe
-- On ABSTRACT reduce production argTerm -> universe
-- On # reduce production argTerm -> universe
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production argTerm -> universe
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 565:
## Known stack suffix:
## indexingTerm list(argTerm)
## LR(1) items:
appTerm -> indexingTerm list(argTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production appTerm -> indexingTerm list(argTerm)
-- On VAL reduce production appTerm -> indexingTerm list(argTerm)
-- On UNOPTEQUALITY reduce production appTerm -> indexingTerm list(argTerm)
-- On UNFOLDABLE reduce production appTerm -> indexingTerm list(argTerm)
-- On UNFOLD reduce production appTerm -> indexingTerm list(argTerm)
-- On TYPE reduce production appTerm -> indexingTerm list(argTerm)
-- On TOTAL reduce production appTerm -> indexingTerm list(argTerm)
-- On THEN reduce production appTerm -> indexingTerm list(argTerm)
-- On SUB_EFFECT reduce production appTerm -> indexingTerm list(argTerm)
-- On SUBTYPE reduce production appTerm -> indexingTerm list(argTerm)
-- On SUBKIND reduce production appTerm -> indexingTerm list(argTerm)
-- On SQUIGGLY_RARROW reduce production appTerm -> indexingTerm list(argTerm)
-- On SPLICE reduce production appTerm -> indexingTerm list(argTerm)
-- On SEMICOLON_SEMICOLON reduce production appTerm -> indexingTerm list(argTerm)
-- On SEMICOLON reduce production appTerm -> indexingTerm list(argTerm)
-- On RPAREN reduce production appTerm -> indexingTerm list(argTerm)
-- On REIFIABLE reduce production appTerm -> indexingTerm list(argTerm)
-- On REFLECTABLE reduce production appTerm -> indexingTerm list(argTerm)
-- On RBRACK reduce production appTerm -> indexingTerm list(argTerm)
-- On RBRACE reduce production appTerm -> indexingTerm list(argTerm)
-- On RARROW reduce production appTerm -> indexingTerm list(argTerm)
-- On PRIVATE reduce production appTerm -> indexingTerm list(argTerm)
-- On PRAGMA_SET_OPTIONS reduce production appTerm -> indexingTerm list(argTerm)
-- On PRAGMA_RESET_OPTIONS reduce production appTerm -> indexingTerm list(argTerm)
-- On PIPE_RIGHT reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX4 reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX3 reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX2 reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX1 reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX0d reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX0c reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX0b reduce production appTerm -> indexingTerm list(argTerm)
-- On OPINFIX0a reduce production appTerm -> indexingTerm list(argTerm)
-- On OPEN reduce production appTerm -> indexingTerm list(argTerm)
-- On OPAQUE reduce production appTerm -> indexingTerm list(argTerm)
-- On NOEXTRACT reduce production appTerm -> indexingTerm list(argTerm)
-- On NOEQUALITY reduce production appTerm -> indexingTerm list(argTerm)
-- On NEW_EFFECT reduce production appTerm -> indexingTerm list(argTerm)
-- On NEW reduce production appTerm -> indexingTerm list(argTerm)
-- On MODULE reduce production appTerm -> indexingTerm list(argTerm)
-- On MINUS reduce production appTerm -> indexingTerm list(argTerm)
-- On LOGIC reduce production appTerm -> indexingTerm list(argTerm)
-- On LET reduce production appTerm -> indexingTerm list(argTerm)
-- On LENS_PAREN_RIGHT reduce production appTerm -> indexingTerm list(argTerm)
-- On LBRACK_AT reduce production appTerm -> indexingTerm list(argTerm)
-- On LBRACE reduce production appTerm -> indexingTerm list(argTerm)
-- On IRREDUCIBLE reduce production appTerm -> indexingTerm list(argTerm)
-- On INLINE_FOR_EXTRACTION reduce production appTerm -> indexingTerm list(argTerm)
-- On INLINE reduce production appTerm -> indexingTerm list(argTerm)
-- On INCLUDE reduce production appTerm -> indexingTerm list(argTerm)
-- On IN reduce production appTerm -> indexingTerm list(argTerm)
-- On IMPLIES reduce production appTerm -> indexingTerm list(argTerm)
-- On IFF reduce production appTerm -> indexingTerm list(argTerm)
-- On FSDOC_STANDALONE reduce production appTerm -> indexingTerm list(argTerm)
-- On FSDOC reduce production appTerm -> indexingTerm list(argTerm)
-- On EXCEPTION reduce production appTerm -> indexingTerm list(argTerm)
-- On EQUALS reduce production appTerm -> indexingTerm list(argTerm)
-- On EOF reduce production appTerm -> indexingTerm list(argTerm)
-- On END reduce production appTerm -> indexingTerm list(argTerm)
-- On ELSE reduce production appTerm -> indexingTerm list(argTerm)
-- On EFFECT reduce production appTerm -> indexingTerm list(argTerm)
-- On DISJUNCTION reduce production appTerm -> indexingTerm list(argTerm)
-- On DEFAULT reduce production appTerm -> indexingTerm list(argTerm)
-- On CONJUNCTION reduce production appTerm -> indexingTerm list(argTerm)
-- On COMMA reduce production appTerm -> indexingTerm list(argTerm)
-- On COLON_EQUALS reduce production appTerm -> indexingTerm list(argTerm)
-- On COLON_COLON reduce production appTerm -> indexingTerm list(argTerm)
-- On BY reduce production appTerm -> indexingTerm list(argTerm)
-- On BAR_RBRACK reduce production appTerm -> indexingTerm list(argTerm)
-- On BAR reduce production appTerm -> indexingTerm list(argTerm)
-- On BACKTICK reduce production appTerm -> indexingTerm list(argTerm)
-- On ASSUME reduce production appTerm -> indexingTerm list(argTerm)
-- On AND reduce production appTerm -> indexingTerm list(argTerm)
-- On AMP reduce production appTerm -> indexingTerm list(argTerm)
-- On ABSTRACT reduce production appTerm -> indexingTerm list(argTerm)
-- On # reduce production appTerm -> indexingTerm list(argTerm)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production appTerm -> indexingTerm list(argTerm)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 566:
## Known stack suffix:
## indexingTerm
## LR(1) items:
argTerm -> indexingTerm . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production argTerm -> indexingTerm
-- On VAL reduce production argTerm -> indexingTerm
-- On UNOPTEQUALITY reduce production argTerm -> indexingTerm
-- On UNIV_HASH reduce production argTerm -> indexingTerm
-- On UNFOLDABLE reduce production argTerm -> indexingTerm
-- On UNFOLD reduce production argTerm -> indexingTerm
-- On UNDERSCORE reduce production argTerm -> indexingTerm
-- On UINT8 reduce production argTerm -> indexingTerm
-- On UINT64 reduce production argTerm -> indexingTerm
-- On UINT32 reduce production argTerm -> indexingTerm
-- On UINT16 reduce production argTerm -> indexingTerm
-- On TYPE reduce production argTerm -> indexingTerm
-- On TVAR reduce production argTerm -> indexingTerm
-- On TRUE reduce production argTerm -> indexingTerm
-- On TOTAL reduce production argTerm -> indexingTerm
-- On THEN reduce production argTerm -> indexingTerm
-- On SUB_EFFECT reduce production argTerm -> indexingTerm
-- On SUBTYPE reduce production argTerm -> indexingTerm
-- On SUBKIND reduce production argTerm -> indexingTerm
-- On STRING reduce production argTerm -> indexingTerm
-- On SQUIGGLY_RARROW reduce production argTerm -> indexingTerm
-- On SPLICE reduce production argTerm -> indexingTerm
-- On SET_RANGE_OF reduce production argTerm -> indexingTerm
-- On SEMICOLON_SEMICOLON reduce production argTerm -> indexingTerm
-- On SEMICOLON reduce production argTerm -> indexingTerm
-- On RPAREN reduce production argTerm -> indexingTerm
-- On REIFY reduce production argTerm -> indexingTerm
-- On REIFIABLE reduce production argTerm -> indexingTerm
-- On REFLECTABLE reduce production argTerm -> indexingTerm
-- On RBRACK reduce production argTerm -> indexingTerm
-- On RBRACE reduce production argTerm -> indexingTerm
-- On RARROW reduce production argTerm -> indexingTerm
-- On RANGE_OF reduce production argTerm -> indexingTerm
-- On PRIVATE reduce production argTerm -> indexingTerm
-- On PRAGMA_SET_OPTIONS reduce production argTerm -> indexingTerm
-- On PRAGMA_RESET_OPTIONS reduce production argTerm -> indexingTerm
-- On PIPE_RIGHT reduce production argTerm -> indexingTerm
-- On PERCENT_LBRACK reduce production argTerm -> indexingTerm
-- On OPPREFIX reduce production argTerm -> indexingTerm
-- On OPINFIX4 reduce production argTerm -> indexingTerm
-- On OPINFIX3 reduce production argTerm -> indexingTerm
-- On OPINFIX2 reduce production argTerm -> indexingTerm
-- On OPINFIX1 reduce production argTerm -> indexingTerm
-- On OPINFIX0d reduce production argTerm -> indexingTerm
-- On OPINFIX0c reduce production argTerm -> indexingTerm
-- On OPINFIX0b reduce production argTerm -> indexingTerm
-- On OPINFIX0a reduce production argTerm -> indexingTerm
-- On OPEN reduce production argTerm -> indexingTerm
-- On OPAQUE reduce production argTerm -> indexingTerm
-- On NOEXTRACT reduce production argTerm -> indexingTerm
-- On NOEQUALITY reduce production argTerm -> indexingTerm
-- On NEW_EFFECT reduce production argTerm -> indexingTerm
-- On NEW reduce production argTerm -> indexingTerm
-- On NAME reduce production argTerm -> indexingTerm
-- On MODULE reduce production argTerm -> indexingTerm
-- On MINUS reduce production argTerm -> indexingTerm
-- On LPAREN_RPAREN reduce production argTerm -> indexingTerm
-- On LPAREN reduce production argTerm -> indexingTerm
-- On LOGIC reduce production argTerm -> indexingTerm
-- On LET reduce production argTerm -> indexingTerm
-- On LENS_PAREN_RIGHT reduce production argTerm -> indexingTerm
-- On LENS_PAREN_LEFT reduce production argTerm -> indexingTerm
-- On LBRACK_BAR reduce production argTerm -> indexingTerm
-- On LBRACK_AT reduce production argTerm -> indexingTerm
-- On LBRACK reduce production argTerm -> indexingTerm
-- On LBRACE reduce production argTerm -> indexingTerm
-- On IRREDUCIBLE reduce production argTerm -> indexingTerm
-- On INT8 reduce production argTerm -> indexingTerm
-- On INT64 reduce production argTerm -> indexingTerm
-- On INT32 reduce production argTerm -> indexingTerm
-- On INT16 reduce production argTerm -> indexingTerm
-- On INT reduce production argTerm -> indexingTerm
-- On INLINE_FOR_EXTRACTION reduce production argTerm -> indexingTerm
-- On INLINE reduce production argTerm -> indexingTerm
-- On INCLUDE reduce production argTerm -> indexingTerm
-- On IN reduce production argTerm -> indexingTerm
-- On IMPLIES reduce production argTerm -> indexingTerm
-- On IFF reduce production argTerm -> indexingTerm
-- On IEEE64 reduce production argTerm -> indexingTerm
-- On IDENT reduce production argTerm -> indexingTerm
-- On HASH reduce production argTerm -> indexingTerm
-- On FSDOC_STANDALONE reduce production argTerm -> indexingTerm
-- On FSDOC reduce production argTerm -> indexingTerm
-- On FALSE reduce production argTerm -> indexingTerm
-- On EXCEPTION reduce production argTerm -> indexingTerm
-- On EQUALS reduce production argTerm -> indexingTerm
-- On EOF reduce production argTerm -> indexingTerm
-- On END reduce production argTerm -> indexingTerm
-- On ELSE reduce production argTerm -> indexingTerm
-- On EFFECT reduce production argTerm -> indexingTerm
-- On DISJUNCTION reduce production argTerm -> indexingTerm
-- On DEFAULT reduce production argTerm -> indexingTerm
-- On CONJUNCTION reduce production argTerm -> indexingTerm
-- On COMMA reduce production argTerm -> indexingTerm
-- On COLON_EQUALS reduce production argTerm -> indexingTerm
-- On COLON_COLON reduce production argTerm -> indexingTerm
-- On CHAR reduce production argTerm -> indexingTerm
-- On BYTEARRAY reduce production argTerm -> indexingTerm
-- On BY reduce production argTerm -> indexingTerm
-- On BEGIN reduce production argTerm -> indexingTerm
-- On BAR_RBRACK reduce production argTerm -> indexingTerm
-- On BAR reduce production argTerm -> indexingTerm
-- On BANG_LBRACE reduce production argTerm -> indexingTerm
-- On BACKTICK reduce production argTerm -> indexingTerm
-- On ASSUME reduce production argTerm -> indexingTerm
-- On AND reduce production argTerm -> indexingTerm
-- On AMP reduce production argTerm -> indexingTerm
-- On ABSTRACT reduce production argTerm -> indexingTerm
-- On # reduce production argTerm -> indexingTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production argTerm -> indexingTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 567:
## Known stack suffix:
## argTerm
## LR(1) items:
list(argTerm) -> argTerm . list(argTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNIV_HASH shift to state 221
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 238
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On universe shift to state 564
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(argTerm) shift to state 568
-- On lident shift to state 80
-- On indexingTerm shift to state 566
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On argTerm shift to state 567
## Reductions:
-- On WITH reduce production list(argTerm) ->
-- On VAL reduce production list(argTerm) ->
-- On UNOPTEQUALITY reduce production list(argTerm) ->
-- On UNFOLDABLE reduce production list(argTerm) ->
-- On UNFOLD reduce production list(argTerm) ->
-- On TYPE reduce production list(argTerm) ->
-- On TOTAL reduce production list(argTerm) ->
-- On THEN reduce production list(argTerm) ->
-- On SUB_EFFECT reduce production list(argTerm) ->
-- On SUBTYPE reduce production list(argTerm) ->
-- On SUBKIND reduce production list(argTerm) ->
-- On SQUIGGLY_RARROW reduce production list(argTerm) ->
-- On SPLICE reduce production list(argTerm) ->
-- On SEMICOLON_SEMICOLON reduce production list(argTerm) ->
-- On SEMICOLON reduce production list(argTerm) ->
-- On RPAREN reduce production list(argTerm) ->
-- On REIFIABLE reduce production list(argTerm) ->
-- On REFLECTABLE reduce production list(argTerm) ->
-- On RBRACK reduce production list(argTerm) ->
-- On RBRACE reduce production list(argTerm) ->
-- On RARROW reduce production list(argTerm) ->
-- On PRIVATE reduce production list(argTerm) ->
-- On PRAGMA_SET_OPTIONS reduce production list(argTerm) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(argTerm) ->
-- On PIPE_RIGHT reduce production list(argTerm) ->
-- On OPINFIX4 reduce production list(argTerm) ->
-- On OPINFIX3 reduce production list(argTerm) ->
-- On OPINFIX2 reduce production list(argTerm) ->
-- On OPINFIX1 reduce production list(argTerm) ->
-- On OPINFIX0d reduce production list(argTerm) ->
-- On OPINFIX0c reduce production list(argTerm) ->
-- On OPINFIX0b reduce production list(argTerm) ->
-- On OPINFIX0a reduce production list(argTerm) ->
-- On OPEN reduce production list(argTerm) ->
-- On OPAQUE reduce production list(argTerm) ->
-- On NOEXTRACT reduce production list(argTerm) ->
-- On NOEQUALITY reduce production list(argTerm) ->
-- On NEW_EFFECT reduce production list(argTerm) ->
-- On NEW reduce production list(argTerm) ->
-- On MODULE reduce production list(argTerm) ->
-- On MINUS reduce production list(argTerm) ->
-- On LOGIC reduce production list(argTerm) ->
-- On LET reduce production list(argTerm) ->
-- On LENS_PAREN_RIGHT reduce production list(argTerm) ->
-- On LBRACK_AT reduce production list(argTerm) ->
-- On LBRACE reduce production list(argTerm) ->
-- On IRREDUCIBLE reduce production list(argTerm) ->
-- On INLINE_FOR_EXTRACTION reduce production list(argTerm) ->
-- On INLINE reduce production list(argTerm) ->
-- On INCLUDE reduce production list(argTerm) ->
-- On IN reduce production list(argTerm) ->
-- On IMPLIES reduce production list(argTerm) ->
-- On IFF reduce production list(argTerm) ->
-- On FSDOC_STANDALONE reduce production list(argTerm) ->
-- On FSDOC reduce production list(argTerm) ->
-- On EXCEPTION reduce production list(argTerm) ->
-- On EQUALS reduce production list(argTerm) ->
-- On EOF reduce production list(argTerm) ->
-- On END reduce production list(argTerm) ->
-- On ELSE reduce production list(argTerm) ->
-- On EFFECT reduce production list(argTerm) ->
-- On DISJUNCTION reduce production list(argTerm) ->
-- On DEFAULT reduce production list(argTerm) ->
-- On CONJUNCTION reduce production list(argTerm) ->
-- On COMMA reduce production list(argTerm) ->
-- On COLON_EQUALS reduce production list(argTerm) ->
-- On COLON_COLON reduce production list(argTerm) ->
-- On BY reduce production list(argTerm) ->
-- On BAR_RBRACK reduce production list(argTerm) ->
-- On BAR reduce production list(argTerm) ->
-- On BACKTICK reduce production list(argTerm) ->
-- On ASSUME reduce production list(argTerm) ->
-- On AND reduce production list(argTerm) ->
-- On AMP reduce production list(argTerm) ->
-- On ABSTRACT reduce production list(argTerm) ->
-- On # reduce production list(argTerm) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production list(argTerm) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 568:
## Known stack suffix:
## argTerm list(argTerm)
## LR(1) items:
list(argTerm) -> argTerm list(argTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production list(argTerm) -> argTerm list(argTerm)
-- On VAL reduce production list(argTerm) -> argTerm list(argTerm)
-- On UNOPTEQUALITY reduce production list(argTerm) -> argTerm list(argTerm)
-- On UNFOLDABLE reduce production list(argTerm) -> argTerm list(argTerm)
-- On UNFOLD reduce production list(argTerm) -> argTerm list(argTerm)
-- On TYPE reduce production list(argTerm) -> argTerm list(argTerm)
-- On TOTAL reduce production list(argTerm) -> argTerm list(argTerm)
-- On THEN reduce production list(argTerm) -> argTerm list(argTerm)
-- On SUB_EFFECT reduce production list(argTerm) -> argTerm list(argTerm)
-- On SUBTYPE reduce production list(argTerm) -> argTerm list(argTerm)
-- On SUBKIND reduce production list(argTerm) -> argTerm list(argTerm)
-- On SQUIGGLY_RARROW reduce production list(argTerm) -> argTerm list(argTerm)
-- On SPLICE reduce production list(argTerm) -> argTerm list(argTerm)
-- On SEMICOLON_SEMICOLON reduce production list(argTerm) -> argTerm list(argTerm)
-- On SEMICOLON reduce production list(argTerm) -> argTerm list(argTerm)
-- On RPAREN reduce production list(argTerm) -> argTerm list(argTerm)
-- On REIFIABLE reduce production list(argTerm) -> argTerm list(argTerm)
-- On REFLECTABLE reduce production list(argTerm) -> argTerm list(argTerm)
-- On RBRACK reduce production list(argTerm) -> argTerm list(argTerm)
-- On RBRACE reduce production list(argTerm) -> argTerm list(argTerm)
-- On RARROW reduce production list(argTerm) -> argTerm list(argTerm)
-- On PRIVATE reduce production list(argTerm) -> argTerm list(argTerm)
-- On PRAGMA_SET_OPTIONS reduce production list(argTerm) -> argTerm list(argTerm)
-- On PRAGMA_RESET_OPTIONS reduce production list(argTerm) -> argTerm list(argTerm)
-- On PIPE_RIGHT reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX4 reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX3 reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX2 reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX1 reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX0d reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX0c reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX0b reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPINFIX0a reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPEN reduce production list(argTerm) -> argTerm list(argTerm)
-- On OPAQUE reduce production list(argTerm) -> argTerm list(argTerm)
-- On NOEXTRACT reduce production list(argTerm) -> argTerm list(argTerm)
-- On NOEQUALITY reduce production list(argTerm) -> argTerm list(argTerm)
-- On NEW_EFFECT reduce production list(argTerm) -> argTerm list(argTerm)
-- On NEW reduce production list(argTerm) -> argTerm list(argTerm)
-- On MODULE reduce production list(argTerm) -> argTerm list(argTerm)
-- On MINUS reduce production list(argTerm) -> argTerm list(argTerm)
-- On LOGIC reduce production list(argTerm) -> argTerm list(argTerm)
-- On LET reduce production list(argTerm) -> argTerm list(argTerm)
-- On LENS_PAREN_RIGHT reduce production list(argTerm) -> argTerm list(argTerm)
-- On LBRACK_AT reduce production list(argTerm) -> argTerm list(argTerm)
-- On LBRACE reduce production list(argTerm) -> argTerm list(argTerm)
-- On IRREDUCIBLE reduce production list(argTerm) -> argTerm list(argTerm)
-- On INLINE_FOR_EXTRACTION reduce production list(argTerm) -> argTerm list(argTerm)
-- On INLINE reduce production list(argTerm) -> argTerm list(argTerm)
-- On INCLUDE reduce production list(argTerm) -> argTerm list(argTerm)
-- On IN reduce production list(argTerm) -> argTerm list(argTerm)
-- On IMPLIES reduce production list(argTerm) -> argTerm list(argTerm)
-- On IFF reduce production list(argTerm) -> argTerm list(argTerm)
-- On FSDOC_STANDALONE reduce production list(argTerm) -> argTerm list(argTerm)
-- On FSDOC reduce production list(argTerm) -> argTerm list(argTerm)
-- On EXCEPTION reduce production list(argTerm) -> argTerm list(argTerm)
-- On EQUALS reduce production list(argTerm) -> argTerm list(argTerm)
-- On EOF reduce production list(argTerm) -> argTerm list(argTerm)
-- On END reduce production list(argTerm) -> argTerm list(argTerm)
-- On ELSE reduce production list(argTerm) -> argTerm list(argTerm)
-- On EFFECT reduce production list(argTerm) -> argTerm list(argTerm)
-- On DISJUNCTION reduce production list(argTerm) -> argTerm list(argTerm)
-- On DEFAULT reduce production list(argTerm) -> argTerm list(argTerm)
-- On CONJUNCTION reduce production list(argTerm) -> argTerm list(argTerm)
-- On COMMA reduce production list(argTerm) -> argTerm list(argTerm)
-- On COLON_EQUALS reduce production list(argTerm) -> argTerm list(argTerm)
-- On COLON_COLON reduce production list(argTerm) -> argTerm list(argTerm)
-- On BY reduce production list(argTerm) -> argTerm list(argTerm)
-- On BAR_RBRACK reduce production list(argTerm) -> argTerm list(argTerm)
-- On BAR reduce production list(argTerm) -> argTerm list(argTerm)
-- On BACKTICK reduce production list(argTerm) -> argTerm list(argTerm)
-- On ASSUME reduce production list(argTerm) -> argTerm list(argTerm)
-- On AND reduce production list(argTerm) -> argTerm list(argTerm)
-- On AMP reduce production list(argTerm) -> argTerm list(argTerm)
-- On ABSTRACT reduce production list(argTerm) -> argTerm list(argTerm)
-- On # reduce production list(argTerm) -> argTerm list(argTerm)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production list(argTerm) -> argTerm list(argTerm)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 569:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX3
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 570
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 570:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On BACKTICK shift to state 571
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On RARROW reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On OPINFIX3 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On MINUS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On LBRACE reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
-- On AMP reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)

State 571:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK . qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On qlident shift to state 572
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 572:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK qlident
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident . BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On BACKTICK shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK qlident BACKTICK
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 574
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 574:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On RARROW reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On OPINFIX3 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On MINUS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On LBRACE reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On BACKTICK reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
-- On AMP reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)

State 575:
## Known stack suffix:
## tmNoEqWith(appTerm) COLON_COLON
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 576
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 576:
## Known stack suffix:
## tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On OPINFIX3 shift to state 569
-- On COLON_COLON shift to state 575
-- On BACKTICK shift to state 571
-- On AMP shift to state 577
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On RARROW reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On MINUS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On LBRACE reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)

State 577:
## Known stack suffix:
## tmNoEqWith(appTerm) AMP
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 578
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 578:
## Known stack suffix:
## tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On OPINFIX3 shift to state 569
-- On BACKTICK shift to state 571
-- On AMP shift to state 577
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On RARROW reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On MINUS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On LBRACE reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)

State 579:
## Known stack suffix:
## BACKTICK tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On MINUS reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)

State 580:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow . refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 581
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On RPAREN reduce production option(__anonymous_9) ->

State 581:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 582
## Reductions:

State 582:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On UINT8 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On UINT64 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On UINT32 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On UINT16 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On TVAR reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On TRUE reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On STRING reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On SET_RANGE_OF reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On REIFY reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On RARROW reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On RANGE_OF reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On NAME reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On LPAREN_RPAREN reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On LPAREN reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On LENS_PAREN_LEFT reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On LBRACK reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On LBRACE reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On INT8 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On INT64 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On INT32 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On INT16 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On INT reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On IEEE64 reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On IDENT reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On HASH reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On FALSE reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On EQUALS reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On DOLLAR reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On COLON reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On CHAR reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
-- On BYTEARRAY reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN

State 583:
## Known stack suffix:
## aqualified(lident)
## LR(1) items:
nonempty_list(aqualified(lident)) -> aqualified(lident) . [ COLON ]
nonempty_list(aqualified(lident)) -> aqualified(lident) . nonempty_list(aqualified(lident)) [ COLON ]
## Transitions:
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lident)) shift to state 584
-- On lident shift to state 159
-- On aqualified(lident) shift to state 583
-- On aqualUniverses shift to state 164
## Reductions:
-- On COLON reduce production nonempty_list(aqualified(lident)) -> aqualified(lident)

State 584:
## Known stack suffix:
## aqualified(lident) nonempty_list(aqualified(lident))
## LR(1) items:
nonempty_list(aqualified(lident)) -> aqualified(lident) nonempty_list(aqualified(lident)) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production nonempty_list(aqualified(lident)) -> aqualified(lident) nonempty_list(aqualified(lident))

State 585:
## Known stack suffix:
## FUN nonempty_list(patternOrMultibinder)
## LR(1) items:
simpleTerm -> FUN nonempty_list(patternOrMultibinder) . RARROW term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On RARROW shift to state 586
## Reductions:

State 586:
## Known stack suffix:
## FUN nonempty_list(patternOrMultibinder) RARROW
## LR(1) items:
simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 587
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 587:
## Known stack suffix:
## FUN nonempty_list(patternOrMultibinder) RARROW term
## LR(1) items:
simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On VAL reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On UNOPTEQUALITY reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On UNFOLDABLE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On UNFOLD reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On TYPE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On TOTAL reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On THEN reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On SUB_EFFECT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On SUBKIND reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On SPLICE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On SEMICOLON_SEMICOLON reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On SEMICOLON reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On RPAREN reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On REIFIABLE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On REFLECTABLE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On RBRACK reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On RBRACE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On PRIVATE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On PRAGMA_SET_OPTIONS reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On PRAGMA_RESET_OPTIONS reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On OPEN reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On OPAQUE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On NOEXTRACT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On NOEQUALITY reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On NEW_EFFECT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On NEW reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On MODULE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On LOGIC reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On LET reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On LENS_PAREN_RIGHT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On LBRACK_AT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On IRREDUCIBLE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On INLINE_FOR_EXTRACTION reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On INLINE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On INCLUDE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On IN reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On FSDOC_STANDALONE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On FSDOC reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On EXCEPTION reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On EOF reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On END reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On ELSE reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On EFFECT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On DEFAULT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On BAR_RBRACK reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On BAR reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On ASSUME reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On AND reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On ABSTRACT reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
-- On # reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 588:
## Known stack suffix:
## qlident EQUALS noSeqTerm
## LR(1) items:
simpleDef -> qlident EQUALS noSeqTerm . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production simpleDef -> qlident EQUALS noSeqTerm
-- On RBRACE reduce production simpleDef -> qlident EQUALS noSeqTerm

State 589:
## Known stack suffix:
## simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)

State 590:
## Known stack suffix:
## right_flexible_nonempty_list(SEMICOLON,simpleDef)
## LR(1) items:
recordExp -> right_flexible_nonempty_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production recordExp -> right_flexible_nonempty_list(SEMICOLON,simpleDef)

State 591:
## Known stack suffix:
## LBRACE recordExp
## LR(1) items:
tmNoEqWith(appTerm) -> LBRACE recordExp . RBRACE [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On RBRACE shift to state 592
## Reductions:

State 592:
## Known stack suffix:
## LBRACE recordExp RBRACE
## LR(1) items:
tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On RARROW reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On PIPE_RIGHT reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX4 reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX3 reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX2 reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX1 reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX0d reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX0c reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX0b reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On OPINFIX0a reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On MINUS reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On LBRACE reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On EQUALS reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On COLON_EQUALS reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On COLON_COLON reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On BACKTICK reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE
-- On AMP reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE

State 593:
## Known stack suffix:
## qlident
## LR(1) items:
qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident . option(fsTypeArgs) [ WITH UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT CHAR BYTEARRAY BEGIN BANG_LBRACE ]
simpleDef -> qlident . EQUALS noSeqTerm [ SEMICOLON RBRACE ]
simpleDef -> qlident . [ SEMICOLON RBRACE ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On EQUALS shift to state 205
-- On option(fsTypeArgs) shift to state 88
-- On fsTypeArgs shift to state 89
## Reductions:
-- On WITH reduce production option(fsTypeArgs) ->
-- On UNIV_HASH reduce production option(fsTypeArgs) ->
-- On UNDERSCORE reduce production option(fsTypeArgs) ->
-- On UINT8 reduce production option(fsTypeArgs) ->
-- On UINT64 reduce production option(fsTypeArgs) ->
-- On UINT32 reduce production option(fsTypeArgs) ->
-- On UINT16 reduce production option(fsTypeArgs) ->
-- On TVAR reduce production option(fsTypeArgs) ->
-- On TRUE reduce production option(fsTypeArgs) ->
-- On STRING reduce production option(fsTypeArgs) ->
-- On SET_RANGE_OF reduce production option(fsTypeArgs) ->
-- On SEMICOLON reduce production simpleDef -> qlident
-- On REIFY reduce production option(fsTypeArgs) ->
-- On RBRACE reduce production simpleDef -> qlident
-- On RANGE_OF reduce production option(fsTypeArgs) ->
-- On PERCENT_LBRACK reduce production option(fsTypeArgs) ->
-- On OPPREFIX reduce production option(fsTypeArgs) ->
-- On NAME reduce production option(fsTypeArgs) ->
-- On LPAREN_RPAREN reduce production option(fsTypeArgs) ->
-- On LPAREN reduce production option(fsTypeArgs) ->
-- On LENS_PAREN_LEFT reduce production option(fsTypeArgs) ->
-- On LBRACK_BAR reduce production option(fsTypeArgs) ->
-- On LBRACK reduce production option(fsTypeArgs) ->
-- On INT8 reduce production option(fsTypeArgs) ->
-- On INT64 reduce production option(fsTypeArgs) ->
-- On INT32 reduce production option(fsTypeArgs) ->
-- On INT16 reduce production option(fsTypeArgs) ->
-- On INT reduce production option(fsTypeArgs) ->
-- On IEEE64 reduce production option(fsTypeArgs) ->
-- On IDENT reduce production option(fsTypeArgs) ->
-- On HASH reduce production option(fsTypeArgs) ->
-- On FALSE reduce production option(fsTypeArgs) ->
-- On DOT_LPAREN reduce production option(fsTypeArgs) ->
-- On DOT_LENS_PAREN_LEFT reduce production option(fsTypeArgs) ->
-- On DOT_LBRACK_BAR reduce production option(fsTypeArgs) ->
-- On DOT_LBRACK reduce production option(fsTypeArgs) ->
-- On DOT reduce production option(fsTypeArgs) ->
-- On CHAR reduce production option(fsTypeArgs) ->
-- On BYTEARRAY reduce production option(fsTypeArgs) ->
-- On BEGIN reduce production option(fsTypeArgs) ->
-- On BANG_LBRACE reduce production option(fsTypeArgs) ->

State 594:
## Known stack suffix:
## appTerm
## LR(1) items:
recordExp -> appTerm . WITH right_flexible_nonempty_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On WITH shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## appTerm WITH
## LR(1) items:
recordExp -> appTerm WITH . right_flexible_nonempty_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 596
-- On qlident shift to state 204
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 596:
## Known stack suffix:
## appTerm WITH right_flexible_nonempty_list(SEMICOLON,simpleDef)
## LR(1) items:
recordExp -> appTerm WITH right_flexible_nonempty_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production recordExp -> appTerm WITH right_flexible_nonempty_list(SEMICOLON,simpleDef)

State 597:
## Known stack suffix:
## MINUS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> MINUS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On MINUS reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)

State 598:
## Known stack suffix:
## QUOTE tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Reductions:
-- On RPAREN reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On RARROW reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On PIPE_RIGHT reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On OPINFIX2 reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On OPINFIX1 reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On OPINFIX0d reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On OPINFIX0c reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On OPINFIX0b reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On OPINFIX0a reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On MINUS reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On LBRACE reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On EQUALS reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)
-- On COLON_EQUALS reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)

State 599:
## Known stack suffix:
## LPAREN tuplePattern COLON simpleArrow
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON simpleArrow . refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 600
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On RPAREN reduce production option(__anonymous_9) ->

State 600:
## Known stack suffix:
## LPAREN tuplePattern COLON simpleArrow refineOpt
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 601
## Reductions:

State 601:
## Known stack suffix:
## LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Reductions:
-- On WHEN reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On UNDERSCORE reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On UINT8 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On UINT64 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On UINT32 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On UINT16 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On TVAR reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On TRUE reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On STRING reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On SQUIGGLY_RARROW reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On SET_RANGE_OF reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On SEMICOLON reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On RPAREN reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On REIFY reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On RBRACK reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On RBRACE reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On RARROW reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On RANGE_OF reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On NAME reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On LPAREN_RPAREN reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On LPAREN reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On LENS_PAREN_LEFT reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On LBRACK reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On LBRACE reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On INT8 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On INT64 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On INT32 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On INT16 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On INT reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On IEEE64 reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On IDENT reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On HASH reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On FALSE reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On EQUALS reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On DOLLAR reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On COMMA reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On COLON_COLON reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On COLON reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On CHAR reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On BYTEARRAY reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
-- On BAR reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN

State 602:
## Known stack suffix:
## BAR
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR . patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On quident shift to state 156
-- On patternBranch shift to state 607
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 603:
## Known stack suffix:
## tuplePattern
## LR(1) items:
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern . [ WHEN SQUIGGLY_RARROW RARROW ]
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern . BAR separated_nonempty_list(BAR,tuplePattern) [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
-- On BAR shift to state 604
## Reductions:
-- On WHEN reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern
-- On SQUIGGLY_RARROW reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern
-- On RARROW reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern

State 604:
## Known stack suffix:
## tuplePattern BAR
## LR(1) items:
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR . separated_nonempty_list(BAR,tuplePattern) [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 605
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 605:
## Known stack suffix:
## tuplePattern BAR separated_nonempty_list(BAR,tuplePattern)
## LR(1) items:
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR separated_nonempty_list(BAR,tuplePattern) . [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
## Reductions:
-- On WHEN reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR separated_nonempty_list(BAR,tuplePattern)
-- On SQUIGGLY_RARROW reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR separated_nonempty_list(BAR,tuplePattern)
-- On RARROW reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR separated_nonempty_list(BAR,tuplePattern)

State 606:
## Known stack suffix:
## separated_nonempty_list(BAR,tuplePattern)
## LR(1) items:
disjunctivePattern -> separated_nonempty_list(BAR,tuplePattern) . [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
## Reductions:
-- On WHEN reduce production disjunctivePattern -> separated_nonempty_list(BAR,tuplePattern)
-- On SQUIGGLY_RARROW reduce production disjunctivePattern -> separated_nonempty_list(BAR,tuplePattern)
-- On RARROW reduce production disjunctivePattern -> separated_nonempty_list(BAR,tuplePattern)

State 607:
## Known stack suffix:
## BAR patternBranch
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On VAL reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On UNOPTEQUALITY reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On UNFOLDABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On UNFOLD reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On TYPE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On TOTAL reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On THEN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On SUB_EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On SUBKIND reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On SPLICE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On SEMICOLON_SEMICOLON reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On SEMICOLON reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On RPAREN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On REIFIABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On REFLECTABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On RBRACK reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On RBRACE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On PRIVATE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On PRAGMA_SET_OPTIONS reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On PRAGMA_RESET_OPTIONS reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On OPEN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On OPAQUE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On NOEXTRACT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On NOEQUALITY reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On NEW_EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On NEW reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On MODULE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On LOGIC reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On LET reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On LENS_PAREN_RIGHT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On LBRACK_AT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On IRREDUCIBLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On INLINE_FOR_EXTRACTION reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On INLINE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On INCLUDE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On IN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On FSDOC_STANDALONE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On FSDOC reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On EXCEPTION reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On EOF reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On END reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On ELSE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On DEFAULT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On BAR_RBRACK reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On BAR reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On ASSUME reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On AND reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On ABSTRACT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
-- On # reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 608:
## Known stack suffix:
## disjunctivePattern
## LR(1) items:
patternBranch -> disjunctivePattern . maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
patternBranch -> disjunctivePattern . WHEN tmFormula maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On WHEN shift to state 609
-- On SQUIGGLY_RARROW shift to state 611
-- On RARROW shift to state 612
-- On maybeFocusArrow shift to state 615
## Reductions:

State 609:
## Known stack suffix:
## disjunctivePattern WHEN
## LR(1) items:
patternBranch -> disjunctivePattern WHEN . tmFormula maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 610
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 610:
## Known stack suffix:
## disjunctivePattern WHEN tmFormula
## LR(1) items:
patternBranch -> disjunctivePattern WHEN tmFormula . maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ SQUIGGLY_RARROW RARROW DISJUNCTION ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 611
-- On RARROW shift to state 612
-- On DISJUNCTION shift to state 372
-- On maybeFocusArrow shift to state 613
## Reductions:

State 611:
## Known stack suffix:
## SQUIGGLY_RARROW
## LR(1) items:
maybeFocusArrow -> SQUIGGLY_RARROW . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On UINT8 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On UINT64 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On UINT32 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On UINT16 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TVAR reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TRY reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TRUE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TILDE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On SYNTH reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On STRING reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On SET_RANGE_OF reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On REQUIRES reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On REIFY reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On RANGE_OF reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On QUOTE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On PERC_BACKTICK reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On PERCENT_LBRACK reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On OPPREFIX reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On NAME reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On MINUS reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On MATCH reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LPAREN_RPAREN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LPAREN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LET reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LENS_PAREN_LEFT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LBRACK_BAR reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LBRACK_AT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LBRACK reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LBRACE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT8 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT64 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT32 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT16 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On IF reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On IEEE64 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On IDENT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On HASH reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FUNCTION reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FUN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FORALL reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FALSE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On EXISTS reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On EQUALS reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On ENSURES reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On DOLLAR reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On CHAR reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BYTEARRAY reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BEGIN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BANG_LBRACE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BACKTICK_HASH reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BACKTICK_AT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BACKTICK reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On ATTRIBUTES reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On ASSUME reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On ASSERT reduce production maybeFocusArrow -> SQUIGGLY_RARROW

State 612:
## Known stack suffix:
## RARROW
## LR(1) items:
maybeFocusArrow -> RARROW . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production maybeFocusArrow -> RARROW
-- On UINT8 reduce production maybeFocusArrow -> RARROW
-- On UINT64 reduce production maybeFocusArrow -> RARROW
-- On UINT32 reduce production maybeFocusArrow -> RARROW
-- On UINT16 reduce production maybeFocusArrow -> RARROW
-- On TVAR reduce production maybeFocusArrow -> RARROW
-- On TRY reduce production maybeFocusArrow -> RARROW
-- On TRUE reduce production maybeFocusArrow -> RARROW
-- On TILDE reduce production maybeFocusArrow -> RARROW
-- On SYNTH reduce production maybeFocusArrow -> RARROW
-- On STRING reduce production maybeFocusArrow -> RARROW
-- On SET_RANGE_OF reduce production maybeFocusArrow -> RARROW
-- On REQUIRES reduce production maybeFocusArrow -> RARROW
-- On REIFY reduce production maybeFocusArrow -> RARROW
-- On RANGE_OF reduce production maybeFocusArrow -> RARROW
-- On QUOTE reduce production maybeFocusArrow -> RARROW
-- On PERC_BACKTICK reduce production maybeFocusArrow -> RARROW
-- On PERCENT_LBRACK reduce production maybeFocusArrow -> RARROW
-- On OPPREFIX reduce production maybeFocusArrow -> RARROW
-- On NAME reduce production maybeFocusArrow -> RARROW
-- On MINUS reduce production maybeFocusArrow -> RARROW
-- On MATCH reduce production maybeFocusArrow -> RARROW
-- On LPAREN_RPAREN reduce production maybeFocusArrow -> RARROW
-- On LPAREN reduce production maybeFocusArrow -> RARROW
-- On LET reduce production maybeFocusArrow -> RARROW
-- On LENS_PAREN_LEFT reduce production maybeFocusArrow -> RARROW
-- On LBRACK_BAR reduce production maybeFocusArrow -> RARROW
-- On LBRACK_AT reduce production maybeFocusArrow -> RARROW
-- On LBRACK reduce production maybeFocusArrow -> RARROW
-- On LBRACE reduce production maybeFocusArrow -> RARROW
-- On INT8 reduce production maybeFocusArrow -> RARROW
-- On INT64 reduce production maybeFocusArrow -> RARROW
-- On INT32 reduce production maybeFocusArrow -> RARROW
-- On INT16 reduce production maybeFocusArrow -> RARROW
-- On INT reduce production maybeFocusArrow -> RARROW
-- On IF reduce production maybeFocusArrow -> RARROW
-- On IEEE64 reduce production maybeFocusArrow -> RARROW
-- On IDENT reduce production maybeFocusArrow -> RARROW
-- On HASH reduce production maybeFocusArrow -> RARROW
-- On FUNCTION reduce production maybeFocusArrow -> RARROW
-- On FUN reduce production maybeFocusArrow -> RARROW
-- On FORALL reduce production maybeFocusArrow -> RARROW
-- On FALSE reduce production maybeFocusArrow -> RARROW
-- On EXISTS reduce production maybeFocusArrow -> RARROW
-- On EQUALS reduce production maybeFocusArrow -> RARROW
-- On ENSURES reduce production maybeFocusArrow -> RARROW
-- On DOLLAR reduce production maybeFocusArrow -> RARROW
-- On CHAR reduce production maybeFocusArrow -> RARROW
-- On BYTEARRAY reduce production maybeFocusArrow -> RARROW
-- On BEGIN reduce production maybeFocusArrow -> RARROW
-- On BANG_LBRACE reduce production maybeFocusArrow -> RARROW
-- On BACKTICK_HASH reduce production maybeFocusArrow -> RARROW
-- On BACKTICK_AT reduce production maybeFocusArrow -> RARROW
-- On BACKTICK reduce production maybeFocusArrow -> RARROW
-- On ATTRIBUTES reduce production maybeFocusArrow -> RARROW
-- On ASSUME reduce production maybeFocusArrow -> RARROW
-- On ASSERT reduce production maybeFocusArrow -> RARROW

State 613:
## Known stack suffix:
## disjunctivePattern WHEN tmFormula maybeFocusArrow
## LR(1) items:
patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 614
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 614:
## Known stack suffix:
## disjunctivePattern WHEN tmFormula maybeFocusArrow term
## LR(1) items:
patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On VAL reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On UNOPTEQUALITY reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On UNFOLDABLE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On UNFOLD reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On TYPE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On TOTAL reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On THEN reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On SUB_EFFECT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On SUBKIND reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On SPLICE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On SEMICOLON_SEMICOLON reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On SEMICOLON reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On RPAREN reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On REIFIABLE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On REFLECTABLE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On RBRACK reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On RBRACE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On PRIVATE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On PRAGMA_SET_OPTIONS reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On PRAGMA_RESET_OPTIONS reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On OPEN reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On OPAQUE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On NOEXTRACT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On NOEQUALITY reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On NEW_EFFECT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On NEW reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On MODULE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On LOGIC reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On LET reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On LENS_PAREN_RIGHT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On LBRACK_AT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On IRREDUCIBLE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On INLINE_FOR_EXTRACTION reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On INLINE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On INCLUDE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On IN reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On FSDOC_STANDALONE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On FSDOC reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On EXCEPTION reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On EOF reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On END reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On ELSE reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On EFFECT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On DEFAULT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On BAR_RBRACK reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On BAR reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On ASSUME reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On AND reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On ABSTRACT reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
-- On # reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 615:
## Known stack suffix:
## disjunctivePattern maybeFocusArrow
## LR(1) items:
patternBranch -> disjunctivePattern maybeFocusArrow . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 616
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 616:
## Known stack suffix:
## disjunctivePattern maybeFocusArrow term
## LR(1) items:
patternBranch -> disjunctivePattern maybeFocusArrow term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On VAL reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On UNOPTEQUALITY reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On UNFOLDABLE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On UNFOLD reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On TYPE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On TOTAL reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On THEN reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On SUB_EFFECT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On SUBKIND reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On SPLICE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On SEMICOLON_SEMICOLON reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On SEMICOLON reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On RPAREN reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On REIFIABLE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On REFLECTABLE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On RBRACK reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On RBRACE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On PRIVATE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On PRAGMA_SET_OPTIONS reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On PRAGMA_RESET_OPTIONS reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On OPEN reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On OPAQUE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On NOEXTRACT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On NOEQUALITY reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On NEW_EFFECT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On NEW reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On MODULE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On LOGIC reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On LET reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On LENS_PAREN_RIGHT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On LBRACK_AT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On IRREDUCIBLE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On INLINE_FOR_EXTRACTION reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On INLINE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On INCLUDE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On IN reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On FSDOC_STANDALONE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On FSDOC reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On EXCEPTION reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On EOF reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On END reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On ELSE reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On EFFECT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On DEFAULT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On BAR_RBRACK reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On BAR reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On ASSUME reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On AND reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On ABSTRACT reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
-- On # reduce production patternBranch -> disjunctivePattern maybeFocusArrow term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production patternBranch -> disjunctivePattern maybeFocusArrow term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 617:
## Known stack suffix:
## FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
## LR(1) items:
noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BAR shift to state 618
## Reductions:
-- On WITH reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On VAL reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On UNOPTEQUALITY reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On UNFOLDABLE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On UNFOLD reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On TYPE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On TOTAL reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On THEN reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SUB_EFFECT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SUBKIND reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SPLICE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SEMICOLON reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On RPAREN reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On REIFIABLE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On REFLECTABLE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On RBRACK reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On RBRACE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On PRIVATE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On OPEN reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On OPAQUE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NOEXTRACT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NOEQUALITY reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NEW_EFFECT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NEW reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On MODULE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LOGIC reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LET reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LBRACK_AT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On IRREDUCIBLE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On INLINE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On INCLUDE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On IN reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On FSDOC_STANDALONE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On FSDOC reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On EXCEPTION reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On EOF reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On END reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On ELSE reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On EFFECT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On DEFAULT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On BAR_RBRACK reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On BAR reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On ASSUME reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On AND reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On ABSTRACT reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On # reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
** Conflict on BAR
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 618:
## Known stack suffix:
## reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR . patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On quident shift to state 156
-- On patternBranch shift to state 619
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 619:
## Known stack suffix:
## reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On VAL reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On UNOPTEQUALITY reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On UNFOLDABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On UNFOLD reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On TYPE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On TOTAL reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On THEN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On SUB_EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On SUBKIND reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On SPLICE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On SEMICOLON_SEMICOLON reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On SEMICOLON reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On RPAREN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On REIFIABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On REFLECTABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On RBRACK reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On RBRACE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On PRIVATE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On PRAGMA_SET_OPTIONS reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On PRAGMA_RESET_OPTIONS reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On OPEN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On OPAQUE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On NOEXTRACT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On NOEQUALITY reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On NEW_EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On NEW reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On MODULE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On LOGIC reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On LET reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On LENS_PAREN_RIGHT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On LBRACK_AT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On IRREDUCIBLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On INLINE_FOR_EXTRACTION reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On INLINE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On INCLUDE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On IN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On FSDOC_STANDALONE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On FSDOC reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On EXCEPTION reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On EOF reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On END reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On ELSE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On DEFAULT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On BAR_RBRACK reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On BAR reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On ASSUME reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On AND reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On ABSTRACT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
-- On # reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 620:
## Known stack suffix:
## patternBranch
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On VAL reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On UNOPTEQUALITY reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On UNFOLDABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On UNFOLD reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On TYPE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On TOTAL reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On THEN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On SUB_EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On SUBKIND reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On SPLICE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On SEMICOLON_SEMICOLON reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On SEMICOLON reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On RPAREN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On REIFIABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On REFLECTABLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On RBRACK reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On RBRACE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On PRIVATE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On PRAGMA_SET_OPTIONS reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On PRAGMA_RESET_OPTIONS reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On OPEN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On OPAQUE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On NOEXTRACT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On NOEQUALITY reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On NEW_EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On NEW reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On MODULE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On LOGIC reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On LET reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On LENS_PAREN_RIGHT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On LBRACK_AT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On IRREDUCIBLE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On INLINE_FOR_EXTRACTION reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On INLINE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On INCLUDE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On IN reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On FSDOC_STANDALONE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On FSDOC reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On EXCEPTION reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On EOF reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On END reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On ELSE reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On EFFECT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On DEFAULT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On BAR_RBRACK reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On BAR reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On ASSUME reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On AND reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On ABSTRACT reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
-- On # reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 621:
## Known stack suffix:
## IF noSeqTerm
## LR(1) items:
noSeqTerm -> IF noSeqTerm . THEN noSeqTerm ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF noSeqTerm . THEN noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On THEN shift to state 622
## Reductions:

State 622:
## Known stack suffix:
## IF noSeqTerm THEN
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN . noSeqTerm ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF noSeqTerm THEN . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 623
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 623:
## Known stack suffix:
## IF noSeqTerm THEN noSeqTerm
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm . ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF noSeqTerm THEN noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On ELSE shift to state 624
## Reductions:
-- On WITH reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On VAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On UNFOLDABLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On UNFOLD reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On TYPE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On TOTAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On THEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SPLICE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On RPAREN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On REIFIABLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On REFLECTABLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On RBRACE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On OPEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On NOEXTRACT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On NOEQUALITY reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On NEW reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On MODULE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On LOGIC reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On LET reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On LBRACK_AT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On INLINE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On INCLUDE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On IN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On FSDOC reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On EOF reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On END reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On BAR reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On ASSUME reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On AND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On ABSTRACT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On # reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 624:
## Known stack suffix:
## IF noSeqTerm THEN noSeqTerm ELSE
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 625
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 625:
## Known stack suffix:
## IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On VAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On UNFOLDABLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On UNFOLD reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On TYPE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On TOTAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On THEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SPLICE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On RPAREN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On REIFIABLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On REFLECTABLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On RBRACE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On OPEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On NOEXTRACT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On NOEQUALITY reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On NEW reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On MODULE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On LOGIC reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On LET reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On LBRACK_AT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On INLINE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On INCLUDE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On IN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On FSDOC reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On EOF reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On END reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On ELSE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On BAR reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On ASSUME reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On AND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On ABSTRACT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On # reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 626:
## Known stack suffix:
## quident DOT_LPAREN term
## LR(1) items:
atomicTermQUident -> quident DOT_LPAREN term . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## quident DOT_LPAREN term RPAREN
## LR(1) items:
atomicTermQUident -> quident DOT_LPAREN term RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On VAL reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UNOPTEQUALITY reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UNIV_HASH reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UNFOLDABLE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UNFOLD reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UNDERSCORE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UINT8 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UINT64 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UINT32 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On UINT16 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On TYP_APP_GREATER reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On TYPE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On TVAR reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On TRUE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On TOTAL reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On THEN reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SUB_EFFECT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SUBTYPE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SUBKIND reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On STRING reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SQUIGGLY_RARROW reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SPLICE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SET_RANGE_OF reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SEMICOLON_SEMICOLON reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On SEMICOLON reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On RPAREN reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On REIFY reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On REIFIABLE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On REFLECTABLE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On RBRACK reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On RBRACE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On RARROW reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On RANGE_OF reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On PRIVATE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On PRAGMA_SET_OPTIONS reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On PIPE_RIGHT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On PERCENT_LBRACK reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPPREFIX reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX4 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX3 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX2 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX1 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX0d reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX0c reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX0b reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPINFIX0a reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPEN reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On OPAQUE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On NOEXTRACT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On NOEQUALITY reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On NEW_EFFECT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On NEW reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On NAME reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On MODULE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On MINUS reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LPAREN_RPAREN reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LPAREN reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LOGIC reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LET reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LENS_PAREN_RIGHT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LENS_PAREN_LEFT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LBRACK_BAR reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LBRACK_AT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LBRACK reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On LBRACE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On IRREDUCIBLE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INT8 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INT64 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INT32 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INT16 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INLINE_FOR_EXTRACTION reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INLINE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On INCLUDE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On IN reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On IMPLIES reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On IFF reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On IEEE64 reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On IDENT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On HASH reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On FSDOC_STANDALONE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On FSDOC reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On FALSE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On EXCEPTION reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On EQUALS reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On EOF reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On END reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On ELSE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On EFFECT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On DISJUNCTION reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On DEFAULT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On CONJUNCTION reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On COMMA reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On COLON_EQUALS reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On COLON_COLON reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On CHAR reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On BYTEARRAY reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On BY reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On BEGIN reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On BAR_RBRACK reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On BAR reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On BANG_LBRACE reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On BACKTICK reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On ASSUME reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On AND reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On AMP reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On ABSTRACT reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
-- On # reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermQUident -> quident DOT_LPAREN term RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 628:
## Known stack suffix:
## quident some(fsTypeArgs)
## LR(1) items:
qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On VAL reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UNOPTEQUALITY reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UNIV_HASH reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UNFOLDABLE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UNFOLD reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UNDERSCORE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UINT8 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UINT64 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UINT32 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On UINT16 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On TYP_APP_GREATER reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On TYPE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On TVAR reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On TRUE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On TOTAL reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On THEN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SUB_EFFECT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SUBTYPE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SUBKIND reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On STRING reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SQUIGGLY_RARROW reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SPLICE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SET_RANGE_OF reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SEMICOLON_SEMICOLON reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On SEMICOLON reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On RPAREN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On REIFY reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On REIFIABLE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On REFLECTABLE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On RBRACK reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On RBRACE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On RARROW reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On RANGE_OF reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On PRIVATE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On PRAGMA_SET_OPTIONS reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On PRAGMA_RESET_OPTIONS reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On PIPE_RIGHT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On PERCENT_LBRACK reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPPREFIX reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX4 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX3 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX2 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX1 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX0d reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX0c reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX0b reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPINFIX0a reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPEN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On OPAQUE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On NOEXTRACT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On NOEQUALITY reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On NEW_EFFECT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On NEW reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On NAME reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On MODULE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On MINUS reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LPAREN_RPAREN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LPAREN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LOGIC reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LET reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LENS_PAREN_RIGHT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LENS_PAREN_LEFT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LBRACK_BAR reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LBRACK_AT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LBRACK reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On LBRACE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On IRREDUCIBLE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INT8 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INT64 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INT32 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INT16 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INLINE_FOR_EXTRACTION reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INLINE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On INCLUDE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On IN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On IMPLIES reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On IFF reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On IEEE64 reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On IDENT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On HASH reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On FSDOC_STANDALONE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On FSDOC reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On FALSE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On EXCEPTION reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On EQUALS reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On EOF reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On END reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On ELSE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On EFFECT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On DOT_LPAREN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On DOT_LENS_PAREN_LEFT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On DOT_LBRACK_BAR reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On DOT_LBRACK reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On DOT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On DISJUNCTION reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On DEFAULT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On CONJUNCTION reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On COMMA reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On COLON_EQUALS reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On COLON_COLON reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On CHAR reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On BYTEARRAY reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On BY reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On BEGIN reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On BAR_RBRACK reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On BAR reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On BANG_LBRACE reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On BACKTICK reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On ASSUME reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On AND reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On AMP reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On ABSTRACT reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
-- On # reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 629:
## Known stack suffix:
## fsTypeArgs
## LR(1) items:
some(fsTypeArgs) -> fsTypeArgs . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production some(fsTypeArgs) -> fsTypeArgs
-- On VAL reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UNOPTEQUALITY reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UNIV_HASH reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UNFOLDABLE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UNFOLD reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UNDERSCORE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UINT8 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UINT64 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UINT32 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On UINT16 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On TYP_APP_GREATER reduce production some(fsTypeArgs) -> fsTypeArgs
-- On TYPE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On TVAR reduce production some(fsTypeArgs) -> fsTypeArgs
-- On TRUE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On TOTAL reduce production some(fsTypeArgs) -> fsTypeArgs
-- On THEN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SUB_EFFECT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SUBTYPE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SUBKIND reduce production some(fsTypeArgs) -> fsTypeArgs
-- On STRING reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SQUIGGLY_RARROW reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SPLICE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SET_RANGE_OF reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SEMICOLON_SEMICOLON reduce production some(fsTypeArgs) -> fsTypeArgs
-- On SEMICOLON reduce production some(fsTypeArgs) -> fsTypeArgs
-- On RPAREN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On REIFY reduce production some(fsTypeArgs) -> fsTypeArgs
-- On REIFIABLE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On REFLECTABLE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On RBRACK reduce production some(fsTypeArgs) -> fsTypeArgs
-- On RBRACE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On RARROW reduce production some(fsTypeArgs) -> fsTypeArgs
-- On RANGE_OF reduce production some(fsTypeArgs) -> fsTypeArgs
-- On PRIVATE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On PRAGMA_SET_OPTIONS reduce production some(fsTypeArgs) -> fsTypeArgs
-- On PRAGMA_RESET_OPTIONS reduce production some(fsTypeArgs) -> fsTypeArgs
-- On PIPE_RIGHT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On PERCENT_LBRACK reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPPREFIX reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX4 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX3 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX2 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX1 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0d reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0c reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0b reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPINFIX0a reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPEN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On OPAQUE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On NOEXTRACT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On NOEQUALITY reduce production some(fsTypeArgs) -> fsTypeArgs
-- On NEW_EFFECT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On NEW reduce production some(fsTypeArgs) -> fsTypeArgs
-- On NAME reduce production some(fsTypeArgs) -> fsTypeArgs
-- On MODULE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On MINUS reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LPAREN_RPAREN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LPAREN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LOGIC reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LET reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LENS_PAREN_RIGHT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LENS_PAREN_LEFT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LBRACK_BAR reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LBRACK_AT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LBRACK reduce production some(fsTypeArgs) -> fsTypeArgs
-- On LBRACE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On IRREDUCIBLE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INT8 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INT64 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INT32 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INT16 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INLINE_FOR_EXTRACTION reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INLINE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On INCLUDE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On IN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On IMPLIES reduce production some(fsTypeArgs) -> fsTypeArgs
-- On IFF reduce production some(fsTypeArgs) -> fsTypeArgs
-- On IEEE64 reduce production some(fsTypeArgs) -> fsTypeArgs
-- On IDENT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On HASH reduce production some(fsTypeArgs) -> fsTypeArgs
-- On FSDOC_STANDALONE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On FSDOC reduce production some(fsTypeArgs) -> fsTypeArgs
-- On FALSE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On EXCEPTION reduce production some(fsTypeArgs) -> fsTypeArgs
-- On EQUALS reduce production some(fsTypeArgs) -> fsTypeArgs
-- On EOF reduce production some(fsTypeArgs) -> fsTypeArgs
-- On END reduce production some(fsTypeArgs) -> fsTypeArgs
-- On ELSE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On EFFECT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On DOT_LPAREN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On DOT_LENS_PAREN_LEFT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On DOT_LBRACK_BAR reduce production some(fsTypeArgs) -> fsTypeArgs
-- On DOT_LBRACK reduce production some(fsTypeArgs) -> fsTypeArgs
-- On DOT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On DISJUNCTION reduce production some(fsTypeArgs) -> fsTypeArgs
-- On DEFAULT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On CONJUNCTION reduce production some(fsTypeArgs) -> fsTypeArgs
-- On COMMA reduce production some(fsTypeArgs) -> fsTypeArgs
-- On COLON_EQUALS reduce production some(fsTypeArgs) -> fsTypeArgs
-- On COLON_COLON reduce production some(fsTypeArgs) -> fsTypeArgs
-- On CHAR reduce production some(fsTypeArgs) -> fsTypeArgs
-- On BYTEARRAY reduce production some(fsTypeArgs) -> fsTypeArgs
-- On BY reduce production some(fsTypeArgs) -> fsTypeArgs
-- On BEGIN reduce production some(fsTypeArgs) -> fsTypeArgs
-- On BAR_RBRACK reduce production some(fsTypeArgs) -> fsTypeArgs
-- On BAR reduce production some(fsTypeArgs) -> fsTypeArgs
-- On BANG_LBRACE reduce production some(fsTypeArgs) -> fsTypeArgs
-- On BACKTICK reduce production some(fsTypeArgs) -> fsTypeArgs
-- On ASSUME reduce production some(fsTypeArgs) -> fsTypeArgs
-- On AND reduce production some(fsTypeArgs) -> fsTypeArgs
-- On AMP reduce production some(fsTypeArgs) -> fsTypeArgs
-- On ABSTRACT reduce production some(fsTypeArgs) -> fsTypeArgs
-- On # reduce production some(fsTypeArgs) -> fsTypeArgs
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production some(fsTypeArgs) -> fsTypeArgs
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 630:
## Known stack suffix:
## BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm))
## LR(1) items:
projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) . RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 631
## Reductions:

State 631:
## Known stack suffix:
## BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
## LR(1) items:
projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On VAL reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UNOPTEQUALITY reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UNIV_HASH reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UNFOLDABLE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UNFOLD reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UNDERSCORE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UINT8 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UINT64 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UINT32 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On UINT16 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On TYP_APP_GREATER reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On TYPE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On TVAR reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On TRUE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On TOTAL reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On THEN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SUB_EFFECT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SUBTYPE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SUBKIND reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On STRING reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SQUIGGLY_RARROW reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SPLICE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SET_RANGE_OF reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On SEMICOLON reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On RPAREN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On REIFY reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On REIFIABLE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On REFLECTABLE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On RBRACK reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On RBRACE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On RARROW reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On RANGE_OF reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On PRIVATE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On PIPE_RIGHT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On PERCENT_LBRACK reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPPREFIX reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX4 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX3 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX2 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX1 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX0d reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX0c reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX0b reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPINFIX0a reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPEN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On OPAQUE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On NOEXTRACT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On NOEQUALITY reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On NEW_EFFECT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On NEW reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On NAME reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On MODULE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On MINUS reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LPAREN_RPAREN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LPAREN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LOGIC reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LET reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LENS_PAREN_LEFT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LBRACK_BAR reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LBRACK_AT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LBRACK reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On LBRACE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On IRREDUCIBLE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INT8 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INT64 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INT32 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INT16 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INLINE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On INCLUDE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On IN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On IMPLIES reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On IFF reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On IEEE64 reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On IDENT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On HASH reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On FSDOC_STANDALONE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On FSDOC reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On FALSE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On EXCEPTION reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On EQUALS reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On EOF reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On END reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On ELSE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On EFFECT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On DOT_LPAREN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On DOT_LBRACK_BAR reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On DOT_LBRACK reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On DOT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On DISJUNCTION reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On DEFAULT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On CONJUNCTION reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On COMMA reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On COLON_EQUALS reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On COLON_COLON reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On CHAR reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On BYTEARRAY reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On BY reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On BEGIN reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On BAR_RBRACK reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On BAR reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On BANG_LBRACE reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On BACKTICK reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On ASSUME reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On AND reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On AMP reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On ABSTRACT reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
-- On # reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 632:
## Known stack suffix:
## appTerm
## LR(1) items:
separated_nonempty_list(COMMA,appTerm) -> appTerm . [ RBRACE ]
separated_nonempty_list(COMMA,appTerm) -> appTerm . COMMA separated_nonempty_list(COMMA,appTerm) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 633
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(COMMA,appTerm) -> appTerm

State 633:
## Known stack suffix:
## appTerm COMMA
## LR(1) items:
separated_nonempty_list(COMMA,appTerm) -> appTerm COMMA . separated_nonempty_list(COMMA,appTerm) [ RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,appTerm) shift to state 634
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 632
## Reductions:

State 634:
## Known stack suffix:
## appTerm COMMA separated_nonempty_list(COMMA,appTerm)
## LR(1) items:
separated_nonempty_list(COMMA,appTerm) -> appTerm COMMA separated_nonempty_list(COMMA,appTerm) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(COMMA,appTerm) -> appTerm COMMA separated_nonempty_list(COMMA,appTerm)

State 635:
## Known stack suffix:
## LBRACE recordExp
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE recordExp . RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 636
## Reductions:

State 636:
## Known stack suffix:
## LBRACE recordExp RBRACE
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On VAL reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On THEN reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX4 reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX3 reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On NEW reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On LET reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On IN reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On IFF reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On EOF reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On END reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On BY reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On BAR reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On BACKTICK reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On AND reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On AMP reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
-- On # reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 637:
## Known stack suffix:
## LET OPEN quident IN term
## LR(1) items:
noSeqTerm -> LET OPEN quident IN term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> LET OPEN quident IN term
-- On VAL reduce production noSeqTerm -> LET OPEN quident IN term
-- On UNOPTEQUALITY reduce production noSeqTerm -> LET OPEN quident IN term
-- On UNFOLDABLE reduce production noSeqTerm -> LET OPEN quident IN term
-- On UNFOLD reduce production noSeqTerm -> LET OPEN quident IN term
-- On TYPE reduce production noSeqTerm -> LET OPEN quident IN term
-- On TOTAL reduce production noSeqTerm -> LET OPEN quident IN term
-- On THEN reduce production noSeqTerm -> LET OPEN quident IN term
-- On SUB_EFFECT reduce production noSeqTerm -> LET OPEN quident IN term
-- On SUBKIND reduce production noSeqTerm -> LET OPEN quident IN term
-- On SPLICE reduce production noSeqTerm -> LET OPEN quident IN term
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> LET OPEN quident IN term
-- On SEMICOLON reduce production noSeqTerm -> LET OPEN quident IN term
-- On RPAREN reduce production noSeqTerm -> LET OPEN quident IN term
-- On REIFIABLE reduce production noSeqTerm -> LET OPEN quident IN term
-- On REFLECTABLE reduce production noSeqTerm -> LET OPEN quident IN term
-- On RBRACK reduce production noSeqTerm -> LET OPEN quident IN term
-- On RBRACE reduce production noSeqTerm -> LET OPEN quident IN term
-- On PRIVATE reduce production noSeqTerm -> LET OPEN quident IN term
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> LET OPEN quident IN term
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> LET OPEN quident IN term
-- On OPEN reduce production noSeqTerm -> LET OPEN quident IN term
-- On OPAQUE reduce production noSeqTerm -> LET OPEN quident IN term
-- On NOEXTRACT reduce production noSeqTerm -> LET OPEN quident IN term
-- On NOEQUALITY reduce production noSeqTerm -> LET OPEN quident IN term
-- On NEW_EFFECT reduce production noSeqTerm -> LET OPEN quident IN term
-- On NEW reduce production noSeqTerm -> LET OPEN quident IN term
-- On MODULE reduce production noSeqTerm -> LET OPEN quident IN term
-- On LOGIC reduce production noSeqTerm -> LET OPEN quident IN term
-- On LET reduce production noSeqTerm -> LET OPEN quident IN term
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> LET OPEN quident IN term
-- On LBRACK_AT reduce production noSeqTerm -> LET OPEN quident IN term
-- On IRREDUCIBLE reduce production noSeqTerm -> LET OPEN quident IN term
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> LET OPEN quident IN term
-- On INLINE reduce production noSeqTerm -> LET OPEN quident IN term
-- On INCLUDE reduce production noSeqTerm -> LET OPEN quident IN term
-- On IN reduce production noSeqTerm -> LET OPEN quident IN term
-- On FSDOC_STANDALONE reduce production noSeqTerm -> LET OPEN quident IN term
-- On FSDOC reduce production noSeqTerm -> LET OPEN quident IN term
-- On EXCEPTION reduce production noSeqTerm -> LET OPEN quident IN term
-- On EOF reduce production noSeqTerm -> LET OPEN quident IN term
-- On END reduce production noSeqTerm -> LET OPEN quident IN term
-- On ELSE reduce production noSeqTerm -> LET OPEN quident IN term
-- On EFFECT reduce production noSeqTerm -> LET OPEN quident IN term
-- On DEFAULT reduce production noSeqTerm -> LET OPEN quident IN term
-- On BAR_RBRACK reduce production noSeqTerm -> LET OPEN quident IN term
-- On BAR reduce production noSeqTerm -> LET OPEN quident IN term
-- On ASSUME reduce production noSeqTerm -> LET OPEN quident IN term
-- On AND reduce production noSeqTerm -> LET OPEN quident IN term
-- On ABSTRACT reduce production noSeqTerm -> LET OPEN quident IN term
-- On # reduce production noSeqTerm -> LET OPEN quident IN term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> LET OPEN quident IN term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 638:
## Known stack suffix:
## LET letqualifier
## LR(1) items:
noSeqTerm -> LET letqualifier . letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 639
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On TVAR reduce production boption(SQUIGGLY_RARROW) ->
-- On TRUE reduce production boption(SQUIGGLY_RARROW) ->
-- On STRING reduce production boption(SQUIGGLY_RARROW) ->
-- On SET_RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On REIFY reduce production boption(SQUIGGLY_RARROW) ->
-- On RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On NAME reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN_RPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LENS_PAREN_LEFT reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACK reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACE reduce production boption(SQUIGGLY_RARROW) ->
-- On INT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT reduce production boption(SQUIGGLY_RARROW) ->
-- On IEEE64 reduce production boption(SQUIGGLY_RARROW) ->
-- On IDENT reduce production boption(SQUIGGLY_RARROW) ->
-- On HASH reduce production boption(SQUIGGLY_RARROW) ->
-- On FALSE reduce production boption(SQUIGGLY_RARROW) ->
-- On DOLLAR reduce production boption(SQUIGGLY_RARROW) ->
-- On CHAR reduce production boption(SQUIGGLY_RARROW) ->
-- On BYTEARRAY reduce production boption(SQUIGGLY_RARROW) ->

State 639:
## Known stack suffix:
## LET letqualifier letbinding
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding . list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACK_AT shift to state 17
-- On AND shift to state 541
-- On list(attr_letbinding) shift to state 640
-- On attribute shift to state 547
-- On attr_letbinding shift to state 550
## Reductions:
-- On IN reduce production list(attr_letbinding) ->

State 640:
## Known stack suffix:
## LET letqualifier letbinding list(attr_letbinding)
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) . IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IN shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## LET letqualifier letbinding list(attr_letbinding) IN
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 642
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 642:
## Known stack suffix:
## LET letqualifier letbinding list(attr_letbinding) IN term
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On VAL reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On UNOPTEQUALITY reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On UNFOLDABLE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On UNFOLD reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On TYPE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On TOTAL reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On THEN reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On SUB_EFFECT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On SUBKIND reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On SPLICE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On SEMICOLON reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On RPAREN reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On REIFIABLE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On REFLECTABLE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On RBRACK reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On RBRACE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On PRIVATE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On OPEN reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On OPAQUE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On NOEXTRACT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On NOEQUALITY reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On NEW_EFFECT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On NEW reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On MODULE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On LOGIC reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On LET reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On LBRACK_AT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On IRREDUCIBLE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On INLINE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On INCLUDE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On IN reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On FSDOC_STANDALONE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On FSDOC reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On EXCEPTION reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On EOF reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On END reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On ELSE reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On EFFECT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On DEFAULT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On BAR_RBRACK reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On BAR reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On ASSUME reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On AND reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On ABSTRACT reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
-- On # reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 643:
## Known stack suffix:
## BEGIN term
## LR(1) items:
atomicTermNotQUident -> BEGIN term . END [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On END shift to state 644
## Reductions:

State 644:
## Known stack suffix:
## BEGIN term END
## LR(1) items:
atomicTermNotQUident -> BEGIN term END . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> BEGIN term END
-- On VAL reduce production atomicTermNotQUident -> BEGIN term END
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> BEGIN term END
-- On UNIV_HASH reduce production atomicTermNotQUident -> BEGIN term END
-- On UNFOLDABLE reduce production atomicTermNotQUident -> BEGIN term END
-- On UNFOLD reduce production atomicTermNotQUident -> BEGIN term END
-- On UNDERSCORE reduce production atomicTermNotQUident -> BEGIN term END
-- On UINT8 reduce production atomicTermNotQUident -> BEGIN term END
-- On UINT64 reduce production atomicTermNotQUident -> BEGIN term END
-- On UINT32 reduce production atomicTermNotQUident -> BEGIN term END
-- On UINT16 reduce production atomicTermNotQUident -> BEGIN term END
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> BEGIN term END
-- On TYPE reduce production atomicTermNotQUident -> BEGIN term END
-- On TVAR reduce production atomicTermNotQUident -> BEGIN term END
-- On TRUE reduce production atomicTermNotQUident -> BEGIN term END
-- On TOTAL reduce production atomicTermNotQUident -> BEGIN term END
-- On THEN reduce production atomicTermNotQUident -> BEGIN term END
-- On SUB_EFFECT reduce production atomicTermNotQUident -> BEGIN term END
-- On SUBTYPE reduce production atomicTermNotQUident -> BEGIN term END
-- On SUBKIND reduce production atomicTermNotQUident -> BEGIN term END
-- On STRING reduce production atomicTermNotQUident -> BEGIN term END
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> BEGIN term END
-- On SPLICE reduce production atomicTermNotQUident -> BEGIN term END
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> BEGIN term END
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> BEGIN term END
-- On SEMICOLON reduce production atomicTermNotQUident -> BEGIN term END
-- On RPAREN reduce production atomicTermNotQUident -> BEGIN term END
-- On REIFY reduce production atomicTermNotQUident -> BEGIN term END
-- On REIFIABLE reduce production atomicTermNotQUident -> BEGIN term END
-- On REFLECTABLE reduce production atomicTermNotQUident -> BEGIN term END
-- On RBRACK reduce production atomicTermNotQUident -> BEGIN term END
-- On RBRACE reduce production atomicTermNotQUident -> BEGIN term END
-- On RARROW reduce production atomicTermNotQUident -> BEGIN term END
-- On RANGE_OF reduce production atomicTermNotQUident -> BEGIN term END
-- On PRIVATE reduce production atomicTermNotQUident -> BEGIN term END
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> BEGIN term END
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> BEGIN term END
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> BEGIN term END
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> BEGIN term END
-- On OPPREFIX reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX4 reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX3 reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX2 reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX1 reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX0d reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX0c reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX0b reduce production atomicTermNotQUident -> BEGIN term END
-- On OPINFIX0a reduce production atomicTermNotQUident -> BEGIN term END
-- On OPEN reduce production atomicTermNotQUident -> BEGIN term END
-- On OPAQUE reduce production atomicTermNotQUident -> BEGIN term END
-- On NOEXTRACT reduce production atomicTermNotQUident -> BEGIN term END
-- On NOEQUALITY reduce production atomicTermNotQUident -> BEGIN term END
-- On NEW_EFFECT reduce production atomicTermNotQUident -> BEGIN term END
-- On NEW reduce production atomicTermNotQUident -> BEGIN term END
-- On NAME reduce production atomicTermNotQUident -> BEGIN term END
-- On MODULE reduce production atomicTermNotQUident -> BEGIN term END
-- On MINUS reduce production atomicTermNotQUident -> BEGIN term END
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> BEGIN term END
-- On LPAREN reduce production atomicTermNotQUident -> BEGIN term END
-- On LOGIC reduce production atomicTermNotQUident -> BEGIN term END
-- On LET reduce production atomicTermNotQUident -> BEGIN term END
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> BEGIN term END
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> BEGIN term END
-- On LBRACK_BAR reduce production atomicTermNotQUident -> BEGIN term END
-- On LBRACK_AT reduce production atomicTermNotQUident -> BEGIN term END
-- On LBRACK reduce production atomicTermNotQUident -> BEGIN term END
-- On LBRACE reduce production atomicTermNotQUident -> BEGIN term END
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> BEGIN term END
-- On INT8 reduce production atomicTermNotQUident -> BEGIN term END
-- On INT64 reduce production atomicTermNotQUident -> BEGIN term END
-- On INT32 reduce production atomicTermNotQUident -> BEGIN term END
-- On INT16 reduce production atomicTermNotQUident -> BEGIN term END
-- On INT reduce production atomicTermNotQUident -> BEGIN term END
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> BEGIN term END
-- On INLINE reduce production atomicTermNotQUident -> BEGIN term END
-- On INCLUDE reduce production atomicTermNotQUident -> BEGIN term END
-- On IN reduce production atomicTermNotQUident -> BEGIN term END
-- On IMPLIES reduce production atomicTermNotQUident -> BEGIN term END
-- On IFF reduce production atomicTermNotQUident -> BEGIN term END
-- On IEEE64 reduce production atomicTermNotQUident -> BEGIN term END
-- On IDENT reduce production atomicTermNotQUident -> BEGIN term END
-- On HASH reduce production atomicTermNotQUident -> BEGIN term END
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> BEGIN term END
-- On FSDOC reduce production atomicTermNotQUident -> BEGIN term END
-- On FALSE reduce production atomicTermNotQUident -> BEGIN term END
-- On EXCEPTION reduce production atomicTermNotQUident -> BEGIN term END
-- On EQUALS reduce production atomicTermNotQUident -> BEGIN term END
-- On EOF reduce production atomicTermNotQUident -> BEGIN term END
-- On END reduce production atomicTermNotQUident -> BEGIN term END
-- On ELSE reduce production atomicTermNotQUident -> BEGIN term END
-- On EFFECT reduce production atomicTermNotQUident -> BEGIN term END
-- On DOT_LPAREN reduce production atomicTermNotQUident -> BEGIN term END
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> BEGIN term END
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> BEGIN term END
-- On DOT_LBRACK reduce production atomicTermNotQUident -> BEGIN term END
-- On DISJUNCTION reduce production atomicTermNotQUident -> BEGIN term END
-- On DEFAULT reduce production atomicTermNotQUident -> BEGIN term END
-- On CONJUNCTION reduce production atomicTermNotQUident -> BEGIN term END
-- On COMMA reduce production atomicTermNotQUident -> BEGIN term END
-- On COLON_EQUALS reduce production atomicTermNotQUident -> BEGIN term END
-- On COLON_COLON reduce production atomicTermNotQUident -> BEGIN term END
-- On CHAR reduce production atomicTermNotQUident -> BEGIN term END
-- On BYTEARRAY reduce production atomicTermNotQUident -> BEGIN term END
-- On BY reduce production atomicTermNotQUident -> BEGIN term END
-- On BEGIN reduce production atomicTermNotQUident -> BEGIN term END
-- On BAR_RBRACK reduce production atomicTermNotQUident -> BEGIN term END
-- On BAR reduce production atomicTermNotQUident -> BEGIN term END
-- On BANG_LBRACE reduce production atomicTermNotQUident -> BEGIN term END
-- On BACKTICK reduce production atomicTermNotQUident -> BEGIN term END
-- On ASSUME reduce production atomicTermNotQUident -> BEGIN term END
-- On AND reduce production atomicTermNotQUident -> BEGIN term END
-- On AMP reduce production atomicTermNotQUident -> BEGIN term END
-- On ABSTRACT reduce production atomicTermNotQUident -> BEGIN term END
-- On # reduce production atomicTermNotQUident -> BEGIN term END
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> BEGIN term END
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 645:
## Known stack suffix:
## OPPREFIX atomicTermQUident
## LR(1) items:
opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On VAL reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UNOPTEQUALITY reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UNIV_HASH reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UNFOLDABLE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UNFOLD reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UNDERSCORE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UINT8 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UINT64 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UINT32 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On UINT16 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On TYP_APP_GREATER reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On TYPE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On TVAR reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On TRUE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On TOTAL reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On THEN reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SUB_EFFECT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SUBTYPE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SUBKIND reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On STRING reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SQUIGGLY_RARROW reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SPLICE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SET_RANGE_OF reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SEMICOLON_SEMICOLON reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On SEMICOLON reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On RPAREN reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On REIFY reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On REIFIABLE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On REFLECTABLE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On RBRACK reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On RBRACE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On RARROW reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On RANGE_OF reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On PRIVATE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On PRAGMA_SET_OPTIONS reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On PRAGMA_RESET_OPTIONS reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On PIPE_RIGHT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On PERCENT_LBRACK reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPPREFIX reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX4 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX3 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX2 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX1 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX0d reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX0c reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX0b reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPINFIX0a reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPEN reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On OPAQUE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On NOEXTRACT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On NOEQUALITY reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On NEW_EFFECT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On NEW reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On NAME reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On MODULE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On MINUS reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LPAREN_RPAREN reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LPAREN reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LOGIC reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LET reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LENS_PAREN_RIGHT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LENS_PAREN_LEFT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LBRACK_BAR reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LBRACK_AT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LBRACK reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On LBRACE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On IRREDUCIBLE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INT8 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INT64 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INT32 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INT16 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INLINE_FOR_EXTRACTION reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INLINE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On INCLUDE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On IN reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On IMPLIES reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On IFF reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On IEEE64 reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On IDENT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On HASH reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On FSDOC_STANDALONE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On FSDOC reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On FALSE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On EXCEPTION reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On EQUALS reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On EOF reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On END reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On ELSE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On EFFECT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On DISJUNCTION reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On DEFAULT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On CONJUNCTION reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On COMMA reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On COLON_EQUALS reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On COLON_COLON reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On CHAR reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On BYTEARRAY reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On BY reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On BEGIN reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On BAR_RBRACK reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On BAR reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On BANG_LBRACE reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On BACKTICK reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On ASSUME reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On AND reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On AMP reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On ABSTRACT reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
-- On # reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 646:
## Known stack suffix:
## OPPREFIX atomicTermNotQUident
## LR(1) items:
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On VAL reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UNOPTEQUALITY reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UNIV_HASH reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UNFOLDABLE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UNFOLD reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UNDERSCORE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UINT8 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UINT64 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UINT32 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On UINT16 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On TYP_APP_GREATER reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On TYPE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On TVAR reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On TRUE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On TOTAL reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On THEN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SUB_EFFECT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SUBTYPE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SUBKIND reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On STRING reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SQUIGGLY_RARROW reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SPLICE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SET_RANGE_OF reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SEMICOLON_SEMICOLON reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On SEMICOLON reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On RPAREN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On REIFY reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On REIFIABLE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On REFLECTABLE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On RBRACK reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On RBRACE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On RARROW reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On RANGE_OF reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On PRIVATE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On PRAGMA_SET_OPTIONS reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On PRAGMA_RESET_OPTIONS reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On PIPE_RIGHT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On PERCENT_LBRACK reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPPREFIX reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX4 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX3 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX2 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX1 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX0d reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX0c reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX0b reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPINFIX0a reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPEN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On OPAQUE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On NOEXTRACT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On NOEQUALITY reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On NEW_EFFECT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On NEW reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On NAME reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On MODULE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On MINUS reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LPAREN_RPAREN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LPAREN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LOGIC reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LET reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LENS_PAREN_RIGHT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LENS_PAREN_LEFT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LBRACK_BAR reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LBRACK_AT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LBRACK reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On LBRACE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On IRREDUCIBLE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INT8 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INT64 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INT32 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INT16 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INLINE_FOR_EXTRACTION reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INLINE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On INCLUDE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On IN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On IMPLIES reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On IFF reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On IEEE64 reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On IDENT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On HASH reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On FSDOC_STANDALONE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On FSDOC reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On FALSE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On EXCEPTION reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On EQUALS reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On EOF reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On END reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On ELSE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On EFFECT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On DOT_LPAREN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On DOT_LENS_PAREN_LEFT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On DOT_LBRACK_BAR reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On DOT_LBRACK reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On DISJUNCTION reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On DEFAULT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On CONJUNCTION reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On COMMA reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On COLON_EQUALS reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On COLON_COLON reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On CHAR reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On BYTEARRAY reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On BY reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On BEGIN reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On BAR_RBRACK reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On BAR reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On BANG_LBRACE reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On BACKTICK reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On ASSUME reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On AND reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On AMP reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On ABSTRACT reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
-- On # reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 647:
## Known stack suffix:
## LPAREN aqual
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual . tmFormula RPAREN RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmArrow(tmFormula) -> aqual . tmFormula RARROW tmArrow(tmFormula) [ SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN IMPLIES IFF ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 648
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 648:
## Known stack suffix:
## LPAREN aqual tmFormula
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula . RPAREN RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmArrow(tmFormula) -> aqual tmFormula . RARROW tmArrow(tmFormula) [ SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN IMPLIES IFF ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ RPAREN RARROW DISJUNCTION ]
## Transitions:
-- On RPAREN shift to state 649
-- On RARROW shift to state 370
-- On DISJUNCTION shift to state 372
## Reductions:

State 649:
## Known stack suffix:
## LPAREN aqual tmFormula RPAREN
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN . RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On RARROW shift to state 650
## Reductions:

State 650:
## Known stack suffix:
## LPAREN aqual tmFormula RPAREN RARROW
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW . tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 651
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 651:
## Known stack suffix:
## LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On VAL reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On UNOPTEQUALITY reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On UNFOLDABLE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On UNFOLD reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On TYPE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On TOTAL reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On THEN reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On SUB_EFFECT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On SUBTYPE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On SUBKIND reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On SPLICE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On SEMICOLON_SEMICOLON reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On SEMICOLON reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On RPAREN reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On REIFIABLE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On REFLECTABLE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On RBRACK reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On RBRACE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On PRIVATE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On PRAGMA_SET_OPTIONS reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On PRAGMA_RESET_OPTIONS reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On OPEN reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On OPAQUE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On NOEXTRACT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On NOEQUALITY reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On NEW_EFFECT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On NEW reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On MODULE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On LOGIC reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On LET reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On LENS_PAREN_RIGHT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On LBRACK_AT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On IRREDUCIBLE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On INLINE_FOR_EXTRACTION reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On INLINE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On INCLUDE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On IN reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On IMPLIES reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On IFF reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On FSDOC_STANDALONE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On FSDOC reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On EXCEPTION reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On EOF reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On END reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On ELSE reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On EFFECT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On DEFAULT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On BY reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On BAR_RBRACK reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On BAR reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On ASSUME reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On AND reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On ABSTRACT reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
-- On # reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 652:
## Known stack suffix:
## MATCH term
## LR(1) items:
noSeqTerm -> MATCH term . WITH reverse_left_flexible_list(BAR,__anonymous_7) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On WITH shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## MATCH term WITH
## LR(1) items:
noSeqTerm -> MATCH term WITH . reverse_left_flexible_list(BAR,__anonymous_7) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On reverse_left_flexible_list(BAR,__anonymous_7) shift to state 654
-- On quident shift to state 156
-- On patternBranch shift to state 657
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On WITH reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On VAL reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On UNOPTEQUALITY reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On UNFOLDABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On UNFOLD reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On TYPE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On TOTAL reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On THEN reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On SUB_EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On SUBKIND reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On SPLICE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On SEMICOLON_SEMICOLON reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On SEMICOLON reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On RPAREN reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On REIFIABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On REFLECTABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On RBRACK reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On RBRACE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On PRIVATE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On PRAGMA_SET_OPTIONS reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On PRAGMA_RESET_OPTIONS reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On OPEN reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On OPAQUE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On NOEXTRACT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On NOEQUALITY reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On NEW_EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On NEW reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On MODULE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On LOGIC reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On LET reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On LENS_PAREN_RIGHT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On LBRACK_AT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On IRREDUCIBLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On INLINE_FOR_EXTRACTION reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On INLINE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On INCLUDE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On IN reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On FSDOC_STANDALONE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On FSDOC reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On EXCEPTION reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On EOF reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On END reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On ELSE reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On DEFAULT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On BAR_RBRACK reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On BAR reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On ASSUME reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On AND reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On ABSTRACT reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
-- On # reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EOF END ELSE EFFECT DOLLAR DEFAULT CHAR BYTEARRAY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production reverse_left_flexible_list(BAR,__anonymous_7) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 654:
## Known stack suffix:
## MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
## LR(1) items:
noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) . BAR patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BAR shift to state 655
## Reductions:
-- On WITH reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On VAL reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On UNOPTEQUALITY reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On UNFOLDABLE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On UNFOLD reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On TYPE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On TOTAL reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On THEN reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On SUB_EFFECT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On SUBKIND reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On SPLICE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On SEMICOLON reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On RPAREN reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On REIFIABLE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On REFLECTABLE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On RBRACK reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On RBRACE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On PRIVATE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On OPEN reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On OPAQUE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On NOEXTRACT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On NOEQUALITY reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On NEW_EFFECT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On NEW reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On MODULE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On LOGIC reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On LET reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On LBRACK_AT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On IRREDUCIBLE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On INLINE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On INCLUDE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On IN reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On FSDOC_STANDALONE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On FSDOC reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On EXCEPTION reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On EOF reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On END reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On ELSE reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On EFFECT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On DEFAULT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On BAR_RBRACK reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On BAR reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On ASSUME reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On AND reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On ABSTRACT reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
-- On # reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
** Conflict on BAR
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 655:
## Known stack suffix:
## reverse_left_flexible_list(BAR,__anonymous_7) BAR
## LR(1) items:
reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR . patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On quident shift to state 156
-- On patternBranch shift to state 656
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 656:
## Known stack suffix:
## reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
## LR(1) items:
reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On VAL reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On UNOPTEQUALITY reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On UNFOLDABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On UNFOLD reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On TYPE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On TOTAL reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On THEN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On SUB_EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On SUBKIND reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On SPLICE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On SEMICOLON_SEMICOLON reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On SEMICOLON reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On RPAREN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On REIFIABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On REFLECTABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On RBRACK reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On RBRACE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On PRIVATE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On PRAGMA_SET_OPTIONS reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On PRAGMA_RESET_OPTIONS reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On OPEN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On OPAQUE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On NOEXTRACT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On NOEQUALITY reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On NEW_EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On NEW reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On MODULE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On LOGIC reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On LET reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On LENS_PAREN_RIGHT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On LBRACK_AT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On IRREDUCIBLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On INLINE_FOR_EXTRACTION reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On INLINE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On INCLUDE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On IN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On FSDOC_STANDALONE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On FSDOC reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On EXCEPTION reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On EOF reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On END reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On ELSE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On DEFAULT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On BAR_RBRACK reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On BAR reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On ASSUME reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On AND reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On ABSTRACT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
-- On # reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 657:
## Known stack suffix:
## patternBranch
## LR(1) items:
reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On VAL reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On UNOPTEQUALITY reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On UNFOLDABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On UNFOLD reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On TYPE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On TOTAL reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On THEN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On SUB_EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On SUBKIND reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On SPLICE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On SEMICOLON_SEMICOLON reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On SEMICOLON reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On RPAREN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On REIFIABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On REFLECTABLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On RBRACK reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On RBRACE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On PRIVATE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On PRAGMA_SET_OPTIONS reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On PRAGMA_RESET_OPTIONS reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On OPEN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On OPAQUE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On NOEXTRACT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On NOEQUALITY reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On NEW_EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On NEW reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On MODULE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On LOGIC reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On LET reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On LENS_PAREN_RIGHT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On LBRACK_AT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On IRREDUCIBLE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On INLINE_FOR_EXTRACTION reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On INLINE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On INCLUDE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On IN reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On FSDOC_STANDALONE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On FSDOC reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On EXCEPTION reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On EOF reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On END reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On ELSE reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On EFFECT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On DEFAULT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On BAR_RBRACK reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On BAR reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On ASSUME reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On AND reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On ABSTRACT reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
-- On # reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 658:
## Known stack suffix:
## LBRACK right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
## LR(1) items:
projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On VAL reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNOPTEQUALITY reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNIV_HASH reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNFOLDABLE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNFOLD reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNDERSCORE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT8 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT64 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT32 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT16 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TYP_APP_GREATER reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TYPE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TVAR reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TRUE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TOTAL reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On THEN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SUB_EFFECT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SUBTYPE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SUBKIND reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On STRING reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SQUIGGLY_RARROW reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SPLICE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SET_RANGE_OF reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SEMICOLON reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RPAREN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On REIFY reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On REIFIABLE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On REFLECTABLE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RBRACK reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RBRACE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RARROW reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RANGE_OF reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PRIVATE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PIPE_RIGHT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PERCENT_LBRACK reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPPREFIX reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX4 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX3 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX2 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX1 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0d reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0c reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0b reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0a reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPEN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPAQUE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NOEXTRACT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NOEQUALITY reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NEW_EFFECT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NEW reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NAME reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On MODULE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On MINUS reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LPAREN_RPAREN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LPAREN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LOGIC reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LET reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LENS_PAREN_LEFT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACK_BAR reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACK_AT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACK reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IRREDUCIBLE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT8 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT64 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT32 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT16 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INLINE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INCLUDE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IMPLIES reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IFF reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IEEE64 reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IDENT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On HASH reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On FSDOC_STANDALONE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On FSDOC reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On FALSE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EXCEPTION reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EQUALS reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EOF reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On END reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On ELSE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EFFECT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LPAREN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LBRACK_BAR reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LBRACK reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DISJUNCTION reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DEFAULT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On CONJUNCTION reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On COMMA reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On COLON_EQUALS reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On COLON_COLON reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On CHAR reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BYTEARRAY reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BY reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BEGIN reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BAR_RBRACK reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BAR reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BANG_LBRACE reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BACKTICK reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On ASSUME reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On AND reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On AMP reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On ABSTRACT reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On # reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 660:
## Known stack suffix:
## noSeqTerm
## LR(1) items:
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm . [ RBRACK BAR_RBRACK ]
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm . SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm) [ RBRACK BAR_RBRACK ]
## Transitions:
-- On SEMICOLON shift to state 661
## Reductions:
-- On RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm
-- On BAR_RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm

State 661:
## Known stack suffix:
## noSeqTerm SEMICOLON
## LR(1) items:
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm SEMICOLON . right_flexible_list(SEMICOLON,noSeqTerm) [ RBRACK BAR_RBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 662
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->
-- On BAR_RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 662:
## Known stack suffix:
## noSeqTerm SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm) . [ RBRACK BAR_RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm)
-- On BAR_RBRACK reduce production right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm)

State 663:
## Known stack suffix:
## MINUS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On MINUS reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 664:
## Known stack suffix:
## REQUIRES typ
## LR(1) items:
noSeqTerm -> REQUIRES typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> REQUIRES typ
-- On VAL reduce production noSeqTerm -> REQUIRES typ
-- On UNOPTEQUALITY reduce production noSeqTerm -> REQUIRES typ
-- On UNFOLDABLE reduce production noSeqTerm -> REQUIRES typ
-- On UNFOLD reduce production noSeqTerm -> REQUIRES typ
-- On TYPE reduce production noSeqTerm -> REQUIRES typ
-- On TOTAL reduce production noSeqTerm -> REQUIRES typ
-- On THEN reduce production noSeqTerm -> REQUIRES typ
-- On SUB_EFFECT reduce production noSeqTerm -> REQUIRES typ
-- On SUBKIND reduce production noSeqTerm -> REQUIRES typ
-- On SPLICE reduce production noSeqTerm -> REQUIRES typ
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> REQUIRES typ
-- On SEMICOLON reduce production noSeqTerm -> REQUIRES typ
-- On RPAREN reduce production noSeqTerm -> REQUIRES typ
-- On REIFIABLE reduce production noSeqTerm -> REQUIRES typ
-- On REFLECTABLE reduce production noSeqTerm -> REQUIRES typ
-- On RBRACK reduce production noSeqTerm -> REQUIRES typ
-- On RBRACE reduce production noSeqTerm -> REQUIRES typ
-- On PRIVATE reduce production noSeqTerm -> REQUIRES typ
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> REQUIRES typ
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> REQUIRES typ
-- On OPEN reduce production noSeqTerm -> REQUIRES typ
-- On OPAQUE reduce production noSeqTerm -> REQUIRES typ
-- On NOEXTRACT reduce production noSeqTerm -> REQUIRES typ
-- On NOEQUALITY reduce production noSeqTerm -> REQUIRES typ
-- On NEW_EFFECT reduce production noSeqTerm -> REQUIRES typ
-- On NEW reduce production noSeqTerm -> REQUIRES typ
-- On MODULE reduce production noSeqTerm -> REQUIRES typ
-- On LOGIC reduce production noSeqTerm -> REQUIRES typ
-- On LET reduce production noSeqTerm -> REQUIRES typ
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> REQUIRES typ
-- On LBRACK_AT reduce production noSeqTerm -> REQUIRES typ
-- On IRREDUCIBLE reduce production noSeqTerm -> REQUIRES typ
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> REQUIRES typ
-- On INLINE reduce production noSeqTerm -> REQUIRES typ
-- On INCLUDE reduce production noSeqTerm -> REQUIRES typ
-- On IN reduce production noSeqTerm -> REQUIRES typ
-- On FSDOC_STANDALONE reduce production noSeqTerm -> REQUIRES typ
-- On FSDOC reduce production noSeqTerm -> REQUIRES typ
-- On EXCEPTION reduce production noSeqTerm -> REQUIRES typ
-- On EOF reduce production noSeqTerm -> REQUIRES typ
-- On END reduce production noSeqTerm -> REQUIRES typ
-- On ELSE reduce production noSeqTerm -> REQUIRES typ
-- On EFFECT reduce production noSeqTerm -> REQUIRES typ
-- On DEFAULT reduce production noSeqTerm -> REQUIRES typ
-- On BAR_RBRACK reduce production noSeqTerm -> REQUIRES typ
-- On BAR reduce production noSeqTerm -> REQUIRES typ
-- On ASSUME reduce production noSeqTerm -> REQUIRES typ
-- On AND reduce production noSeqTerm -> REQUIRES typ
-- On ABSTRACT reduce production noSeqTerm -> REQUIRES typ
-- On # reduce production noSeqTerm -> REQUIRES typ
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> REQUIRES typ
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 665:
## Known stack suffix:
## LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) . BAR_RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On BAR_RBRACK shift to state 666
## Reductions:

State 666:
## Known stack suffix:
## LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
## LR(1) items:
projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On VAL reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UNOPTEQUALITY reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UNIV_HASH reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UNFOLDABLE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UNFOLD reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UNDERSCORE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UINT8 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UINT64 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UINT32 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On UINT16 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On TYP_APP_GREATER reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On TYPE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On TVAR reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On TRUE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On TOTAL reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On THEN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SUB_EFFECT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SUBTYPE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SUBKIND reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On STRING reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SQUIGGLY_RARROW reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SPLICE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SET_RANGE_OF reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On SEMICOLON reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On RPAREN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On REIFY reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On REIFIABLE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On REFLECTABLE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On RBRACK reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On RBRACE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On RARROW reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On RANGE_OF reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On PRIVATE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On PIPE_RIGHT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On PERCENT_LBRACK reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPPREFIX reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX4 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX3 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX2 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX1 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX0d reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX0c reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX0b reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPINFIX0a reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPEN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On OPAQUE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On NOEXTRACT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On NOEQUALITY reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On NEW_EFFECT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On NEW reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On NAME reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On MODULE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On MINUS reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LPAREN_RPAREN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LPAREN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LOGIC reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LET reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LENS_PAREN_LEFT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LBRACK_BAR reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LBRACK_AT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LBRACK reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On LBRACE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On IRREDUCIBLE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INT8 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INT64 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INT32 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INT16 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INLINE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On INCLUDE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On IN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On IMPLIES reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On IFF reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On IEEE64 reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On IDENT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On HASH reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On FSDOC_STANDALONE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On FSDOC reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On FALSE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On EXCEPTION reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On EQUALS reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On EOF reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On END reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On ELSE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On EFFECT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On DOT_LPAREN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On DOT_LBRACK_BAR reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On DOT_LBRACK reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On DOT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On DISJUNCTION reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On DEFAULT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On CONJUNCTION reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On COMMA reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On COLON_EQUALS reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On COLON_COLON reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On CHAR reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On BYTEARRAY reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On BY reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On BEGIN reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On BAR_RBRACK reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On BAR reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On BANG_LBRACE reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On BACKTICK reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On ASSUME reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On AND reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On AMP reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On ABSTRACT reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
-- On # reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 667:
## Known stack suffix:
## PERC_BACKTICK atomicTerm
## LR(1) items:
tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On VAL reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On THEN reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX4 reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX3 reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On NEW reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On LET reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On IN reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On IFF reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On EOF reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On END reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On BY reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On BAR reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On BACKTICK reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On AND reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On AMP reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
-- On # reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 668:
## Known stack suffix:
## QUOTE tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On VAL reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On UNOPTEQUALITY reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On UNFOLDABLE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On UNFOLD reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On TYPE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On TOTAL reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On THEN reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On SUB_EFFECT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On SUBTYPE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On SUBKIND reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On SQUIGGLY_RARROW reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On SPLICE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On SEMICOLON_SEMICOLON reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On SEMICOLON reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On RPAREN reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On REIFIABLE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On REFLECTABLE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On RBRACK reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On RBRACE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On RARROW reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On PRIVATE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On PRAGMA_SET_OPTIONS reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On PRAGMA_RESET_OPTIONS reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On PIPE_RIGHT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPINFIX2 reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPINFIX1 reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPINFIX0d reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPINFIX0c reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPINFIX0b reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPINFIX0a reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPEN reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On OPAQUE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On NOEXTRACT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On NOEQUALITY reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On NEW_EFFECT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On NEW reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On MODULE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On MINUS reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On LOGIC reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On LET reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On LENS_PAREN_RIGHT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On LBRACK_AT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On IRREDUCIBLE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On INLINE_FOR_EXTRACTION reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On INLINE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On INCLUDE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On IN reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On IMPLIES reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On IFF reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On FSDOC_STANDALONE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On FSDOC reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On EXCEPTION reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On EQUALS reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On EOF reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On END reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On ELSE reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On EFFECT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On DISJUNCTION reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On DEFAULT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On CONJUNCTION reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On COMMA reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On COLON_EQUALS reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On BY reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On BAR_RBRACK reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On BAR reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On ASSUME reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On AND reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On ABSTRACT reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
-- On # reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 669:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq . COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On COMMA shift to state 670
## Reductions:

State 670:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq COMMA
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA . separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On separated_nonempty_list(COMMA,tmEq) shift to state 671
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 671:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq)
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) . LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 672
## Reductions:

State 672:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On VAL reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UNOPTEQUALITY reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UNIV_HASH reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UNFOLDABLE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UNFOLD reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UNDERSCORE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UINT8 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UINT64 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UINT32 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On UINT16 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On TYP_APP_GREATER reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On TYPE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On TVAR reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On TRUE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On TOTAL reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On THEN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SUB_EFFECT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SUBTYPE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SUBKIND reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On STRING reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SQUIGGLY_RARROW reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SPLICE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SET_RANGE_OF reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SEMICOLON_SEMICOLON reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On SEMICOLON reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On RPAREN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On REIFY reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On REIFIABLE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On REFLECTABLE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On RBRACK reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On RBRACE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On RARROW reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On RANGE_OF reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On PRIVATE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On PRAGMA_SET_OPTIONS reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On PRAGMA_RESET_OPTIONS reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On PIPE_RIGHT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On PERCENT_LBRACK reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPPREFIX reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX4 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX3 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX2 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX1 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX0d reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX0c reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX0b reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPINFIX0a reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPEN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On OPAQUE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On NOEXTRACT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On NOEQUALITY reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On NEW_EFFECT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On NEW reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On NAME reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On MODULE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On MINUS reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LPAREN_RPAREN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LPAREN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LOGIC reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LET reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LENS_PAREN_RIGHT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LBRACK_BAR reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LBRACK_AT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LBRACK reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On LBRACE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On IRREDUCIBLE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INT8 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INT64 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INT32 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INT16 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INLINE_FOR_EXTRACTION reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INLINE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On INCLUDE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On IN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On IMPLIES reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On IFF reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On IEEE64 reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On IDENT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On HASH reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On FSDOC_STANDALONE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On FSDOC reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On FALSE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On EXCEPTION reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On EQUALS reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On EOF reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On END reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On ELSE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On EFFECT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On DOT_LPAREN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On DOT_LENS_PAREN_LEFT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On DOT_LBRACK_BAR reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On DOT_LBRACK reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On DISJUNCTION reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On DEFAULT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On CONJUNCTION reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On COMMA reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On COLON_EQUALS reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On COLON_COLON reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On CHAR reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On BYTEARRAY reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On BY reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On BEGIN reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On BAR_RBRACK reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On BAR reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On BANG_LBRACE reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On BACKTICK reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On ASSUME reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On AND reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On AMP reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On ABSTRACT reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
-- On # reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 673:
## Known stack suffix:
## SYNTH atomicTerm
## LR(1) items:
noSeqTerm -> SYNTH atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production noSeqTerm -> SYNTH atomicTerm
-- On VAL reduce production noSeqTerm -> SYNTH atomicTerm
-- On UNOPTEQUALITY reduce production noSeqTerm -> SYNTH atomicTerm
-- On UNFOLDABLE reduce production noSeqTerm -> SYNTH atomicTerm
-- On UNFOLD reduce production noSeqTerm -> SYNTH atomicTerm
-- On TYPE reduce production noSeqTerm -> SYNTH atomicTerm
-- On TOTAL reduce production noSeqTerm -> SYNTH atomicTerm
-- On THEN reduce production noSeqTerm -> SYNTH atomicTerm
-- On SUB_EFFECT reduce production noSeqTerm -> SYNTH atomicTerm
-- On SUBKIND reduce production noSeqTerm -> SYNTH atomicTerm
-- On SPLICE reduce production noSeqTerm -> SYNTH atomicTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> SYNTH atomicTerm
-- On SEMICOLON reduce production noSeqTerm -> SYNTH atomicTerm
-- On RPAREN reduce production noSeqTerm -> SYNTH atomicTerm
-- On REIFIABLE reduce production noSeqTerm -> SYNTH atomicTerm
-- On REFLECTABLE reduce production noSeqTerm -> SYNTH atomicTerm
-- On RBRACK reduce production noSeqTerm -> SYNTH atomicTerm
-- On RBRACE reduce production noSeqTerm -> SYNTH atomicTerm
-- On PRIVATE reduce production noSeqTerm -> SYNTH atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> SYNTH atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> SYNTH atomicTerm
-- On OPEN reduce production noSeqTerm -> SYNTH atomicTerm
-- On OPAQUE reduce production noSeqTerm -> SYNTH atomicTerm
-- On NOEXTRACT reduce production noSeqTerm -> SYNTH atomicTerm
-- On NOEQUALITY reduce production noSeqTerm -> SYNTH atomicTerm
-- On NEW_EFFECT reduce production noSeqTerm -> SYNTH atomicTerm
-- On NEW reduce production noSeqTerm -> SYNTH atomicTerm
-- On MODULE reduce production noSeqTerm -> SYNTH atomicTerm
-- On LOGIC reduce production noSeqTerm -> SYNTH atomicTerm
-- On LET reduce production noSeqTerm -> SYNTH atomicTerm
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> SYNTH atomicTerm
-- On LBRACK_AT reduce production noSeqTerm -> SYNTH atomicTerm
-- On IRREDUCIBLE reduce production noSeqTerm -> SYNTH atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> SYNTH atomicTerm
-- On INLINE reduce production noSeqTerm -> SYNTH atomicTerm
-- On INCLUDE reduce production noSeqTerm -> SYNTH atomicTerm
-- On IN reduce production noSeqTerm -> SYNTH atomicTerm
-- On FSDOC_STANDALONE reduce production noSeqTerm -> SYNTH atomicTerm
-- On FSDOC reduce production noSeqTerm -> SYNTH atomicTerm
-- On EXCEPTION reduce production noSeqTerm -> SYNTH atomicTerm
-- On EOF reduce production noSeqTerm -> SYNTH atomicTerm
-- On END reduce production noSeqTerm -> SYNTH atomicTerm
-- On ELSE reduce production noSeqTerm -> SYNTH atomicTerm
-- On EFFECT reduce production noSeqTerm -> SYNTH atomicTerm
-- On DEFAULT reduce production noSeqTerm -> SYNTH atomicTerm
-- On BAR_RBRACK reduce production noSeqTerm -> SYNTH atomicTerm
-- On BAR reduce production noSeqTerm -> SYNTH atomicTerm
-- On ASSUME reduce production noSeqTerm -> SYNTH atomicTerm
-- On AND reduce production noSeqTerm -> SYNTH atomicTerm
-- On ABSTRACT reduce production noSeqTerm -> SYNTH atomicTerm
-- On # reduce production noSeqTerm -> SYNTH atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> SYNTH atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 674:
## Known stack suffix:
## quident
## LR(1) items:
projectionLHS -> quident . QMARK_DOT lident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> quident . QMARK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident . some(fsTypeArgs) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On QMARK_DOT shift to state 109
-- On QMARK shift to state 111
-- On some(fsTypeArgs) shift to state 628
-- On fsTypeArgs shift to state 629
## Reductions:

State 675:
## Known stack suffix:
## TILDE atomicTerm
## LR(1) items:
tmNoEqWith(tmRefinement) -> TILDE atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On VAL reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On UNOPTEQUALITY reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On UNFOLDABLE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On UNFOLD reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On TYPE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On TOTAL reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On THEN reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On SUB_EFFECT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On SUBTYPE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On SUBKIND reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On SQUIGGLY_RARROW reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On SPLICE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On SEMICOLON_SEMICOLON reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On SEMICOLON reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On RPAREN reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On REIFIABLE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On REFLECTABLE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On RBRACK reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On RBRACE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On RARROW reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On PRIVATE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On PIPE_RIGHT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX4 reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX3 reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX2 reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX1 reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX0d reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX0c reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX0b reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPINFIX0a reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPEN reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On OPAQUE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On NOEXTRACT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On NOEQUALITY reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On NEW_EFFECT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On NEW reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On MODULE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On MINUS reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On LOGIC reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On LET reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On LENS_PAREN_RIGHT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On LBRACK_AT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On IRREDUCIBLE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On INLINE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On INCLUDE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On IN reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On IMPLIES reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On IFF reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On FSDOC_STANDALONE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On FSDOC reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On EXCEPTION reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On EQUALS reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On EOF reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On END reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On ELSE reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On EFFECT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On DISJUNCTION reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On DEFAULT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On CONJUNCTION reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On COMMA reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On COLON_EQUALS reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On COLON_COLON reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On BY reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On BAR_RBRACK reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On BAR reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On BACKTICK reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On ASSUME reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On AND reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On AMP reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On ABSTRACT reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
-- On # reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production tmNoEqWith(tmRefinement) -> TILDE atomicTerm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 676:
## Known stack suffix:
## TRY term
## LR(1) items:
noSeqTerm -> TRY term . WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On WITH shift to state 677
## Reductions:

State 677:
## Known stack suffix:
## TRY term WITH
## LR(1) items:
noSeqTerm -> TRY term WITH . reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BAR shift to state 602
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On reverse_left_flexible_nonempty_list(BAR,patternBranch) shift to state 678
-- On quident shift to state 156
-- On patternBranch shift to state 620
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 678:
## Known stack suffix:
## TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
## LR(1) items:
noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BAR shift to state 618
## Reductions:
-- On WITH reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On VAL reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On UNOPTEQUALITY reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On UNFOLDABLE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On UNFOLD reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On TYPE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On TOTAL reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On THEN reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SUB_EFFECT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SUBKIND reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SPLICE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On SEMICOLON reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On RPAREN reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On REIFIABLE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On REFLECTABLE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On RBRACK reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On RBRACE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On PRIVATE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On OPEN reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On OPAQUE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NOEXTRACT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NOEQUALITY reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NEW_EFFECT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On NEW reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On MODULE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LOGIC reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LET reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LENS_PAREN_RIGHT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On LBRACK_AT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On IRREDUCIBLE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On INLINE_FOR_EXTRACTION reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On INLINE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On INCLUDE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On IN reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On FSDOC_STANDALONE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On FSDOC reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On EXCEPTION reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On EOF reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On END reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On ELSE reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On EFFECT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On DEFAULT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On BAR_RBRACK reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On BAR reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On ASSUME reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On AND reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On ABSTRACT reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
-- On # reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
** Conflict on BAR
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
**   There is a tension between
**   (1) reducing production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 679:
## Known stack suffix:
## PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 680
## Reductions:

State 680:
## Known stack suffix:
## PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
## LR(1) items:
projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Reductions:
-- On WITH reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On VAL reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNOPTEQUALITY reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNIV_HASH reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNFOLDABLE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNFOLD reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UNDERSCORE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT8 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT64 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT32 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On UINT16 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TYP_APP_GREATER reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TYPE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TVAR reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TRUE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On TOTAL reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On THEN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SUB_EFFECT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SUBTYPE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SUBKIND reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On STRING reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SQUIGGLY_RARROW reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SPLICE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SET_RANGE_OF reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On SEMICOLON reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RPAREN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On REIFY reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On REIFIABLE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On REFLECTABLE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RBRACK reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RBRACE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RARROW reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On RANGE_OF reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PRIVATE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PIPE_RIGHT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On PERCENT_LBRACK reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPPREFIX reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX4 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX3 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX2 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX1 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0d reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0c reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0b reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPINFIX0a reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPEN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On OPAQUE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NOEXTRACT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NOEQUALITY reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NEW_EFFECT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NEW reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On NAME reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On MODULE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On MINUS reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LPAREN_RPAREN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LPAREN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LOGIC reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LET reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LENS_PAREN_LEFT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACK_BAR reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACK_AT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACK reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On LBRACE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IRREDUCIBLE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT8 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT64 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT32 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT16 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INLINE_FOR_EXTRACTION reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INLINE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On INCLUDE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IMPLIES reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IFF reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IEEE64 reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On IDENT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On HASH reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On FSDOC_STANDALONE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On FSDOC reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On FALSE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EXCEPTION reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EQUALS reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EOF reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On END reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On ELSE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On EFFECT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LPAREN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LENS_PAREN_LEFT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LBRACK_BAR reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT_LBRACK reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DOT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DISJUNCTION reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On DEFAULT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On CONJUNCTION reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On COMMA reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On COLON_EQUALS reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On COLON_COLON reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On CHAR reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BYTEARRAY reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BY reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BEGIN reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BAR_RBRACK reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BAR reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BANG_LBRACE reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On BACKTICK reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On ASSUME reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On AND reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On AMP reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On ABSTRACT reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
-- On # reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
** End-of-stream conflict on WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
**   There is a tension between
**   (1) reducing production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 681:
## Known stack suffix:
## LBRACK_AT list(atomicTerm)
## LR(1) items:
attribute -> LBRACK_AT list(atomicTerm) . RBRACK [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On RBRACK shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## LBRACK_AT list(atomicTerm) RBRACK
## LR(1) items:
attribute -> LBRACK_AT list(atomicTerm) RBRACK . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On UNOPTEQUALITY reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On UNFOLDABLE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On UNFOLD reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On TYPE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On TOTAL reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On SUB_EFFECT reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On SPLICE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On REIFIABLE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On REFLECTABLE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On PRIVATE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On PRAGMA_SET_OPTIONS reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On OPEN reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On OPAQUE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On NOEXTRACT reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On NOEQUALITY reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On NEW_EFFECT reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On NEW reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On MODULE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On LOGIC reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On LET reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On LBRACK_AT reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On IRREDUCIBLE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On INLINE_FOR_EXTRACTION reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On INLINE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On INCLUDE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On FSDOC_STANDALONE reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On FSDOC reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On EXCEPTION reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On EFFECT reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On DEFAULT reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On ASSUME reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On AND reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK
-- On ABSTRACT reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK

State 683:
## Known stack suffix:
## atomicTerm
## LR(1) items:
list(atomicTerm) -> atomicTerm . list(atomicTerm) [ RBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(atomicTerm) shift to state 684
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 683
## Reductions:
-- On RBRACK reduce production list(atomicTerm) ->

State 684:
## Known stack suffix:
## atomicTerm list(atomicTerm)
## LR(1) items:
list(atomicTerm) -> atomicTerm list(atomicTerm) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production list(atomicTerm) -> atomicTerm list(atomicTerm)

State 685:
## Known stack suffix:
## IRREDUCIBLE
## LR(1) items:
qualifier -> IRREDUCIBLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> IRREDUCIBLE
-- On UNOPTEQUALITY reduce production qualifier -> IRREDUCIBLE
-- On UNFOLDABLE reduce production qualifier -> IRREDUCIBLE
-- On UNFOLD reduce production qualifier -> IRREDUCIBLE
-- On TYPE reduce production qualifier -> IRREDUCIBLE
-- On TOTAL reduce production qualifier -> IRREDUCIBLE
-- On SUB_EFFECT reduce production qualifier -> IRREDUCIBLE
-- On SPLICE reduce production qualifier -> IRREDUCIBLE
-- On REIFIABLE reduce production qualifier -> IRREDUCIBLE
-- On REFLECTABLE reduce production qualifier -> IRREDUCIBLE
-- On PRIVATE reduce production qualifier -> IRREDUCIBLE
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> IRREDUCIBLE
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> IRREDUCIBLE
-- On OPEN reduce production qualifier -> IRREDUCIBLE
-- On OPAQUE reduce production qualifier -> IRREDUCIBLE
-- On NOEXTRACT reduce production qualifier -> IRREDUCIBLE
-- On NOEQUALITY reduce production qualifier -> IRREDUCIBLE
-- On NEW_EFFECT reduce production qualifier -> IRREDUCIBLE
-- On NEW reduce production qualifier -> IRREDUCIBLE
-- On MODULE reduce production qualifier -> IRREDUCIBLE
-- On LOGIC reduce production qualifier -> IRREDUCIBLE
-- On LET reduce production qualifier -> IRREDUCIBLE
-- On LBRACK_AT reduce production qualifier -> IRREDUCIBLE
-- On IRREDUCIBLE reduce production qualifier -> IRREDUCIBLE
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> IRREDUCIBLE
-- On INLINE reduce production qualifier -> IRREDUCIBLE
-- On INCLUDE reduce production qualifier -> IRREDUCIBLE
-- On FSDOC_STANDALONE reduce production qualifier -> IRREDUCIBLE
-- On FSDOC reduce production qualifier -> IRREDUCIBLE
-- On EXCEPTION reduce production qualifier -> IRREDUCIBLE
-- On EFFECT reduce production qualifier -> IRREDUCIBLE
-- On DEFAULT reduce production qualifier -> IRREDUCIBLE
-- On ASSUME reduce production qualifier -> IRREDUCIBLE
-- On ABSTRACT reduce production qualifier -> IRREDUCIBLE

State 686:
## Known stack suffix:
## INLINE_FOR_EXTRACTION
## LR(1) items:
qualifier -> INLINE_FOR_EXTRACTION . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On UNOPTEQUALITY reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On UNFOLDABLE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On UNFOLD reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On TYPE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On TOTAL reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On SUB_EFFECT reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On SPLICE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On REIFIABLE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On REFLECTABLE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On PRIVATE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On OPEN reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On OPAQUE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On NOEXTRACT reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On NOEQUALITY reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On NEW_EFFECT reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On NEW reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On MODULE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On LOGIC reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On LET reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On LBRACK_AT reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On IRREDUCIBLE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On INLINE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On INCLUDE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On FSDOC_STANDALONE reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On FSDOC reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On EXCEPTION reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On EFFECT reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On DEFAULT reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On ASSUME reduce production qualifier -> INLINE_FOR_EXTRACTION
-- On ABSTRACT reduce production qualifier -> INLINE_FOR_EXTRACTION

State 687:
## Known stack suffix:
## INLINE
## LR(1) items:
qualifier -> INLINE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> INLINE
-- On UNOPTEQUALITY reduce production qualifier -> INLINE
-- On UNFOLDABLE reduce production qualifier -> INLINE
-- On UNFOLD reduce production qualifier -> INLINE
-- On TYPE reduce production qualifier -> INLINE
-- On TOTAL reduce production qualifier -> INLINE
-- On SUB_EFFECT reduce production qualifier -> INLINE
-- On SPLICE reduce production qualifier -> INLINE
-- On REIFIABLE reduce production qualifier -> INLINE
-- On REFLECTABLE reduce production qualifier -> INLINE
-- On PRIVATE reduce production qualifier -> INLINE
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> INLINE
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> INLINE
-- On OPEN reduce production qualifier -> INLINE
-- On OPAQUE reduce production qualifier -> INLINE
-- On NOEXTRACT reduce production qualifier -> INLINE
-- On NOEQUALITY reduce production qualifier -> INLINE
-- On NEW_EFFECT reduce production qualifier -> INLINE
-- On NEW reduce production qualifier -> INLINE
-- On MODULE reduce production qualifier -> INLINE
-- On LOGIC reduce production qualifier -> INLINE
-- On LET reduce production qualifier -> INLINE
-- On LBRACK_AT reduce production qualifier -> INLINE
-- On IRREDUCIBLE reduce production qualifier -> INLINE
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> INLINE
-- On INLINE reduce production qualifier -> INLINE
-- On INCLUDE reduce production qualifier -> INLINE
-- On FSDOC_STANDALONE reduce production qualifier -> INLINE
-- On FSDOC reduce production qualifier -> INLINE
-- On EXCEPTION reduce production qualifier -> INLINE
-- On EFFECT reduce production qualifier -> INLINE
-- On DEFAULT reduce production qualifier -> INLINE
-- On ASSUME reduce production qualifier -> INLINE
-- On ABSTRACT reduce production qualifier -> INLINE

State 688:
## Known stack suffix:
## FSDOC
## LR(1) items:
decoration -> FSDOC . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production decoration -> FSDOC
-- On UNOPTEQUALITY reduce production decoration -> FSDOC
-- On UNFOLDABLE reduce production decoration -> FSDOC
-- On UNFOLD reduce production decoration -> FSDOC
-- On TYPE reduce production decoration -> FSDOC
-- On TOTAL reduce production decoration -> FSDOC
-- On SUB_EFFECT reduce production decoration -> FSDOC
-- On SPLICE reduce production decoration -> FSDOC
-- On REIFIABLE reduce production decoration -> FSDOC
-- On REFLECTABLE reduce production decoration -> FSDOC
-- On PRIVATE reduce production decoration -> FSDOC
-- On PRAGMA_SET_OPTIONS reduce production decoration -> FSDOC
-- On PRAGMA_RESET_OPTIONS reduce production decoration -> FSDOC
-- On OPEN reduce production decoration -> FSDOC
-- On OPAQUE reduce production decoration -> FSDOC
-- On NOEXTRACT reduce production decoration -> FSDOC
-- On NOEQUALITY reduce production decoration -> FSDOC
-- On NEW_EFFECT reduce production decoration -> FSDOC
-- On NEW reduce production decoration -> FSDOC
-- On MODULE reduce production decoration -> FSDOC
-- On LOGIC reduce production decoration -> FSDOC
-- On LET reduce production decoration -> FSDOC
-- On LBRACK_AT reduce production decoration -> FSDOC
-- On IRREDUCIBLE reduce production decoration -> FSDOC
-- On INLINE_FOR_EXTRACTION reduce production decoration -> FSDOC
-- On INLINE reduce production decoration -> FSDOC
-- On INCLUDE reduce production decoration -> FSDOC
-- On FSDOC_STANDALONE reduce production decoration -> FSDOC
-- On FSDOC reduce production decoration -> FSDOC
-- On EXCEPTION reduce production decoration -> FSDOC
-- On EFFECT reduce production decoration -> FSDOC
-- On DEFAULT reduce production decoration -> FSDOC
-- On ASSUME reduce production decoration -> FSDOC
-- On ABSTRACT reduce production decoration -> FSDOC

State 689:
## Known stack suffix:
## DEFAULT
## LR(1) items:
qualifier -> DEFAULT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> DEFAULT
-- On UNOPTEQUALITY reduce production qualifier -> DEFAULT
-- On UNFOLDABLE reduce production qualifier -> DEFAULT
-- On UNFOLD reduce production qualifier -> DEFAULT
-- On TYPE reduce production qualifier -> DEFAULT
-- On TOTAL reduce production qualifier -> DEFAULT
-- On SUB_EFFECT reduce production qualifier -> DEFAULT
-- On SPLICE reduce production qualifier -> DEFAULT
-- On REIFIABLE reduce production qualifier -> DEFAULT
-- On REFLECTABLE reduce production qualifier -> DEFAULT
-- On PRIVATE reduce production qualifier -> DEFAULT
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> DEFAULT
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> DEFAULT
-- On OPEN reduce production qualifier -> DEFAULT
-- On OPAQUE reduce production qualifier -> DEFAULT
-- On NOEXTRACT reduce production qualifier -> DEFAULT
-- On NOEQUALITY reduce production qualifier -> DEFAULT
-- On NEW_EFFECT reduce production qualifier -> DEFAULT
-- On NEW reduce production qualifier -> DEFAULT
-- On MODULE reduce production qualifier -> DEFAULT
-- On LOGIC reduce production qualifier -> DEFAULT
-- On LET reduce production qualifier -> DEFAULT
-- On LBRACK_AT reduce production qualifier -> DEFAULT
-- On IRREDUCIBLE reduce production qualifier -> DEFAULT
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> DEFAULT
-- On INLINE reduce production qualifier -> DEFAULT
-- On INCLUDE reduce production qualifier -> DEFAULT
-- On FSDOC_STANDALONE reduce production qualifier -> DEFAULT
-- On FSDOC reduce production qualifier -> DEFAULT
-- On EXCEPTION reduce production qualifier -> DEFAULT
-- On EFFECT reduce production qualifier -> DEFAULT
-- On DEFAULT reduce production qualifier -> DEFAULT
-- On ASSUME reduce production qualifier -> DEFAULT
-- On ABSTRACT reduce production qualifier -> DEFAULT

State 690:
## Known stack suffix:
## ASSUME
## LR(1) items:
decl -> ASSUME . uident COLON noSeqTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
qualifier -> ASSUME . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 691
## Reductions:
-- On VAL reduce production qualifier -> ASSUME
-- On UNOPTEQUALITY reduce production qualifier -> ASSUME
-- On UNFOLDABLE reduce production qualifier -> ASSUME
-- On UNFOLD reduce production qualifier -> ASSUME
-- On TYPE reduce production qualifier -> ASSUME
-- On TOTAL reduce production qualifier -> ASSUME
-- On SUB_EFFECT reduce production qualifier -> ASSUME
-- On SPLICE reduce production qualifier -> ASSUME
-- On REIFIABLE reduce production qualifier -> ASSUME
-- On REFLECTABLE reduce production qualifier -> ASSUME
-- On PRIVATE reduce production qualifier -> ASSUME
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> ASSUME
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> ASSUME
-- On OPEN reduce production qualifier -> ASSUME
-- On OPAQUE reduce production qualifier -> ASSUME
-- On NOEXTRACT reduce production qualifier -> ASSUME
-- On NOEQUALITY reduce production qualifier -> ASSUME
-- On NEW_EFFECT reduce production qualifier -> ASSUME
-- On NEW reduce production qualifier -> ASSUME
-- On MODULE reduce production qualifier -> ASSUME
-- On LOGIC reduce production qualifier -> ASSUME
-- On LET reduce production qualifier -> ASSUME
-- On LBRACK_AT reduce production qualifier -> ASSUME
-- On IRREDUCIBLE reduce production qualifier -> ASSUME
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> ASSUME
-- On INLINE reduce production qualifier -> ASSUME
-- On INCLUDE reduce production qualifier -> ASSUME
-- On FSDOC_STANDALONE reduce production qualifier -> ASSUME
-- On FSDOC reduce production qualifier -> ASSUME
-- On EXCEPTION reduce production qualifier -> ASSUME
-- On EFFECT reduce production qualifier -> ASSUME
-- On DEFAULT reduce production qualifier -> ASSUME
-- On ASSUME reduce production qualifier -> ASSUME
-- On ABSTRACT reduce production qualifier -> ASSUME

State 691:
## Known stack suffix:
## ASSUME uident
## LR(1) items:
decl -> ASSUME uident . COLON noSeqTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On COLON shift to state 692
## Reductions:

State 692:
## Known stack suffix:
## ASSUME uident COLON
## LR(1) items:
decl -> ASSUME uident COLON . noSeqTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 693
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 693:
## Known stack suffix:
## ASSUME uident COLON noSeqTerm
## LR(1) items:
decl -> ASSUME uident COLON noSeqTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production decl -> ASSUME uident COLON noSeqTerm
-- On UNOPTEQUALITY reduce production decl -> ASSUME uident COLON noSeqTerm
-- On UNFOLDABLE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On UNFOLD reduce production decl -> ASSUME uident COLON noSeqTerm
-- On TYPE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On TOTAL reduce production decl -> ASSUME uident COLON noSeqTerm
-- On SUB_EFFECT reduce production decl -> ASSUME uident COLON noSeqTerm
-- On SPLICE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On REIFIABLE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On REFLECTABLE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On PRIVATE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production decl -> ASSUME uident COLON noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production decl -> ASSUME uident COLON noSeqTerm
-- On OPEN reduce production decl -> ASSUME uident COLON noSeqTerm
-- On OPAQUE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On NOEXTRACT reduce production decl -> ASSUME uident COLON noSeqTerm
-- On NOEQUALITY reduce production decl -> ASSUME uident COLON noSeqTerm
-- On NEW_EFFECT reduce production decl -> ASSUME uident COLON noSeqTerm
-- On NEW reduce production decl -> ASSUME uident COLON noSeqTerm
-- On MODULE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On LOGIC reduce production decl -> ASSUME uident COLON noSeqTerm
-- On LET reduce production decl -> ASSUME uident COLON noSeqTerm
-- On LBRACK_AT reduce production decl -> ASSUME uident COLON noSeqTerm
-- On IRREDUCIBLE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On INLINE_FOR_EXTRACTION reduce production decl -> ASSUME uident COLON noSeqTerm
-- On INLINE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On INCLUDE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On FSDOC_STANDALONE reduce production decl -> ASSUME uident COLON noSeqTerm
-- On FSDOC reduce production decl -> ASSUME uident COLON noSeqTerm
-- On EXCEPTION reduce production decl -> ASSUME uident COLON noSeqTerm
-- On EOF reduce production decl -> ASSUME uident COLON noSeqTerm
-- On EFFECT reduce production decl -> ASSUME uident COLON noSeqTerm
-- On DEFAULT reduce production decl -> ASSUME uident COLON noSeqTerm
-- On ASSUME reduce production decl -> ASSUME uident COLON noSeqTerm
-- On ABSTRACT reduce production decl -> ASSUME uident COLON noSeqTerm

State 694:
## Known stack suffix:
## ABSTRACT
## LR(1) items:
qualifier -> ABSTRACT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> ABSTRACT
-- On UNOPTEQUALITY reduce production qualifier -> ABSTRACT
-- On UNFOLDABLE reduce production qualifier -> ABSTRACT
-- On UNFOLD reduce production qualifier -> ABSTRACT
-- On TYPE reduce production qualifier -> ABSTRACT
-- On TOTAL reduce production qualifier -> ABSTRACT
-- On SUB_EFFECT reduce production qualifier -> ABSTRACT
-- On SPLICE reduce production qualifier -> ABSTRACT
-- On REIFIABLE reduce production qualifier -> ABSTRACT
-- On REFLECTABLE reduce production qualifier -> ABSTRACT
-- On PRIVATE reduce production qualifier -> ABSTRACT
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> ABSTRACT
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> ABSTRACT
-- On OPEN reduce production qualifier -> ABSTRACT
-- On OPAQUE reduce production qualifier -> ABSTRACT
-- On NOEXTRACT reduce production qualifier -> ABSTRACT
-- On NOEQUALITY reduce production qualifier -> ABSTRACT
-- On NEW_EFFECT reduce production qualifier -> ABSTRACT
-- On NEW reduce production qualifier -> ABSTRACT
-- On MODULE reduce production qualifier -> ABSTRACT
-- On LOGIC reduce production qualifier -> ABSTRACT
-- On LET reduce production qualifier -> ABSTRACT
-- On LBRACK_AT reduce production qualifier -> ABSTRACT
-- On IRREDUCIBLE reduce production qualifier -> ABSTRACT
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> ABSTRACT
-- On INLINE reduce production qualifier -> ABSTRACT
-- On INCLUDE reduce production qualifier -> ABSTRACT
-- On FSDOC_STANDALONE reduce production qualifier -> ABSTRACT
-- On FSDOC reduce production qualifier -> ABSTRACT
-- On EXCEPTION reduce production qualifier -> ABSTRACT
-- On EFFECT reduce production qualifier -> ABSTRACT
-- On DEFAULT reduce production qualifier -> ABSTRACT
-- On ASSUME reduce production qualifier -> ABSTRACT
-- On ABSTRACT reduce production qualifier -> ABSTRACT

State 695:
## Known stack suffix:
## qualifier
## LR(1) items:
decoration -> qualifier . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production decoration -> qualifier
-- On UNOPTEQUALITY reduce production decoration -> qualifier
-- On UNFOLDABLE reduce production decoration -> qualifier
-- On UNFOLD reduce production decoration -> qualifier
-- On TYPE reduce production decoration -> qualifier
-- On TOTAL reduce production decoration -> qualifier
-- On SUB_EFFECT reduce production decoration -> qualifier
-- On SPLICE reduce production decoration -> qualifier
-- On REIFIABLE reduce production decoration -> qualifier
-- On REFLECTABLE reduce production decoration -> qualifier
-- On PRIVATE reduce production decoration -> qualifier
-- On PRAGMA_SET_OPTIONS reduce production decoration -> qualifier
-- On PRAGMA_RESET_OPTIONS reduce production decoration -> qualifier
-- On OPEN reduce production decoration -> qualifier
-- On OPAQUE reduce production decoration -> qualifier
-- On NOEXTRACT reduce production decoration -> qualifier
-- On NOEQUALITY reduce production decoration -> qualifier
-- On NEW_EFFECT reduce production decoration -> qualifier
-- On NEW reduce production decoration -> qualifier
-- On MODULE reduce production decoration -> qualifier
-- On LOGIC reduce production decoration -> qualifier
-- On LET reduce production decoration -> qualifier
-- On LBRACK_AT reduce production decoration -> qualifier
-- On IRREDUCIBLE reduce production decoration -> qualifier
-- On INLINE_FOR_EXTRACTION reduce production decoration -> qualifier
-- On INLINE reduce production decoration -> qualifier
-- On INCLUDE reduce production decoration -> qualifier
-- On FSDOC_STANDALONE reduce production decoration -> qualifier
-- On FSDOC reduce production decoration -> qualifier
-- On EXCEPTION reduce production decoration -> qualifier
-- On EFFECT reduce production decoration -> qualifier
-- On DEFAULT reduce production decoration -> qualifier
-- On ASSUME reduce production decoration -> qualifier
-- On ABSTRACT reduce production decoration -> qualifier

State 696:
## Known stack suffix:
## list(decoration)
## LR(1) items:
decl -> list(decoration) . rawDecl [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On VAL shift to state 697
-- On TYPE shift to state 734
-- On SUB_EFFECT shift to state 788
-- On SPLICE shift to state 805
-- On PRAGMA_SET_OPTIONS shift to state 814
-- On PRAGMA_RESET_OPTIONS shift to state 816
-- On OPEN shift to state 819
-- On NEW_EFFECT shift to state 821
-- On MODULE shift to state 843
-- On LET shift to state 848
-- On INCLUDE shift to state 854
-- On FSDOC_STANDALONE shift to state 856
-- On EXCEPTION shift to state 857
-- On EFFECT shift to state 862
-- On rawDecl shift to state 867
-- On pragma shift to state 868
## Reductions:

State 697:
## Known stack suffix:
## VAL
## LR(1) items:
rawDecl -> VAL . lidentOrOperator list(multiBinder) COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LPAREN shift to state 698
-- On IDENT shift to state 727
-- On lidentOrOperator shift to state 728
## Reductions:

State 698:
## Known stack suffix:
## LPAREN
## LR(1) items:
lidentOrOperator -> LPAREN . OPPREFIX RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX3 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX4 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0a RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0b RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0c RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0d RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX1 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX2 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . PIPE_RIGHT RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . COLON_EQUALS RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . COLON_COLON RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On PIPE_RIGHT shift to state 699
-- On OP_MIXFIX_ASSIGNMENT shift to state 701
-- On OP_MIXFIX_ACCESS shift to state 703
-- On OPPREFIX shift to state 705
-- On OPINFIX4 shift to state 707
-- On OPINFIX3 shift to state 709
-- On OPINFIX2 shift to state 711
-- On OPINFIX1 shift to state 713
-- On OPINFIX0d shift to state 715
-- On OPINFIX0c shift to state 717
-- On OPINFIX0b shift to state 719
-- On OPINFIX0a shift to state 721
-- On COLON_EQUALS shift to state 723
-- On COLON_COLON shift to state 725
## Reductions:

State 699:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
lidentOrOperator -> LPAREN PIPE_RIGHT . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN

State 701:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 702
## Reductions:

State 702:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN

State 703:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 704
## Reductions:

State 704:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN

State 705:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
lidentOrOperator -> LPAREN OPPREFIX . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 706
## Reductions:

State 706:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPPREFIX RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN

State 707:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX4 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 708
## Reductions:

State 708:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX4 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN

State 709:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX3 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 710
## Reductions:

State 710:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX3 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN

State 711:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX2 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 712
## Reductions:

State 712:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX2 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN

State 713:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX1 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 714
## Reductions:

State 714:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX1 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN

State 715:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0d . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 716
## Reductions:

State 716:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0d RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN

State 717:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0c . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 718
## Reductions:

State 718:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0c RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN

State 719:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0b . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 720
## Reductions:

State 720:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0b RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN

State 721:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0a . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 722
## Reductions:

State 722:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0a RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN

State 723:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
lidentOrOperator -> LPAREN COLON_EQUALS . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 724
## Reductions:

State 724:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN COLON_EQUALS RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN

State 725:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
lidentOrOperator -> LPAREN COLON_COLON . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 726
## Reductions:

State 726:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN COLON_COLON RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On RBRACK reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On LPAREN reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN
-- On COLON reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN

State 727:
## Known stack suffix:
## IDENT
## LR(1) items:
lidentOrOperator -> IDENT . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production lidentOrOperator -> IDENT
-- On RBRACK reduce production lidentOrOperator -> IDENT
-- On LPAREN reduce production lidentOrOperator -> IDENT
-- On COLON reduce production lidentOrOperator -> IDENT

State 728:
## Known stack suffix:
## VAL lidentOrOperator
## LR(1) items:
rawDecl -> VAL lidentOrOperator . list(multiBinder) COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LPAREN shift to state 244
-- On multiBinder shift to state 729
-- On list(multiBinder) shift to state 731
## Reductions:
-- On COLON reduce production list(multiBinder) ->

State 729:
## Known stack suffix:
## multiBinder
## LR(1) items:
list(multiBinder) -> multiBinder . list(multiBinder) [ COLON ]
## Transitions:
-- On LPAREN shift to state 244
-- On multiBinder shift to state 729
-- On list(multiBinder) shift to state 730
## Reductions:
-- On COLON reduce production list(multiBinder) ->

State 730:
## Known stack suffix:
## multiBinder list(multiBinder)
## LR(1) items:
list(multiBinder) -> multiBinder list(multiBinder) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production list(multiBinder) -> multiBinder list(multiBinder)

State 731:
## Known stack suffix:
## VAL lidentOrOperator list(multiBinder)
## LR(1) items:
rawDecl -> VAL lidentOrOperator list(multiBinder) . COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On COLON shift to state 732
## Reductions:

State 732:
## Known stack suffix:
## VAL lidentOrOperator list(multiBinder) COLON
## LR(1) items:
rawDecl -> VAL lidentOrOperator list(multiBinder) COLON . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 733
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 733:
## Known stack suffix:
## VAL lidentOrOperator list(multiBinder) COLON typ
## LR(1) items:
rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On UNOPTEQUALITY reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On UNFOLDABLE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On UNFOLD reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On TYPE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On TOTAL reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On SUB_EFFECT reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On SPLICE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On REIFIABLE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On REFLECTABLE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On PRIVATE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On OPEN reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On OPAQUE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On NOEXTRACT reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On NOEQUALITY reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On NEW_EFFECT reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On NEW reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On MODULE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On LOGIC reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On LET reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On LBRACK_AT reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On IRREDUCIBLE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On INLINE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On INCLUDE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On FSDOC_STANDALONE reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On FSDOC reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On EXCEPTION reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On EOF reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On EFFECT reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On DEFAULT reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On ASSUME reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ
-- On ABSTRACT reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ

State 734:
## Known stack suffix:
## TYPE
## LR(1) items:
rawDecl -> TYPE . separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On FSDOC shift to state 735
-- On separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) shift to state 736
-- On option(FSDOC) shift to state 737
## Reductions:
-- On NAME reduce production option(FSDOC) ->
-- On IDENT reduce production option(FSDOC) ->

State 735:
## Known stack suffix:
## FSDOC
## LR(1) items:
option(FSDOC) -> FSDOC . [ NAME IDENT ]
## Transitions:
## Reductions:
-- On NAME reduce production option(FSDOC) -> FSDOC
-- On IDENT reduce production option(FSDOC) -> FSDOC

State 736:
## Known stack suffix:
## TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
## LR(1) items:
rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On UNOPTEQUALITY reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On UNFOLDABLE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On UNFOLD reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On TYPE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On TOTAL reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On SUB_EFFECT reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On SPLICE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On REIFIABLE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On REFLECTABLE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On PRIVATE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On OPEN reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On OPAQUE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NOEXTRACT reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NOEQUALITY reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NEW_EFFECT reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NEW reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On MODULE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On LOGIC reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On LET reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On LBRACK_AT reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On IRREDUCIBLE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On INLINE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On INCLUDE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On FSDOC_STANDALONE reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On FSDOC reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On EXCEPTION reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On EOF reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On EFFECT reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On DEFAULT reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On ASSUME reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On ABSTRACT reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))

State 737:
## Known stack suffix:
## option(FSDOC)
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) . typeDecl [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) . typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 229
-- On typeDecl shift to state 738
-- On lident shift to state 741
-- On ident shift to state 742
## Reductions:

State 738:
## Known stack suffix:
## option(FSDOC) typeDecl
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl . AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On AND shift to state 739
## Reductions:
-- On VAL reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On UNOPTEQUALITY reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On UNFOLDABLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On UNFOLD reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On TYPE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On TOTAL reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On SUB_EFFECT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On SPLICE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On REIFIABLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On REFLECTABLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On PRIVATE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On PRAGMA_SET_OPTIONS reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On PRAGMA_RESET_OPTIONS reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On OPEN reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On OPAQUE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On NOEXTRACT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On NOEQUALITY reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On NEW_EFFECT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On NEW reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On MODULE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On LOGIC reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On LET reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On LBRACK_AT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On IRREDUCIBLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On INLINE_FOR_EXTRACTION reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On INLINE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On INCLUDE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On FSDOC_STANDALONE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On FSDOC reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On EXCEPTION reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On EOF reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On EFFECT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On DEFAULT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On ASSUME reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl
-- On ABSTRACT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl

State 739:
## Known stack suffix:
## option(FSDOC) typeDecl AND
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND . separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On FSDOC shift to state 735
-- On separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) shift to state 740
-- On option(FSDOC) shift to state 737
## Reductions:
-- On NAME reduce production option(FSDOC) ->
-- On IDENT reduce production option(FSDOC) ->

State 740:
## Known stack suffix:
## option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On UNOPTEQUALITY reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On UNFOLDABLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On UNFOLD reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On TYPE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On TOTAL reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On SUB_EFFECT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On SPLICE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On REIFIABLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On REFLECTABLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On PRIVATE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On PRAGMA_SET_OPTIONS reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On PRAGMA_RESET_OPTIONS reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On OPEN reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On OPAQUE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NOEXTRACT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NOEQUALITY reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NEW_EFFECT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On NEW reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On MODULE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On LOGIC reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On LET reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On LBRACK_AT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On IRREDUCIBLE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On INLINE_FOR_EXTRACTION reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On INLINE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On INCLUDE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On FSDOC_STANDALONE reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On FSDOC reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On EXCEPTION reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On EOF reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On EFFECT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On DEFAULT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On ASSUME reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
-- On ABSTRACT reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))

State 741:
## Known stack suffix:
## lident
## LR(1) items:
ident -> lident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production ident -> lident
-- On UNOPTEQUALITY reduce production ident -> lident
-- On UNFOLDABLE reduce production ident -> lident
-- On UNFOLD reduce production ident -> lident
-- On UNDERSCORE reduce production ident -> lident
-- On TYP_APP_LESS reduce production ident -> lident
-- On TYPE reduce production ident -> lident
-- On TVAR reduce production ident -> lident
-- On TOTAL reduce production ident -> lident
-- On SUB_EFFECT reduce production ident -> lident
-- On SPLICE reduce production ident -> lident
-- On REIFIABLE reduce production ident -> lident
-- On REFLECTABLE reduce production ident -> lident
-- On PRIVATE reduce production ident -> lident
-- On PRAGMA_SET_OPTIONS reduce production ident -> lident
-- On PRAGMA_RESET_OPTIONS reduce production ident -> lident
-- On OPEN reduce production ident -> lident
-- On OPAQUE reduce production ident -> lident
-- On NOEXTRACT reduce production ident -> lident
-- On NOEQUALITY reduce production ident -> lident
-- On NEW_EFFECT reduce production ident -> lident
-- On NEW reduce production ident -> lident
-- On MODULE reduce production ident -> lident
-- On LPAREN reduce production ident -> lident
-- On LOGIC reduce production ident -> lident
-- On LET reduce production ident -> lident
-- On LBRACK_AT reduce production ident -> lident
-- On IRREDUCIBLE reduce production ident -> lident
-- On INLINE_FOR_EXTRACTION reduce production ident -> lident
-- On INLINE reduce production ident -> lident
-- On INCLUDE reduce production ident -> lident
-- On IDENT reduce production ident -> lident
-- On HASH reduce production ident -> lident
-- On FSDOC_STANDALONE reduce production ident -> lident
-- On FSDOC reduce production ident -> lident
-- On EXCEPTION reduce production ident -> lident
-- On EQUALS reduce production ident -> lident
-- On EOF reduce production ident -> lident
-- On EFFECT reduce production ident -> lident
-- On DOLLAR reduce production ident -> lident
-- On DEFAULT reduce production ident -> lident
-- On COLON reduce production ident -> lident
-- On ASSUME reduce production ident -> lident
-- On AND reduce production ident -> lident
-- On ABSTRACT reduce production ident -> lident

State 742:
## Known stack suffix:
## ident
## LR(1) items:
typeDecl -> ident . typars option(ascribeKind) typeDefinition [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TYP_APP_LESS shift to state 743
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On typars shift to state 749
-- On tvarinsts shift to state 786
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 787
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On VAL reduce production list(__anonymous_4) ->
-- On UNOPTEQUALITY reduce production list(__anonymous_4) ->
-- On UNFOLDABLE reduce production list(__anonymous_4) ->
-- On UNFOLD reduce production list(__anonymous_4) ->
-- On TYPE reduce production list(__anonymous_4) ->
-- On TOTAL reduce production list(__anonymous_4) ->
-- On SUB_EFFECT reduce production list(__anonymous_4) ->
-- On SPLICE reduce production list(__anonymous_4) ->
-- On REIFIABLE reduce production list(__anonymous_4) ->
-- On REFLECTABLE reduce production list(__anonymous_4) ->
-- On PRIVATE reduce production list(__anonymous_4) ->
-- On PRAGMA_SET_OPTIONS reduce production list(__anonymous_4) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(__anonymous_4) ->
-- On OPEN reduce production list(__anonymous_4) ->
-- On OPAQUE reduce production list(__anonymous_4) ->
-- On NOEXTRACT reduce production list(__anonymous_4) ->
-- On NOEQUALITY reduce production list(__anonymous_4) ->
-- On NEW_EFFECT reduce production list(__anonymous_4) ->
-- On NEW reduce production list(__anonymous_4) ->
-- On MODULE reduce production list(__anonymous_4) ->
-- On LOGIC reduce production list(__anonymous_4) ->
-- On LET reduce production list(__anonymous_4) ->
-- On LBRACK_AT reduce production list(__anonymous_4) ->
-- On IRREDUCIBLE reduce production list(__anonymous_4) ->
-- On INLINE_FOR_EXTRACTION reduce production list(__anonymous_4) ->
-- On INLINE reduce production list(__anonymous_4) ->
-- On INCLUDE reduce production list(__anonymous_4) ->
-- On FSDOC_STANDALONE reduce production list(__anonymous_4) ->
-- On FSDOC reduce production list(__anonymous_4) ->
-- On EXCEPTION reduce production list(__anonymous_4) ->
-- On EQUALS reduce production list(__anonymous_4) ->
-- On EOF reduce production list(__anonymous_4) ->
-- On EFFECT reduce production list(__anonymous_4) ->
-- On DEFAULT reduce production list(__anonymous_4) ->
-- On COLON reduce production list(__anonymous_4) ->
-- On ASSUME reduce production list(__anonymous_4) ->
-- On AND reduce production list(__anonymous_4) ->
-- On ABSTRACT reduce production list(__anonymous_4) ->

State 743:
## Known stack suffix:
## TYP_APP_LESS
## LR(1) items:
tvarinsts -> TYP_APP_LESS . separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On TVAR shift to state 23
-- On tvar shift to state 744
-- On separated_nonempty_list(COMMA,tvar) shift to state 747
## Reductions:

State 744:
## Known stack suffix:
## tvar
## LR(1) items:
separated_nonempty_list(COMMA,tvar) -> tvar . [ TYP_APP_GREATER ]
separated_nonempty_list(COMMA,tvar) -> tvar . COMMA separated_nonempty_list(COMMA,tvar) [ TYP_APP_GREATER ]
## Transitions:
-- On COMMA shift to state 745
## Reductions:
-- On TYP_APP_GREATER reduce production separated_nonempty_list(COMMA,tvar) -> tvar

State 745:
## Known stack suffix:
## tvar COMMA
## LR(1) items:
separated_nonempty_list(COMMA,tvar) -> tvar COMMA . separated_nonempty_list(COMMA,tvar) [ TYP_APP_GREATER ]
## Transitions:
-- On TVAR shift to state 23
-- On tvar shift to state 744
-- On separated_nonempty_list(COMMA,tvar) shift to state 746
## Reductions:

State 746:
## Known stack suffix:
## tvar COMMA separated_nonempty_list(COMMA,tvar)
## LR(1) items:
separated_nonempty_list(COMMA,tvar) -> tvar COMMA separated_nonempty_list(COMMA,tvar) . [ TYP_APP_GREATER ]
## Transitions:
## Reductions:
-- On TYP_APP_GREATER reduce production separated_nonempty_list(COMMA,tvar) -> tvar COMMA separated_nonempty_list(COMMA,tvar)

State 747:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,tvar)
## LR(1) items:
tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) . TYP_APP_GREATER [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On TYP_APP_GREATER shift to state 748
## Reductions:

State 748:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
## LR(1) items:
tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On UNOPTEQUALITY reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On UNFOLDABLE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On UNFOLD reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On TYPE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On TOTAL reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On SUB_EFFECT reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On SPLICE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On REIFIABLE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On REFLECTABLE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On PRIVATE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On PRAGMA_SET_OPTIONS reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On PRAGMA_RESET_OPTIONS reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On OPEN reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On OPAQUE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On NOEXTRACT reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On NOEQUALITY reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On NEW_EFFECT reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On NEW reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On MODULE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On LOGIC reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On LET reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On LBRACK_AT reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On IRREDUCIBLE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On INLINE_FOR_EXTRACTION reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On INLINE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On INCLUDE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On FSDOC_STANDALONE reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On FSDOC reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On EXCEPTION reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On EQUALS reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On EOF reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On EFFECT reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On DEFAULT reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On COLON reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On ASSUME reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On AND reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
-- On ABSTRACT reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER

State 749:
## Known stack suffix:
## ident typars
## LR(1) items:
typeDecl -> ident typars . option(ascribeKind) typeDefinition [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On COLON shift to state 750
-- On option(ascribeKind) shift to state 753
-- On ascribeKind shift to state 785
## Reductions:
-- On VAL reduce production option(ascribeKind) ->
-- On UNOPTEQUALITY reduce production option(ascribeKind) ->
-- On UNFOLDABLE reduce production option(ascribeKind) ->
-- On UNFOLD reduce production option(ascribeKind) ->
-- On TYPE reduce production option(ascribeKind) ->
-- On TOTAL reduce production option(ascribeKind) ->
-- On SUB_EFFECT reduce production option(ascribeKind) ->
-- On SPLICE reduce production option(ascribeKind) ->
-- On REIFIABLE reduce production option(ascribeKind) ->
-- On REFLECTABLE reduce production option(ascribeKind) ->
-- On PRIVATE reduce production option(ascribeKind) ->
-- On PRAGMA_SET_OPTIONS reduce production option(ascribeKind) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(ascribeKind) ->
-- On OPEN reduce production option(ascribeKind) ->
-- On OPAQUE reduce production option(ascribeKind) ->
-- On NOEXTRACT reduce production option(ascribeKind) ->
-- On NOEQUALITY reduce production option(ascribeKind) ->
-- On NEW_EFFECT reduce production option(ascribeKind) ->
-- On NEW reduce production option(ascribeKind) ->
-- On MODULE reduce production option(ascribeKind) ->
-- On LOGIC reduce production option(ascribeKind) ->
-- On LET reduce production option(ascribeKind) ->
-- On LBRACK_AT reduce production option(ascribeKind) ->
-- On IRREDUCIBLE reduce production option(ascribeKind) ->
-- On INLINE_FOR_EXTRACTION reduce production option(ascribeKind) ->
-- On INLINE reduce production option(ascribeKind) ->
-- On INCLUDE reduce production option(ascribeKind) ->
-- On FSDOC_STANDALONE reduce production option(ascribeKind) ->
-- On FSDOC reduce production option(ascribeKind) ->
-- On EXCEPTION reduce production option(ascribeKind) ->
-- On EQUALS reduce production option(ascribeKind) ->
-- On EOF reduce production option(ascribeKind) ->
-- On EFFECT reduce production option(ascribeKind) ->
-- On DEFAULT reduce production option(ascribeKind) ->
-- On ASSUME reduce production option(ascribeKind) ->
-- On AND reduce production option(ascribeKind) ->
-- On ABSTRACT reduce production option(ascribeKind) ->

State 750:
## Known stack suffix:
## COLON
## LR(1) items:
ascribeKind -> COLON . kind [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 751
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On kind shift to state 752
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 751:
## Known stack suffix:
## tmArrow(tmNoEq)
## LR(1) items:
kind -> tmArrow(tmNoEq) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production kind -> tmArrow(tmNoEq)
-- On UNOPTEQUALITY reduce production kind -> tmArrow(tmNoEq)
-- On UNFOLDABLE reduce production kind -> tmArrow(tmNoEq)
-- On UNFOLD reduce production kind -> tmArrow(tmNoEq)
-- On TYPE reduce production kind -> tmArrow(tmNoEq)
-- On TOTAL reduce production kind -> tmArrow(tmNoEq)
-- On SUB_EFFECT reduce production kind -> tmArrow(tmNoEq)
-- On SPLICE reduce production kind -> tmArrow(tmNoEq)
-- On REIFIABLE reduce production kind -> tmArrow(tmNoEq)
-- On REFLECTABLE reduce production kind -> tmArrow(tmNoEq)
-- On PRIVATE reduce production kind -> tmArrow(tmNoEq)
-- On PRAGMA_SET_OPTIONS reduce production kind -> tmArrow(tmNoEq)
-- On PRAGMA_RESET_OPTIONS reduce production kind -> tmArrow(tmNoEq)
-- On OPEN reduce production kind -> tmArrow(tmNoEq)
-- On OPAQUE reduce production kind -> tmArrow(tmNoEq)
-- On NOEXTRACT reduce production kind -> tmArrow(tmNoEq)
-- On NOEQUALITY reduce production kind -> tmArrow(tmNoEq)
-- On NEW_EFFECT reduce production kind -> tmArrow(tmNoEq)
-- On NEW reduce production kind -> tmArrow(tmNoEq)
-- On MODULE reduce production kind -> tmArrow(tmNoEq)
-- On LOGIC reduce production kind -> tmArrow(tmNoEq)
-- On LET reduce production kind -> tmArrow(tmNoEq)
-- On LBRACK_AT reduce production kind -> tmArrow(tmNoEq)
-- On IRREDUCIBLE reduce production kind -> tmArrow(tmNoEq)
-- On INLINE_FOR_EXTRACTION reduce production kind -> tmArrow(tmNoEq)
-- On INLINE reduce production kind -> tmArrow(tmNoEq)
-- On INCLUDE reduce production kind -> tmArrow(tmNoEq)
-- On FSDOC_STANDALONE reduce production kind -> tmArrow(tmNoEq)
-- On FSDOC reduce production kind -> tmArrow(tmNoEq)
-- On EXCEPTION reduce production kind -> tmArrow(tmNoEq)
-- On EQUALS reduce production kind -> tmArrow(tmNoEq)
-- On EOF reduce production kind -> tmArrow(tmNoEq)
-- On EFFECT reduce production kind -> tmArrow(tmNoEq)
-- On DEFAULT reduce production kind -> tmArrow(tmNoEq)
-- On ASSUME reduce production kind -> tmArrow(tmNoEq)
-- On AND reduce production kind -> tmArrow(tmNoEq)
-- On ABSTRACT reduce production kind -> tmArrow(tmNoEq)

State 752:
## Known stack suffix:
## COLON kind
## LR(1) items:
ascribeKind -> COLON kind . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production ascribeKind -> COLON kind
-- On UNOPTEQUALITY reduce production ascribeKind -> COLON kind
-- On UNFOLDABLE reduce production ascribeKind -> COLON kind
-- On UNFOLD reduce production ascribeKind -> COLON kind
-- On TYPE reduce production ascribeKind -> COLON kind
-- On TOTAL reduce production ascribeKind -> COLON kind
-- On SUB_EFFECT reduce production ascribeKind -> COLON kind
-- On SPLICE reduce production ascribeKind -> COLON kind
-- On REIFIABLE reduce production ascribeKind -> COLON kind
-- On REFLECTABLE reduce production ascribeKind -> COLON kind
-- On PRIVATE reduce production ascribeKind -> COLON kind
-- On PRAGMA_SET_OPTIONS reduce production ascribeKind -> COLON kind
-- On PRAGMA_RESET_OPTIONS reduce production ascribeKind -> COLON kind
-- On OPEN reduce production ascribeKind -> COLON kind
-- On OPAQUE reduce production ascribeKind -> COLON kind
-- On NOEXTRACT reduce production ascribeKind -> COLON kind
-- On NOEQUALITY reduce production ascribeKind -> COLON kind
-- On NEW_EFFECT reduce production ascribeKind -> COLON kind
-- On NEW reduce production ascribeKind -> COLON kind
-- On MODULE reduce production ascribeKind -> COLON kind
-- On LOGIC reduce production ascribeKind -> COLON kind
-- On LET reduce production ascribeKind -> COLON kind
-- On LBRACK_AT reduce production ascribeKind -> COLON kind
-- On IRREDUCIBLE reduce production ascribeKind -> COLON kind
-- On INLINE_FOR_EXTRACTION reduce production ascribeKind -> COLON kind
-- On INLINE reduce production ascribeKind -> COLON kind
-- On INCLUDE reduce production ascribeKind -> COLON kind
-- On FSDOC_STANDALONE reduce production ascribeKind -> COLON kind
-- On FSDOC reduce production ascribeKind -> COLON kind
-- On EXCEPTION reduce production ascribeKind -> COLON kind
-- On EQUALS reduce production ascribeKind -> COLON kind
-- On EOF reduce production ascribeKind -> COLON kind
-- On EFFECT reduce production ascribeKind -> COLON kind
-- On DEFAULT reduce production ascribeKind -> COLON kind
-- On ASSUME reduce production ascribeKind -> COLON kind
-- On AND reduce production ascribeKind -> COLON kind
-- On ABSTRACT reduce production ascribeKind -> COLON kind

State 753:
## Known stack suffix:
## ident typars option(ascribeKind)
## LR(1) items:
typeDecl -> ident typars option(ascribeKind) . typeDefinition [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 754
-- On typeDefinition shift to state 784
## Reductions:
-- On VAL reduce production typeDefinition ->
-- On UNOPTEQUALITY reduce production typeDefinition ->
-- On UNFOLDABLE reduce production typeDefinition ->
-- On UNFOLD reduce production typeDefinition ->
-- On TYPE reduce production typeDefinition ->
-- On TOTAL reduce production typeDefinition ->
-- On SUB_EFFECT reduce production typeDefinition ->
-- On SPLICE reduce production typeDefinition ->
-- On REIFIABLE reduce production typeDefinition ->
-- On REFLECTABLE reduce production typeDefinition ->
-- On PRIVATE reduce production typeDefinition ->
-- On PRAGMA_SET_OPTIONS reduce production typeDefinition ->
-- On PRAGMA_RESET_OPTIONS reduce production typeDefinition ->
-- On OPEN reduce production typeDefinition ->
-- On OPAQUE reduce production typeDefinition ->
-- On NOEXTRACT reduce production typeDefinition ->
-- On NOEQUALITY reduce production typeDefinition ->
-- On NEW_EFFECT reduce production typeDefinition ->
-- On NEW reduce production typeDefinition ->
-- On MODULE reduce production typeDefinition ->
-- On LOGIC reduce production typeDefinition ->
-- On LET reduce production typeDefinition ->
-- On LBRACK_AT reduce production typeDefinition ->
-- On IRREDUCIBLE reduce production typeDefinition ->
-- On INLINE_FOR_EXTRACTION reduce production typeDefinition ->
-- On INLINE reduce production typeDefinition ->
-- On INCLUDE reduce production typeDefinition ->
-- On FSDOC_STANDALONE reduce production typeDefinition ->
-- On FSDOC reduce production typeDefinition ->
-- On EXCEPTION reduce production typeDefinition ->
-- On EOF reduce production typeDefinition ->
-- On EFFECT reduce production typeDefinition ->
-- On DEFAULT reduce production typeDefinition ->
-- On ASSUME reduce production typeDefinition ->
-- On AND reduce production typeDefinition ->
-- On ABSTRACT reduce production typeDefinition ->

State 754:
## Known stack suffix:
## EQUALS
## LR(1) items:
typeDefinition -> EQUALS . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
typeDefinition -> EQUALS . LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
typeDefinition -> EQUALS . list(constructorDecl) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 755
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BAR shift to state 772
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 780
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(constructorDecl) shift to state 781
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constructorDecl shift to state 782
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On VAL reduce production list(constructorDecl) ->
-- On UNOPTEQUALITY reduce production list(constructorDecl) ->
-- On UNFOLDABLE reduce production list(constructorDecl) ->
-- On UNFOLD reduce production list(constructorDecl) ->
-- On TYPE reduce production list(constructorDecl) ->
-- On TOTAL reduce production list(constructorDecl) ->
-- On SUB_EFFECT reduce production list(constructorDecl) ->
-- On SPLICE reduce production list(constructorDecl) ->
-- On REIFIABLE reduce production list(constructorDecl) ->
-- On REFLECTABLE reduce production list(constructorDecl) ->
-- On PRIVATE reduce production list(constructorDecl) ->
-- On PRAGMA_SET_OPTIONS reduce production list(constructorDecl) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(constructorDecl) ->
-- On OPEN reduce production list(constructorDecl) ->
-- On OPAQUE reduce production list(constructorDecl) ->
-- On NOEXTRACT reduce production list(constructorDecl) ->
-- On NOEQUALITY reduce production list(constructorDecl) ->
-- On NEW_EFFECT reduce production list(constructorDecl) ->
-- On NEW reduce production list(constructorDecl) ->
-- On MODULE reduce production list(constructorDecl) ->
-- On LOGIC reduce production list(constructorDecl) ->
-- On LET reduce production list(constructorDecl) ->
-- On LBRACK_AT reduce production list(constructorDecl) ->
-- On IRREDUCIBLE reduce production list(constructorDecl) ->
-- On INLINE_FOR_EXTRACTION reduce production list(constructorDecl) ->
-- On INLINE reduce production list(constructorDecl) ->
-- On INCLUDE reduce production list(constructorDecl) ->
-- On FSDOC_STANDALONE reduce production list(constructorDecl) ->
-- On FSDOC reduce production list(constructorDecl) ->
-- On EXCEPTION reduce production list(constructorDecl) ->
-- On EOF reduce production list(constructorDecl) ->
-- On EFFECT reduce production list(constructorDecl) ->
-- On DEFAULT reduce production list(constructorDecl) ->
-- On ASSUME reduce production list(constructorDecl) ->
-- On AND reduce production list(constructorDecl) ->
-- On ABSTRACT reduce production list(constructorDecl) ->

State 755:
## Known stack suffix:
## EQUALS LBRACE
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE . recordExp RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK ASSUME AND AMP ABSTRACT ]
typeDefinition -> EQUALS LBRACE . right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FSDOC shift to state 756
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 590
-- On right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) shift to state 760
-- On recordFieldDecl shift to state 762
-- On recordExp shift to state 635
-- On quident shift to state 83
-- On qlident shift to state 593
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 771
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 594
## Reductions:

State 756:
## Known stack suffix:
## FSDOC
## LR(1) items:
recordFieldDecl -> FSDOC . lident COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On lident shift to state 757
## Reductions:

State 757:
## Known stack suffix:
## FSDOC lident
## LR(1) items:
recordFieldDecl -> FSDOC lident . COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On COLON shift to state 758
## Reductions:

State 758:
## Known stack suffix:
## FSDOC lident COLON
## LR(1) items:
recordFieldDecl -> FSDOC lident COLON . typ [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 759
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 759:
## Known stack suffix:
## FSDOC lident COLON typ
## LR(1) items:
recordFieldDecl -> FSDOC lident COLON typ . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production recordFieldDecl -> FSDOC lident COLON typ
-- On RBRACE reduce production recordFieldDecl -> FSDOC lident COLON typ

State 760:
## Known stack suffix:
## EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl)
## LR(1) items:
typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 761
## Reductions:

State 761:
## Known stack suffix:
## EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
## LR(1) items:
typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On UNOPTEQUALITY reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On UNFOLDABLE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On UNFOLD reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On TYPE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On TOTAL reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On SUB_EFFECT reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On SPLICE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On REIFIABLE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On REFLECTABLE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On PRIVATE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On PRAGMA_SET_OPTIONS reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On OPEN reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On OPAQUE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On NOEXTRACT reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On NOEQUALITY reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On NEW_EFFECT reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On NEW reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On MODULE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On LOGIC reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On LET reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On LBRACK_AT reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On IRREDUCIBLE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On INLINE_FOR_EXTRACTION reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On INLINE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On INCLUDE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On FSDOC_STANDALONE reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On FSDOC reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On EXCEPTION reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On EOF reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On EFFECT reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On DEFAULT reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On ASSUME reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On AND reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
-- On ABSTRACT reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE

State 762:
## Known stack suffix:
## recordFieldDecl
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . [ RBRACE ]
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 763
## Reductions:
-- On RBRACE reduce production right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl

State 763:
## Known stack suffix:
## recordFieldDecl SEMICOLON
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON . right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On FSDOC shift to state 756
-- On right_flexible_list(SEMICOLON,recordFieldDecl) shift to state 764
-- On recordFieldDecl shift to state 765
-- On lident shift to state 768
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,recordFieldDecl) ->

State 764:
## Known stack suffix:
## recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)

State 765:
## Known stack suffix:
## recordFieldDecl
## LR(1) items:
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . [ RBRACE ]
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 766
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl

State 766:
## Known stack suffix:
## recordFieldDecl SEMICOLON
## LR(1) items:
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON . right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On FSDOC shift to state 756
-- On right_flexible_list(SEMICOLON,recordFieldDecl) shift to state 767
-- On recordFieldDecl shift to state 765
-- On lident shift to state 768
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,recordFieldDecl) ->

State 767:
## Known stack suffix:
## recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)
## LR(1) items:
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)

State 768:
## Known stack suffix:
## lident
## LR(1) items:
recordFieldDecl -> lident . COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On COLON shift to state 769
## Reductions:

State 769:
## Known stack suffix:
## lident COLON
## LR(1) items:
recordFieldDecl -> lident COLON . typ [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 770
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 770:
## Known stack suffix:
## lident COLON typ
## LR(1) items:
recordFieldDecl -> lident COLON typ . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production recordFieldDecl -> lident COLON typ
-- On RBRACE reduce production recordFieldDecl -> lident COLON typ

State 771:
## Known stack suffix:
## lident
## LR(1) items:
path(lident) -> lident . [ WITH UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TVAR TRUE STRING SET_RANGE_OF SEMICOLON REIFY RBRACE RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT CHAR BYTEARRAY BEGIN BANG_LBRACE ]
recordFieldDecl -> lident . COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On COLON shift to state 769
## Reductions:
-- On WITH reduce production path(lident) -> lident
-- On UNIV_HASH reduce production path(lident) -> lident
-- On UNDERSCORE reduce production path(lident) -> lident
-- On UINT8 reduce production path(lident) -> lident
-- On UINT64 reduce production path(lident) -> lident
-- On UINT32 reduce production path(lident) -> lident
-- On UINT16 reduce production path(lident) -> lident
-- On TYP_APP_LESS reduce production path(lident) -> lident
-- On TVAR reduce production path(lident) -> lident
-- On TRUE reduce production path(lident) -> lident
-- On STRING reduce production path(lident) -> lident
-- On SET_RANGE_OF reduce production path(lident) -> lident
-- On SEMICOLON reduce production path(lident) -> lident
-- On REIFY reduce production path(lident) -> lident
-- On RBRACE reduce production path(lident) -> lident
-- On RANGE_OF reduce production path(lident) -> lident
-- On PERCENT_LBRACK reduce production path(lident) -> lident
-- On OPPREFIX reduce production path(lident) -> lident
-- On NAME reduce production path(lident) -> lident
-- On LPAREN_RPAREN reduce production path(lident) -> lident
-- On LPAREN reduce production path(lident) -> lident
-- On LENS_PAREN_LEFT reduce production path(lident) -> lident
-- On LBRACK_BAR reduce production path(lident) -> lident
-- On LBRACK reduce production path(lident) -> lident
-- On INT8 reduce production path(lident) -> lident
-- On INT64 reduce production path(lident) -> lident
-- On INT32 reduce production path(lident) -> lident
-- On INT16 reduce production path(lident) -> lident
-- On INT reduce production path(lident) -> lident
-- On IEEE64 reduce production path(lident) -> lident
-- On IDENT reduce production path(lident) -> lident
-- On HASH reduce production path(lident) -> lident
-- On FALSE reduce production path(lident) -> lident
-- On EQUALS reduce production path(lident) -> lident
-- On DOT_LPAREN reduce production path(lident) -> lident
-- On DOT_LENS_PAREN_LEFT reduce production path(lident) -> lident
-- On DOT_LBRACK_BAR reduce production path(lident) -> lident
-- On DOT_LBRACK reduce production path(lident) -> lident
-- On DOT reduce production path(lident) -> lident
-- On CHAR reduce production path(lident) -> lident
-- On BYTEARRAY reduce production path(lident) -> lident
-- On BEGIN reduce production path(lident) -> lident
-- On BANG_LBRACE reduce production path(lident) -> lident

State 772:
## Known stack suffix:
## BAR
## LR(1) items:
constructorDecl -> BAR . option(FSDOC) uident COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
constructorDecl -> BAR . option(FSDOC) uident option(__anonymous_2) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On FSDOC shift to state 735
-- On option(FSDOC) shift to state 773
## Reductions:
-- On NAME reduce production option(FSDOC) ->

State 773:
## Known stack suffix:
## BAR option(FSDOC)
## LR(1) items:
constructorDecl -> BAR option(FSDOC) . uident COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
constructorDecl -> BAR option(FSDOC) . uident option(__anonymous_2) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 774
## Reductions:

State 774:
## Known stack suffix:
## BAR option(FSDOC) uident
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident . COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
constructorDecl -> BAR option(FSDOC) uident . option(__anonymous_2) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On OF shift to state 775
-- On COLON shift to state 777
-- On option(__anonymous_2) shift to state 779
## Reductions:
-- On VAL reduce production option(__anonymous_2) ->
-- On UNOPTEQUALITY reduce production option(__anonymous_2) ->
-- On UNFOLDABLE reduce production option(__anonymous_2) ->
-- On UNFOLD reduce production option(__anonymous_2) ->
-- On TYPE reduce production option(__anonymous_2) ->
-- On TOTAL reduce production option(__anonymous_2) ->
-- On SUB_EFFECT reduce production option(__anonymous_2) ->
-- On SPLICE reduce production option(__anonymous_2) ->
-- On REIFIABLE reduce production option(__anonymous_2) ->
-- On REFLECTABLE reduce production option(__anonymous_2) ->
-- On PRIVATE reduce production option(__anonymous_2) ->
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_2) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_2) ->
-- On OPEN reduce production option(__anonymous_2) ->
-- On OPAQUE reduce production option(__anonymous_2) ->
-- On NOEXTRACT reduce production option(__anonymous_2) ->
-- On NOEQUALITY reduce production option(__anonymous_2) ->
-- On NEW_EFFECT reduce production option(__anonymous_2) ->
-- On NEW reduce production option(__anonymous_2) ->
-- On MODULE reduce production option(__anonymous_2) ->
-- On LOGIC reduce production option(__anonymous_2) ->
-- On LET reduce production option(__anonymous_2) ->
-- On LBRACK_AT reduce production option(__anonymous_2) ->
-- On IRREDUCIBLE reduce production option(__anonymous_2) ->
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_2) ->
-- On INLINE reduce production option(__anonymous_2) ->
-- On INCLUDE reduce production option(__anonymous_2) ->
-- On FSDOC_STANDALONE reduce production option(__anonymous_2) ->
-- On FSDOC reduce production option(__anonymous_2) ->
-- On EXCEPTION reduce production option(__anonymous_2) ->
-- On EOF reduce production option(__anonymous_2) ->
-- On EFFECT reduce production option(__anonymous_2) ->
-- On DEFAULT reduce production option(__anonymous_2) ->
-- On BAR reduce production option(__anonymous_2) ->
-- On ASSUME reduce production option(__anonymous_2) ->
-- On AND reduce production option(__anonymous_2) ->
-- On ABSTRACT reduce production option(__anonymous_2) ->

State 775:
## Known stack suffix:
## OF
## LR(1) items:
option(__anonymous_2) -> OF . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 776
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 776:
## Known stack suffix:
## OF typ
## LR(1) items:
option(__anonymous_2) -> OF typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production option(__anonymous_2) -> OF typ
-- On UNOPTEQUALITY reduce production option(__anonymous_2) -> OF typ
-- On UNFOLDABLE reduce production option(__anonymous_2) -> OF typ
-- On UNFOLD reduce production option(__anonymous_2) -> OF typ
-- On TYPE reduce production option(__anonymous_2) -> OF typ
-- On TOTAL reduce production option(__anonymous_2) -> OF typ
-- On SUB_EFFECT reduce production option(__anonymous_2) -> OF typ
-- On SPLICE reduce production option(__anonymous_2) -> OF typ
-- On REIFIABLE reduce production option(__anonymous_2) -> OF typ
-- On REFLECTABLE reduce production option(__anonymous_2) -> OF typ
-- On PRIVATE reduce production option(__anonymous_2) -> OF typ
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_2) -> OF typ
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_2) -> OF typ
-- On OPEN reduce production option(__anonymous_2) -> OF typ
-- On OPAQUE reduce production option(__anonymous_2) -> OF typ
-- On NOEXTRACT reduce production option(__anonymous_2) -> OF typ
-- On NOEQUALITY reduce production option(__anonymous_2) -> OF typ
-- On NEW_EFFECT reduce production option(__anonymous_2) -> OF typ
-- On NEW reduce production option(__anonymous_2) -> OF typ
-- On MODULE reduce production option(__anonymous_2) -> OF typ
-- On LOGIC reduce production option(__anonymous_2) -> OF typ
-- On LET reduce production option(__anonymous_2) -> OF typ
-- On LBRACK_AT reduce production option(__anonymous_2) -> OF typ
-- On IRREDUCIBLE reduce production option(__anonymous_2) -> OF typ
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_2) -> OF typ
-- On INLINE reduce production option(__anonymous_2) -> OF typ
-- On INCLUDE reduce production option(__anonymous_2) -> OF typ
-- On FSDOC_STANDALONE reduce production option(__anonymous_2) -> OF typ
-- On FSDOC reduce production option(__anonymous_2) -> OF typ
-- On EXCEPTION reduce production option(__anonymous_2) -> OF typ
-- On EOF reduce production option(__anonymous_2) -> OF typ
-- On EFFECT reduce production option(__anonymous_2) -> OF typ
-- On DEFAULT reduce production option(__anonymous_2) -> OF typ
-- On BAR reduce production option(__anonymous_2) -> OF typ
-- On ASSUME reduce production option(__anonymous_2) -> OF typ
-- On AND reduce production option(__anonymous_2) -> OF typ
-- On ABSTRACT reduce production option(__anonymous_2) -> OF typ

State 777:
## Known stack suffix:
## BAR option(FSDOC) uident COLON
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident COLON . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 778
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 778:
## Known stack suffix:
## BAR option(FSDOC) uident COLON typ
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident COLON typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On UNOPTEQUALITY reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On UNFOLDABLE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On UNFOLD reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On TYPE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On TOTAL reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On SUB_EFFECT reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On SPLICE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On REIFIABLE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On REFLECTABLE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On PRIVATE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On PRAGMA_SET_OPTIONS reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On PRAGMA_RESET_OPTIONS reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On OPEN reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On OPAQUE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On NOEXTRACT reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On NOEQUALITY reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On NEW_EFFECT reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On NEW reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On MODULE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On LOGIC reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On LET reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On LBRACK_AT reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On IRREDUCIBLE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On INLINE_FOR_EXTRACTION reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On INLINE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On INCLUDE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On FSDOC_STANDALONE reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On FSDOC reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On EXCEPTION reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On EOF reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On EFFECT reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On DEFAULT reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On BAR reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On ASSUME reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On AND reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ
-- On ABSTRACT reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ

State 779:
## Known stack suffix:
## BAR option(FSDOC) uident option(__anonymous_2)
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On UNOPTEQUALITY reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On UNFOLDABLE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On UNFOLD reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On TYPE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On TOTAL reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On SUB_EFFECT reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On SPLICE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On REIFIABLE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On REFLECTABLE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On PRIVATE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On PRAGMA_SET_OPTIONS reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On PRAGMA_RESET_OPTIONS reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On OPEN reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On OPAQUE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On NOEXTRACT reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On NOEQUALITY reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On NEW_EFFECT reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On NEW reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On MODULE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On LOGIC reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On LET reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On LBRACK_AT reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On IRREDUCIBLE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On INLINE_FOR_EXTRACTION reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On INLINE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On INCLUDE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On FSDOC_STANDALONE reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On FSDOC reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On EXCEPTION reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On EOF reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On EFFECT reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On DEFAULT reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On BAR reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On ASSUME reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On AND reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)
-- On ABSTRACT reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)

State 780:
## Known stack suffix:
## EQUALS typ
## LR(1) items:
typeDefinition -> EQUALS typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production typeDefinition -> EQUALS typ
-- On UNOPTEQUALITY reduce production typeDefinition -> EQUALS typ
-- On UNFOLDABLE reduce production typeDefinition -> EQUALS typ
-- On UNFOLD reduce production typeDefinition -> EQUALS typ
-- On TYPE reduce production typeDefinition -> EQUALS typ
-- On TOTAL reduce production typeDefinition -> EQUALS typ
-- On SUB_EFFECT reduce production typeDefinition -> EQUALS typ
-- On SPLICE reduce production typeDefinition -> EQUALS typ
-- On REIFIABLE reduce production typeDefinition -> EQUALS typ
-- On REFLECTABLE reduce production typeDefinition -> EQUALS typ
-- On PRIVATE reduce production typeDefinition -> EQUALS typ
-- On PRAGMA_SET_OPTIONS reduce production typeDefinition -> EQUALS typ
-- On PRAGMA_RESET_OPTIONS reduce production typeDefinition -> EQUALS typ
-- On OPEN reduce production typeDefinition -> EQUALS typ
-- On OPAQUE reduce production typeDefinition -> EQUALS typ
-- On NOEXTRACT reduce production typeDefinition -> EQUALS typ
-- On NOEQUALITY reduce production typeDefinition -> EQUALS typ
-- On NEW_EFFECT reduce production typeDefinition -> EQUALS typ
-- On NEW reduce production typeDefinition -> EQUALS typ
-- On MODULE reduce production typeDefinition -> EQUALS typ
-- On LOGIC reduce production typeDefinition -> EQUALS typ
-- On LET reduce production typeDefinition -> EQUALS typ
-- On LBRACK_AT reduce production typeDefinition -> EQUALS typ
-- On IRREDUCIBLE reduce production typeDefinition -> EQUALS typ
-- On INLINE_FOR_EXTRACTION reduce production typeDefinition -> EQUALS typ
-- On INLINE reduce production typeDefinition -> EQUALS typ
-- On INCLUDE reduce production typeDefinition -> EQUALS typ
-- On FSDOC_STANDALONE reduce production typeDefinition -> EQUALS typ
-- On FSDOC reduce production typeDefinition -> EQUALS typ
-- On EXCEPTION reduce production typeDefinition -> EQUALS typ
-- On EOF reduce production typeDefinition -> EQUALS typ
-- On EFFECT reduce production typeDefinition -> EQUALS typ
-- On DEFAULT reduce production typeDefinition -> EQUALS typ
-- On ASSUME reduce production typeDefinition -> EQUALS typ
-- On AND reduce production typeDefinition -> EQUALS typ
-- On ABSTRACT reduce production typeDefinition -> EQUALS typ

State 781:
## Known stack suffix:
## EQUALS list(constructorDecl)
## LR(1) items:
typeDefinition -> EQUALS list(constructorDecl) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On UNOPTEQUALITY reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On UNFOLDABLE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On UNFOLD reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On TYPE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On TOTAL reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On SUB_EFFECT reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On SPLICE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On REIFIABLE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On REFLECTABLE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On PRIVATE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On PRAGMA_SET_OPTIONS reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On PRAGMA_RESET_OPTIONS reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On OPEN reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On OPAQUE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On NOEXTRACT reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On NOEQUALITY reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On NEW_EFFECT reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On NEW reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On MODULE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On LOGIC reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On LET reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On LBRACK_AT reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On IRREDUCIBLE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On INLINE_FOR_EXTRACTION reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On INLINE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On INCLUDE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On FSDOC_STANDALONE reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On FSDOC reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On EXCEPTION reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On EOF reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On EFFECT reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On DEFAULT reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On ASSUME reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On AND reduce production typeDefinition -> EQUALS list(constructorDecl)
-- On ABSTRACT reduce production typeDefinition -> EQUALS list(constructorDecl)

State 782:
## Known stack suffix:
## constructorDecl
## LR(1) items:
list(constructorDecl) -> constructorDecl . list(constructorDecl) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On BAR shift to state 772
-- On list(constructorDecl) shift to state 783
-- On constructorDecl shift to state 782
## Reductions:
-- On VAL reduce production list(constructorDecl) ->
-- On UNOPTEQUALITY reduce production list(constructorDecl) ->
-- On UNFOLDABLE reduce production list(constructorDecl) ->
-- On UNFOLD reduce production list(constructorDecl) ->
-- On TYPE reduce production list(constructorDecl) ->
-- On TOTAL reduce production list(constructorDecl) ->
-- On SUB_EFFECT reduce production list(constructorDecl) ->
-- On SPLICE reduce production list(constructorDecl) ->
-- On REIFIABLE reduce production list(constructorDecl) ->
-- On REFLECTABLE reduce production list(constructorDecl) ->
-- On PRIVATE reduce production list(constructorDecl) ->
-- On PRAGMA_SET_OPTIONS reduce production list(constructorDecl) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(constructorDecl) ->
-- On OPEN reduce production list(constructorDecl) ->
-- On OPAQUE reduce production list(constructorDecl) ->
-- On NOEXTRACT reduce production list(constructorDecl) ->
-- On NOEQUALITY reduce production list(constructorDecl) ->
-- On NEW_EFFECT reduce production list(constructorDecl) ->
-- On NEW reduce production list(constructorDecl) ->
-- On MODULE reduce production list(constructorDecl) ->
-- On LOGIC reduce production list(constructorDecl) ->
-- On LET reduce production list(constructorDecl) ->
-- On LBRACK_AT reduce production list(constructorDecl) ->
-- On IRREDUCIBLE reduce production list(constructorDecl) ->
-- On INLINE_FOR_EXTRACTION reduce production list(constructorDecl) ->
-- On INLINE reduce production list(constructorDecl) ->
-- On INCLUDE reduce production list(constructorDecl) ->
-- On FSDOC_STANDALONE reduce production list(constructorDecl) ->
-- On FSDOC reduce production list(constructorDecl) ->
-- On EXCEPTION reduce production list(constructorDecl) ->
-- On EOF reduce production list(constructorDecl) ->
-- On EFFECT reduce production list(constructorDecl) ->
-- On DEFAULT reduce production list(constructorDecl) ->
-- On ASSUME reduce production list(constructorDecl) ->
-- On AND reduce production list(constructorDecl) ->
-- On ABSTRACT reduce production list(constructorDecl) ->

State 783:
## Known stack suffix:
## constructorDecl list(constructorDecl)
## LR(1) items:
list(constructorDecl) -> constructorDecl list(constructorDecl) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On UNOPTEQUALITY reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On UNFOLDABLE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On UNFOLD reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On TYPE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On TOTAL reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On SUB_EFFECT reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On SPLICE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On REIFIABLE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On REFLECTABLE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On PRIVATE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On PRAGMA_SET_OPTIONS reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On PRAGMA_RESET_OPTIONS reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On OPEN reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On OPAQUE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On NOEXTRACT reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On NOEQUALITY reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On NEW_EFFECT reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On NEW reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On MODULE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On LOGIC reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On LET reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On LBRACK_AT reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On IRREDUCIBLE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On INLINE_FOR_EXTRACTION reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On INLINE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On INCLUDE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On FSDOC_STANDALONE reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On FSDOC reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On EXCEPTION reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On EOF reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On EFFECT reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On DEFAULT reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On ASSUME reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On AND reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)
-- On ABSTRACT reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)

State 784:
## Known stack suffix:
## ident typars option(ascribeKind) typeDefinition
## LR(1) items:
typeDecl -> ident typars option(ascribeKind) typeDefinition . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On UNOPTEQUALITY reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On UNFOLDABLE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On UNFOLD reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On TYPE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On TOTAL reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On SUB_EFFECT reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On SPLICE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On REIFIABLE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On REFLECTABLE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On PRIVATE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On PRAGMA_SET_OPTIONS reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On PRAGMA_RESET_OPTIONS reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On OPEN reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On OPAQUE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On NOEXTRACT reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On NOEQUALITY reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On NEW_EFFECT reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On NEW reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On MODULE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On LOGIC reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On LET reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On LBRACK_AT reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On IRREDUCIBLE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On INLINE_FOR_EXTRACTION reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On INLINE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On INCLUDE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On FSDOC_STANDALONE reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On FSDOC reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On EXCEPTION reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On EOF reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On EFFECT reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On DEFAULT reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On ASSUME reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On AND reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition
-- On ABSTRACT reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition

State 785:
## Known stack suffix:
## ascribeKind
## LR(1) items:
option(ascribeKind) -> ascribeKind . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production option(ascribeKind) -> ascribeKind
-- On UNOPTEQUALITY reduce production option(ascribeKind) -> ascribeKind
-- On UNFOLDABLE reduce production option(ascribeKind) -> ascribeKind
-- On UNFOLD reduce production option(ascribeKind) -> ascribeKind
-- On TYPE reduce production option(ascribeKind) -> ascribeKind
-- On TOTAL reduce production option(ascribeKind) -> ascribeKind
-- On SUB_EFFECT reduce production option(ascribeKind) -> ascribeKind
-- On SPLICE reduce production option(ascribeKind) -> ascribeKind
-- On REIFIABLE reduce production option(ascribeKind) -> ascribeKind
-- On REFLECTABLE reduce production option(ascribeKind) -> ascribeKind
-- On PRIVATE reduce production option(ascribeKind) -> ascribeKind
-- On PRAGMA_SET_OPTIONS reduce production option(ascribeKind) -> ascribeKind
-- On PRAGMA_RESET_OPTIONS reduce production option(ascribeKind) -> ascribeKind
-- On OPEN reduce production option(ascribeKind) -> ascribeKind
-- On OPAQUE reduce production option(ascribeKind) -> ascribeKind
-- On NOEXTRACT reduce production option(ascribeKind) -> ascribeKind
-- On NOEQUALITY reduce production option(ascribeKind) -> ascribeKind
-- On NEW_EFFECT reduce production option(ascribeKind) -> ascribeKind
-- On NEW reduce production option(ascribeKind) -> ascribeKind
-- On MODULE reduce production option(ascribeKind) -> ascribeKind
-- On LOGIC reduce production option(ascribeKind) -> ascribeKind
-- On LET reduce production option(ascribeKind) -> ascribeKind
-- On LBRACK_AT reduce production option(ascribeKind) -> ascribeKind
-- On IRREDUCIBLE reduce production option(ascribeKind) -> ascribeKind
-- On INLINE_FOR_EXTRACTION reduce production option(ascribeKind) -> ascribeKind
-- On INLINE reduce production option(ascribeKind) -> ascribeKind
-- On INCLUDE reduce production option(ascribeKind) -> ascribeKind
-- On FSDOC_STANDALONE reduce production option(ascribeKind) -> ascribeKind
-- On FSDOC reduce production option(ascribeKind) -> ascribeKind
-- On EXCEPTION reduce production option(ascribeKind) -> ascribeKind
-- On EQUALS reduce production option(ascribeKind) -> ascribeKind
-- On EOF reduce production option(ascribeKind) -> ascribeKind
-- On EFFECT reduce production option(ascribeKind) -> ascribeKind
-- On DEFAULT reduce production option(ascribeKind) -> ascribeKind
-- On ASSUME reduce production option(ascribeKind) -> ascribeKind
-- On AND reduce production option(ascribeKind) -> ascribeKind
-- On ABSTRACT reduce production option(ascribeKind) -> ascribeKind

State 786:
## Known stack suffix:
## tvarinsts
## LR(1) items:
typars -> tvarinsts . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production typars -> tvarinsts
-- On UNOPTEQUALITY reduce production typars -> tvarinsts
-- On UNFOLDABLE reduce production typars -> tvarinsts
-- On UNFOLD reduce production typars -> tvarinsts
-- On TYPE reduce production typars -> tvarinsts
-- On TOTAL reduce production typars -> tvarinsts
-- On SUB_EFFECT reduce production typars -> tvarinsts
-- On SPLICE reduce production typars -> tvarinsts
-- On REIFIABLE reduce production typars -> tvarinsts
-- On REFLECTABLE reduce production typars -> tvarinsts
-- On PRIVATE reduce production typars -> tvarinsts
-- On PRAGMA_SET_OPTIONS reduce production typars -> tvarinsts
-- On PRAGMA_RESET_OPTIONS reduce production typars -> tvarinsts
-- On OPEN reduce production typars -> tvarinsts
-- On OPAQUE reduce production typars -> tvarinsts
-- On NOEXTRACT reduce production typars -> tvarinsts
-- On NOEQUALITY reduce production typars -> tvarinsts
-- On NEW_EFFECT reduce production typars -> tvarinsts
-- On NEW reduce production typars -> tvarinsts
-- On MODULE reduce production typars -> tvarinsts
-- On LOGIC reduce production typars -> tvarinsts
-- On LET reduce production typars -> tvarinsts
-- On LBRACK_AT reduce production typars -> tvarinsts
-- On IRREDUCIBLE reduce production typars -> tvarinsts
-- On INLINE_FOR_EXTRACTION reduce production typars -> tvarinsts
-- On INLINE reduce production typars -> tvarinsts
-- On INCLUDE reduce production typars -> tvarinsts
-- On FSDOC_STANDALONE reduce production typars -> tvarinsts
-- On FSDOC reduce production typars -> tvarinsts
-- On EXCEPTION reduce production typars -> tvarinsts
-- On EQUALS reduce production typars -> tvarinsts
-- On EOF reduce production typars -> tvarinsts
-- On EFFECT reduce production typars -> tvarinsts
-- On DEFAULT reduce production typars -> tvarinsts
-- On COLON reduce production typars -> tvarinsts
-- On ASSUME reduce production typars -> tvarinsts
-- On AND reduce production typars -> tvarinsts
-- On ABSTRACT reduce production typars -> tvarinsts

State 787:
## Known stack suffix:
## binders
## LR(1) items:
typars -> binders . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production typars -> binders
-- On UNOPTEQUALITY reduce production typars -> binders
-- On UNFOLDABLE reduce production typars -> binders
-- On UNFOLD reduce production typars -> binders
-- On TYPE reduce production typars -> binders
-- On TOTAL reduce production typars -> binders
-- On SUB_EFFECT reduce production typars -> binders
-- On SPLICE reduce production typars -> binders
-- On REIFIABLE reduce production typars -> binders
-- On REFLECTABLE reduce production typars -> binders
-- On PRIVATE reduce production typars -> binders
-- On PRAGMA_SET_OPTIONS reduce production typars -> binders
-- On PRAGMA_RESET_OPTIONS reduce production typars -> binders
-- On OPEN reduce production typars -> binders
-- On OPAQUE reduce production typars -> binders
-- On NOEXTRACT reduce production typars -> binders
-- On NOEQUALITY reduce production typars -> binders
-- On NEW_EFFECT reduce production typars -> binders
-- On NEW reduce production typars -> binders
-- On MODULE reduce production typars -> binders
-- On LOGIC reduce production typars -> binders
-- On LET reduce production typars -> binders
-- On LBRACK_AT reduce production typars -> binders
-- On IRREDUCIBLE reduce production typars -> binders
-- On INLINE_FOR_EXTRACTION reduce production typars -> binders
-- On INLINE reduce production typars -> binders
-- On INCLUDE reduce production typars -> binders
-- On FSDOC_STANDALONE reduce production typars -> binders
-- On FSDOC reduce production typars -> binders
-- On EXCEPTION reduce production typars -> binders
-- On EQUALS reduce production typars -> binders
-- On EOF reduce production typars -> binders
-- On EFFECT reduce production typars -> binders
-- On DEFAULT reduce production typars -> binders
-- On COLON reduce production typars -> binders
-- On ASSUME reduce production typars -> binders
-- On AND reduce production typars -> binders
-- On ABSTRACT reduce production typars -> binders

State 788:
## Known stack suffix:
## SUB_EFFECT
## LR(1) items:
rawDecl -> SUB_EFFECT . subEffect [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On subEffect shift to state 789
-- On quident shift to state 790
-- On path(uident) shift to state 100
## Reductions:

State 789:
## Known stack suffix:
## SUB_EFFECT subEffect
## LR(1) items:
rawDecl -> SUB_EFFECT subEffect . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> SUB_EFFECT subEffect
-- On UNOPTEQUALITY reduce production rawDecl -> SUB_EFFECT subEffect
-- On UNFOLDABLE reduce production rawDecl -> SUB_EFFECT subEffect
-- On UNFOLD reduce production rawDecl -> SUB_EFFECT subEffect
-- On TYPE reduce production rawDecl -> SUB_EFFECT subEffect
-- On TOTAL reduce production rawDecl -> SUB_EFFECT subEffect
-- On SUB_EFFECT reduce production rawDecl -> SUB_EFFECT subEffect
-- On SPLICE reduce production rawDecl -> SUB_EFFECT subEffect
-- On REIFIABLE reduce production rawDecl -> SUB_EFFECT subEffect
-- On REFLECTABLE reduce production rawDecl -> SUB_EFFECT subEffect
-- On PRIVATE reduce production rawDecl -> SUB_EFFECT subEffect
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> SUB_EFFECT subEffect
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> SUB_EFFECT subEffect
-- On OPEN reduce production rawDecl -> SUB_EFFECT subEffect
-- On OPAQUE reduce production rawDecl -> SUB_EFFECT subEffect
-- On NOEXTRACT reduce production rawDecl -> SUB_EFFECT subEffect
-- On NOEQUALITY reduce production rawDecl -> SUB_EFFECT subEffect
-- On NEW_EFFECT reduce production rawDecl -> SUB_EFFECT subEffect
-- On NEW reduce production rawDecl -> SUB_EFFECT subEffect
-- On MODULE reduce production rawDecl -> SUB_EFFECT subEffect
-- On LOGIC reduce production rawDecl -> SUB_EFFECT subEffect
-- On LET reduce production rawDecl -> SUB_EFFECT subEffect
-- On LBRACK_AT reduce production rawDecl -> SUB_EFFECT subEffect
-- On IRREDUCIBLE reduce production rawDecl -> SUB_EFFECT subEffect
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> SUB_EFFECT subEffect
-- On INLINE reduce production rawDecl -> SUB_EFFECT subEffect
-- On INCLUDE reduce production rawDecl -> SUB_EFFECT subEffect
-- On FSDOC_STANDALONE reduce production rawDecl -> SUB_EFFECT subEffect
-- On FSDOC reduce production rawDecl -> SUB_EFFECT subEffect
-- On EXCEPTION reduce production rawDecl -> SUB_EFFECT subEffect
-- On EOF reduce production rawDecl -> SUB_EFFECT subEffect
-- On EFFECT reduce production rawDecl -> SUB_EFFECT subEffect
-- On DEFAULT reduce production rawDecl -> SUB_EFFECT subEffect
-- On ASSUME reduce production rawDecl -> SUB_EFFECT subEffect
-- On ABSTRACT reduce production rawDecl -> SUB_EFFECT subEffect

State 790:
## Known stack suffix:
## quident
## LR(1) items:
subEffect -> quident . SQUIGGLY_RARROW quident EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident . SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident . SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 791
## Reductions:

State 791:
## Known stack suffix:
## quident SQUIGGLY_RARROW
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW . quident EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW . quident LBRACE IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW . quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 792
-- On path(uident) shift to state 100
## Reductions:

State 792:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident . EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident . LBRACE IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident . LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LBRACE shift to state 793
-- On EQUALS shift to state 803
## Reductions:

State 793:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE . IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE . IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On IDENT shift to state 794
## Reductions:

State 794:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT . EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT . EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 795
## Reductions:

State 795:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS . simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS . simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 796
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 796:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm . SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 797
-- On RBRACE shift to state 802
## Reductions:

State 797:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON . IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On IDENT shift to state 798
## Reductions:

State 798:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT . EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 799
## Reductions:

State 799:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS . simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 800
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 800:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 801
## Reductions:

State 801:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On UNOPTEQUALITY reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On UNFOLDABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On UNFOLD reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On TYPE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On TOTAL reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On SUB_EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On SPLICE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On REIFIABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On REFLECTABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On PRIVATE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On PRAGMA_SET_OPTIONS reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On OPEN reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On OPAQUE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On NOEXTRACT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On NOEQUALITY reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On NEW_EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On NEW reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On MODULE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On LOGIC reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On LET reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On LBRACK_AT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On IRREDUCIBLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On INLINE_FOR_EXTRACTION reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On INLINE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On INCLUDE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On FSDOC_STANDALONE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On FSDOC reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On EXCEPTION reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On EOF reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On DEFAULT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On ASSUME reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
-- On ABSTRACT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE

State 802:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On UNOPTEQUALITY reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On UNFOLDABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On UNFOLD reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On TYPE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On TOTAL reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On SUB_EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On SPLICE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On REIFIABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On REFLECTABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On PRIVATE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On PRAGMA_SET_OPTIONS reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On OPEN reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On OPAQUE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On NOEXTRACT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On NOEQUALITY reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On NEW_EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On NEW reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On MODULE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On LOGIC reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On LET reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On LBRACK_AT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On IRREDUCIBLE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On INLINE_FOR_EXTRACTION reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On INLINE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On INCLUDE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On FSDOC_STANDALONE reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On FSDOC reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On EXCEPTION reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On EOF reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On DEFAULT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On ASSUME reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
-- On ABSTRACT reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE

State 803:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident EQUALS
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident EQUALS . simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 804
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 804:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident EQUALS simpleTerm
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On UNOPTEQUALITY reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On UNFOLDABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On UNFOLD reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On TYPE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On TOTAL reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On SUB_EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On SPLICE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On REIFIABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On REFLECTABLE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On PRIVATE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On PRAGMA_SET_OPTIONS reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On PRAGMA_RESET_OPTIONS reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On OPEN reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On OPAQUE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On NOEXTRACT reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On NOEQUALITY reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On NEW_EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On NEW reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On MODULE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On LOGIC reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On LET reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On LBRACK_AT reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On IRREDUCIBLE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On INLINE_FOR_EXTRACTION reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On INLINE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On INCLUDE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On FSDOC_STANDALONE reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On FSDOC reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On EXCEPTION reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On EOF reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On EFFECT reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On DEFAULT reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On ASSUME reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm
-- On ABSTRACT reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm

State 805:
## Known stack suffix:
## SPLICE
## LR(1) items:
rawDecl -> SPLICE . LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LBRACK shift to state 806
## Reductions:

State 806:
## Known stack suffix:
## SPLICE LBRACK
## LR(1) items:
rawDecl -> SPLICE LBRACK . loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LPAREN shift to state 698
-- On IDENT shift to state 727
-- On separated_nonempty_list(SEMICOLON,lidentOrOperator) shift to state 807
-- On loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) shift to state 808
-- On lidentOrOperator shift to state 811
## Reductions:
-- On RBRACK reduce production loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) ->

State 807:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,lidentOrOperator)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) -> separated_nonempty_list(SEMICOLON,lidentOrOperator) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) -> separated_nonempty_list(SEMICOLON,lidentOrOperator)

State 808:
## Known stack suffix:
## SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator))
## LR(1) items:
rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) . RBRACK atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On RBRACK shift to state 809
## Reductions:

State 809:
## Known stack suffix:
## SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK
## LR(1) items:
rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK . atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 810
## Reductions:

State 810:
## Known stack suffix:
## SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
## LR(1) items:
rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On UNOPTEQUALITY reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On UNFOLDABLE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On UNFOLD reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On TYPE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On TOTAL reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On SUB_EFFECT reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On SPLICE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On REIFIABLE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On REFLECTABLE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On PRIVATE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On OPEN reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On OPAQUE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On NOEXTRACT reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On NOEQUALITY reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On NEW_EFFECT reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On NEW reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On MODULE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On LOGIC reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On LET reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On LBRACK_AT reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On IRREDUCIBLE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On INLINE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On INCLUDE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On FSDOC_STANDALONE reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On FSDOC reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On EXCEPTION reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On EOF reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On EFFECT reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On DEFAULT reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On ASSUME reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
-- On ABSTRACT reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm

State 811:
## Known stack suffix:
## lidentOrOperator
## LR(1) items:
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator . [ RBRACK ]
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator . SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator) [ RBRACK ]
## Transitions:
-- On SEMICOLON shift to state 812
## Reductions:
-- On RBRACK reduce production separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator

State 812:
## Known stack suffix:
## lidentOrOperator SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator SEMICOLON . separated_nonempty_list(SEMICOLON,lidentOrOperator) [ RBRACK ]
## Transitions:
-- On LPAREN shift to state 698
-- On IDENT shift to state 727
-- On separated_nonempty_list(SEMICOLON,lidentOrOperator) shift to state 813
-- On lidentOrOperator shift to state 811
## Reductions:

State 813:
## Known stack suffix:
## lidentOrOperator SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator)
## LR(1) items:
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator)

State 814:
## Known stack suffix:
## PRAGMA_SET_OPTIONS
## LR(1) items:
pragma -> PRAGMA_SET_OPTIONS . STRING [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On STRING shift to state 815
## Reductions:

State 815:
## Known stack suffix:
## PRAGMA_SET_OPTIONS STRING
## LR(1) items:
pragma -> PRAGMA_SET_OPTIONS STRING . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On UNOPTEQUALITY reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On UNFOLDABLE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On UNFOLD reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On TYPE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On TOTAL reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On SUB_EFFECT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On SPLICE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On REIFIABLE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On REFLECTABLE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On PRIVATE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On PRAGMA_SET_OPTIONS reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On PRAGMA_RESET_OPTIONS reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On OPEN reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On OPAQUE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On NOEXTRACT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On NOEQUALITY reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On NEW_EFFECT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On NEW reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On MODULE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On LOGIC reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On LET reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On LBRACK_AT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On IRREDUCIBLE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On INLINE_FOR_EXTRACTION reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On INLINE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On INCLUDE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On FSDOC_STANDALONE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On FSDOC reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On EXCEPTION reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On EOF reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On EFFECT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On DEFAULT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On ASSUME reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On ABSTRACT reduce production pragma -> PRAGMA_SET_OPTIONS STRING

State 816:
## Known stack suffix:
## PRAGMA_RESET_OPTIONS
## LR(1) items:
pragma -> PRAGMA_RESET_OPTIONS . option(string) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On STRING shift to state 817
-- On option(string) shift to state 818
## Reductions:
-- On VAL reduce production option(string) ->
-- On UNOPTEQUALITY reduce production option(string) ->
-- On UNFOLDABLE reduce production option(string) ->
-- On UNFOLD reduce production option(string) ->
-- On TYPE reduce production option(string) ->
-- On TOTAL reduce production option(string) ->
-- On SUB_EFFECT reduce production option(string) ->
-- On SPLICE reduce production option(string) ->
-- On REIFIABLE reduce production option(string) ->
-- On REFLECTABLE reduce production option(string) ->
-- On PRIVATE reduce production option(string) ->
-- On PRAGMA_SET_OPTIONS reduce production option(string) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(string) ->
-- On OPEN reduce production option(string) ->
-- On OPAQUE reduce production option(string) ->
-- On NOEXTRACT reduce production option(string) ->
-- On NOEQUALITY reduce production option(string) ->
-- On NEW_EFFECT reduce production option(string) ->
-- On NEW reduce production option(string) ->
-- On MODULE reduce production option(string) ->
-- On LOGIC reduce production option(string) ->
-- On LET reduce production option(string) ->
-- On LBRACK_AT reduce production option(string) ->
-- On IRREDUCIBLE reduce production option(string) ->
-- On INLINE_FOR_EXTRACTION reduce production option(string) ->
-- On INLINE reduce production option(string) ->
-- On INCLUDE reduce production option(string) ->
-- On FSDOC_STANDALONE reduce production option(string) ->
-- On FSDOC reduce production option(string) ->
-- On EXCEPTION reduce production option(string) ->
-- On EOF reduce production option(string) ->
-- On EFFECT reduce production option(string) ->
-- On DEFAULT reduce production option(string) ->
-- On ASSUME reduce production option(string) ->
-- On ABSTRACT reduce production option(string) ->

State 817:
## Known stack suffix:
## STRING
## LR(1) items:
option(string) -> STRING . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production option(string) -> STRING
-- On UNOPTEQUALITY reduce production option(string) -> STRING
-- On UNFOLDABLE reduce production option(string) -> STRING
-- On UNFOLD reduce production option(string) -> STRING
-- On TYPE reduce production option(string) -> STRING
-- On TOTAL reduce production option(string) -> STRING
-- On SUB_EFFECT reduce production option(string) -> STRING
-- On SPLICE reduce production option(string) -> STRING
-- On REIFIABLE reduce production option(string) -> STRING
-- On REFLECTABLE reduce production option(string) -> STRING
-- On PRIVATE reduce production option(string) -> STRING
-- On PRAGMA_SET_OPTIONS reduce production option(string) -> STRING
-- On PRAGMA_RESET_OPTIONS reduce production option(string) -> STRING
-- On OPEN reduce production option(string) -> STRING
-- On OPAQUE reduce production option(string) -> STRING
-- On NOEXTRACT reduce production option(string) -> STRING
-- On NOEQUALITY reduce production option(string) -> STRING
-- On NEW_EFFECT reduce production option(string) -> STRING
-- On NEW reduce production option(string) -> STRING
-- On MODULE reduce production option(string) -> STRING
-- On LOGIC reduce production option(string) -> STRING
-- On LET reduce production option(string) -> STRING
-- On LBRACK_AT reduce production option(string) -> STRING
-- On IRREDUCIBLE reduce production option(string) -> STRING
-- On INLINE_FOR_EXTRACTION reduce production option(string) -> STRING
-- On INLINE reduce production option(string) -> STRING
-- On INCLUDE reduce production option(string) -> STRING
-- On FSDOC_STANDALONE reduce production option(string) -> STRING
-- On FSDOC reduce production option(string) -> STRING
-- On EXCEPTION reduce production option(string) -> STRING
-- On EOF reduce production option(string) -> STRING
-- On EFFECT reduce production option(string) -> STRING
-- On DEFAULT reduce production option(string) -> STRING
-- On ASSUME reduce production option(string) -> STRING
-- On ABSTRACT reduce production option(string) -> STRING

State 818:
## Known stack suffix:
## PRAGMA_RESET_OPTIONS option(string)
## LR(1) items:
pragma -> PRAGMA_RESET_OPTIONS option(string) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On UNOPTEQUALITY reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On UNFOLDABLE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On UNFOLD reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On TYPE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On TOTAL reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On SUB_EFFECT reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On SPLICE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On REIFIABLE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On REFLECTABLE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On PRIVATE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On PRAGMA_SET_OPTIONS reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On PRAGMA_RESET_OPTIONS reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On OPEN reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On OPAQUE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On NOEXTRACT reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On NOEQUALITY reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On NEW_EFFECT reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On NEW reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On MODULE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On LOGIC reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On LET reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On LBRACK_AT reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On IRREDUCIBLE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On INLINE_FOR_EXTRACTION reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On INLINE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On INCLUDE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On FSDOC_STANDALONE reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On FSDOC reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On EXCEPTION reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On EOF reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On EFFECT reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On DEFAULT reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On ASSUME reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)
-- On ABSTRACT reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)

State 819:
## Known stack suffix:
## OPEN
## LR(1) items:
rawDecl -> OPEN . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 820
-- On path(uident) shift to state 100
## Reductions:

State 820:
## Known stack suffix:
## OPEN quident
## LR(1) items:
rawDecl -> OPEN quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> OPEN quident
-- On UNOPTEQUALITY reduce production rawDecl -> OPEN quident
-- On UNFOLDABLE reduce production rawDecl -> OPEN quident
-- On UNFOLD reduce production rawDecl -> OPEN quident
-- On TYPE reduce production rawDecl -> OPEN quident
-- On TOTAL reduce production rawDecl -> OPEN quident
-- On SUB_EFFECT reduce production rawDecl -> OPEN quident
-- On SPLICE reduce production rawDecl -> OPEN quident
-- On REIFIABLE reduce production rawDecl -> OPEN quident
-- On REFLECTABLE reduce production rawDecl -> OPEN quident
-- On PRIVATE reduce production rawDecl -> OPEN quident
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> OPEN quident
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> OPEN quident
-- On OPEN reduce production rawDecl -> OPEN quident
-- On OPAQUE reduce production rawDecl -> OPEN quident
-- On NOEXTRACT reduce production rawDecl -> OPEN quident
-- On NOEQUALITY reduce production rawDecl -> OPEN quident
-- On NEW_EFFECT reduce production rawDecl -> OPEN quident
-- On NEW reduce production rawDecl -> OPEN quident
-- On MODULE reduce production rawDecl -> OPEN quident
-- On LOGIC reduce production rawDecl -> OPEN quident
-- On LET reduce production rawDecl -> OPEN quident
-- On LBRACK_AT reduce production rawDecl -> OPEN quident
-- On IRREDUCIBLE reduce production rawDecl -> OPEN quident
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> OPEN quident
-- On INLINE reduce production rawDecl -> OPEN quident
-- On INCLUDE reduce production rawDecl -> OPEN quident
-- On FSDOC_STANDALONE reduce production rawDecl -> OPEN quident
-- On FSDOC reduce production rawDecl -> OPEN quident
-- On EXCEPTION reduce production rawDecl -> OPEN quident
-- On EOF reduce production rawDecl -> OPEN quident
-- On EFFECT reduce production rawDecl -> OPEN quident
-- On DEFAULT reduce production rawDecl -> OPEN quident
-- On ASSUME reduce production rawDecl -> OPEN quident
-- On ABSTRACT reduce production rawDecl -> OPEN quident

State 821:
## Known stack suffix:
## NEW_EFFECT
## LR(1) items:
rawDecl -> NEW_EFFECT . newEffect [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On LBRACE shift to state 822
-- On uident shift to state 837
-- On newEffect shift to state 840
-- On effectRedefinition shift to state 841
-- On effectDefinition shift to state 842
## Reductions:

State 822:
## Known stack suffix:
## LBRACE
## LR(1) items:
effectDefinition -> LBRACE . uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 823
## Reductions:

State 823:
## Known stack suffix:
## LBRACE uident
## LR(1) items:
effectDefinition -> LBRACE uident . binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 824
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On COLON reduce production list(__anonymous_4) ->

State 824:
## Known stack suffix:
## LBRACE uident binders
## LR(1) items:
effectDefinition -> LBRACE uident binders . COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On COLON shift to state 825
## Reductions:

State 825:
## Known stack suffix:
## LBRACE uident binders COLON
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON . tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 826
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 826:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq)
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) . WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On WITH shift to state 827
## Reductions:

State 827:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq) WITH
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH . separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(SEMICOLON,effectDecl) shift to state 828
-- On lident shift to state 830
-- On effectDecl shift to state 834
## Reductions:

State 828:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl)
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 829
## Reductions:

State 829:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On UNOPTEQUALITY reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On UNFOLDABLE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On UNFOLD reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On TYPE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On TOTAL reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On SUB_EFFECT reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On SPLICE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On REIFIABLE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On REFLECTABLE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On PRIVATE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On PRAGMA_SET_OPTIONS reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On OPEN reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On OPAQUE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On NOEXTRACT reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On NOEQUALITY reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On NEW_EFFECT reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On NEW reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On MODULE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On LOGIC reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On LET reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On LBRACK_AT reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On IRREDUCIBLE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On INLINE_FOR_EXTRACTION reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On INLINE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On INCLUDE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On FSDOC_STANDALONE reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On FSDOC reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On EXCEPTION reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On EOF reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On EFFECT reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On DEFAULT reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On ASSUME reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
-- On ABSTRACT reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE

State 830:
## Known stack suffix:
## lident
## LR(1) items:
effectDecl -> lident . binders EQUALS simpleTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 831
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On EQUALS reduce production list(__anonymous_4) ->

State 831:
## Known stack suffix:
## lident binders
## LR(1) items:
effectDecl -> lident binders . EQUALS simpleTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On EQUALS shift to state 832
## Reductions:

State 832:
## Known stack suffix:
## lident binders EQUALS
## LR(1) items:
effectDecl -> lident binders EQUALS . simpleTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 833
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 833:
## Known stack suffix:
## lident binders EQUALS simpleTerm
## LR(1) items:
effectDecl -> lident binders EQUALS simpleTerm . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production effectDecl -> lident binders EQUALS simpleTerm
-- On RBRACE reduce production effectDecl -> lident binders EQUALS simpleTerm

State 834:
## Known stack suffix:
## effectDecl
## LR(1) items:
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl . [ RBRACE ]
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl . SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 835
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl

State 835:
## Known stack suffix:
## effectDecl SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl SEMICOLON . separated_nonempty_list(SEMICOLON,effectDecl) [ RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(SEMICOLON,effectDecl) shift to state 836
-- On lident shift to state 830
-- On effectDecl shift to state 834
## Reductions:

State 836:
## Known stack suffix:
## effectDecl SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl)
## LR(1) items:
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl)

State 837:
## Known stack suffix:
## uident
## LR(1) items:
effectRedefinition -> uident . EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 838
## Reductions:

State 838:
## Known stack suffix:
## uident EQUALS
## LR(1) items:
effectRedefinition -> uident EQUALS . simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 839
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 839:
## Known stack suffix:
## uident EQUALS simpleTerm
## LR(1) items:
effectRedefinition -> uident EQUALS simpleTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On UNOPTEQUALITY reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On UNFOLDABLE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On UNFOLD reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On TYPE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On TOTAL reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On SUB_EFFECT reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On SPLICE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On REIFIABLE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On REFLECTABLE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On PRIVATE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On PRAGMA_SET_OPTIONS reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On PRAGMA_RESET_OPTIONS reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On OPEN reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On OPAQUE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On NOEXTRACT reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On NOEQUALITY reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On NEW_EFFECT reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On NEW reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On MODULE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On LOGIC reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On LET reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On LBRACK_AT reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On IRREDUCIBLE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On INLINE_FOR_EXTRACTION reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On INLINE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On INCLUDE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On FSDOC_STANDALONE reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On FSDOC reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On EXCEPTION reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On EOF reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On EFFECT reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On DEFAULT reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On ASSUME reduce production effectRedefinition -> uident EQUALS simpleTerm
-- On ABSTRACT reduce production effectRedefinition -> uident EQUALS simpleTerm

State 840:
## Known stack suffix:
## NEW_EFFECT newEffect
## LR(1) items:
rawDecl -> NEW_EFFECT newEffect . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> NEW_EFFECT newEffect
-- On UNOPTEQUALITY reduce production rawDecl -> NEW_EFFECT newEffect
-- On UNFOLDABLE reduce production rawDecl -> NEW_EFFECT newEffect
-- On UNFOLD reduce production rawDecl -> NEW_EFFECT newEffect
-- On TYPE reduce production rawDecl -> NEW_EFFECT newEffect
-- On TOTAL reduce production rawDecl -> NEW_EFFECT newEffect
-- On SUB_EFFECT reduce production rawDecl -> NEW_EFFECT newEffect
-- On SPLICE reduce production rawDecl -> NEW_EFFECT newEffect
-- On REIFIABLE reduce production rawDecl -> NEW_EFFECT newEffect
-- On REFLECTABLE reduce production rawDecl -> NEW_EFFECT newEffect
-- On PRIVATE reduce production rawDecl -> NEW_EFFECT newEffect
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> NEW_EFFECT newEffect
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> NEW_EFFECT newEffect
-- On OPEN reduce production rawDecl -> NEW_EFFECT newEffect
-- On OPAQUE reduce production rawDecl -> NEW_EFFECT newEffect
-- On NOEXTRACT reduce production rawDecl -> NEW_EFFECT newEffect
-- On NOEQUALITY reduce production rawDecl -> NEW_EFFECT newEffect
-- On NEW_EFFECT reduce production rawDecl -> NEW_EFFECT newEffect
-- On NEW reduce production rawDecl -> NEW_EFFECT newEffect
-- On MODULE reduce production rawDecl -> NEW_EFFECT newEffect
-- On LOGIC reduce production rawDecl -> NEW_EFFECT newEffect
-- On LET reduce production rawDecl -> NEW_EFFECT newEffect
-- On LBRACK_AT reduce production rawDecl -> NEW_EFFECT newEffect
-- On IRREDUCIBLE reduce production rawDecl -> NEW_EFFECT newEffect
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> NEW_EFFECT newEffect
-- On INLINE reduce production rawDecl -> NEW_EFFECT newEffect
-- On INCLUDE reduce production rawDecl -> NEW_EFFECT newEffect
-- On FSDOC_STANDALONE reduce production rawDecl -> NEW_EFFECT newEffect
-- On FSDOC reduce production rawDecl -> NEW_EFFECT newEffect
-- On EXCEPTION reduce production rawDecl -> NEW_EFFECT newEffect
-- On EOF reduce production rawDecl -> NEW_EFFECT newEffect
-- On EFFECT reduce production rawDecl -> NEW_EFFECT newEffect
-- On DEFAULT reduce production rawDecl -> NEW_EFFECT newEffect
-- On ASSUME reduce production rawDecl -> NEW_EFFECT newEffect
-- On ABSTRACT reduce production rawDecl -> NEW_EFFECT newEffect

State 841:
## Known stack suffix:
## effectRedefinition
## LR(1) items:
newEffect -> effectRedefinition . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production newEffect -> effectRedefinition
-- On UNOPTEQUALITY reduce production newEffect -> effectRedefinition
-- On UNFOLDABLE reduce production newEffect -> effectRedefinition
-- On UNFOLD reduce production newEffect -> effectRedefinition
-- On TYPE reduce production newEffect -> effectRedefinition
-- On TOTAL reduce production newEffect -> effectRedefinition
-- On SUB_EFFECT reduce production newEffect -> effectRedefinition
-- On SPLICE reduce production newEffect -> effectRedefinition
-- On REIFIABLE reduce production newEffect -> effectRedefinition
-- On REFLECTABLE reduce production newEffect -> effectRedefinition
-- On PRIVATE reduce production newEffect -> effectRedefinition
-- On PRAGMA_SET_OPTIONS reduce production newEffect -> effectRedefinition
-- On PRAGMA_RESET_OPTIONS reduce production newEffect -> effectRedefinition
-- On OPEN reduce production newEffect -> effectRedefinition
-- On OPAQUE reduce production newEffect -> effectRedefinition
-- On NOEXTRACT reduce production newEffect -> effectRedefinition
-- On NOEQUALITY reduce production newEffect -> effectRedefinition
-- On NEW_EFFECT reduce production newEffect -> effectRedefinition
-- On NEW reduce production newEffect -> effectRedefinition
-- On MODULE reduce production newEffect -> effectRedefinition
-- On LOGIC reduce production newEffect -> effectRedefinition
-- On LET reduce production newEffect -> effectRedefinition
-- On LBRACK_AT reduce production newEffect -> effectRedefinition
-- On IRREDUCIBLE reduce production newEffect -> effectRedefinition
-- On INLINE_FOR_EXTRACTION reduce production newEffect -> effectRedefinition
-- On INLINE reduce production newEffect -> effectRedefinition
-- On INCLUDE reduce production newEffect -> effectRedefinition
-- On FSDOC_STANDALONE reduce production newEffect -> effectRedefinition
-- On FSDOC reduce production newEffect -> effectRedefinition
-- On EXCEPTION reduce production newEffect -> effectRedefinition
-- On EOF reduce production newEffect -> effectRedefinition
-- On EFFECT reduce production newEffect -> effectRedefinition
-- On DEFAULT reduce production newEffect -> effectRedefinition
-- On ASSUME reduce production newEffect -> effectRedefinition
-- On ABSTRACT reduce production newEffect -> effectRedefinition

State 842:
## Known stack suffix:
## effectDefinition
## LR(1) items:
newEffect -> effectDefinition . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production newEffect -> effectDefinition
-- On UNOPTEQUALITY reduce production newEffect -> effectDefinition
-- On UNFOLDABLE reduce production newEffect -> effectDefinition
-- On UNFOLD reduce production newEffect -> effectDefinition
-- On TYPE reduce production newEffect -> effectDefinition
-- On TOTAL reduce production newEffect -> effectDefinition
-- On SUB_EFFECT reduce production newEffect -> effectDefinition
-- On SPLICE reduce production newEffect -> effectDefinition
-- On REIFIABLE reduce production newEffect -> effectDefinition
-- On REFLECTABLE reduce production newEffect -> effectDefinition
-- On PRIVATE reduce production newEffect -> effectDefinition
-- On PRAGMA_SET_OPTIONS reduce production newEffect -> effectDefinition
-- On PRAGMA_RESET_OPTIONS reduce production newEffect -> effectDefinition
-- On OPEN reduce production newEffect -> effectDefinition
-- On OPAQUE reduce production newEffect -> effectDefinition
-- On NOEXTRACT reduce production newEffect -> effectDefinition
-- On NOEQUALITY reduce production newEffect -> effectDefinition
-- On NEW_EFFECT reduce production newEffect -> effectDefinition
-- On NEW reduce production newEffect -> effectDefinition
-- On MODULE reduce production newEffect -> effectDefinition
-- On LOGIC reduce production newEffect -> effectDefinition
-- On LET reduce production newEffect -> effectDefinition
-- On LBRACK_AT reduce production newEffect -> effectDefinition
-- On IRREDUCIBLE reduce production newEffect -> effectDefinition
-- On INLINE_FOR_EXTRACTION reduce production newEffect -> effectDefinition
-- On INLINE reduce production newEffect -> effectDefinition
-- On INCLUDE reduce production newEffect -> effectDefinition
-- On FSDOC_STANDALONE reduce production newEffect -> effectDefinition
-- On FSDOC reduce production newEffect -> effectDefinition
-- On EXCEPTION reduce production newEffect -> effectDefinition
-- On EOF reduce production newEffect -> effectDefinition
-- On EFFECT reduce production newEffect -> effectDefinition
-- On DEFAULT reduce production newEffect -> effectDefinition
-- On ASSUME reduce production newEffect -> effectDefinition
-- On ABSTRACT reduce production newEffect -> effectDefinition

State 843:
## Known stack suffix:
## MODULE
## LR(1) items:
rawDecl -> MODULE . uident EQUALS quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
rawDecl -> MODULE . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 844
-- On quident shift to state 847
-- On path(uident) shift to state 100
## Reductions:

State 844:
## Known stack suffix:
## MODULE uident
## LR(1) items:
path(uident) -> uident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
path(uident) -> uident . DOT path(uident) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
rawDecl -> MODULE uident . EQUALS quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 845
-- On DOT shift to state 71
## Reductions:
-- On VAL reduce production path(uident) -> uident
-- On UNOPTEQUALITY reduce production path(uident) -> uident
-- On UNFOLDABLE reduce production path(uident) -> uident
-- On UNFOLD reduce production path(uident) -> uident
-- On TYPE reduce production path(uident) -> uident
-- On TOTAL reduce production path(uident) -> uident
-- On SUB_EFFECT reduce production path(uident) -> uident
-- On SPLICE reduce production path(uident) -> uident
-- On REIFIABLE reduce production path(uident) -> uident
-- On REFLECTABLE reduce production path(uident) -> uident
-- On PRIVATE reduce production path(uident) -> uident
-- On PRAGMA_SET_OPTIONS reduce production path(uident) -> uident
-- On PRAGMA_RESET_OPTIONS reduce production path(uident) -> uident
-- On OPEN reduce production path(uident) -> uident
-- On OPAQUE reduce production path(uident) -> uident
-- On NOEXTRACT reduce production path(uident) -> uident
-- On NOEQUALITY reduce production path(uident) -> uident
-- On NEW_EFFECT reduce production path(uident) -> uident
-- On NEW reduce production path(uident) -> uident
-- On MODULE reduce production path(uident) -> uident
-- On LOGIC reduce production path(uident) -> uident
-- On LET reduce production path(uident) -> uident
-- On LBRACK_AT reduce production path(uident) -> uident
-- On IRREDUCIBLE reduce production path(uident) -> uident
-- On INLINE_FOR_EXTRACTION reduce production path(uident) -> uident
-- On INLINE reduce production path(uident) -> uident
-- On INCLUDE reduce production path(uident) -> uident
-- On FSDOC_STANDALONE reduce production path(uident) -> uident
-- On FSDOC reduce production path(uident) -> uident
-- On EXCEPTION reduce production path(uident) -> uident
-- On EOF reduce production path(uident) -> uident
-- On EFFECT reduce production path(uident) -> uident
-- On DEFAULT reduce production path(uident) -> uident
-- On ASSUME reduce production path(uident) -> uident
-- On ABSTRACT reduce production path(uident) -> uident

State 845:
## Known stack suffix:
## MODULE uident EQUALS
## LR(1) items:
rawDecl -> MODULE uident EQUALS . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 846
-- On path(uident) shift to state 100
## Reductions:

State 846:
## Known stack suffix:
## MODULE uident EQUALS quident
## LR(1) items:
rawDecl -> MODULE uident EQUALS quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> MODULE uident EQUALS quident
-- On UNOPTEQUALITY reduce production rawDecl -> MODULE uident EQUALS quident
-- On UNFOLDABLE reduce production rawDecl -> MODULE uident EQUALS quident
-- On UNFOLD reduce production rawDecl -> MODULE uident EQUALS quident
-- On TYPE reduce production rawDecl -> MODULE uident EQUALS quident
-- On TOTAL reduce production rawDecl -> MODULE uident EQUALS quident
-- On SUB_EFFECT reduce production rawDecl -> MODULE uident EQUALS quident
-- On SPLICE reduce production rawDecl -> MODULE uident EQUALS quident
-- On REIFIABLE reduce production rawDecl -> MODULE uident EQUALS quident
-- On REFLECTABLE reduce production rawDecl -> MODULE uident EQUALS quident
-- On PRIVATE reduce production rawDecl -> MODULE uident EQUALS quident
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> MODULE uident EQUALS quident
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> MODULE uident EQUALS quident
-- On OPEN reduce production rawDecl -> MODULE uident EQUALS quident
-- On OPAQUE reduce production rawDecl -> MODULE uident EQUALS quident
-- On NOEXTRACT reduce production rawDecl -> MODULE uident EQUALS quident
-- On NOEQUALITY reduce production rawDecl -> MODULE uident EQUALS quident
-- On NEW_EFFECT reduce production rawDecl -> MODULE uident EQUALS quident
-- On NEW reduce production rawDecl -> MODULE uident EQUALS quident
-- On MODULE reduce production rawDecl -> MODULE uident EQUALS quident
-- On LOGIC reduce production rawDecl -> MODULE uident EQUALS quident
-- On LET reduce production rawDecl -> MODULE uident EQUALS quident
-- On LBRACK_AT reduce production rawDecl -> MODULE uident EQUALS quident
-- On IRREDUCIBLE reduce production rawDecl -> MODULE uident EQUALS quident
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> MODULE uident EQUALS quident
-- On INLINE reduce production rawDecl -> MODULE uident EQUALS quident
-- On INCLUDE reduce production rawDecl -> MODULE uident EQUALS quident
-- On FSDOC_STANDALONE reduce production rawDecl -> MODULE uident EQUALS quident
-- On FSDOC reduce production rawDecl -> MODULE uident EQUALS quident
-- On EXCEPTION reduce production rawDecl -> MODULE uident EQUALS quident
-- On EOF reduce production rawDecl -> MODULE uident EQUALS quident
-- On EFFECT reduce production rawDecl -> MODULE uident EQUALS quident
-- On DEFAULT reduce production rawDecl -> MODULE uident EQUALS quident
-- On ASSUME reduce production rawDecl -> MODULE uident EQUALS quident
-- On ABSTRACT reduce production rawDecl -> MODULE uident EQUALS quident

State 847:
## Known stack suffix:
## MODULE quident
## LR(1) items:
rawDecl -> MODULE quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> MODULE quident
-- On UNOPTEQUALITY reduce production rawDecl -> MODULE quident
-- On UNFOLDABLE reduce production rawDecl -> MODULE quident
-- On UNFOLD reduce production rawDecl -> MODULE quident
-- On TYPE reduce production rawDecl -> MODULE quident
-- On TOTAL reduce production rawDecl -> MODULE quident
-- On SUB_EFFECT reduce production rawDecl -> MODULE quident
-- On SPLICE reduce production rawDecl -> MODULE quident
-- On REIFIABLE reduce production rawDecl -> MODULE quident
-- On REFLECTABLE reduce production rawDecl -> MODULE quident
-- On PRIVATE reduce production rawDecl -> MODULE quident
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> MODULE quident
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> MODULE quident
-- On OPEN reduce production rawDecl -> MODULE quident
-- On OPAQUE reduce production rawDecl -> MODULE quident
-- On NOEXTRACT reduce production rawDecl -> MODULE quident
-- On NOEQUALITY reduce production rawDecl -> MODULE quident
-- On NEW_EFFECT reduce production rawDecl -> MODULE quident
-- On NEW reduce production rawDecl -> MODULE quident
-- On MODULE reduce production rawDecl -> MODULE quident
-- On LOGIC reduce production rawDecl -> MODULE quident
-- On LET reduce production rawDecl -> MODULE quident
-- On LBRACK_AT reduce production rawDecl -> MODULE quident
-- On IRREDUCIBLE reduce production rawDecl -> MODULE quident
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> MODULE quident
-- On INLINE reduce production rawDecl -> MODULE quident
-- On INCLUDE reduce production rawDecl -> MODULE quident
-- On FSDOC_STANDALONE reduce production rawDecl -> MODULE quident
-- On FSDOC reduce production rawDecl -> MODULE quident
-- On EXCEPTION reduce production rawDecl -> MODULE quident
-- On EOF reduce production rawDecl -> MODULE quident
-- On EFFECT reduce production rawDecl -> MODULE quident
-- On DEFAULT reduce production rawDecl -> MODULE quident
-- On ASSUME reduce production rawDecl -> MODULE quident
-- On ABSTRACT reduce production rawDecl -> MODULE quident

State 848:
## Known stack suffix:
## LET
## LR(1) items:
rawDecl -> LET . letqualifier separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On REC shift to state 68
-- On MUTABLE shift to state 400
-- On letqualifier shift to state 849
## Reductions:
-- On UNDERSCORE reduce production letqualifier ->
-- On UINT8 reduce production letqualifier ->
-- On UINT64 reduce production letqualifier ->
-- On UINT32 reduce production letqualifier ->
-- On UINT16 reduce production letqualifier ->
-- On TVAR reduce production letqualifier ->
-- On TRUE reduce production letqualifier ->
-- On STRING reduce production letqualifier ->
-- On SQUIGGLY_RARROW reduce production letqualifier ->
-- On SET_RANGE_OF reduce production letqualifier ->
-- On REIFY reduce production letqualifier ->
-- On RANGE_OF reduce production letqualifier ->
-- On NAME reduce production letqualifier ->
-- On LPAREN_RPAREN reduce production letqualifier ->
-- On LPAREN reduce production letqualifier ->
-- On LENS_PAREN_LEFT reduce production letqualifier ->
-- On LBRACK reduce production letqualifier ->
-- On LBRACE reduce production letqualifier ->
-- On INT8 reduce production letqualifier ->
-- On INT64 reduce production letqualifier ->
-- On INT32 reduce production letqualifier ->
-- On INT16 reduce production letqualifier ->
-- On INT reduce production letqualifier ->
-- On IEEE64 reduce production letqualifier ->
-- On IDENT reduce production letqualifier ->
-- On HASH reduce production letqualifier ->
-- On FALSE reduce production letqualifier ->
-- On DOLLAR reduce production letqualifier ->
-- On CHAR reduce production letqualifier ->
-- On BYTEARRAY reduce production letqualifier ->

State 849:
## Known stack suffix:
## LET letqualifier
## LR(1) items:
rawDecl -> LET letqualifier . separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On separated_nonempty_list(AND,letbinding) shift to state 850
-- On maybeFocus shift to state 403
-- On letbinding shift to state 851
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On TVAR reduce production boption(SQUIGGLY_RARROW) ->
-- On TRUE reduce production boption(SQUIGGLY_RARROW) ->
-- On STRING reduce production boption(SQUIGGLY_RARROW) ->
-- On SET_RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On REIFY reduce production boption(SQUIGGLY_RARROW) ->
-- On RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On NAME reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN_RPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LENS_PAREN_LEFT reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACK reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACE reduce production boption(SQUIGGLY_RARROW) ->
-- On INT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT reduce production boption(SQUIGGLY_RARROW) ->
-- On IEEE64 reduce production boption(SQUIGGLY_RARROW) ->
-- On IDENT reduce production boption(SQUIGGLY_RARROW) ->
-- On HASH reduce production boption(SQUIGGLY_RARROW) ->
-- On FALSE reduce production boption(SQUIGGLY_RARROW) ->
-- On DOLLAR reduce production boption(SQUIGGLY_RARROW) ->
-- On CHAR reduce production boption(SQUIGGLY_RARROW) ->
-- On BYTEARRAY reduce production boption(SQUIGGLY_RARROW) ->

State 850:
## Known stack suffix:
## LET letqualifier separated_nonempty_list(AND,letbinding)
## LR(1) items:
rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On UNOPTEQUALITY reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On UNFOLDABLE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On UNFOLD reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On TYPE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On TOTAL reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On SUB_EFFECT reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On SPLICE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On REIFIABLE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On REFLECTABLE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On PRIVATE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On OPEN reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On OPAQUE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On NOEXTRACT reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On NOEQUALITY reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On NEW_EFFECT reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On NEW reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On MODULE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On LOGIC reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On LET reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On LBRACK_AT reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On IRREDUCIBLE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On INLINE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On INCLUDE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On FSDOC_STANDALONE reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On FSDOC reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On EXCEPTION reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On EOF reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On EFFECT reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On DEFAULT reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On ASSUME reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)
-- On ABSTRACT reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)

State 851:
## Known stack suffix:
## letbinding
## LR(1) items:
separated_nonempty_list(AND,letbinding) -> letbinding . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
separated_nonempty_list(AND,letbinding) -> letbinding . AND separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On AND shift to state 852
## Reductions:
-- On VAL reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On UNOPTEQUALITY reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On UNFOLDABLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On UNFOLD reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On TYPE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On TOTAL reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On SUB_EFFECT reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On SPLICE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On REIFIABLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On REFLECTABLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On PRIVATE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On PRAGMA_SET_OPTIONS reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On PRAGMA_RESET_OPTIONS reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On OPEN reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On OPAQUE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On NOEXTRACT reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On NOEQUALITY reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On NEW_EFFECT reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On NEW reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On MODULE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On LOGIC reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On LET reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On LBRACK_AT reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On IRREDUCIBLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On INLINE_FOR_EXTRACTION reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On INLINE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On INCLUDE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On FSDOC_STANDALONE reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On FSDOC reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On EXCEPTION reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On EOF reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On EFFECT reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On DEFAULT reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On ASSUME reduce production separated_nonempty_list(AND,letbinding) -> letbinding
-- On ABSTRACT reduce production separated_nonempty_list(AND,letbinding) -> letbinding

State 852:
## Known stack suffix:
## letbinding AND
## LR(1) items:
separated_nonempty_list(AND,letbinding) -> letbinding AND . separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On separated_nonempty_list(AND,letbinding) shift to state 853
-- On maybeFocus shift to state 403
-- On letbinding shift to state 851
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On UINT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On TVAR reduce production boption(SQUIGGLY_RARROW) ->
-- On TRUE reduce production boption(SQUIGGLY_RARROW) ->
-- On STRING reduce production boption(SQUIGGLY_RARROW) ->
-- On SET_RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On REIFY reduce production boption(SQUIGGLY_RARROW) ->
-- On RANGE_OF reduce production boption(SQUIGGLY_RARROW) ->
-- On NAME reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN_RPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LPAREN reduce production boption(SQUIGGLY_RARROW) ->
-- On LENS_PAREN_LEFT reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACK reduce production boption(SQUIGGLY_RARROW) ->
-- On LBRACE reduce production boption(SQUIGGLY_RARROW) ->
-- On INT8 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT64 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT32 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT16 reduce production boption(SQUIGGLY_RARROW) ->
-- On INT reduce production boption(SQUIGGLY_RARROW) ->
-- On IEEE64 reduce production boption(SQUIGGLY_RARROW) ->
-- On IDENT reduce production boption(SQUIGGLY_RARROW) ->
-- On HASH reduce production boption(SQUIGGLY_RARROW) ->
-- On FALSE reduce production boption(SQUIGGLY_RARROW) ->
-- On DOLLAR reduce production boption(SQUIGGLY_RARROW) ->
-- On CHAR reduce production boption(SQUIGGLY_RARROW) ->
-- On BYTEARRAY reduce production boption(SQUIGGLY_RARROW) ->

State 853:
## Known stack suffix:
## letbinding AND separated_nonempty_list(AND,letbinding)
## LR(1) items:
separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On UNOPTEQUALITY reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On UNFOLDABLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On UNFOLD reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On TYPE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On TOTAL reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On SUB_EFFECT reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On SPLICE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On REIFIABLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On REFLECTABLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On PRIVATE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On PRAGMA_SET_OPTIONS reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On PRAGMA_RESET_OPTIONS reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On OPEN reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On OPAQUE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On NOEXTRACT reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On NOEQUALITY reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On NEW_EFFECT reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On NEW reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On MODULE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On LOGIC reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On LET reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On LBRACK_AT reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On IRREDUCIBLE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On INLINE_FOR_EXTRACTION reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On INLINE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On INCLUDE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On FSDOC_STANDALONE reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On FSDOC reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On EXCEPTION reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On EOF reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On EFFECT reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On DEFAULT reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On ASSUME reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)
-- On ABSTRACT reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)

State 854:
## Known stack suffix:
## INCLUDE
## LR(1) items:
rawDecl -> INCLUDE . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 855
-- On path(uident) shift to state 100
## Reductions:

State 855:
## Known stack suffix:
## INCLUDE quident
## LR(1) items:
rawDecl -> INCLUDE quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> INCLUDE quident
-- On UNOPTEQUALITY reduce production rawDecl -> INCLUDE quident
-- On UNFOLDABLE reduce production rawDecl -> INCLUDE quident
-- On UNFOLD reduce production rawDecl -> INCLUDE quident
-- On TYPE reduce production rawDecl -> INCLUDE quident
-- On TOTAL reduce production rawDecl -> INCLUDE quident
-- On SUB_EFFECT reduce production rawDecl -> INCLUDE quident
-- On SPLICE reduce production rawDecl -> INCLUDE quident
-- On REIFIABLE reduce production rawDecl -> INCLUDE quident
-- On REFLECTABLE reduce production rawDecl -> INCLUDE quident
-- On PRIVATE reduce production rawDecl -> INCLUDE quident
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> INCLUDE quident
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> INCLUDE quident
-- On OPEN reduce production rawDecl -> INCLUDE quident
-- On OPAQUE reduce production rawDecl -> INCLUDE quident
-- On NOEXTRACT reduce production rawDecl -> INCLUDE quident
-- On NOEQUALITY reduce production rawDecl -> INCLUDE quident
-- On NEW_EFFECT reduce production rawDecl -> INCLUDE quident
-- On NEW reduce production rawDecl -> INCLUDE quident
-- On MODULE reduce production rawDecl -> INCLUDE quident
-- On LOGIC reduce production rawDecl -> INCLUDE quident
-- On LET reduce production rawDecl -> INCLUDE quident
-- On LBRACK_AT reduce production rawDecl -> INCLUDE quident
-- On IRREDUCIBLE reduce production rawDecl -> INCLUDE quident
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> INCLUDE quident
-- On INLINE reduce production rawDecl -> INCLUDE quident
-- On INCLUDE reduce production rawDecl -> INCLUDE quident
-- On FSDOC_STANDALONE reduce production rawDecl -> INCLUDE quident
-- On FSDOC reduce production rawDecl -> INCLUDE quident
-- On EXCEPTION reduce production rawDecl -> INCLUDE quident
-- On EOF reduce production rawDecl -> INCLUDE quident
-- On EFFECT reduce production rawDecl -> INCLUDE quident
-- On DEFAULT reduce production rawDecl -> INCLUDE quident
-- On ASSUME reduce production rawDecl -> INCLUDE quident
-- On ABSTRACT reduce production rawDecl -> INCLUDE quident

State 856:
## Known stack suffix:
## FSDOC_STANDALONE
## LR(1) items:
rawDecl -> FSDOC_STANDALONE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> FSDOC_STANDALONE
-- On UNOPTEQUALITY reduce production rawDecl -> FSDOC_STANDALONE
-- On UNFOLDABLE reduce production rawDecl -> FSDOC_STANDALONE
-- On UNFOLD reduce production rawDecl -> FSDOC_STANDALONE
-- On TYPE reduce production rawDecl -> FSDOC_STANDALONE
-- On TOTAL reduce production rawDecl -> FSDOC_STANDALONE
-- On SUB_EFFECT reduce production rawDecl -> FSDOC_STANDALONE
-- On SPLICE reduce production rawDecl -> FSDOC_STANDALONE
-- On REIFIABLE reduce production rawDecl -> FSDOC_STANDALONE
-- On REFLECTABLE reduce production rawDecl -> FSDOC_STANDALONE
-- On PRIVATE reduce production rawDecl -> FSDOC_STANDALONE
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> FSDOC_STANDALONE
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> FSDOC_STANDALONE
-- On OPEN reduce production rawDecl -> FSDOC_STANDALONE
-- On OPAQUE reduce production rawDecl -> FSDOC_STANDALONE
-- On NOEXTRACT reduce production rawDecl -> FSDOC_STANDALONE
-- On NOEQUALITY reduce production rawDecl -> FSDOC_STANDALONE
-- On NEW_EFFECT reduce production rawDecl -> FSDOC_STANDALONE
-- On NEW reduce production rawDecl -> FSDOC_STANDALONE
-- On MODULE reduce production rawDecl -> FSDOC_STANDALONE
-- On LOGIC reduce production rawDecl -> FSDOC_STANDALONE
-- On LET reduce production rawDecl -> FSDOC_STANDALONE
-- On LBRACK_AT reduce production rawDecl -> FSDOC_STANDALONE
-- On IRREDUCIBLE reduce production rawDecl -> FSDOC_STANDALONE
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> FSDOC_STANDALONE
-- On INLINE reduce production rawDecl -> FSDOC_STANDALONE
-- On INCLUDE reduce production rawDecl -> FSDOC_STANDALONE
-- On FSDOC_STANDALONE reduce production rawDecl -> FSDOC_STANDALONE
-- On FSDOC reduce production rawDecl -> FSDOC_STANDALONE
-- On EXCEPTION reduce production rawDecl -> FSDOC_STANDALONE
-- On EOF reduce production rawDecl -> FSDOC_STANDALONE
-- On EFFECT reduce production rawDecl -> FSDOC_STANDALONE
-- On DEFAULT reduce production rawDecl -> FSDOC_STANDALONE
-- On ASSUME reduce production rawDecl -> FSDOC_STANDALONE
-- On ABSTRACT reduce production rawDecl -> FSDOC_STANDALONE

State 857:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
rawDecl -> EXCEPTION . uident option(__anonymous_1) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 858
## Reductions:

State 858:
## Known stack suffix:
## EXCEPTION uident
## LR(1) items:
rawDecl -> EXCEPTION uident . option(__anonymous_1) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On OF shift to state 859
-- On option(__anonymous_1) shift to state 861
## Reductions:
-- On VAL reduce production option(__anonymous_1) ->
-- On UNOPTEQUALITY reduce production option(__anonymous_1) ->
-- On UNFOLDABLE reduce production option(__anonymous_1) ->
-- On UNFOLD reduce production option(__anonymous_1) ->
-- On TYPE reduce production option(__anonymous_1) ->
-- On TOTAL reduce production option(__anonymous_1) ->
-- On SUB_EFFECT reduce production option(__anonymous_1) ->
-- On SPLICE reduce production option(__anonymous_1) ->
-- On REIFIABLE reduce production option(__anonymous_1) ->
-- On REFLECTABLE reduce production option(__anonymous_1) ->
-- On PRIVATE reduce production option(__anonymous_1) ->
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_1) ->
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_1) ->
-- On OPEN reduce production option(__anonymous_1) ->
-- On OPAQUE reduce production option(__anonymous_1) ->
-- On NOEXTRACT reduce production option(__anonymous_1) ->
-- On NOEQUALITY reduce production option(__anonymous_1) ->
-- On NEW_EFFECT reduce production option(__anonymous_1) ->
-- On NEW reduce production option(__anonymous_1) ->
-- On MODULE reduce production option(__anonymous_1) ->
-- On LOGIC reduce production option(__anonymous_1) ->
-- On LET reduce production option(__anonymous_1) ->
-- On LBRACK_AT reduce production option(__anonymous_1) ->
-- On IRREDUCIBLE reduce production option(__anonymous_1) ->
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_1) ->
-- On INLINE reduce production option(__anonymous_1) ->
-- On INCLUDE reduce production option(__anonymous_1) ->
-- On FSDOC_STANDALONE reduce production option(__anonymous_1) ->
-- On FSDOC reduce production option(__anonymous_1) ->
-- On EXCEPTION reduce production option(__anonymous_1) ->
-- On EOF reduce production option(__anonymous_1) ->
-- On EFFECT reduce production option(__anonymous_1) ->
-- On DEFAULT reduce production option(__anonymous_1) ->
-- On ASSUME reduce production option(__anonymous_1) ->
-- On ABSTRACT reduce production option(__anonymous_1) ->

State 859:
## Known stack suffix:
## OF
## LR(1) items:
option(__anonymous_1) -> OF . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 860
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 860:
## Known stack suffix:
## OF typ
## LR(1) items:
option(__anonymous_1) -> OF typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production option(__anonymous_1) -> OF typ
-- On UNOPTEQUALITY reduce production option(__anonymous_1) -> OF typ
-- On UNFOLDABLE reduce production option(__anonymous_1) -> OF typ
-- On UNFOLD reduce production option(__anonymous_1) -> OF typ
-- On TYPE reduce production option(__anonymous_1) -> OF typ
-- On TOTAL reduce production option(__anonymous_1) -> OF typ
-- On SUB_EFFECT reduce production option(__anonymous_1) -> OF typ
-- On SPLICE reduce production option(__anonymous_1) -> OF typ
-- On REIFIABLE reduce production option(__anonymous_1) -> OF typ
-- On REFLECTABLE reduce production option(__anonymous_1) -> OF typ
-- On PRIVATE reduce production option(__anonymous_1) -> OF typ
-- On PRAGMA_SET_OPTIONS reduce production option(__anonymous_1) -> OF typ
-- On PRAGMA_RESET_OPTIONS reduce production option(__anonymous_1) -> OF typ
-- On OPEN reduce production option(__anonymous_1) -> OF typ
-- On OPAQUE reduce production option(__anonymous_1) -> OF typ
-- On NOEXTRACT reduce production option(__anonymous_1) -> OF typ
-- On NOEQUALITY reduce production option(__anonymous_1) -> OF typ
-- On NEW_EFFECT reduce production option(__anonymous_1) -> OF typ
-- On NEW reduce production option(__anonymous_1) -> OF typ
-- On MODULE reduce production option(__anonymous_1) -> OF typ
-- On LOGIC reduce production option(__anonymous_1) -> OF typ
-- On LET reduce production option(__anonymous_1) -> OF typ
-- On LBRACK_AT reduce production option(__anonymous_1) -> OF typ
-- On IRREDUCIBLE reduce production option(__anonymous_1) -> OF typ
-- On INLINE_FOR_EXTRACTION reduce production option(__anonymous_1) -> OF typ
-- On INLINE reduce production option(__anonymous_1) -> OF typ
-- On INCLUDE reduce production option(__anonymous_1) -> OF typ
-- On FSDOC_STANDALONE reduce production option(__anonymous_1) -> OF typ
-- On FSDOC reduce production option(__anonymous_1) -> OF typ
-- On EXCEPTION reduce production option(__anonymous_1) -> OF typ
-- On EOF reduce production option(__anonymous_1) -> OF typ
-- On EFFECT reduce production option(__anonymous_1) -> OF typ
-- On DEFAULT reduce production option(__anonymous_1) -> OF typ
-- On ASSUME reduce production option(__anonymous_1) -> OF typ
-- On ABSTRACT reduce production option(__anonymous_1) -> OF typ

State 861:
## Known stack suffix:
## EXCEPTION uident option(__anonymous_1)
## LR(1) items:
rawDecl -> EXCEPTION uident option(__anonymous_1) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On UNOPTEQUALITY reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On UNFOLDABLE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On UNFOLD reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On TYPE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On TOTAL reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On SUB_EFFECT reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On SPLICE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On REIFIABLE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On REFLECTABLE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On PRIVATE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On OPEN reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On OPAQUE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On NOEXTRACT reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On NOEQUALITY reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On NEW_EFFECT reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On NEW reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On MODULE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On LOGIC reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On LET reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On LBRACK_AT reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On IRREDUCIBLE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On INLINE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On INCLUDE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On FSDOC_STANDALONE reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On FSDOC reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On EXCEPTION reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On EOF reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On EFFECT reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On DEFAULT reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On ASSUME reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)
-- On ABSTRACT reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)

State 862:
## Known stack suffix:
## EFFECT
## LR(1) items:
rawDecl -> EFFECT . uident typars EQUALS typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 863
## Reductions:

State 863:
## Known stack suffix:
## EFFECT uident
## LR(1) items:
rawDecl -> EFFECT uident . typars EQUALS typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TYP_APP_LESS shift to state 743
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On typars shift to state 864
-- On tvarinsts shift to state 786
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 787
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On EQUALS reduce production list(__anonymous_4) ->

State 864:
## Known stack suffix:
## EFFECT uident typars
## LR(1) items:
rawDecl -> EFFECT uident typars . EQUALS typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 865
## Reductions:

State 865:
## Known stack suffix:
## EFFECT uident typars EQUALS
## LR(1) items:
rawDecl -> EFFECT uident typars EQUALS . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 866
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 866:
## Known stack suffix:
## EFFECT uident typars EQUALS typ
## LR(1) items:
rawDecl -> EFFECT uident typars EQUALS typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On UNOPTEQUALITY reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On UNFOLDABLE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On UNFOLD reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On TYPE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On TOTAL reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On SUB_EFFECT reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On SPLICE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On REIFIABLE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On REFLECTABLE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On PRIVATE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On OPEN reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On OPAQUE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On NOEXTRACT reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On NOEQUALITY reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On NEW_EFFECT reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On NEW reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On MODULE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On LOGIC reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On LET reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On LBRACK_AT reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On IRREDUCIBLE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On INLINE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On INCLUDE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On FSDOC_STANDALONE reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On FSDOC reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On EXCEPTION reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On EOF reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On EFFECT reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On DEFAULT reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On ASSUME reduce production rawDecl -> EFFECT uident typars EQUALS typ
-- On ABSTRACT reduce production rawDecl -> EFFECT uident typars EQUALS typ

State 867:
## Known stack suffix:
## list(decoration) rawDecl
## LR(1) items:
decl -> list(decoration) rawDecl . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production decl -> list(decoration) rawDecl
-- On UNOPTEQUALITY reduce production decl -> list(decoration) rawDecl
-- On UNFOLDABLE reduce production decl -> list(decoration) rawDecl
-- On UNFOLD reduce production decl -> list(decoration) rawDecl
-- On TYPE reduce production decl -> list(decoration) rawDecl
-- On TOTAL reduce production decl -> list(decoration) rawDecl
-- On SUB_EFFECT reduce production decl -> list(decoration) rawDecl
-- On SPLICE reduce production decl -> list(decoration) rawDecl
-- On REIFIABLE reduce production decl -> list(decoration) rawDecl
-- On REFLECTABLE reduce production decl -> list(decoration) rawDecl
-- On PRIVATE reduce production decl -> list(decoration) rawDecl
-- On PRAGMA_SET_OPTIONS reduce production decl -> list(decoration) rawDecl
-- On PRAGMA_RESET_OPTIONS reduce production decl -> list(decoration) rawDecl
-- On OPEN reduce production decl -> list(decoration) rawDecl
-- On OPAQUE reduce production decl -> list(decoration) rawDecl
-- On NOEXTRACT reduce production decl -> list(decoration) rawDecl
-- On NOEQUALITY reduce production decl -> list(decoration) rawDecl
-- On NEW_EFFECT reduce production decl -> list(decoration) rawDecl
-- On NEW reduce production decl -> list(decoration) rawDecl
-- On MODULE reduce production decl -> list(decoration) rawDecl
-- On LOGIC reduce production decl -> list(decoration) rawDecl
-- On LET reduce production decl -> list(decoration) rawDecl
-- On LBRACK_AT reduce production decl -> list(decoration) rawDecl
-- On IRREDUCIBLE reduce production decl -> list(decoration) rawDecl
-- On INLINE_FOR_EXTRACTION reduce production decl -> list(decoration) rawDecl
-- On INLINE reduce production decl -> list(decoration) rawDecl
-- On INCLUDE reduce production decl -> list(decoration) rawDecl
-- On FSDOC_STANDALONE reduce production decl -> list(decoration) rawDecl
-- On FSDOC reduce production decl -> list(decoration) rawDecl
-- On EXCEPTION reduce production decl -> list(decoration) rawDecl
-- On EOF reduce production decl -> list(decoration) rawDecl
-- On EFFECT reduce production decl -> list(decoration) rawDecl
-- On DEFAULT reduce production decl -> list(decoration) rawDecl
-- On ASSUME reduce production decl -> list(decoration) rawDecl
-- On ABSTRACT reduce production decl -> list(decoration) rawDecl

State 868:
## Known stack suffix:
## pragma
## LR(1) items:
rawDecl -> pragma . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production rawDecl -> pragma
-- On UNOPTEQUALITY reduce production rawDecl -> pragma
-- On UNFOLDABLE reduce production rawDecl -> pragma
-- On UNFOLD reduce production rawDecl -> pragma
-- On TYPE reduce production rawDecl -> pragma
-- On TOTAL reduce production rawDecl -> pragma
-- On SUB_EFFECT reduce production rawDecl -> pragma
-- On SPLICE reduce production rawDecl -> pragma
-- On REIFIABLE reduce production rawDecl -> pragma
-- On REFLECTABLE reduce production rawDecl -> pragma
-- On PRIVATE reduce production rawDecl -> pragma
-- On PRAGMA_SET_OPTIONS reduce production rawDecl -> pragma
-- On PRAGMA_RESET_OPTIONS reduce production rawDecl -> pragma
-- On OPEN reduce production rawDecl -> pragma
-- On OPAQUE reduce production rawDecl -> pragma
-- On NOEXTRACT reduce production rawDecl -> pragma
-- On NOEQUALITY reduce production rawDecl -> pragma
-- On NEW_EFFECT reduce production rawDecl -> pragma
-- On NEW reduce production rawDecl -> pragma
-- On MODULE reduce production rawDecl -> pragma
-- On LOGIC reduce production rawDecl -> pragma
-- On LET reduce production rawDecl -> pragma
-- On LBRACK_AT reduce production rawDecl -> pragma
-- On IRREDUCIBLE reduce production rawDecl -> pragma
-- On INLINE_FOR_EXTRACTION reduce production rawDecl -> pragma
-- On INLINE reduce production rawDecl -> pragma
-- On INCLUDE reduce production rawDecl -> pragma
-- On FSDOC_STANDALONE reduce production rawDecl -> pragma
-- On FSDOC reduce production rawDecl -> pragma
-- On EXCEPTION reduce production rawDecl -> pragma
-- On EOF reduce production rawDecl -> pragma
-- On EFFECT reduce production rawDecl -> pragma
-- On DEFAULT reduce production rawDecl -> pragma
-- On ASSUME reduce production rawDecl -> pragma
-- On ABSTRACT reduce production rawDecl -> pragma

State 869:
## Known stack suffix:
## boption(__anonymous_0) list(decl)
## LR(1) items:
inputFragment -> boption(__anonymous_0) list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## boption(__anonymous_0) list(decl) EOF
## LR(1) items:
inputFragment -> boption(__anonymous_0) list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production inputFragment -> boption(__anonymous_0) list(decl) EOF

State 871:
## Known stack suffix:
## decoration
## LR(1) items:
list(decoration) -> decoration . list(decoration) [ VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT ]
## Transitions:
-- On UNOPTEQUALITY shift to state 5
-- On UNFOLDABLE shift to state 6
-- On UNFOLD shift to state 7
-- On TOTAL shift to state 8
-- On REIFIABLE shift to state 9
-- On REFLECTABLE shift to state 10
-- On PRIVATE shift to state 11
-- On OPAQUE shift to state 12
-- On NOEXTRACT shift to state 13
-- On NOEQUALITY shift to state 14
-- On NEW shift to state 15
-- On LOGIC shift to state 16
-- On LBRACK_AT shift to state 17
-- On IRREDUCIBLE shift to state 685
-- On INLINE_FOR_EXTRACTION shift to state 686
-- On INLINE shift to state 687
-- On FSDOC shift to state 688
-- On DEFAULT shift to state 689
-- On ASSUME shift to state 872
-- On ABSTRACT shift to state 694
-- On qualifier shift to state 695
-- On list(decoration) shift to state 873
-- On decoration shift to state 871
-- On attribute shift to state 874
## Reductions:
-- On VAL reduce production list(decoration) ->
-- On TYPE reduce production list(decoration) ->
-- On SUB_EFFECT reduce production list(decoration) ->
-- On SPLICE reduce production list(decoration) ->
-- On PRAGMA_SET_OPTIONS reduce production list(decoration) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(decoration) ->
-- On OPEN reduce production list(decoration) ->
-- On NEW_EFFECT reduce production list(decoration) ->
-- On MODULE reduce production list(decoration) ->
-- On LET reduce production list(decoration) ->
-- On INCLUDE reduce production list(decoration) ->
-- On FSDOC_STANDALONE reduce production list(decoration) ->
-- On EXCEPTION reduce production list(decoration) ->
-- On EFFECT reduce production list(decoration) ->

State 872:
## Known stack suffix:
## ASSUME
## LR(1) items:
qualifier -> ASSUME . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production qualifier -> ASSUME
-- On UNOPTEQUALITY reduce production qualifier -> ASSUME
-- On UNFOLDABLE reduce production qualifier -> ASSUME
-- On UNFOLD reduce production qualifier -> ASSUME
-- On TYPE reduce production qualifier -> ASSUME
-- On TOTAL reduce production qualifier -> ASSUME
-- On SUB_EFFECT reduce production qualifier -> ASSUME
-- On SPLICE reduce production qualifier -> ASSUME
-- On REIFIABLE reduce production qualifier -> ASSUME
-- On REFLECTABLE reduce production qualifier -> ASSUME
-- On PRIVATE reduce production qualifier -> ASSUME
-- On PRAGMA_SET_OPTIONS reduce production qualifier -> ASSUME
-- On PRAGMA_RESET_OPTIONS reduce production qualifier -> ASSUME
-- On OPEN reduce production qualifier -> ASSUME
-- On OPAQUE reduce production qualifier -> ASSUME
-- On NOEXTRACT reduce production qualifier -> ASSUME
-- On NOEQUALITY reduce production qualifier -> ASSUME
-- On NEW_EFFECT reduce production qualifier -> ASSUME
-- On NEW reduce production qualifier -> ASSUME
-- On MODULE reduce production qualifier -> ASSUME
-- On LOGIC reduce production qualifier -> ASSUME
-- On LET reduce production qualifier -> ASSUME
-- On LBRACK_AT reduce production qualifier -> ASSUME
-- On IRREDUCIBLE reduce production qualifier -> ASSUME
-- On INLINE_FOR_EXTRACTION reduce production qualifier -> ASSUME
-- On INLINE reduce production qualifier -> ASSUME
-- On INCLUDE reduce production qualifier -> ASSUME
-- On FSDOC_STANDALONE reduce production qualifier -> ASSUME
-- On FSDOC reduce production qualifier -> ASSUME
-- On EXCEPTION reduce production qualifier -> ASSUME
-- On EFFECT reduce production qualifier -> ASSUME
-- On DEFAULT reduce production qualifier -> ASSUME
-- On ASSUME reduce production qualifier -> ASSUME
-- On ABSTRACT reduce production qualifier -> ASSUME

State 873:
## Known stack suffix:
## decoration list(decoration)
## LR(1) items:
list(decoration) -> decoration list(decoration) . [ VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT ]
## Transitions:
## Reductions:
-- On VAL reduce production list(decoration) -> decoration list(decoration)
-- On TYPE reduce production list(decoration) -> decoration list(decoration)
-- On SUB_EFFECT reduce production list(decoration) -> decoration list(decoration)
-- On SPLICE reduce production list(decoration) -> decoration list(decoration)
-- On PRAGMA_SET_OPTIONS reduce production list(decoration) -> decoration list(decoration)
-- On PRAGMA_RESET_OPTIONS reduce production list(decoration) -> decoration list(decoration)
-- On OPEN reduce production list(decoration) -> decoration list(decoration)
-- On NEW_EFFECT reduce production list(decoration) -> decoration list(decoration)
-- On MODULE reduce production list(decoration) -> decoration list(decoration)
-- On LET reduce production list(decoration) -> decoration list(decoration)
-- On INCLUDE reduce production list(decoration) -> decoration list(decoration)
-- On FSDOC_STANDALONE reduce production list(decoration) -> decoration list(decoration)
-- On EXCEPTION reduce production list(decoration) -> decoration list(decoration)
-- On EFFECT reduce production list(decoration) -> decoration list(decoration)

State 874:
## Known stack suffix:
## attribute
## LR(1) items:
decoration -> attribute . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Reductions:
-- On VAL reduce production decoration -> attribute
-- On UNOPTEQUALITY reduce production decoration -> attribute
-- On UNFOLDABLE reduce production decoration -> attribute
-- On UNFOLD reduce production decoration -> attribute
-- On TYPE reduce production decoration -> attribute
-- On TOTAL reduce production decoration -> attribute
-- On SUB_EFFECT reduce production decoration -> attribute
-- On SPLICE reduce production decoration -> attribute
-- On REIFIABLE reduce production decoration -> attribute
-- On REFLECTABLE reduce production decoration -> attribute
-- On PRIVATE reduce production decoration -> attribute
-- On PRAGMA_SET_OPTIONS reduce production decoration -> attribute
-- On PRAGMA_RESET_OPTIONS reduce production decoration -> attribute
-- On OPEN reduce production decoration -> attribute
-- On OPAQUE reduce production decoration -> attribute
-- On NOEXTRACT reduce production decoration -> attribute
-- On NOEQUALITY reduce production decoration -> attribute
-- On NEW_EFFECT reduce production decoration -> attribute
-- On NEW reduce production decoration -> attribute
-- On MODULE reduce production decoration -> attribute
-- On LOGIC reduce production decoration -> attribute
-- On LET reduce production decoration -> attribute
-- On LBRACK_AT reduce production decoration -> attribute
-- On IRREDUCIBLE reduce production decoration -> attribute
-- On INLINE_FOR_EXTRACTION reduce production decoration -> attribute
-- On INLINE reduce production decoration -> attribute
-- On INCLUDE reduce production decoration -> attribute
-- On FSDOC_STANDALONE reduce production decoration -> attribute
-- On FSDOC reduce production decoration -> attribute
-- On EXCEPTION reduce production decoration -> attribute
-- On EFFECT reduce production decoration -> attribute
-- On DEFAULT reduce production decoration -> attribute
-- On ASSUME reduce production decoration -> attribute
-- On ABSTRACT reduce production decoration -> attribute

State 875:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On UNOPTEQUALITY shift to state 5
-- On UNFOLDABLE shift to state 6
-- On UNFOLD shift to state 7
-- On TOTAL shift to state 8
-- On REIFIABLE shift to state 9
-- On REFLECTABLE shift to state 10
-- On PRIVATE shift to state 11
-- On OPAQUE shift to state 12
-- On NOEXTRACT shift to state 13
-- On NOEQUALITY shift to state 14
-- On NEW shift to state 15
-- On LOGIC shift to state 16
-- On LBRACK_AT shift to state 17
-- On IRREDUCIBLE shift to state 685
-- On INLINE_FOR_EXTRACTION shift to state 686
-- On INLINE shift to state 687
-- On FSDOC shift to state 688
-- On DEFAULT shift to state 689
-- On ASSUME shift to state 690
-- On ABSTRACT shift to state 694
-- On qualifier shift to state 695
-- On list(decoration) shift to state 696
-- On list(decl) shift to state 876
-- On decoration shift to state 871
-- On decl shift to state 875
-- On attribute shift to state 874
## Reductions:
-- On VAL reduce production list(decoration) ->
-- On TYPE reduce production list(decoration) ->
-- On SUB_EFFECT reduce production list(decoration) ->
-- On SPLICE reduce production list(decoration) ->
-- On PRAGMA_SET_OPTIONS reduce production list(decoration) ->
-- On PRAGMA_RESET_OPTIONS reduce production list(decoration) ->
-- On OPEN reduce production list(decoration) ->
-- On NEW_EFFECT reduce production list(decoration) ->
-- On MODULE reduce production list(decoration) ->
-- On LET reduce production list(decoration) ->
-- On INCLUDE reduce production list(decoration) ->
-- On FSDOC_STANDALONE reduce production list(decoration) ->
-- On EXCEPTION reduce production list(decoration) ->
-- On EOF reduce production list(decl) ->
-- On EFFECT reduce production list(decoration) ->

State 876:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production list(decl) -> decl list(decl)

State 877:
## Known stack suffix:
##
## LR(1) items:
term' -> . term [ # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 878
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 878:
## Known stack suffix:
## term
## LR(1) items:
term' -> term . [ # ]
## Transitions:
## Reductions:
-- On # accept term

State 879:
## Known stack suffix:
##
## LR(1) items:
warn_error_list' -> . warn_error_list [ # ]
## Transitions:
-- On OPINFIX2 shift to state 880
-- On OPINFIX1 shift to state 881
-- On MINUS shift to state 882
-- On warn_error_list shift to state 883
-- On warn_error shift to state 884
-- On flag shift to state 886
## Reductions:

State 880:
## Known stack suffix:
## OPINFIX2
## LR(1) items:
flag -> OPINFIX2 . [ RANGE INT ]
## Transitions:
## Reductions:
-- On RANGE reduce production flag -> OPINFIX2
-- On INT reduce production flag -> OPINFIX2

State 881:
## Known stack suffix:
## OPINFIX1
## LR(1) items:
flag -> OPINFIX1 . [ RANGE INT ]
## Transitions:
## Reductions:
-- On RANGE reduce production flag -> OPINFIX1
-- On INT reduce production flag -> OPINFIX1

State 882:
## Known stack suffix:
## MINUS
## LR(1) items:
flag -> MINUS . [ RANGE INT ]
## Transitions:
## Reductions:
-- On RANGE reduce production flag -> MINUS
-- On INT reduce production flag -> MINUS

State 883:
## Known stack suffix:
## warn_error_list
## LR(1) items:
warn_error_list' -> warn_error_list . [ # ]
## Transitions:
## Reductions:
-- On # accept warn_error_list

State 884:
## Known stack suffix:
## warn_error
## LR(1) items:
warn_error_list -> warn_error . EOF [ # ]
## Transitions:
-- On EOF shift to state 885
## Reductions:

State 885:
## Known stack suffix:
## warn_error EOF
## LR(1) items:
warn_error_list -> warn_error EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production warn_error_list -> warn_error EOF

State 886:
## Known stack suffix:
## flag
## LR(1) items:
warn_error -> flag . range [ EOF ]
warn_error -> flag . range warn_error [ EOF ]
## Transitions:
-- On RANGE shift to state 887
-- On INT shift to state 888
-- On range shift to state 889
## Reductions:

State 887:
## Known stack suffix:
## RANGE
## LR(1) items:
range -> RANGE . [ OPINFIX2 OPINFIX1 MINUS EOF ]
## Transitions:
## Reductions:
-- On OPINFIX2 reduce production range -> RANGE
-- On OPINFIX1 reduce production range -> RANGE
-- On MINUS reduce production range -> RANGE
-- On EOF reduce production range -> RANGE

State 888:
## Known stack suffix:
## INT
## LR(1) items:
range -> INT . [ OPINFIX2 OPINFIX1 MINUS EOF ]
## Transitions:
## Reductions:
-- On OPINFIX2 reduce production range -> INT
-- On OPINFIX1 reduce production range -> INT
-- On MINUS reduce production range -> INT
-- On EOF reduce production range -> INT

State 889:
## Known stack suffix:
## flag range
## LR(1) items:
warn_error -> flag range . [ EOF ]
warn_error -> flag range . warn_error [ EOF ]
## Transitions:
-- On OPINFIX2 shift to state 880
-- On OPINFIX1 shift to state 881
-- On MINUS shift to state 882
-- On warn_error shift to state 890
-- On flag shift to state 886
## Reductions:
-- On EOF reduce production warn_error -> flag range

State 890:
## Known stack suffix:
## flag range warn_error
## LR(1) items:
warn_error -> flag range warn_error . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production warn_error -> flag range warn_error

