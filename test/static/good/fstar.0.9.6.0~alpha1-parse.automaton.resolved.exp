State 0:
## Known stack suffix:
##
## LR(1) items:
inputFragment' -> . inputFragment [ # ]
## Transitions:
-- On PRAGMALIGHT shift to state 1
-- On inputFragment shift to state 3
-- On boption(__anonymous_0) shift to state 4
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
--   reduce production boption(__anonymous_0) ->

State 1:
## Known stack suffix:
## PRAGMALIGHT
## LR(1) items:
boption(__anonymous_0) -> PRAGMALIGHT . STRING [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On STRING shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## PRAGMALIGHT STRING
## LR(1) items:
boption(__anonymous_0) -> PRAGMALIGHT STRING . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boption(__anonymous_0) -> PRAGMALIGHT STRING

State 3:
## Known stack suffix:
## inputFragment
## LR(1) items:
inputFragment' -> inputFragment . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept inputFragment

State 4:
## Known stack suffix:
## boption(__anonymous_0)
## LR(1) items:
inputFragment -> boption(__anonymous_0) . list(decl) EOF [ # ]
## Transitions:
-- On UNOPTEQUALITY shift to state 5
-- On UNFOLDABLE shift to state 6
-- On UNFOLD shift to state 7
-- On TOTAL shift to state 8
-- On REIFIABLE shift to state 9
-- On REFLECTABLE shift to state 10
-- On PRIVATE shift to state 11
-- On OPAQUE shift to state 12
-- On NOEXTRACT shift to state 13
-- On NOEQUALITY shift to state 14
-- On NEW shift to state 15
-- On LOGIC shift to state 16
-- On LBRACK_AT shift to state 17
-- On IRREDUCIBLE shift to state 685
-- On INLINE_FOR_EXTRACTION shift to state 686
-- On INLINE shift to state 687
-- On FSDOC shift to state 688
-- On DEFAULT shift to state 689
-- On ASSUME shift to state 690
-- On ABSTRACT shift to state 694
-- On qualifier shift to state 695
-- On list(decoration) shift to state 696
-- On list(decl) shift to state 869
-- On decoration shift to state 871
-- On decl shift to state 875
-- On attribute shift to state 874
## Reductions:
-- On EOF
--   reduce production list(decl) ->
-- On VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT
--   reduce production list(decoration) ->

State 5:
## Known stack suffix:
## UNOPTEQUALITY
## LR(1) items:
qualifier -> UNOPTEQUALITY . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> UNOPTEQUALITY

State 6:
## Known stack suffix:
## UNFOLDABLE
## LR(1) items:
qualifier -> UNFOLDABLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> UNFOLDABLE

State 7:
## Known stack suffix:
## UNFOLD
## LR(1) items:
qualifier -> UNFOLD . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> UNFOLD

State 8:
## Known stack suffix:
## TOTAL
## LR(1) items:
qualifier -> TOTAL . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> TOTAL

State 9:
## Known stack suffix:
## REIFIABLE
## LR(1) items:
qualifier -> REIFIABLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> REIFIABLE

State 10:
## Known stack suffix:
## REFLECTABLE
## LR(1) items:
qualifier -> REFLECTABLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> REFLECTABLE

State 11:
## Known stack suffix:
## PRIVATE
## LR(1) items:
qualifier -> PRIVATE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> PRIVATE

State 12:
## Known stack suffix:
## OPAQUE
## LR(1) items:
qualifier -> OPAQUE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> OPAQUE

State 13:
## Known stack suffix:
## NOEXTRACT
## LR(1) items:
qualifier -> NOEXTRACT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> NOEXTRACT

State 14:
## Known stack suffix:
## NOEQUALITY
## LR(1) items:
qualifier -> NOEQUALITY . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> NOEQUALITY

State 15:
## Known stack suffix:
## NEW
## LR(1) items:
qualifier -> NEW . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> NEW

State 16:
## Known stack suffix:
## LOGIC
## LR(1) items:
qualifier -> LOGIC . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> LOGIC

State 17:
## Known stack suffix:
## LBRACK_AT
## LR(1) items:
attribute -> LBRACK_AT . list(atomicTerm) RBRACK [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(atomicTerm) shift to state 681
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 683
## Reductions:
-- On RBRACK
--   reduce production list(atomicTerm) ->

State 18:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicTermNotQUident -> UNDERSCORE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> UNDERSCORE

State 19:
## Known stack suffix:
## UINT8
## LR(1) items:
constant -> UINT8 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UINT8

State 20:
## Known stack suffix:
## UINT64
## LR(1) items:
constant -> UINT64 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UINT64

State 21:
## Known stack suffix:
## UINT32
## LR(1) items:
constant -> UINT32 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UINT32

State 22:
## Known stack suffix:
## UINT16
## LR(1) items:
constant -> UINT16 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UINT16

State 23:
## Known stack suffix:
## TVAR
## LR(1) items:
tvar -> TVAR . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tvar -> TVAR

State 24:
## Known stack suffix:
## TRUE
## LR(1) items:
constant -> TRUE . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TRUE

State 25:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRING

State 26:
## Known stack suffix:
## SET_RANGE_OF
## LR(1) items:
constant -> SET_RANGE_OF . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> SET_RANGE_OF

State 27:
## Known stack suffix:
## REIFY
## LR(1) items:
constant -> REIFY . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> REIFY

State 28:
## Known stack suffix:
## RANGE_OF
## LR(1) items:
constant -> RANGE_OF . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> RANGE_OF

State 29:
## Known stack suffix:
## PERCENT_LBRACK
## LR(1) items:
projectionLHS -> PERCENT_LBRACK . right_flexible_list(SEMICOLON,noSeqTerm) RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 679
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On RBRACK
--   reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 30:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicTermNotQUident -> UNDERSCORE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
lidentOrUnderscore -> UNDERSCORE . [ LONG_LEFT_ARROW COLON ]
## Transitions:
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production atomicTermNotQUident -> UNDERSCORE
-- On LONG_LEFT_ARROW COLON
--   reduce production lidentOrUnderscore -> UNDERSCORE

State 31:
## Known stack suffix:
## TRY
## LR(1) items:
noSeqTerm -> TRY . term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 676
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 32:
## Known stack suffix:
## TILDE
## LR(1) items:
tmNoEqWith(tmRefinement) -> TILDE . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 675
## Reductions:

State 33:
## Known stack suffix:
## OPPREFIX
## LR(1) items:
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX . atomicTermNotQUident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
opPrefixTerm(atomicTermQUident) -> OPPREFIX . atomicTermQUident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 34
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 645
-- On atomicTermNotQUident shift to state 646
## Reductions:

State 34:
## Known stack suffix:
## OPPREFIX
## LR(1) items:
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX . atomicTermNotQUident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 34
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 674
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermNotQUident shift to state 646
## Reductions:

State 35:
## Known stack suffix:
## NAME
## LR(1) items:
uident -> NAME . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE OF NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uident -> NAME

State 36:
## Known stack suffix:
## LPAREN_RPAREN
## LR(1) items:
constant -> LPAREN_RPAREN . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> LPAREN_RPAREN

State 37:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN . OPPREFIX RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX3 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX4 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0a RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0b RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0c RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0d RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX1 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX2 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . PIPE_RIGHT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_EQUALS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_COLON RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> LPAREN . term option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PIPE_RIGHT shift to state 48
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OP_MIXFIX_ASSIGNMENT shift to state 50
-- On OP_MIXFIX_ACCESS shift to state 52
-- On OPPREFIX shift to state 54
-- On OPINFIX4 shift to state 484
-- On OPINFIX3 shift to state 486
-- On OPINFIX2 shift to state 488
-- On OPINFIX1 shift to state 490
-- On OPINFIX0d shift to state 492
-- On OPINFIX0c shift to state 494
-- On OPINFIX0b shift to state 496
-- On OPINFIX0a shift to state 498
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 500
-- On COLON_COLON shift to state 502
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 504
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 38:
## Known stack suffix:
## SYNTH
## LR(1) items:
noSeqTerm -> SYNTH . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 673
## Reductions:

State 39:
## Known stack suffix:
## LENS_PAREN_LEFT
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT . tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 669
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 40:
## Known stack suffix:
## QUOTE
## LR(1) items:
tmEqWith(tmRefinement) -> QUOTE . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 668
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 41:
## Known stack suffix:
## PERC_BACKTICK
## LR(1) items:
tmNoEqWith(tmRefinement) -> PERC_BACKTICK . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 667
## Reductions:

State 42:
## Known stack suffix:
## LBRACK_BAR
## LR(1) items:
projectionLHS -> LBRACK_BAR . right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 665
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On BAR_RBRACK
--   reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 43:
## Known stack suffix:
## REQUIRES
## LR(1) items:
noSeqTerm -> REQUIRES . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 664
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 44:
## Known stack suffix:
## MINUS
## LR(1) items:
tmEqWith(tmRefinement) -> MINUS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 663
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 45:
## Known stack suffix:
## LBRACK
## LR(1) items:
projectionLHS -> LBRACK . right_flexible_list(SEMICOLON,noSeqTerm) RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 658
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On RBRACK
--   reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 46:
## Known stack suffix:
## MATCH
## LR(1) items:
noSeqTerm -> MATCH . term WITH reverse_left_flexible_list(BAR,__anonymous_7) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 652
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 47:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN . OPPREFIX RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX3 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX4 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0a RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0b RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0c RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX0d RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX1 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OPINFIX2 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . PIPE_RIGHT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_EQUALS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . COLON_COLON RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> LPAREN . term option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
tmArrow(tmFormula) -> LPAREN . aqual tmFormula RPAREN RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PIPE_RIGHT shift to state 48
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OP_MIXFIX_ASSIGNMENT shift to state 50
-- On OP_MIXFIX_ACCESS shift to state 52
-- On OPPREFIX shift to state 54
-- On OPINFIX4 shift to state 484
-- On OPINFIX3 shift to state 486
-- On OPINFIX2 shift to state 488
-- On OPINFIX1 shift to state 490
-- On OPINFIX0d shift to state 492
-- On OPINFIX0c shift to state 494
-- On OPINFIX0b shift to state 496
-- On OPINFIX0a shift to state 498
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 500
-- On COLON_COLON shift to state 502
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 504
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 647
-- On appTerm shift to state 320
## Reductions:

State 48:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
atomicTermNotQUident -> LPAREN PIPE_RIGHT . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN PIPE_RIGHT RPAREN

State 50:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN

State 52:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OP_MIXFIX_ACCESS RPAREN

State 54:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
atomicTermNotQUident -> LPAREN OPPREFIX . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX . atomicTermNotQUident [ UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE SUBTYPE SUBKIND STRING SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY RARROW RANGE_OF PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IMPLIES IFF IEEE64 IDENT HASH FALSE EQUALS DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK AMP ]
opPrefixTerm(atomicTermQUident) -> OPPREFIX . atomicTermQUident [ UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE SUBTYPE SUBKIND STRING SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY RARROW RANGE_OF PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IMPLIES IFF IEEE64 IDENT HASH FALSE EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On RPAREN shift to state 55
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 34
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 645
-- On atomicTermNotQUident shift to state 646
## Reductions:

State 55:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPPREFIX RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPPREFIX RPAREN

State 56:
## Known stack suffix:
## INT8
## LR(1) items:
constant -> INT8 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT8

State 57:
## Known stack suffix:
## INT64
## LR(1) items:
constant -> INT64 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT64

State 58:
## Known stack suffix:
## INT32
## LR(1) items:
constant -> INT32 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT32

State 59:
## Known stack suffix:
## INT16
## LR(1) items:
constant -> INT16 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT16

State 60:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT

State 61:
## Known stack suffix:
## IEEE64
## LR(1) items:
constant -> IEEE64 . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> IEEE64

State 62:
## Known stack suffix:
## IDENT
## LR(1) items:
lident -> IDENT . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lident -> IDENT

State 63:
## Known stack suffix:
## FALSE
## LR(1) items:
constant -> FALSE . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FALSE

State 64:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHAR

State 65:
## Known stack suffix:
## BYTEARRAY
## LR(1) items:
constant -> BYTEARRAY . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> BYTEARRAY

State 66:
## Known stack suffix:
## BEGIN
## LR(1) items:
atomicTermNotQUident -> BEGIN . term END [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 643
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 67:
## Known stack suffix:
## LET
## LR(1) items:
noSeqTerm -> LET . OPEN quident IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> LET . letqualifier letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On REC shift to state 68
-- On OPEN shift to state 69
-- On MUTABLE shift to state 400
-- On letqualifier shift to state 638
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production letqualifier ->

State 68:
## Known stack suffix:
## REC
## LR(1) items:
letqualifier -> REC . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letqualifier -> REC

State 69:
## Known stack suffix:
## LET OPEN
## LR(1) items:
noSeqTerm -> LET OPEN . quident IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 73
-- On path(uident) shift to state 100
## Reductions:

State 70:
## Known stack suffix:
## uident
## LR(1) items:
path(uident) -> uident . [ WHEN VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ABSTRACT ]
path(uident) -> uident . DOT path(uident) [ WHEN VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ABSTRACT ]
## Transitions:
-- On DOT shift to state 71
## Reductions:
-- On WHEN VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ABSTRACT
--   reduce production path(uident) -> uident

State 71:
## Known stack suffix:
## uident DOT
## LR(1) items:
path(uident) -> uident DOT . path(uident) [ WHEN VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On path(uident) shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## uident DOT path(uident)
## LR(1) items:
path(uident) -> uident DOT path(uident) . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production path(uident) -> uident DOT path(uident)

State 73:
## Known stack suffix:
## LET OPEN quident
## LR(1) items:
noSeqTerm -> LET OPEN quident . IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IN shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## LET OPEN quident IN
## LR(1) items:
noSeqTerm -> LET OPEN quident IN . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 637
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 75:
## Known stack suffix:
## LBRACE
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE . recordExp RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 590
-- On recordExp shift to state 635
-- On quident shift to state 83
-- On qlident shift to state 593
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 594
## Reductions:

State 76:
## Known stack suffix:
## BANG_LBRACE
## LR(1) items:
projectionLHS -> BANG_LBRACE . loption(separated_nonempty_list(COMMA,appTerm)) RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,appTerm) shift to state 82
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On loption(separated_nonempty_list(COMMA,appTerm)) shift to state 630
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 632
## Reductions:
-- On RBRACE
--   reduce production loption(separated_nonempty_list(COMMA,appTerm)) ->

State 77:
## Known stack suffix:
## uident
## LR(1) items:
path(lident) -> uident . DOT path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
path(uident) -> uident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
path(uident) -> uident . DOT path(uident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 78
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production path(uident) -> uident

State 78:
## Known stack suffix:
## uident DOT
## LR(1) items:
path(lident) -> uident DOT . path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
path(uident) -> uident DOT . path(uident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 77
-- On path(uident) shift to state 72
-- On path(lident) shift to state 79
-- On lident shift to state 80
## Reductions:

State 79:
## Known stack suffix:
## uident DOT path(lident)
## LR(1) items:
path(lident) -> uident DOT path(lident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production path(lident) -> uident DOT path(lident)

State 80:
## Known stack suffix:
## lident
## LR(1) items:
path(lident) -> lident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production path(lident) -> lident

State 81:
## Known stack suffix:
## tvar
## LR(1) items:
atomicTermNotQUident -> tvar . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> tvar

State 82:
## Known stack suffix:
## separated_nonempty_list(COMMA,appTerm)
## LR(1) items:
loption(separated_nonempty_list(COMMA,appTerm)) -> separated_nonempty_list(COMMA,appTerm) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,appTerm)) -> separated_nonempty_list(COMMA,appTerm)

State 83:
## Known stack suffix:
## quident
## LR(1) items:
atomicTermQUident -> quident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
atomicTermQUident -> quident . DOT_LPAREN term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> quident . QMARK_DOT lident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> quident . QMARK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident . some(fsTypeArgs) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On QMARK_DOT shift to state 109
-- On QMARK shift to state 111
-- On DOT_LPAREN shift to state 112
-- On some(fsTypeArgs) shift to state 628
-- On fsTypeArgs shift to state 629
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production atomicTermQUident -> quident

State 84:
## Known stack suffix:
## TYP_APP_LESS
## LR(1) items:
fsTypeArgs -> TYP_APP_LESS . separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,atomicTerm) shift to state 85
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 106
## Reductions:

State 85:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm)
## LR(1) items:
fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) . TYP_APP_GREATER [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_GREATER shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER
## LR(1) items:
fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fsTypeArgs -> TYP_APP_LESS separated_nonempty_list(COMMA,atomicTerm) TYP_APP_GREATER

State 87:
## Known stack suffix:
## qlident
## LR(1) items:
qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident . option(fsTypeArgs) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On option(fsTypeArgs) shift to state 88
-- On fsTypeArgs shift to state 89
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production option(fsTypeArgs) ->

State 88:
## Known stack suffix:
## qlident option(fsTypeArgs)
## LR(1) items:
qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident option(fsTypeArgs)

State 89:
## Known stack suffix:
## fsTypeArgs
## LR(1) items:
option(fsTypeArgs) -> fsTypeArgs . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(fsTypeArgs) -> fsTypeArgs

State 90:
## Known stack suffix:
## qidentWithTypeArgs(quident,some(fsTypeArgs))
## LR(1) items:
projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs)) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> qidentWithTypeArgs(quident,some(fsTypeArgs))

State 91:
## Known stack suffix:
## qidentWithTypeArgs(qlident,option(fsTypeArgs))
## LR(1) items:
projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs)) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> qidentWithTypeArgs(qlident,option(fsTypeArgs))

State 92:
## Known stack suffix:
## projectionLHS
## LR(1) items:
atomicTermNotQUident -> projectionLHS . list(__anonymous_10) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 93
-- On list(__anonymous_10) shift to state 99
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production list(__anonymous_10) ->

State 93:
## Known stack suffix:
## DOT
## LR(1) items:
list(__anonymous_10) -> DOT . qlident list(__anonymous_10) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On qlident shift to state 96
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 94:
## Known stack suffix:
## uident
## LR(1) items:
path(lident) -> uident . DOT path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## uident DOT
## LR(1) items:
path(lident) -> uident DOT . path(lident) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On path(lident) shift to state 79
-- On lident shift to state 80
## Reductions:

State 96:
## Known stack suffix:
## DOT qlident
## LR(1) items:
list(__anonymous_10) -> DOT qlident . list(__anonymous_10) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT shift to state 93
-- On list(__anonymous_10) shift to state 97
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production list(__anonymous_10) ->

State 97:
## Known stack suffix:
## DOT qlident list(__anonymous_10)
## LR(1) items:
list(__anonymous_10) -> DOT qlident list(__anonymous_10) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(__anonymous_10) -> DOT qlident list(__anonymous_10)

State 98:
## Known stack suffix:
## path(lident)
## LR(1) items:
qlident -> path(lident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qlident -> path(lident)

State 99:
## Known stack suffix:
## projectionLHS list(__anonymous_10)
## LR(1) items:
atomicTermNotQUident -> projectionLHS list(__anonymous_10) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> projectionLHS list(__anonymous_10)

State 100:
## Known stack suffix:
## path(uident)
## LR(1) items:
quident -> path(uident) . [ WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quident -> path(uident)

State 101:
## Known stack suffix:
## opPrefixTerm(atomicTermQUident)
## LR(1) items:
atomicTerm -> opPrefixTerm(atomicTermQUident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTerm -> opPrefixTerm(atomicTermQUident)

State 102:
## Known stack suffix:
## opPrefixTerm(atomicTermNotQUident)
## LR(1) items:
atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> opPrefixTerm(atomicTermNotQUident)

State 103:
## Known stack suffix:
## constant
## LR(1) items:
atomicTermNotQUident -> constant . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> constant

State 104:
## Known stack suffix:
## atomicTermQUident
## LR(1) items:
atomicTerm -> atomicTermQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTerm -> atomicTermQUident

State 105:
## Known stack suffix:
## atomicTermNotQUident
## LR(1) items:
atomicTerm -> atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTerm -> atomicTermNotQUident

State 106:
## Known stack suffix:
## atomicTerm
## LR(1) items:
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm . [ TYP_APP_GREATER ]
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm . COMMA separated_nonempty_list(COMMA,atomicTerm) [ TYP_APP_GREATER ]
## Transitions:
-- On COMMA shift to state 107
## Reductions:
-- On TYP_APP_GREATER
--   reduce production separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm

State 107:
## Known stack suffix:
## atomicTerm COMMA
## LR(1) items:
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm COMMA . separated_nonempty_list(COMMA,atomicTerm) [ TYP_APP_GREATER ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,atomicTerm) shift to state 108
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 106
## Reductions:

State 108:
## Known stack suffix:
## atomicTerm COMMA separated_nonempty_list(COMMA,atomicTerm)
## LR(1) items:
separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm COMMA separated_nonempty_list(COMMA,atomicTerm) . [ TYP_APP_GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,atomicTerm) -> atomicTerm COMMA separated_nonempty_list(COMMA,atomicTerm)

State 109:
## Known stack suffix:
## quident QMARK_DOT
## LR(1) items:
projectionLHS -> quident QMARK_DOT . lident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On IDENT shift to state 62
-- On lident shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## quident QMARK_DOT lident
## LR(1) items:
projectionLHS -> quident QMARK_DOT lident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> quident QMARK_DOT lident

State 111:
## Known stack suffix:
## quident QMARK
## LR(1) items:
projectionLHS -> quident QMARK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> quident QMARK

State 112:
## Known stack suffix:
## quident DOT_LPAREN
## LR(1) items:
atomicTermQUident -> quident DOT_LPAREN . term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 626
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 113:
## Known stack suffix:
## IF
## LR(1) items:
noSeqTerm -> IF . noSeqTerm THEN noSeqTerm ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF . noSeqTerm THEN noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 621
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 114:
## Known stack suffix:
## IDENT
## LR(1) items:
lident -> IDENT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
lidentOrUnderscore -> IDENT . [ LONG_LEFT_ARROW COLON ]
## Transitions:
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production lident -> IDENT
-- On LONG_LEFT_ARROW COLON
--   reduce production lidentOrUnderscore -> IDENT

State 115:
## Known stack suffix:
## HASH
## LR(1) items:
aqualUniverses -> HASH . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqualUniverses -> HASH

State 116:
## Known stack suffix:
## FUNCTION
## LR(1) items:
noSeqTerm -> FUNCTION . reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BAR shift to state 602
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On reverse_left_flexible_nonempty_list(BAR,patternBranch) shift to state 617
-- On quident shift to state 156
-- On patternBranch shift to state 620
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 117:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicPattern -> UNDERSCORE . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> UNDERSCORE

State 118:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicPattern -> LPAREN . tuplePattern COLON simpleArrow refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . tuplePattern RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPPREFIX RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX3 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX4 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0a RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0b RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0c RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX0d RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX1 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OPINFIX2 RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . PIPE_RIGHT RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . COLON_EQUALS RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . COLON_COLON RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PIPE_RIGHT shift to state 119
-- On OP_MIXFIX_ASSIGNMENT shift to state 121
-- On OP_MIXFIX_ACCESS shift to state 123
-- On OPPREFIX shift to state 125
-- On OPINFIX4 shift to state 127
-- On OPINFIX3 shift to state 129
-- On OPINFIX2 shift to state 131
-- On OPINFIX1 shift to state 133
-- On OPINFIX0d shift to state 135
-- On OPINFIX0c shift to state 137
-- On OPINFIX0b shift to state 139
-- On OPINFIX0a shift to state 141
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 185
-- On COLON_COLON shift to state 187
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 189
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 119:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN

State 121:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN

State 123:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN

State 125:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPPREFIX RPAREN

State 127:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN

State 129:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN

State 131:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN

State 133:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN

State 135:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN

State 137:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN

State 139:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN

State 141:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN

State 143:
## Known stack suffix:
## LENS_PAREN_LEFT
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT . constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 181
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 144:
## Known stack suffix:
## LBRACK
## LR(1) items:
atomicPattern -> LBRACK . loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 175
-- On separated_nonempty_list(SEMICOLON,tuplePattern) shift to state 178
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On loption(separated_nonempty_list(SEMICOLON,tuplePattern)) shift to state 179
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On RBRACK
--   reduce production loption(separated_nonempty_list(SEMICOLON,tuplePattern)) ->

State 145:
## Known stack suffix:
## LBRACE
## LR(1) items:
atomicPattern -> LBRACE . separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On separated_nonempty_list(SEMICOLON,fieldPattern) shift to state 146
-- On qlident shift to state 148
-- On path(lident) shift to state 98
-- On lident shift to state 80
-- On fieldPattern shift to state 172
## Reductions:

State 146:
## Known stack suffix:
## LBRACE separated_nonempty_list(SEMICOLON,fieldPattern)
## LR(1) items:
atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) . RBRACE [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RBRACE shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE
## LR(1) items:
atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE

State 148:
## Known stack suffix:
## qlident
## LR(1) items:
fieldPattern -> qlident . EQUALS tuplePattern [ SEMICOLON RBRACE ]
fieldPattern -> qlident . [ SEMICOLON RBRACE ]
## Transitions:
-- On EQUALS shift to state 149
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production fieldPattern -> qlident

State 149:
## Known stack suffix:
## qlident EQUALS
## LR(1) items:
fieldPattern -> qlident EQUALS . tuplePattern [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 154
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 150:
## Known stack suffix:
## HASH
## LR(1) items:
aqualUniverses -> HASH . [ IDENT ]
atomicPattern -> HASH . UNDERSCORE [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 151
## Reductions:
-- On IDENT
--   reduce production aqualUniverses -> HASH

State 151:
## Known stack suffix:
## HASH UNDERSCORE
## LR(1) items:
atomicPattern -> HASH UNDERSCORE . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> HASH UNDERSCORE

State 152:
## Known stack suffix:
## DOLLAR
## LR(1) items:
aqualUniverses -> DOLLAR . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqualUniverses -> DOLLAR

State 153:
## Known stack suffix:
## tvar
## LR(1) items:
atomicPattern -> tvar . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> tvar

State 154:
## Known stack suffix:
## qlident EQUALS tuplePattern
## LR(1) items:
fieldPattern -> qlident EQUALS tuplePattern . [ SEMICOLON RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldPattern -> qlident EQUALS tuplePattern

State 155:
## Known stack suffix:
## separated_nonempty_list(COMMA,constructorPattern)
## LR(1) items:
tuplePattern -> separated_nonempty_list(COMMA,constructorPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW EQUALS COLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tuplePattern -> separated_nonempty_list(COMMA,constructorPattern)

State 156:
## Known stack suffix:
## quident
## LR(1) items:
atomicPattern -> quident . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
constructorPattern -> quident . nonempty_list(atomicPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On path(uident) shift to state 100
-- On nonempty_list(atomicPattern) shift to state 158
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 161
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR
--   reduce production atomicPattern -> quident

State 157:
## Known stack suffix:
## quident
## LR(1) items:
atomicPattern -> quident . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> quident

State 158:
## Known stack suffix:
## quident nonempty_list(atomicPattern)
## LR(1) items:
constructorPattern -> quident nonempty_list(atomicPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructorPattern -> quident nonempty_list(atomicPattern)

State 159:
## Known stack suffix:
## lident
## LR(1) items:
aqualified(lident) -> lident . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqualified(lident) -> lident

State 160:
## Known stack suffix:
## constant
## LR(1) items:
atomicPattern -> constant . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> constant

State 161:
## Known stack suffix:
## atomicPattern
## LR(1) items:
nonempty_list(atomicPattern) -> atomicPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
nonempty_list(atomicPattern) -> atomicPattern . nonempty_list(atomicPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On path(uident) shift to state 100
-- On nonempty_list(atomicPattern) shift to state 162
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 161
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR
--   reduce production nonempty_list(atomicPattern) -> atomicPattern

State 162:
## Known stack suffix:
## atomicPattern nonempty_list(atomicPattern)
## LR(1) items:
nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(atomicPattern) -> atomicPattern nonempty_list(atomicPattern)

State 163:
## Known stack suffix:
## aqualified(lident)
## LR(1) items:
atomicPattern -> aqualified(lident) . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> aqualified(lident)

State 164:
## Known stack suffix:
## aqualUniverses
## LR(1) items:
aqualified(lident) -> aqualUniverses . lident [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On IDENT shift to state 62
-- On lident shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## aqualUniverses lident
## LR(1) items:
aqualified(lident) -> aqualUniverses lident . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqualified(lident) -> aqualUniverses lident

State 166:
## Known stack suffix:
## constructorPattern
## LR(1) items:
constructorPattern -> constructorPattern . COLON_COLON constructorPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern . COMMA separated_nonempty_list(COMMA,constructorPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
## Transitions:
-- On COMMA shift to state 167
-- On COLON_COLON shift to state 170
## Reductions:
-- On WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR
--   reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern

State 167:
## Known stack suffix:
## constructorPattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA . separated_nonempty_list(COMMA,constructorPattern) [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 168
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 168:
## Known stack suffix:
## constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
## LR(1) items:
separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,constructorPattern) -> constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)

State 169:
## Known stack suffix:
## atomicPattern
## LR(1) items:
constructorPattern -> atomicPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructorPattern -> atomicPattern

State 170:
## Known stack suffix:
## constructorPattern COLON_COLON
## LR(1) items:
constructorPattern -> constructorPattern COLON_COLON . constructorPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 171
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 171:
## Known stack suffix:
## constructorPattern COLON_COLON constructorPattern
## LR(1) items:
constructorPattern -> constructorPattern . COLON_COLON constructorPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
constructorPattern -> constructorPattern COLON_COLON constructorPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
## Transitions:
-- On COLON_COLON shift to state 170
## Reductions:
-- On WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR
--   reduce production constructorPattern -> constructorPattern COLON_COLON constructorPattern

State 172:
## Known stack suffix:
## fieldPattern
## LR(1) items:
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern . [ RBRACE ]
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern . SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 173
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern

State 173:
## Known stack suffix:
## fieldPattern SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern SEMICOLON . separated_nonempty_list(SEMICOLON,fieldPattern) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On separated_nonempty_list(SEMICOLON,fieldPattern) shift to state 174
-- On qlident shift to state 148
-- On path(lident) shift to state 98
-- On lident shift to state 80
-- On fieldPattern shift to state 172
## Reductions:

State 174:
## Known stack suffix:
## fieldPattern SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern)
## LR(1) items:
separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,fieldPattern) -> fieldPattern SEMICOLON separated_nonempty_list(SEMICOLON,fieldPattern)

State 175:
## Known stack suffix:
## tuplePattern
## LR(1) items:
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern . [ RBRACK ]
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern . SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern) [ RBRACK ]
## Transitions:
-- On SEMICOLON shift to state 176
## Reductions:
-- On RBRACK
--   reduce production separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern

State 176:
## Known stack suffix:
## tuplePattern SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern SEMICOLON . separated_nonempty_list(SEMICOLON,tuplePattern) [ RBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 175
-- On separated_nonempty_list(SEMICOLON,tuplePattern) shift to state 177
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 177:
## Known stack suffix:
## tuplePattern SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern)
## LR(1) items:
separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,tuplePattern) -> tuplePattern SEMICOLON separated_nonempty_list(SEMICOLON,tuplePattern)

State 178:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,tuplePattern)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,tuplePattern)) -> separated_nonempty_list(SEMICOLON,tuplePattern) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(SEMICOLON,tuplePattern)) -> separated_nonempty_list(SEMICOLON,tuplePattern)

State 179:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern))
## LR(1) items:
atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) . RBRACK [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RBRACK shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK
## LR(1) items:
atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LBRACK loption(separated_nonempty_list(SEMICOLON,tuplePattern)) RBRACK

State 181:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern . COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
constructorPattern -> constructorPattern . COLON_COLON constructorPattern [ COMMA COLON_COLON ]
## Transitions:
-- On COMMA shift to state 182
-- On COLON_COLON shift to state 170
## Reductions:

State 182:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern COMMA
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA . separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 183
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 183:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern)
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) . LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT
## LR(1) items:
atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LENS_PAREN_LEFT constructorPattern COMMA separated_nonempty_list(COMMA,constructorPattern) LENS_PAREN_RIGHT

State 185:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN

State 187:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN COLON_COLON RPAREN

State 189:
## Known stack suffix:
## LPAREN tuplePattern
## LR(1) items:
atomicPattern -> LPAREN tuplePattern . COLON simpleArrow refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
atomicPattern -> LPAREN tuplePattern . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 190
-- On COLON shift to state 191
## Reductions:

State 190:
## Known stack suffix:
## LPAREN tuplePattern RPAREN
## LR(1) items:
atomicPattern -> LPAREN tuplePattern RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN tuplePattern RPAREN

State 191:
## Known stack suffix:
## LPAREN tuplePattern COLON
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON . simpleArrow refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 599
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 192:
## Known stack suffix:
## TILDE
## LR(1) items:
tmNoEqWith(appTerm) -> TILDE . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## TILDE atomicTerm
## LR(1) items:
tmNoEqWith(appTerm) -> TILDE atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(appTerm) -> TILDE atomicTerm

State 194:
## Known stack suffix:
## QUOTE
## LR(1) items:
tmEqWith(appTerm) -> QUOTE . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 598
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 195:
## Known stack suffix:
## PERC_BACKTICK
## LR(1) items:
tmNoEqWith(appTerm) -> PERC_BACKTICK . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## PERC_BACKTICK atomicTerm
## LR(1) items:
tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(appTerm) -> PERC_BACKTICK atomicTerm

State 197:
## Known stack suffix:
## MINUS
## LR(1) items:
tmEqWith(appTerm) -> MINUS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 597
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 198:
## Known stack suffix:
## LBRACE
## LR(1) items:
tmNoEqWith(appTerm) -> LBRACE . recordExp RBRACE [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 590
-- On recordExp shift to state 591
-- On quident shift to state 83
-- On qlident shift to state 593
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 594
## Reductions:

State 199:
## Known stack suffix:
## simpleDef
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef . [ RBRACE ]
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef . SEMICOLON right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 200
## Reductions:
-- On RBRACE
--   reduce production right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef

State 200:
## Known stack suffix:
## simpleDef SEMICOLON
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON . right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On simpleDef shift to state 201
-- On right_flexible_list(SEMICOLON,simpleDef) shift to state 589
-- On qlident shift to state 204
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:
-- On RBRACE
--   reduce production right_flexible_list(SEMICOLON,simpleDef) ->

State 201:
## Known stack suffix:
## simpleDef
## LR(1) items:
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef . [ RBRACE ]
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef . SEMICOLON right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 202
## Reductions:
-- On RBRACE
--   reduce production right_flexible_list(SEMICOLON,simpleDef) -> simpleDef

State 202:
## Known stack suffix:
## simpleDef SEMICOLON
## LR(1) items:
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON . right_flexible_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On simpleDef shift to state 201
-- On right_flexible_list(SEMICOLON,simpleDef) shift to state 203
-- On qlident shift to state 204
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:
-- On RBRACE
--   reduce production right_flexible_list(SEMICOLON,simpleDef) ->

State 203:
## Known stack suffix:
## simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)
## LR(1) items:
right_flexible_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production right_flexible_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)

State 204:
## Known stack suffix:
## qlident
## LR(1) items:
simpleDef -> qlident . EQUALS noSeqTerm [ SEMICOLON RBRACE ]
simpleDef -> qlident . [ SEMICOLON RBRACE ]
## Transitions:
-- On EQUALS shift to state 205
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production simpleDef -> qlident

State 205:
## Known stack suffix:
## qlident EQUALS
## LR(1) items:
simpleDef -> qlident EQUALS . noSeqTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 588
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 206:
## Known stack suffix:
## FUN
## LR(1) items:
simpleTerm -> FUN . nonempty_list(patternOrMultibinder) RARROW term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 207
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On patternOrMultibinder shift to state 532
-- On path(uident) shift to state 100
-- On nonempty_list(patternOrMultibinder) shift to state 585
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 534
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 207:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicPattern -> LPAREN . tuplePattern COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . tuplePattern RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPPREFIX RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX3 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX4 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0a RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0b RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0c RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX0d RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX1 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OPINFIX2 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . PIPE_RIGHT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . COLON_EQUALS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . COLON_COLON RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
atomicPattern -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
patternOrMultibinder -> LPAREN . aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PIPE_RIGHT shift to state 119
-- On OP_MIXFIX_ASSIGNMENT shift to state 121
-- On OP_MIXFIX_ACCESS shift to state 123
-- On OPPREFIX shift to state 125
-- On OPINFIX4 shift to state 127
-- On OPINFIX3 shift to state 129
-- On OPINFIX2 shift to state 131
-- On OPINFIX1 shift to state 133
-- On OPINFIX0d shift to state 135
-- On OPINFIX0c shift to state 137
-- On OPINFIX0b shift to state 139
-- On OPINFIX0a shift to state 141
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 185
-- On COLON_COLON shift to state 187
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 189
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 208
-- On aqualUniverses shift to state 164
## Reductions:

State 208:
## Known stack suffix:
## LPAREN aqualified(lident)
## LR(1) items:
atomicPattern -> aqualified(lident) . [ RPAREN COMMA COLON_COLON COLON ]
patternOrMultibinder -> LPAREN aqualified(lident) . nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lident)) shift to state 209
-- On lident shift to state 159
-- On aqualified(lident) shift to state 583
-- On aqualUniverses shift to state 164
## Reductions:
-- On RPAREN COMMA COLON_COLON COLON
--   reduce production atomicPattern -> aqualified(lident)

State 209:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident))
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) . COLON simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On COLON shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON . simpleArrow refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 580
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 211:
## Known stack suffix:
## EQUALS
## LR(1) items:
aqual -> EQUALS . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqual -> EQUALS

State 212:
## Known stack suffix:
## BACKTICK_HASH
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_HASH . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## BACKTICK_HASH atomicTerm
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(appTerm) -> BACKTICK_HASH atomicTerm

State 214:
## Known stack suffix:
## BACKTICK_AT
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_AT . atomicTerm [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## BACKTICK_AT atomicTerm
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK_AT atomicTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(appTerm) -> BACKTICK_AT atomicTerm

State 216:
## Known stack suffix:
## BACKTICK
## LR(1) items:
tmEqWith(appTerm) -> BACKTICK . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 579
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 217:
## Known stack suffix:
## tmNoEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On OPINFIX3 shift to state 569
-- On COLON_COLON shift to state 575
-- On BACKTICK shift to state 571
-- On AMP shift to state 577
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmNoEqWith(appTerm)

State 218:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX4
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 219
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 219:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP
--   reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX4 tmNoEqWith(appTerm)

State 220:
## Known stack suffix:
## indexingTerm
## LR(1) items:
appTerm -> indexingTerm . list(argTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNIV_HASH shift to state 221
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 238
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On universe shift to state 564
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(argTerm) shift to state 565
-- On lident shift to state 80
-- On indexingTerm shift to state 566
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On argTerm shift to state 567
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production list(argTerm) ->

State 221:
## Known stack suffix:
## UNIV_HASH
## LR(1) items:
universe -> UNIV_HASH . atomicUniverse [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On lident shift to state 233
-- On atomicUniverse shift to state 237
## Reductions:

State 222:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
atomicUniverse -> UNDERSCORE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicUniverse -> UNDERSCORE

State 223:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicUniverse -> LPAREN . universeFrom RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On NAME shift to state 35
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On universeFrom shift to state 225
-- On uident shift to state 229
-- On lident shift to state 230
-- On ident shift to state 231
-- On atomicUniverse shift to state 236
## Reductions:

State 224:
## Known stack suffix:
## INT
## LR(1) items:
atomicUniverse -> INT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicUniverse -> INT

State 225:
## Known stack suffix:
## LPAREN universeFrom
## LR(1) items:
atomicUniverse -> LPAREN universeFrom . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
universeFrom -> universeFrom . OPINFIX2 universeFrom [ RPAREN OPINFIX2 ]
## Transitions:
-- On RPAREN shift to state 226
-- On OPINFIX2 shift to state 227
## Reductions:

State 226:
## Known stack suffix:
## LPAREN universeFrom RPAREN
## LR(1) items:
atomicUniverse -> LPAREN universeFrom RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicUniverse -> LPAREN universeFrom RPAREN

State 227:
## Known stack suffix:
## universeFrom OPINFIX2
## LR(1) items:
universeFrom -> universeFrom OPINFIX2 . universeFrom [ RPAREN OPINFIX2 ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On NAME shift to state 35
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On universeFrom shift to state 228
-- On uident shift to state 229
-- On lident shift to state 230
-- On ident shift to state 231
-- On atomicUniverse shift to state 236
## Reductions:

State 228:
## Known stack suffix:
## universeFrom OPINFIX2 universeFrom
## LR(1) items:
universeFrom -> universeFrom . OPINFIX2 universeFrom [ RPAREN OPINFIX2 ]
universeFrom -> universeFrom OPINFIX2 universeFrom . [ RPAREN OPINFIX2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production universeFrom -> universeFrom OPINFIX2 universeFrom

State 229:
## Known stack suffix:
## uident
## LR(1) items:
ident -> uident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INT INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> uident

State 230:
## Known stack suffix:
## lident
## LR(1) items:
atomicUniverse -> lident . [ RPAREN OPINFIX2 ]
ident -> lident . [ UNDERSCORE LPAREN INT IDENT ]
## Transitions:
## Reductions:
-- On RPAREN OPINFIX2
--   reduce production atomicUniverse -> lident
-- On UNDERSCORE LPAREN INT IDENT
--   reduce production ident -> lident

State 231:
## Known stack suffix:
## ident
## LR(1) items:
universeFrom -> ident . nonempty_list(atomicUniverse) [ RPAREN OPINFIX2 ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On nonempty_list(atomicUniverse) shift to state 232
-- On lident shift to state 233
-- On atomicUniverse shift to state 234
## Reductions:

State 232:
## Known stack suffix:
## ident nonempty_list(atomicUniverse)
## LR(1) items:
universeFrom -> ident nonempty_list(atomicUniverse) . [ RPAREN OPINFIX2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production universeFrom -> ident nonempty_list(atomicUniverse)

State 233:
## Known stack suffix:
## lident
## LR(1) items:
atomicUniverse -> lident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicUniverse -> lident

State 234:
## Known stack suffix:
## atomicUniverse
## LR(1) items:
nonempty_list(atomicUniverse) -> atomicUniverse . [ RPAREN OPINFIX2 ]
nonempty_list(atomicUniverse) -> atomicUniverse . nonempty_list(atomicUniverse) [ RPAREN OPINFIX2 ]
## Transitions:
-- On UNDERSCORE shift to state 222
-- On LPAREN shift to state 223
-- On INT shift to state 224
-- On IDENT shift to state 62
-- On nonempty_list(atomicUniverse) shift to state 235
-- On lident shift to state 233
-- On atomicUniverse shift to state 234
## Reductions:
-- On RPAREN OPINFIX2
--   reduce production nonempty_list(atomicUniverse) -> atomicUniverse

State 235:
## Known stack suffix:
## atomicUniverse nonempty_list(atomicUniverse)
## LR(1) items:
nonempty_list(atomicUniverse) -> atomicUniverse nonempty_list(atomicUniverse) . [ RPAREN OPINFIX2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(atomicUniverse) -> atomicUniverse nonempty_list(atomicUniverse)

State 236:
## Known stack suffix:
## atomicUniverse
## LR(1) items:
universeFrom -> atomicUniverse . [ RPAREN OPINFIX2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production universeFrom -> atomicUniverse

State 237:
## Known stack suffix:
## UNIV_HASH atomicUniverse
## LR(1) items:
universe -> UNIV_HASH atomicUniverse . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production universe -> UNIV_HASH atomicUniverse

State 238:
## Known stack suffix:
## HASH
## LR(1) items:
argTerm -> HASH . indexingTerm [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 239
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
## Reductions:

State 239:
## Known stack suffix:
## HASH indexingTerm
## LR(1) items:
argTerm -> HASH indexingTerm . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argTerm -> HASH indexingTerm

State 240:
## Known stack suffix:
## atomicTermNotQUident
## LR(1) items:
atomicTerm -> atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
indexingTerm -> atomicTermNotQUident . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 479
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production atomicTerm -> atomicTermNotQUident

State 241:
## Known stack suffix:
## DOT_LPAREN
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 562
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 242:
## Known stack suffix:
## FORALL
## LR(1) items:
typ -> FORALL . binders DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 558
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On DOT
--   reduce production list(__anonymous_4) ->

State 243:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
lidentOrUnderscore -> UNDERSCORE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrUnderscore -> UNDERSCORE

State 244:
## Known stack suffix:
## LPAREN
## LR(1) items:
multiBinder -> LPAREN . nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lidentOrUnderscore)) shift to state 246
-- On lidentOrUnderscore shift to state 284
-- On aqualified(lidentOrUnderscore) shift to state 556
-- On aqualUniverses shift to state 288
## Reductions:

State 245:
## Known stack suffix:
## IDENT
## LR(1) items:
lidentOrUnderscore -> IDENT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrUnderscore -> IDENT

State 246:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore))
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) . COLON simpleArrow refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On COLON shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON . simpleArrow refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 278
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 248:
## Known stack suffix:
## tmEqWith(appTerm)
## LR(1) items:
tmEqNoRefinement -> tmEqWith(appTerm) . [ RPAREN RARROW LBRACE ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On OPINFIX0b shift to state 263
-- On OPINFIX0a shift to state 267
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
-- On COLON_EQUALS shift to state 269
## Reductions:
-- On RPAREN RARROW LBRACE
--   reduce production tmEqNoRefinement -> tmEqWith(appTerm)

State 249:
## Known stack suffix:
## tmEqWith(appTerm) PIPE_RIGHT
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 250
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 250:
## Known stack suffix:
## tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a LBRACE EQUALS COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) PIPE_RIGHT tmEqWith(appTerm)

State 251:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX2
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 252
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 252:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX2 tmEqWith(appTerm)

State 253:
## Known stack suffix:
## atomicTerm
## LR(1) items:
indexingTerm -> atomicTerm . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production indexingTerm -> atomicTerm

State 254:
## Known stack suffix:
## appTerm
## LR(1) items:
tmNoEqWith(appTerm) -> appTerm . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(appTerm) -> appTerm

State 255:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX1
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 256
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 256:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a LBRACE EQUALS COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX1 tmEqWith(appTerm)

State 257:
## Known stack suffix:
## tmEqWith(appTerm) MINUS
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 258
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 258:
## Known stack suffix:
## tmEqWith(appTerm) MINUS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) MINUS tmEqWith(appTerm)

State 259:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0d
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 260
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 260:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN RARROW OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a LBRACE EQUALS COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0d tmEqWith(appTerm)

State 261:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0c
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 262
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 262:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN RARROW OPINFIX0c OPINFIX0b OPINFIX0a LBRACE EQUALS COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0c tmEqWith(appTerm)

State 263:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0b
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 264
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 264:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
## Reductions:
-- On RPAREN RARROW OPINFIX0b OPINFIX0a LBRACE COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0b tmEqWith(appTerm)

State 265:
## Known stack suffix:
## tmEqWith(appTerm) EQUALS
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 266
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 266:
## Known stack suffix:
## tmEqWith(appTerm) EQUALS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On MINUS shift to state 257
## Reductions:
-- On RPAREN RARROW OPINFIX0c OPINFIX0b OPINFIX0a LBRACE EQUALS COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) EQUALS tmEqWith(appTerm)

State 267:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0a
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 268
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 268:
## Known stack suffix:
## tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On OPINFIX0b shift to state 263
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
## Reductions:
-- On RPAREN RARROW OPINFIX0a LBRACE COLON_EQUALS
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) OPINFIX0a tmEqWith(appTerm)

State 269:
## Known stack suffix:
## tmEqWith(appTerm) COLON_EQUALS
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS . tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 270
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 270:
## Known stack suffix:
## tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
-- On PIPE_RIGHT shift to state 249
-- On OPINFIX2 shift to state 251
-- On OPINFIX1 shift to state 255
-- On OPINFIX0d shift to state 259
-- On OPINFIX0c shift to state 261
-- On OPINFIX0b shift to state 263
-- On OPINFIX0a shift to state 267
-- On MINUS shift to state 257
-- On EQUALS shift to state 265
## Reductions:
-- On RPAREN RARROW LBRACE
--   reduce production tmEqWith(appTerm) -> tmEqWith(appTerm) COLON_EQUALS tmEqWith(appTerm)

State 271:
## Known stack suffix:
## tmEqNoRefinement
## LR(1) items:
simpleArrow -> tmEqNoRefinement . [ RPAREN LBRACE ]
simpleArrowDomain -> tmEqNoRefinement . [ RARROW ]
## Transitions:
## Reductions:
-- On RPAREN LBRACE
--   reduce production simpleArrow -> tmEqNoRefinement
-- On RARROW
--   reduce production simpleArrowDomain -> tmEqNoRefinement

State 272:
## Known stack suffix:
## simpleArrowDomain
## LR(1) items:
simpleArrow -> simpleArrowDomain . RARROW simpleArrow [ RPAREN LBRACE ]
## Transitions:
-- On RARROW shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## simpleArrowDomain RARROW
## LR(1) items:
simpleArrow -> simpleArrowDomain RARROW . simpleArrow [ RPAREN LBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 271
-- On simpleArrowDomain shift to state 272
-- On simpleArrow shift to state 274
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 276
-- On appTerm shift to state 254
## Reductions:

State 274:
## Known stack suffix:
## simpleArrowDomain RARROW simpleArrow
## LR(1) items:
simpleArrow -> simpleArrowDomain RARROW simpleArrow . [ RPAREN LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simpleArrow -> simpleArrowDomain RARROW simpleArrow

State 275:
## Known stack suffix:
## aqualUniverses
## LR(1) items:
aqual -> aqualUniverses . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqual -> aqualUniverses

State 276:
## Known stack suffix:
## aqual
## LR(1) items:
simpleArrowDomain -> aqual . tmEqNoRefinement [ RARROW ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 194
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 197
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 212
-- On BACKTICK_AT shift to state 214
-- On BACKTICK shift to state 216
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 217
-- On tmEqWith(appTerm) shift to state 248
-- On tmEqNoRefinement shift to state 277
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 277:
## Known stack suffix:
## aqual tmEqNoRefinement
## LR(1) items:
simpleArrowDomain -> aqual tmEqNoRefinement . [ RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simpleArrowDomain -> aqual tmEqNoRefinement

State 278:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow . refineOpt RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 554
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On RPAREN
--   reduce production option(__anonymous_9) ->

State 279:
## Known stack suffix:
## LBRACE
## LR(1) items:
option(__anonymous_9) -> LBRACE . noSeqTerm RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 552
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 280:
## Known stack suffix:
## EXISTS
## LR(1) items:
typ -> EXISTS . binders DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 291
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On DOT
--   reduce production list(__anonymous_4) ->

State 281:
## Known stack suffix:
## tvar
## LR(1) items:
binder -> tvar . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binder -> tvar

State 282:
## Known stack suffix:
## multiBinder
## LR(1) items:
list(__anonymous_4) -> multiBinder . list(__anonymous_4) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 283
-- On lidentOrUnderscore shift to state 284
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT
--   reduce production list(__anonymous_4) ->

State 283:
## Known stack suffix:
## multiBinder list(__anonymous_4)
## LR(1) items:
list(__anonymous_4) -> multiBinder list(__anonymous_4) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(__anonymous_4) -> multiBinder list(__anonymous_4)

State 284:
## Known stack suffix:
## lidentOrUnderscore
## LR(1) items:
aqualified(lidentOrUnderscore) -> lidentOrUnderscore . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqualified(lidentOrUnderscore) -> lidentOrUnderscore

State 285:
## Known stack suffix:
## binder
## LR(1) items:
list(__anonymous_4) -> binder . list(__anonymous_4) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 286
-- On lidentOrUnderscore shift to state 284
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT
--   reduce production list(__anonymous_4) ->

State 286:
## Known stack suffix:
## binder list(__anonymous_4)
## LR(1) items:
list(__anonymous_4) -> binder list(__anonymous_4) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(__anonymous_4) -> binder list(__anonymous_4)

State 287:
## Known stack suffix:
## aqualified(lidentOrUnderscore)
## LR(1) items:
binder -> aqualified(lidentOrUnderscore) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binder -> aqualified(lidentOrUnderscore)

State 288:
## Known stack suffix:
## aqualUniverses
## LR(1) items:
aqualified(lidentOrUnderscore) -> aqualUniverses . lidentOrUnderscore [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On IDENT shift to state 245
-- On lidentOrUnderscore shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## aqualUniverses lidentOrUnderscore
## LR(1) items:
aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aqualified(lidentOrUnderscore) -> aqualUniverses lidentOrUnderscore

State 290:
## Known stack suffix:
## list(__anonymous_4)
## LR(1) items:
binders -> list(__anonymous_4) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binders -> list(__anonymous_4)

State 291:
## Known stack suffix:
## EXISTS binders
## LR(1) items:
typ -> EXISTS binders . DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On DOT shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## EXISTS binders DOT
## LR(1) items:
typ -> EXISTS binders DOT . trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACE_COLON_PATTERN shift to state 293
-- On trigger shift to state 304
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT
--   reduce production trigger ->

State 293:
## Known stack suffix:
## LBRACE_COLON_PATTERN
## LR(1) items:
trigger -> LBRACE_COLON_PATTERN . disjunctivePats RBRACE [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(SEMICOLON,appTerm) shift to state 294
-- On separated_nonempty_list(DISJUNCTION,conjunctivePat) shift to state 295
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On disjunctivePats shift to state 296
-- On constant shift to state 103
-- On conjunctivePat shift to state 298
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 301
## Reductions:

State 294:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,appTerm)
## LR(1) items:
conjunctivePat -> separated_nonempty_list(SEMICOLON,appTerm) . [ RBRACE DISJUNCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conjunctivePat -> separated_nonempty_list(SEMICOLON,appTerm)

State 295:
## Known stack suffix:
## separated_nonempty_list(DISJUNCTION,conjunctivePat)
## LR(1) items:
disjunctivePats -> separated_nonempty_list(DISJUNCTION,conjunctivePat) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production disjunctivePats -> separated_nonempty_list(DISJUNCTION,conjunctivePat)

State 296:
## Known stack suffix:
## LBRACE_COLON_PATTERN disjunctivePats
## LR(1) items:
trigger -> LBRACE_COLON_PATTERN disjunctivePats . RBRACE [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
-- On RBRACE shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## LBRACE_COLON_PATTERN disjunctivePats RBRACE
## LR(1) items:
trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production trigger -> LBRACE_COLON_PATTERN disjunctivePats RBRACE

State 298:
## Known stack suffix:
## conjunctivePat
## LR(1) items:
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat . [ RBRACE ]
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat . DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat) [ RBRACE ]
## Transitions:
-- On DISJUNCTION shift to state 299
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat

State 299:
## Known stack suffix:
## conjunctivePat DISJUNCTION
## LR(1) items:
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat DISJUNCTION . separated_nonempty_list(DISJUNCTION,conjunctivePat) [ RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(SEMICOLON,appTerm) shift to state 294
-- On separated_nonempty_list(DISJUNCTION,conjunctivePat) shift to state 300
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On conjunctivePat shift to state 298
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 301
## Reductions:

State 300:
## Known stack suffix:
## conjunctivePat DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat)
## LR(1) items:
separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(DISJUNCTION,conjunctivePat) -> conjunctivePat DISJUNCTION separated_nonempty_list(DISJUNCTION,conjunctivePat)

State 301:
## Known stack suffix:
## appTerm
## LR(1) items:
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm . [ RBRACE DISJUNCTION ]
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm . SEMICOLON separated_nonempty_list(SEMICOLON,appTerm) [ RBRACE DISJUNCTION ]
## Transitions:
-- On SEMICOLON shift to state 302
## Reductions:
-- On RBRACE DISJUNCTION
--   reduce production separated_nonempty_list(SEMICOLON,appTerm) -> appTerm

State 302:
## Known stack suffix:
## appTerm SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm SEMICOLON . separated_nonempty_list(SEMICOLON,appTerm) [ RBRACE DISJUNCTION ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(SEMICOLON,appTerm) shift to state 303
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 301
## Reductions:

State 303:
## Known stack suffix:
## appTerm SEMICOLON separated_nonempty_list(SEMICOLON,appTerm)
## LR(1) items:
separated_nonempty_list(SEMICOLON,appTerm) -> appTerm SEMICOLON separated_nonempty_list(SEMICOLON,appTerm) . [ RBRACE DISJUNCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,appTerm) -> appTerm SEMICOLON separated_nonempty_list(SEMICOLON,appTerm)

State 304:
## Known stack suffix:
## EXISTS binders DOT trigger
## LR(1) items:
typ -> EXISTS binders DOT trigger . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 397
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 305:
## Known stack suffix:
## ENSURES
## LR(1) items:
noSeqTerm -> ENSURES . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 332
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 306:
## Known stack suffix:
## BACKTICK_HASH
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_HASH . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## BACKTICK_HASH atomicTerm
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(tmRefinement) -> BACKTICK_HASH atomicTerm

State 308:
## Known stack suffix:
## BACKTICK_AT
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_AT . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## BACKTICK_AT atomicTerm
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(tmRefinement) -> BACKTICK_AT atomicTerm

State 310:
## Known stack suffix:
## BACKTICK
## LR(1) items:
tmEqWith(tmRefinement) -> BACKTICK . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 331
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 311:
## Known stack suffix:
## tmRefinement
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmRefinement . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(tmRefinement) -> tmRefinement

State 312:
## Known stack suffix:
## tmNoEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)

State 313:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX4
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 314
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 314:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX4 tmNoEqWith(tmRefinement)

State 315:
## Known stack suffix:
## lidentOrUnderscore
## LR(1) items:
tmRefinement -> lidentOrUnderscore . COLON appTerm refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On COLON shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## lidentOrUnderscore COLON
## LR(1) items:
tmRefinement -> lidentOrUnderscore COLON . appTerm refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## lidentOrUnderscore COLON appTerm
## LR(1) items:
tmRefinement -> lidentOrUnderscore COLON appTerm . refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 318
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production option(__anonymous_9) ->

State 318:
## Known stack suffix:
## lidentOrUnderscore COLON appTerm refineOpt
## LR(1) items:
tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmRefinement -> lidentOrUnderscore COLON appTerm refineOpt

State 319:
## Known stack suffix:
## option(__anonymous_9)
## LR(1) items:
refineOpt -> option(__anonymous_9) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production refineOpt -> option(__anonymous_9)

State 320:
## Known stack suffix:
## appTerm
## LR(1) items:
tmRefinement -> appTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmRefinement -> appTerm

State 321:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX3
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 322
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 322:
## Known stack suffix:
## tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On BACKTICK shift to state 323
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR ASSUME AND AMP ABSTRACT
--   reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) OPINFIX3 tmNoEqWith(tmRefinement)

State 323:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK . qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On qlident shift to state 324
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 324:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK qlident
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident . BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On BACKTICK shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 326
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 326:
## Known stack suffix:
## tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement)

State 327:
## Known stack suffix:
## tmNoEqWith(tmRefinement) COLON_COLON
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 328
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 328:
## Known stack suffix:
## tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) COLON_COLON tmNoEqWith(tmRefinement)

State 329:
## Known stack suffix:
## tmNoEqWith(tmRefinement) AMP
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP . tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 330
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 330:
## Known stack suffix:
## tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) AMP tmNoEqWith(tmRefinement)

State 331:
## Known stack suffix:
## BACKTICK tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(tmRefinement) -> BACKTICK tmEqWith(tmRefinement)

State 332:
## Known stack suffix:
## ENSURES typ
## LR(1) items:
noSeqTerm -> ENSURES typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> ENSURES typ

State 333:
## Known stack suffix:
## tmTuple
## LR(1) items:
tmConjunction -> tmTuple . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmConjunction -> tmTuple

State 334:
## Known stack suffix:
## tmImplies
## LR(1) items:
tmIff -> tmImplies . IFF tmIff [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmIff -> tmImplies . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IFF shift to state 335
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmIff -> tmImplies

State 335:
## Known stack suffix:
## tmImplies IFF
## LR(1) items:
tmIff -> tmImplies IFF . tmIff [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 336
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 336:
## Known stack suffix:
## tmImplies IFF tmIff
## LR(1) items:
tmIff -> tmImplies IFF tmIff . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmIff -> tmImplies IFF tmIff

State 337:
## Known stack suffix:
## tmFormula
## LR(1) items:
tmArrow(tmFormula) -> tmFormula . RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmArrow(tmFormula) -> tmFormula . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On RARROW shift to state 338
-- On DISJUNCTION shift to state 372
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmArrow(tmFormula) -> tmFormula

State 338:
## Known stack suffix:
## tmFormula RARROW
## LR(1) items:
tmArrow(tmFormula) -> tmFormula RARROW . tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 367
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 339:
## Known stack suffix:
## tmEqWith(tmRefinement)
## LR(1) items:
tmEq -> tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On OPINFIX0b shift to state 352
-- On OPINFIX0a shift to state 356
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
-- On COLON_EQUALS shift to state 358
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEq -> tmEqWith(tmRefinement)

State 340:
## Known stack suffix:
## tmEqWith(tmRefinement) PIPE_RIGHT
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 341
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 341:
## Known stack suffix:
## tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On MINUS shift to state 346
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) PIPE_RIGHT tmEqWith(tmRefinement)

State 342:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX2
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 343
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 343:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX2 tmEqWith(tmRefinement)

State 344:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX1
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 345
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 345:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On MINUS shift to state 346
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX1 tmEqWith(tmRefinement)

State 346:
## Known stack suffix:
## tmEqWith(tmRefinement) MINUS
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 347
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 347:
## Known stack suffix:
## tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) MINUS tmEqWith(tmRefinement)

State 348:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0d
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 349
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 349:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On MINUS shift to state 346
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0d tmEqWith(tmRefinement)

State 350:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0c
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 351
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 351:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On MINUS shift to state 346
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0c tmEqWith(tmRefinement)

State 352:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0b
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 353
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 353:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0b tmEqWith(tmRefinement)

State 354:
## Known stack suffix:
## tmEqWith(tmRefinement) EQUALS
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 355
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 355:
## Known stack suffix:
## tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On MINUS shift to state 346
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) EQUALS tmEqWith(tmRefinement)

State 356:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0a
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 357
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 357:
## Known stack suffix:
## tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On OPINFIX0b shift to state 352
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) OPINFIX0a tmEqWith(tmRefinement)

State 358:
## Known stack suffix:
## tmEqWith(tmRefinement) COLON_EQUALS
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS . tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 359
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 359:
## Known stack suffix:
## tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On PIPE_RIGHT shift to state 340
-- On OPINFIX2 shift to state 342
-- On OPINFIX1 shift to state 344
-- On OPINFIX0d shift to state 348
-- On OPINFIX0c shift to state 350
-- On OPINFIX0b shift to state 352
-- On OPINFIX0a shift to state 356
-- On MINUS shift to state 346
-- On EQUALS shift to state 354
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) COLON_EQUALS tmEqWith(tmRefinement)

State 360:
## Known stack suffix:
## tmEq
## LR(1) items:
separated_nonempty_list(COMMA,tmEq) -> tmEq . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
separated_nonempty_list(COMMA,tmEq) -> tmEq . COMMA separated_nonempty_list(COMMA,tmEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On COMMA shift to state 361
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq

State 361:
## Known stack suffix:
## tmEq COMMA
## LR(1) items:
separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA . separated_nonempty_list(COMMA,tmEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On separated_nonempty_list(COMMA,tmEq) shift to state 362
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 362:
## Known stack suffix:
## tmEq COMMA separated_nonempty_list(COMMA,tmEq)
## LR(1) items:
separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,tmEq) -> tmEq COMMA separated_nonempty_list(COMMA,tmEq)

State 363:
## Known stack suffix:
## tmConjunction
## LR(1) items:
tmConjunction -> tmConjunction . CONJUNCTION tmTuple [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmConjunction . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On CONJUNCTION shift to state 364
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmFormula -> tmConjunction

State 364:
## Known stack suffix:
## tmConjunction CONJUNCTION
## LR(1) items:
tmConjunction -> tmConjunction CONJUNCTION . tmTuple [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 365
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 365:
## Known stack suffix:
## tmConjunction CONJUNCTION tmTuple
## LR(1) items:
tmConjunction -> tmConjunction CONJUNCTION tmTuple . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple

State 366:
## Known stack suffix:
## separated_nonempty_list(COMMA,tmEq)
## LR(1) items:
tmTuple -> separated_nonempty_list(COMMA,tmEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmTuple -> separated_nonempty_list(COMMA,tmEq)

State 367:
## Known stack suffix:
## tmFormula RARROW tmArrow(tmFormula)
## LR(1) items:
tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmArrow(tmFormula) -> tmFormula RARROW tmArrow(tmFormula)

State 368:
## Known stack suffix:
## aqual
## LR(1) items:
tmArrow(tmFormula) -> aqual . tmFormula RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 369
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 369:
## Known stack suffix:
## aqual tmFormula
## LR(1) items:
tmArrow(tmFormula) -> aqual tmFormula . RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ RARROW DISJUNCTION ]
## Transitions:
-- On RARROW shift to state 370
-- On DISJUNCTION shift to state 372
## Reductions:

State 370:
## Known stack suffix:
## aqual tmFormula RARROW
## LR(1) items:
tmArrow(tmFormula) -> aqual tmFormula RARROW . tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 371
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 371:
## Known stack suffix:
## aqual tmFormula RARROW tmArrow(tmFormula)
## LR(1) items:
tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmArrow(tmFormula) -> aqual tmFormula RARROW tmArrow(tmFormula)

State 372:
## Known stack suffix:
## tmFormula DISJUNCTION
## LR(1) items:
tmFormula -> tmFormula DISJUNCTION . tmConjunction [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 373
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 373:
## Known stack suffix:
## tmFormula DISJUNCTION tmConjunction
## LR(1) items:
tmConjunction -> tmConjunction . CONJUNCTION tmTuple [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula DISJUNCTION tmConjunction . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On CONJUNCTION shift to state 364
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmFormula -> tmFormula DISJUNCTION tmConjunction

State 374:
## Known stack suffix:
## tmArrow(tmFormula)
## LR(1) items:
tmImplies -> tmArrow(tmFormula) . IMPLIES tmImplies [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmImplies -> tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IMPLIES shift to state 375
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production tmImplies -> tmArrow(tmFormula)

State 375:
## Known stack suffix:
## tmArrow(tmFormula) IMPLIES
## LR(1) items:
tmImplies -> tmArrow(tmFormula) IMPLIES . tmImplies [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 376
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 376:
## Known stack suffix:
## tmArrow(tmFormula) IMPLIES tmImplies
## LR(1) items:
tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmImplies -> tmArrow(tmFormula) IMPLIES tmImplies

State 377:
## Known stack suffix:
## tmIff
## LR(1) items:
simpleTerm -> tmIff . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simpleTerm -> tmIff

State 378:
## Known stack suffix:
## simpleTerm
## LR(1) items:
typ -> simpleTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> simpleTerm

State 379:
## Known stack suffix:
## ATTRIBUTES
## LR(1) items:
noSeqTerm -> ATTRIBUTES . nonempty_list(atomicTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On nonempty_list(atomicTerm) shift to state 380
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 381
## Reductions:

State 380:
## Known stack suffix:
## ATTRIBUTES nonempty_list(atomicTerm)
## LR(1) items:
noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> ATTRIBUTES nonempty_list(atomicTerm)

State 381:
## Known stack suffix:
## atomicTerm
## LR(1) items:
nonempty_list(atomicTerm) -> atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(atomicTerm) -> atomicTerm . nonempty_list(atomicTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On nonempty_list(atomicTerm) shift to state 382
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 381
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production nonempty_list(atomicTerm) -> atomicTerm

State 382:
## Known stack suffix:
## atomicTerm nonempty_list(atomicTerm)
## LR(1) items:
nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(atomicTerm) -> atomicTerm nonempty_list(atomicTerm)

State 383:
## Known stack suffix:
## ASSUME
## LR(1) items:
noSeqTerm -> ASSUME . atomicTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## ASSUME atomicTerm
## LR(1) items:
noSeqTerm -> ASSUME atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> ASSUME atomicTerm

State 385:
## Known stack suffix:
## ASSERT
## LR(1) items:
noSeqTerm -> ASSERT . atomicTerm option(__anonymous_8) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## ASSERT atomicTerm
## LR(1) items:
noSeqTerm -> ASSERT atomicTerm . option(__anonymous_8) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BY shift to state 387
-- On option(__anonymous_8) shift to state 389
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production option(__anonymous_8) ->

State 387:
## Known stack suffix:
## BY
## LR(1) items:
option(__anonymous_8) -> BY . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 388
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 388:
## Known stack suffix:
## BY typ
## LR(1) items:
option(__anonymous_8) -> BY typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(__anonymous_8) -> BY typ

State 389:
## Known stack suffix:
## ASSERT atomicTerm option(__anonymous_8)
## LR(1) items:
noSeqTerm -> ASSERT atomicTerm option(__anonymous_8) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> ASSERT atomicTerm option(__anonymous_8)

State 390:
## Known stack suffix:
## typ
## LR(1) items:
noSeqTerm -> typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> typ

State 391:
## Known stack suffix:
## tmIff
## LR(1) items:
noSeqTerm -> tmIff . SUBTYPE tmIff option(__anonymous_6) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
simpleTerm -> tmIff . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SUBTYPE shift to state 392
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production simpleTerm -> tmIff

State 392:
## Known stack suffix:
## tmIff SUBTYPE
## LR(1) items:
noSeqTerm -> tmIff SUBTYPE . tmIff option(__anonymous_6) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 393
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 393:
## Known stack suffix:
## tmIff SUBTYPE tmIff
## LR(1) items:
noSeqTerm -> tmIff SUBTYPE tmIff . option(__anonymous_6) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BY shift to state 394
-- On option(__anonymous_6) shift to state 396
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production option(__anonymous_6) ->

State 394:
## Known stack suffix:
## BY
## LR(1) items:
option(__anonymous_6) -> BY . typ [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 395
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 395:
## Known stack suffix:
## BY typ
## LR(1) items:
option(__anonymous_6) -> BY typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(__anonymous_6) -> BY typ

State 396:
## Known stack suffix:
## tmIff SUBTYPE tmIff option(__anonymous_6)
## LR(1) items:
noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> tmIff SUBTYPE tmIff option(__anonymous_6)

State 397:
## Known stack suffix:
## EXISTS binders DOT trigger noSeqTerm
## LR(1) items:
typ -> EXISTS binders DOT trigger noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> EXISTS binders DOT trigger noSeqTerm

State 398:
## Known stack suffix:
## attribute
## LR(1) items:
noSeqTerm -> attribute . LET letqualifier letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LET shift to state 399
## Reductions:

State 399:
## Known stack suffix:
## attribute LET
## LR(1) items:
noSeqTerm -> attribute LET . letqualifier letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On REC shift to state 68
-- On MUTABLE shift to state 400
-- On letqualifier shift to state 401
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production letqualifier ->

State 400:
## Known stack suffix:
## MUTABLE
## LR(1) items:
letqualifier -> MUTABLE . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letqualifier -> MUTABLE

State 401:
## Known stack suffix:
## attribute LET letqualifier
## LR(1) items:
noSeqTerm -> attribute LET letqualifier . letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 540
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production boption(SQUIGGLY_RARROW) ->

State 402:
## Known stack suffix:
## SQUIGGLY_RARROW
## LR(1) items:
boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boption(SQUIGGLY_RARROW) -> SQUIGGLY_RARROW

State 403:
## Known stack suffix:
## maybeFocus
## LR(1) items:
letbinding -> maybeFocus . lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
letbinding -> maybeFocus . tuplePattern ascribeTyp EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
letbinding -> maybeFocus . tuplePattern EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 404
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 433
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 434
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lidentOrOperator shift to state 531
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 404:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicPattern -> LPAREN . tuplePattern COLON simpleArrow refineOpt RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . tuplePattern RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPPREFIX RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX3 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX4 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0a RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0b RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0c RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX0d RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX1 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OPINFIX2 RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . PIPE_RIGHT RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . COLON_EQUALS RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . COLON_COLON RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ EQUALS COMMA COLON_COLON COLON ]
atomicPattern -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN . OPPREFIX RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX3 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX4 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0a RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0b RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0c RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX0d RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX1 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OPINFIX2 RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . PIPE_RIGHT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . COLON_EQUALS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . COLON_COLON RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PIPE_RIGHT shift to state 405
-- On OP_MIXFIX_ASSIGNMENT shift to state 407
-- On OP_MIXFIX_ACCESS shift to state 409
-- On OPPREFIX shift to state 411
-- On OPINFIX4 shift to state 413
-- On OPINFIX3 shift to state 415
-- On OPINFIX2 shift to state 417
-- On OPINFIX1 shift to state 419
-- On OPINFIX0d shift to state 421
-- On OPINFIX0c shift to state 423
-- On OPINFIX0b shift to state 425
-- On OPINFIX0a shift to state 427
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 429
-- On COLON_COLON shift to state 431
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 189
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 405:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN PIPE_RIGHT . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
atomicPattern -> LPAREN PIPE_RIGHT RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN PIPE_RIGHT RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN

State 407:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN

State 409:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OP_MIXFIX_ACCESS RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN

State 411:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPPREFIX . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 412
## Reductions:

State 412:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPPREFIX RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPPREFIX RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPPREFIX RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN

State 413:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX4 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 414
## Reductions:

State 414:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX4 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX4 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX4 RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN

State 415:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX3 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX3 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX3 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX3 RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN

State 417:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX2 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 418
## Reductions:

State 418:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX2 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX2 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX2 RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN

State 419:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX1 . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX1 RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX1 RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX1 RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN

State 421:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0d . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 422
## Reductions:

State 422:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0d RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0d RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX0d RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN

State 423:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0c . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 424
## Reductions:

State 424:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0c RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0c RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX0c RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN

State 425:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0b . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0b RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0b RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX0b RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN

State 427:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0a . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 428
## Reductions:

State 428:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
atomicPattern -> LPAREN OPINFIX0a RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN OPINFIX0a RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN OPINFIX0a RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN

State 429:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_EQUALS . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 430
## Reductions:

State 430:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_EQUALS RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_EQUALS RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN COLON_EQUALS RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN

State 431:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON . RPAREN [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_COLON . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
atomicPattern -> LPAREN COLON_COLON RPAREN . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> LPAREN COLON_COLON RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production atomicPattern -> LPAREN COLON_COLON RPAREN
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN

State 433:
## Known stack suffix:
## IDENT
## LR(1) items:
lident -> IDENT . [ EQUALS COMMA COLON_COLON COLON ]
lidentOrOperator -> IDENT . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Reductions:
-- On EQUALS COMMA COLON_COLON COLON
--   reduce production lident -> IDENT
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production lidentOrOperator -> IDENT

State 434:
## Known stack suffix:
## maybeFocus tuplePattern
## LR(1) items:
letbinding -> maybeFocus tuplePattern . ascribeTyp EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
letbinding -> maybeFocus tuplePattern . EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 435
-- On COLON shift to state 482
-- On ascribeTyp shift to state 528
## Reductions:

State 435:
## Known stack suffix:
## maybeFocus tuplePattern EQUALS
## LR(1) items:
letbinding -> maybeFocus tuplePattern EQUALS . term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 436
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 436:
## Known stack suffix:
## maybeFocus tuplePattern EQUALS term
## LR(1) items:
letbinding -> maybeFocus tuplePattern EQUALS term . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letbinding -> maybeFocus tuplePattern EQUALS term

State 437:
## Known stack suffix:
## noSeqTerm
## LR(1) items:
term -> noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
term -> noSeqTerm . SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
term -> noSeqTerm . SEMICOLON_SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SEMICOLON_SEMICOLON shift to state 438
-- On SEMICOLON shift to state 480
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production term -> noSeqTerm

State 438:
## Known stack suffix:
## noSeqTerm SEMICOLON_SEMICOLON
## LR(1) items:
term -> noSeqTerm SEMICOLON_SEMICOLON . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 439
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 439:
## Known stack suffix:
## noSeqTerm SEMICOLON_SEMICOLON term
## LR(1) items:
term -> noSeqTerm SEMICOLON_SEMICOLON term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> noSeqTerm SEMICOLON_SEMICOLON term

State 440:
## Known stack suffix:
## lidentOrUnderscore
## LR(1) items:
term -> lidentOrUnderscore . LONG_LEFT_ARROW noSeqTerm SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmRefinement -> lidentOrUnderscore . COLON appTerm refineOpt [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LONG_LEFT_ARROW shift to state 441
-- On COLON shift to state 316
## Reductions:

State 441:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW . noSeqTerm SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 442
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 442:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm . SEMICOLON term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SEMICOLON shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 444
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 444:
## Known stack suffix:
## lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term
## LR(1) items:
term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> lidentOrUnderscore LONG_LEFT_ARROW noSeqTerm SEMICOLON term

State 445:
## Known stack suffix:
## atomicTermNotQUident
## LR(1) items:
atomicTerm -> atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
indexingTerm -> atomicTermNotQUident . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LPAREN term RPAREN LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LBRACK term RBRACK LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> atomicTermNotQUident . DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 446
-- On DOT_LENS_PAREN_LEFT shift to state 464
-- On DOT_LBRACK_BAR shift to state 469
-- On DOT_LBRACK shift to state 474
-- On nonempty_list(dotOperator) shift to state 479
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production atomicTerm -> atomicTermNotQUident

State 446:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN . term RPAREN LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN . term RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 447
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 447:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term . RPAREN LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term RPAREN
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 449
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 463
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN

State 449:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term RPAREN LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 450
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 450:
## Known stack suffix:
## atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> atomicTermNotQUident DOT_LPAREN term RPAREN LARROW noSeqTerm

State 451:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 452
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 452:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 453
## Reductions:

State 453:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 462
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT

State 454:
## Known stack suffix:
## DOT_LBRACK_BAR
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 455
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 455:
## Known stack suffix:
## DOT_LBRACK_BAR term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 456
## Reductions:

State 456:
## Known stack suffix:
## DOT_LBRACK_BAR term RBRACE
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 461
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE

State 457:
## Known stack suffix:
## DOT_LBRACK
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 458
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 458:
## Known stack suffix:
## DOT_LBRACK term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 459
## Reductions:

State 459:
## Known stack suffix:
## DOT_LBRACK term RBRACK
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 460
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK

State 460:
## Known stack suffix:
## DOT_LBRACK term RBRACK nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK nonempty_list(dotOperator)

State 461:
## Known stack suffix:
## DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE nonempty_list(dotOperator)

State 462:
## Known stack suffix:
## DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT nonempty_list(dotOperator)

State 463:
## Known stack suffix:
## DOT_LPAREN term RPAREN nonempty_list(dotOperator)
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN nonempty_list(dotOperator)

State 464:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT . term LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 465
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 465:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term . LENS_PAREN_RIGHT nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 467
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 462
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT

State 467:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 468
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 468:
## Known stack suffix:
## atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> atomicTermNotQUident DOT_LENS_PAREN_LEFT term LENS_PAREN_RIGHT LARROW noSeqTerm

State 469:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR . term RBRACE LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR . term RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 470
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 470:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term . RBRACE LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term . RBRACE nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term RBRACE
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 472
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 461
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LBRACK_BAR term RBRACE

State 472:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 473
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 473:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK_BAR term RBRACE LARROW noSeqTerm

State 474:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK . term RBRACK LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK . term RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 475
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 475:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term . RBRACK LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term . RBRACK nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 476
## Reductions:

State 476:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term RBRACK
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK . LARROW noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LARROW shift to state 477
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 460
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LBRACK term RBRACK

State 477:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term RBRACK LARROW
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 478
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 478:
## Known stack suffix:
## atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm
## LR(1) items:
noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> atomicTermNotQUident DOT_LBRACK term RBRACK LARROW noSeqTerm

State 479:
## Known stack suffix:
## atomicTermNotQUident nonempty_list(dotOperator)
## LR(1) items:
indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production indexingTerm -> atomicTermNotQUident nonempty_list(dotOperator)

State 480:
## Known stack suffix:
## noSeqTerm SEMICOLON
## LR(1) items:
term -> noSeqTerm SEMICOLON . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 481
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 481:
## Known stack suffix:
## noSeqTerm SEMICOLON term
## LR(1) items:
term -> noSeqTerm SEMICOLON term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> noSeqTerm SEMICOLON term

State 482:
## Known stack suffix:
## COLON
## LR(1) items:
ascribeTyp -> COLON . tmArrow(tmNoEq) option(__anonymous_5) [ EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 524
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 483:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN . OPPREFIX RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX3 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX4 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0a RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0b RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0c RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX0d RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX1 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OPINFIX2 RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . PIPE_RIGHT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . COLON_EQUALS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . COLON_COLON RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
atomicTermNotQUident -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
projectionLHS -> LPAREN . term option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SPLICE SET_RANGE_OF REIFY REIFIABLE REFLECTABLE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DEFAULT COLON_COLON CHAR BYTEARRAY BY BEGIN BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT ]
tmArrow(tmNoEq) -> LPAREN . aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PIPE_RIGHT shift to state 48
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OP_MIXFIX_ASSIGNMENT shift to state 50
-- On OP_MIXFIX_ACCESS shift to state 52
-- On OPPREFIX shift to state 54
-- On OPINFIX4 shift to state 484
-- On OPINFIX3 shift to state 486
-- On OPINFIX2 shift to state 488
-- On OPINFIX1 shift to state 490
-- On OPINFIX0d shift to state 492
-- On OPINFIX0c shift to state 494
-- On OPINFIX0b shift to state 496
-- On OPINFIX0a shift to state 498
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On COLON_EQUALS shift to state 500
-- On COLON_COLON shift to state 502
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 504
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 510
-- On appTerm shift to state 320
## Reductions:

State 484:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX4 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX4 RPAREN

State 486:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX3 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX3 RPAREN

State 488:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX2 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 489
## Reductions:

State 489:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX2 RPAREN

State 490:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX1 . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 491
## Reductions:

State 491:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX1 RPAREN

State 492:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0d . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX0d RPAREN

State 494:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0c . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 495
## Reductions:

State 495:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX0c RPAREN

State 496:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0b . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX0b RPAREN

State 498:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0a . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 499
## Reductions:

State 499:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN OPINFIX0a RPAREN

State 500:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_EQUALS . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 501
## Reductions:

State 501:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN COLON_EQUALS RPAREN

State 502:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_COLON . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 503
## Reductions:

State 503:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
atomicTermNotQUident -> LPAREN COLON_COLON RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LPAREN COLON_COLON RPAREN

State 504:
## Known stack suffix:
## LPAREN term
## LR(1) items:
projectionLHS -> LPAREN term . option(pair(hasSort,simpleTerm)) RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On SUBKIND shift to state 505
-- On option(pair(hasSort,simpleTerm)) shift to state 506
-- On hasSort shift to state 508
## Reductions:
-- On RPAREN
--   reduce production option(pair(hasSort,simpleTerm)) ->

State 505:
## Known stack suffix:
## SUBKIND
## LR(1) items:
hasSort -> SUBKIND . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FUN FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hasSort -> SUBKIND

State 506:
## Known stack suffix:
## LPAREN term option(pair(hasSort,simpleTerm))
## LR(1) items:
projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 507
## Reductions:

State 507:
## Known stack suffix:
## LPAREN term option(pair(hasSort,simpleTerm)) RPAREN
## LR(1) items:
projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> LPAREN term option(pair(hasSort,simpleTerm)) RPAREN

State 508:
## Known stack suffix:
## hasSort
## LR(1) items:
option(pair(hasSort,simpleTerm)) -> hasSort . simpleTerm [ RPAREN ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 509
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 509:
## Known stack suffix:
## hasSort simpleTerm
## LR(1) items:
option(pair(hasSort,simpleTerm)) -> hasSort simpleTerm . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(pair(hasSort,simpleTerm)) -> hasSort simpleTerm

State 510:
## Known stack suffix:
## LPAREN aqual
## LR(1) items:
tmArrow(tmFormula) -> aqual . tmFormula RARROW tmArrow(tmFormula) [ SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN IMPLIES IFF ]
tmArrow(tmNoEq) -> LPAREN aqual . tmNoEq RPAREN RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 511
-- On tmNoEq shift to state 512
-- On tmFormula shift to state 369
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 511:
## Known stack suffix:
## tmNoEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . [ RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS ]
tmNoEq -> tmNoEqWith(tmRefinement) . [ RPAREN ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS EQUALS DISJUNCTION CONJUNCTION COMMA COLON_EQUALS
--   reduce production tmEqWith(tmRefinement) -> tmNoEqWith(tmRefinement)
-- On RPAREN
--   reduce production tmNoEq -> tmNoEqWith(tmRefinement)

State 512:
## Known stack suffix:
## LPAREN aqual tmNoEq
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq . RPAREN RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RPAREN shift to state 513
## Reductions:

State 513:
## Known stack suffix:
## LPAREN aqual tmNoEq RPAREN
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN . RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RARROW shift to state 514
## Reductions:

State 514:
## Known stack suffix:
## LPAREN aqual tmNoEq RPAREN RARROW
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW . tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 523
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 515:
## Known stack suffix:
## tmNoEqWith(tmRefinement)
## LR(1) items:
tmNoEq -> tmNoEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . COLON_COLON tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . AMP tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX3 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . BACKTICK qlident BACKTICK tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
tmNoEqWith(tmRefinement) -> tmNoEqWith(tmRefinement) . OPINFIX4 tmNoEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPINFIX4 OPINFIX3 OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON_COLON BY BACKTICK ASSUME AND AMP ABSTRACT ]
## Transitions:
-- On OPINFIX4 shift to state 313
-- On OPINFIX3 shift to state 321
-- On COLON_COLON shift to state 327
-- On BACKTICK shift to state 323
-- On AMP shift to state 329
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT
--   reduce production tmNoEq -> tmNoEqWith(tmRefinement)

State 516:
## Known stack suffix:
## tmNoEq
## LR(1) items:
tmArrow(tmNoEq) -> tmNoEq . RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
tmArrow(tmNoEq) -> tmNoEq . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RARROW shift to state 517
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT
--   reduce production tmArrow(tmNoEq) -> tmNoEq

State 517:
## Known stack suffix:
## tmNoEq RARROW
## LR(1) items:
tmArrow(tmNoEq) -> tmNoEq RARROW . tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 518
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 518:
## Known stack suffix:
## tmNoEq RARROW tmArrow(tmNoEq)
## LR(1) items:
tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmArrow(tmNoEq) -> tmNoEq RARROW tmArrow(tmNoEq)

State 519:
## Known stack suffix:
## aqual
## LR(1) items:
tmArrow(tmNoEq) -> aqual . tmNoEq RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 520
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 520:
## Known stack suffix:
## aqual tmNoEq
## LR(1) items:
tmArrow(tmNoEq) -> aqual tmNoEq . RARROW tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On RARROW shift to state 521
## Reductions:

State 521:
## Known stack suffix:
## aqual tmNoEq RARROW
## LR(1) items:
tmArrow(tmNoEq) -> aqual tmNoEq RARROW . tmArrow(tmNoEq) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 522
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 522:
## Known stack suffix:
## aqual tmNoEq RARROW tmArrow(tmNoEq)
## LR(1) items:
tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmArrow(tmNoEq) -> aqual tmNoEq RARROW tmArrow(tmNoEq)

State 523:
## Known stack suffix:
## LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)
## LR(1) items:
tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmArrow(tmNoEq) -> LPAREN aqual tmNoEq RPAREN RARROW tmArrow(tmNoEq)

State 524:
## Known stack suffix:
## COLON tmArrow(tmNoEq)
## LR(1) items:
ascribeTyp -> COLON tmArrow(tmNoEq) . option(__anonymous_5) [ EQUALS ]
## Transitions:
-- On BY shift to state 525
-- On option(__anonymous_5) shift to state 527
## Reductions:
-- On EQUALS
--   reduce production option(__anonymous_5) ->

State 525:
## Known stack suffix:
## BY
## LR(1) items:
option(__anonymous_5) -> BY . atomicTerm [ EQUALS ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## BY atomicTerm
## LR(1) items:
option(__anonymous_5) -> BY atomicTerm . [ EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(__anonymous_5) -> BY atomicTerm

State 527:
## Known stack suffix:
## COLON tmArrow(tmNoEq) option(__anonymous_5)
## LR(1) items:
ascribeTyp -> COLON tmArrow(tmNoEq) option(__anonymous_5) . [ EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ascribeTyp -> COLON tmArrow(tmNoEq) option(__anonymous_5)

State 528:
## Known stack suffix:
## maybeFocus tuplePattern ascribeTyp
## LR(1) items:
letbinding -> maybeFocus tuplePattern ascribeTyp . EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 529
## Reductions:

State 529:
## Known stack suffix:
## maybeFocus tuplePattern ascribeTyp EQUALS
## LR(1) items:
letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS . term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 530
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 530:
## Known stack suffix:
## maybeFocus tuplePattern ascribeTyp EQUALS term
## LR(1) items:
letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letbinding -> maybeFocus tuplePattern ascribeTyp EQUALS term

State 531:
## Known stack suffix:
## maybeFocus lidentOrOperator
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator . nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 207
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On patternOrMultibinder shift to state 532
-- On path(uident) shift to state 100
-- On nonempty_list(patternOrMultibinder) shift to state 535
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 534
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 532:
## Known stack suffix:
## patternOrMultibinder
## LR(1) items:
nonempty_list(patternOrMultibinder) -> patternOrMultibinder . [ RARROW EQUALS COLON ]
nonempty_list(patternOrMultibinder) -> patternOrMultibinder . nonempty_list(patternOrMultibinder) [ RARROW EQUALS COLON ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 207
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On quident shift to state 157
-- On patternOrMultibinder shift to state 532
-- On path(uident) shift to state 100
-- On nonempty_list(patternOrMultibinder) shift to state 533
-- On lident shift to state 159
-- On constant shift to state 160
-- On atomicPattern shift to state 534
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On RARROW EQUALS COLON
--   reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder

State 533:
## Known stack suffix:
## patternOrMultibinder nonempty_list(patternOrMultibinder)
## LR(1) items:
nonempty_list(patternOrMultibinder) -> patternOrMultibinder nonempty_list(patternOrMultibinder) . [ RARROW EQUALS COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(patternOrMultibinder) -> patternOrMultibinder nonempty_list(patternOrMultibinder)

State 534:
## Known stack suffix:
## atomicPattern
## LR(1) items:
patternOrMultibinder -> atomicPattern . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patternOrMultibinder -> atomicPattern

State 535:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder)
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) . option(ascribeTyp) EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On COLON shift to state 482
-- On option(ascribeTyp) shift to state 536
-- On ascribeTyp shift to state 539
## Reductions:
-- On EQUALS
--   reduce production option(ascribeTyp) ->

State 536:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp)
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) . EQUALS term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 537
## Reductions:

State 537:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS . term [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 538
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 538:
## Known stack suffix:
## maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term
## LR(1) items:
letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letbinding -> maybeFocus lidentOrOperator nonempty_list(patternOrMultibinder) option(ascribeTyp) EQUALS term

State 539:
## Known stack suffix:
## ascribeTyp
## LR(1) items:
option(ascribeTyp) -> ascribeTyp . [ EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(ascribeTyp) -> ascribeTyp

State 540:
## Known stack suffix:
## attribute LET letqualifier letbinding
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding . list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACK_AT shift to state 17
-- On AND shift to state 541
-- On list(attr_letbinding) shift to state 544
-- On attribute shift to state 547
-- On attr_letbinding shift to state 550
## Reductions:
-- On IN
--   reduce production list(attr_letbinding) ->

State 541:
## Known stack suffix:
## AND
## LR(1) items:
attr_letbinding -> AND . letbinding [ LBRACK_AT IN AND ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 542
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production boption(SQUIGGLY_RARROW) ->

State 542:
## Known stack suffix:
## AND letbinding
## LR(1) items:
attr_letbinding -> AND letbinding . [ LBRACK_AT IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_letbinding -> AND letbinding

State 543:
## Known stack suffix:
## boption(SQUIGGLY_RARROW)
## LR(1) items:
maybeFocus -> boption(SQUIGGLY_RARROW) . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production maybeFocus -> boption(SQUIGGLY_RARROW)

State 544:
## Known stack suffix:
## attribute LET letqualifier letbinding list(attr_letbinding)
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) . IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IN shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## attribute LET letqualifier letbinding list(attr_letbinding) IN
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 546
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 546:
## Known stack suffix:
## attribute LET letqualifier letbinding list(attr_letbinding) IN term
## LR(1) items:
noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> attribute LET letqualifier letbinding list(attr_letbinding) IN term

State 547:
## Known stack suffix:
## attribute
## LR(1) items:
attr_letbinding -> attribute . AND letbinding [ LBRACK_AT IN AND ]
## Transitions:
-- On AND shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## attribute AND
## LR(1) items:
attr_letbinding -> attribute AND . letbinding [ LBRACK_AT IN AND ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 549
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production boption(SQUIGGLY_RARROW) ->

State 549:
## Known stack suffix:
## attribute AND letbinding
## LR(1) items:
attr_letbinding -> attribute AND letbinding . [ LBRACK_AT IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_letbinding -> attribute AND letbinding

State 550:
## Known stack suffix:
## attr_letbinding
## LR(1) items:
list(attr_letbinding) -> attr_letbinding . list(attr_letbinding) [ IN ]
## Transitions:
-- On LBRACK_AT shift to state 17
-- On AND shift to state 541
-- On list(attr_letbinding) shift to state 551
-- On attribute shift to state 547
-- On attr_letbinding shift to state 550
## Reductions:
-- On IN
--   reduce production list(attr_letbinding) ->

State 551:
## Known stack suffix:
## attr_letbinding list(attr_letbinding)
## LR(1) items:
list(attr_letbinding) -> attr_letbinding list(attr_letbinding) . [ IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(attr_letbinding) -> attr_letbinding list(attr_letbinding)

State 552:
## Known stack suffix:
## LBRACE noSeqTerm
## LR(1) items:
option(__anonymous_9) -> LBRACE noSeqTerm . RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 553
## Reductions:

State 553:
## Known stack suffix:
## LBRACE noSeqTerm RBRACE
## LR(1) items:
option(__anonymous_9) -> LBRACE noSeqTerm RBRACE . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(__anonymous_9) -> LBRACE noSeqTerm RBRACE

State 554:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt . RPAREN [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On RPAREN shift to state 555
## Reductions:

State 555:
## Known stack suffix:
## LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN
## LR(1) items:
multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiBinder -> LPAREN nonempty_list(aqualified(lidentOrUnderscore)) COLON simpleArrow refineOpt RPAREN

State 556:
## Known stack suffix:
## aqualified(lidentOrUnderscore)
## LR(1) items:
nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) . [ COLON ]
nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) . nonempty_list(aqualified(lidentOrUnderscore)) [ COLON ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lidentOrUnderscore)) shift to state 557
-- On lidentOrUnderscore shift to state 284
-- On aqualified(lidentOrUnderscore) shift to state 556
-- On aqualUniverses shift to state 288
## Reductions:
-- On COLON
--   reduce production nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore)

State 557:
## Known stack suffix:
## aqualified(lidentOrUnderscore) nonempty_list(aqualified(lidentOrUnderscore))
## LR(1) items:
nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) nonempty_list(aqualified(lidentOrUnderscore)) . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(aqualified(lidentOrUnderscore)) -> aqualified(lidentOrUnderscore) nonempty_list(aqualified(lidentOrUnderscore))

State 558:
## Known stack suffix:
## FORALL binders
## LR(1) items:
typ -> FORALL binders . DOT trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On DOT shift to state 559
## Reductions:

State 559:
## Known stack suffix:
## FORALL binders DOT
## LR(1) items:
typ -> FORALL binders DOT . trigger noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACE_COLON_PATTERN shift to state 293
-- On trigger shift to state 560
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT
--   reduce production trigger ->

State 560:
## Known stack suffix:
## FORALL binders DOT trigger
## LR(1) items:
typ -> FORALL binders DOT trigger . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 561
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 561:
## Known stack suffix:
## FORALL binders DOT trigger noSeqTerm
## LR(1) items:
typ -> FORALL binders DOT trigger noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> FORALL binders DOT trigger noSeqTerm

State 562:
## Known stack suffix:
## DOT_LPAREN term
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term . RPAREN nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## DOT_LPAREN term RPAREN
## LR(1) items:
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN . nonempty_list(dotOperator) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On DOT_LPAREN shift to state 241
-- On DOT_LENS_PAREN_LEFT shift to state 451
-- On DOT_LBRACK_BAR shift to state 454
-- On DOT_LBRACK shift to state 457
-- On nonempty_list(dotOperator) shift to state 463
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production nonempty_list(dotOperator) -> DOT_LPAREN term RPAREN

State 564:
## Known stack suffix:
## universe
## LR(1) items:
argTerm -> universe . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argTerm -> universe

State 565:
## Known stack suffix:
## indexingTerm list(argTerm)
## LR(1) items:
appTerm -> indexingTerm list(argTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production appTerm -> indexingTerm list(argTerm)

State 566:
## Known stack suffix:
## indexingTerm
## LR(1) items:
argTerm -> indexingTerm . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argTerm -> indexingTerm

State 567:
## Known stack suffix:
## argTerm
## LR(1) items:
list(argTerm) -> argTerm . list(argTerm) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNIV_HASH shift to state 221
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 238
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On universe shift to state 564
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(argTerm) shift to state 568
-- On lident shift to state 80
-- On indexingTerm shift to state 566
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On argTerm shift to state 567
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT
--   reduce production list(argTerm) ->

State 568:
## Known stack suffix:
## argTerm list(argTerm)
## LR(1) items:
list(argTerm) -> argTerm list(argTerm) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(argTerm) -> argTerm list(argTerm)

State 569:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX3
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 570
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 570:
## Known stack suffix:
## tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On BACKTICK shift to state 571
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON AMP
--   reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) OPINFIX3 tmNoEqWith(appTerm)

State 571:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK . qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On qlident shift to state 572
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 572:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK qlident
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident . BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On BACKTICK shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK qlident BACKTICK
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 574
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 574:
## Known stack suffix:
## tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP
--   reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) BACKTICK qlident BACKTICK tmNoEqWith(appTerm)

State 575:
## Known stack suffix:
## tmNoEqWith(appTerm) COLON_COLON
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 576
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 576:
## Known stack suffix:
## tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On OPINFIX3 shift to state 569
-- On COLON_COLON shift to state 575
-- On BACKTICK shift to state 571
-- On AMP shift to state 577
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS
--   reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) COLON_COLON tmNoEqWith(appTerm)

State 577:
## Known stack suffix:
## tmNoEqWith(appTerm) AMP
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP . tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 192
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 195
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 198
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmNoEqWith(appTerm) shift to state 578
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 254
## Reductions:

State 578:
## Known stack suffix:
## tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)
## LR(1) items:
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . COLON_COLON tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . AMP tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX3 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . BACKTICK qlident BACKTICK tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) . OPINFIX4 tmNoEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On OPINFIX4 shift to state 218
-- On OPINFIX3 shift to state 569
-- On BACKTICK shift to state 571
-- On AMP shift to state 577
## Reductions:
-- On RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON
--   reduce production tmNoEqWith(appTerm) -> tmNoEqWith(appTerm) AMP tmNoEqWith(appTerm)

State 579:
## Known stack suffix:
## BACKTICK tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(appTerm) -> BACKTICK tmEqWith(appTerm)

State 580:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow . refineOpt RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 581
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On RPAREN
--   reduce production option(__anonymous_9) ->

State 581:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt . RPAREN [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
-- On RPAREN shift to state 582
## Reductions:

State 582:
## Known stack suffix:
## LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN
## LR(1) items:
patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patternOrMultibinder -> LPAREN aqualified(lident) nonempty_list(aqualified(lident)) COLON simpleArrow refineOpt RPAREN

State 583:
## Known stack suffix:
## aqualified(lident)
## LR(1) items:
nonempty_list(aqualified(lident)) -> aqualified(lident) . [ COLON ]
nonempty_list(aqualified(lident)) -> aqualified(lident) . nonempty_list(aqualified(lident)) [ COLON ]
## Transitions:
-- On IDENT shift to state 62
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On nonempty_list(aqualified(lident)) shift to state 584
-- On lident shift to state 159
-- On aqualified(lident) shift to state 583
-- On aqualUniverses shift to state 164
## Reductions:
-- On COLON
--   reduce production nonempty_list(aqualified(lident)) -> aqualified(lident)

State 584:
## Known stack suffix:
## aqualified(lident) nonempty_list(aqualified(lident))
## LR(1) items:
nonempty_list(aqualified(lident)) -> aqualified(lident) nonempty_list(aqualified(lident)) . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(aqualified(lident)) -> aqualified(lident) nonempty_list(aqualified(lident))

State 585:
## Known stack suffix:
## FUN nonempty_list(patternOrMultibinder)
## LR(1) items:
simpleTerm -> FUN nonempty_list(patternOrMultibinder) . RARROW term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On RARROW shift to state 586
## Reductions:

State 586:
## Known stack suffix:
## FUN nonempty_list(patternOrMultibinder) RARROW
## LR(1) items:
simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 587
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 587:
## Known stack suffix:
## FUN nonempty_list(patternOrMultibinder) RARROW term
## LR(1) items:
simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simpleTerm -> FUN nonempty_list(patternOrMultibinder) RARROW term

State 588:
## Known stack suffix:
## qlident EQUALS noSeqTerm
## LR(1) items:
simpleDef -> qlident EQUALS noSeqTerm . [ SEMICOLON RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simpleDef -> qlident EQUALS noSeqTerm

State 589:
## Known stack suffix:
## simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production right_flexible_nonempty_list(SEMICOLON,simpleDef) -> simpleDef SEMICOLON right_flexible_list(SEMICOLON,simpleDef)

State 590:
## Known stack suffix:
## right_flexible_nonempty_list(SEMICOLON,simpleDef)
## LR(1) items:
recordExp -> right_flexible_nonempty_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production recordExp -> right_flexible_nonempty_list(SEMICOLON,simpleDef)

State 591:
## Known stack suffix:
## LBRACE recordExp
## LR(1) items:
tmNoEqWith(appTerm) -> LBRACE recordExp . RBRACE [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
-- On RBRACE shift to state 592
## Reductions:

State 592:
## Known stack suffix:
## LBRACE recordExp RBRACE
## LR(1) items:
tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE . [ RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(appTerm) -> LBRACE recordExp RBRACE

State 593:
## Known stack suffix:
## qlident
## LR(1) items:
qidentWithTypeArgs(qlident,option(fsTypeArgs)) -> qlident . option(fsTypeArgs) [ WITH UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT CHAR BYTEARRAY BEGIN BANG_LBRACE ]
simpleDef -> qlident . EQUALS noSeqTerm [ SEMICOLON RBRACE ]
simpleDef -> qlident . [ SEMICOLON RBRACE ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On EQUALS shift to state 205
-- On option(fsTypeArgs) shift to state 88
-- On fsTypeArgs shift to state 89
## Reductions:
-- On WITH UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT CHAR BYTEARRAY BEGIN BANG_LBRACE
--   reduce production option(fsTypeArgs) ->
-- On SEMICOLON RBRACE
--   reduce production simpleDef -> qlident

State 594:
## Known stack suffix:
## appTerm
## LR(1) items:
recordExp -> appTerm . WITH right_flexible_nonempty_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On WITH shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## appTerm WITH
## LR(1) items:
recordExp -> appTerm WITH . right_flexible_nonempty_list(SEMICOLON,simpleDef) [ RBRACE ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 94
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 596
-- On qlident shift to state 204
-- On path(lident) shift to state 98
-- On lident shift to state 80
## Reductions:

State 596:
## Known stack suffix:
## appTerm WITH right_flexible_nonempty_list(SEMICOLON,simpleDef)
## LR(1) items:
recordExp -> appTerm WITH right_flexible_nonempty_list(SEMICOLON,simpleDef) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production recordExp -> appTerm WITH right_flexible_nonempty_list(SEMICOLON,simpleDef)

State 597:
## Known stack suffix:
## MINUS tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> MINUS tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(appTerm) -> MINUS tmEqWith(appTerm)

State 598:
## Known stack suffix:
## QUOTE tmEqWith(appTerm)
## LR(1) items:
tmEqWith(appTerm) -> tmEqWith(appTerm) . EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . COLON_EQUALS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . PIPE_RIGHT tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0a tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0b tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0c tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX0d tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX1 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . OPINFIX2 tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> tmEqWith(appTerm) . MINUS tmEqWith(appTerm) [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm) . [ RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(appTerm) -> QUOTE tmEqWith(appTerm)

State 599:
## Known stack suffix:
## LPAREN tuplePattern COLON simpleArrow
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON simpleArrow . refineOpt RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On LBRACE shift to state 279
-- On refineOpt shift to state 600
-- On option(__anonymous_9) shift to state 319
## Reductions:
-- On RPAREN
--   reduce production option(__anonymous_9) ->

State 600:
## Known stack suffix:
## LPAREN tuplePattern COLON simpleArrow refineOpt
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt . RPAREN [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
-- On RPAREN shift to state 601
## Reductions:

State 601:
## Known stack suffix:
## LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN
## LR(1) items:
atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN . [ WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicPattern -> LPAREN tuplePattern COLON simpleArrow refineOpt RPAREN

State 602:
## Known stack suffix:
## BAR
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR . patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On quident shift to state 156
-- On patternBranch shift to state 607
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 603:
## Known stack suffix:
## tuplePattern
## LR(1) items:
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern . [ WHEN SQUIGGLY_RARROW RARROW ]
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern . BAR separated_nonempty_list(BAR,tuplePattern) [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
-- On BAR shift to state 604
## Reductions:
-- On WHEN SQUIGGLY_RARROW RARROW
--   reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern

State 604:
## Known stack suffix:
## tuplePattern BAR
## LR(1) items:
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR . separated_nonempty_list(BAR,tuplePattern) [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 605
-- On quident shift to state 156
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 605:
## Known stack suffix:
## tuplePattern BAR separated_nonempty_list(BAR,tuplePattern)
## LR(1) items:
separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR separated_nonempty_list(BAR,tuplePattern) . [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(BAR,tuplePattern) -> tuplePattern BAR separated_nonempty_list(BAR,tuplePattern)

State 606:
## Known stack suffix:
## separated_nonempty_list(BAR,tuplePattern)
## LR(1) items:
disjunctivePattern -> separated_nonempty_list(BAR,tuplePattern) . [ WHEN SQUIGGLY_RARROW RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production disjunctivePattern -> separated_nonempty_list(BAR,tuplePattern)

State 607:
## Known stack suffix:
## BAR patternBranch
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> BAR patternBranch

State 608:
## Known stack suffix:
## disjunctivePattern
## LR(1) items:
patternBranch -> disjunctivePattern . maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
patternBranch -> disjunctivePattern . WHEN tmFormula maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On WHEN shift to state 609
-- On SQUIGGLY_RARROW shift to state 611
-- On RARROW shift to state 612
-- On maybeFocusArrow shift to state 615
## Reductions:

State 609:
## Known stack suffix:
## disjunctivePattern WHEN
## LR(1) items:
patternBranch -> disjunctivePattern WHEN . tmFormula maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 610
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 610:
## Known stack suffix:
## disjunctivePattern WHEN tmFormula
## LR(1) items:
patternBranch -> disjunctivePattern WHEN tmFormula . maybeFocusArrow term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ SQUIGGLY_RARROW RARROW DISJUNCTION ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 611
-- On RARROW shift to state 612
-- On DISJUNCTION shift to state 372
-- On maybeFocusArrow shift to state 613
## Reductions:

State 611:
## Known stack suffix:
## SQUIGGLY_RARROW
## LR(1) items:
maybeFocusArrow -> SQUIGGLY_RARROW . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production maybeFocusArrow -> SQUIGGLY_RARROW

State 612:
## Known stack suffix:
## RARROW
## LR(1) items:
maybeFocusArrow -> RARROW . [ UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production maybeFocusArrow -> RARROW

State 613:
## Known stack suffix:
## disjunctivePattern WHEN tmFormula maybeFocusArrow
## LR(1) items:
patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 614
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 614:
## Known stack suffix:
## disjunctivePattern WHEN tmFormula maybeFocusArrow term
## LR(1) items:
patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patternBranch -> disjunctivePattern WHEN tmFormula maybeFocusArrow term

State 615:
## Known stack suffix:
## disjunctivePattern maybeFocusArrow
## LR(1) items:
patternBranch -> disjunctivePattern maybeFocusArrow . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 616
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 616:
## Known stack suffix:
## disjunctivePattern maybeFocusArrow term
## LR(1) items:
patternBranch -> disjunctivePattern maybeFocusArrow term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patternBranch -> disjunctivePattern maybeFocusArrow term

State 617:
## Known stack suffix:
## FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)
## LR(1) items:
noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BAR shift to state 618
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK ASSUME AND ABSTRACT
--   reduce production noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch)

State 618:
## Known stack suffix:
## reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR . patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On quident shift to state 156
-- On patternBranch shift to state 619
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 619:
## Known stack suffix:
## reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch

State 620:
## Known stack suffix:
## patternBranch
## LR(1) items:
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reverse_left_flexible_nonempty_list(BAR,patternBranch) -> patternBranch

State 621:
## Known stack suffix:
## IF noSeqTerm
## LR(1) items:
noSeqTerm -> IF noSeqTerm . THEN noSeqTerm ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF noSeqTerm . THEN noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On THEN shift to state 622
## Reductions:

State 622:
## Known stack suffix:
## IF noSeqTerm THEN
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN . noSeqTerm ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF noSeqTerm THEN . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 623
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 623:
## Known stack suffix:
## IF noSeqTerm THEN noSeqTerm
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm . ELSE noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
noSeqTerm -> IF noSeqTerm THEN noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On ELSE shift to state 624
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm

State 624:
## Known stack suffix:
## IF noSeqTerm THEN noSeqTerm ELSE
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE . noSeqTerm [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 625
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 625:
## Known stack suffix:
## IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
## LR(1) items:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm

State 626:
## Known stack suffix:
## quident DOT_LPAREN term
## LR(1) items:
atomicTermQUident -> quident DOT_LPAREN term . RPAREN [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RPAREN shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## quident DOT_LPAREN term RPAREN
## LR(1) items:
atomicTermQUident -> quident DOT_LPAREN term RPAREN . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermQUident -> quident DOT_LPAREN term RPAREN

State 628:
## Known stack suffix:
## quident some(fsTypeArgs)
## LR(1) items:
qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs) . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident some(fsTypeArgs)

State 629:
## Known stack suffix:
## fsTypeArgs
## LR(1) items:
some(fsTypeArgs) -> fsTypeArgs . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production some(fsTypeArgs) -> fsTypeArgs

State 630:
## Known stack suffix:
## BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm))
## LR(1) items:
projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) . RBRACE [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 631
## Reductions:

State 631:
## Known stack suffix:
## BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE
## LR(1) items:
projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> BANG_LBRACE loption(separated_nonempty_list(COMMA,appTerm)) RBRACE

State 632:
## Known stack suffix:
## appTerm
## LR(1) items:
separated_nonempty_list(COMMA,appTerm) -> appTerm . [ RBRACE ]
separated_nonempty_list(COMMA,appTerm) -> appTerm . COMMA separated_nonempty_list(COMMA,appTerm) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 633
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,appTerm) -> appTerm

State 633:
## Known stack suffix:
## appTerm COMMA
## LR(1) items:
separated_nonempty_list(COMMA,appTerm) -> appTerm COMMA . separated_nonempty_list(COMMA,appTerm) [ RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On separated_nonempty_list(COMMA,appTerm) shift to state 634
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 632
## Reductions:

State 634:
## Known stack suffix:
## appTerm COMMA separated_nonempty_list(COMMA,appTerm)
## LR(1) items:
separated_nonempty_list(COMMA,appTerm) -> appTerm COMMA separated_nonempty_list(COMMA,appTerm) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,appTerm) -> appTerm COMMA separated_nonempty_list(COMMA,appTerm)

State 635:
## Known stack suffix:
## LBRACE recordExp
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE recordExp . RBRACE [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACE shift to state 636
## Reductions:

State 636:
## Known stack suffix:
## LBRACE recordExp RBRACE
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(tmRefinement) -> LBRACE recordExp RBRACE

State 637:
## Known stack suffix:
## LET OPEN quident IN term
## LR(1) items:
noSeqTerm -> LET OPEN quident IN term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> LET OPEN quident IN term

State 638:
## Known stack suffix:
## LET letqualifier
## LR(1) items:
noSeqTerm -> LET letqualifier . letbinding list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On maybeFocus shift to state 403
-- On letbinding shift to state 639
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production boption(SQUIGGLY_RARROW) ->

State 639:
## Known stack suffix:
## LET letqualifier letbinding
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding . list(attr_letbinding) IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On LBRACK_AT shift to state 17
-- On AND shift to state 541
-- On list(attr_letbinding) shift to state 640
-- On attribute shift to state 547
-- On attr_letbinding shift to state 550
## Reductions:
-- On IN
--   reduce production list(attr_letbinding) ->

State 640:
## Known stack suffix:
## LET letqualifier letbinding list(attr_letbinding)
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) . IN term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On IN shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## LET letqualifier letbinding list(attr_letbinding) IN
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN . term [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 642
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 642:
## Known stack suffix:
## LET letqualifier letbinding list(attr_letbinding) IN term
## LR(1) items:
noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> LET letqualifier letbinding list(attr_letbinding) IN term

State 643:
## Known stack suffix:
## BEGIN term
## LR(1) items:
atomicTermNotQUident -> BEGIN term . END [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On END shift to state 644
## Reductions:

State 644:
## Known stack suffix:
## BEGIN term END
## LR(1) items:
atomicTermNotQUident -> BEGIN term END . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> BEGIN term END

State 645:
## Known stack suffix:
## OPPREFIX atomicTermQUident
## LR(1) items:
opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opPrefixTerm(atomicTermQUident) -> OPPREFIX atomicTermQUident

State 646:
## Known stack suffix:
## OPPREFIX atomicTermNotQUident
## LR(1) items:
opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opPrefixTerm(atomicTermNotQUident) -> OPPREFIX atomicTermNotQUident

State 647:
## Known stack suffix:
## LPAREN aqual
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual . tmFormula RPAREN RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmArrow(tmFormula) -> aqual . tmFormula RARROW tmArrow(tmFormula) [ SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN IMPLIES IFF ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 648
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 648:
## Known stack suffix:
## LPAREN aqual tmFormula
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula . RPAREN RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmArrow(tmFormula) -> aqual tmFormula . RARROW tmArrow(tmFormula) [ SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN IMPLIES IFF ]
tmFormula -> tmFormula . DISJUNCTION tmConjunction [ RPAREN RARROW DISJUNCTION ]
## Transitions:
-- On RPAREN shift to state 649
-- On RARROW shift to state 370
-- On DISJUNCTION shift to state 372
## Reductions:

State 649:
## Known stack suffix:
## LPAREN aqual tmFormula RPAREN
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN . RARROW tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On RARROW shift to state 650
## Reductions:

State 650:
## Known stack suffix:
## LPAREN aqual tmFormula RPAREN RARROW
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW . tmArrow(tmFormula) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 651
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 651:
## Known stack suffix:
## LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)
## LR(1) items:
tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmArrow(tmFormula) -> LPAREN aqual tmFormula RPAREN RARROW tmArrow(tmFormula)

State 652:
## Known stack suffix:
## MATCH term
## LR(1) items:
noSeqTerm -> MATCH term . WITH reverse_left_flexible_list(BAR,__anonymous_7) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On WITH shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## MATCH term WITH
## LR(1) items:
noSeqTerm -> MATCH term WITH . reverse_left_flexible_list(BAR,__anonymous_7) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On reverse_left_flexible_list(BAR,__anonymous_7) shift to state 654
-- On quident shift to state 156
-- On patternBranch shift to state 657
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT
--   reduce production reverse_left_flexible_list(BAR,__anonymous_7) ->

State 654:
## Known stack suffix:
## MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)
## LR(1) items:
noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) . BAR patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BAR shift to state 655
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK ASSUME AND ABSTRACT
--   reduce production noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_7)

State 655:
## Known stack suffix:
## reverse_left_flexible_list(BAR,__anonymous_7) BAR
## LR(1) items:
reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR . patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On quident shift to state 156
-- On patternBranch shift to state 656
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 656:
## Known stack suffix:
## reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch
## LR(1) items:
reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> reverse_left_flexible_list(BAR,__anonymous_7) BAR patternBranch

State 657:
## Known stack suffix:
## patternBranch
## LR(1) items:
reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reverse_left_flexible_list(BAR,__anonymous_7) -> patternBranch

State 658:
## Known stack suffix:
## LBRACK right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
## LR(1) items:
projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK

State 660:
## Known stack suffix:
## noSeqTerm
## LR(1) items:
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm . [ RBRACK BAR_RBRACK ]
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm . SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm) [ RBRACK BAR_RBRACK ]
## Transitions:
-- On SEMICOLON shift to state 661
## Reductions:
-- On RBRACK BAR_RBRACK
--   reduce production right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm

State 661:
## Known stack suffix:
## noSeqTerm SEMICOLON
## LR(1) items:
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm SEMICOLON . right_flexible_list(SEMICOLON,noSeqTerm) [ RBRACK BAR_RBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On right_flexible_list(SEMICOLON,noSeqTerm) shift to state 662
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 660
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On RBRACK BAR_RBRACK
--   reduce production right_flexible_list(SEMICOLON,noSeqTerm) ->

State 662:
## Known stack suffix:
## noSeqTerm SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm) . [ RBRACK BAR_RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production right_flexible_list(SEMICOLON,noSeqTerm) -> noSeqTerm SEMICOLON right_flexible_list(SEMICOLON,noSeqTerm)

State 663:
## Known stack suffix:
## MINUS tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(tmRefinement) -> MINUS tmEqWith(tmRefinement)

State 664:
## Known stack suffix:
## REQUIRES typ
## LR(1) items:
noSeqTerm -> REQUIRES typ . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> REQUIRES typ

State 665:
## Known stack suffix:
## LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) . BAR_RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On BAR_RBRACK shift to state 666
## Reductions:

State 666:
## Known stack suffix:
## LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK
## LR(1) items:
projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> LBRACK_BAR right_flexible_list(SEMICOLON,noSeqTerm) BAR_RBRACK

State 667:
## Known stack suffix:
## PERC_BACKTICK atomicTerm
## LR(1) items:
tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(tmRefinement) -> PERC_BACKTICK atomicTerm

State 668:
## Known stack suffix:
## QUOTE tmEqWith(tmRefinement)
## LR(1) items:
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . COLON_EQUALS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . PIPE_RIGHT tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0a tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0b tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0c tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX0d tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX1 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . OPINFIX2 tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> tmEqWith(tmRefinement) . MINUS tmEqWith(tmRefinement) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmEqWith(tmRefinement) -> QUOTE tmEqWith(tmRefinement)

State 669:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq . COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On COMMA shift to state 670
## Reductions:

State 670:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq COMMA
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA . separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On separated_nonempty_list(COMMA,tmEq) shift to state 671
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 320
## Reductions:

State 671:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq)
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) . LENS_PAREN_RIGHT [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On LENS_PAREN_RIGHT shift to state 672
## Reductions:

State 672:
## Known stack suffix:
## LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT
## LR(1) items:
atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomicTermNotQUident -> LENS_PAREN_LEFT tmEq COMMA separated_nonempty_list(COMMA,tmEq) LENS_PAREN_RIGHT

State 673:
## Known stack suffix:
## SYNTH atomicTerm
## LR(1) items:
noSeqTerm -> SYNTH atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production noSeqTerm -> SYNTH atomicTerm

State 674:
## Known stack suffix:
## quident
## LR(1) items:
projectionLHS -> quident . QMARK_DOT lident [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
projectionLHS -> quident . QMARK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
qidentWithTypeArgs(quident,some(fsTypeArgs)) -> quident . some(fsTypeArgs) [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On TYP_APP_LESS shift to state 84
-- On QMARK_DOT shift to state 109
-- On QMARK shift to state 111
-- On some(fsTypeArgs) shift to state 628
-- On fsTypeArgs shift to state 629
## Reductions:

State 675:
## Known stack suffix:
## TILDE atomicTerm
## LR(1) items:
tmNoEqWith(tmRefinement) -> TILDE atomicTerm . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tmNoEqWith(tmRefinement) -> TILDE atomicTerm

State 676:
## Known stack suffix:
## TRY term
## LR(1) items:
noSeqTerm -> TRY term . WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On WITH shift to state 677
## Reductions:

State 677:
## Known stack suffix:
## TRY term WITH
## LR(1) items:
noSeqTerm -> TRY term WITH . reverse_left_flexible_nonempty_list(BAR,patternBranch) [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 118
-- On LENS_PAREN_LEFT shift to state 143
-- On LBRACK shift to state 144
-- On LBRACE shift to state 145
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On HASH shift to state 150
-- On FALSE shift to state 63
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BAR shift to state 602
-- On uident shift to state 70
-- On tvar shift to state 153
-- On tuplePattern shift to state 603
-- On separated_nonempty_list(COMMA,constructorPattern) shift to state 155
-- On separated_nonempty_list(BAR,tuplePattern) shift to state 606
-- On reverse_left_flexible_nonempty_list(BAR,patternBranch) shift to state 678
-- On quident shift to state 156
-- On patternBranch shift to state 620
-- On path(uident) shift to state 100
-- On lident shift to state 159
-- On disjunctivePattern shift to state 608
-- On constructorPattern shift to state 166
-- On constant shift to state 160
-- On atomicPattern shift to state 169
-- On aqualified(lident) shift to state 163
-- On aqualUniverses shift to state 164
## Reductions:

State 678:
## Known stack suffix:
## TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)
## LR(1) items:
noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) . [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
reverse_left_flexible_nonempty_list(BAR,patternBranch) -> reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch [ WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT # ]
## Transitions:
-- On BAR shift to state 618
## Reductions:
-- On WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK ASSUME AND ABSTRACT
--   reduce production noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch)

State 679:
## Known stack suffix:
## PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm)
## LR(1) items:
projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) . RBRACK [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
-- On RBRACK shift to state 680
## Reductions:

State 680:
## Known stack suffix:
## PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK
## LR(1) items:
projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK . [ WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production projectionLHS -> PERCENT_LBRACK right_flexible_list(SEMICOLON,noSeqTerm) RBRACK

State 681:
## Known stack suffix:
## LBRACK_AT list(atomicTerm)
## LR(1) items:
attribute -> LBRACK_AT list(atomicTerm) . RBRACK [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On RBRACK shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## LBRACK_AT list(atomicTerm) RBRACK
## LR(1) items:
attribute -> LBRACK_AT list(atomicTerm) RBRACK . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> LBRACK_AT list(atomicTerm) RBRACK

State 683:
## Known stack suffix:
## atomicTerm
## LR(1) items:
list(atomicTerm) -> atomicTerm . list(atomicTerm) [ RBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(atomicTerm) shift to state 684
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 683
## Reductions:
-- On RBRACK
--   reduce production list(atomicTerm) ->

State 684:
## Known stack suffix:
## atomicTerm list(atomicTerm)
## LR(1) items:
list(atomicTerm) -> atomicTerm list(atomicTerm) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(atomicTerm) -> atomicTerm list(atomicTerm)

State 685:
## Known stack suffix:
## IRREDUCIBLE
## LR(1) items:
qualifier -> IRREDUCIBLE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> IRREDUCIBLE

State 686:
## Known stack suffix:
## INLINE_FOR_EXTRACTION
## LR(1) items:
qualifier -> INLINE_FOR_EXTRACTION . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> INLINE_FOR_EXTRACTION

State 687:
## Known stack suffix:
## INLINE
## LR(1) items:
qualifier -> INLINE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> INLINE

State 688:
## Known stack suffix:
## FSDOC
## LR(1) items:
decoration -> FSDOC . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decoration -> FSDOC

State 689:
## Known stack suffix:
## DEFAULT
## LR(1) items:
qualifier -> DEFAULT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> DEFAULT

State 690:
## Known stack suffix:
## ASSUME
## LR(1) items:
decl -> ASSUME . uident COLON noSeqTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
qualifier -> ASSUME . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 691
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT
--   reduce production qualifier -> ASSUME

State 691:
## Known stack suffix:
## ASSUME uident
## LR(1) items:
decl -> ASSUME uident . COLON noSeqTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On COLON shift to state 692
## Reductions:

State 692:
## Known stack suffix:
## ASSUME uident COLON
## LR(1) items:
decl -> ASSUME uident COLON . noSeqTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 693
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 693:
## Known stack suffix:
## ASSUME uident COLON noSeqTerm
## LR(1) items:
decl -> ASSUME uident COLON noSeqTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> ASSUME uident COLON noSeqTerm

State 694:
## Known stack suffix:
## ABSTRACT
## LR(1) items:
qualifier -> ABSTRACT . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> ABSTRACT

State 695:
## Known stack suffix:
## qualifier
## LR(1) items:
decoration -> qualifier . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decoration -> qualifier

State 696:
## Known stack suffix:
## list(decoration)
## LR(1) items:
decl -> list(decoration) . rawDecl [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On VAL shift to state 697
-- On TYPE shift to state 734
-- On SUB_EFFECT shift to state 788
-- On SPLICE shift to state 805
-- On PRAGMA_SET_OPTIONS shift to state 814
-- On PRAGMA_RESET_OPTIONS shift to state 816
-- On OPEN shift to state 819
-- On NEW_EFFECT shift to state 821
-- On MODULE shift to state 843
-- On LET shift to state 848
-- On INCLUDE shift to state 854
-- On FSDOC_STANDALONE shift to state 856
-- On EXCEPTION shift to state 857
-- On EFFECT shift to state 862
-- On rawDecl shift to state 867
-- On pragma shift to state 868
## Reductions:

State 697:
## Known stack suffix:
## VAL
## LR(1) items:
rawDecl -> VAL . lidentOrOperator list(multiBinder) COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LPAREN shift to state 698
-- On IDENT shift to state 727
-- On lidentOrOperator shift to state 728
## Reductions:

State 698:
## Known stack suffix:
## LPAREN
## LR(1) items:
lidentOrOperator -> LPAREN . OPPREFIX RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX3 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX4 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0a RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0b RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0c RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX0d RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX1 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OPINFIX2 RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . PIPE_RIGHT RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . COLON_EQUALS RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . COLON_COLON RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ASSIGNMENT RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
lidentOrOperator -> LPAREN . OP_MIXFIX_ACCESS RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On PIPE_RIGHT shift to state 699
-- On OP_MIXFIX_ASSIGNMENT shift to state 701
-- On OP_MIXFIX_ACCESS shift to state 703
-- On OPPREFIX shift to state 705
-- On OPINFIX4 shift to state 707
-- On OPINFIX3 shift to state 709
-- On OPINFIX2 shift to state 711
-- On OPINFIX1 shift to state 713
-- On OPINFIX0d shift to state 715
-- On OPINFIX0c shift to state 717
-- On OPINFIX0b shift to state 719
-- On OPINFIX0a shift to state 721
-- On COLON_EQUALS shift to state 723
-- On COLON_COLON shift to state 725
## Reductions:

State 699:
## Known stack suffix:
## LPAREN PIPE_RIGHT
## LR(1) items:
lidentOrOperator -> LPAREN PIPE_RIGHT . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## LPAREN PIPE_RIGHT RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN PIPE_RIGHT RPAREN

State 701:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 702
## Reductions:

State 702:
## Known stack suffix:
## LPAREN OP_MIXFIX_ASSIGNMENT RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ASSIGNMENT RPAREN

State 703:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 704
## Reductions:

State 704:
## Known stack suffix:
## LPAREN OP_MIXFIX_ACCESS RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OP_MIXFIX_ACCESS RPAREN

State 705:
## Known stack suffix:
## LPAREN OPPREFIX
## LR(1) items:
lidentOrOperator -> LPAREN OPPREFIX . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 706
## Reductions:

State 706:
## Known stack suffix:
## LPAREN OPPREFIX RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPPREFIX RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPPREFIX RPAREN

State 707:
## Known stack suffix:
## LPAREN OPINFIX4
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX4 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 708
## Reductions:

State 708:
## Known stack suffix:
## LPAREN OPINFIX4 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX4 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX4 RPAREN

State 709:
## Known stack suffix:
## LPAREN OPINFIX3
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX3 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 710
## Reductions:

State 710:
## Known stack suffix:
## LPAREN OPINFIX3 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX3 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX3 RPAREN

State 711:
## Known stack suffix:
## LPAREN OPINFIX2
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX2 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 712
## Reductions:

State 712:
## Known stack suffix:
## LPAREN OPINFIX2 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX2 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX2 RPAREN

State 713:
## Known stack suffix:
## LPAREN OPINFIX1
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX1 . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 714
## Reductions:

State 714:
## Known stack suffix:
## LPAREN OPINFIX1 RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX1 RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX1 RPAREN

State 715:
## Known stack suffix:
## LPAREN OPINFIX0d
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0d . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 716
## Reductions:

State 716:
## Known stack suffix:
## LPAREN OPINFIX0d RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0d RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX0d RPAREN

State 717:
## Known stack suffix:
## LPAREN OPINFIX0c
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0c . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 718
## Reductions:

State 718:
## Known stack suffix:
## LPAREN OPINFIX0c RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0c RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX0c RPAREN

State 719:
## Known stack suffix:
## LPAREN OPINFIX0b
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0b . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 720
## Reductions:

State 720:
## Known stack suffix:
## LPAREN OPINFIX0b RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0b RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX0b RPAREN

State 721:
## Known stack suffix:
## LPAREN OPINFIX0a
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0a . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 722
## Reductions:

State 722:
## Known stack suffix:
## LPAREN OPINFIX0a RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN OPINFIX0a RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN OPINFIX0a RPAREN

State 723:
## Known stack suffix:
## LPAREN COLON_EQUALS
## LR(1) items:
lidentOrOperator -> LPAREN COLON_EQUALS . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 724
## Reductions:

State 724:
## Known stack suffix:
## LPAREN COLON_EQUALS RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN COLON_EQUALS RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN COLON_EQUALS RPAREN

State 725:
## Known stack suffix:
## LPAREN COLON_COLON
## LR(1) items:
lidentOrOperator -> LPAREN COLON_COLON . RPAREN [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 726
## Reductions:

State 726:
## Known stack suffix:
## LPAREN COLON_COLON RPAREN
## LR(1) items:
lidentOrOperator -> LPAREN COLON_COLON RPAREN . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> LPAREN COLON_COLON RPAREN

State 727:
## Known stack suffix:
## IDENT
## LR(1) items:
lidentOrOperator -> IDENT . [ SEMICOLON RBRACK LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lidentOrOperator -> IDENT

State 728:
## Known stack suffix:
## VAL lidentOrOperator
## LR(1) items:
rawDecl -> VAL lidentOrOperator . list(multiBinder) COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LPAREN shift to state 244
-- On multiBinder shift to state 729
-- On list(multiBinder) shift to state 731
## Reductions:
-- On COLON
--   reduce production list(multiBinder) ->

State 729:
## Known stack suffix:
## multiBinder
## LR(1) items:
list(multiBinder) -> multiBinder . list(multiBinder) [ COLON ]
## Transitions:
-- On LPAREN shift to state 244
-- On multiBinder shift to state 729
-- On list(multiBinder) shift to state 730
## Reductions:
-- On COLON
--   reduce production list(multiBinder) ->

State 730:
## Known stack suffix:
## multiBinder list(multiBinder)
## LR(1) items:
list(multiBinder) -> multiBinder list(multiBinder) . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(multiBinder) -> multiBinder list(multiBinder)

State 731:
## Known stack suffix:
## VAL lidentOrOperator list(multiBinder)
## LR(1) items:
rawDecl -> VAL lidentOrOperator list(multiBinder) . COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On COLON shift to state 732
## Reductions:

State 732:
## Known stack suffix:
## VAL lidentOrOperator list(multiBinder) COLON
## LR(1) items:
rawDecl -> VAL lidentOrOperator list(multiBinder) COLON . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 733
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 733:
## Known stack suffix:
## VAL lidentOrOperator list(multiBinder) COLON typ
## LR(1) items:
rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> VAL lidentOrOperator list(multiBinder) COLON typ

State 734:
## Known stack suffix:
## TYPE
## LR(1) items:
rawDecl -> TYPE . separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On FSDOC shift to state 735
-- On separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) shift to state 736
-- On option(FSDOC) shift to state 737
## Reductions:
-- On NAME IDENT
--   reduce production option(FSDOC) ->

State 735:
## Known stack suffix:
## FSDOC
## LR(1) items:
option(FSDOC) -> FSDOC . [ NAME IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(FSDOC) -> FSDOC

State 736:
## Known stack suffix:
## TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
## LR(1) items:
rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> TYPE separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))

State 737:
## Known stack suffix:
## option(FSDOC)
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) . typeDecl [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) . typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On IDENT shift to state 62
-- On uident shift to state 229
-- On typeDecl shift to state 738
-- On lident shift to state 741
-- On ident shift to state 742
## Reductions:

State 738:
## Known stack suffix:
## option(FSDOC) typeDecl
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl . AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On AND shift to state 739
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
--   reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl

State 739:
## Known stack suffix:
## option(FSDOC) typeDecl AND
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND . separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On FSDOC shift to state 735
-- On separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) shift to state 740
-- On option(FSDOC) shift to state 737
## Reductions:
-- On NAME IDENT
--   reduce production option(FSDOC) ->

State 740:
## Known stack suffix:
## option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))
## LR(1) items:
separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(AND,pair(option(FSDOC),typeDecl)) -> option(FSDOC) typeDecl AND separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))

State 741:
## Known stack suffix:
## lident
## LR(1) items:
ident -> lident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> lident

State 742:
## Known stack suffix:
## ident
## LR(1) items:
typeDecl -> ident . typars option(ascribeKind) typeDefinition [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TYP_APP_LESS shift to state 743
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On typars shift to state 749
-- On tvarinsts shift to state 786
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 787
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT
--   reduce production list(__anonymous_4) ->

State 743:
## Known stack suffix:
## TYP_APP_LESS
## LR(1) items:
tvarinsts -> TYP_APP_LESS . separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On TVAR shift to state 23
-- On tvar shift to state 744
-- On separated_nonempty_list(COMMA,tvar) shift to state 747
## Reductions:

State 744:
## Known stack suffix:
## tvar
## LR(1) items:
separated_nonempty_list(COMMA,tvar) -> tvar . [ TYP_APP_GREATER ]
separated_nonempty_list(COMMA,tvar) -> tvar . COMMA separated_nonempty_list(COMMA,tvar) [ TYP_APP_GREATER ]
## Transitions:
-- On COMMA shift to state 745
## Reductions:
-- On TYP_APP_GREATER
--   reduce production separated_nonempty_list(COMMA,tvar) -> tvar

State 745:
## Known stack suffix:
## tvar COMMA
## LR(1) items:
separated_nonempty_list(COMMA,tvar) -> tvar COMMA . separated_nonempty_list(COMMA,tvar) [ TYP_APP_GREATER ]
## Transitions:
-- On TVAR shift to state 23
-- On tvar shift to state 744
-- On separated_nonempty_list(COMMA,tvar) shift to state 746
## Reductions:

State 746:
## Known stack suffix:
## tvar COMMA separated_nonempty_list(COMMA,tvar)
## LR(1) items:
separated_nonempty_list(COMMA,tvar) -> tvar COMMA separated_nonempty_list(COMMA,tvar) . [ TYP_APP_GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,tvar) -> tvar COMMA separated_nonempty_list(COMMA,tvar)

State 747:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,tvar)
## LR(1) items:
tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) . TYP_APP_GREATER [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
-- On TYP_APP_GREATER shift to state 748
## Reductions:

State 748:
## Known stack suffix:
## TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER
## LR(1) items:
tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tvarinsts -> TYP_APP_LESS separated_nonempty_list(COMMA,tvar) TYP_APP_GREATER

State 749:
## Known stack suffix:
## ident typars
## LR(1) items:
typeDecl -> ident typars . option(ascribeKind) typeDefinition [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On COLON shift to state 750
-- On option(ascribeKind) shift to state 753
-- On ascribeKind shift to state 785
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT
--   reduce production option(ascribeKind) ->

State 750:
## Known stack suffix:
## COLON
## LR(1) items:
ascribeKind -> COLON . kind [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 751
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On kind shift to state 752
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 751:
## Known stack suffix:
## tmArrow(tmNoEq)
## LR(1) items:
kind -> tmArrow(tmNoEq) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> tmArrow(tmNoEq)

State 752:
## Known stack suffix:
## COLON kind
## LR(1) items:
ascribeKind -> COLON kind . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ascribeKind -> COLON kind

State 753:
## Known stack suffix:
## ident typars option(ascribeKind)
## LR(1) items:
typeDecl -> ident typars option(ascribeKind) . typeDefinition [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 754
-- On typeDefinition shift to state 784
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT
--   reduce production typeDefinition ->

State 754:
## Known stack suffix:
## EQUALS
## LR(1) items:
typeDefinition -> EQUALS . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
typeDefinition -> EQUALS . LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
typeDefinition -> EQUALS . list(constructorDecl) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 755
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BAR shift to state 772
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 780
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On list(constructorDecl) shift to state 781
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constructorDecl shift to state 782
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT
--   reduce production list(constructorDecl) ->

State 755:
## Known stack suffix:
## EQUALS LBRACE
## LR(1) items:
tmNoEqWith(tmRefinement) -> LBRACE . recordExp RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BACKTICK ASSUME AND AMP ABSTRACT ]
typeDefinition -> EQUALS LBRACE . right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FSDOC shift to state 756
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On simpleDef shift to state 199
-- On right_flexible_nonempty_list(SEMICOLON,simpleDef) shift to state 590
-- On right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) shift to state 760
-- On recordFieldDecl shift to state 762
-- On recordExp shift to state 635
-- On quident shift to state 83
-- On qlident shift to state 593
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 771
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On appTerm shift to state 594
## Reductions:

State 756:
## Known stack suffix:
## FSDOC
## LR(1) items:
recordFieldDecl -> FSDOC . lident COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On lident shift to state 757
## Reductions:

State 757:
## Known stack suffix:
## FSDOC lident
## LR(1) items:
recordFieldDecl -> FSDOC lident . COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On COLON shift to state 758
## Reductions:

State 758:
## Known stack suffix:
## FSDOC lident COLON
## LR(1) items:
recordFieldDecl -> FSDOC lident COLON . typ [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 759
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 759:
## Known stack suffix:
## FSDOC lident COLON typ
## LR(1) items:
recordFieldDecl -> FSDOC lident COLON typ . [ SEMICOLON RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production recordFieldDecl -> FSDOC lident COLON typ

State 760:
## Known stack suffix:
## EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl)
## LR(1) items:
typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 761
## Reductions:

State 761:
## Known stack suffix:
## EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE
## LR(1) items:
typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeDefinition -> EQUALS LBRACE right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) RBRACE

State 762:
## Known stack suffix:
## recordFieldDecl
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . [ RBRACE ]
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 763
## Reductions:
-- On RBRACE
--   reduce production right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl

State 763:
## Known stack suffix:
## recordFieldDecl SEMICOLON
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON . right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On FSDOC shift to state 756
-- On right_flexible_list(SEMICOLON,recordFieldDecl) shift to state 764
-- On recordFieldDecl shift to state 765
-- On lident shift to state 768
## Reductions:
-- On RBRACE
--   reduce production right_flexible_list(SEMICOLON,recordFieldDecl) ->

State 764:
## Known stack suffix:
## recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)
## LR(1) items:
right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production right_flexible_nonempty_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)

State 765:
## Known stack suffix:
## recordFieldDecl
## LR(1) items:
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . [ RBRACE ]
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl . SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 766
## Reductions:
-- On RBRACE
--   reduce production right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl

State 766:
## Known stack suffix:
## recordFieldDecl SEMICOLON
## LR(1) items:
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON . right_flexible_list(SEMICOLON,recordFieldDecl) [ RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On FSDOC shift to state 756
-- On right_flexible_list(SEMICOLON,recordFieldDecl) shift to state 767
-- On recordFieldDecl shift to state 765
-- On lident shift to state 768
## Reductions:
-- On RBRACE
--   reduce production right_flexible_list(SEMICOLON,recordFieldDecl) ->

State 767:
## Known stack suffix:
## recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)
## LR(1) items:
right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production right_flexible_list(SEMICOLON,recordFieldDecl) -> recordFieldDecl SEMICOLON right_flexible_list(SEMICOLON,recordFieldDecl)

State 768:
## Known stack suffix:
## lident
## LR(1) items:
recordFieldDecl -> lident . COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On COLON shift to state 769
## Reductions:

State 769:
## Known stack suffix:
## lident COLON
## LR(1) items:
recordFieldDecl -> lident COLON . typ [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 770
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 770:
## Known stack suffix:
## lident COLON typ
## LR(1) items:
recordFieldDecl -> lident COLON typ . [ SEMICOLON RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production recordFieldDecl -> lident COLON typ

State 771:
## Known stack suffix:
## lident
## LR(1) items:
path(lident) -> lident . [ WITH UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TVAR TRUE STRING SET_RANGE_OF SEMICOLON REIFY RBRACE RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT CHAR BYTEARRAY BEGIN BANG_LBRACE ]
recordFieldDecl -> lident . COLON typ [ SEMICOLON RBRACE ]
## Transitions:
-- On COLON shift to state 769
## Reductions:
-- On WITH UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TVAR TRUE STRING SET_RANGE_OF SEMICOLON REIFY RBRACE RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT CHAR BYTEARRAY BEGIN BANG_LBRACE
--   reduce production path(lident) -> lident

State 772:
## Known stack suffix:
## BAR
## LR(1) items:
constructorDecl -> BAR . option(FSDOC) uident COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
constructorDecl -> BAR . option(FSDOC) uident option(__anonymous_2) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On FSDOC shift to state 735
-- On option(FSDOC) shift to state 773
## Reductions:
-- On NAME
--   reduce production option(FSDOC) ->

State 773:
## Known stack suffix:
## BAR option(FSDOC)
## LR(1) items:
constructorDecl -> BAR option(FSDOC) . uident COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
constructorDecl -> BAR option(FSDOC) . uident option(__anonymous_2) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 774
## Reductions:

State 774:
## Known stack suffix:
## BAR option(FSDOC) uident
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident . COLON typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
constructorDecl -> BAR option(FSDOC) uident . option(__anonymous_2) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On OF shift to state 775
-- On COLON shift to state 777
-- On option(__anonymous_2) shift to state 779
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT
--   reduce production option(__anonymous_2) ->

State 775:
## Known stack suffix:
## OF
## LR(1) items:
option(__anonymous_2) -> OF . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 776
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 776:
## Known stack suffix:
## OF typ
## LR(1) items:
option(__anonymous_2) -> OF typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(__anonymous_2) -> OF typ

State 777:
## Known stack suffix:
## BAR option(FSDOC) uident COLON
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident COLON . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 778
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 778:
## Known stack suffix:
## BAR option(FSDOC) uident COLON typ
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident COLON typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructorDecl -> BAR option(FSDOC) uident COLON typ

State 779:
## Known stack suffix:
## BAR option(FSDOC) uident option(__anonymous_2)
## LR(1) items:
constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructorDecl -> BAR option(FSDOC) uident option(__anonymous_2)

State 780:
## Known stack suffix:
## EQUALS typ
## LR(1) items:
typeDefinition -> EQUALS typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeDefinition -> EQUALS typ

State 781:
## Known stack suffix:
## EQUALS list(constructorDecl)
## LR(1) items:
typeDefinition -> EQUALS list(constructorDecl) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeDefinition -> EQUALS list(constructorDecl)

State 782:
## Known stack suffix:
## constructorDecl
## LR(1) items:
list(constructorDecl) -> constructorDecl . list(constructorDecl) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
-- On BAR shift to state 772
-- On list(constructorDecl) shift to state 783
-- On constructorDecl shift to state 782
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT
--   reduce production list(constructorDecl) ->

State 783:
## Known stack suffix:
## constructorDecl list(constructorDecl)
## LR(1) items:
list(constructorDecl) -> constructorDecl list(constructorDecl) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(constructorDecl) -> constructorDecl list(constructorDecl)

State 784:
## Known stack suffix:
## ident typars option(ascribeKind) typeDefinition
## LR(1) items:
typeDecl -> ident typars option(ascribeKind) typeDefinition . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeDecl -> ident typars option(ascribeKind) typeDefinition

State 785:
## Known stack suffix:
## ascribeKind
## LR(1) items:
option(ascribeKind) -> ascribeKind . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(ascribeKind) -> ascribeKind

State 786:
## Known stack suffix:
## tvarinsts
## LR(1) items:
typars -> tvarinsts . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typars -> tvarinsts

State 787:
## Known stack suffix:
## binders
## LR(1) items:
typars -> binders . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typars -> binders

State 788:
## Known stack suffix:
## SUB_EFFECT
## LR(1) items:
rawDecl -> SUB_EFFECT . subEffect [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On subEffect shift to state 789
-- On quident shift to state 790
-- On path(uident) shift to state 100
## Reductions:

State 789:
## Known stack suffix:
## SUB_EFFECT subEffect
## LR(1) items:
rawDecl -> SUB_EFFECT subEffect . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> SUB_EFFECT subEffect

State 790:
## Known stack suffix:
## quident
## LR(1) items:
subEffect -> quident . SQUIGGLY_RARROW quident EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident . SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident . SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 791
## Reductions:

State 791:
## Known stack suffix:
## quident SQUIGGLY_RARROW
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW . quident EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW . quident LBRACE IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW . quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 792
-- On path(uident) shift to state 100
## Reductions:

State 792:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident . EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident . LBRACE IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident . LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LBRACE shift to state 793
-- On EQUALS shift to state 803
## Reductions:

State 793:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE . IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE . IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On IDENT shift to state 794
## Reductions:

State 794:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT . EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT . EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 795
## Reductions:

State 795:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS . simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS . simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 796
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 796:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm . SEMICOLON IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 797
-- On RBRACE shift to state 802
## Reductions:

State 797:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON . IDENT EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On IDENT shift to state 798
## Reductions:

State 798:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT . EQUALS simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 799
## Reductions:

State 799:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS . simpleTerm RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 800
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 800:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 801
## Reductions:

State 801:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm SEMICOLON IDENT EQUALS simpleTerm RBRACE

State 802:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subEffect -> quident SQUIGGLY_RARROW quident LBRACE IDENT EQUALS simpleTerm RBRACE

State 803:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident EQUALS
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident EQUALS . simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 804
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 804:
## Known stack suffix:
## quident SQUIGGLY_RARROW quident EQUALS simpleTerm
## LR(1) items:
subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subEffect -> quident SQUIGGLY_RARROW quident EQUALS simpleTerm

State 805:
## Known stack suffix:
## SPLICE
## LR(1) items:
rawDecl -> SPLICE . LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LBRACK shift to state 806
## Reductions:

State 806:
## Known stack suffix:
## SPLICE LBRACK
## LR(1) items:
rawDecl -> SPLICE LBRACK . loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On LPAREN shift to state 698
-- On IDENT shift to state 727
-- On separated_nonempty_list(SEMICOLON,lidentOrOperator) shift to state 807
-- On loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) shift to state 808
-- On lidentOrOperator shift to state 811
## Reductions:
-- On RBRACK
--   reduce production loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) ->

State 807:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,lidentOrOperator)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) -> separated_nonempty_list(SEMICOLON,lidentOrOperator) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) -> separated_nonempty_list(SEMICOLON,lidentOrOperator)

State 808:
## Known stack suffix:
## SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator))
## LR(1) items:
rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) . RBRACK atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On RBRACK shift to state 809
## Reductions:

State 809:
## Known stack suffix:
## SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK
## LR(1) items:
rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK . atomicTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 18
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 37
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 63
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lident shift to state 80
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 105
-- On atomicTerm shift to state 810
## Reductions:

State 810:
## Known stack suffix:
## SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm
## LR(1) items:
rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> SPLICE LBRACK loption(separated_nonempty_list(SEMICOLON,lidentOrOperator)) RBRACK atomicTerm

State 811:
## Known stack suffix:
## lidentOrOperator
## LR(1) items:
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator . [ RBRACK ]
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator . SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator) [ RBRACK ]
## Transitions:
-- On SEMICOLON shift to state 812
## Reductions:
-- On RBRACK
--   reduce production separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator

State 812:
## Known stack suffix:
## lidentOrOperator SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator SEMICOLON . separated_nonempty_list(SEMICOLON,lidentOrOperator) [ RBRACK ]
## Transitions:
-- On LPAREN shift to state 698
-- On IDENT shift to state 727
-- On separated_nonempty_list(SEMICOLON,lidentOrOperator) shift to state 813
-- On lidentOrOperator shift to state 811
## Reductions:

State 813:
## Known stack suffix:
## lidentOrOperator SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator)
## LR(1) items:
separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,lidentOrOperator) -> lidentOrOperator SEMICOLON separated_nonempty_list(SEMICOLON,lidentOrOperator)

State 814:
## Known stack suffix:
## PRAGMA_SET_OPTIONS
## LR(1) items:
pragma -> PRAGMA_SET_OPTIONS . STRING [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On STRING shift to state 815
## Reductions:

State 815:
## Known stack suffix:
## PRAGMA_SET_OPTIONS STRING
## LR(1) items:
pragma -> PRAGMA_SET_OPTIONS STRING . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pragma -> PRAGMA_SET_OPTIONS STRING

State 816:
## Known stack suffix:
## PRAGMA_RESET_OPTIONS
## LR(1) items:
pragma -> PRAGMA_RESET_OPTIONS . option(string) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On STRING shift to state 817
-- On option(string) shift to state 818
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
--   reduce production option(string) ->

State 817:
## Known stack suffix:
## STRING
## LR(1) items:
option(string) -> STRING . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(string) -> STRING

State 818:
## Known stack suffix:
## PRAGMA_RESET_OPTIONS option(string)
## LR(1) items:
pragma -> PRAGMA_RESET_OPTIONS option(string) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pragma -> PRAGMA_RESET_OPTIONS option(string)

State 819:
## Known stack suffix:
## OPEN
## LR(1) items:
rawDecl -> OPEN . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 820
-- On path(uident) shift to state 100
## Reductions:

State 820:
## Known stack suffix:
## OPEN quident
## LR(1) items:
rawDecl -> OPEN quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> OPEN quident

State 821:
## Known stack suffix:
## NEW_EFFECT
## LR(1) items:
rawDecl -> NEW_EFFECT . newEffect [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On LBRACE shift to state 822
-- On uident shift to state 837
-- On newEffect shift to state 840
-- On effectRedefinition shift to state 841
-- On effectDefinition shift to state 842
## Reductions:

State 822:
## Known stack suffix:
## LBRACE
## LR(1) items:
effectDefinition -> LBRACE . uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 823
## Reductions:

State 823:
## Known stack suffix:
## LBRACE uident
## LR(1) items:
effectDefinition -> LBRACE uident . binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 824
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On COLON
--   reduce production list(__anonymous_4) ->

State 824:
## Known stack suffix:
## LBRACE uident binders
## LR(1) items:
effectDefinition -> LBRACE uident binders . COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On COLON shift to state 825
## Reductions:

State 825:
## Known stack suffix:
## LBRACE uident binders COLON
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON . tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 483
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 515
-- On tmNoEq shift to state 516
-- On tmArrow(tmNoEq) shift to state 826
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 519
-- On appTerm shift to state 320
## Reductions:

State 826:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq)
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) . WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On WITH shift to state 827
## Reductions:

State 827:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq) WITH
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH . separated_nonempty_list(SEMICOLON,effectDecl) RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(SEMICOLON,effectDecl) shift to state 828
-- On lident shift to state 830
-- On effectDecl shift to state 834
## Reductions:

State 828:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl)
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) . RBRACE [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 829
## Reductions:

State 829:
## Known stack suffix:
## LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE
## LR(1) items:
effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effectDefinition -> LBRACE uident binders COLON tmArrow(tmNoEq) WITH separated_nonempty_list(SEMICOLON,effectDecl) RBRACE

State 830:
## Known stack suffix:
## lident
## LR(1) items:
effectDecl -> lident . binders EQUALS simpleTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 831
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On EQUALS
--   reduce production list(__anonymous_4) ->

State 831:
## Known stack suffix:
## lident binders
## LR(1) items:
effectDecl -> lident binders . EQUALS simpleTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On EQUALS shift to state 832
## Reductions:

State 832:
## Known stack suffix:
## lident binders EQUALS
## LR(1) items:
effectDecl -> lident binders EQUALS . simpleTerm [ SEMICOLON RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 833
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 833:
## Known stack suffix:
## lident binders EQUALS simpleTerm
## LR(1) items:
effectDecl -> lident binders EQUALS simpleTerm . [ SEMICOLON RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effectDecl -> lident binders EQUALS simpleTerm

State 834:
## Known stack suffix:
## effectDecl
## LR(1) items:
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl . [ RBRACE ]
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl . SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl) [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 835
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl

State 835:
## Known stack suffix:
## effectDecl SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl SEMICOLON . separated_nonempty_list(SEMICOLON,effectDecl) [ RBRACE ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(SEMICOLON,effectDecl) shift to state 836
-- On lident shift to state 830
-- On effectDecl shift to state 834
## Reductions:

State 836:
## Known stack suffix:
## effectDecl SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl)
## LR(1) items:
separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,effectDecl) -> effectDecl SEMICOLON separated_nonempty_list(SEMICOLON,effectDecl)

State 837:
## Known stack suffix:
## uident
## LR(1) items:
effectRedefinition -> uident . EQUALS simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 838
## Reductions:

State 838:
## Known stack suffix:
## uident EQUALS
## LR(1) items:
effectRedefinition -> uident EQUALS . simpleTerm [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FALSE shift to state 63
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 839
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 839:
## Known stack suffix:
## uident EQUALS simpleTerm
## LR(1) items:
effectRedefinition -> uident EQUALS simpleTerm . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effectRedefinition -> uident EQUALS simpleTerm

State 840:
## Known stack suffix:
## NEW_EFFECT newEffect
## LR(1) items:
rawDecl -> NEW_EFFECT newEffect . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> NEW_EFFECT newEffect

State 841:
## Known stack suffix:
## effectRedefinition
## LR(1) items:
newEffect -> effectRedefinition . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production newEffect -> effectRedefinition

State 842:
## Known stack suffix:
## effectDefinition
## LR(1) items:
newEffect -> effectDefinition . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production newEffect -> effectDefinition

State 843:
## Known stack suffix:
## MODULE
## LR(1) items:
rawDecl -> MODULE . uident EQUALS quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
rawDecl -> MODULE . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 844
-- On quident shift to state 847
-- On path(uident) shift to state 100
## Reductions:

State 844:
## Known stack suffix:
## MODULE uident
## LR(1) items:
path(uident) -> uident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
path(uident) -> uident . DOT path(uident) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
rawDecl -> MODULE uident . EQUALS quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 845
-- On DOT shift to state 71
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
--   reduce production path(uident) -> uident

State 845:
## Known stack suffix:
## MODULE uident EQUALS
## LR(1) items:
rawDecl -> MODULE uident EQUALS . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 846
-- On path(uident) shift to state 100
## Reductions:

State 846:
## Known stack suffix:
## MODULE uident EQUALS quident
## LR(1) items:
rawDecl -> MODULE uident EQUALS quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> MODULE uident EQUALS quident

State 847:
## Known stack suffix:
## MODULE quident
## LR(1) items:
rawDecl -> MODULE quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> MODULE quident

State 848:
## Known stack suffix:
## LET
## LR(1) items:
rawDecl -> LET . letqualifier separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On REC shift to state 68
-- On MUTABLE shift to state 400
-- On letqualifier shift to state 849
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production letqualifier ->

State 849:
## Known stack suffix:
## LET letqualifier
## LR(1) items:
rawDecl -> LET letqualifier . separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On separated_nonempty_list(AND,letbinding) shift to state 850
-- On maybeFocus shift to state 403
-- On letbinding shift to state 851
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production boption(SQUIGGLY_RARROW) ->

State 850:
## Known stack suffix:
## LET letqualifier separated_nonempty_list(AND,letbinding)
## LR(1) items:
rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> LET letqualifier separated_nonempty_list(AND,letbinding)

State 851:
## Known stack suffix:
## letbinding
## LR(1) items:
separated_nonempty_list(AND,letbinding) -> letbinding . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
separated_nonempty_list(AND,letbinding) -> letbinding . AND separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On AND shift to state 852
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
--   reduce production separated_nonempty_list(AND,letbinding) -> letbinding

State 852:
## Known stack suffix:
## letbinding AND
## LR(1) items:
separated_nonempty_list(AND,letbinding) -> letbinding AND . separated_nonempty_list(AND,letbinding) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On SQUIGGLY_RARROW shift to state 402
-- On separated_nonempty_list(AND,letbinding) shift to state 853
-- On maybeFocus shift to state 403
-- On letbinding shift to state 851
-- On boption(SQUIGGLY_RARROW) shift to state 543
## Reductions:
-- On UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
--   reduce production boption(SQUIGGLY_RARROW) ->

State 853:
## Known stack suffix:
## letbinding AND separated_nonempty_list(AND,letbinding)
## LR(1) items:
separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(AND,letbinding) -> letbinding AND separated_nonempty_list(AND,letbinding)

State 854:
## Known stack suffix:
## INCLUDE
## LR(1) items:
rawDecl -> INCLUDE . quident [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 70
-- On quident shift to state 855
-- On path(uident) shift to state 100
## Reductions:

State 855:
## Known stack suffix:
## INCLUDE quident
## LR(1) items:
rawDecl -> INCLUDE quident . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> INCLUDE quident

State 856:
## Known stack suffix:
## FSDOC_STANDALONE
## LR(1) items:
rawDecl -> FSDOC_STANDALONE . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> FSDOC_STANDALONE

State 857:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
rawDecl -> EXCEPTION . uident option(__anonymous_1) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 858
## Reductions:

State 858:
## Known stack suffix:
## EXCEPTION uident
## LR(1) items:
rawDecl -> EXCEPTION uident . option(__anonymous_1) [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On OF shift to state 859
-- On option(__anonymous_1) shift to state 861
## Reductions:
-- On VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
--   reduce production option(__anonymous_1) ->

State 859:
## Known stack suffix:
## OF
## LR(1) items:
option(__anonymous_1) -> OF . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 860
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 860:
## Known stack suffix:
## OF typ
## LR(1) items:
option(__anonymous_1) -> OF typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(__anonymous_1) -> OF typ

State 861:
## Known stack suffix:
## EXCEPTION uident option(__anonymous_1)
## LR(1) items:
rawDecl -> EXCEPTION uident option(__anonymous_1) . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> EXCEPTION uident option(__anonymous_1)

State 862:
## Known stack suffix:
## EFFECT
## LR(1) items:
rawDecl -> EFFECT . uident typars EQUALS typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On NAME shift to state 35
-- On uident shift to state 863
## Reductions:

State 863:
## Known stack suffix:
## EFFECT uident
## LR(1) items:
rawDecl -> EFFECT uident . typars EQUALS typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 243
-- On TYP_APP_LESS shift to state 743
-- On TVAR shift to state 23
-- On LPAREN shift to state 244
-- On IDENT shift to state 245
-- On HASH shift to state 115
-- On DOLLAR shift to state 152
-- On typars shift to state 864
-- On tvarinsts shift to state 786
-- On tvar shift to state 281
-- On multiBinder shift to state 282
-- On list(__anonymous_4) shift to state 290
-- On lidentOrUnderscore shift to state 284
-- On binders shift to state 787
-- On binder shift to state 285
-- On aqualified(lidentOrUnderscore) shift to state 287
-- On aqualUniverses shift to state 288
## Reductions:
-- On EQUALS
--   reduce production list(__anonymous_4) ->

State 864:
## Known stack suffix:
## EFFECT uident typars
## LR(1) items:
rawDecl -> EFFECT uident typars . EQUALS typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 865
## Reductions:

State 865:
## Known stack suffix:
## EFFECT uident typars EQUALS
## LR(1) items:
rawDecl -> EFFECT uident typars EQUALS . typ [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On uident shift to state 77
-- On typ shift to state 866
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 377
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On lidentOrUnderscore shift to state 315
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 240
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 866:
## Known stack suffix:
## EFFECT uident typars EQUALS typ
## LR(1) items:
rawDecl -> EFFECT uident typars EQUALS typ . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> EFFECT uident typars EQUALS typ

State 867:
## Known stack suffix:
## list(decoration) rawDecl
## LR(1) items:
decl -> list(decoration) rawDecl . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> list(decoration) rawDecl

State 868:
## Known stack suffix:
## pragma
## LR(1) items:
rawDecl -> pragma . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rawDecl -> pragma

State 869:
## Known stack suffix:
## boption(__anonymous_0) list(decl)
## LR(1) items:
inputFragment -> boption(__anonymous_0) list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## boption(__anonymous_0) list(decl) EOF
## LR(1) items:
inputFragment -> boption(__anonymous_0) list(decl) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production inputFragment -> boption(__anonymous_0) list(decl) EOF

State 871:
## Known stack suffix:
## decoration
## LR(1) items:
list(decoration) -> decoration . list(decoration) [ VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT ]
## Transitions:
-- On UNOPTEQUALITY shift to state 5
-- On UNFOLDABLE shift to state 6
-- On UNFOLD shift to state 7
-- On TOTAL shift to state 8
-- On REIFIABLE shift to state 9
-- On REFLECTABLE shift to state 10
-- On PRIVATE shift to state 11
-- On OPAQUE shift to state 12
-- On NOEXTRACT shift to state 13
-- On NOEQUALITY shift to state 14
-- On NEW shift to state 15
-- On LOGIC shift to state 16
-- On LBRACK_AT shift to state 17
-- On IRREDUCIBLE shift to state 685
-- On INLINE_FOR_EXTRACTION shift to state 686
-- On INLINE shift to state 687
-- On FSDOC shift to state 688
-- On DEFAULT shift to state 689
-- On ASSUME shift to state 872
-- On ABSTRACT shift to state 694
-- On qualifier shift to state 695
-- On list(decoration) shift to state 873
-- On decoration shift to state 871
-- On attribute shift to state 874
## Reductions:
-- On VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT
--   reduce production list(decoration) ->

State 872:
## Known stack suffix:
## ASSUME
## LR(1) items:
qualifier -> ASSUME . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> ASSUME

State 873:
## Known stack suffix:
## decoration list(decoration)
## LR(1) items:
list(decoration) -> decoration list(decoration) . [ VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(decoration) -> decoration list(decoration)

State 874:
## Known stack suffix:
## attribute
## LR(1) items:
decoration -> attribute . [ VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decoration -> attribute

State 875:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On UNOPTEQUALITY shift to state 5
-- On UNFOLDABLE shift to state 6
-- On UNFOLD shift to state 7
-- On TOTAL shift to state 8
-- On REIFIABLE shift to state 9
-- On REFLECTABLE shift to state 10
-- On PRIVATE shift to state 11
-- On OPAQUE shift to state 12
-- On NOEXTRACT shift to state 13
-- On NOEQUALITY shift to state 14
-- On NEW shift to state 15
-- On LOGIC shift to state 16
-- On LBRACK_AT shift to state 17
-- On IRREDUCIBLE shift to state 685
-- On INLINE_FOR_EXTRACTION shift to state 686
-- On INLINE shift to state 687
-- On FSDOC shift to state 688
-- On DEFAULT shift to state 689
-- On ASSUME shift to state 690
-- On ABSTRACT shift to state 694
-- On qualifier shift to state 695
-- On list(decoration) shift to state 696
-- On list(decl) shift to state 876
-- On decoration shift to state 871
-- On decl shift to state 875
-- On attribute shift to state 874
## Reductions:
-- On EOF
--   reduce production list(decl) ->
-- On VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT
--   reduce production list(decoration) ->

State 876:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(decl) -> decl list(decl)

State 877:
## Known stack suffix:
##
## LR(1) items:
term' -> . term [ # ]
## Transitions:
-- On UNDERSCORE shift to state 30
-- On UINT8 shift to state 19
-- On UINT64 shift to state 20
-- On UINT32 shift to state 21
-- On UINT16 shift to state 22
-- On TVAR shift to state 23
-- On TRY shift to state 31
-- On TRUE shift to state 24
-- On TILDE shift to state 32
-- On SYNTH shift to state 38
-- On STRING shift to state 25
-- On SET_RANGE_OF shift to state 26
-- On REQUIRES shift to state 43
-- On REIFY shift to state 27
-- On RANGE_OF shift to state 28
-- On QUOTE shift to state 40
-- On PERC_BACKTICK shift to state 41
-- On PERCENT_LBRACK shift to state 29
-- On OPPREFIX shift to state 33
-- On NAME shift to state 35
-- On MINUS shift to state 44
-- On MATCH shift to state 46
-- On LPAREN_RPAREN shift to state 36
-- On LPAREN shift to state 47
-- On LET shift to state 67
-- On LENS_PAREN_LEFT shift to state 39
-- On LBRACK_BAR shift to state 42
-- On LBRACK_AT shift to state 17
-- On LBRACK shift to state 45
-- On LBRACE shift to state 75
-- On INT8 shift to state 56
-- On INT64 shift to state 57
-- On INT32 shift to state 58
-- On INT16 shift to state 59
-- On INT shift to state 60
-- On IF shift to state 113
-- On IEEE64 shift to state 61
-- On IDENT shift to state 114
-- On HASH shift to state 115
-- On FUNCTION shift to state 116
-- On FUN shift to state 206
-- On FORALL shift to state 242
-- On FALSE shift to state 63
-- On EXISTS shift to state 280
-- On EQUALS shift to state 211
-- On ENSURES shift to state 305
-- On DOLLAR shift to state 152
-- On CHAR shift to state 64
-- On BYTEARRAY shift to state 65
-- On BEGIN shift to state 66
-- On BANG_LBRACE shift to state 76
-- On BACKTICK_HASH shift to state 306
-- On BACKTICK_AT shift to state 308
-- On BACKTICK shift to state 310
-- On ATTRIBUTES shift to state 379
-- On ASSUME shift to state 383
-- On ASSERT shift to state 385
-- On uident shift to state 77
-- On typ shift to state 390
-- On tvar shift to state 81
-- On tmTuple shift to state 333
-- On tmRefinement shift to state 311
-- On tmNoEqWith(tmRefinement) shift to state 312
-- On tmImplies shift to state 334
-- On tmIff shift to state 391
-- On tmFormula shift to state 337
-- On tmEqWith(tmRefinement) shift to state 339
-- On tmEq shift to state 360
-- On tmConjunction shift to state 363
-- On tmArrow(tmFormula) shift to state 374
-- On term shift to state 878
-- On simpleTerm shift to state 378
-- On separated_nonempty_list(COMMA,tmEq) shift to state 366
-- On quident shift to state 83
-- On qlident shift to state 87
-- On qidentWithTypeArgs(quident,some(fsTypeArgs)) shift to state 90
-- On qidentWithTypeArgs(qlident,option(fsTypeArgs)) shift to state 91
-- On projectionLHS shift to state 92
-- On path(uident) shift to state 100
-- On path(lident) shift to state 98
-- On opPrefixTerm(atomicTermQUident) shift to state 101
-- On opPrefixTerm(atomicTermNotQUident) shift to state 102
-- On noSeqTerm shift to state 437
-- On lidentOrUnderscore shift to state 440
-- On lident shift to state 80
-- On indexingTerm shift to state 220
-- On constant shift to state 103
-- On attribute shift to state 398
-- On atomicTermQUident shift to state 104
-- On atomicTermNotQUident shift to state 445
-- On atomicTerm shift to state 253
-- On aqualUniverses shift to state 275
-- On aqual shift to state 368
-- On appTerm shift to state 320
## Reductions:

State 878:
## Known stack suffix:
## term
## LR(1) items:
term' -> term . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept term

State 879:
## Known stack suffix:
##
## LR(1) items:
warn_error_list' -> . warn_error_list [ # ]
## Transitions:
-- On OPINFIX2 shift to state 880
-- On OPINFIX1 shift to state 881
-- On MINUS shift to state 882
-- On warn_error_list shift to state 883
-- On warn_error shift to state 884
-- On flag shift to state 886
## Reductions:

State 880:
## Known stack suffix:
## OPINFIX2
## LR(1) items:
flag -> OPINFIX2 . [ RANGE INT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production flag -> OPINFIX2

State 881:
## Known stack suffix:
## OPINFIX1
## LR(1) items:
flag -> OPINFIX1 . [ RANGE INT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production flag -> OPINFIX1

State 882:
## Known stack suffix:
## MINUS
## LR(1) items:
flag -> MINUS . [ RANGE INT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production flag -> MINUS

State 883:
## Known stack suffix:
## warn_error_list
## LR(1) items:
warn_error_list' -> warn_error_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept warn_error_list

State 884:
## Known stack suffix:
## warn_error
## LR(1) items:
warn_error_list -> warn_error . EOF [ # ]
## Transitions:
-- On EOF shift to state 885
## Reductions:

State 885:
## Known stack suffix:
## warn_error EOF
## LR(1) items:
warn_error_list -> warn_error EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production warn_error_list -> warn_error EOF

State 886:
## Known stack suffix:
## flag
## LR(1) items:
warn_error -> flag . range [ EOF ]
warn_error -> flag . range warn_error [ EOF ]
## Transitions:
-- On RANGE shift to state 887
-- On INT shift to state 888
-- On range shift to state 889
## Reductions:

State 887:
## Known stack suffix:
## RANGE
## LR(1) items:
range -> RANGE . [ OPINFIX2 OPINFIX1 MINUS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production range -> RANGE

State 888:
## Known stack suffix:
## INT
## LR(1) items:
range -> INT . [ OPINFIX2 OPINFIX1 MINUS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production range -> INT

State 889:
## Known stack suffix:
## flag range
## LR(1) items:
warn_error -> flag range . [ EOF ]
warn_error -> flag range . warn_error [ EOF ]
## Transitions:
-- On OPINFIX2 shift to state 880
-- On OPINFIX1 shift to state 881
-- On MINUS shift to state 882
-- On warn_error shift to state 890
-- On flag shift to state 886
## Reductions:
-- On EOF
--   reduce production warn_error -> flag range

State 890:
## Known stack suffix:
## flag range warn_error
## LR(1) items:
warn_error -> flag range warn_error . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production warn_error -> flag range warn_error

