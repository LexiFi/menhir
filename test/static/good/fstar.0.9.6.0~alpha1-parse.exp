Grammar has 153 nonterminal symbols, among which 3 start symbols.
Grammar has 147 terminal symbols.
Grammar has 468 productions.
nullable(warn_error_list) = false
nullable(warn_error) = false
nullable(universeFrom) = false
nullable(universe) = false
nullable(uident) = false
nullable(typeDefinition) = true
nullable(typeDecl) = false
nullable(typars) = true
nullable(typ) = false
nullable(tvarinsts) = false
nullable(tvar) = false
nullable(tuplePattern) = false
nullable(trigger) = true
nullable(tmTuple) = false
nullable(tmRefinement) = false
nullable(tmNoEqWith(tmRefinement)) = false
nullable(tmNoEqWith(appTerm)) = false
nullable(tmNoEq) = false
nullable(tmImplies) = false
nullable(tmIff) = false
nullable(tmFormula) = false
nullable(tmEqWith(tmRefinement)) = false
nullable(tmEqWith(appTerm)) = false
nullable(tmEqNoRefinement) = false
nullable(tmEq) = false
nullable(tmConjunction) = false
nullable(tmArrow(tmNoEq)) = false
nullable(tmArrow(tmFormula)) = false
nullable(term) = false
nullable(subEffect) = false
nullable(some(fsTypeArgs)) = false
nullable(simpleTerm) = false
nullable(simpleDef) = false
nullable(simpleArrowDomain) = false
nullable(simpleArrow) = false
nullable(separated_nonempty_list(SEMICOLON,tuplePattern)) = false
nullable(separated_nonempty_list(SEMICOLON,lidentOrOperator)) = false
nullable(separated_nonempty_list(SEMICOLON,fieldPattern)) = false
nullable(separated_nonempty_list(SEMICOLON,effectDecl)) = false
nullable(separated_nonempty_list(SEMICOLON,appTerm)) = false
nullable(separated_nonempty_list(DISJUNCTION,conjunctivePat)) = false
nullable(separated_nonempty_list(COMMA,tvar)) = false
nullable(separated_nonempty_list(COMMA,tmEq)) = false
nullable(separated_nonempty_list(COMMA,constructorPattern)) = false
nullable(separated_nonempty_list(COMMA,atomicTerm)) = false
nullable(separated_nonempty_list(COMMA,appTerm)) = false
nullable(separated_nonempty_list(BAR,tuplePattern)) = false
nullable(separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))) = false
nullable(separated_nonempty_list(AND,letbinding)) = false
nullable(right_flexible_nonempty_list(SEMICOLON,simpleDef)) = false
nullable(right_flexible_nonempty_list(SEMICOLON,recordFieldDecl)) = false
nullable(right_flexible_list(SEMICOLON,simpleDef)) = true
nullable(right_flexible_list(SEMICOLON,recordFieldDecl)) = true
nullable(right_flexible_list(SEMICOLON,noSeqTerm)) = true
nullable(reverse_left_flexible_nonempty_list(BAR,patternBranch)) = false
nullable(reverse_left_flexible_list(BAR,__anonymous_7)) = true
nullable(refineOpt) = true
nullable(recordFieldDecl) = false
nullable(recordExp) = false
nullable(rawDecl) = false
nullable(range) = false
nullable(quident) = false
nullable(qualifier) = false
nullable(qlident) = false
nullable(qidentWithTypeArgs(quident,some(fsTypeArgs))) = false
nullable(qidentWithTypeArgs(qlident,option(fsTypeArgs))) = false
nullable(projectionLHS) = false
nullable(pragma) = false
nullable(patternOrMultibinder) = false
nullable(patternBranch) = false
nullable(path(uident)) = false
nullable(path(lident)) = false
nullable(option(string)) = true
nullable(option(pair(hasSort,simpleTerm))) = true
nullable(option(fsTypeArgs)) = true
nullable(option(ascribeTyp)) = true
nullable(option(ascribeKind)) = true
nullable(option(__anonymous_9)) = true
nullable(option(__anonymous_8)) = true
nullable(option(__anonymous_6)) = true
nullable(option(__anonymous_5)) = true
nullable(option(__anonymous_2)) = true
nullable(option(__anonymous_1)) = true
nullable(option(FSDOC)) = true
nullable(opPrefixTerm(atomicTermQUident)) = false
nullable(opPrefixTerm(atomicTermNotQUident)) = false
nullable(nonempty_list(patternOrMultibinder)) = false
nullable(nonempty_list(dotOperator)) = false
nullable(nonempty_list(atomicUniverse)) = false
nullable(nonempty_list(atomicTerm)) = false
nullable(nonempty_list(atomicPattern)) = false
nullable(nonempty_list(aqualified(lidentOrUnderscore))) = false
nullable(nonempty_list(aqualified(lident))) = false
nullable(noSeqTerm) = false
nullable(newEffect) = false
nullable(multiBinder) = false
nullable(maybeFocusArrow) = false
nullable(maybeFocus) = true
nullable(loption(separated_nonempty_list(SEMICOLON,tuplePattern))) = true
nullable(loption(separated_nonempty_list(SEMICOLON,lidentOrOperator))) = true
nullable(loption(separated_nonempty_list(COMMA,appTerm))) = true
nullable(list(multiBinder)) = true
nullable(list(decoration)) = true
nullable(list(decl)) = true
nullable(list(constructorDecl)) = true
nullable(list(attr_letbinding)) = true
nullable(list(atomicTerm)) = true
nullable(list(argTerm)) = true
nullable(list(__anonymous_4)) = true
nullable(list(__anonymous_10)) = true
nullable(lidentOrUnderscore) = false
nullable(lidentOrOperator) = false
nullable(lident) = false
nullable(letqualifier) = true
nullable(letbinding) = false
nullable(kind) = false
nullable(inputFragment) = false
nullable(indexingTerm) = false
nullable(ident) = false
nullable(hasSort) = false
nullable(fsTypeArgs) = false
nullable(flag) = false
nullable(fieldPattern) = false
nullable(effectRedefinition) = false
nullable(effectDefinition) = false
nullable(effectDecl) = false
nullable(disjunctivePattern) = false
nullable(disjunctivePats) = false
nullable(decoration) = false
nullable(decl) = false
nullable(constructorPattern) = false
nullable(constructorDecl) = false
nullable(constant) = false
nullable(conjunctivePat) = false
nullable(boption(__anonymous_0)) = true
nullable(boption(SQUIGGLY_RARROW)) = true
nullable(binders) = true
nullable(binder) = false
nullable(attribute) = false
nullable(attr_letbinding) = false
nullable(atomicUniverse) = false
nullable(atomicTermQUident) = false
nullable(atomicTermNotQUident) = false
nullable(atomicTerm) = false
nullable(atomicPattern) = false
nullable(ascribeTyp) = false
nullable(ascribeKind) = false
nullable(argTerm) = false
nullable(aqualified(lidentOrUnderscore)) = false
nullable(aqualified(lident)) = false
nullable(aqualUniverses) = false
nullable(aqual) = false
nullable(appTerm) = false
first(warn_error_list) = OPINFIX2 OPINFIX1 MINUS
first(warn_error) = OPINFIX2 OPINFIX1 MINUS
first(universeFrom) = UNDERSCORE NAME LPAREN INT IDENT
first(universe) = UNIV_HASH
first(uident) = NAME
first(typeDefinition) = EQUALS
first(typeDecl) = NAME IDENT
first(typars) = UNDERSCORE TYP_APP_LESS TVAR LPAREN IDENT HASH DOLLAR
first(typ) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FUN FORALL FALSE EXISTS EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tvarinsts) = TYP_APP_LESS
first(tvar) = TVAR
first(tuplePattern) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(trigger) = LBRACE_COLON_PATTERN
first(tmTuple) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmRefinement) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(tmNoEqWith(tmRefinement)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(tmNoEqWith(appTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(tmNoEq) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(tmImplies) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmIff) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmFormula) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmEqWith(tmRefinement)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmEqWith(appTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmEqNoRefinement) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmEq) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmConjunction) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(tmArrow(tmNoEq)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE
first(tmArrow(tmFormula)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(term) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT
first(subEffect) = NAME
first(some(fsTypeArgs)) = TYP_APP_LESS
first(simpleTerm) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FUN FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(simpleDef) = NAME IDENT
first(simpleArrowDomain) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(simpleArrow) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(separated_nonempty_list(SEMICOLON,tuplePattern)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(separated_nonempty_list(SEMICOLON,lidentOrOperator)) = LPAREN IDENT
first(separated_nonempty_list(SEMICOLON,fieldPattern)) = NAME IDENT
first(separated_nonempty_list(SEMICOLON,effectDecl)) = IDENT
first(separated_nonempty_list(SEMICOLON,appTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(separated_nonempty_list(DISJUNCTION,conjunctivePat)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(separated_nonempty_list(COMMA,tvar)) = TVAR
first(separated_nonempty_list(COMMA,tmEq)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
first(separated_nonempty_list(COMMA,constructorPattern)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(separated_nonempty_list(COMMA,atomicTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(separated_nonempty_list(COMMA,appTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(separated_nonempty_list(BAR,tuplePattern)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))) = NAME IDENT FSDOC
first(separated_nonempty_list(AND,letbinding)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(right_flexible_nonempty_list(SEMICOLON,simpleDef)) = NAME IDENT
first(right_flexible_nonempty_list(SEMICOLON,recordFieldDecl)) = IDENT FSDOC
first(right_flexible_list(SEMICOLON,simpleDef)) = NAME IDENT
first(right_flexible_list(SEMICOLON,recordFieldDecl)) = IDENT FSDOC
first(right_flexible_list(SEMICOLON,noSeqTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT
first(reverse_left_flexible_nonempty_list(BAR,patternBranch)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY BAR
first(reverse_left_flexible_list(BAR,__anonymous_7)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY BAR
first(refineOpt) = LBRACE
first(recordFieldDecl) = IDENT FSDOC
first(recordExp) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(rawDecl) = VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT
first(range) = RANGE INT
first(quident) = NAME
first(qualifier) = UNOPTEQUALITY UNFOLDABLE UNFOLD TOTAL REIFIABLE REFLECTABLE PRIVATE OPAQUE NOEXTRACT NOEQUALITY NEW LOGIC IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE DEFAULT ASSUME ABSTRACT
first(qlident) = NAME IDENT
first(qidentWithTypeArgs(quident,some(fsTypeArgs))) = NAME
first(qidentWithTypeArgs(qlident,option(fsTypeArgs))) = NAME IDENT
first(projectionLHS) = PERCENT_LBRACK NAME LPAREN LBRACK_BAR LBRACK IDENT BANG_LBRACE
first(pragma) = PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS
first(patternOrMultibinder) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(patternBranch) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(path(uident)) = NAME
first(path(lident)) = NAME IDENT
first(option(string)) = STRING
first(option(pair(hasSort,simpleTerm))) = SUBKIND
first(option(fsTypeArgs)) = TYP_APP_LESS
first(option(ascribeTyp)) = COLON
first(option(ascribeKind)) = COLON
first(option(__anonymous_9)) = LBRACE
first(option(__anonymous_8)) = BY
first(option(__anonymous_6)) = BY
first(option(__anonymous_5)) = BY
first(option(__anonymous_2)) = OF
first(option(__anonymous_1)) = OF
first(option(FSDOC)) = FSDOC
first(opPrefixTerm(atomicTermQUident)) = OPPREFIX
first(opPrefixTerm(atomicTermNotQUident)) = OPPREFIX
first(nonempty_list(patternOrMultibinder)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(nonempty_list(dotOperator)) = DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK
first(nonempty_list(atomicUniverse)) = UNDERSCORE LPAREN INT IDENT
first(nonempty_list(atomicTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(nonempty_list(atomicPattern)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(nonempty_list(aqualified(lidentOrUnderscore))) = UNDERSCORE IDENT HASH DOLLAR
first(nonempty_list(aqualified(lident))) = IDENT HASH DOLLAR
first(noSeqTerm) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT
first(newEffect) = NAME LBRACE
first(multiBinder) = LPAREN
first(maybeFocusArrow) = SQUIGGLY_RARROW RARROW
first(maybeFocus) = SQUIGGLY_RARROW
first(loption(separated_nonempty_list(SEMICOLON,tuplePattern))) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(loption(separated_nonempty_list(SEMICOLON,lidentOrOperator))) = LPAREN IDENT
first(loption(separated_nonempty_list(COMMA,appTerm))) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(list(multiBinder)) = LPAREN
first(list(decoration)) = UNOPTEQUALITY UNFOLDABLE UNFOLD TOTAL REIFIABLE REFLECTABLE PRIVATE OPAQUE NOEXTRACT NOEQUALITY NEW LOGIC LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE FSDOC DEFAULT ASSUME ABSTRACT
first(list(decl)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT
first(list(constructorDecl)) = BAR
first(list(attr_letbinding)) = LBRACK_AT AND
first(list(atomicTerm)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(list(argTerm)) = UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(list(__anonymous_4)) = UNDERSCORE TVAR LPAREN IDENT HASH DOLLAR
first(list(__anonymous_10)) = DOT
first(lidentOrUnderscore) = UNDERSCORE IDENT
first(lidentOrOperator) = LPAREN IDENT
first(lident) = IDENT
first(letqualifier) = REC MUTABLE
first(letbinding) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(kind) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE
first(inputFragment) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PRAGMALIGHT OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
first(indexingTerm) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(ident) = NAME IDENT
first(hasSort) = SUBKIND
first(fsTypeArgs) = TYP_APP_LESS
first(flag) = OPINFIX2 OPINFIX1 MINUS
first(fieldPattern) = NAME IDENT
first(effectRedefinition) = NAME
first(effectDefinition) = LBRACE
first(effectDecl) = IDENT
first(disjunctivePattern) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(disjunctivePats) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(decoration) = UNOPTEQUALITY UNFOLDABLE UNFOLD TOTAL REIFIABLE REFLECTABLE PRIVATE OPAQUE NOEXTRACT NOEQUALITY NEW LOGIC LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE FSDOC DEFAULT ASSUME ABSTRACT
first(decl) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT
first(constructorPattern) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(constructorDecl) = BAR
first(constant) = UINT8 UINT64 UINT32 UINT16 TRUE STRING SET_RANGE_OF REIFY RANGE_OF LPAREN_RPAREN INT8 INT64 INT32 INT16 INT IEEE64 FALSE CHAR BYTEARRAY
first(conjunctivePat) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(boption(__anonymous_0)) = PRAGMALIGHT
first(boption(SQUIGGLY_RARROW)) = SQUIGGLY_RARROW
first(binders) = UNDERSCORE TVAR LPAREN IDENT HASH DOLLAR
first(binder) = UNDERSCORE TVAR IDENT HASH DOLLAR
first(attribute) = LBRACK_AT
first(attr_letbinding) = LBRACK_AT AND
first(atomicUniverse) = UNDERSCORE LPAREN INT IDENT
first(atomicTermQUident) = NAME
first(atomicTermNotQUident) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(atomicTerm) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(atomicPattern) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
first(ascribeTyp) = COLON
first(ascribeKind) = COLON
first(argTerm) = UNIV_HASH UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
first(aqualified(lidentOrUnderscore)) = UNDERSCORE IDENT HASH DOLLAR
first(aqualified(lident)) = IDENT HASH DOLLAR
first(aqualUniverses) = HASH DOLLAR
first(aqual) = HASH EQUALS DOLLAR
first(appTerm) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF PERCENT_LBRACK OPPREFIX NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE
minimal(warn_error_list) = (* 3 *) OPINFIX1 INT EOF
minimal(warn_error) = (* 2 *) OPINFIX1 INT
minimal(universeFrom) = (* 1 *) UNDERSCORE
minimal(universe) = (* 2 *) UNIV_HASH UNDERSCORE
minimal(uident) = (* 1 *) NAME
minimal(typeDefinition) = (* 0 *)
minimal(typeDecl) = (* 1 *) IDENT
minimal(typars) = (* 0 *)
minimal(typ) = (* 1 *) UNDERSCORE
minimal(tvarinsts) = (* 3 *) TYP_APP_LESS TVAR TYP_APP_GREATER
minimal(tvar) = (* 1 *) TVAR
minimal(tuplePattern) = (* 1 *) TVAR
minimal(trigger) = (* 0 *)
minimal(tmTuple) = (* 1 *) UNDERSCORE
minimal(tmRefinement) = (* 1 *) UNDERSCORE
minimal(tmNoEqWith(tmRefinement)) = (* 1 *) UNDERSCORE
minimal(tmNoEqWith(appTerm)) = (* 1 *) UNDERSCORE
minimal(tmNoEq) = (* 1 *) UNDERSCORE
minimal(tmImplies) = (* 1 *) UNDERSCORE
minimal(tmIff) = (* 1 *) UNDERSCORE
minimal(tmFormula) = (* 1 *) UNDERSCORE
minimal(tmEqWith(tmRefinement)) = (* 1 *) UNDERSCORE
minimal(tmEqWith(appTerm)) = (* 1 *) UNDERSCORE
minimal(tmEqNoRefinement) = (* 1 *) UNDERSCORE
minimal(tmEq) = (* 1 *) UNDERSCORE
minimal(tmConjunction) = (* 1 *) UNDERSCORE
minimal(tmArrow(tmNoEq)) = (* 1 *) UNDERSCORE
minimal(tmArrow(tmFormula)) = (* 1 *) UNDERSCORE
minimal(term) = (* 1 *) UNDERSCORE
minimal(subEffect) = (* 5 *) NAME SQUIGGLY_RARROW NAME EQUALS UNDERSCORE
minimal(some(fsTypeArgs)) = (* 3 *) TYP_APP_LESS UNDERSCORE TYP_APP_GREATER
minimal(simpleTerm) = (* 1 *) UNDERSCORE
minimal(simpleDef) = (* 1 *) IDENT
minimal(simpleArrowDomain) = (* 1 *) UNDERSCORE
minimal(simpleArrow) = (* 1 *) UNDERSCORE
minimal(separated_nonempty_list(SEMICOLON,tuplePattern)) = (* 1 *) TVAR
minimal(separated_nonempty_list(SEMICOLON,lidentOrOperator)) = (* 1 *) IDENT
minimal(separated_nonempty_list(SEMICOLON,fieldPattern)) = (* 1 *) IDENT
minimal(separated_nonempty_list(SEMICOLON,effectDecl)) = (* 3 *) IDENT EQUALS UNDERSCORE
minimal(separated_nonempty_list(SEMICOLON,appTerm)) = (* 1 *) UNDERSCORE
minimal(separated_nonempty_list(DISJUNCTION,conjunctivePat)) = (* 1 *) UNDERSCORE
minimal(separated_nonempty_list(COMMA,tvar)) = (* 1 *) TVAR
minimal(separated_nonempty_list(COMMA,tmEq)) = (* 1 *) UNDERSCORE
minimal(separated_nonempty_list(COMMA,constructorPattern)) = (* 1 *) TVAR
minimal(separated_nonempty_list(COMMA,atomicTerm)) = (* 1 *) UNDERSCORE
minimal(separated_nonempty_list(COMMA,appTerm)) = (* 1 *) UNDERSCORE
minimal(separated_nonempty_list(BAR,tuplePattern)) = (* 1 *) TVAR
minimal(separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))) = (* 1 *) IDENT
minimal(separated_nonempty_list(AND,letbinding)) = (* 3 *) TVAR EQUALS UNDERSCORE
minimal(right_flexible_nonempty_list(SEMICOLON,simpleDef)) = (* 1 *) IDENT
minimal(right_flexible_nonempty_list(SEMICOLON,recordFieldDecl)) = (* 3 *) IDENT COLON UNDERSCORE
minimal(right_flexible_list(SEMICOLON,simpleDef)) = (* 0 *)
minimal(right_flexible_list(SEMICOLON,recordFieldDecl)) = (* 0 *)
minimal(right_flexible_list(SEMICOLON,noSeqTerm)) = (* 0 *)
minimal(reverse_left_flexible_nonempty_list(BAR,patternBranch)) = (* 3 *) TVAR RARROW UNDERSCORE
minimal(reverse_left_flexible_list(BAR,__anonymous_7)) = (* 0 *)
minimal(refineOpt) = (* 0 *)
minimal(recordFieldDecl) = (* 3 *) IDENT COLON UNDERSCORE
minimal(recordExp) = (* 1 *) IDENT
minimal(rawDecl) = (* 1 *) PRAGMA_RESET_OPTIONS
minimal(range) = (* 1 *) INT
minimal(quident) = (* 1 *) NAME
minimal(qualifier) = (* 1 *) ASSUME
minimal(qlident) = (* 1 *) IDENT
minimal(qidentWithTypeArgs(quident,some(fsTypeArgs))) = (* 4 *) NAME TYP_APP_LESS UNDERSCORE TYP_APP_GREATER
minimal(qidentWithTypeArgs(qlident,option(fsTypeArgs))) = (* 1 *) IDENT
minimal(projectionLHS) = (* 1 *) IDENT
minimal(pragma) = (* 1 *) PRAGMA_RESET_OPTIONS
minimal(patternOrMultibinder) = (* 1 *) TVAR
minimal(patternBranch) = (* 3 *) TVAR RARROW UNDERSCORE
minimal(path(uident)) = (* 1 *) NAME
minimal(path(lident)) = (* 1 *) IDENT
minimal(option(string)) = (* 0 *)
minimal(option(pair(hasSort,simpleTerm))) = (* 0 *)
minimal(option(fsTypeArgs)) = (* 0 *)
minimal(option(ascribeTyp)) = (* 0 *)
minimal(option(ascribeKind)) = (* 0 *)
minimal(option(__anonymous_9)) = (* 0 *)
minimal(option(__anonymous_8)) = (* 0 *)
minimal(option(__anonymous_6)) = (* 0 *)
minimal(option(__anonymous_5)) = (* 0 *)
minimal(option(__anonymous_2)) = (* 0 *)
minimal(option(__anonymous_1)) = (* 0 *)
minimal(option(FSDOC)) = (* 0 *)
minimal(opPrefixTerm(atomicTermQUident)) = (* 2 *) OPPREFIX NAME
minimal(opPrefixTerm(atomicTermNotQUident)) = (* 2 *) OPPREFIX UNDERSCORE
minimal(nonempty_list(patternOrMultibinder)) = (* 1 *) TVAR
minimal(nonempty_list(dotOperator)) = (* 3 *) DOT_LPAREN UNDERSCORE RPAREN
minimal(nonempty_list(atomicUniverse)) = (* 1 *) UNDERSCORE
minimal(nonempty_list(atomicTerm)) = (* 1 *) UNDERSCORE
minimal(nonempty_list(atomicPattern)) = (* 1 *) TVAR
minimal(nonempty_list(aqualified(lidentOrUnderscore))) = (* 1 *) IDENT
minimal(nonempty_list(aqualified(lident))) = (* 1 *) IDENT
minimal(noSeqTerm) = (* 1 *) UNDERSCORE
minimal(newEffect) = (* 3 *) NAME EQUALS UNDERSCORE
minimal(multiBinder) = (* 5 *) LPAREN IDENT COLON UNDERSCORE RPAREN
minimal(maybeFocusArrow) = (* 1 *) RARROW
minimal(maybeFocus) = (* 0 *)
minimal(loption(separated_nonempty_list(SEMICOLON,tuplePattern))) = (* 0 *)
minimal(loption(separated_nonempty_list(SEMICOLON,lidentOrOperator))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,appTerm))) = (* 0 *)
minimal(list(multiBinder)) = (* 0 *)
minimal(list(decoration)) = (* 0 *)
minimal(list(decl)) = (* 0 *)
minimal(list(constructorDecl)) = (* 0 *)
minimal(list(attr_letbinding)) = (* 0 *)
minimal(list(atomicTerm)) = (* 0 *)
minimal(list(argTerm)) = (* 0 *)
minimal(list(__anonymous_4)) = (* 0 *)
minimal(list(__anonymous_10)) = (* 0 *)
minimal(lidentOrUnderscore) = (* 1 *) IDENT
minimal(lidentOrOperator) = (* 1 *) IDENT
minimal(lident) = (* 1 *) IDENT
minimal(letqualifier) = (* 0 *)
minimal(letbinding) = (* 3 *) TVAR EQUALS UNDERSCORE
minimal(kind) = (* 1 *) UNDERSCORE
minimal(inputFragment) = (* 1 *) EOF
minimal(indexingTerm) = (* 1 *) UNDERSCORE
minimal(ident) = (* 1 *) IDENT
minimal(hasSort) = (* 1 *) SUBKIND
minimal(fsTypeArgs) = (* 3 *) TYP_APP_LESS UNDERSCORE TYP_APP_GREATER
minimal(flag) = (* 1 *) OPINFIX1
minimal(fieldPattern) = (* 1 *) IDENT
minimal(effectRedefinition) = (* 3 *) NAME EQUALS UNDERSCORE
minimal(effectDefinition) = (* 9 *) LBRACE NAME COLON UNDERSCORE WITH IDENT EQUALS UNDERSCORE RBRACE
minimal(effectDecl) = (* 3 *) IDENT EQUALS UNDERSCORE
minimal(disjunctivePattern) = (* 1 *) TVAR
minimal(disjunctivePats) = (* 1 *) UNDERSCORE
minimal(decoration) = (* 1 *) FSDOC
minimal(decl) = (* 1 *) PRAGMA_RESET_OPTIONS
minimal(constructorPattern) = (* 1 *) TVAR
minimal(constructorDecl) = (* 2 *) BAR NAME
minimal(constant) = (* 1 *) LPAREN_RPAREN
minimal(conjunctivePat) = (* 1 *) UNDERSCORE
minimal(boption(__anonymous_0)) = (* 0 *)
minimal(boption(SQUIGGLY_RARROW)) = (* 0 *)
minimal(binders) = (* 0 *)
minimal(binder) = (* 1 *) IDENT
minimal(attribute) = (* 2 *) LBRACK_AT RBRACK
minimal(attr_letbinding) = (* 4 *) AND TVAR EQUALS UNDERSCORE
minimal(atomicUniverse) = (* 1 *) UNDERSCORE
minimal(atomicTermQUident) = (* 1 *) NAME
minimal(atomicTermNotQUident) = (* 1 *) UNDERSCORE
minimal(atomicTerm) = (* 1 *) UNDERSCORE
minimal(atomicPattern) = (* 1 *) TVAR
minimal(ascribeTyp) = (* 2 *) COLON UNDERSCORE
minimal(ascribeKind) = (* 2 *) COLON UNDERSCORE
minimal(argTerm) = (* 1 *) UNDERSCORE
minimal(aqualified(lidentOrUnderscore)) = (* 1 *) IDENT
minimal(aqualified(lident)) = (* 1 *) IDENT
minimal(aqualUniverses) = (* 1 *) HASH
minimal(aqual) = (* 1 *) EQUALS
minimal(appTerm) = (* 1 *) UNDERSCORE
maximal(warn_error_list) = infinity
maximal(warn_error) = infinity
maximal(universeFrom) = infinity
maximal(universe) = infinity
maximal(uident) = 1
maximal(typeDefinition) = infinity
maximal(typeDecl) = infinity
maximal(typars) = infinity
maximal(typ) = infinity
maximal(tvarinsts) = infinity
maximal(tvar) = 1
maximal(tuplePattern) = infinity
maximal(trigger) = infinity
maximal(tmTuple) = infinity
maximal(tmRefinement) = infinity
maximal(tmNoEqWith(tmRefinement)) = infinity
maximal(tmNoEqWith(appTerm)) = infinity
maximal(tmNoEq) = infinity
maximal(tmImplies) = infinity
maximal(tmIff) = infinity
maximal(tmFormula) = infinity
maximal(tmEqWith(tmRefinement)) = infinity
maximal(tmEqWith(appTerm)) = infinity
maximal(tmEqNoRefinement) = infinity
maximal(tmEq) = infinity
maximal(tmConjunction) = infinity
maximal(tmArrow(tmNoEq)) = infinity
maximal(tmArrow(tmFormula)) = infinity
maximal(term) = infinity
maximal(subEffect) = infinity
maximal(some(fsTypeArgs)) = infinity
maximal(simpleTerm) = infinity
maximal(simpleDef) = infinity
maximal(simpleArrowDomain) = infinity
maximal(simpleArrow) = infinity
maximal(separated_nonempty_list(SEMICOLON,tuplePattern)) = infinity
maximal(separated_nonempty_list(SEMICOLON,lidentOrOperator)) = infinity
maximal(separated_nonempty_list(SEMICOLON,fieldPattern)) = infinity
maximal(separated_nonempty_list(SEMICOLON,effectDecl)) = infinity
maximal(separated_nonempty_list(SEMICOLON,appTerm)) = infinity
maximal(separated_nonempty_list(DISJUNCTION,conjunctivePat)) = infinity
maximal(separated_nonempty_list(COMMA,tvar)) = infinity
maximal(separated_nonempty_list(COMMA,tmEq)) = infinity
maximal(separated_nonempty_list(COMMA,constructorPattern)) = infinity
maximal(separated_nonempty_list(COMMA,atomicTerm)) = infinity
maximal(separated_nonempty_list(COMMA,appTerm)) = infinity
maximal(separated_nonempty_list(BAR,tuplePattern)) = infinity
maximal(separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))) = infinity
maximal(separated_nonempty_list(AND,letbinding)) = infinity
maximal(right_flexible_nonempty_list(SEMICOLON,simpleDef)) = infinity
maximal(right_flexible_nonempty_list(SEMICOLON,recordFieldDecl)) = infinity
maximal(right_flexible_list(SEMICOLON,simpleDef)) = infinity
maximal(right_flexible_list(SEMICOLON,recordFieldDecl)) = infinity
maximal(right_flexible_list(SEMICOLON,noSeqTerm)) = infinity
maximal(reverse_left_flexible_nonempty_list(BAR,patternBranch)) = infinity
maximal(reverse_left_flexible_list(BAR,__anonymous_7)) = infinity
maximal(refineOpt) = infinity
maximal(recordFieldDecl) = infinity
maximal(recordExp) = infinity
maximal(rawDecl) = infinity
maximal(range) = 1
maximal(quident) = infinity
maximal(qualifier) = 1
maximal(qlident) = infinity
maximal(qidentWithTypeArgs(quident,some(fsTypeArgs))) = infinity
maximal(qidentWithTypeArgs(qlident,option(fsTypeArgs))) = infinity
maximal(projectionLHS) = infinity
maximal(pragma) = 2
maximal(patternOrMultibinder) = infinity
maximal(patternBranch) = infinity
maximal(path(uident)) = infinity
maximal(path(lident)) = infinity
maximal(option(string)) = 1
maximal(option(pair(hasSort,simpleTerm))) = infinity
maximal(option(fsTypeArgs)) = infinity
maximal(option(ascribeTyp)) = infinity
maximal(option(ascribeKind)) = infinity
maximal(option(__anonymous_9)) = infinity
maximal(option(__anonymous_8)) = infinity
maximal(option(__anonymous_6)) = infinity
maximal(option(__anonymous_5)) = infinity
maximal(option(__anonymous_2)) = infinity
maximal(option(__anonymous_1)) = infinity
maximal(option(FSDOC)) = 1
maximal(opPrefixTerm(atomicTermQUident)) = infinity
maximal(opPrefixTerm(atomicTermNotQUident)) = infinity
maximal(nonempty_list(patternOrMultibinder)) = infinity
maximal(nonempty_list(dotOperator)) = infinity
maximal(nonempty_list(atomicUniverse)) = infinity
maximal(nonempty_list(atomicTerm)) = infinity
maximal(nonempty_list(atomicPattern)) = infinity
maximal(nonempty_list(aqualified(lidentOrUnderscore))) = infinity
maximal(nonempty_list(aqualified(lident))) = infinity
maximal(noSeqTerm) = infinity
maximal(newEffect) = infinity
maximal(multiBinder) = infinity
maximal(maybeFocusArrow) = 1
maximal(maybeFocus) = 1
maximal(loption(separated_nonempty_list(SEMICOLON,tuplePattern))) = infinity
maximal(loption(separated_nonempty_list(SEMICOLON,lidentOrOperator))) = infinity
maximal(loption(separated_nonempty_list(COMMA,appTerm))) = infinity
maximal(list(multiBinder)) = infinity
maximal(list(decoration)) = infinity
maximal(list(decl)) = infinity
maximal(list(constructorDecl)) = infinity
maximal(list(attr_letbinding)) = infinity
maximal(list(atomicTerm)) = infinity
maximal(list(argTerm)) = infinity
maximal(list(__anonymous_4)) = infinity
maximal(list(__anonymous_10)) = infinity
maximal(lidentOrUnderscore) = 1
maximal(lidentOrOperator) = 3
maximal(lident) = 1
maximal(letqualifier) = 1
maximal(letbinding) = infinity
maximal(kind) = infinity
maximal(inputFragment) = infinity
maximal(indexingTerm) = infinity
maximal(ident) = 1
maximal(hasSort) = 1
maximal(fsTypeArgs) = infinity
maximal(flag) = 1
maximal(fieldPattern) = infinity
maximal(effectRedefinition) = infinity
maximal(effectDefinition) = infinity
maximal(effectDecl) = infinity
maximal(disjunctivePattern) = infinity
maximal(disjunctivePats) = infinity
maximal(decoration) = infinity
maximal(decl) = infinity
maximal(constructorPattern) = infinity
maximal(constructorDecl) = infinity
maximal(constant) = 1
maximal(conjunctivePat) = infinity
maximal(boption(__anonymous_0)) = 2
maximal(boption(SQUIGGLY_RARROW)) = 1
maximal(binders) = infinity
maximal(binder) = 2
maximal(attribute) = infinity
maximal(attr_letbinding) = infinity
maximal(atomicUniverse) = infinity
maximal(atomicTermQUident) = infinity
maximal(atomicTermNotQUident) = infinity
maximal(atomicTerm) = infinity
maximal(atomicPattern) = infinity
maximal(ascribeTyp) = infinity
maximal(ascribeKind) = infinity
maximal(argTerm) = infinity
maximal(aqualified(lidentOrUnderscore)) = 2
maximal(aqualified(lident)) = 2
maximal(aqualUniverses) = 1
maximal(aqual) = 1
maximal(appTerm) = infinity
follow(warn_error_list) = #
follow(warn_error) = EOF
follow(universeFrom) = RPAREN OPINFIX2
follow(universe) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(uident) = WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE OF NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(typeDefinition) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT
follow(typeDecl) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT
follow(typars) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT
follow(typ) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tvarinsts) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT COLON ASSUME AND ABSTRACT
follow(tvar) = WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(tuplePattern) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW EQUALS COLON BAR
follow(trigger) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT
follow(tmTuple) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tmRefinement) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT #
follow(tmNoEqWith(tmRefinement)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT #
follow(tmNoEqWith(appTerm)) = RPAREN RARROW PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS COLON_COLON BACKTICK AMP
follow(tmNoEq) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE RPAREN REIFIABLE REFLECTABLE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT
follow(tmImplies) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tmIff) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tmFormula) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tmEqWith(tmRefinement)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tmEqWith(appTerm)) = RPAREN RARROW PIPE_RIGHT OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a MINUS LBRACE EQUALS COLON_EQUALS
follow(tmEqNoRefinement) = RPAREN RARROW LBRACE
follow(tmEq) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tmConjunction) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(tmArrow(tmNoEq)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT BY ASSUME AND ABSTRACT
follow(tmArrow(tmFormula)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(term) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(subEffect) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(some(fsTypeArgs)) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(simpleTerm) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(simpleDef) = SEMICOLON RBRACE
follow(simpleArrowDomain) = RARROW
follow(simpleArrow) = RPAREN LBRACE
follow(separated_nonempty_list(SEMICOLON,tuplePattern)) = RBRACK
follow(separated_nonempty_list(SEMICOLON,lidentOrOperator)) = RBRACK
follow(separated_nonempty_list(SEMICOLON,fieldPattern)) = RBRACE
follow(separated_nonempty_list(SEMICOLON,effectDecl)) = RBRACE
follow(separated_nonempty_list(SEMICOLON,appTerm)) = RBRACE DISJUNCTION
follow(separated_nonempty_list(DISJUNCTION,conjunctivePat)) = RBRACE
follow(separated_nonempty_list(COMMA,tvar)) = TYP_APP_GREATER
follow(separated_nonempty_list(COMMA,tmEq)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BY BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(separated_nonempty_list(COMMA,constructorPattern)) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR
follow(separated_nonempty_list(COMMA,atomicTerm)) = TYP_APP_GREATER
follow(separated_nonempty_list(COMMA,appTerm)) = RBRACE
follow(separated_nonempty_list(BAR,tuplePattern)) = WHEN SQUIGGLY_RARROW RARROW
follow(separated_nonempty_list(AND,pair(option(FSDOC),typeDecl))) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(separated_nonempty_list(AND,letbinding)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(right_flexible_nonempty_list(SEMICOLON,simpleDef)) = RBRACE
follow(right_flexible_nonempty_list(SEMICOLON,recordFieldDecl)) = RBRACE
follow(right_flexible_list(SEMICOLON,simpleDef)) = RBRACE
follow(right_flexible_list(SEMICOLON,recordFieldDecl)) = RBRACE
follow(right_flexible_list(SEMICOLON,noSeqTerm)) = RBRACK BAR_RBRACK
follow(reverse_left_flexible_nonempty_list(BAR,patternBranch)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(reverse_left_flexible_list(BAR,__anonymous_7)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(refineOpt) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT #
follow(recordFieldDecl) = SEMICOLON RBRACE
follow(recordExp) = RBRACE
follow(rawDecl) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(range) = OPINFIX2 OPINFIX1 MINUS EOF
follow(quident) = WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(qualifier) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT
follow(qlident) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(qidentWithTypeArgs(quident,some(fsTypeArgs))) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(qidentWithTypeArgs(qlident,option(fsTypeArgs))) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(projectionLHS) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(pragma) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(patternOrMultibinder) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COLON CHAR BYTEARRAY
follow(patternBranch) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(path(uident)) = WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF QMARK_DOT QMARK PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(path(lident)) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(option(string)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(option(pair(hasSort,simpleTerm))) = RPAREN
follow(option(fsTypeArgs)) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(option(ascribeTyp)) = EQUALS
follow(option(ascribeKind)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT
follow(option(__anonymous_9)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT #
follow(option(__anonymous_8)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(option(__anonymous_6)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(option(__anonymous_5)) = EQUALS
follow(option(__anonymous_2)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT
follow(option(__anonymous_1)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(option(FSDOC)) = NAME IDENT
follow(opPrefixTerm(atomicTermQUident)) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(opPrefixTerm(atomicTermNotQUident)) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(nonempty_list(patternOrMultibinder)) = RARROW EQUALS COLON
follow(nonempty_list(dotOperator)) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(nonempty_list(atomicUniverse)) = RPAREN OPINFIX2
follow(nonempty_list(atomicTerm)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(nonempty_list(atomicPattern)) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR
follow(nonempty_list(aqualified(lidentOrUnderscore))) = COLON
follow(nonempty_list(aqualified(lident))) = COLON
follow(noSeqTerm) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBKIND SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LENS_PAREN_RIGHT LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ABSTRACT #
follow(newEffect) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(multiBinder) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT
follow(maybeFocusArrow) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRY TRUE TILDE SYNTH STRING SET_RANGE_OF REQUIRES REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK ATTRIBUTES ASSUME ASSERT
follow(maybeFocus) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
follow(loption(separated_nonempty_list(SEMICOLON,tuplePattern))) = RBRACK
follow(loption(separated_nonempty_list(SEMICOLON,lidentOrOperator))) = RBRACK
follow(loption(separated_nonempty_list(COMMA,appTerm))) = RBRACE
follow(list(multiBinder)) = COLON
follow(list(decoration)) = VAL TYPE SUB_EFFECT SPLICE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN NEW_EFFECT MODULE LET INCLUDE FSDOC_STANDALONE EXCEPTION EFFECT
follow(list(decl)) = EOF
follow(list(constructorDecl)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT
follow(list(attr_letbinding)) = IN
follow(list(atomicTerm)) = RBRACK
follow(list(argTerm)) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT #
follow(list(__anonymous_4)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT
follow(list(__anonymous_10)) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(lidentOrUnderscore) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LONG_LEFT_ARROW LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT
follow(lidentOrOperator) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF SEMICOLON REIFY RBRACK RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR COLON CHAR BYTEARRAY
follow(lident) = WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(letqualifier) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
follow(letbinding) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME AND ABSTRACT
follow(kind) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT
follow(inputFragment) = #
follow(indexingTerm) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(ident) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INT INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT
follow(hasSort) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FUN FALSE EQUALS DOLLAR CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
follow(fsTypeArgs) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(flag) = RANGE INT
follow(fieldPattern) = SEMICOLON RBRACE
follow(effectRedefinition) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(effectDefinition) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(effectDecl) = SEMICOLON RBRACE
follow(disjunctivePattern) = WHEN SQUIGGLY_RARROW RARROW
follow(disjunctivePats) = RBRACE
follow(decoration) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME ABSTRACT
follow(decl) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(constructorPattern) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR
follow(constructorDecl) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT BAR ASSUME AND ABSTRACT
follow(constant) = WITH WHEN VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DOLLAR DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(conjunctivePat) = RBRACE DISJUNCTION
follow(boption(__anonymous_0)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EOF EFFECT DEFAULT ASSUME ABSTRACT
follow(boption(SQUIGGLY_RARROW)) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SET_RANGE_OF REIFY RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE DOLLAR CHAR BYTEARRAY
follow(binders) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DEFAULT COLON ASSUME AND ABSTRACT
follow(binder) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT
follow(attribute) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EFFECT DEFAULT ASSUME AND ABSTRACT
follow(attr_letbinding) = LBRACK_AT IN AND
follow(atomicUniverse) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(atomicTermQUident) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(atomicTermNotQUident) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT_LPAREN DOT_LENS_PAREN_LEFT DOT_LBRACK_BAR DOT_LBRACK DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(atomicTerm) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(atomicPattern) = WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR
follow(ascribeTyp) = EQUALS
follow(ascribeKind) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DEFAULT ASSUME AND ABSTRACT
follow(argTerm) = WITH VAL UNOPTEQUALITY UNIV_HASH UNFOLDABLE UNFOLD UNDERSCORE UINT8 UINT64 UINT32 UINT16 TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING SQUIGGLY_RARROW SPLICE SET_RANGE_OF SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFY REIFIABLE REFLECTABLE RBRACK RBRACE RARROW RANGE_OF PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT PERCENT_LBRACK OPPREFIX OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW NAME MODULE MINUS LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK_AT LBRACK LBRACE IRREDUCIBLE INT8 INT64 INT32 INT16 INT INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF IEEE64 IDENT HASH FSDOC_STANDALONE FSDOC FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BY BEGIN BAR_RBRACK BAR BANG_LBRACE BACKTICK ASSUME AND AMP ABSTRACT #
follow(aqualified(lidentOrUnderscore)) = VAL UNOPTEQUALITY UNFOLDABLE UNFOLD UNDERSCORE TYPE TVAR TOTAL SUB_EFFECT SPLICE REIFIABLE REFLECTABLE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE LPAREN LOGIC LET LBRACK_AT IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IDENT HASH FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF EFFECT DOT DOLLAR DEFAULT COLON ASSUME AND ABSTRACT
follow(aqualified(lident)) = WHEN UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE STRING SQUIGGLY_RARROW SET_RANGE_OF SEMICOLON RPAREN REIFY RBRACK RBRACE RARROW RANGE_OF NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT HASH FALSE EQUALS DOLLAR COMMA COLON_COLON COLON CHAR BYTEARRAY BAR
follow(aqualUniverses) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
follow(aqual) = UNDERSCORE UINT8 UINT64 UINT32 UINT16 TVAR TRUE TILDE STRING SET_RANGE_OF REIFY RANGE_OF QUOTE PERC_BACKTICK PERCENT_LBRACK OPPREFIX NAME MINUS LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT8 INT64 INT32 INT16 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BACKTICK_HASH BACKTICK_AT BACKTICK
follow(appTerm) = WITH VAL UNOPTEQUALITY UNFOLDABLE UNFOLD TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SQUIGGLY_RARROW SPLICE SEMICOLON_SEMICOLON SEMICOLON RPAREN REIFIABLE REFLECTABLE RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PIPE_RIGHT OPINFIX4 OPINFIX3 OPINFIX2 OPINFIX1 OPINFIX0d OPINFIX0c OPINFIX0b OPINFIX0a OPEN OPAQUE NOEXTRACT NOEQUALITY NEW_EFFECT NEW MODULE MINUS LOGIC LET LENS_PAREN_RIGHT LBRACK_AT LBRACE IRREDUCIBLE INLINE_FOR_EXTRACTION INLINE INCLUDE IN IMPLIES IFF FSDOC_STANDALONE FSDOC EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS COLON_COLON BY BAR_RBRACK BAR BACKTICK ASSUME AND AMP ABSTRACT #
Built an LR(0) automaton with 891 states.
The grammar is not SLR(1) -- 67 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 891 states.
313 shift/reduce conflicts were silently solved.
File "fstar.0.9.6.0~alpha1-parse.mly", line 98, characters 0-5:
Warning: the precedence level assigned to BACKTICK_AT is never useful.
File "fstar.0.9.6.0~alpha1-parse.mly", line 98, characters 0-5:
Warning: the precedence level assigned to BACKTICK_HASH is never useful.
Warning: 4 states have shift/reduce conflicts.
Warning: 5 shift/reduce conflicts were arbitrarily resolved.
Warning: 194 end-of-stream conflicts were arbitrarily resolved.
359 out of 891 states have a default reduction.
The action table is 131868 entries; 14179 non-zero; 11800 compressed.
The action table occupies roughly 23696 bytes.
The goto table is 138996 entries; 4924 non-zero; 13345 compressed.
The goto table occupies roughly 26784 bytes.
The error table occupies roughly 16520 bytes.
The default_reduction table occupies roughly 1816 bytes.
The lhs table occupies roughly 504 bytes.
The trace table occupies roughly 8 bytes.
