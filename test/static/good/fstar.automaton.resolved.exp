State 0:
inputFragment' -> . inputFragment [ # ]
-- On TOTAL shift to state 1
-- On SUB_EFFECT shift to state 2
-- On PRIVATE shift to state 357
-- On PRAGMA_SET_OPTIONS shift to state 358
-- On PRAGMA_RESET_OPTIONS shift to state 360
-- On PRAGMALIGHT shift to state 361
-- On OPEN shift to state 363
-- On OPAQUE shift to state 365
-- On LOGIC shift to state 366
-- On LET shift to state 367
-- On KIND shift to state 371
-- On EXCEPTION shift to state 377
-- On DEFAULT shift to state 382
-- On ASSUME shift to state 383
-- On tycon shift to state 384
-- On qualifiers shift to state 385
-- On qualifier shift to state 455
-- On pragma shift to state 458
-- On maybe_pragma_light shift to state 459
-- On kind_abbrev shift to state 464
-- On inputFragment shift to state 479
-- On file shift to state 480
-- On decl2 shift to state 468
-- On decl shift to state 481
-- On assumeTag shift to state 471
-- On VAL reduce production qualifiers ->
-- On TYPE reduce production qualifiers ->
-- On NEW_EFFECT reduce production qualifiers ->
-- On MODULE reduce production maybe_pragma_light ->
-- On EOF reduce production maybe_pragma_light ->
-- On EFFECT reduce production qualifiers ->

State 1:
qualifier -> TOTAL . [ VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME ]
-- On VAL reduce production qualifier -> TOTAL
-- On TYPE reduce production qualifier -> TOTAL
-- On TOTAL reduce production qualifier -> TOTAL
-- On PRIVATE reduce production qualifier -> TOTAL
-- On OPAQUE reduce production qualifier -> TOTAL
-- On NEW_EFFECT reduce production qualifier -> TOTAL
-- On LOGIC reduce production qualifier -> TOTAL
-- On EFFECT reduce production qualifier -> TOTAL
-- On DEFAULT reduce production qualifier -> TOTAL
-- On ASSUME reduce production qualifier -> TOTAL

State 2:
decl2 -> SUB_EFFECT . sub_effect [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On sub_effect shift to state 4
-- On qname shift to state 5
-- On namepath shift to state 64
-- On name shift to state 65

State 3:
name -> NAME . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE OF NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production name -> NAME
-- On WHEN reduce production name -> NAME
-- On VAL reduce production name -> NAME
-- On UNDERSCORE reduce production name -> NAME
-- On UINT8 reduce production name -> NAME
-- On TYP_APP_LESS reduce production name -> NAME
-- On TYP_APP_GREATER reduce production name -> NAME
-- On TYPE reduce production name -> NAME
-- On TVAR reduce production name -> NAME
-- On TRUE reduce production name -> NAME
-- On TOTAL reduce production name -> NAME
-- On THEN reduce production name -> NAME
-- On SUB_EFFECT reduce production name -> NAME
-- On SUBTYPE reduce production name -> NAME
-- On SUBKIND reduce production name -> NAME
-- On STRING reduce production name -> NAME
-- On STAR reduce production name -> NAME
-- On SQUIGGLY_RARROW reduce production name -> NAME
-- On SEMICOLON_SEMICOLON reduce production name -> NAME
-- On SEMICOLON reduce production name -> NAME
-- On RPAREN reduce production name -> NAME
-- On RBRACK reduce production name -> NAME
-- On RBRACE reduce production name -> NAME
-- On RARROW reduce production name -> NAME
-- On PRIVATE reduce production name -> NAME
-- On PRAGMA_SET_OPTIONS reduce production name -> NAME
-- On PRAGMA_RESET_OPTIONS reduce production name -> NAME
-- On PLUS_OP reduce production name -> NAME
-- On PERCENT_LBRACK reduce production name -> NAME
-- On OPEN reduce production name -> NAME
-- On OPAQUE reduce production name -> NAME
-- On OF reduce production name -> NAME
-- On NEW_EFFECT reduce production name -> NAME
-- On NAME reduce production name -> NAME
-- On MODULE reduce production name -> NAME
-- On MINUS_OP reduce production name -> NAME
-- On LPAREN_RPAREN reduce production name -> NAME
-- On LPAREN reduce production name -> NAME
-- On LOGIC reduce production name -> NAME
-- On LET reduce production name -> NAME
-- On LENS_PAREN_RIGHT reduce production name -> NAME
-- On LENS_PAREN_LEFT reduce production name -> NAME
-- On LBRACK_BAR reduce production name -> NAME
-- On LBRACK reduce production name -> NAME
-- On LBRACE reduce production name -> NAME
-- On KIND reduce production name -> NAME
-- On INT64 reduce production name -> NAME
-- On INT32 reduce production name -> NAME
-- On INT reduce production name -> NAME
-- On IN reduce production name -> NAME
-- On IMPLIES reduce production name -> NAME
-- On IFF reduce production name -> NAME
-- On IEEE64 reduce production name -> NAME
-- On IDENT reduce production name -> NAME
-- On HASH reduce production name -> NAME
-- On FALSE reduce production name -> NAME
-- On EXCEPTION reduce production name -> NAME
-- On EQUALS reduce production name -> NAME
-- On EOF reduce production name -> NAME
-- On END reduce production name -> NAME
-- On ELSE reduce production name -> NAME
-- On EFFECT reduce production name -> NAME
-- On DOT reduce production name -> NAME
-- On DIV_MOD_OP reduce production name -> NAME
-- On DISJUNCTION reduce production name -> NAME
-- On DEFAULT reduce production name -> NAME
-- On CUSTOM_OP reduce production name -> NAME
-- On CONJUNCTION reduce production name -> NAME
-- On COMMA reduce production name -> NAME
-- On COLON_EQUALS reduce production name -> NAME
-- On COLON_COLON reduce production name -> NAME
-- On COLON reduce production name -> NAME
-- On CHAR reduce production name -> NAME
-- On BYTEARRAY reduce production name -> NAME
-- On BEGIN reduce production name -> NAME
-- On BAR_RBRACK reduce production name -> NAME
-- On BAR_BAR reduce production name -> NAME
-- On BAR reduce production name -> NAME
-- On BANG_LBRACE reduce production name -> NAME
-- On BANG reduce production name -> NAME
-- On ASSUME reduce production name -> NAME
-- On ASSERT reduce production name -> NAME
-- On AND reduce production name -> NAME
-- On AMP_AMP reduce production name -> NAME
-- On AMP reduce production name -> NAME

State 4:
decl2 -> SUB_EFFECT sub_effect . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> SUB_EFFECT sub_effect
-- On TYPE reduce production decl2 -> SUB_EFFECT sub_effect
-- On TOTAL reduce production decl2 -> SUB_EFFECT sub_effect
-- On SUB_EFFECT reduce production decl2 -> SUB_EFFECT sub_effect
-- On SEMICOLON_SEMICOLON reduce production decl2 -> SUB_EFFECT sub_effect
-- On PRIVATE reduce production decl2 -> SUB_EFFECT sub_effect
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> SUB_EFFECT sub_effect
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> SUB_EFFECT sub_effect
-- On OPEN reduce production decl2 -> SUB_EFFECT sub_effect
-- On OPAQUE reduce production decl2 -> SUB_EFFECT sub_effect
-- On NEW_EFFECT reduce production decl2 -> SUB_EFFECT sub_effect
-- On MODULE reduce production decl2 -> SUB_EFFECT sub_effect
-- On LOGIC reduce production decl2 -> SUB_EFFECT sub_effect
-- On LET reduce production decl2 -> SUB_EFFECT sub_effect
-- On KIND reduce production decl2 -> SUB_EFFECT sub_effect
-- On EXCEPTION reduce production decl2 -> SUB_EFFECT sub_effect
-- On EOF reduce production decl2 -> SUB_EFFECT sub_effect
-- On END reduce production decl2 -> SUB_EFFECT sub_effect
-- On EFFECT reduce production decl2 -> SUB_EFFECT sub_effect
-- On DEFAULT reduce production decl2 -> SUB_EFFECT sub_effect
-- On ASSUME reduce production decl2 -> SUB_EFFECT sub_effect

State 5:
sub_effect -> qname . SQUIGGLY_RARROW qname EQUALS simpleTerm [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On SQUIGGLY_RARROW shift to state 6

State 6:
sub_effect -> qname SQUIGGLY_RARROW . qname EQUALS simpleTerm [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On qname shift to state 7
-- On namepath shift to state 64
-- On name shift to state 65

State 7:
sub_effect -> qname SQUIGGLY_RARROW qname . EQUALS simpleTerm [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On EQUALS shift to state 8

State 8:
sub_effect -> qname SQUIGGLY_RARROW qname EQUALS . simpleTerm [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 356
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 9:
atomicTerm -> UNDERSCORE . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production atomicTerm -> UNDERSCORE
-- On VAL reduce production atomicTerm -> UNDERSCORE
-- On UNDERSCORE reduce production atomicTerm -> UNDERSCORE
-- On UINT8 reduce production atomicTerm -> UNDERSCORE
-- On TYP_APP_GREATER reduce production atomicTerm -> UNDERSCORE
-- On TYPE reduce production atomicTerm -> UNDERSCORE
-- On TVAR reduce production atomicTerm -> UNDERSCORE
-- On TRUE reduce production atomicTerm -> UNDERSCORE
-- On TOTAL reduce production atomicTerm -> UNDERSCORE
-- On THEN reduce production atomicTerm -> UNDERSCORE
-- On SUB_EFFECT reduce production atomicTerm -> UNDERSCORE
-- On SUBTYPE reduce production atomicTerm -> UNDERSCORE
-- On SUBKIND reduce production atomicTerm -> UNDERSCORE
-- On STRING reduce production atomicTerm -> UNDERSCORE
-- On STAR reduce production atomicTerm -> UNDERSCORE
-- On SQUIGGLY_RARROW reduce production atomicTerm -> UNDERSCORE
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> UNDERSCORE
-- On SEMICOLON reduce production atomicTerm -> UNDERSCORE
-- On RPAREN reduce production atomicTerm -> UNDERSCORE
-- On RBRACK reduce production atomicTerm -> UNDERSCORE
-- On RBRACE reduce production atomicTerm -> UNDERSCORE
-- On RARROW reduce production atomicTerm -> UNDERSCORE
-- On PRIVATE reduce production atomicTerm -> UNDERSCORE
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> UNDERSCORE
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> UNDERSCORE
-- On PLUS_OP reduce production atomicTerm -> UNDERSCORE
-- On PERCENT_LBRACK reduce production atomicTerm -> UNDERSCORE
-- On OPEN reduce production atomicTerm -> UNDERSCORE
-- On OPAQUE reduce production atomicTerm -> UNDERSCORE
-- On NEW_EFFECT reduce production atomicTerm -> UNDERSCORE
-- On NAME reduce production atomicTerm -> UNDERSCORE
-- On MODULE reduce production atomicTerm -> UNDERSCORE
-- On MINUS_OP reduce production atomicTerm -> UNDERSCORE
-- On LPAREN_RPAREN reduce production atomicTerm -> UNDERSCORE
-- On LPAREN reduce production atomicTerm -> UNDERSCORE
-- On LOGIC reduce production atomicTerm -> UNDERSCORE
-- On LET reduce production atomicTerm -> UNDERSCORE
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> UNDERSCORE
-- On LENS_PAREN_LEFT reduce production atomicTerm -> UNDERSCORE
-- On LBRACK_BAR reduce production atomicTerm -> UNDERSCORE
-- On LBRACK reduce production atomicTerm -> UNDERSCORE
-- On LBRACE reduce production atomicTerm -> UNDERSCORE
-- On KIND reduce production atomicTerm -> UNDERSCORE
-- On INT64 reduce production atomicTerm -> UNDERSCORE
-- On INT32 reduce production atomicTerm -> UNDERSCORE
-- On INT reduce production atomicTerm -> UNDERSCORE
-- On IN reduce production atomicTerm -> UNDERSCORE
-- On IMPLIES reduce production atomicTerm -> UNDERSCORE
-- On IFF reduce production atomicTerm -> UNDERSCORE
-- On IEEE64 reduce production atomicTerm -> UNDERSCORE
-- On IDENT reduce production atomicTerm -> UNDERSCORE
-- On HASH reduce production atomicTerm -> UNDERSCORE
-- On FALSE reduce production atomicTerm -> UNDERSCORE
-- On EXCEPTION reduce production atomicTerm -> UNDERSCORE
-- On EQUALS reduce production atomicTerm -> UNDERSCORE
-- On EOF reduce production atomicTerm -> UNDERSCORE
-- On END reduce production atomicTerm -> UNDERSCORE
-- On ELSE reduce production atomicTerm -> UNDERSCORE
-- On EFFECT reduce production atomicTerm -> UNDERSCORE
-- On DIV_MOD_OP reduce production atomicTerm -> UNDERSCORE
-- On DISJUNCTION reduce production atomicTerm -> UNDERSCORE
-- On DEFAULT reduce production atomicTerm -> UNDERSCORE
-- On CUSTOM_OP reduce production atomicTerm -> UNDERSCORE
-- On CONJUNCTION reduce production atomicTerm -> UNDERSCORE
-- On COMMA reduce production atomicTerm -> UNDERSCORE
-- On COLON_EQUALS reduce production atomicTerm -> UNDERSCORE
-- On COLON_COLON reduce production atomicTerm -> UNDERSCORE
-- On CHAR reduce production atomicTerm -> UNDERSCORE
-- On BYTEARRAY reduce production atomicTerm -> UNDERSCORE
-- On BEGIN reduce production atomicTerm -> UNDERSCORE
-- On BAR_RBRACK reduce production atomicTerm -> UNDERSCORE
-- On BAR_BAR reduce production atomicTerm -> UNDERSCORE
-- On BAR reduce production atomicTerm -> UNDERSCORE
-- On BANG_LBRACE reduce production atomicTerm -> UNDERSCORE
-- On BANG reduce production atomicTerm -> UNDERSCORE
-- On ASSUME reduce production atomicTerm -> UNDERSCORE
-- On ASSERT reduce production atomicTerm -> UNDERSCORE
-- On AND reduce production atomicTerm -> UNDERSCORE
-- On AMP_AMP reduce production atomicTerm -> UNDERSCORE
-- On AMP reduce production atomicTerm -> UNDERSCORE

State 10:
constant -> UINT8 . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> UINT8
-- On WHEN reduce production constant -> UINT8
-- On VAL reduce production constant -> UINT8
-- On UNDERSCORE reduce production constant -> UINT8
-- On UINT8 reduce production constant -> UINT8
-- On TYP_APP_GREATER reduce production constant -> UINT8
-- On TYPE reduce production constant -> UINT8
-- On TVAR reduce production constant -> UINT8
-- On TRUE reduce production constant -> UINT8
-- On TOTAL reduce production constant -> UINT8
-- On THEN reduce production constant -> UINT8
-- On SUB_EFFECT reduce production constant -> UINT8
-- On SUBTYPE reduce production constant -> UINT8
-- On SUBKIND reduce production constant -> UINT8
-- On STRING reduce production constant -> UINT8
-- On STAR reduce production constant -> UINT8
-- On SQUIGGLY_RARROW reduce production constant -> UINT8
-- On SEMICOLON_SEMICOLON reduce production constant -> UINT8
-- On SEMICOLON reduce production constant -> UINT8
-- On RPAREN reduce production constant -> UINT8
-- On RBRACK reduce production constant -> UINT8
-- On RBRACE reduce production constant -> UINT8
-- On RARROW reduce production constant -> UINT8
-- On PRIVATE reduce production constant -> UINT8
-- On PRAGMA_SET_OPTIONS reduce production constant -> UINT8
-- On PRAGMA_RESET_OPTIONS reduce production constant -> UINT8
-- On PLUS_OP reduce production constant -> UINT8
-- On PERCENT_LBRACK reduce production constant -> UINT8
-- On OPEN reduce production constant -> UINT8
-- On OPAQUE reduce production constant -> UINT8
-- On NEW_EFFECT reduce production constant -> UINT8
-- On NAME reduce production constant -> UINT8
-- On MODULE reduce production constant -> UINT8
-- On MINUS_OP reduce production constant -> UINT8
-- On LPAREN_RPAREN reduce production constant -> UINT8
-- On LPAREN reduce production constant -> UINT8
-- On LOGIC reduce production constant -> UINT8
-- On LET reduce production constant -> UINT8
-- On LENS_PAREN_RIGHT reduce production constant -> UINT8
-- On LENS_PAREN_LEFT reduce production constant -> UINT8
-- On LBRACK_BAR reduce production constant -> UINT8
-- On LBRACK reduce production constant -> UINT8
-- On LBRACE reduce production constant -> UINT8
-- On KIND reduce production constant -> UINT8
-- On INT64 reduce production constant -> UINT8
-- On INT32 reduce production constant -> UINT8
-- On INT reduce production constant -> UINT8
-- On IN reduce production constant -> UINT8
-- On IMPLIES reduce production constant -> UINT8
-- On IFF reduce production constant -> UINT8
-- On IEEE64 reduce production constant -> UINT8
-- On IDENT reduce production constant -> UINT8
-- On HASH reduce production constant -> UINT8
-- On FALSE reduce production constant -> UINT8
-- On EXCEPTION reduce production constant -> UINT8
-- On EQUALS reduce production constant -> UINT8
-- On EOF reduce production constant -> UINT8
-- On END reduce production constant -> UINT8
-- On ELSE reduce production constant -> UINT8
-- On EFFECT reduce production constant -> UINT8
-- On DIV_MOD_OP reduce production constant -> UINT8
-- On DISJUNCTION reduce production constant -> UINT8
-- On DEFAULT reduce production constant -> UINT8
-- On CUSTOM_OP reduce production constant -> UINT8
-- On CONJUNCTION reduce production constant -> UINT8
-- On COMMA reduce production constant -> UINT8
-- On COLON_EQUALS reduce production constant -> UINT8
-- On COLON_COLON reduce production constant -> UINT8
-- On COLON reduce production constant -> UINT8
-- On CHAR reduce production constant -> UINT8
-- On BYTEARRAY reduce production constant -> UINT8
-- On BEGIN reduce production constant -> UINT8
-- On BAR_RBRACK reduce production constant -> UINT8
-- On BAR_BAR reduce production constant -> UINT8
-- On BAR reduce production constant -> UINT8
-- On BANG_LBRACE reduce production constant -> UINT8
-- On BANG reduce production constant -> UINT8
-- On ASSUME reduce production constant -> UINT8
-- On ASSERT reduce production constant -> UINT8
-- On AND reduce production constant -> UINT8
-- On AMP_AMP reduce production constant -> UINT8
-- On AMP reduce production constant -> UINT8

State 11:
tvar -> TVAR . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production tvar -> TVAR
-- On WHEN reduce production tvar -> TVAR
-- On VAL reduce production tvar -> TVAR
-- On UNDERSCORE reduce production tvar -> TVAR
-- On UINT8 reduce production tvar -> TVAR
-- On TYP_APP_GREATER reduce production tvar -> TVAR
-- On TYPE reduce production tvar -> TVAR
-- On TVAR reduce production tvar -> TVAR
-- On TRUE reduce production tvar -> TVAR
-- On TOTAL reduce production tvar -> TVAR
-- On THEN reduce production tvar -> TVAR
-- On SUB_EFFECT reduce production tvar -> TVAR
-- On SUBTYPE reduce production tvar -> TVAR
-- On SUBKIND reduce production tvar -> TVAR
-- On STRING reduce production tvar -> TVAR
-- On STAR reduce production tvar -> TVAR
-- On SQUIGGLY_RARROW reduce production tvar -> TVAR
-- On SEMICOLON_SEMICOLON reduce production tvar -> TVAR
-- On SEMICOLON reduce production tvar -> TVAR
-- On RPAREN reduce production tvar -> TVAR
-- On RBRACK reduce production tvar -> TVAR
-- On RBRACE reduce production tvar -> TVAR
-- On RARROW reduce production tvar -> TVAR
-- On PRIVATE reduce production tvar -> TVAR
-- On PRAGMA_SET_OPTIONS reduce production tvar -> TVAR
-- On PRAGMA_RESET_OPTIONS reduce production tvar -> TVAR
-- On PLUS_OP reduce production tvar -> TVAR
-- On PERCENT_LBRACK reduce production tvar -> TVAR
-- On OPEN reduce production tvar -> TVAR
-- On OPAQUE reduce production tvar -> TVAR
-- On NEW_EFFECT reduce production tvar -> TVAR
-- On NAME reduce production tvar -> TVAR
-- On MODULE reduce production tvar -> TVAR
-- On MINUS_OP reduce production tvar -> TVAR
-- On LPAREN_RPAREN reduce production tvar -> TVAR
-- On LPAREN reduce production tvar -> TVAR
-- On LOGIC reduce production tvar -> TVAR
-- On LET reduce production tvar -> TVAR
-- On LENS_PAREN_RIGHT reduce production tvar -> TVAR
-- On LENS_PAREN_LEFT reduce production tvar -> TVAR
-- On LBRACK_BAR reduce production tvar -> TVAR
-- On LBRACK reduce production tvar -> TVAR
-- On LBRACE reduce production tvar -> TVAR
-- On KIND reduce production tvar -> TVAR
-- On INT64 reduce production tvar -> TVAR
-- On INT32 reduce production tvar -> TVAR
-- On INT reduce production tvar -> TVAR
-- On IN reduce production tvar -> TVAR
-- On IMPLIES reduce production tvar -> TVAR
-- On IFF reduce production tvar -> TVAR
-- On IEEE64 reduce production tvar -> TVAR
-- On IDENT reduce production tvar -> TVAR
-- On HASH reduce production tvar -> TVAR
-- On FALSE reduce production tvar -> TVAR
-- On EXCEPTION reduce production tvar -> TVAR
-- On EQUALS reduce production tvar -> TVAR
-- On EOF reduce production tvar -> TVAR
-- On END reduce production tvar -> TVAR
-- On ELSE reduce production tvar -> TVAR
-- On EFFECT reduce production tvar -> TVAR
-- On DOT reduce production tvar -> TVAR
-- On DIV_MOD_OP reduce production tvar -> TVAR
-- On DISJUNCTION reduce production tvar -> TVAR
-- On DEFAULT reduce production tvar -> TVAR
-- On CUSTOM_OP reduce production tvar -> TVAR
-- On CONJUNCTION reduce production tvar -> TVAR
-- On COMMA reduce production tvar -> TVAR
-- On COLON_EQUALS reduce production tvar -> TVAR
-- On COLON_COLON reduce production tvar -> TVAR
-- On COLON reduce production tvar -> TVAR
-- On CHAR reduce production tvar -> TVAR
-- On BYTEARRAY reduce production tvar -> TVAR
-- On BEGIN reduce production tvar -> TVAR
-- On BAR_RBRACK reduce production tvar -> TVAR
-- On BAR_BAR reduce production tvar -> TVAR
-- On BAR reduce production tvar -> TVAR
-- On BANG_LBRACE reduce production tvar -> TVAR
-- On BANG reduce production tvar -> TVAR
-- On ASSUME reduce production tvar -> TVAR
-- On ASSERT reduce production tvar -> TVAR
-- On AND reduce production tvar -> TVAR
-- On AMP_AMP reduce production tvar -> TVAR
-- On AMP reduce production tvar -> TVAR

State 12:
constant -> TRUE . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> TRUE
-- On WHEN reduce production constant -> TRUE
-- On VAL reduce production constant -> TRUE
-- On UNDERSCORE reduce production constant -> TRUE
-- On UINT8 reduce production constant -> TRUE
-- On TYP_APP_GREATER reduce production constant -> TRUE
-- On TYPE reduce production constant -> TRUE
-- On TVAR reduce production constant -> TRUE
-- On TRUE reduce production constant -> TRUE
-- On TOTAL reduce production constant -> TRUE
-- On THEN reduce production constant -> TRUE
-- On SUB_EFFECT reduce production constant -> TRUE
-- On SUBTYPE reduce production constant -> TRUE
-- On SUBKIND reduce production constant -> TRUE
-- On STRING reduce production constant -> TRUE
-- On STAR reduce production constant -> TRUE
-- On SQUIGGLY_RARROW reduce production constant -> TRUE
-- On SEMICOLON_SEMICOLON reduce production constant -> TRUE
-- On SEMICOLON reduce production constant -> TRUE
-- On RPAREN reduce production constant -> TRUE
-- On RBRACK reduce production constant -> TRUE
-- On RBRACE reduce production constant -> TRUE
-- On RARROW reduce production constant -> TRUE
-- On PRIVATE reduce production constant -> TRUE
-- On PRAGMA_SET_OPTIONS reduce production constant -> TRUE
-- On PRAGMA_RESET_OPTIONS reduce production constant -> TRUE
-- On PLUS_OP reduce production constant -> TRUE
-- On PERCENT_LBRACK reduce production constant -> TRUE
-- On OPEN reduce production constant -> TRUE
-- On OPAQUE reduce production constant -> TRUE
-- On NEW_EFFECT reduce production constant -> TRUE
-- On NAME reduce production constant -> TRUE
-- On MODULE reduce production constant -> TRUE
-- On MINUS_OP reduce production constant -> TRUE
-- On LPAREN_RPAREN reduce production constant -> TRUE
-- On LPAREN reduce production constant -> TRUE
-- On LOGIC reduce production constant -> TRUE
-- On LET reduce production constant -> TRUE
-- On LENS_PAREN_RIGHT reduce production constant -> TRUE
-- On LENS_PAREN_LEFT reduce production constant -> TRUE
-- On LBRACK_BAR reduce production constant -> TRUE
-- On LBRACK reduce production constant -> TRUE
-- On LBRACE reduce production constant -> TRUE
-- On KIND reduce production constant -> TRUE
-- On INT64 reduce production constant -> TRUE
-- On INT32 reduce production constant -> TRUE
-- On INT reduce production constant -> TRUE
-- On IN reduce production constant -> TRUE
-- On IMPLIES reduce production constant -> TRUE
-- On IFF reduce production constant -> TRUE
-- On IEEE64 reduce production constant -> TRUE
-- On IDENT reduce production constant -> TRUE
-- On HASH reduce production constant -> TRUE
-- On FALSE reduce production constant -> TRUE
-- On EXCEPTION reduce production constant -> TRUE
-- On EQUALS reduce production constant -> TRUE
-- On EOF reduce production constant -> TRUE
-- On END reduce production constant -> TRUE
-- On ELSE reduce production constant -> TRUE
-- On EFFECT reduce production constant -> TRUE
-- On DIV_MOD_OP reduce production constant -> TRUE
-- On DISJUNCTION reduce production constant -> TRUE
-- On DEFAULT reduce production constant -> TRUE
-- On CUSTOM_OP reduce production constant -> TRUE
-- On CONJUNCTION reduce production constant -> TRUE
-- On COMMA reduce production constant -> TRUE
-- On COLON_EQUALS reduce production constant -> TRUE
-- On COLON_COLON reduce production constant -> TRUE
-- On COLON reduce production constant -> TRUE
-- On CHAR reduce production constant -> TRUE
-- On BYTEARRAY reduce production constant -> TRUE
-- On BEGIN reduce production constant -> TRUE
-- On BAR_RBRACK reduce production constant -> TRUE
-- On BAR_BAR reduce production constant -> TRUE
-- On BAR reduce production constant -> TRUE
-- On BANG_LBRACE reduce production constant -> TRUE
-- On BANG reduce production constant -> TRUE
-- On ASSUME reduce production constant -> TRUE
-- On ASSERT reduce production constant -> TRUE
-- On AND reduce production constant -> TRUE
-- On AMP_AMP reduce production constant -> TRUE
-- On AMP reduce production constant -> TRUE

State 13:
unaryTerm -> TILDE . atomicTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 355

State 14:
constant -> STRING . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> STRING
-- On WHEN reduce production constant -> STRING
-- On VAL reduce production constant -> STRING
-- On UNDERSCORE reduce production constant -> STRING
-- On UINT8 reduce production constant -> STRING
-- On TYP_APP_GREATER reduce production constant -> STRING
-- On TYPE reduce production constant -> STRING
-- On TVAR reduce production constant -> STRING
-- On TRUE reduce production constant -> STRING
-- On TOTAL reduce production constant -> STRING
-- On THEN reduce production constant -> STRING
-- On SUB_EFFECT reduce production constant -> STRING
-- On SUBTYPE reduce production constant -> STRING
-- On SUBKIND reduce production constant -> STRING
-- On STRING reduce production constant -> STRING
-- On STAR reduce production constant -> STRING
-- On SQUIGGLY_RARROW reduce production constant -> STRING
-- On SEMICOLON_SEMICOLON reduce production constant -> STRING
-- On SEMICOLON reduce production constant -> STRING
-- On RPAREN reduce production constant -> STRING
-- On RBRACK reduce production constant -> STRING
-- On RBRACE reduce production constant -> STRING
-- On RARROW reduce production constant -> STRING
-- On PRIVATE reduce production constant -> STRING
-- On PRAGMA_SET_OPTIONS reduce production constant -> STRING
-- On PRAGMA_RESET_OPTIONS reduce production constant -> STRING
-- On PLUS_OP reduce production constant -> STRING
-- On PERCENT_LBRACK reduce production constant -> STRING
-- On OPEN reduce production constant -> STRING
-- On OPAQUE reduce production constant -> STRING
-- On NEW_EFFECT reduce production constant -> STRING
-- On NAME reduce production constant -> STRING
-- On MODULE reduce production constant -> STRING
-- On MINUS_OP reduce production constant -> STRING
-- On LPAREN_RPAREN reduce production constant -> STRING
-- On LPAREN reduce production constant -> STRING
-- On LOGIC reduce production constant -> STRING
-- On LET reduce production constant -> STRING
-- On LENS_PAREN_RIGHT reduce production constant -> STRING
-- On LENS_PAREN_LEFT reduce production constant -> STRING
-- On LBRACK_BAR reduce production constant -> STRING
-- On LBRACK reduce production constant -> STRING
-- On LBRACE reduce production constant -> STRING
-- On KIND reduce production constant -> STRING
-- On INT64 reduce production constant -> STRING
-- On INT32 reduce production constant -> STRING
-- On INT reduce production constant -> STRING
-- On IN reduce production constant -> STRING
-- On IMPLIES reduce production constant -> STRING
-- On IFF reduce production constant -> STRING
-- On IEEE64 reduce production constant -> STRING
-- On IDENT reduce production constant -> STRING
-- On HASH reduce production constant -> STRING
-- On FALSE reduce production constant -> STRING
-- On EXCEPTION reduce production constant -> STRING
-- On EQUALS reduce production constant -> STRING
-- On EOF reduce production constant -> STRING
-- On END reduce production constant -> STRING
-- On ELSE reduce production constant -> STRING
-- On EFFECT reduce production constant -> STRING
-- On DIV_MOD_OP reduce production constant -> STRING
-- On DISJUNCTION reduce production constant -> STRING
-- On DEFAULT reduce production constant -> STRING
-- On CUSTOM_OP reduce production constant -> STRING
-- On CONJUNCTION reduce production constant -> STRING
-- On COMMA reduce production constant -> STRING
-- On COLON_EQUALS reduce production constant -> STRING
-- On COLON_COLON reduce production constant -> STRING
-- On COLON reduce production constant -> STRING
-- On CHAR reduce production constant -> STRING
-- On BYTEARRAY reduce production constant -> STRING
-- On BEGIN reduce production constant -> STRING
-- On BAR_RBRACK reduce production constant -> STRING
-- On BAR_BAR reduce production constant -> STRING
-- On BAR reduce production constant -> STRING
-- On BANG_LBRACE reduce production constant -> STRING
-- On BANG reduce production constant -> STRING
-- On ASSUME reduce production constant -> STRING
-- On ASSERT reduce production constant -> STRING
-- On AND reduce production constant -> STRING
-- On AMP_AMP reduce production constant -> STRING
-- On AMP reduce production constant -> STRING

State 15:
projectionLHS -> PERCENT_LBRACK . semiColonTermList RBRACK [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On semiColonTermList shift to state 353
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 306
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214
-- On RBRACK reduce production semiColonTermList ->

State 16:
noSeqTerm -> TRY . term WITH firstPatternBranch patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 349
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 17:
noSeqTerm -> REQUIRES . label_opt typ [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On DOLLAR shift to state 18
-- On label_opt shift to state 20
-- On UNDERSCORE reduce production label_opt ->
-- On UINT8 reduce production label_opt ->
-- On TVAR reduce production label_opt ->
-- On TRUE reduce production label_opt ->
-- On TILDE reduce production label_opt ->
-- On STRING reduce production label_opt ->
-- On PLUS_OP reduce production label_opt ->
-- On PERCENT_LBRACK reduce production label_opt ->
-- On NAME reduce production label_opt ->
-- On MINUS_OP reduce production label_opt ->
-- On LPAREN_RPAREN reduce production label_opt ->
-- On LPAREN reduce production label_opt ->
-- On LENS_PAREN_LEFT reduce production label_opt ->
-- On LBRACK_BAR reduce production label_opt ->
-- On LBRACK reduce production label_opt ->
-- On LBRACE reduce production label_opt ->
-- On INT64 reduce production label_opt ->
-- On INT32 reduce production label_opt ->
-- On INT reduce production label_opt ->
-- On IEEE64 reduce production label_opt ->
-- On IDENT reduce production label_opt ->
-- On HASH reduce production label_opt ->
-- On FUN reduce production label_opt ->
-- On FORALL reduce production label_opt ->
-- On FALSE reduce production label_opt ->
-- On EXISTS reduce production label_opt ->
-- On EQUALS reduce production label_opt ->
-- On CHAR reduce production label_opt ->
-- On BYTEARRAY reduce production label_opt ->
-- On BEGIN reduce production label_opt ->
-- On BANG_LBRACE reduce production label_opt ->
-- On BANG reduce production label_opt ->
-- On ASSERT reduce production label_opt ->

State 18:
label_opt -> DOLLAR . STRING [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FORALL FALSE EXISTS EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On STRING shift to state 19

State 19:
label_opt -> DOLLAR STRING . [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FORALL FALSE EXISTS EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production label_opt -> DOLLAR STRING
-- On UINT8 reduce production label_opt -> DOLLAR STRING
-- On TVAR reduce production label_opt -> DOLLAR STRING
-- On TRUE reduce production label_opt -> DOLLAR STRING
-- On TILDE reduce production label_opt -> DOLLAR STRING
-- On STRING reduce production label_opt -> DOLLAR STRING
-- On PLUS_OP reduce production label_opt -> DOLLAR STRING
-- On PERCENT_LBRACK reduce production label_opt -> DOLLAR STRING
-- On NAME reduce production label_opt -> DOLLAR STRING
-- On MINUS_OP reduce production label_opt -> DOLLAR STRING
-- On LPAREN_RPAREN reduce production label_opt -> DOLLAR STRING
-- On LPAREN reduce production label_opt -> DOLLAR STRING
-- On LENS_PAREN_LEFT reduce production label_opt -> DOLLAR STRING
-- On LBRACK_BAR reduce production label_opt -> DOLLAR STRING
-- On LBRACK reduce production label_opt -> DOLLAR STRING
-- On LBRACE reduce production label_opt -> DOLLAR STRING
-- On INT64 reduce production label_opt -> DOLLAR STRING
-- On INT32 reduce production label_opt -> DOLLAR STRING
-- On INT reduce production label_opt -> DOLLAR STRING
-- On IEEE64 reduce production label_opt -> DOLLAR STRING
-- On IDENT reduce production label_opt -> DOLLAR STRING
-- On HASH reduce production label_opt -> DOLLAR STRING
-- On FUN reduce production label_opt -> DOLLAR STRING
-- On FORALL reduce production label_opt -> DOLLAR STRING
-- On FALSE reduce production label_opt -> DOLLAR STRING
-- On EXISTS reduce production label_opt -> DOLLAR STRING
-- On EQUALS reduce production label_opt -> DOLLAR STRING
-- On CHAR reduce production label_opt -> DOLLAR STRING
-- On BYTEARRAY reduce production label_opt -> DOLLAR STRING
-- On BEGIN reduce production label_opt -> DOLLAR STRING
-- On BANG_LBRACE reduce production label_opt -> DOLLAR STRING
-- On BANG reduce production label_opt -> DOLLAR STRING
-- On ASSERT reduce production label_opt -> DOLLAR STRING

State 20:
noSeqTerm -> REQUIRES label_opt . typ [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 348
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 21:
unaryTerm -> PLUS_OP . atomicTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 347

State 22:
constant -> LPAREN_RPAREN . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> LPAREN_RPAREN
-- On WHEN reduce production constant -> LPAREN_RPAREN
-- On VAL reduce production constant -> LPAREN_RPAREN
-- On UNDERSCORE reduce production constant -> LPAREN_RPAREN
-- On UINT8 reduce production constant -> LPAREN_RPAREN
-- On TYP_APP_GREATER reduce production constant -> LPAREN_RPAREN
-- On TYPE reduce production constant -> LPAREN_RPAREN
-- On TVAR reduce production constant -> LPAREN_RPAREN
-- On TRUE reduce production constant -> LPAREN_RPAREN
-- On TOTAL reduce production constant -> LPAREN_RPAREN
-- On THEN reduce production constant -> LPAREN_RPAREN
-- On SUB_EFFECT reduce production constant -> LPAREN_RPAREN
-- On SUBTYPE reduce production constant -> LPAREN_RPAREN
-- On SUBKIND reduce production constant -> LPAREN_RPAREN
-- On STRING reduce production constant -> LPAREN_RPAREN
-- On STAR reduce production constant -> LPAREN_RPAREN
-- On SQUIGGLY_RARROW reduce production constant -> LPAREN_RPAREN
-- On SEMICOLON_SEMICOLON reduce production constant -> LPAREN_RPAREN
-- On SEMICOLON reduce production constant -> LPAREN_RPAREN
-- On RPAREN reduce production constant -> LPAREN_RPAREN
-- On RBRACK reduce production constant -> LPAREN_RPAREN
-- On RBRACE reduce production constant -> LPAREN_RPAREN
-- On RARROW reduce production constant -> LPAREN_RPAREN
-- On PRIVATE reduce production constant -> LPAREN_RPAREN
-- On PRAGMA_SET_OPTIONS reduce production constant -> LPAREN_RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production constant -> LPAREN_RPAREN
-- On PLUS_OP reduce production constant -> LPAREN_RPAREN
-- On PERCENT_LBRACK reduce production constant -> LPAREN_RPAREN
-- On OPEN reduce production constant -> LPAREN_RPAREN
-- On OPAQUE reduce production constant -> LPAREN_RPAREN
-- On NEW_EFFECT reduce production constant -> LPAREN_RPAREN
-- On NAME reduce production constant -> LPAREN_RPAREN
-- On MODULE reduce production constant -> LPAREN_RPAREN
-- On MINUS_OP reduce production constant -> LPAREN_RPAREN
-- On LPAREN_RPAREN reduce production constant -> LPAREN_RPAREN
-- On LPAREN reduce production constant -> LPAREN_RPAREN
-- On LOGIC reduce production constant -> LPAREN_RPAREN
-- On LET reduce production constant -> LPAREN_RPAREN
-- On LENS_PAREN_RIGHT reduce production constant -> LPAREN_RPAREN
-- On LENS_PAREN_LEFT reduce production constant -> LPAREN_RPAREN
-- On LBRACK_BAR reduce production constant -> LPAREN_RPAREN
-- On LBRACK reduce production constant -> LPAREN_RPAREN
-- On LBRACE reduce production constant -> LPAREN_RPAREN
-- On KIND reduce production constant -> LPAREN_RPAREN
-- On INT64 reduce production constant -> LPAREN_RPAREN
-- On INT32 reduce production constant -> LPAREN_RPAREN
-- On INT reduce production constant -> LPAREN_RPAREN
-- On IN reduce production constant -> LPAREN_RPAREN
-- On IMPLIES reduce production constant -> LPAREN_RPAREN
-- On IFF reduce production constant -> LPAREN_RPAREN
-- On IEEE64 reduce production constant -> LPAREN_RPAREN
-- On IDENT reduce production constant -> LPAREN_RPAREN
-- On HASH reduce production constant -> LPAREN_RPAREN
-- On FALSE reduce production constant -> LPAREN_RPAREN
-- On EXCEPTION reduce production constant -> LPAREN_RPAREN
-- On EQUALS reduce production constant -> LPAREN_RPAREN
-- On EOF reduce production constant -> LPAREN_RPAREN
-- On END reduce production constant -> LPAREN_RPAREN
-- On ELSE reduce production constant -> LPAREN_RPAREN
-- On EFFECT reduce production constant -> LPAREN_RPAREN
-- On DIV_MOD_OP reduce production constant -> LPAREN_RPAREN
-- On DISJUNCTION reduce production constant -> LPAREN_RPAREN
-- On DEFAULT reduce production constant -> LPAREN_RPAREN
-- On CUSTOM_OP reduce production constant -> LPAREN_RPAREN
-- On CONJUNCTION reduce production constant -> LPAREN_RPAREN
-- On COMMA reduce production constant -> LPAREN_RPAREN
-- On COLON_EQUALS reduce production constant -> LPAREN_RPAREN
-- On COLON_COLON reduce production constant -> LPAREN_RPAREN
-- On COLON reduce production constant -> LPAREN_RPAREN
-- On CHAR reduce production constant -> LPAREN_RPAREN
-- On BYTEARRAY reduce production constant -> LPAREN_RPAREN
-- On BEGIN reduce production constant -> LPAREN_RPAREN
-- On BAR_RBRACK reduce production constant -> LPAREN_RPAREN
-- On BAR_BAR reduce production constant -> LPAREN_RPAREN
-- On BAR reduce production constant -> LPAREN_RPAREN
-- On BANG_LBRACE reduce production constant -> LPAREN_RPAREN
-- On BANG reduce production constant -> LPAREN_RPAREN
-- On ASSUME reduce production constant -> LPAREN_RPAREN
-- On ASSERT reduce production constant -> LPAREN_RPAREN
-- On AND reduce production constant -> LPAREN_RPAREN
-- On AMP_AMP reduce production constant -> LPAREN_RPAREN
-- On AMP reduce production constant -> LPAREN_RPAREN

State 23:
projectionLHS -> LPAREN . term maybeWithSort RPAREN [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 340
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 24:
unaryTerm -> MINUS_OP . atomicTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 339

State 25:
atomicTerm -> LENS_PAREN_LEFT . tupleN LENS_PAREN_RIGHT [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 337
-- On tmOr shift to state 201
-- On tmEq shift to state 235
-- On tmCons shift to state 203
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 26:
projectionLHS -> LBRACK_BAR . semiColonTermList BAR_RBRACK [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On semiColonTermList shift to state 335
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 306
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214
-- On BAR_RBRACK reduce production semiColonTermList ->

State 27:
noSeqTerm -> MATCH . term WITH firstPatternBranch patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 331
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 28:
noSeqTerm -> LET . recopt letbinding letbindings IN term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On SQUIGGLY_RARROW shift to state 29
-- On recopt shift to state 30
-- On maybeFocus shift to state 329
-- On UNDERSCORE reduce production recopt ->
-- On UINT8 reduce production recopt ->
-- On TVAR reduce production recopt ->
-- On TRUE reduce production recopt ->
-- On STRING reduce production recopt ->
-- On REC reduce production maybeFocus ->
-- On NAME reduce production recopt ->
-- On LPAREN_RPAREN reduce production recopt ->
-- On LPAREN reduce production recopt ->
-- On LENS_PAREN_LEFT reduce production recopt ->
-- On LBRACK reduce production recopt ->
-- On LBRACE reduce production recopt ->
-- On INT64 reduce production recopt ->
-- On INT32 reduce production recopt ->
-- On INT reduce production recopt ->
-- On IEEE64 reduce production recopt ->
-- On IDENT reduce production recopt ->
-- On HASH reduce production recopt ->
-- On FALSE reduce production recopt ->
-- On CHAR reduce production recopt ->
-- On BYTEARRAY reduce production recopt ->

State 29:
maybeFocus -> SQUIGGLY_RARROW . [ UNDERSCORE UINT8 TVAR TRUE STRING REC NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY ]
-- On UNDERSCORE reduce production maybeFocus -> SQUIGGLY_RARROW
-- On UINT8 reduce production maybeFocus -> SQUIGGLY_RARROW
-- On TVAR reduce production maybeFocus -> SQUIGGLY_RARROW
-- On TRUE reduce production maybeFocus -> SQUIGGLY_RARROW
-- On STRING reduce production maybeFocus -> SQUIGGLY_RARROW
-- On REC reduce production maybeFocus -> SQUIGGLY_RARROW
-- On NAME reduce production maybeFocus -> SQUIGGLY_RARROW
-- On LPAREN_RPAREN reduce production maybeFocus -> SQUIGGLY_RARROW
-- On LPAREN reduce production maybeFocus -> SQUIGGLY_RARROW
-- On LENS_PAREN_LEFT reduce production maybeFocus -> SQUIGGLY_RARROW
-- On LBRACK reduce production maybeFocus -> SQUIGGLY_RARROW
-- On LBRACE reduce production maybeFocus -> SQUIGGLY_RARROW
-- On INT64 reduce production maybeFocus -> SQUIGGLY_RARROW
-- On INT32 reduce production maybeFocus -> SQUIGGLY_RARROW
-- On INT reduce production maybeFocus -> SQUIGGLY_RARROW
-- On IEEE64 reduce production maybeFocus -> SQUIGGLY_RARROW
-- On IDENT reduce production maybeFocus -> SQUIGGLY_RARROW
-- On HASH reduce production maybeFocus -> SQUIGGLY_RARROW
-- On FALSE reduce production maybeFocus -> SQUIGGLY_RARROW
-- On CHAR reduce production maybeFocus -> SQUIGGLY_RARROW
-- On BYTEARRAY reduce production maybeFocus -> SQUIGGLY_RARROW

State 30:
noSeqTerm -> LET recopt . letbinding letbindings IN term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 315
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On letbinding shift to state 321
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 31:
nonTvarPattern2 -> UNDERSCORE . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> UNDERSCORE
-- On UNDERSCORE reduce production nonTvarPattern2 -> UNDERSCORE
-- On UINT8 reduce production nonTvarPattern2 -> UNDERSCORE
-- On TVAR reduce production nonTvarPattern2 -> UNDERSCORE
-- On TRUE reduce production nonTvarPattern2 -> UNDERSCORE
-- On STRING reduce production nonTvarPattern2 -> UNDERSCORE
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> UNDERSCORE
-- On SEMICOLON reduce production nonTvarPattern2 -> UNDERSCORE
-- On RPAREN reduce production nonTvarPattern2 -> UNDERSCORE
-- On RBRACK reduce production nonTvarPattern2 -> UNDERSCORE
-- On RBRACE reduce production nonTvarPattern2 -> UNDERSCORE
-- On RARROW reduce production nonTvarPattern2 -> UNDERSCORE
-- On NAME reduce production nonTvarPattern2 -> UNDERSCORE
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> UNDERSCORE
-- On LPAREN reduce production nonTvarPattern2 -> UNDERSCORE
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> UNDERSCORE
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> UNDERSCORE
-- On LBRACK reduce production nonTvarPattern2 -> UNDERSCORE
-- On LBRACE reduce production nonTvarPattern2 -> UNDERSCORE
-- On INT64 reduce production nonTvarPattern2 -> UNDERSCORE
-- On INT32 reduce production nonTvarPattern2 -> UNDERSCORE
-- On INT reduce production nonTvarPattern2 -> UNDERSCORE
-- On IEEE64 reduce production nonTvarPattern2 -> UNDERSCORE
-- On IDENT reduce production nonTvarPattern2 -> UNDERSCORE
-- On HASH reduce production nonTvarPattern2 -> UNDERSCORE
-- On FALSE reduce production nonTvarPattern2 -> UNDERSCORE
-- On EQUALS reduce production nonTvarPattern2 -> UNDERSCORE
-- On COMMA reduce production nonTvarPattern2 -> UNDERSCORE
-- On COLON_COLON reduce production nonTvarPattern2 -> UNDERSCORE
-- On COLON reduce production nonTvarPattern2 -> UNDERSCORE
-- On CHAR reduce production nonTvarPattern2 -> UNDERSCORE
-- On BYTEARRAY reduce production nonTvarPattern2 -> UNDERSCORE
-- On BAR reduce production nonTvarPattern2 -> UNDERSCORE

State 32:
nonTvarPattern2 -> LPAREN . ascriptionOrPattern RPAREN [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 99
-- On nonTvarPattern2 shift to state 100
-- On nonTvarPattern shift to state 101
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On ascriptionOrPattern shift to state 313
-- On appPattern shift to state 79

State 33:
nonTvarPattern2 -> LENS_PAREN_LEFT . listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 94
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 34:
nonTvarPattern2 -> LBRACK . patternListSemiColon RBRACK [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On patternListSemiColon shift to state 87
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 89
-- On RBRACK reduce production patternListSemiColon ->

State 35:
nonTvarPattern2 -> LBRACE . recordPattern RBRACE [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On recordPattern shift to state 37
-- On name shift to state 39
-- On lid shift to state 43
-- On idpath shift to state 85
-- On ident shift to state 42

State 36:
ident -> IDENT . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production ident -> IDENT
-- On WHEN reduce production ident -> IDENT
-- On VAL reduce production ident -> IDENT
-- On UNDERSCORE reduce production ident -> IDENT
-- On UINT8 reduce production ident -> IDENT
-- On TYP_APP_LESS reduce production ident -> IDENT
-- On TYP_APP_GREATER reduce production ident -> IDENT
-- On TYPE reduce production ident -> IDENT
-- On TVAR reduce production ident -> IDENT
-- On TRUE reduce production ident -> IDENT
-- On TOTAL reduce production ident -> IDENT
-- On THEN reduce production ident -> IDENT
-- On SUB_EFFECT reduce production ident -> IDENT
-- On SUBTYPE reduce production ident -> IDENT
-- On SUBKIND reduce production ident -> IDENT
-- On STRING reduce production ident -> IDENT
-- On STAR reduce production ident -> IDENT
-- On SQUIGGLY_RARROW reduce production ident -> IDENT
-- On SEMICOLON_SEMICOLON reduce production ident -> IDENT
-- On SEMICOLON reduce production ident -> IDENT
-- On RPAREN reduce production ident -> IDENT
-- On RBRACK reduce production ident -> IDENT
-- On RBRACE reduce production ident -> IDENT
-- On RARROW reduce production ident -> IDENT
-- On PRIVATE reduce production ident -> IDENT
-- On PRAGMA_SET_OPTIONS reduce production ident -> IDENT
-- On PRAGMA_RESET_OPTIONS reduce production ident -> IDENT
-- On PLUS_OP reduce production ident -> IDENT
-- On PERCENT_LBRACK reduce production ident -> IDENT
-- On OPEN reduce production ident -> IDENT
-- On OPAQUE reduce production ident -> IDENT
-- On NEW_EFFECT reduce production ident -> IDENT
-- On NAME reduce production ident -> IDENT
-- On MODULE reduce production ident -> IDENT
-- On MINUS_OP reduce production ident -> IDENT
-- On LPAREN_RPAREN reduce production ident -> IDENT
-- On LPAREN reduce production ident -> IDENT
-- On LOGIC reduce production ident -> IDENT
-- On LET reduce production ident -> IDENT
-- On LENS_PAREN_RIGHT reduce production ident -> IDENT
-- On LENS_PAREN_LEFT reduce production ident -> IDENT
-- On LBRACK_BAR reduce production ident -> IDENT
-- On LBRACK reduce production ident -> IDENT
-- On LBRACE reduce production ident -> IDENT
-- On KIND reduce production ident -> IDENT
-- On INT64 reduce production ident -> IDENT
-- On INT32 reduce production ident -> IDENT
-- On INT reduce production ident -> IDENT
-- On IN reduce production ident -> IDENT
-- On IMPLIES reduce production ident -> IDENT
-- On IFF reduce production ident -> IDENT
-- On IEEE64 reduce production ident -> IDENT
-- On IDENT reduce production ident -> IDENT
-- On HASH reduce production ident -> IDENT
-- On FALSE reduce production ident -> IDENT
-- On EXCEPTION reduce production ident -> IDENT
-- On EQUALS reduce production ident -> IDENT
-- On EOF reduce production ident -> IDENT
-- On END reduce production ident -> IDENT
-- On ELSE reduce production ident -> IDENT
-- On EFFECT reduce production ident -> IDENT
-- On DOT reduce production ident -> IDENT
-- On DIV_MOD_OP reduce production ident -> IDENT
-- On DISJUNCTION reduce production ident -> IDENT
-- On DEFAULT reduce production ident -> IDENT
-- On CUSTOM_OP reduce production ident -> IDENT
-- On CONJUNCTION reduce production ident -> IDENT
-- On COMMA reduce production ident -> IDENT
-- On COLON_EQUALS reduce production ident -> IDENT
-- On COLON_COLON reduce production ident -> IDENT
-- On COLON reduce production ident -> IDENT
-- On CHAR reduce production ident -> IDENT
-- On BYTEARRAY reduce production ident -> IDENT
-- On BEGIN reduce production ident -> IDENT
-- On BAR_RBRACK reduce production ident -> IDENT
-- On BAR_BAR reduce production ident -> IDENT
-- On BAR reduce production ident -> IDENT
-- On BANG_LBRACE reduce production ident -> IDENT
-- On BANG reduce production ident -> IDENT
-- On ASSUME reduce production ident -> IDENT
-- On ASSERT reduce production ident -> IDENT
-- On AND reduce production ident -> IDENT
-- On AMP_AMP reduce production ident -> IDENT
-- On AMP reduce production ident -> IDENT

State 37:
nonTvarPattern2 -> LBRACE recordPattern . RBRACE [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On RBRACE shift to state 38

State 38:
nonTvarPattern2 -> LBRACE recordPattern RBRACE . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On UNDERSCORE reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On UINT8 reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On TVAR reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On TRUE reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On STRING reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On SEMICOLON reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On RPAREN reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On RBRACK reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On RBRACE reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On RARROW reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On NAME reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On LPAREN reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On LBRACK reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On LBRACE reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On INT64 reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On INT32 reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On INT reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On IEEE64 reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On IDENT reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On HASH reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On FALSE reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On EQUALS reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On COMMA reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On COLON_COLON reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On COLON reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On CHAR reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On BYTEARRAY reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE
-- On BAR reduce production nonTvarPattern2 -> LBRACE recordPattern RBRACE

State 39:
idpath -> name . DOT idpath [ EQUALS ]
-- On DOT shift to state 40

State 40:
idpath -> name DOT . idpath [ EQUALS ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On name shift to state 39
-- On idpath shift to state 41
-- On ident shift to state 42

State 41:
idpath -> name DOT idpath . [ EQUALS ]
-- On EQUALS reduce production idpath -> name DOT idpath

State 42:
idpath -> ident . [ EQUALS ]
-- On EQUALS reduce production idpath -> ident

State 43:
recordPattern -> lid . EQUALS pattern moreFieldPatterns [ RBRACE ]
-- On EQUALS shift to state 44

State 44:
recordPattern -> lid EQUALS . pattern moreFieldPatterns [ RBRACE ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 57
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 45:
constant -> INT64 . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> INT64
-- On WHEN reduce production constant -> INT64
-- On VAL reduce production constant -> INT64
-- On UNDERSCORE reduce production constant -> INT64
-- On UINT8 reduce production constant -> INT64
-- On TYP_APP_GREATER reduce production constant -> INT64
-- On TYPE reduce production constant -> INT64
-- On TVAR reduce production constant -> INT64
-- On TRUE reduce production constant -> INT64
-- On TOTAL reduce production constant -> INT64
-- On THEN reduce production constant -> INT64
-- On SUB_EFFECT reduce production constant -> INT64
-- On SUBTYPE reduce production constant -> INT64
-- On SUBKIND reduce production constant -> INT64
-- On STRING reduce production constant -> INT64
-- On STAR reduce production constant -> INT64
-- On SQUIGGLY_RARROW reduce production constant -> INT64
-- On SEMICOLON_SEMICOLON reduce production constant -> INT64
-- On SEMICOLON reduce production constant -> INT64
-- On RPAREN reduce production constant -> INT64
-- On RBRACK reduce production constant -> INT64
-- On RBRACE reduce production constant -> INT64
-- On RARROW reduce production constant -> INT64
-- On PRIVATE reduce production constant -> INT64
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT64
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT64
-- On PLUS_OP reduce production constant -> INT64
-- On PERCENT_LBRACK reduce production constant -> INT64
-- On OPEN reduce production constant -> INT64
-- On OPAQUE reduce production constant -> INT64
-- On NEW_EFFECT reduce production constant -> INT64
-- On NAME reduce production constant -> INT64
-- On MODULE reduce production constant -> INT64
-- On MINUS_OP reduce production constant -> INT64
-- On LPAREN_RPAREN reduce production constant -> INT64
-- On LPAREN reduce production constant -> INT64
-- On LOGIC reduce production constant -> INT64
-- On LET reduce production constant -> INT64
-- On LENS_PAREN_RIGHT reduce production constant -> INT64
-- On LENS_PAREN_LEFT reduce production constant -> INT64
-- On LBRACK_BAR reduce production constant -> INT64
-- On LBRACK reduce production constant -> INT64
-- On LBRACE reduce production constant -> INT64
-- On KIND reduce production constant -> INT64
-- On INT64 reduce production constant -> INT64
-- On INT32 reduce production constant -> INT64
-- On INT reduce production constant -> INT64
-- On IN reduce production constant -> INT64
-- On IMPLIES reduce production constant -> INT64
-- On IFF reduce production constant -> INT64
-- On IEEE64 reduce production constant -> INT64
-- On IDENT reduce production constant -> INT64
-- On HASH reduce production constant -> INT64
-- On FALSE reduce production constant -> INT64
-- On EXCEPTION reduce production constant -> INT64
-- On EQUALS reduce production constant -> INT64
-- On EOF reduce production constant -> INT64
-- On END reduce production constant -> INT64
-- On ELSE reduce production constant -> INT64
-- On EFFECT reduce production constant -> INT64
-- On DIV_MOD_OP reduce production constant -> INT64
-- On DISJUNCTION reduce production constant -> INT64
-- On DEFAULT reduce production constant -> INT64
-- On CUSTOM_OP reduce production constant -> INT64
-- On CONJUNCTION reduce production constant -> INT64
-- On COMMA reduce production constant -> INT64
-- On COLON_EQUALS reduce production constant -> INT64
-- On COLON_COLON reduce production constant -> INT64
-- On COLON reduce production constant -> INT64
-- On CHAR reduce production constant -> INT64
-- On BYTEARRAY reduce production constant -> INT64
-- On BEGIN reduce production constant -> INT64
-- On BAR_RBRACK reduce production constant -> INT64
-- On BAR_BAR reduce production constant -> INT64
-- On BAR reduce production constant -> INT64
-- On BANG_LBRACE reduce production constant -> INT64
-- On BANG reduce production constant -> INT64
-- On ASSUME reduce production constant -> INT64
-- On ASSERT reduce production constant -> INT64
-- On AND reduce production constant -> INT64
-- On AMP_AMP reduce production constant -> INT64
-- On AMP reduce production constant -> INT64

State 46:
constant -> INT32 . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> INT32
-- On WHEN reduce production constant -> INT32
-- On VAL reduce production constant -> INT32
-- On UNDERSCORE reduce production constant -> INT32
-- On UINT8 reduce production constant -> INT32
-- On TYP_APP_GREATER reduce production constant -> INT32
-- On TYPE reduce production constant -> INT32
-- On TVAR reduce production constant -> INT32
-- On TRUE reduce production constant -> INT32
-- On TOTAL reduce production constant -> INT32
-- On THEN reduce production constant -> INT32
-- On SUB_EFFECT reduce production constant -> INT32
-- On SUBTYPE reduce production constant -> INT32
-- On SUBKIND reduce production constant -> INT32
-- On STRING reduce production constant -> INT32
-- On STAR reduce production constant -> INT32
-- On SQUIGGLY_RARROW reduce production constant -> INT32
-- On SEMICOLON_SEMICOLON reduce production constant -> INT32
-- On SEMICOLON reduce production constant -> INT32
-- On RPAREN reduce production constant -> INT32
-- On RBRACK reduce production constant -> INT32
-- On RBRACE reduce production constant -> INT32
-- On RARROW reduce production constant -> INT32
-- On PRIVATE reduce production constant -> INT32
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT32
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT32
-- On PLUS_OP reduce production constant -> INT32
-- On PERCENT_LBRACK reduce production constant -> INT32
-- On OPEN reduce production constant -> INT32
-- On OPAQUE reduce production constant -> INT32
-- On NEW_EFFECT reduce production constant -> INT32
-- On NAME reduce production constant -> INT32
-- On MODULE reduce production constant -> INT32
-- On MINUS_OP reduce production constant -> INT32
-- On LPAREN_RPAREN reduce production constant -> INT32
-- On LPAREN reduce production constant -> INT32
-- On LOGIC reduce production constant -> INT32
-- On LET reduce production constant -> INT32
-- On LENS_PAREN_RIGHT reduce production constant -> INT32
-- On LENS_PAREN_LEFT reduce production constant -> INT32
-- On LBRACK_BAR reduce production constant -> INT32
-- On LBRACK reduce production constant -> INT32
-- On LBRACE reduce production constant -> INT32
-- On KIND reduce production constant -> INT32
-- On INT64 reduce production constant -> INT32
-- On INT32 reduce production constant -> INT32
-- On INT reduce production constant -> INT32
-- On IN reduce production constant -> INT32
-- On IMPLIES reduce production constant -> INT32
-- On IFF reduce production constant -> INT32
-- On IEEE64 reduce production constant -> INT32
-- On IDENT reduce production constant -> INT32
-- On HASH reduce production constant -> INT32
-- On FALSE reduce production constant -> INT32
-- On EXCEPTION reduce production constant -> INT32
-- On EQUALS reduce production constant -> INT32
-- On EOF reduce production constant -> INT32
-- On END reduce production constant -> INT32
-- On ELSE reduce production constant -> INT32
-- On EFFECT reduce production constant -> INT32
-- On DIV_MOD_OP reduce production constant -> INT32
-- On DISJUNCTION reduce production constant -> INT32
-- On DEFAULT reduce production constant -> INT32
-- On CUSTOM_OP reduce production constant -> INT32
-- On CONJUNCTION reduce production constant -> INT32
-- On COMMA reduce production constant -> INT32
-- On COLON_EQUALS reduce production constant -> INT32
-- On COLON_COLON reduce production constant -> INT32
-- On COLON reduce production constant -> INT32
-- On CHAR reduce production constant -> INT32
-- On BYTEARRAY reduce production constant -> INT32
-- On BEGIN reduce production constant -> INT32
-- On BAR_RBRACK reduce production constant -> INT32
-- On BAR_BAR reduce production constant -> INT32
-- On BAR reduce production constant -> INT32
-- On BANG_LBRACE reduce production constant -> INT32
-- On BANG reduce production constant -> INT32
-- On ASSUME reduce production constant -> INT32
-- On ASSERT reduce production constant -> INT32
-- On AND reduce production constant -> INT32
-- On AMP_AMP reduce production constant -> INT32
-- On AMP reduce production constant -> INT32

State 47:
constant -> INT . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> INT
-- On WHEN reduce production constant -> INT
-- On VAL reduce production constant -> INT
-- On UNDERSCORE reduce production constant -> INT
-- On UINT8 reduce production constant -> INT
-- On TYP_APP_GREATER reduce production constant -> INT
-- On TYPE reduce production constant -> INT
-- On TVAR reduce production constant -> INT
-- On TRUE reduce production constant -> INT
-- On TOTAL reduce production constant -> INT
-- On THEN reduce production constant -> INT
-- On SUB_EFFECT reduce production constant -> INT
-- On SUBTYPE reduce production constant -> INT
-- On SUBKIND reduce production constant -> INT
-- On STRING reduce production constant -> INT
-- On STAR reduce production constant -> INT
-- On SQUIGGLY_RARROW reduce production constant -> INT
-- On SEMICOLON_SEMICOLON reduce production constant -> INT
-- On SEMICOLON reduce production constant -> INT
-- On RPAREN reduce production constant -> INT
-- On RBRACK reduce production constant -> INT
-- On RBRACE reduce production constant -> INT
-- On RARROW reduce production constant -> INT
-- On PRIVATE reduce production constant -> INT
-- On PRAGMA_SET_OPTIONS reduce production constant -> INT
-- On PRAGMA_RESET_OPTIONS reduce production constant -> INT
-- On PLUS_OP reduce production constant -> INT
-- On PERCENT_LBRACK reduce production constant -> INT
-- On OPEN reduce production constant -> INT
-- On OPAQUE reduce production constant -> INT
-- On NEW_EFFECT reduce production constant -> INT
-- On NAME reduce production constant -> INT
-- On MODULE reduce production constant -> INT
-- On MINUS_OP reduce production constant -> INT
-- On LPAREN_RPAREN reduce production constant -> INT
-- On LPAREN reduce production constant -> INT
-- On LOGIC reduce production constant -> INT
-- On LET reduce production constant -> INT
-- On LENS_PAREN_RIGHT reduce production constant -> INT
-- On LENS_PAREN_LEFT reduce production constant -> INT
-- On LBRACK_BAR reduce production constant -> INT
-- On LBRACK reduce production constant -> INT
-- On LBRACE reduce production constant -> INT
-- On KIND reduce production constant -> INT
-- On INT64 reduce production constant -> INT
-- On INT32 reduce production constant -> INT
-- On INT reduce production constant -> INT
-- On IN reduce production constant -> INT
-- On IMPLIES reduce production constant -> INT
-- On IFF reduce production constant -> INT
-- On IEEE64 reduce production constant -> INT
-- On IDENT reduce production constant -> INT
-- On HASH reduce production constant -> INT
-- On FALSE reduce production constant -> INT
-- On EXCEPTION reduce production constant -> INT
-- On EQUALS reduce production constant -> INT
-- On EOF reduce production constant -> INT
-- On END reduce production constant -> INT
-- On ELSE reduce production constant -> INT
-- On EFFECT reduce production constant -> INT
-- On DIV_MOD_OP reduce production constant -> INT
-- On DISJUNCTION reduce production constant -> INT
-- On DEFAULT reduce production constant -> INT
-- On CUSTOM_OP reduce production constant -> INT
-- On CONJUNCTION reduce production constant -> INT
-- On COMMA reduce production constant -> INT
-- On COLON_EQUALS reduce production constant -> INT
-- On COLON_COLON reduce production constant -> INT
-- On COLON reduce production constant -> INT
-- On CHAR reduce production constant -> INT
-- On BYTEARRAY reduce production constant -> INT
-- On BEGIN reduce production constant -> INT
-- On BAR_RBRACK reduce production constant -> INT
-- On BAR_BAR reduce production constant -> INT
-- On BAR reduce production constant -> INT
-- On BANG_LBRACE reduce production constant -> INT
-- On BANG reduce production constant -> INT
-- On ASSUME reduce production constant -> INT
-- On ASSERT reduce production constant -> INT
-- On AND reduce production constant -> INT
-- On AMP_AMP reduce production constant -> INT
-- On AMP reduce production constant -> INT

State 48:
constant -> IEEE64 . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> IEEE64
-- On WHEN reduce production constant -> IEEE64
-- On VAL reduce production constant -> IEEE64
-- On UNDERSCORE reduce production constant -> IEEE64
-- On UINT8 reduce production constant -> IEEE64
-- On TYP_APP_GREATER reduce production constant -> IEEE64
-- On TYPE reduce production constant -> IEEE64
-- On TVAR reduce production constant -> IEEE64
-- On TRUE reduce production constant -> IEEE64
-- On TOTAL reduce production constant -> IEEE64
-- On THEN reduce production constant -> IEEE64
-- On SUB_EFFECT reduce production constant -> IEEE64
-- On SUBTYPE reduce production constant -> IEEE64
-- On SUBKIND reduce production constant -> IEEE64
-- On STRING reduce production constant -> IEEE64
-- On STAR reduce production constant -> IEEE64
-- On SQUIGGLY_RARROW reduce production constant -> IEEE64
-- On SEMICOLON_SEMICOLON reduce production constant -> IEEE64
-- On SEMICOLON reduce production constant -> IEEE64
-- On RPAREN reduce production constant -> IEEE64
-- On RBRACK reduce production constant -> IEEE64
-- On RBRACE reduce production constant -> IEEE64
-- On RARROW reduce production constant -> IEEE64
-- On PRIVATE reduce production constant -> IEEE64
-- On PRAGMA_SET_OPTIONS reduce production constant -> IEEE64
-- On PRAGMA_RESET_OPTIONS reduce production constant -> IEEE64
-- On PLUS_OP reduce production constant -> IEEE64
-- On PERCENT_LBRACK reduce production constant -> IEEE64
-- On OPEN reduce production constant -> IEEE64
-- On OPAQUE reduce production constant -> IEEE64
-- On NEW_EFFECT reduce production constant -> IEEE64
-- On NAME reduce production constant -> IEEE64
-- On MODULE reduce production constant -> IEEE64
-- On MINUS_OP reduce production constant -> IEEE64
-- On LPAREN_RPAREN reduce production constant -> IEEE64
-- On LPAREN reduce production constant -> IEEE64
-- On LOGIC reduce production constant -> IEEE64
-- On LET reduce production constant -> IEEE64
-- On LENS_PAREN_RIGHT reduce production constant -> IEEE64
-- On LENS_PAREN_LEFT reduce production constant -> IEEE64
-- On LBRACK_BAR reduce production constant -> IEEE64
-- On LBRACK reduce production constant -> IEEE64
-- On LBRACE reduce production constant -> IEEE64
-- On KIND reduce production constant -> IEEE64
-- On INT64 reduce production constant -> IEEE64
-- On INT32 reduce production constant -> IEEE64
-- On INT reduce production constant -> IEEE64
-- On IN reduce production constant -> IEEE64
-- On IMPLIES reduce production constant -> IEEE64
-- On IFF reduce production constant -> IEEE64
-- On IEEE64 reduce production constant -> IEEE64
-- On IDENT reduce production constant -> IEEE64
-- On HASH reduce production constant -> IEEE64
-- On FALSE reduce production constant -> IEEE64
-- On EXCEPTION reduce production constant -> IEEE64
-- On EQUALS reduce production constant -> IEEE64
-- On EOF reduce production constant -> IEEE64
-- On END reduce production constant -> IEEE64
-- On ELSE reduce production constant -> IEEE64
-- On EFFECT reduce production constant -> IEEE64
-- On DIV_MOD_OP reduce production constant -> IEEE64
-- On DISJUNCTION reduce production constant -> IEEE64
-- On DEFAULT reduce production constant -> IEEE64
-- On CUSTOM_OP reduce production constant -> IEEE64
-- On CONJUNCTION reduce production constant -> IEEE64
-- On COMMA reduce production constant -> IEEE64
-- On COLON_EQUALS reduce production constant -> IEEE64
-- On COLON_COLON reduce production constant -> IEEE64
-- On COLON reduce production constant -> IEEE64
-- On CHAR reduce production constant -> IEEE64
-- On BYTEARRAY reduce production constant -> IEEE64
-- On BEGIN reduce production constant -> IEEE64
-- On BAR_RBRACK reduce production constant -> IEEE64
-- On BAR_BAR reduce production constant -> IEEE64
-- On BAR reduce production constant -> IEEE64
-- On BANG_LBRACE reduce production constant -> IEEE64
-- On BANG reduce production constant -> IEEE64
-- On ASSUME reduce production constant -> IEEE64
-- On ASSERT reduce production constant -> IEEE64
-- On AND reduce production constant -> IEEE64
-- On AMP_AMP reduce production constant -> IEEE64
-- On AMP reduce production constant -> IEEE64

State 49:
nonTvarPattern2 -> HASH . ident [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On IDENT shift to state 36
-- On ident shift to state 50

State 50:
nonTvarPattern2 -> HASH ident . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> HASH ident
-- On UNDERSCORE reduce production nonTvarPattern2 -> HASH ident
-- On UINT8 reduce production nonTvarPattern2 -> HASH ident
-- On TVAR reduce production nonTvarPattern2 -> HASH ident
-- On TRUE reduce production nonTvarPattern2 -> HASH ident
-- On STRING reduce production nonTvarPattern2 -> HASH ident
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> HASH ident
-- On SEMICOLON reduce production nonTvarPattern2 -> HASH ident
-- On RPAREN reduce production nonTvarPattern2 -> HASH ident
-- On RBRACK reduce production nonTvarPattern2 -> HASH ident
-- On RBRACE reduce production nonTvarPattern2 -> HASH ident
-- On RARROW reduce production nonTvarPattern2 -> HASH ident
-- On NAME reduce production nonTvarPattern2 -> HASH ident
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> HASH ident
-- On LPAREN reduce production nonTvarPattern2 -> HASH ident
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> HASH ident
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> HASH ident
-- On LBRACK reduce production nonTvarPattern2 -> HASH ident
-- On LBRACE reduce production nonTvarPattern2 -> HASH ident
-- On INT64 reduce production nonTvarPattern2 -> HASH ident
-- On INT32 reduce production nonTvarPattern2 -> HASH ident
-- On INT reduce production nonTvarPattern2 -> HASH ident
-- On IEEE64 reduce production nonTvarPattern2 -> HASH ident
-- On IDENT reduce production nonTvarPattern2 -> HASH ident
-- On HASH reduce production nonTvarPattern2 -> HASH ident
-- On FALSE reduce production nonTvarPattern2 -> HASH ident
-- On EQUALS reduce production nonTvarPattern2 -> HASH ident
-- On COMMA reduce production nonTvarPattern2 -> HASH ident
-- On COLON_COLON reduce production nonTvarPattern2 -> HASH ident
-- On COLON reduce production nonTvarPattern2 -> HASH ident
-- On CHAR reduce production nonTvarPattern2 -> HASH ident
-- On BYTEARRAY reduce production nonTvarPattern2 -> HASH ident
-- On BAR reduce production nonTvarPattern2 -> HASH ident

State 51:
constant -> FALSE . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> FALSE
-- On WHEN reduce production constant -> FALSE
-- On VAL reduce production constant -> FALSE
-- On UNDERSCORE reduce production constant -> FALSE
-- On UINT8 reduce production constant -> FALSE
-- On TYP_APP_GREATER reduce production constant -> FALSE
-- On TYPE reduce production constant -> FALSE
-- On TVAR reduce production constant -> FALSE
-- On TRUE reduce production constant -> FALSE
-- On TOTAL reduce production constant -> FALSE
-- On THEN reduce production constant -> FALSE
-- On SUB_EFFECT reduce production constant -> FALSE
-- On SUBTYPE reduce production constant -> FALSE
-- On SUBKIND reduce production constant -> FALSE
-- On STRING reduce production constant -> FALSE
-- On STAR reduce production constant -> FALSE
-- On SQUIGGLY_RARROW reduce production constant -> FALSE
-- On SEMICOLON_SEMICOLON reduce production constant -> FALSE
-- On SEMICOLON reduce production constant -> FALSE
-- On RPAREN reduce production constant -> FALSE
-- On RBRACK reduce production constant -> FALSE
-- On RBRACE reduce production constant -> FALSE
-- On RARROW reduce production constant -> FALSE
-- On PRIVATE reduce production constant -> FALSE
-- On PRAGMA_SET_OPTIONS reduce production constant -> FALSE
-- On PRAGMA_RESET_OPTIONS reduce production constant -> FALSE
-- On PLUS_OP reduce production constant -> FALSE
-- On PERCENT_LBRACK reduce production constant -> FALSE
-- On OPEN reduce production constant -> FALSE
-- On OPAQUE reduce production constant -> FALSE
-- On NEW_EFFECT reduce production constant -> FALSE
-- On NAME reduce production constant -> FALSE
-- On MODULE reduce production constant -> FALSE
-- On MINUS_OP reduce production constant -> FALSE
-- On LPAREN_RPAREN reduce production constant -> FALSE
-- On LPAREN reduce production constant -> FALSE
-- On LOGIC reduce production constant -> FALSE
-- On LET reduce production constant -> FALSE
-- On LENS_PAREN_RIGHT reduce production constant -> FALSE
-- On LENS_PAREN_LEFT reduce production constant -> FALSE
-- On LBRACK_BAR reduce production constant -> FALSE
-- On LBRACK reduce production constant -> FALSE
-- On LBRACE reduce production constant -> FALSE
-- On KIND reduce production constant -> FALSE
-- On INT64 reduce production constant -> FALSE
-- On INT32 reduce production constant -> FALSE
-- On INT reduce production constant -> FALSE
-- On IN reduce production constant -> FALSE
-- On IMPLIES reduce production constant -> FALSE
-- On IFF reduce production constant -> FALSE
-- On IEEE64 reduce production constant -> FALSE
-- On IDENT reduce production constant -> FALSE
-- On HASH reduce production constant -> FALSE
-- On FALSE reduce production constant -> FALSE
-- On EXCEPTION reduce production constant -> FALSE
-- On EQUALS reduce production constant -> FALSE
-- On EOF reduce production constant -> FALSE
-- On END reduce production constant -> FALSE
-- On ELSE reduce production constant -> FALSE
-- On EFFECT reduce production constant -> FALSE
-- On DIV_MOD_OP reduce production constant -> FALSE
-- On DISJUNCTION reduce production constant -> FALSE
-- On DEFAULT reduce production constant -> FALSE
-- On CUSTOM_OP reduce production constant -> FALSE
-- On CONJUNCTION reduce production constant -> FALSE
-- On COMMA reduce production constant -> FALSE
-- On COLON_EQUALS reduce production constant -> FALSE
-- On COLON_COLON reduce production constant -> FALSE
-- On COLON reduce production constant -> FALSE
-- On CHAR reduce production constant -> FALSE
-- On BYTEARRAY reduce production constant -> FALSE
-- On BEGIN reduce production constant -> FALSE
-- On BAR_RBRACK reduce production constant -> FALSE
-- On BAR_BAR reduce production constant -> FALSE
-- On BAR reduce production constant -> FALSE
-- On BANG_LBRACE reduce production constant -> FALSE
-- On BANG reduce production constant -> FALSE
-- On ASSUME reduce production constant -> FALSE
-- On ASSERT reduce production constant -> FALSE
-- On AND reduce production constant -> FALSE
-- On AMP_AMP reduce production constant -> FALSE
-- On AMP reduce production constant -> FALSE

State 52:
constant -> CHAR . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> CHAR
-- On WHEN reduce production constant -> CHAR
-- On VAL reduce production constant -> CHAR
-- On UNDERSCORE reduce production constant -> CHAR
-- On UINT8 reduce production constant -> CHAR
-- On TYP_APP_GREATER reduce production constant -> CHAR
-- On TYPE reduce production constant -> CHAR
-- On TVAR reduce production constant -> CHAR
-- On TRUE reduce production constant -> CHAR
-- On TOTAL reduce production constant -> CHAR
-- On THEN reduce production constant -> CHAR
-- On SUB_EFFECT reduce production constant -> CHAR
-- On SUBTYPE reduce production constant -> CHAR
-- On SUBKIND reduce production constant -> CHAR
-- On STRING reduce production constant -> CHAR
-- On STAR reduce production constant -> CHAR
-- On SQUIGGLY_RARROW reduce production constant -> CHAR
-- On SEMICOLON_SEMICOLON reduce production constant -> CHAR
-- On SEMICOLON reduce production constant -> CHAR
-- On RPAREN reduce production constant -> CHAR
-- On RBRACK reduce production constant -> CHAR
-- On RBRACE reduce production constant -> CHAR
-- On RARROW reduce production constant -> CHAR
-- On PRIVATE reduce production constant -> CHAR
-- On PRAGMA_SET_OPTIONS reduce production constant -> CHAR
-- On PRAGMA_RESET_OPTIONS reduce production constant -> CHAR
-- On PLUS_OP reduce production constant -> CHAR
-- On PERCENT_LBRACK reduce production constant -> CHAR
-- On OPEN reduce production constant -> CHAR
-- On OPAQUE reduce production constant -> CHAR
-- On NEW_EFFECT reduce production constant -> CHAR
-- On NAME reduce production constant -> CHAR
-- On MODULE reduce production constant -> CHAR
-- On MINUS_OP reduce production constant -> CHAR
-- On LPAREN_RPAREN reduce production constant -> CHAR
-- On LPAREN reduce production constant -> CHAR
-- On LOGIC reduce production constant -> CHAR
-- On LET reduce production constant -> CHAR
-- On LENS_PAREN_RIGHT reduce production constant -> CHAR
-- On LENS_PAREN_LEFT reduce production constant -> CHAR
-- On LBRACK_BAR reduce production constant -> CHAR
-- On LBRACK reduce production constant -> CHAR
-- On LBRACE reduce production constant -> CHAR
-- On KIND reduce production constant -> CHAR
-- On INT64 reduce production constant -> CHAR
-- On INT32 reduce production constant -> CHAR
-- On INT reduce production constant -> CHAR
-- On IN reduce production constant -> CHAR
-- On IMPLIES reduce production constant -> CHAR
-- On IFF reduce production constant -> CHAR
-- On IEEE64 reduce production constant -> CHAR
-- On IDENT reduce production constant -> CHAR
-- On HASH reduce production constant -> CHAR
-- On FALSE reduce production constant -> CHAR
-- On EXCEPTION reduce production constant -> CHAR
-- On EQUALS reduce production constant -> CHAR
-- On EOF reduce production constant -> CHAR
-- On END reduce production constant -> CHAR
-- On ELSE reduce production constant -> CHAR
-- On EFFECT reduce production constant -> CHAR
-- On DIV_MOD_OP reduce production constant -> CHAR
-- On DISJUNCTION reduce production constant -> CHAR
-- On DEFAULT reduce production constant -> CHAR
-- On CUSTOM_OP reduce production constant -> CHAR
-- On CONJUNCTION reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLON_EQUALS reduce production constant -> CHAR
-- On COLON_COLON reduce production constant -> CHAR
-- On COLON reduce production constant -> CHAR
-- On CHAR reduce production constant -> CHAR
-- On BYTEARRAY reduce production constant -> CHAR
-- On BEGIN reduce production constant -> CHAR
-- On BAR_RBRACK reduce production constant -> CHAR
-- On BAR_BAR reduce production constant -> CHAR
-- On BAR reduce production constant -> CHAR
-- On BANG_LBRACE reduce production constant -> CHAR
-- On BANG reduce production constant -> CHAR
-- On ASSUME reduce production constant -> CHAR
-- On ASSERT reduce production constant -> CHAR
-- On AND reduce production constant -> CHAR
-- On AMP_AMP reduce production constant -> CHAR
-- On AMP reduce production constant -> CHAR

State 53:
constant -> BYTEARRAY . [ WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production constant -> BYTEARRAY
-- On WHEN reduce production constant -> BYTEARRAY
-- On VAL reduce production constant -> BYTEARRAY
-- On UNDERSCORE reduce production constant -> BYTEARRAY
-- On UINT8 reduce production constant -> BYTEARRAY
-- On TYP_APP_GREATER reduce production constant -> BYTEARRAY
-- On TYPE reduce production constant -> BYTEARRAY
-- On TVAR reduce production constant -> BYTEARRAY
-- On TRUE reduce production constant -> BYTEARRAY
-- On TOTAL reduce production constant -> BYTEARRAY
-- On THEN reduce production constant -> BYTEARRAY
-- On SUB_EFFECT reduce production constant -> BYTEARRAY
-- On SUBTYPE reduce production constant -> BYTEARRAY
-- On SUBKIND reduce production constant -> BYTEARRAY
-- On STRING reduce production constant -> BYTEARRAY
-- On STAR reduce production constant -> BYTEARRAY
-- On SQUIGGLY_RARROW reduce production constant -> BYTEARRAY
-- On SEMICOLON_SEMICOLON reduce production constant -> BYTEARRAY
-- On SEMICOLON reduce production constant -> BYTEARRAY
-- On RPAREN reduce production constant -> BYTEARRAY
-- On RBRACK reduce production constant -> BYTEARRAY
-- On RBRACE reduce production constant -> BYTEARRAY
-- On RARROW reduce production constant -> BYTEARRAY
-- On PRIVATE reduce production constant -> BYTEARRAY
-- On PRAGMA_SET_OPTIONS reduce production constant -> BYTEARRAY
-- On PRAGMA_RESET_OPTIONS reduce production constant -> BYTEARRAY
-- On PLUS_OP reduce production constant -> BYTEARRAY
-- On PERCENT_LBRACK reduce production constant -> BYTEARRAY
-- On OPEN reduce production constant -> BYTEARRAY
-- On OPAQUE reduce production constant -> BYTEARRAY
-- On NEW_EFFECT reduce production constant -> BYTEARRAY
-- On NAME reduce production constant -> BYTEARRAY
-- On MODULE reduce production constant -> BYTEARRAY
-- On MINUS_OP reduce production constant -> BYTEARRAY
-- On LPAREN_RPAREN reduce production constant -> BYTEARRAY
-- On LPAREN reduce production constant -> BYTEARRAY
-- On LOGIC reduce production constant -> BYTEARRAY
-- On LET reduce production constant -> BYTEARRAY
-- On LENS_PAREN_RIGHT reduce production constant -> BYTEARRAY
-- On LENS_PAREN_LEFT reduce production constant -> BYTEARRAY
-- On LBRACK_BAR reduce production constant -> BYTEARRAY
-- On LBRACK reduce production constant -> BYTEARRAY
-- On LBRACE reduce production constant -> BYTEARRAY
-- On KIND reduce production constant -> BYTEARRAY
-- On INT64 reduce production constant -> BYTEARRAY
-- On INT32 reduce production constant -> BYTEARRAY
-- On INT reduce production constant -> BYTEARRAY
-- On IN reduce production constant -> BYTEARRAY
-- On IMPLIES reduce production constant -> BYTEARRAY
-- On IFF reduce production constant -> BYTEARRAY
-- On IEEE64 reduce production constant -> BYTEARRAY
-- On IDENT reduce production constant -> BYTEARRAY
-- On HASH reduce production constant -> BYTEARRAY
-- On FALSE reduce production constant -> BYTEARRAY
-- On EXCEPTION reduce production constant -> BYTEARRAY
-- On EQUALS reduce production constant -> BYTEARRAY
-- On EOF reduce production constant -> BYTEARRAY
-- On END reduce production constant -> BYTEARRAY
-- On ELSE reduce production constant -> BYTEARRAY
-- On EFFECT reduce production constant -> BYTEARRAY
-- On DIV_MOD_OP reduce production constant -> BYTEARRAY
-- On DISJUNCTION reduce production constant -> BYTEARRAY
-- On DEFAULT reduce production constant -> BYTEARRAY
-- On CUSTOM_OP reduce production constant -> BYTEARRAY
-- On CONJUNCTION reduce production constant -> BYTEARRAY
-- On COMMA reduce production constant -> BYTEARRAY
-- On COLON_EQUALS reduce production constant -> BYTEARRAY
-- On COLON_COLON reduce production constant -> BYTEARRAY
-- On COLON reduce production constant -> BYTEARRAY
-- On CHAR reduce production constant -> BYTEARRAY
-- On BYTEARRAY reduce production constant -> BYTEARRAY
-- On BEGIN reduce production constant -> BYTEARRAY
-- On BAR_RBRACK reduce production constant -> BYTEARRAY
-- On BAR_BAR reduce production constant -> BYTEARRAY
-- On BAR reduce production constant -> BYTEARRAY
-- On BANG_LBRACE reduce production constant -> BYTEARRAY
-- On BANG reduce production constant -> BYTEARRAY
-- On ASSUME reduce production constant -> BYTEARRAY
-- On ASSERT reduce production constant -> BYTEARRAY
-- On AND reduce production constant -> BYTEARRAY
-- On AMP_AMP reduce production constant -> BYTEARRAY
-- On AMP reduce production constant -> BYTEARRAY

State 54:
atomicPattern2 -> tvar . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production atomicPattern2 -> tvar
-- On UNDERSCORE reduce production atomicPattern2 -> tvar
-- On UINT8 reduce production atomicPattern2 -> tvar
-- On TVAR reduce production atomicPattern2 -> tvar
-- On TRUE reduce production atomicPattern2 -> tvar
-- On STRING reduce production atomicPattern2 -> tvar
-- On SQUIGGLY_RARROW reduce production atomicPattern2 -> tvar
-- On SEMICOLON reduce production atomicPattern2 -> tvar
-- On RPAREN reduce production atomicPattern2 -> tvar
-- On RBRACK reduce production atomicPattern2 -> tvar
-- On RBRACE reduce production atomicPattern2 -> tvar
-- On RARROW reduce production atomicPattern2 -> tvar
-- On NAME reduce production atomicPattern2 -> tvar
-- On LPAREN_RPAREN reduce production atomicPattern2 -> tvar
-- On LPAREN reduce production atomicPattern2 -> tvar
-- On LENS_PAREN_RIGHT reduce production atomicPattern2 -> tvar
-- On LENS_PAREN_LEFT reduce production atomicPattern2 -> tvar
-- On LBRACK reduce production atomicPattern2 -> tvar
-- On LBRACE reduce production atomicPattern2 -> tvar
-- On INT64 reduce production atomicPattern2 -> tvar
-- On INT32 reduce production atomicPattern2 -> tvar
-- On INT reduce production atomicPattern2 -> tvar
-- On IEEE64 reduce production atomicPattern2 -> tvar
-- On IDENT reduce production atomicPattern2 -> tvar
-- On HASH reduce production atomicPattern2 -> tvar
-- On FALSE reduce production atomicPattern2 -> tvar
-- On EQUALS reduce production atomicPattern2 -> tvar
-- On COMMA reduce production atomicPattern2 -> tvar
-- On COLON_COLON reduce production atomicPattern2 -> tvar
-- On COLON reduce production atomicPattern2 -> tvar
-- On CHAR reduce production atomicPattern2 -> tvar
-- On BYTEARRAY reduce production atomicPattern2 -> tvar
-- On BAR reduce production atomicPattern2 -> tvar

State 55:
pattern -> tuplePattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW EQUALS COLON BAR ]
-- On WHEN reduce production pattern -> tuplePattern
-- On SQUIGGLY_RARROW reduce production pattern -> tuplePattern
-- On SEMICOLON reduce production pattern -> tuplePattern
-- On RPAREN reduce production pattern -> tuplePattern
-- On RBRACE reduce production pattern -> tuplePattern
-- On RARROW reduce production pattern -> tuplePattern
-- On EQUALS reduce production pattern -> tuplePattern
-- On COLON reduce production pattern -> tuplePattern
-- On BAR reduce production pattern -> tuplePattern

State 56:
nonTvarPattern2 -> qname . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> qname
-- On UNDERSCORE reduce production nonTvarPattern2 -> qname
-- On UINT8 reduce production nonTvarPattern2 -> qname
-- On TVAR reduce production nonTvarPattern2 -> qname
-- On TRUE reduce production nonTvarPattern2 -> qname
-- On STRING reduce production nonTvarPattern2 -> qname
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> qname
-- On SEMICOLON reduce production nonTvarPattern2 -> qname
-- On RPAREN reduce production nonTvarPattern2 -> qname
-- On RBRACK reduce production nonTvarPattern2 -> qname
-- On RBRACE reduce production nonTvarPattern2 -> qname
-- On RARROW reduce production nonTvarPattern2 -> qname
-- On NAME reduce production nonTvarPattern2 -> qname
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> qname
-- On LPAREN reduce production nonTvarPattern2 -> qname
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> qname
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> qname
-- On LBRACK reduce production nonTvarPattern2 -> qname
-- On LBRACE reduce production nonTvarPattern2 -> qname
-- On INT64 reduce production nonTvarPattern2 -> qname
-- On INT32 reduce production nonTvarPattern2 -> qname
-- On INT reduce production nonTvarPattern2 -> qname
-- On IEEE64 reduce production nonTvarPattern2 -> qname
-- On IDENT reduce production nonTvarPattern2 -> qname
-- On HASH reduce production nonTvarPattern2 -> qname
-- On FALSE reduce production nonTvarPattern2 -> qname
-- On EQUALS reduce production nonTvarPattern2 -> qname
-- On COMMA reduce production nonTvarPattern2 -> qname
-- On COLON_COLON reduce production nonTvarPattern2 -> qname
-- On COLON reduce production nonTvarPattern2 -> qname
-- On CHAR reduce production nonTvarPattern2 -> qname
-- On BYTEARRAY reduce production nonTvarPattern2 -> qname
-- On BAR reduce production nonTvarPattern2 -> qname

State 57:
recordPattern -> lid EQUALS pattern . moreFieldPatterns [ RBRACE ]
-- On SEMICOLON shift to state 58
-- On moreFieldPatterns shift to state 86
-- On RBRACE reduce production moreFieldPatterns ->

State 58:
moreFieldPatterns -> SEMICOLON . lid EQUALS pattern moreFieldPatterns [ RBRACE ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On name shift to state 39
-- On lid shift to state 59
-- On idpath shift to state 85
-- On ident shift to state 42

State 59:
moreFieldPatterns -> SEMICOLON lid . EQUALS pattern moreFieldPatterns [ RBRACE ]
-- On EQUALS shift to state 60

State 60:
moreFieldPatterns -> SEMICOLON lid EQUALS . pattern moreFieldPatterns [ RBRACE ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 61
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 61:
moreFieldPatterns -> SEMICOLON lid EQUALS pattern . moreFieldPatterns [ RBRACE ]
-- On SEMICOLON shift to state 58
-- On moreFieldPatterns shift to state 62
-- On RBRACE reduce production moreFieldPatterns ->

State 62:
moreFieldPatterns -> SEMICOLON lid EQUALS pattern moreFieldPatterns . [ RBRACE ]
-- On RBRACE reduce production moreFieldPatterns -> SEMICOLON lid EQUALS pattern moreFieldPatterns

State 63:
atomicPattern2 -> nonTvarPattern2 . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production atomicPattern2 -> nonTvarPattern2
-- On UNDERSCORE reduce production atomicPattern2 -> nonTvarPattern2
-- On UINT8 reduce production atomicPattern2 -> nonTvarPattern2
-- On TVAR reduce production atomicPattern2 -> nonTvarPattern2
-- On TRUE reduce production atomicPattern2 -> nonTvarPattern2
-- On STRING reduce production atomicPattern2 -> nonTvarPattern2
-- On SQUIGGLY_RARROW reduce production atomicPattern2 -> nonTvarPattern2
-- On SEMICOLON reduce production atomicPattern2 -> nonTvarPattern2
-- On RPAREN reduce production atomicPattern2 -> nonTvarPattern2
-- On RBRACK reduce production atomicPattern2 -> nonTvarPattern2
-- On RBRACE reduce production atomicPattern2 -> nonTvarPattern2
-- On RARROW reduce production atomicPattern2 -> nonTvarPattern2
-- On NAME reduce production atomicPattern2 -> nonTvarPattern2
-- On LPAREN_RPAREN reduce production atomicPattern2 -> nonTvarPattern2
-- On LPAREN reduce production atomicPattern2 -> nonTvarPattern2
-- On LENS_PAREN_RIGHT reduce production atomicPattern2 -> nonTvarPattern2
-- On LENS_PAREN_LEFT reduce production atomicPattern2 -> nonTvarPattern2
-- On LBRACK reduce production atomicPattern2 -> nonTvarPattern2
-- On LBRACE reduce production atomicPattern2 -> nonTvarPattern2
-- On INT64 reduce production atomicPattern2 -> nonTvarPattern2
-- On INT32 reduce production atomicPattern2 -> nonTvarPattern2
-- On INT reduce production atomicPattern2 -> nonTvarPattern2
-- On IEEE64 reduce production atomicPattern2 -> nonTvarPattern2
-- On IDENT reduce production atomicPattern2 -> nonTvarPattern2
-- On HASH reduce production atomicPattern2 -> nonTvarPattern2
-- On FALSE reduce production atomicPattern2 -> nonTvarPattern2
-- On EQUALS reduce production atomicPattern2 -> nonTvarPattern2
-- On COMMA reduce production atomicPattern2 -> nonTvarPattern2
-- On COLON_COLON reduce production atomicPattern2 -> nonTvarPattern2
-- On COLON reduce production atomicPattern2 -> nonTvarPattern2
-- On CHAR reduce production atomicPattern2 -> nonTvarPattern2
-- On BYTEARRAY reduce production atomicPattern2 -> nonTvarPattern2
-- On BAR reduce production atomicPattern2 -> nonTvarPattern2

State 64:
qname -> namepath . [ WHEN VAL UNDERSCORE UINT8 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE KIND INT64 INT32 INT IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END EFFECT DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ]
-- On WHEN reduce production qname -> namepath
-- On VAL reduce production qname -> namepath
-- On UNDERSCORE reduce production qname -> namepath
-- On UINT8 reduce production qname -> namepath
-- On TYPE reduce production qname -> namepath
-- On TVAR reduce production qname -> namepath
-- On TRUE reduce production qname -> namepath
-- On TOTAL reduce production qname -> namepath
-- On SUB_EFFECT reduce production qname -> namepath
-- On STRING reduce production qname -> namepath
-- On SQUIGGLY_RARROW reduce production qname -> namepath
-- On SEMICOLON_SEMICOLON reduce production qname -> namepath
-- On SEMICOLON reduce production qname -> namepath
-- On RPAREN reduce production qname -> namepath
-- On RBRACK reduce production qname -> namepath
-- On RBRACE reduce production qname -> namepath
-- On RARROW reduce production qname -> namepath
-- On PRIVATE reduce production qname -> namepath
-- On PRAGMA_SET_OPTIONS reduce production qname -> namepath
-- On PRAGMA_RESET_OPTIONS reduce production qname -> namepath
-- On OPEN reduce production qname -> namepath
-- On OPAQUE reduce production qname -> namepath
-- On NEW_EFFECT reduce production qname -> namepath
-- On NAME reduce production qname -> namepath
-- On MODULE reduce production qname -> namepath
-- On LPAREN_RPAREN reduce production qname -> namepath
-- On LPAREN reduce production qname -> namepath
-- On LOGIC reduce production qname -> namepath
-- On LET reduce production qname -> namepath
-- On LENS_PAREN_RIGHT reduce production qname -> namepath
-- On LENS_PAREN_LEFT reduce production qname -> namepath
-- On LBRACK reduce production qname -> namepath
-- On LBRACE reduce production qname -> namepath
-- On KIND reduce production qname -> namepath
-- On INT64 reduce production qname -> namepath
-- On INT32 reduce production qname -> namepath
-- On INT reduce production qname -> namepath
-- On IEEE64 reduce production qname -> namepath
-- On IDENT reduce production qname -> namepath
-- On HASH reduce production qname -> namepath
-- On FALSE reduce production qname -> namepath
-- On EXCEPTION reduce production qname -> namepath
-- On EQUALS reduce production qname -> namepath
-- On EOF reduce production qname -> namepath
-- On END reduce production qname -> namepath
-- On EFFECT reduce production qname -> namepath
-- On DEFAULT reduce production qname -> namepath
-- On COMMA reduce production qname -> namepath
-- On COLON_COLON reduce production qname -> namepath
-- On COLON reduce production qname -> namepath
-- On CHAR reduce production qname -> namepath
-- On BYTEARRAY reduce production qname -> namepath
-- On BAR reduce production qname -> namepath
-- On ASSUME reduce production qname -> namepath

State 65:
namepath -> name . [ WHEN VAL UNDERSCORE UINT8 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE KIND INT64 INT32 INT IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END EFFECT DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ]
namepath -> name . DOT namepath [ WHEN VAL UNDERSCORE UINT8 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE KIND INT64 INT32 INT IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END EFFECT DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ]
-- On DOT shift to state 66
-- On WHEN reduce production namepath -> name
-- On VAL reduce production namepath -> name
-- On UNDERSCORE reduce production namepath -> name
-- On UINT8 reduce production namepath -> name
-- On TYPE reduce production namepath -> name
-- On TVAR reduce production namepath -> name
-- On TRUE reduce production namepath -> name
-- On TOTAL reduce production namepath -> name
-- On SUB_EFFECT reduce production namepath -> name
-- On STRING reduce production namepath -> name
-- On SQUIGGLY_RARROW reduce production namepath -> name
-- On SEMICOLON_SEMICOLON reduce production namepath -> name
-- On SEMICOLON reduce production namepath -> name
-- On RPAREN reduce production namepath -> name
-- On RBRACK reduce production namepath -> name
-- On RBRACE reduce production namepath -> name
-- On RARROW reduce production namepath -> name
-- On PRIVATE reduce production namepath -> name
-- On PRAGMA_SET_OPTIONS reduce production namepath -> name
-- On PRAGMA_RESET_OPTIONS reduce production namepath -> name
-- On OPEN reduce production namepath -> name
-- On OPAQUE reduce production namepath -> name
-- On NEW_EFFECT reduce production namepath -> name
-- On NAME reduce production namepath -> name
-- On MODULE reduce production namepath -> name
-- On LPAREN_RPAREN reduce production namepath -> name
-- On LPAREN reduce production namepath -> name
-- On LOGIC reduce production namepath -> name
-- On LET reduce production namepath -> name
-- On LENS_PAREN_RIGHT reduce production namepath -> name
-- On LENS_PAREN_LEFT reduce production namepath -> name
-- On LBRACK reduce production namepath -> name
-- On LBRACE reduce production namepath -> name
-- On KIND reduce production namepath -> name
-- On INT64 reduce production namepath -> name
-- On INT32 reduce production namepath -> name
-- On INT reduce production namepath -> name
-- On IEEE64 reduce production namepath -> name
-- On IDENT reduce production namepath -> name
-- On HASH reduce production namepath -> name
-- On FALSE reduce production namepath -> name
-- On EXCEPTION reduce production namepath -> name
-- On EQUALS reduce production namepath -> name
-- On EOF reduce production namepath -> name
-- On END reduce production namepath -> name
-- On EFFECT reduce production namepath -> name
-- On DEFAULT reduce production namepath -> name
-- On COMMA reduce production namepath -> name
-- On COLON_COLON reduce production namepath -> name
-- On COLON reduce production namepath -> name
-- On CHAR reduce production namepath -> name
-- On BYTEARRAY reduce production namepath -> name
-- On BAR reduce production namepath -> name
-- On ASSUME reduce production namepath -> name

State 66:
namepath -> name DOT . namepath [ WHEN VAL UNDERSCORE UINT8 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE KIND INT64 INT32 INT IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END EFFECT DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ]
-- On NAME shift to state 3
-- On namepath shift to state 67
-- On name shift to state 65

State 67:
namepath -> name DOT namepath . [ WHEN VAL UNDERSCORE UINT8 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE KIND INT64 INT32 INT IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END EFFECT DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME ]
-- On WHEN reduce production namepath -> name DOT namepath
-- On VAL reduce production namepath -> name DOT namepath
-- On UNDERSCORE reduce production namepath -> name DOT namepath
-- On UINT8 reduce production namepath -> name DOT namepath
-- On TYPE reduce production namepath -> name DOT namepath
-- On TVAR reduce production namepath -> name DOT namepath
-- On TRUE reduce production namepath -> name DOT namepath
-- On TOTAL reduce production namepath -> name DOT namepath
-- On SUB_EFFECT reduce production namepath -> name DOT namepath
-- On STRING reduce production namepath -> name DOT namepath
-- On SQUIGGLY_RARROW reduce production namepath -> name DOT namepath
-- On SEMICOLON_SEMICOLON reduce production namepath -> name DOT namepath
-- On SEMICOLON reduce production namepath -> name DOT namepath
-- On RPAREN reduce production namepath -> name DOT namepath
-- On RBRACK reduce production namepath -> name DOT namepath
-- On RBRACE reduce production namepath -> name DOT namepath
-- On RARROW reduce production namepath -> name DOT namepath
-- On PRIVATE reduce production namepath -> name DOT namepath
-- On PRAGMA_SET_OPTIONS reduce production namepath -> name DOT namepath
-- On PRAGMA_RESET_OPTIONS reduce production namepath -> name DOT namepath
-- On OPEN reduce production namepath -> name DOT namepath
-- On OPAQUE reduce production namepath -> name DOT namepath
-- On NEW_EFFECT reduce production namepath -> name DOT namepath
-- On NAME reduce production namepath -> name DOT namepath
-- On MODULE reduce production namepath -> name DOT namepath
-- On LPAREN_RPAREN reduce production namepath -> name DOT namepath
-- On LPAREN reduce production namepath -> name DOT namepath
-- On LOGIC reduce production namepath -> name DOT namepath
-- On LET reduce production namepath -> name DOT namepath
-- On LENS_PAREN_RIGHT reduce production namepath -> name DOT namepath
-- On LENS_PAREN_LEFT reduce production namepath -> name DOT namepath
-- On LBRACK reduce production namepath -> name DOT namepath
-- On LBRACE reduce production namepath -> name DOT namepath
-- On KIND reduce production namepath -> name DOT namepath
-- On INT64 reduce production namepath -> name DOT namepath
-- On INT32 reduce production namepath -> name DOT namepath
-- On INT reduce production namepath -> name DOT namepath
-- On IEEE64 reduce production namepath -> name DOT namepath
-- On IDENT reduce production namepath -> name DOT namepath
-- On HASH reduce production namepath -> name DOT namepath
-- On FALSE reduce production namepath -> name DOT namepath
-- On EXCEPTION reduce production namepath -> name DOT namepath
-- On EQUALS reduce production namepath -> name DOT namepath
-- On EOF reduce production namepath -> name DOT namepath
-- On END reduce production namepath -> name DOT namepath
-- On EFFECT reduce production namepath -> name DOT namepath
-- On DEFAULT reduce production namepath -> name DOT namepath
-- On COMMA reduce production namepath -> name DOT namepath
-- On COLON_COLON reduce production namepath -> name DOT namepath
-- On COLON reduce production namepath -> name DOT namepath
-- On CHAR reduce production namepath -> name DOT namepath
-- On BYTEARRAY reduce production namepath -> name DOT namepath
-- On BAR reduce production namepath -> name DOT namepath
-- On ASSUME reduce production namepath -> name DOT namepath

State 68:
tuplePattern -> listPattern . patternListComma [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW EQUALS COLON BAR ]
-- On COMMA shift to state 69
-- On patternListComma shift to state 84
-- On WHEN reduce production patternListComma ->
-- On SQUIGGLY_RARROW reduce production patternListComma ->
-- On SEMICOLON reduce production patternListComma ->
-- On RPAREN reduce production patternListComma ->
-- On RBRACE reduce production patternListComma ->
-- On RARROW reduce production patternListComma ->
-- On EQUALS reduce production patternListComma ->
-- On COLON reduce production patternListComma ->
-- On BAR reduce production patternListComma ->

State 69:
patternListComma -> COMMA . listPattern patternListComma [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 70
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 70:
patternListComma -> COMMA listPattern . patternListComma [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
-- On COMMA shift to state 69
-- On patternListComma shift to state 71
-- On WHEN reduce production patternListComma ->
-- On SQUIGGLY_RARROW reduce production patternListComma ->
-- On SEMICOLON reduce production patternListComma ->
-- On RPAREN reduce production patternListComma ->
-- On RBRACE reduce production patternListComma ->
-- On RARROW reduce production patternListComma ->
-- On LENS_PAREN_RIGHT reduce production patternListComma ->
-- On EQUALS reduce production patternListComma ->
-- On COLON reduce production patternListComma ->
-- On BAR reduce production patternListComma ->

State 71:
patternListComma -> COMMA listPattern patternListComma . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR ]
-- On WHEN reduce production patternListComma -> COMMA listPattern patternListComma
-- On SQUIGGLY_RARROW reduce production patternListComma -> COMMA listPattern patternListComma
-- On SEMICOLON reduce production patternListComma -> COMMA listPattern patternListComma
-- On RPAREN reduce production patternListComma -> COMMA listPattern patternListComma
-- On RBRACE reduce production patternListComma -> COMMA listPattern patternListComma
-- On RARROW reduce production patternListComma -> COMMA listPattern patternListComma
-- On LENS_PAREN_RIGHT reduce production patternListComma -> COMMA listPattern patternListComma
-- On EQUALS reduce production patternListComma -> COMMA listPattern patternListComma
-- On COLON reduce production patternListComma -> COMMA listPattern patternListComma
-- On BAR reduce production patternListComma -> COMMA listPattern patternListComma

State 72:
nonTvarPattern2 -> ident . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> ident
-- On UNDERSCORE reduce production nonTvarPattern2 -> ident
-- On UINT8 reduce production nonTvarPattern2 -> ident
-- On TVAR reduce production nonTvarPattern2 -> ident
-- On TRUE reduce production nonTvarPattern2 -> ident
-- On STRING reduce production nonTvarPattern2 -> ident
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> ident
-- On SEMICOLON reduce production nonTvarPattern2 -> ident
-- On RPAREN reduce production nonTvarPattern2 -> ident
-- On RBRACK reduce production nonTvarPattern2 -> ident
-- On RBRACE reduce production nonTvarPattern2 -> ident
-- On RARROW reduce production nonTvarPattern2 -> ident
-- On NAME reduce production nonTvarPattern2 -> ident
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> ident
-- On LPAREN reduce production nonTvarPattern2 -> ident
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> ident
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> ident
-- On LBRACK reduce production nonTvarPattern2 -> ident
-- On LBRACE reduce production nonTvarPattern2 -> ident
-- On INT64 reduce production nonTvarPattern2 -> ident
-- On INT32 reduce production nonTvarPattern2 -> ident
-- On INT reduce production nonTvarPattern2 -> ident
-- On IEEE64 reduce production nonTvarPattern2 -> ident
-- On IDENT reduce production nonTvarPattern2 -> ident
-- On HASH reduce production nonTvarPattern2 -> ident
-- On FALSE reduce production nonTvarPattern2 -> ident
-- On EQUALS reduce production nonTvarPattern2 -> ident
-- On COMMA reduce production nonTvarPattern2 -> ident
-- On COLON_COLON reduce production nonTvarPattern2 -> ident
-- On COLON reduce production nonTvarPattern2 -> ident
-- On CHAR reduce production nonTvarPattern2 -> ident
-- On BYTEARRAY reduce production nonTvarPattern2 -> ident
-- On BAR reduce production nonTvarPattern2 -> ident

State 73:
nonTvarPattern2 -> constant . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> constant
-- On UNDERSCORE reduce production nonTvarPattern2 -> constant
-- On UINT8 reduce production nonTvarPattern2 -> constant
-- On TVAR reduce production nonTvarPattern2 -> constant
-- On TRUE reduce production nonTvarPattern2 -> constant
-- On STRING reduce production nonTvarPattern2 -> constant
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> constant
-- On SEMICOLON reduce production nonTvarPattern2 -> constant
-- On RPAREN reduce production nonTvarPattern2 -> constant
-- On RBRACK reduce production nonTvarPattern2 -> constant
-- On RBRACE reduce production nonTvarPattern2 -> constant
-- On RARROW reduce production nonTvarPattern2 -> constant
-- On NAME reduce production nonTvarPattern2 -> constant
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> constant
-- On LPAREN reduce production nonTvarPattern2 -> constant
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> constant
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> constant
-- On LBRACK reduce production nonTvarPattern2 -> constant
-- On LBRACE reduce production nonTvarPattern2 -> constant
-- On INT64 reduce production nonTvarPattern2 -> constant
-- On INT32 reduce production nonTvarPattern2 -> constant
-- On INT reduce production nonTvarPattern2 -> constant
-- On IEEE64 reduce production nonTvarPattern2 -> constant
-- On IDENT reduce production nonTvarPattern2 -> constant
-- On HASH reduce production nonTvarPattern2 -> constant
-- On FALSE reduce production nonTvarPattern2 -> constant
-- On EQUALS reduce production nonTvarPattern2 -> constant
-- On COMMA reduce production nonTvarPattern2 -> constant
-- On COLON_COLON reduce production nonTvarPattern2 -> constant
-- On COLON reduce production nonTvarPattern2 -> constant
-- On CHAR reduce production nonTvarPattern2 -> constant
-- On BYTEARRAY reduce production nonTvarPattern2 -> constant
-- On BAR reduce production nonTvarPattern2 -> constant

State 74:
atomicPattern -> atomicPattern2 . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production atomicPattern -> atomicPattern2
-- On UNDERSCORE reduce production atomicPattern -> atomicPattern2
-- On UINT8 reduce production atomicPattern -> atomicPattern2
-- On TVAR reduce production atomicPattern -> atomicPattern2
-- On TRUE reduce production atomicPattern -> atomicPattern2
-- On STRING reduce production atomicPattern -> atomicPattern2
-- On SQUIGGLY_RARROW reduce production atomicPattern -> atomicPattern2
-- On SEMICOLON reduce production atomicPattern -> atomicPattern2
-- On RPAREN reduce production atomicPattern -> atomicPattern2
-- On RBRACK reduce production atomicPattern -> atomicPattern2
-- On RBRACE reduce production atomicPattern -> atomicPattern2
-- On RARROW reduce production atomicPattern -> atomicPattern2
-- On NAME reduce production atomicPattern -> atomicPattern2
-- On LPAREN_RPAREN reduce production atomicPattern -> atomicPattern2
-- On LPAREN reduce production atomicPattern -> atomicPattern2
-- On LENS_PAREN_RIGHT reduce production atomicPattern -> atomicPattern2
-- On LENS_PAREN_LEFT reduce production atomicPattern -> atomicPattern2
-- On LBRACK reduce production atomicPattern -> atomicPattern2
-- On LBRACE reduce production atomicPattern -> atomicPattern2
-- On INT64 reduce production atomicPattern -> atomicPattern2
-- On INT32 reduce production atomicPattern -> atomicPattern2
-- On INT reduce production atomicPattern -> atomicPattern2
-- On IEEE64 reduce production atomicPattern -> atomicPattern2
-- On IDENT reduce production atomicPattern -> atomicPattern2
-- On HASH reduce production atomicPattern -> atomicPattern2
-- On FALSE reduce production atomicPattern -> atomicPattern2
-- On EQUALS reduce production atomicPattern -> atomicPattern2
-- On COMMA reduce production atomicPattern -> atomicPattern2
-- On COLON_COLON reduce production atomicPattern -> atomicPattern2
-- On COLON reduce production atomicPattern -> atomicPattern2
-- On CHAR reduce production atomicPattern -> atomicPattern2
-- On BYTEARRAY reduce production atomicPattern -> atomicPattern2
-- On BAR reduce production atomicPattern -> atomicPattern2

State 75:
appPattern -> atomicPattern . atomicPatterns [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPatterns shift to state 76
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 77
-- On WHEN reduce production atomicPatterns ->
-- On SQUIGGLY_RARROW reduce production atomicPatterns ->
-- On SEMICOLON reduce production atomicPatterns ->
-- On RPAREN reduce production atomicPatterns ->
-- On RBRACK reduce production atomicPatterns ->
-- On RBRACE reduce production atomicPatterns ->
-- On RARROW reduce production atomicPatterns ->
-- On LENS_PAREN_RIGHT reduce production atomicPatterns ->
-- On EQUALS reduce production atomicPatterns ->
-- On COMMA reduce production atomicPatterns ->
-- On COLON_COLON reduce production atomicPatterns ->
-- On COLON reduce production atomicPatterns ->
-- On BAR reduce production atomicPatterns ->

State 76:
appPattern -> atomicPattern atomicPatterns . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
-- On WHEN reduce production appPattern -> atomicPattern atomicPatterns
-- On SQUIGGLY_RARROW reduce production appPattern -> atomicPattern atomicPatterns
-- On SEMICOLON reduce production appPattern -> atomicPattern atomicPatterns
-- On RPAREN reduce production appPattern -> atomicPattern atomicPatterns
-- On RBRACK reduce production appPattern -> atomicPattern atomicPatterns
-- On RBRACE reduce production appPattern -> atomicPattern atomicPatterns
-- On RARROW reduce production appPattern -> atomicPattern atomicPatterns
-- On LENS_PAREN_RIGHT reduce production appPattern -> atomicPattern atomicPatterns
-- On EQUALS reduce production appPattern -> atomicPattern atomicPatterns
-- On COMMA reduce production appPattern -> atomicPattern atomicPatterns
-- On COLON_COLON reduce production appPattern -> atomicPattern atomicPatterns
-- On COLON reduce production appPattern -> atomicPattern atomicPatterns
-- On BAR reduce production appPattern -> atomicPattern atomicPatterns

State 77:
atomicPatterns -> atomicPattern . atomicPatterns [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPatterns shift to state 78
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 77
-- On WHEN reduce production atomicPatterns ->
-- On SQUIGGLY_RARROW reduce production atomicPatterns ->
-- On SEMICOLON reduce production atomicPatterns ->
-- On RPAREN reduce production atomicPatterns ->
-- On RBRACK reduce production atomicPatterns ->
-- On RBRACE reduce production atomicPatterns ->
-- On RARROW reduce production atomicPatterns ->
-- On LENS_PAREN_RIGHT reduce production atomicPatterns ->
-- On EQUALS reduce production atomicPatterns ->
-- On COMMA reduce production atomicPatterns ->
-- On COLON_COLON reduce production atomicPatterns ->
-- On COLON reduce production atomicPatterns ->
-- On BAR reduce production atomicPatterns ->

State 78:
atomicPatterns -> atomicPattern atomicPatterns . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR ]
-- On WHEN reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On SQUIGGLY_RARROW reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On SEMICOLON reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On RPAREN reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On RBRACK reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On RBRACE reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On RARROW reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On LENS_PAREN_RIGHT reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On EQUALS reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On COMMA reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On COLON_COLON reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On COLON reduce production atomicPatterns -> atomicPattern atomicPatterns
-- On BAR reduce production atomicPatterns -> atomicPattern atomicPatterns

State 79:
listPattern -> appPattern . consPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR ]
-- On COLON_COLON shift to state 80
-- On consPattern shift to state 83
-- On WHEN reduce production consPattern ->
-- On SQUIGGLY_RARROW reduce production consPattern ->
-- On SEMICOLON reduce production consPattern ->
-- On RPAREN reduce production consPattern ->
-- On RBRACE reduce production consPattern ->
-- On RARROW reduce production consPattern ->
-- On LENS_PAREN_RIGHT reduce production consPattern ->
-- On EQUALS reduce production consPattern ->
-- On COMMA reduce production consPattern ->
-- On COLON reduce production consPattern ->
-- On BAR reduce production consPattern ->

State 80:
consPattern -> COLON_COLON . appPattern consPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 81

State 81:
consPattern -> COLON_COLON appPattern . consPattern [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR ]
-- On COLON_COLON shift to state 80
-- On consPattern shift to state 82
-- On WHEN reduce production consPattern ->
-- On SQUIGGLY_RARROW reduce production consPattern ->
-- On SEMICOLON reduce production consPattern ->
-- On RPAREN reduce production consPattern ->
-- On RBRACE reduce production consPattern ->
-- On RARROW reduce production consPattern ->
-- On LENS_PAREN_RIGHT reduce production consPattern ->
-- On EQUALS reduce production consPattern ->
-- On COMMA reduce production consPattern ->
-- On COLON reduce production consPattern ->
-- On BAR reduce production consPattern ->

State 82:
consPattern -> COLON_COLON appPattern consPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR ]
-- On WHEN reduce production consPattern -> COLON_COLON appPattern consPattern
-- On SQUIGGLY_RARROW reduce production consPattern -> COLON_COLON appPattern consPattern
-- On SEMICOLON reduce production consPattern -> COLON_COLON appPattern consPattern
-- On RPAREN reduce production consPattern -> COLON_COLON appPattern consPattern
-- On RBRACE reduce production consPattern -> COLON_COLON appPattern consPattern
-- On RARROW reduce production consPattern -> COLON_COLON appPattern consPattern
-- On LENS_PAREN_RIGHT reduce production consPattern -> COLON_COLON appPattern consPattern
-- On EQUALS reduce production consPattern -> COLON_COLON appPattern consPattern
-- On COMMA reduce production consPattern -> COLON_COLON appPattern consPattern
-- On COLON reduce production consPattern -> COLON_COLON appPattern consPattern
-- On BAR reduce production consPattern -> COLON_COLON appPattern consPattern

State 83:
listPattern -> appPattern consPattern . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR ]
-- On WHEN reduce production listPattern -> appPattern consPattern
-- On SQUIGGLY_RARROW reduce production listPattern -> appPattern consPattern
-- On SEMICOLON reduce production listPattern -> appPattern consPattern
-- On RPAREN reduce production listPattern -> appPattern consPattern
-- On RBRACE reduce production listPattern -> appPattern consPattern
-- On RARROW reduce production listPattern -> appPattern consPattern
-- On LENS_PAREN_RIGHT reduce production listPattern -> appPattern consPattern
-- On EQUALS reduce production listPattern -> appPattern consPattern
-- On COMMA reduce production listPattern -> appPattern consPattern
-- On COLON reduce production listPattern -> appPattern consPattern
-- On BAR reduce production listPattern -> appPattern consPattern

State 84:
tuplePattern -> listPattern patternListComma . [ WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW EQUALS COLON BAR ]
-- On WHEN reduce production tuplePattern -> listPattern patternListComma
-- On SQUIGGLY_RARROW reduce production tuplePattern -> listPattern patternListComma
-- On SEMICOLON reduce production tuplePattern -> listPattern patternListComma
-- On RPAREN reduce production tuplePattern -> listPattern patternListComma
-- On RBRACE reduce production tuplePattern -> listPattern patternListComma
-- On RARROW reduce production tuplePattern -> listPattern patternListComma
-- On EQUALS reduce production tuplePattern -> listPattern patternListComma
-- On COLON reduce production tuplePattern -> listPattern patternListComma
-- On BAR reduce production tuplePattern -> listPattern patternListComma

State 85:
lid -> idpath . [ EQUALS ]
-- On EQUALS reduce production lid -> idpath

State 86:
recordPattern -> lid EQUALS pattern moreFieldPatterns . [ RBRACE ]
-- On RBRACE reduce production recordPattern -> lid EQUALS pattern moreFieldPatterns

State 87:
nonTvarPattern2 -> LBRACK patternListSemiColon . RBRACK [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On RBRACK shift to state 88

State 88:
nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On UNDERSCORE reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On UINT8 reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On TVAR reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On TRUE reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On STRING reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On SEMICOLON reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On RPAREN reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On RBRACK reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On RBRACE reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On RARROW reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On NAME reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On LPAREN reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On LBRACK reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On LBRACE reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On INT64 reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On INT32 reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On INT reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On IEEE64 reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On IDENT reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On HASH reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On FALSE reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On EQUALS reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On COMMA reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On COLON_COLON reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On COLON reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On CHAR reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On BYTEARRAY reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK
-- On BAR reduce production nonTvarPattern2 -> LBRACK patternListSemiColon RBRACK

State 89:
patternListSemiColon -> appPattern . patternListSemiColonRest [ RBRACK ]
-- On SEMICOLON shift to state 90
-- On patternListSemiColonRest shift to state 93
-- On RBRACK reduce production patternListSemiColonRest ->

State 90:
patternListSemiColonRest -> SEMICOLON . appPattern patternListSemiColonRest [ RBRACK ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 91

State 91:
patternListSemiColonRest -> SEMICOLON appPattern . patternListSemiColonRest [ RBRACK ]
-- On SEMICOLON shift to state 90
-- On patternListSemiColonRest shift to state 92
-- On RBRACK reduce production patternListSemiColonRest ->

State 92:
patternListSemiColonRest -> SEMICOLON appPattern patternListSemiColonRest . [ RBRACK ]
-- On RBRACK reduce production patternListSemiColonRest -> SEMICOLON appPattern patternListSemiColonRest

State 93:
patternListSemiColon -> appPattern patternListSemiColonRest . [ RBRACK ]
-- On RBRACK reduce production patternListSemiColon -> appPattern patternListSemiColonRest

State 94:
nonTvarPattern2 -> LENS_PAREN_LEFT listPattern . COMMA listPattern patternListComma LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On COMMA shift to state 95

State 95:
nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA . listPattern patternListComma LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 96
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 96:
nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern . patternListComma LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On COMMA shift to state 69
-- On patternListComma shift to state 97
-- On LENS_PAREN_RIGHT reduce production patternListComma ->

State 97:
nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma . LENS_PAREN_RIGHT [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On LENS_PAREN_RIGHT shift to state 98

State 98:
nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On UNDERSCORE reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On UINT8 reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On TVAR reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On TRUE reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On STRING reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On SEMICOLON reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On RPAREN reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On RBRACK reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On RBRACE reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On RARROW reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On NAME reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On LPAREN reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On LBRACK reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On LBRACE reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On INT64 reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On INT32 reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On INT reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On IEEE64 reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On IDENT reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On HASH reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On FALSE reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On EQUALS reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On COMMA reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On COLON_COLON reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On COLON reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On CHAR reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On BYTEARRAY reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT
-- On BAR reduce production nonTvarPattern2 -> LENS_PAREN_LEFT listPattern COMMA listPattern patternListComma LENS_PAREN_RIGHT

State 99:
ascriptionOrPattern -> pattern . [ RPAREN ]
-- On RPAREN reduce production ascriptionOrPattern -> pattern

State 100:
atomicPattern2 -> nonTvarPattern2 . [ UNDERSCORE UINT8 TVAR TRUE STRING RPAREN NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE COMMA COLON_COLON CHAR BYTEARRAY ]
nonTvarPattern -> nonTvarPattern2 . [ COLON ]
-- On UNDERSCORE reduce production atomicPattern2 -> nonTvarPattern2
-- On UINT8 reduce production atomicPattern2 -> nonTvarPattern2
-- On TVAR reduce production atomicPattern2 -> nonTvarPattern2
-- On TRUE reduce production atomicPattern2 -> nonTvarPattern2
-- On STRING reduce production atomicPattern2 -> nonTvarPattern2
-- On RPAREN reduce production atomicPattern2 -> nonTvarPattern2
-- On NAME reduce production atomicPattern2 -> nonTvarPattern2
-- On LPAREN_RPAREN reduce production atomicPattern2 -> nonTvarPattern2
-- On LPAREN reduce production atomicPattern2 -> nonTvarPattern2
-- On LENS_PAREN_LEFT reduce production atomicPattern2 -> nonTvarPattern2
-- On LBRACK reduce production atomicPattern2 -> nonTvarPattern2
-- On LBRACE reduce production atomicPattern2 -> nonTvarPattern2
-- On INT64 reduce production atomicPattern2 -> nonTvarPattern2
-- On INT32 reduce production atomicPattern2 -> nonTvarPattern2
-- On INT reduce production atomicPattern2 -> nonTvarPattern2
-- On IEEE64 reduce production atomicPattern2 -> nonTvarPattern2
-- On IDENT reduce production atomicPattern2 -> nonTvarPattern2
-- On HASH reduce production atomicPattern2 -> nonTvarPattern2
-- On FALSE reduce production atomicPattern2 -> nonTvarPattern2
-- On COMMA reduce production atomicPattern2 -> nonTvarPattern2
-- On COLON_COLON reduce production atomicPattern2 -> nonTvarPattern2
-- On COLON reduce production nonTvarPattern -> nonTvarPattern2
-- On CHAR reduce production atomicPattern2 -> nonTvarPattern2
-- On BYTEARRAY reduce production atomicPattern2 -> nonTvarPattern2

State 101:
ascriptionOrPattern -> nonTvarPattern . COLON typ refineOpt [ RPAREN ]
-- On COLON shift to state 102

State 102:
ascriptionOrPattern -> nonTvarPattern COLON . typ refineOpt [ RPAREN ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 311
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 103:
projectionLHS -> LBRACK . semiColonTermList RBRACK [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On semiColonTermList shift to state 304
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 306
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214
-- On RBRACK reduce production semiColonTermList ->

State 104:
refinementTerm -> LBRACE . recordExp RBRACE [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On recordExp shift to state 288
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 290

State 105:
atomicTerm -> BEGIN . term END [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 286
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 106:
noSeqTerm -> IF . noSeqTerm THEN noSeqTerm ELSE noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
noSeqTerm -> IF . noSeqTerm THEN noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 281
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 107:
aqual -> HASH . [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production aqual -> HASH
-- On UINT8 reduce production aqual -> HASH
-- On TVAR reduce production aqual -> HASH
-- On TRUE reduce production aqual -> HASH
-- On TILDE reduce production aqual -> HASH
-- On STRING reduce production aqual -> HASH
-- On PLUS_OP reduce production aqual -> HASH
-- On PERCENT_LBRACK reduce production aqual -> HASH
-- On NAME reduce production aqual -> HASH
-- On MINUS_OP reduce production aqual -> HASH
-- On LPAREN_RPAREN reduce production aqual -> HASH
-- On LPAREN reduce production aqual -> HASH
-- On LENS_PAREN_LEFT reduce production aqual -> HASH
-- On LBRACK_BAR reduce production aqual -> HASH
-- On LBRACK reduce production aqual -> HASH
-- On LBRACE reduce production aqual -> HASH
-- On INT64 reduce production aqual -> HASH
-- On INT32 reduce production aqual -> HASH
-- On INT reduce production aqual -> HASH
-- On IEEE64 reduce production aqual -> HASH
-- On IDENT reduce production aqual -> HASH
-- On FALSE reduce production aqual -> HASH
-- On CHAR reduce production aqual -> HASH
-- On BYTEARRAY reduce production aqual -> HASH
-- On BEGIN reduce production aqual -> HASH
-- On BANG_LBRACE reduce production aqual -> HASH
-- On BANG reduce production aqual -> HASH
-- On ASSERT reduce production aqual -> HASH

State 108:
noSeqTerm -> FUNCTION . firstPatternBranch patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On BAR shift to state 109
-- On maybeBar shift to state 110
-- On firstPatternBranch shift to state 273
-- On UNDERSCORE reduce production maybeBar ->
-- On UINT8 reduce production maybeBar ->
-- On TVAR reduce production maybeBar ->
-- On TRUE reduce production maybeBar ->
-- On STRING reduce production maybeBar ->
-- On NAME reduce production maybeBar ->
-- On LPAREN_RPAREN reduce production maybeBar ->
-- On LPAREN reduce production maybeBar ->
-- On LENS_PAREN_LEFT reduce production maybeBar ->
-- On LBRACK reduce production maybeBar ->
-- On LBRACE reduce production maybeBar ->
-- On INT64 reduce production maybeBar ->
-- On INT32 reduce production maybeBar ->
-- On INT reduce production maybeBar ->
-- On IEEE64 reduce production maybeBar ->
-- On IDENT reduce production maybeBar ->
-- On HASH reduce production maybeBar ->
-- On FALSE reduce production maybeBar ->
-- On CHAR reduce production maybeBar ->
-- On BYTEARRAY reduce production maybeBar ->

State 109:
maybeBar -> BAR . [ UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY ]
-- On UNDERSCORE reduce production maybeBar -> BAR
-- On UINT8 reduce production maybeBar -> BAR
-- On TVAR reduce production maybeBar -> BAR
-- On TRUE reduce production maybeBar -> BAR
-- On STRING reduce production maybeBar -> BAR
-- On NAME reduce production maybeBar -> BAR
-- On LPAREN_RPAREN reduce production maybeBar -> BAR
-- On LPAREN reduce production maybeBar -> BAR
-- On LENS_PAREN_LEFT reduce production maybeBar -> BAR
-- On LBRACK reduce production maybeBar -> BAR
-- On LBRACE reduce production maybeBar -> BAR
-- On INT64 reduce production maybeBar -> BAR
-- On INT32 reduce production maybeBar -> BAR
-- On INT reduce production maybeBar -> BAR
-- On IEEE64 reduce production maybeBar -> BAR
-- On IDENT reduce production maybeBar -> BAR
-- On HASH reduce production maybeBar -> BAR
-- On FALSE reduce production maybeBar -> BAR
-- On CHAR reduce production maybeBar -> BAR
-- On BYTEARRAY reduce production maybeBar -> BAR

State 110:
firstPatternBranch -> maybeBar . disjunctivePattern maybeWhen maybeFocusArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 111
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On ident shift to state 72
-- On disjunctivePattern shift to state 114
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 111:
disjunctivePattern -> pattern . [ WHEN SQUIGGLY_RARROW RARROW ]
disjunctivePattern -> pattern . BAR disjunctivePattern [ WHEN SQUIGGLY_RARROW RARROW ]
-- On BAR shift to state 112
-- On WHEN reduce production disjunctivePattern -> pattern
-- On SQUIGGLY_RARROW reduce production disjunctivePattern -> pattern
-- On RARROW reduce production disjunctivePattern -> pattern

State 112:
disjunctivePattern -> pattern BAR . disjunctivePattern [ WHEN SQUIGGLY_RARROW RARROW ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 111
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On ident shift to state 72
-- On disjunctivePattern shift to state 113
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 113:
disjunctivePattern -> pattern BAR disjunctivePattern . [ WHEN SQUIGGLY_RARROW RARROW ]
-- On WHEN reduce production disjunctivePattern -> pattern BAR disjunctivePattern
-- On SQUIGGLY_RARROW reduce production disjunctivePattern -> pattern BAR disjunctivePattern
-- On RARROW reduce production disjunctivePattern -> pattern BAR disjunctivePattern

State 114:
firstPatternBranch -> maybeBar disjunctivePattern . maybeWhen maybeFocusArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WHEN shift to state 115
-- On maybeWhen shift to state 154
-- On SQUIGGLY_RARROW reduce production maybeWhen ->
-- On RARROW reduce production maybeWhen ->

State 115:
maybeWhen -> WHEN . appTerm [ SQUIGGLY_RARROW RARROW ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 153

State 116:
projectionLHS -> BANG_LBRACE . commaTermList RBRACE [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On commaTermList shift to state 140
-- On atomicTerm shift to state 142
-- On appTerm shift to state 148
-- On RBRACE reduce production commaTermList ->

State 117:
atomicTerm -> BANG . atomicTerm [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 139

State 118:
atomicTerm -> ASSERT . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production atomicTerm -> ASSERT
-- On VAL reduce production atomicTerm -> ASSERT
-- On UNDERSCORE reduce production atomicTerm -> ASSERT
-- On UINT8 reduce production atomicTerm -> ASSERT
-- On TYP_APP_GREATER reduce production atomicTerm -> ASSERT
-- On TYPE reduce production atomicTerm -> ASSERT
-- On TVAR reduce production atomicTerm -> ASSERT
-- On TRUE reduce production atomicTerm -> ASSERT
-- On TOTAL reduce production atomicTerm -> ASSERT
-- On THEN reduce production atomicTerm -> ASSERT
-- On SUB_EFFECT reduce production atomicTerm -> ASSERT
-- On SUBTYPE reduce production atomicTerm -> ASSERT
-- On SUBKIND reduce production atomicTerm -> ASSERT
-- On STRING reduce production atomicTerm -> ASSERT
-- On STAR reduce production atomicTerm -> ASSERT
-- On SQUIGGLY_RARROW reduce production atomicTerm -> ASSERT
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> ASSERT
-- On SEMICOLON reduce production atomicTerm -> ASSERT
-- On RPAREN reduce production atomicTerm -> ASSERT
-- On RBRACK reduce production atomicTerm -> ASSERT
-- On RBRACE reduce production atomicTerm -> ASSERT
-- On RARROW reduce production atomicTerm -> ASSERT
-- On PRIVATE reduce production atomicTerm -> ASSERT
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> ASSERT
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> ASSERT
-- On PLUS_OP reduce production atomicTerm -> ASSERT
-- On PERCENT_LBRACK reduce production atomicTerm -> ASSERT
-- On OPEN reduce production atomicTerm -> ASSERT
-- On OPAQUE reduce production atomicTerm -> ASSERT
-- On NEW_EFFECT reduce production atomicTerm -> ASSERT
-- On NAME reduce production atomicTerm -> ASSERT
-- On MODULE reduce production atomicTerm -> ASSERT
-- On MINUS_OP reduce production atomicTerm -> ASSERT
-- On LPAREN_RPAREN reduce production atomicTerm -> ASSERT
-- On LPAREN reduce production atomicTerm -> ASSERT
-- On LOGIC reduce production atomicTerm -> ASSERT
-- On LET reduce production atomicTerm -> ASSERT
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> ASSERT
-- On LENS_PAREN_LEFT reduce production atomicTerm -> ASSERT
-- On LBRACK_BAR reduce production atomicTerm -> ASSERT
-- On LBRACK reduce production atomicTerm -> ASSERT
-- On LBRACE reduce production atomicTerm -> ASSERT
-- On KIND reduce production atomicTerm -> ASSERT
-- On INT64 reduce production atomicTerm -> ASSERT
-- On INT32 reduce production atomicTerm -> ASSERT
-- On INT reduce production atomicTerm -> ASSERT
-- On IN reduce production atomicTerm -> ASSERT
-- On IMPLIES reduce production atomicTerm -> ASSERT
-- On IFF reduce production atomicTerm -> ASSERT
-- On IEEE64 reduce production atomicTerm -> ASSERT
-- On IDENT reduce production atomicTerm -> ASSERT
-- On HASH reduce production atomicTerm -> ASSERT
-- On FALSE reduce production atomicTerm -> ASSERT
-- On EXCEPTION reduce production atomicTerm -> ASSERT
-- On EQUALS reduce production atomicTerm -> ASSERT
-- On EOF reduce production atomicTerm -> ASSERT
-- On END reduce production atomicTerm -> ASSERT
-- On ELSE reduce production atomicTerm -> ASSERT
-- On EFFECT reduce production atomicTerm -> ASSERT
-- On DIV_MOD_OP reduce production atomicTerm -> ASSERT
-- On DISJUNCTION reduce production atomicTerm -> ASSERT
-- On DEFAULT reduce production atomicTerm -> ASSERT
-- On CUSTOM_OP reduce production atomicTerm -> ASSERT
-- On CONJUNCTION reduce production atomicTerm -> ASSERT
-- On COMMA reduce production atomicTerm -> ASSERT
-- On COLON_EQUALS reduce production atomicTerm -> ASSERT
-- On COLON_COLON reduce production atomicTerm -> ASSERT
-- On CHAR reduce production atomicTerm -> ASSERT
-- On BYTEARRAY reduce production atomicTerm -> ASSERT
-- On BEGIN reduce production atomicTerm -> ASSERT
-- On BAR_RBRACK reduce production atomicTerm -> ASSERT
-- On BAR_BAR reduce production atomicTerm -> ASSERT
-- On BAR reduce production atomicTerm -> ASSERT
-- On BANG_LBRACE reduce production atomicTerm -> ASSERT
-- On BANG reduce production atomicTerm -> ASSERT
-- On ASSUME reduce production atomicTerm -> ASSERT
-- On ASSERT reduce production atomicTerm -> ASSERT
-- On AND reduce production atomicTerm -> ASSERT
-- On AMP_AMP reduce production atomicTerm -> ASSERT
-- On AMP reduce production atomicTerm -> ASSERT

State 119:
atomicTerm -> tvar . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production atomicTerm -> tvar
-- On VAL reduce production atomicTerm -> tvar
-- On UNDERSCORE reduce production atomicTerm -> tvar
-- On UINT8 reduce production atomicTerm -> tvar
-- On TYP_APP_GREATER reduce production atomicTerm -> tvar
-- On TYPE reduce production atomicTerm -> tvar
-- On TVAR reduce production atomicTerm -> tvar
-- On TRUE reduce production atomicTerm -> tvar
-- On TOTAL reduce production atomicTerm -> tvar
-- On THEN reduce production atomicTerm -> tvar
-- On SUB_EFFECT reduce production atomicTerm -> tvar
-- On SUBTYPE reduce production atomicTerm -> tvar
-- On SUBKIND reduce production atomicTerm -> tvar
-- On STRING reduce production atomicTerm -> tvar
-- On STAR reduce production atomicTerm -> tvar
-- On SQUIGGLY_RARROW reduce production atomicTerm -> tvar
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> tvar
-- On SEMICOLON reduce production atomicTerm -> tvar
-- On RPAREN reduce production atomicTerm -> tvar
-- On RBRACK reduce production atomicTerm -> tvar
-- On RBRACE reduce production atomicTerm -> tvar
-- On RARROW reduce production atomicTerm -> tvar
-- On PRIVATE reduce production atomicTerm -> tvar
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> tvar
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> tvar
-- On PLUS_OP reduce production atomicTerm -> tvar
-- On PERCENT_LBRACK reduce production atomicTerm -> tvar
-- On OPEN reduce production atomicTerm -> tvar
-- On OPAQUE reduce production atomicTerm -> tvar
-- On NEW_EFFECT reduce production atomicTerm -> tvar
-- On NAME reduce production atomicTerm -> tvar
-- On MODULE reduce production atomicTerm -> tvar
-- On MINUS_OP reduce production atomicTerm -> tvar
-- On LPAREN_RPAREN reduce production atomicTerm -> tvar
-- On LPAREN reduce production atomicTerm -> tvar
-- On LOGIC reduce production atomicTerm -> tvar
-- On LET reduce production atomicTerm -> tvar
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> tvar
-- On LENS_PAREN_LEFT reduce production atomicTerm -> tvar
-- On LBRACK_BAR reduce production atomicTerm -> tvar
-- On LBRACK reduce production atomicTerm -> tvar
-- On LBRACE reduce production atomicTerm -> tvar
-- On KIND reduce production atomicTerm -> tvar
-- On INT64 reduce production atomicTerm -> tvar
-- On INT32 reduce production atomicTerm -> tvar
-- On INT reduce production atomicTerm -> tvar
-- On IN reduce production atomicTerm -> tvar
-- On IMPLIES reduce production atomicTerm -> tvar
-- On IFF reduce production atomicTerm -> tvar
-- On IEEE64 reduce production atomicTerm -> tvar
-- On IDENT reduce production atomicTerm -> tvar
-- On HASH reduce production atomicTerm -> tvar
-- On FALSE reduce production atomicTerm -> tvar
-- On EXCEPTION reduce production atomicTerm -> tvar
-- On EQUALS reduce production atomicTerm -> tvar
-- On EOF reduce production atomicTerm -> tvar
-- On END reduce production atomicTerm -> tvar
-- On ELSE reduce production atomicTerm -> tvar
-- On EFFECT reduce production atomicTerm -> tvar
-- On DIV_MOD_OP reduce production atomicTerm -> tvar
-- On DISJUNCTION reduce production atomicTerm -> tvar
-- On DEFAULT reduce production atomicTerm -> tvar
-- On CUSTOM_OP reduce production atomicTerm -> tvar
-- On CONJUNCTION reduce production atomicTerm -> tvar
-- On COMMA reduce production atomicTerm -> tvar
-- On COLON_EQUALS reduce production atomicTerm -> tvar
-- On COLON_COLON reduce production atomicTerm -> tvar
-- On CHAR reduce production atomicTerm -> tvar
-- On BYTEARRAY reduce production atomicTerm -> tvar
-- On BEGIN reduce production atomicTerm -> tvar
-- On BAR_RBRACK reduce production atomicTerm -> tvar
-- On BAR_BAR reduce production atomicTerm -> tvar
-- On BAR reduce production atomicTerm -> tvar
-- On BANG_LBRACE reduce production atomicTerm -> tvar
-- On BANG reduce production atomicTerm -> tvar
-- On ASSUME reduce production atomicTerm -> tvar
-- On ASSERT reduce production atomicTerm -> tvar
-- On AND reduce production atomicTerm -> tvar
-- On AMP_AMP reduce production atomicTerm -> tvar
-- On AMP reduce production atomicTerm -> tvar

State 120:
atomicTerm -> projectionLHS . maybeFieldProjections [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On maybeFieldProjections shift to state 121
-- On WITH reduce production maybeFieldProjections ->
-- On VAL reduce production maybeFieldProjections ->
-- On UNDERSCORE reduce production maybeFieldProjections ->
-- On UINT8 reduce production maybeFieldProjections ->
-- On TYP_APP_GREATER reduce production maybeFieldProjections ->
-- On TYPE reduce production maybeFieldProjections ->
-- On TVAR reduce production maybeFieldProjections ->
-- On TRUE reduce production maybeFieldProjections ->
-- On TOTAL reduce production maybeFieldProjections ->
-- On THEN reduce production maybeFieldProjections ->
-- On SUB_EFFECT reduce production maybeFieldProjections ->
-- On SUBTYPE reduce production maybeFieldProjections ->
-- On SUBKIND reduce production maybeFieldProjections ->
-- On STRING reduce production maybeFieldProjections ->
-- On STAR reduce production maybeFieldProjections ->
-- On SQUIGGLY_RARROW reduce production maybeFieldProjections ->
-- On SEMICOLON_SEMICOLON reduce production maybeFieldProjections ->
-- On SEMICOLON reduce production maybeFieldProjections ->
-- On RPAREN reduce production maybeFieldProjections ->
-- On RBRACK reduce production maybeFieldProjections ->
-- On RBRACE reduce production maybeFieldProjections ->
-- On RARROW reduce production maybeFieldProjections ->
-- On PRIVATE reduce production maybeFieldProjections ->
-- On PRAGMA_SET_OPTIONS reduce production maybeFieldProjections ->
-- On PRAGMA_RESET_OPTIONS reduce production maybeFieldProjections ->
-- On PLUS_OP reduce production maybeFieldProjections ->
-- On PERCENT_LBRACK reduce production maybeFieldProjections ->
-- On OPEN reduce production maybeFieldProjections ->
-- On OPAQUE reduce production maybeFieldProjections ->
-- On NEW_EFFECT reduce production maybeFieldProjections ->
-- On NAME reduce production maybeFieldProjections ->
-- On MODULE reduce production maybeFieldProjections ->
-- On MINUS_OP reduce production maybeFieldProjections ->
-- On LPAREN_RPAREN reduce production maybeFieldProjections ->
-- On LPAREN reduce production maybeFieldProjections ->
-- On LOGIC reduce production maybeFieldProjections ->
-- On LET reduce production maybeFieldProjections ->
-- On LENS_PAREN_RIGHT reduce production maybeFieldProjections ->
-- On LENS_PAREN_LEFT reduce production maybeFieldProjections ->
-- On LBRACK_BAR reduce production maybeFieldProjections ->
-- On LBRACK reduce production maybeFieldProjections ->
-- On LBRACE reduce production maybeFieldProjections ->
-- On KIND reduce production maybeFieldProjections ->
-- On INT64 reduce production maybeFieldProjections ->
-- On INT32 reduce production maybeFieldProjections ->
-- On INT reduce production maybeFieldProjections ->
-- On IN reduce production maybeFieldProjections ->
-- On IMPLIES reduce production maybeFieldProjections ->
-- On IFF reduce production maybeFieldProjections ->
-- On IEEE64 reduce production maybeFieldProjections ->
-- On IDENT reduce production maybeFieldProjections ->
-- On HASH reduce production maybeFieldProjections ->
-- On FALSE reduce production maybeFieldProjections ->
-- On EXCEPTION reduce production maybeFieldProjections ->
-- On EQUALS reduce production maybeFieldProjections ->
-- On EOF reduce production maybeFieldProjections ->
-- On END reduce production maybeFieldProjections ->
-- On ELSE reduce production maybeFieldProjections ->
-- On EFFECT reduce production maybeFieldProjections ->
-- On DOT reduce production maybeFieldProjections ->
-- On DIV_MOD_OP reduce production maybeFieldProjections ->
-- On DISJUNCTION reduce production maybeFieldProjections ->
-- On DEFAULT reduce production maybeFieldProjections ->
-- On CUSTOM_OP reduce production maybeFieldProjections ->
-- On CONJUNCTION reduce production maybeFieldProjections ->
-- On COMMA reduce production maybeFieldProjections ->
-- On COLON_EQUALS reduce production maybeFieldProjections ->
-- On COLON_COLON reduce production maybeFieldProjections ->
-- On CHAR reduce production maybeFieldProjections ->
-- On BYTEARRAY reduce production maybeFieldProjections ->
-- On BEGIN reduce production maybeFieldProjections ->
-- On BAR_RBRACK reduce production maybeFieldProjections ->
-- On BAR_BAR reduce production maybeFieldProjections ->
-- On BAR reduce production maybeFieldProjections ->
-- On BANG_LBRACE reduce production maybeFieldProjections ->
-- On BANG reduce production maybeFieldProjections ->
-- On ASSUME reduce production maybeFieldProjections ->
-- On ASSERT reduce production maybeFieldProjections ->
-- On AND reduce production maybeFieldProjections ->
-- On AMP_AMP reduce production maybeFieldProjections ->
-- On AMP reduce production maybeFieldProjections ->

State 121:
atomicTerm -> projectionLHS maybeFieldProjections . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
maybeFieldProjections -> maybeFieldProjections . DOT ident [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On DOT shift to state 122
-- On WITH reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On VAL reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On UNDERSCORE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On UINT8 reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On TYP_APP_GREATER reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On TYPE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On TVAR reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On TRUE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On TOTAL reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On THEN reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On SUB_EFFECT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On SUBTYPE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On SUBKIND reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On STRING reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On STAR reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On SQUIGGLY_RARROW reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On SEMICOLON reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On RPAREN reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On RBRACK reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On RBRACE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On RARROW reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On PRIVATE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On PLUS_OP reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On PERCENT_LBRACK reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On OPEN reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On OPAQUE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On NEW_EFFECT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On NAME reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On MODULE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On MINUS_OP reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LPAREN_RPAREN reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LPAREN reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LOGIC reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LET reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LENS_PAREN_LEFT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LBRACK_BAR reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LBRACK reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On LBRACE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On KIND reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On INT64 reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On INT32 reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On INT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On IN reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On IMPLIES reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On IFF reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On IEEE64 reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On IDENT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On HASH reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On FALSE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On EXCEPTION reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On EQUALS reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On EOF reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On END reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On ELSE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On EFFECT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On DIV_MOD_OP reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On DISJUNCTION reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On DEFAULT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On CUSTOM_OP reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On CONJUNCTION reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On COMMA reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On COLON_EQUALS reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On COLON_COLON reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On CHAR reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On BYTEARRAY reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On BEGIN reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On BAR_RBRACK reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On BAR_BAR reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On BAR reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On BANG_LBRACE reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On BANG reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On ASSUME reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On ASSERT reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On AND reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On AMP_AMP reduce production atomicTerm -> projectionLHS maybeFieldProjections
-- On AMP reduce production atomicTerm -> projectionLHS maybeFieldProjections

State 122:
maybeFieldProjections -> maybeFieldProjections DOT . ident [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On IDENT shift to state 36
-- On ident shift to state 123

State 123:
maybeFieldProjections -> maybeFieldProjections DOT ident . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On VAL reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On UNDERSCORE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On UINT8 reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On TYP_APP_GREATER reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On TYPE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On TVAR reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On TRUE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On TOTAL reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On THEN reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On SUB_EFFECT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On SUBTYPE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On SUBKIND reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On STRING reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On STAR reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On SQUIGGLY_RARROW reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On SEMICOLON_SEMICOLON reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On SEMICOLON reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On RPAREN reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On RBRACK reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On RBRACE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On RARROW reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On PRIVATE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On PRAGMA_SET_OPTIONS reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On PRAGMA_RESET_OPTIONS reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On PLUS_OP reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On PERCENT_LBRACK reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On OPEN reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On OPAQUE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On NEW_EFFECT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On NAME reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On MODULE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On MINUS_OP reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LPAREN_RPAREN reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LPAREN reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LOGIC reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LET reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LENS_PAREN_RIGHT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LENS_PAREN_LEFT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LBRACK_BAR reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LBRACK reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On LBRACE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On KIND reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On INT64 reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On INT32 reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On INT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On IN reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On IMPLIES reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On IFF reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On IEEE64 reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On IDENT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On HASH reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On FALSE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On EXCEPTION reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On EQUALS reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On EOF reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On END reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On ELSE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On EFFECT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On DOT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On DIV_MOD_OP reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On DISJUNCTION reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On DEFAULT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On CUSTOM_OP reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On CONJUNCTION reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On COMMA reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On COLON_EQUALS reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On COLON_COLON reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On CHAR reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On BYTEARRAY reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On BEGIN reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On BAR_RBRACK reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On BAR_BAR reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On BAR reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On BANG_LBRACE reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On BANG reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On ASSUME reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On ASSERT reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On AND reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On AMP_AMP reduce production maybeFieldProjections -> maybeFieldProjections DOT ident
-- On AMP reduce production maybeFieldProjections -> maybeFieldProjections DOT ident

State 124:
eitherpath -> name . maybeMorePath [ WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On DOT shift to state 125
-- On maybeMorePath shift to state 128
-- On WITH reduce production maybeMorePath ->
-- On VAL reduce production maybeMorePath ->
-- On UNDERSCORE reduce production maybeMorePath ->
-- On UINT8 reduce production maybeMorePath ->
-- On TYP_APP_LESS reduce production maybeMorePath ->
-- On TYP_APP_GREATER reduce production maybeMorePath ->
-- On TYPE reduce production maybeMorePath ->
-- On TVAR reduce production maybeMorePath ->
-- On TRUE reduce production maybeMorePath ->
-- On TOTAL reduce production maybeMorePath ->
-- On THEN reduce production maybeMorePath ->
-- On SUB_EFFECT reduce production maybeMorePath ->
-- On SUBTYPE reduce production maybeMorePath ->
-- On SUBKIND reduce production maybeMorePath ->
-- On STRING reduce production maybeMorePath ->
-- On STAR reduce production maybeMorePath ->
-- On SQUIGGLY_RARROW reduce production maybeMorePath ->
-- On SEMICOLON_SEMICOLON reduce production maybeMorePath ->
-- On SEMICOLON reduce production maybeMorePath ->
-- On RPAREN reduce production maybeMorePath ->
-- On RBRACK reduce production maybeMorePath ->
-- On RBRACE reduce production maybeMorePath ->
-- On RARROW reduce production maybeMorePath ->
-- On PRIVATE reduce production maybeMorePath ->
-- On PRAGMA_SET_OPTIONS reduce production maybeMorePath ->
-- On PRAGMA_RESET_OPTIONS reduce production maybeMorePath ->
-- On PLUS_OP reduce production maybeMorePath ->
-- On PERCENT_LBRACK reduce production maybeMorePath ->
-- On OPEN reduce production maybeMorePath ->
-- On OPAQUE reduce production maybeMorePath ->
-- On NEW_EFFECT reduce production maybeMorePath ->
-- On NAME reduce production maybeMorePath ->
-- On MODULE reduce production maybeMorePath ->
-- On MINUS_OP reduce production maybeMorePath ->
-- On LPAREN_RPAREN reduce production maybeMorePath ->
-- On LPAREN reduce production maybeMorePath ->
-- On LOGIC reduce production maybeMorePath ->
-- On LET reduce production maybeMorePath ->
-- On LENS_PAREN_RIGHT reduce production maybeMorePath ->
-- On LENS_PAREN_LEFT reduce production maybeMorePath ->
-- On LBRACK_BAR reduce production maybeMorePath ->
-- On LBRACK reduce production maybeMorePath ->
-- On LBRACE reduce production maybeMorePath ->
-- On KIND reduce production maybeMorePath ->
-- On INT64 reduce production maybeMorePath ->
-- On INT32 reduce production maybeMorePath ->
-- On INT reduce production maybeMorePath ->
-- On IN reduce production maybeMorePath ->
-- On IMPLIES reduce production maybeMorePath ->
-- On IFF reduce production maybeMorePath ->
-- On IEEE64 reduce production maybeMorePath ->
-- On IDENT reduce production maybeMorePath ->
-- On HASH reduce production maybeMorePath ->
-- On FALSE reduce production maybeMorePath ->
-- On EXCEPTION reduce production maybeMorePath ->
-- On EQUALS reduce production maybeMorePath ->
-- On EOF reduce production maybeMorePath ->
-- On END reduce production maybeMorePath ->
-- On ELSE reduce production maybeMorePath ->
-- On EFFECT reduce production maybeMorePath ->
-- On DIV_MOD_OP reduce production maybeMorePath ->
-- On DISJUNCTION reduce production maybeMorePath ->
-- On DEFAULT reduce production maybeMorePath ->
-- On CUSTOM_OP reduce production maybeMorePath ->
-- On CONJUNCTION reduce production maybeMorePath ->
-- On COMMA reduce production maybeMorePath ->
-- On COLON_EQUALS reduce production maybeMorePath ->
-- On COLON_COLON reduce production maybeMorePath ->
-- On CHAR reduce production maybeMorePath ->
-- On BYTEARRAY reduce production maybeMorePath ->
-- On BEGIN reduce production maybeMorePath ->
-- On BAR_RBRACK reduce production maybeMorePath ->
-- On BAR_BAR reduce production maybeMorePath ->
-- On BAR reduce production maybeMorePath ->
-- On BANG_LBRACE reduce production maybeMorePath ->
-- On BANG reduce production maybeMorePath ->
-- On ASSUME reduce production maybeMorePath ->
-- On ASSERT reduce production maybeMorePath ->
-- On AND reduce production maybeMorePath ->
-- On AMP_AMP reduce production maybeMorePath ->
-- On AMP reduce production maybeMorePath ->

State 125:
maybeMorePath -> DOT . eitherpath [ WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 127

State 126:
eitherpath -> ident . [ WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production eitherpath -> ident
-- On VAL reduce production eitherpath -> ident
-- On UNDERSCORE reduce production eitherpath -> ident
-- On UINT8 reduce production eitherpath -> ident
-- On TYP_APP_LESS reduce production eitherpath -> ident
-- On TYP_APP_GREATER reduce production eitherpath -> ident
-- On TYPE reduce production eitherpath -> ident
-- On TVAR reduce production eitherpath -> ident
-- On TRUE reduce production eitherpath -> ident
-- On TOTAL reduce production eitherpath -> ident
-- On THEN reduce production eitherpath -> ident
-- On SUB_EFFECT reduce production eitherpath -> ident
-- On SUBTYPE reduce production eitherpath -> ident
-- On SUBKIND reduce production eitherpath -> ident
-- On STRING reduce production eitherpath -> ident
-- On STAR reduce production eitherpath -> ident
-- On SQUIGGLY_RARROW reduce production eitherpath -> ident
-- On SEMICOLON_SEMICOLON reduce production eitherpath -> ident
-- On SEMICOLON reduce production eitherpath -> ident
-- On RPAREN reduce production eitherpath -> ident
-- On RBRACK reduce production eitherpath -> ident
-- On RBRACE reduce production eitherpath -> ident
-- On RARROW reduce production eitherpath -> ident
-- On PRIVATE reduce production eitherpath -> ident
-- On PRAGMA_SET_OPTIONS reduce production eitherpath -> ident
-- On PRAGMA_RESET_OPTIONS reduce production eitherpath -> ident
-- On PLUS_OP reduce production eitherpath -> ident
-- On PERCENT_LBRACK reduce production eitherpath -> ident
-- On OPEN reduce production eitherpath -> ident
-- On OPAQUE reduce production eitherpath -> ident
-- On NEW_EFFECT reduce production eitherpath -> ident
-- On NAME reduce production eitherpath -> ident
-- On MODULE reduce production eitherpath -> ident
-- On MINUS_OP reduce production eitherpath -> ident
-- On LPAREN_RPAREN reduce production eitherpath -> ident
-- On LPAREN reduce production eitherpath -> ident
-- On LOGIC reduce production eitherpath -> ident
-- On LET reduce production eitherpath -> ident
-- On LENS_PAREN_RIGHT reduce production eitherpath -> ident
-- On LENS_PAREN_LEFT reduce production eitherpath -> ident
-- On LBRACK_BAR reduce production eitherpath -> ident
-- On LBRACK reduce production eitherpath -> ident
-- On LBRACE reduce production eitherpath -> ident
-- On KIND reduce production eitherpath -> ident
-- On INT64 reduce production eitherpath -> ident
-- On INT32 reduce production eitherpath -> ident
-- On INT reduce production eitherpath -> ident
-- On IN reduce production eitherpath -> ident
-- On IMPLIES reduce production eitherpath -> ident
-- On IFF reduce production eitherpath -> ident
-- On IEEE64 reduce production eitherpath -> ident
-- On IDENT reduce production eitherpath -> ident
-- On HASH reduce production eitherpath -> ident
-- On FALSE reduce production eitherpath -> ident
-- On EXCEPTION reduce production eitherpath -> ident
-- On EQUALS reduce production eitherpath -> ident
-- On EOF reduce production eitherpath -> ident
-- On END reduce production eitherpath -> ident
-- On ELSE reduce production eitherpath -> ident
-- On EFFECT reduce production eitherpath -> ident
-- On DOT reduce production eitherpath -> ident
-- On DIV_MOD_OP reduce production eitherpath -> ident
-- On DISJUNCTION reduce production eitherpath -> ident
-- On DEFAULT reduce production eitherpath -> ident
-- On CUSTOM_OP reduce production eitherpath -> ident
-- On CONJUNCTION reduce production eitherpath -> ident
-- On COMMA reduce production eitherpath -> ident
-- On COLON_EQUALS reduce production eitherpath -> ident
-- On COLON_COLON reduce production eitherpath -> ident
-- On CHAR reduce production eitherpath -> ident
-- On BYTEARRAY reduce production eitherpath -> ident
-- On BEGIN reduce production eitherpath -> ident
-- On BAR_RBRACK reduce production eitherpath -> ident
-- On BAR_BAR reduce production eitherpath -> ident
-- On BAR reduce production eitherpath -> ident
-- On BANG_LBRACE reduce production eitherpath -> ident
-- On BANG reduce production eitherpath -> ident
-- On ASSUME reduce production eitherpath -> ident
-- On ASSERT reduce production eitherpath -> ident
-- On AND reduce production eitherpath -> ident
-- On AMP_AMP reduce production eitherpath -> ident
-- On AMP reduce production eitherpath -> ident

State 127:
maybeMorePath -> DOT eitherpath . [ WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production maybeMorePath -> DOT eitherpath
-- On VAL reduce production maybeMorePath -> DOT eitherpath
-- On UNDERSCORE reduce production maybeMorePath -> DOT eitherpath
-- On UINT8 reduce production maybeMorePath -> DOT eitherpath
-- On TYP_APP_LESS reduce production maybeMorePath -> DOT eitherpath
-- On TYP_APP_GREATER reduce production maybeMorePath -> DOT eitherpath
-- On TYPE reduce production maybeMorePath -> DOT eitherpath
-- On TVAR reduce production maybeMorePath -> DOT eitherpath
-- On TRUE reduce production maybeMorePath -> DOT eitherpath
-- On TOTAL reduce production maybeMorePath -> DOT eitherpath
-- On THEN reduce production maybeMorePath -> DOT eitherpath
-- On SUB_EFFECT reduce production maybeMorePath -> DOT eitherpath
-- On SUBTYPE reduce production maybeMorePath -> DOT eitherpath
-- On SUBKIND reduce production maybeMorePath -> DOT eitherpath
-- On STRING reduce production maybeMorePath -> DOT eitherpath
-- On STAR reduce production maybeMorePath -> DOT eitherpath
-- On SQUIGGLY_RARROW reduce production maybeMorePath -> DOT eitherpath
-- On SEMICOLON_SEMICOLON reduce production maybeMorePath -> DOT eitherpath
-- On SEMICOLON reduce production maybeMorePath -> DOT eitherpath
-- On RPAREN reduce production maybeMorePath -> DOT eitherpath
-- On RBRACK reduce production maybeMorePath -> DOT eitherpath
-- On RBRACE reduce production maybeMorePath -> DOT eitherpath
-- On RARROW reduce production maybeMorePath -> DOT eitherpath
-- On PRIVATE reduce production maybeMorePath -> DOT eitherpath
-- On PRAGMA_SET_OPTIONS reduce production maybeMorePath -> DOT eitherpath
-- On PRAGMA_RESET_OPTIONS reduce production maybeMorePath -> DOT eitherpath
-- On PLUS_OP reduce production maybeMorePath -> DOT eitherpath
-- On PERCENT_LBRACK reduce production maybeMorePath -> DOT eitherpath
-- On OPEN reduce production maybeMorePath -> DOT eitherpath
-- On OPAQUE reduce production maybeMorePath -> DOT eitherpath
-- On NEW_EFFECT reduce production maybeMorePath -> DOT eitherpath
-- On NAME reduce production maybeMorePath -> DOT eitherpath
-- On MODULE reduce production maybeMorePath -> DOT eitherpath
-- On MINUS_OP reduce production maybeMorePath -> DOT eitherpath
-- On LPAREN_RPAREN reduce production maybeMorePath -> DOT eitherpath
-- On LPAREN reduce production maybeMorePath -> DOT eitherpath
-- On LOGIC reduce production maybeMorePath -> DOT eitherpath
-- On LET reduce production maybeMorePath -> DOT eitherpath
-- On LENS_PAREN_RIGHT reduce production maybeMorePath -> DOT eitherpath
-- On LENS_PAREN_LEFT reduce production maybeMorePath -> DOT eitherpath
-- On LBRACK_BAR reduce production maybeMorePath -> DOT eitherpath
-- On LBRACK reduce production maybeMorePath -> DOT eitherpath
-- On LBRACE reduce production maybeMorePath -> DOT eitherpath
-- On KIND reduce production maybeMorePath -> DOT eitherpath
-- On INT64 reduce production maybeMorePath -> DOT eitherpath
-- On INT32 reduce production maybeMorePath -> DOT eitherpath
-- On INT reduce production maybeMorePath -> DOT eitherpath
-- On IN reduce production maybeMorePath -> DOT eitherpath
-- On IMPLIES reduce production maybeMorePath -> DOT eitherpath
-- On IFF reduce production maybeMorePath -> DOT eitherpath
-- On IEEE64 reduce production maybeMorePath -> DOT eitherpath
-- On IDENT reduce production maybeMorePath -> DOT eitherpath
-- On HASH reduce production maybeMorePath -> DOT eitherpath
-- On FALSE reduce production maybeMorePath -> DOT eitherpath
-- On EXCEPTION reduce production maybeMorePath -> DOT eitherpath
-- On EQUALS reduce production maybeMorePath -> DOT eitherpath
-- On EOF reduce production maybeMorePath -> DOT eitherpath
-- On END reduce production maybeMorePath -> DOT eitherpath
-- On ELSE reduce production maybeMorePath -> DOT eitherpath
-- On EFFECT reduce production maybeMorePath -> DOT eitherpath
-- On DOT reduce production maybeMorePath -> DOT eitherpath
-- On DIV_MOD_OP reduce production maybeMorePath -> DOT eitherpath
-- On DISJUNCTION reduce production maybeMorePath -> DOT eitherpath
-- On DEFAULT reduce production maybeMorePath -> DOT eitherpath
-- On CUSTOM_OP reduce production maybeMorePath -> DOT eitherpath
-- On CONJUNCTION reduce production maybeMorePath -> DOT eitherpath
-- On COMMA reduce production maybeMorePath -> DOT eitherpath
-- On COLON_EQUALS reduce production maybeMorePath -> DOT eitherpath
-- On COLON_COLON reduce production maybeMorePath -> DOT eitherpath
-- On CHAR reduce production maybeMorePath -> DOT eitherpath
-- On BYTEARRAY reduce production maybeMorePath -> DOT eitherpath
-- On BEGIN reduce production maybeMorePath -> DOT eitherpath
-- On BAR_RBRACK reduce production maybeMorePath -> DOT eitherpath
-- On BAR_BAR reduce production maybeMorePath -> DOT eitherpath
-- On BAR reduce production maybeMorePath -> DOT eitherpath
-- On BANG_LBRACE reduce production maybeMorePath -> DOT eitherpath
-- On BANG reduce production maybeMorePath -> DOT eitherpath
-- On ASSUME reduce production maybeMorePath -> DOT eitherpath
-- On ASSERT reduce production maybeMorePath -> DOT eitherpath
-- On AND reduce production maybeMorePath -> DOT eitherpath
-- On AMP_AMP reduce production maybeMorePath -> DOT eitherpath
-- On AMP reduce production maybeMorePath -> DOT eitherpath

State 128:
eitherpath -> name maybeMorePath . [ WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production eitherpath -> name maybeMorePath
-- On VAL reduce production eitherpath -> name maybeMorePath
-- On UNDERSCORE reduce production eitherpath -> name maybeMorePath
-- On UINT8 reduce production eitherpath -> name maybeMorePath
-- On TYP_APP_LESS reduce production eitherpath -> name maybeMorePath
-- On TYP_APP_GREATER reduce production eitherpath -> name maybeMorePath
-- On TYPE reduce production eitherpath -> name maybeMorePath
-- On TVAR reduce production eitherpath -> name maybeMorePath
-- On TRUE reduce production eitherpath -> name maybeMorePath
-- On TOTAL reduce production eitherpath -> name maybeMorePath
-- On THEN reduce production eitherpath -> name maybeMorePath
-- On SUB_EFFECT reduce production eitherpath -> name maybeMorePath
-- On SUBTYPE reduce production eitherpath -> name maybeMorePath
-- On SUBKIND reduce production eitherpath -> name maybeMorePath
-- On STRING reduce production eitherpath -> name maybeMorePath
-- On STAR reduce production eitherpath -> name maybeMorePath
-- On SQUIGGLY_RARROW reduce production eitherpath -> name maybeMorePath
-- On SEMICOLON_SEMICOLON reduce production eitherpath -> name maybeMorePath
-- On SEMICOLON reduce production eitherpath -> name maybeMorePath
-- On RPAREN reduce production eitherpath -> name maybeMorePath
-- On RBRACK reduce production eitherpath -> name maybeMorePath
-- On RBRACE reduce production eitherpath -> name maybeMorePath
-- On RARROW reduce production eitherpath -> name maybeMorePath
-- On PRIVATE reduce production eitherpath -> name maybeMorePath
-- On PRAGMA_SET_OPTIONS reduce production eitherpath -> name maybeMorePath
-- On PRAGMA_RESET_OPTIONS reduce production eitherpath -> name maybeMorePath
-- On PLUS_OP reduce production eitherpath -> name maybeMorePath
-- On PERCENT_LBRACK reduce production eitherpath -> name maybeMorePath
-- On OPEN reduce production eitherpath -> name maybeMorePath
-- On OPAQUE reduce production eitherpath -> name maybeMorePath
-- On NEW_EFFECT reduce production eitherpath -> name maybeMorePath
-- On NAME reduce production eitherpath -> name maybeMorePath
-- On MODULE reduce production eitherpath -> name maybeMorePath
-- On MINUS_OP reduce production eitherpath -> name maybeMorePath
-- On LPAREN_RPAREN reduce production eitherpath -> name maybeMorePath
-- On LPAREN reduce production eitherpath -> name maybeMorePath
-- On LOGIC reduce production eitherpath -> name maybeMorePath
-- On LET reduce production eitherpath -> name maybeMorePath
-- On LENS_PAREN_RIGHT reduce production eitherpath -> name maybeMorePath
-- On LENS_PAREN_LEFT reduce production eitherpath -> name maybeMorePath
-- On LBRACK_BAR reduce production eitherpath -> name maybeMorePath
-- On LBRACK reduce production eitherpath -> name maybeMorePath
-- On LBRACE reduce production eitherpath -> name maybeMorePath
-- On KIND reduce production eitherpath -> name maybeMorePath
-- On INT64 reduce production eitherpath -> name maybeMorePath
-- On INT32 reduce production eitherpath -> name maybeMorePath
-- On INT reduce production eitherpath -> name maybeMorePath
-- On IN reduce production eitherpath -> name maybeMorePath
-- On IMPLIES reduce production eitherpath -> name maybeMorePath
-- On IFF reduce production eitherpath -> name maybeMorePath
-- On IEEE64 reduce production eitherpath -> name maybeMorePath
-- On IDENT reduce production eitherpath -> name maybeMorePath
-- On HASH reduce production eitherpath -> name maybeMorePath
-- On FALSE reduce production eitherpath -> name maybeMorePath
-- On EXCEPTION reduce production eitherpath -> name maybeMorePath
-- On EQUALS reduce production eitherpath -> name maybeMorePath
-- On EOF reduce production eitherpath -> name maybeMorePath
-- On END reduce production eitherpath -> name maybeMorePath
-- On ELSE reduce production eitherpath -> name maybeMorePath
-- On EFFECT reduce production eitherpath -> name maybeMorePath
-- On DOT reduce production eitherpath -> name maybeMorePath
-- On DIV_MOD_OP reduce production eitherpath -> name maybeMorePath
-- On DISJUNCTION reduce production eitherpath -> name maybeMorePath
-- On DEFAULT reduce production eitherpath -> name maybeMorePath
-- On CUSTOM_OP reduce production eitherpath -> name maybeMorePath
-- On CONJUNCTION reduce production eitherpath -> name maybeMorePath
-- On COMMA reduce production eitherpath -> name maybeMorePath
-- On COLON_EQUALS reduce production eitherpath -> name maybeMorePath
-- On COLON_COLON reduce production eitherpath -> name maybeMorePath
-- On CHAR reduce production eitherpath -> name maybeMorePath
-- On BYTEARRAY reduce production eitherpath -> name maybeMorePath
-- On BEGIN reduce production eitherpath -> name maybeMorePath
-- On BAR_RBRACK reduce production eitherpath -> name maybeMorePath
-- On BAR_BAR reduce production eitherpath -> name maybeMorePath
-- On BAR reduce production eitherpath -> name maybeMorePath
-- On BANG_LBRACE reduce production eitherpath -> name maybeMorePath
-- On BANG reduce production eitherpath -> name maybeMorePath
-- On ASSUME reduce production eitherpath -> name maybeMorePath
-- On ASSERT reduce production eitherpath -> name maybeMorePath
-- On AND reduce production eitherpath -> name maybeMorePath
-- On AMP_AMP reduce production eitherpath -> name maybeMorePath
-- On AMP reduce production eitherpath -> name maybeMorePath

State 129:
eitherQname -> eitherpath . [ WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production eitherQname -> eitherpath
-- On VAL reduce production eitherQname -> eitherpath
-- On UNDERSCORE reduce production eitherQname -> eitherpath
-- On UINT8 reduce production eitherQname -> eitherpath
-- On TYP_APP_LESS reduce production eitherQname -> eitherpath
-- On TYP_APP_GREATER reduce production eitherQname -> eitherpath
-- On TYPE reduce production eitherQname -> eitherpath
-- On TVAR reduce production eitherQname -> eitherpath
-- On TRUE reduce production eitherQname -> eitherpath
-- On TOTAL reduce production eitherQname -> eitherpath
-- On THEN reduce production eitherQname -> eitherpath
-- On SUB_EFFECT reduce production eitherQname -> eitherpath
-- On SUBTYPE reduce production eitherQname -> eitherpath
-- On SUBKIND reduce production eitherQname -> eitherpath
-- On STRING reduce production eitherQname -> eitherpath
-- On STAR reduce production eitherQname -> eitherpath
-- On SQUIGGLY_RARROW reduce production eitherQname -> eitherpath
-- On SEMICOLON_SEMICOLON reduce production eitherQname -> eitherpath
-- On SEMICOLON reduce production eitherQname -> eitherpath
-- On RPAREN reduce production eitherQname -> eitherpath
-- On RBRACK reduce production eitherQname -> eitherpath
-- On RBRACE reduce production eitherQname -> eitherpath
-- On RARROW reduce production eitherQname -> eitherpath
-- On PRIVATE reduce production eitherQname -> eitherpath
-- On PRAGMA_SET_OPTIONS reduce production eitherQname -> eitherpath
-- On PRAGMA_RESET_OPTIONS reduce production eitherQname -> eitherpath
-- On PLUS_OP reduce production eitherQname -> eitherpath
-- On PERCENT_LBRACK reduce production eitherQname -> eitherpath
-- On OPEN reduce production eitherQname -> eitherpath
-- On OPAQUE reduce production eitherQname -> eitherpath
-- On NEW_EFFECT reduce production eitherQname -> eitherpath
-- On NAME reduce production eitherQname -> eitherpath
-- On MODULE reduce production eitherQname -> eitherpath
-- On MINUS_OP reduce production eitherQname -> eitherpath
-- On LPAREN_RPAREN reduce production eitherQname -> eitherpath
-- On LPAREN reduce production eitherQname -> eitherpath
-- On LOGIC reduce production eitherQname -> eitherpath
-- On LET reduce production eitherQname -> eitherpath
-- On LENS_PAREN_RIGHT reduce production eitherQname -> eitherpath
-- On LENS_PAREN_LEFT reduce production eitherQname -> eitherpath
-- On LBRACK_BAR reduce production eitherQname -> eitherpath
-- On LBRACK reduce production eitherQname -> eitherpath
-- On LBRACE reduce production eitherQname -> eitherpath
-- On KIND reduce production eitherQname -> eitherpath
-- On INT64 reduce production eitherQname -> eitherpath
-- On INT32 reduce production eitherQname -> eitherpath
-- On INT reduce production eitherQname -> eitherpath
-- On IN reduce production eitherQname -> eitherpath
-- On IMPLIES reduce production eitherQname -> eitherpath
-- On IFF reduce production eitherQname -> eitherpath
-- On IEEE64 reduce production eitherQname -> eitherpath
-- On IDENT reduce production eitherQname -> eitherpath
-- On HASH reduce production eitherQname -> eitherpath
-- On FALSE reduce production eitherQname -> eitherpath
-- On EXCEPTION reduce production eitherQname -> eitherpath
-- On EQUALS reduce production eitherQname -> eitherpath
-- On EOF reduce production eitherQname -> eitherpath
-- On END reduce production eitherQname -> eitherpath
-- On ELSE reduce production eitherQname -> eitherpath
-- On EFFECT reduce production eitherQname -> eitherpath
-- On DOT reduce production eitherQname -> eitherpath
-- On DIV_MOD_OP reduce production eitherQname -> eitherpath
-- On DISJUNCTION reduce production eitherQname -> eitherpath
-- On DEFAULT reduce production eitherQname -> eitherpath
-- On CUSTOM_OP reduce production eitherQname -> eitherpath
-- On CONJUNCTION reduce production eitherQname -> eitherpath
-- On COMMA reduce production eitherQname -> eitherpath
-- On COLON_EQUALS reduce production eitherQname -> eitherpath
-- On COLON_COLON reduce production eitherQname -> eitherpath
-- On CHAR reduce production eitherQname -> eitherpath
-- On BYTEARRAY reduce production eitherQname -> eitherpath
-- On BEGIN reduce production eitherQname -> eitherpath
-- On BAR_RBRACK reduce production eitherQname -> eitherpath
-- On BAR_BAR reduce production eitherQname -> eitherpath
-- On BAR reduce production eitherQname -> eitherpath
-- On BANG_LBRACE reduce production eitherQname -> eitherpath
-- On BANG reduce production eitherQname -> eitherpath
-- On ASSUME reduce production eitherQname -> eitherpath
-- On ASSERT reduce production eitherQname -> eitherpath
-- On AND reduce production eitherQname -> eitherpath
-- On AMP_AMP reduce production eitherQname -> eitherpath
-- On AMP reduce production eitherQname -> eitherpath

State 130:
projectionLHS -> eitherQname . maybeInsts [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On TYP_APP_LESS shift to state 131
-- On maybeInsts shift to state 138
-- On WITH reduce production maybeInsts ->
-- On VAL reduce production maybeInsts ->
-- On UNDERSCORE reduce production maybeInsts ->
-- On UINT8 reduce production maybeInsts ->
-- On TYP_APP_GREATER reduce production maybeInsts ->
-- On TYPE reduce production maybeInsts ->
-- On TVAR reduce production maybeInsts ->
-- On TRUE reduce production maybeInsts ->
-- On TOTAL reduce production maybeInsts ->
-- On THEN reduce production maybeInsts ->
-- On SUB_EFFECT reduce production maybeInsts ->
-- On SUBTYPE reduce production maybeInsts ->
-- On SUBKIND reduce production maybeInsts ->
-- On STRING reduce production maybeInsts ->
-- On STAR reduce production maybeInsts ->
-- On SQUIGGLY_RARROW reduce production maybeInsts ->
-- On SEMICOLON_SEMICOLON reduce production maybeInsts ->
-- On SEMICOLON reduce production maybeInsts ->
-- On RPAREN reduce production maybeInsts ->
-- On RBRACK reduce production maybeInsts ->
-- On RBRACE reduce production maybeInsts ->
-- On RARROW reduce production maybeInsts ->
-- On PRIVATE reduce production maybeInsts ->
-- On PRAGMA_SET_OPTIONS reduce production maybeInsts ->
-- On PRAGMA_RESET_OPTIONS reduce production maybeInsts ->
-- On PLUS_OP reduce production maybeInsts ->
-- On PERCENT_LBRACK reduce production maybeInsts ->
-- On OPEN reduce production maybeInsts ->
-- On OPAQUE reduce production maybeInsts ->
-- On NEW_EFFECT reduce production maybeInsts ->
-- On NAME reduce production maybeInsts ->
-- On MODULE reduce production maybeInsts ->
-- On MINUS_OP reduce production maybeInsts ->
-- On LPAREN_RPAREN reduce production maybeInsts ->
-- On LPAREN reduce production maybeInsts ->
-- On LOGIC reduce production maybeInsts ->
-- On LET reduce production maybeInsts ->
-- On LENS_PAREN_RIGHT reduce production maybeInsts ->
-- On LENS_PAREN_LEFT reduce production maybeInsts ->
-- On LBRACK_BAR reduce production maybeInsts ->
-- On LBRACK reduce production maybeInsts ->
-- On LBRACE reduce production maybeInsts ->
-- On KIND reduce production maybeInsts ->
-- On INT64 reduce production maybeInsts ->
-- On INT32 reduce production maybeInsts ->
-- On INT reduce production maybeInsts ->
-- On IN reduce production maybeInsts ->
-- On IMPLIES reduce production maybeInsts ->
-- On IFF reduce production maybeInsts ->
-- On IEEE64 reduce production maybeInsts ->
-- On IDENT reduce production maybeInsts ->
-- On HASH reduce production maybeInsts ->
-- On FALSE reduce production maybeInsts ->
-- On EXCEPTION reduce production maybeInsts ->
-- On EQUALS reduce production maybeInsts ->
-- On EOF reduce production maybeInsts ->
-- On END reduce production maybeInsts ->
-- On ELSE reduce production maybeInsts ->
-- On EFFECT reduce production maybeInsts ->
-- On DOT reduce production maybeInsts ->
-- On DIV_MOD_OP reduce production maybeInsts ->
-- On DISJUNCTION reduce production maybeInsts ->
-- On DEFAULT reduce production maybeInsts ->
-- On CUSTOM_OP reduce production maybeInsts ->
-- On CONJUNCTION reduce production maybeInsts ->
-- On COMMA reduce production maybeInsts ->
-- On COLON_EQUALS reduce production maybeInsts ->
-- On COLON_COLON reduce production maybeInsts ->
-- On CHAR reduce production maybeInsts ->
-- On BYTEARRAY reduce production maybeInsts ->
-- On BEGIN reduce production maybeInsts ->
-- On BAR_RBRACK reduce production maybeInsts ->
-- On BAR_BAR reduce production maybeInsts ->
-- On BAR reduce production maybeInsts ->
-- On BANG_LBRACE reduce production maybeInsts ->
-- On BANG reduce production maybeInsts ->
-- On ASSUME reduce production maybeInsts ->
-- On ASSERT reduce production maybeInsts ->
-- On AND reduce production maybeInsts ->
-- On AMP_AMP reduce production maybeInsts ->
-- On AMP reduce production maybeInsts ->

State 131:
maybeInsts -> TYP_APP_LESS . targs TYP_APP_GREATER [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On targs shift to state 132
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 135

State 132:
maybeInsts -> TYP_APP_LESS targs . TYP_APP_GREATER [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On TYP_APP_GREATER shift to state 133

State 133:
maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On VAL reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On UNDERSCORE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On UINT8 reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On TYP_APP_GREATER reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On TYPE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On TVAR reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On TRUE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On TOTAL reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On THEN reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On SUB_EFFECT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On SUBTYPE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On SUBKIND reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On STRING reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On STAR reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On SQUIGGLY_RARROW reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On SEMICOLON_SEMICOLON reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On SEMICOLON reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On RPAREN reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On RBRACK reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On RBRACE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On RARROW reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On PRIVATE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On PRAGMA_SET_OPTIONS reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On PRAGMA_RESET_OPTIONS reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On PLUS_OP reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On PERCENT_LBRACK reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On OPEN reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On OPAQUE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On NEW_EFFECT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On NAME reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On MODULE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On MINUS_OP reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LPAREN_RPAREN reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LPAREN reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LOGIC reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LET reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LENS_PAREN_RIGHT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LENS_PAREN_LEFT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LBRACK_BAR reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LBRACK reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On LBRACE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On KIND reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On INT64 reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On INT32 reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On INT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On IN reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On IMPLIES reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On IFF reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On IEEE64 reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On IDENT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On HASH reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On FALSE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On EXCEPTION reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On EQUALS reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On EOF reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On END reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On ELSE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On EFFECT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On DOT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On DIV_MOD_OP reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On DISJUNCTION reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On DEFAULT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On CUSTOM_OP reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On CONJUNCTION reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On COMMA reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On COLON_EQUALS reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On COLON_COLON reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On CHAR reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On BYTEARRAY reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On BEGIN reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On BAR_RBRACK reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On BAR_BAR reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On BAR reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On BANG_LBRACE reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On BANG reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On ASSUME reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On ASSERT reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On AND reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On AMP_AMP reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER
-- On AMP reduce production maybeInsts -> TYP_APP_LESS targs TYP_APP_GREATER

State 134:
atomicTerm -> constant . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production atomicTerm -> constant
-- On VAL reduce production atomicTerm -> constant
-- On UNDERSCORE reduce production atomicTerm -> constant
-- On UINT8 reduce production atomicTerm -> constant
-- On TYP_APP_GREATER reduce production atomicTerm -> constant
-- On TYPE reduce production atomicTerm -> constant
-- On TVAR reduce production atomicTerm -> constant
-- On TRUE reduce production atomicTerm -> constant
-- On TOTAL reduce production atomicTerm -> constant
-- On THEN reduce production atomicTerm -> constant
-- On SUB_EFFECT reduce production atomicTerm -> constant
-- On SUBTYPE reduce production atomicTerm -> constant
-- On SUBKIND reduce production atomicTerm -> constant
-- On STRING reduce production atomicTerm -> constant
-- On STAR reduce production atomicTerm -> constant
-- On SQUIGGLY_RARROW reduce production atomicTerm -> constant
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> constant
-- On SEMICOLON reduce production atomicTerm -> constant
-- On RPAREN reduce production atomicTerm -> constant
-- On RBRACK reduce production atomicTerm -> constant
-- On RBRACE reduce production atomicTerm -> constant
-- On RARROW reduce production atomicTerm -> constant
-- On PRIVATE reduce production atomicTerm -> constant
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> constant
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> constant
-- On PLUS_OP reduce production atomicTerm -> constant
-- On PERCENT_LBRACK reduce production atomicTerm -> constant
-- On OPEN reduce production atomicTerm -> constant
-- On OPAQUE reduce production atomicTerm -> constant
-- On NEW_EFFECT reduce production atomicTerm -> constant
-- On NAME reduce production atomicTerm -> constant
-- On MODULE reduce production atomicTerm -> constant
-- On MINUS_OP reduce production atomicTerm -> constant
-- On LPAREN_RPAREN reduce production atomicTerm -> constant
-- On LPAREN reduce production atomicTerm -> constant
-- On LOGIC reduce production atomicTerm -> constant
-- On LET reduce production atomicTerm -> constant
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> constant
-- On LENS_PAREN_LEFT reduce production atomicTerm -> constant
-- On LBRACK_BAR reduce production atomicTerm -> constant
-- On LBRACK reduce production atomicTerm -> constant
-- On LBRACE reduce production atomicTerm -> constant
-- On KIND reduce production atomicTerm -> constant
-- On INT64 reduce production atomicTerm -> constant
-- On INT32 reduce production atomicTerm -> constant
-- On INT reduce production atomicTerm -> constant
-- On IN reduce production atomicTerm -> constant
-- On IMPLIES reduce production atomicTerm -> constant
-- On IFF reduce production atomicTerm -> constant
-- On IEEE64 reduce production atomicTerm -> constant
-- On IDENT reduce production atomicTerm -> constant
-- On HASH reduce production atomicTerm -> constant
-- On FALSE reduce production atomicTerm -> constant
-- On EXCEPTION reduce production atomicTerm -> constant
-- On EQUALS reduce production atomicTerm -> constant
-- On EOF reduce production atomicTerm -> constant
-- On END reduce production atomicTerm -> constant
-- On ELSE reduce production atomicTerm -> constant
-- On EFFECT reduce production atomicTerm -> constant
-- On DIV_MOD_OP reduce production atomicTerm -> constant
-- On DISJUNCTION reduce production atomicTerm -> constant
-- On DEFAULT reduce production atomicTerm -> constant
-- On CUSTOM_OP reduce production atomicTerm -> constant
-- On CONJUNCTION reduce production atomicTerm -> constant
-- On COMMA reduce production atomicTerm -> constant
-- On COLON_EQUALS reduce production atomicTerm -> constant
-- On COLON_COLON reduce production atomicTerm -> constant
-- On CHAR reduce production atomicTerm -> constant
-- On BYTEARRAY reduce production atomicTerm -> constant
-- On BEGIN reduce production atomicTerm -> constant
-- On BAR_RBRACK reduce production atomicTerm -> constant
-- On BAR_BAR reduce production atomicTerm -> constant
-- On BAR reduce production atomicTerm -> constant
-- On BANG_LBRACE reduce production atomicTerm -> constant
-- On BANG reduce production atomicTerm -> constant
-- On ASSUME reduce production atomicTerm -> constant
-- On ASSERT reduce production atomicTerm -> constant
-- On AND reduce production atomicTerm -> constant
-- On AMP_AMP reduce production atomicTerm -> constant
-- On AMP reduce production atomicTerm -> constant

State 135:
targs -> atomicTerm . [ TYP_APP_GREATER ]
targs -> atomicTerm . COMMA targs [ TYP_APP_GREATER ]
-- On COMMA shift to state 136
-- On TYP_APP_GREATER reduce production targs -> atomicTerm

State 136:
targs -> atomicTerm COMMA . targs [ TYP_APP_GREATER ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On targs shift to state 137
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 135

State 137:
targs -> atomicTerm COMMA targs . [ TYP_APP_GREATER ]
-- On TYP_APP_GREATER reduce production targs -> atomicTerm COMMA targs

State 138:
projectionLHS -> eitherQname maybeInsts . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production projectionLHS -> eitherQname maybeInsts
-- On VAL reduce production projectionLHS -> eitherQname maybeInsts
-- On UNDERSCORE reduce production projectionLHS -> eitherQname maybeInsts
-- On UINT8 reduce production projectionLHS -> eitherQname maybeInsts
-- On TYP_APP_GREATER reduce production projectionLHS -> eitherQname maybeInsts
-- On TYPE reduce production projectionLHS -> eitherQname maybeInsts
-- On TVAR reduce production projectionLHS -> eitherQname maybeInsts
-- On TRUE reduce production projectionLHS -> eitherQname maybeInsts
-- On TOTAL reduce production projectionLHS -> eitherQname maybeInsts
-- On THEN reduce production projectionLHS -> eitherQname maybeInsts
-- On SUB_EFFECT reduce production projectionLHS -> eitherQname maybeInsts
-- On SUBTYPE reduce production projectionLHS -> eitherQname maybeInsts
-- On SUBKIND reduce production projectionLHS -> eitherQname maybeInsts
-- On STRING reduce production projectionLHS -> eitherQname maybeInsts
-- On STAR reduce production projectionLHS -> eitherQname maybeInsts
-- On SQUIGGLY_RARROW reduce production projectionLHS -> eitherQname maybeInsts
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> eitherQname maybeInsts
-- On SEMICOLON reduce production projectionLHS -> eitherQname maybeInsts
-- On RPAREN reduce production projectionLHS -> eitherQname maybeInsts
-- On RBRACK reduce production projectionLHS -> eitherQname maybeInsts
-- On RBRACE reduce production projectionLHS -> eitherQname maybeInsts
-- On RARROW reduce production projectionLHS -> eitherQname maybeInsts
-- On PRIVATE reduce production projectionLHS -> eitherQname maybeInsts
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> eitherQname maybeInsts
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> eitherQname maybeInsts
-- On PLUS_OP reduce production projectionLHS -> eitherQname maybeInsts
-- On PERCENT_LBRACK reduce production projectionLHS -> eitherQname maybeInsts
-- On OPEN reduce production projectionLHS -> eitherQname maybeInsts
-- On OPAQUE reduce production projectionLHS -> eitherQname maybeInsts
-- On NEW_EFFECT reduce production projectionLHS -> eitherQname maybeInsts
-- On NAME reduce production projectionLHS -> eitherQname maybeInsts
-- On MODULE reduce production projectionLHS -> eitherQname maybeInsts
-- On MINUS_OP reduce production projectionLHS -> eitherQname maybeInsts
-- On LPAREN_RPAREN reduce production projectionLHS -> eitherQname maybeInsts
-- On LPAREN reduce production projectionLHS -> eitherQname maybeInsts
-- On LOGIC reduce production projectionLHS -> eitherQname maybeInsts
-- On LET reduce production projectionLHS -> eitherQname maybeInsts
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> eitherQname maybeInsts
-- On LENS_PAREN_LEFT reduce production projectionLHS -> eitherQname maybeInsts
-- On LBRACK_BAR reduce production projectionLHS -> eitherQname maybeInsts
-- On LBRACK reduce production projectionLHS -> eitherQname maybeInsts
-- On LBRACE reduce production projectionLHS -> eitherQname maybeInsts
-- On KIND reduce production projectionLHS -> eitherQname maybeInsts
-- On INT64 reduce production projectionLHS -> eitherQname maybeInsts
-- On INT32 reduce production projectionLHS -> eitherQname maybeInsts
-- On INT reduce production projectionLHS -> eitherQname maybeInsts
-- On IN reduce production projectionLHS -> eitherQname maybeInsts
-- On IMPLIES reduce production projectionLHS -> eitherQname maybeInsts
-- On IFF reduce production projectionLHS -> eitherQname maybeInsts
-- On IEEE64 reduce production projectionLHS -> eitherQname maybeInsts
-- On IDENT reduce production projectionLHS -> eitherQname maybeInsts
-- On HASH reduce production projectionLHS -> eitherQname maybeInsts
-- On FALSE reduce production projectionLHS -> eitherQname maybeInsts
-- On EXCEPTION reduce production projectionLHS -> eitherQname maybeInsts
-- On EQUALS reduce production projectionLHS -> eitherQname maybeInsts
-- On EOF reduce production projectionLHS -> eitherQname maybeInsts
-- On END reduce production projectionLHS -> eitherQname maybeInsts
-- On ELSE reduce production projectionLHS -> eitherQname maybeInsts
-- On EFFECT reduce production projectionLHS -> eitherQname maybeInsts
-- On DOT reduce production projectionLHS -> eitherQname maybeInsts
-- On DIV_MOD_OP reduce production projectionLHS -> eitherQname maybeInsts
-- On DISJUNCTION reduce production projectionLHS -> eitherQname maybeInsts
-- On DEFAULT reduce production projectionLHS -> eitherQname maybeInsts
-- On CUSTOM_OP reduce production projectionLHS -> eitherQname maybeInsts
-- On CONJUNCTION reduce production projectionLHS -> eitherQname maybeInsts
-- On COMMA reduce production projectionLHS -> eitherQname maybeInsts
-- On COLON_EQUALS reduce production projectionLHS -> eitherQname maybeInsts
-- On COLON_COLON reduce production projectionLHS -> eitherQname maybeInsts
-- On CHAR reduce production projectionLHS -> eitherQname maybeInsts
-- On BYTEARRAY reduce production projectionLHS -> eitherQname maybeInsts
-- On BEGIN reduce production projectionLHS -> eitherQname maybeInsts
-- On BAR_RBRACK reduce production projectionLHS -> eitherQname maybeInsts
-- On BAR_BAR reduce production projectionLHS -> eitherQname maybeInsts
-- On BAR reduce production projectionLHS -> eitherQname maybeInsts
-- On BANG_LBRACE reduce production projectionLHS -> eitherQname maybeInsts
-- On BANG reduce production projectionLHS -> eitherQname maybeInsts
-- On ASSUME reduce production projectionLHS -> eitherQname maybeInsts
-- On ASSERT reduce production projectionLHS -> eitherQname maybeInsts
-- On AND reduce production projectionLHS -> eitherQname maybeInsts
-- On AMP_AMP reduce production projectionLHS -> eitherQname maybeInsts
-- On AMP reduce production projectionLHS -> eitherQname maybeInsts

State 139:
atomicTerm -> BANG atomicTerm . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production atomicTerm -> BANG atomicTerm
-- On VAL reduce production atomicTerm -> BANG atomicTerm
-- On UNDERSCORE reduce production atomicTerm -> BANG atomicTerm
-- On UINT8 reduce production atomicTerm -> BANG atomicTerm
-- On TYP_APP_GREATER reduce production atomicTerm -> BANG atomicTerm
-- On TYPE reduce production atomicTerm -> BANG atomicTerm
-- On TVAR reduce production atomicTerm -> BANG atomicTerm
-- On TRUE reduce production atomicTerm -> BANG atomicTerm
-- On TOTAL reduce production atomicTerm -> BANG atomicTerm
-- On THEN reduce production atomicTerm -> BANG atomicTerm
-- On SUB_EFFECT reduce production atomicTerm -> BANG atomicTerm
-- On SUBTYPE reduce production atomicTerm -> BANG atomicTerm
-- On SUBKIND reduce production atomicTerm -> BANG atomicTerm
-- On STRING reduce production atomicTerm -> BANG atomicTerm
-- On STAR reduce production atomicTerm -> BANG atomicTerm
-- On SQUIGGLY_RARROW reduce production atomicTerm -> BANG atomicTerm
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> BANG atomicTerm
-- On SEMICOLON reduce production atomicTerm -> BANG atomicTerm
-- On RPAREN reduce production atomicTerm -> BANG atomicTerm
-- On RBRACK reduce production atomicTerm -> BANG atomicTerm
-- On RBRACE reduce production atomicTerm -> BANG atomicTerm
-- On RARROW reduce production atomicTerm -> BANG atomicTerm
-- On PRIVATE reduce production atomicTerm -> BANG atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> BANG atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> BANG atomicTerm
-- On PLUS_OP reduce production atomicTerm -> BANG atomicTerm
-- On PERCENT_LBRACK reduce production atomicTerm -> BANG atomicTerm
-- On OPEN reduce production atomicTerm -> BANG atomicTerm
-- On OPAQUE reduce production atomicTerm -> BANG atomicTerm
-- On NEW_EFFECT reduce production atomicTerm -> BANG atomicTerm
-- On NAME reduce production atomicTerm -> BANG atomicTerm
-- On MODULE reduce production atomicTerm -> BANG atomicTerm
-- On MINUS_OP reduce production atomicTerm -> BANG atomicTerm
-- On LPAREN_RPAREN reduce production atomicTerm -> BANG atomicTerm
-- On LPAREN reduce production atomicTerm -> BANG atomicTerm
-- On LOGIC reduce production atomicTerm -> BANG atomicTerm
-- On LET reduce production atomicTerm -> BANG atomicTerm
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> BANG atomicTerm
-- On LENS_PAREN_LEFT reduce production atomicTerm -> BANG atomicTerm
-- On LBRACK_BAR reduce production atomicTerm -> BANG atomicTerm
-- On LBRACK reduce production atomicTerm -> BANG atomicTerm
-- On LBRACE reduce production atomicTerm -> BANG atomicTerm
-- On KIND reduce production atomicTerm -> BANG atomicTerm
-- On INT64 reduce production atomicTerm -> BANG atomicTerm
-- On INT32 reduce production atomicTerm -> BANG atomicTerm
-- On INT reduce production atomicTerm -> BANG atomicTerm
-- On IN reduce production atomicTerm -> BANG atomicTerm
-- On IMPLIES reduce production atomicTerm -> BANG atomicTerm
-- On IFF reduce production atomicTerm -> BANG atomicTerm
-- On IEEE64 reduce production atomicTerm -> BANG atomicTerm
-- On IDENT reduce production atomicTerm -> BANG atomicTerm
-- On HASH reduce production atomicTerm -> BANG atomicTerm
-- On FALSE reduce production atomicTerm -> BANG atomicTerm
-- On EXCEPTION reduce production atomicTerm -> BANG atomicTerm
-- On EQUALS reduce production atomicTerm -> BANG atomicTerm
-- On EOF reduce production atomicTerm -> BANG atomicTerm
-- On END reduce production atomicTerm -> BANG atomicTerm
-- On ELSE reduce production atomicTerm -> BANG atomicTerm
-- On EFFECT reduce production atomicTerm -> BANG atomicTerm
-- On DIV_MOD_OP reduce production atomicTerm -> BANG atomicTerm
-- On DISJUNCTION reduce production atomicTerm -> BANG atomicTerm
-- On DEFAULT reduce production atomicTerm -> BANG atomicTerm
-- On CUSTOM_OP reduce production atomicTerm -> BANG atomicTerm
-- On CONJUNCTION reduce production atomicTerm -> BANG atomicTerm
-- On COMMA reduce production atomicTerm -> BANG atomicTerm
-- On COLON_EQUALS reduce production atomicTerm -> BANG atomicTerm
-- On COLON_COLON reduce production atomicTerm -> BANG atomicTerm
-- On CHAR reduce production atomicTerm -> BANG atomicTerm
-- On BYTEARRAY reduce production atomicTerm -> BANG atomicTerm
-- On BEGIN reduce production atomicTerm -> BANG atomicTerm
-- On BAR_RBRACK reduce production atomicTerm -> BANG atomicTerm
-- On BAR_BAR reduce production atomicTerm -> BANG atomicTerm
-- On BAR reduce production atomicTerm -> BANG atomicTerm
-- On BANG_LBRACE reduce production atomicTerm -> BANG atomicTerm
-- On BANG reduce production atomicTerm -> BANG atomicTerm
-- On ASSUME reduce production atomicTerm -> BANG atomicTerm
-- On ASSERT reduce production atomicTerm -> BANG atomicTerm
-- On AND reduce production atomicTerm -> BANG atomicTerm
-- On AMP_AMP reduce production atomicTerm -> BANG atomicTerm
-- On AMP reduce production atomicTerm -> BANG atomicTerm

State 140:
projectionLHS -> BANG_LBRACE commaTermList . RBRACE [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On RBRACE shift to state 141

State 141:
projectionLHS -> BANG_LBRACE commaTermList RBRACE . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On VAL reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On UNDERSCORE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On UINT8 reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On TYP_APP_GREATER reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On TYPE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On TVAR reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On TRUE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On TOTAL reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On THEN reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On SUB_EFFECT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On SUBTYPE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On SUBKIND reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On STRING reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On STAR reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On SQUIGGLY_RARROW reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On SEMICOLON reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On RPAREN reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On RBRACK reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On RBRACE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On RARROW reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On PRIVATE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On PLUS_OP reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On PERCENT_LBRACK reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On OPEN reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On OPAQUE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On NEW_EFFECT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On NAME reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On MODULE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On MINUS_OP reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LPAREN_RPAREN reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LPAREN reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LOGIC reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LET reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LENS_PAREN_LEFT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LBRACK_BAR reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LBRACK reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On LBRACE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On KIND reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On INT64 reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On INT32 reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On INT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On IN reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On IMPLIES reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On IFF reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On IEEE64 reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On IDENT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On HASH reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On FALSE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On EXCEPTION reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On EQUALS reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On EOF reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On END reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On ELSE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On EFFECT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On DOT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On DIV_MOD_OP reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On DISJUNCTION reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On DEFAULT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On CUSTOM_OP reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On CONJUNCTION reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On COMMA reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On COLON_EQUALS reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On COLON_COLON reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On CHAR reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On BYTEARRAY reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On BEGIN reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On BAR_RBRACK reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On BAR_BAR reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On BAR reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On BANG_LBRACE reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On BANG reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On ASSUME reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On ASSERT reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On AND reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On AMP_AMP reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE
-- On AMP reduce production projectionLHS -> BANG_LBRACE commaTermList RBRACE

State 142:
appTerm -> atomicTerm . hashAtomicTerms [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On HASH shift to state 143
-- On maybeHash shift to state 144
-- On hashAtomicTerms shift to state 147
-- On WITH reduce production hashAtomicTerms ->
-- On VAL reduce production hashAtomicTerms ->
-- On UNDERSCORE reduce production maybeHash ->
-- On UINT8 reduce production maybeHash ->
-- On TYPE reduce production hashAtomicTerms ->
-- On TVAR reduce production maybeHash ->
-- On TRUE reduce production maybeHash ->
-- On TOTAL reduce production hashAtomicTerms ->
-- On THEN reduce production hashAtomicTerms ->
-- On SUB_EFFECT reduce production hashAtomicTerms ->
-- On SUBTYPE reduce production hashAtomicTerms ->
-- On SUBKIND reduce production hashAtomicTerms ->
-- On STRING reduce production maybeHash ->
-- On STAR reduce production hashAtomicTerms ->
-- On SQUIGGLY_RARROW reduce production hashAtomicTerms ->
-- On SEMICOLON_SEMICOLON reduce production hashAtomicTerms ->
-- On SEMICOLON reduce production hashAtomicTerms ->
-- On RPAREN reduce production hashAtomicTerms ->
-- On RBRACK reduce production hashAtomicTerms ->
-- On RBRACE reduce production hashAtomicTerms ->
-- On RARROW reduce production hashAtomicTerms ->
-- On PRIVATE reduce production hashAtomicTerms ->
-- On PRAGMA_SET_OPTIONS reduce production hashAtomicTerms ->
-- On PRAGMA_RESET_OPTIONS reduce production hashAtomicTerms ->
-- On PLUS_OP reduce production hashAtomicTerms ->
-- On PERCENT_LBRACK reduce production maybeHash ->
-- On OPEN reduce production hashAtomicTerms ->
-- On OPAQUE reduce production hashAtomicTerms ->
-- On NEW_EFFECT reduce production hashAtomicTerms ->
-- On NAME reduce production maybeHash ->
-- On MODULE reduce production hashAtomicTerms ->
-- On MINUS_OP reduce production hashAtomicTerms ->
-- On LPAREN_RPAREN reduce production maybeHash ->
-- On LPAREN reduce production maybeHash ->
-- On LOGIC reduce production hashAtomicTerms ->
-- On LET reduce production hashAtomicTerms ->
-- On LENS_PAREN_RIGHT reduce production hashAtomicTerms ->
-- On LENS_PAREN_LEFT reduce production maybeHash ->
-- On LBRACK_BAR reduce production maybeHash ->
-- On LBRACK reduce production maybeHash ->
-- On LBRACE reduce production hashAtomicTerms ->
-- On KIND reduce production hashAtomicTerms ->
-- On INT64 reduce production maybeHash ->
-- On INT32 reduce production maybeHash ->
-- On INT reduce production maybeHash ->
-- On IN reduce production hashAtomicTerms ->
-- On IMPLIES reduce production hashAtomicTerms ->
-- On IFF reduce production hashAtomicTerms ->
-- On IEEE64 reduce production maybeHash ->
-- On IDENT reduce production maybeHash ->
-- On FALSE reduce production maybeHash ->
-- On EXCEPTION reduce production hashAtomicTerms ->
-- On EQUALS reduce production hashAtomicTerms ->
-- On EOF reduce production hashAtomicTerms ->
-- On END reduce production hashAtomicTerms ->
-- On ELSE reduce production hashAtomicTerms ->
-- On EFFECT reduce production hashAtomicTerms ->
-- On DIV_MOD_OP reduce production hashAtomicTerms ->
-- On DISJUNCTION reduce production hashAtomicTerms ->
-- On DEFAULT reduce production hashAtomicTerms ->
-- On CUSTOM_OP reduce production hashAtomicTerms ->
-- On CONJUNCTION reduce production hashAtomicTerms ->
-- On COMMA reduce production hashAtomicTerms ->
-- On COLON_EQUALS reduce production hashAtomicTerms ->
-- On COLON_COLON reduce production hashAtomicTerms ->
-- On CHAR reduce production maybeHash ->
-- On BYTEARRAY reduce production maybeHash ->
-- On BEGIN reduce production maybeHash ->
-- On BAR_RBRACK reduce production hashAtomicTerms ->
-- On BAR_BAR reduce production hashAtomicTerms ->
-- On BAR reduce production hashAtomicTerms ->
-- On BANG_LBRACE reduce production maybeHash ->
-- On BANG reduce production maybeHash ->
-- On ASSUME reduce production hashAtomicTerms ->
-- On ASSERT reduce production maybeHash ->
-- On AND reduce production hashAtomicTerms ->
-- On AMP_AMP reduce production hashAtomicTerms ->
-- On AMP reduce production hashAtomicTerms ->

State 143:
maybeHash -> HASH . [ UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production maybeHash -> HASH
-- On UINT8 reduce production maybeHash -> HASH
-- On TVAR reduce production maybeHash -> HASH
-- On TRUE reduce production maybeHash -> HASH
-- On STRING reduce production maybeHash -> HASH
-- On PERCENT_LBRACK reduce production maybeHash -> HASH
-- On NAME reduce production maybeHash -> HASH
-- On LPAREN_RPAREN reduce production maybeHash -> HASH
-- On LPAREN reduce production maybeHash -> HASH
-- On LENS_PAREN_LEFT reduce production maybeHash -> HASH
-- On LBRACK_BAR reduce production maybeHash -> HASH
-- On LBRACK reduce production maybeHash -> HASH
-- On INT64 reduce production maybeHash -> HASH
-- On INT32 reduce production maybeHash -> HASH
-- On INT reduce production maybeHash -> HASH
-- On IEEE64 reduce production maybeHash -> HASH
-- On IDENT reduce production maybeHash -> HASH
-- On FALSE reduce production maybeHash -> HASH
-- On CHAR reduce production maybeHash -> HASH
-- On BYTEARRAY reduce production maybeHash -> HASH
-- On BEGIN reduce production maybeHash -> HASH
-- On BANG_LBRACE reduce production maybeHash -> HASH
-- On BANG reduce production maybeHash -> HASH
-- On ASSERT reduce production maybeHash -> HASH

State 144:
hashAtomicTerms -> maybeHash . atomicTerm hashAtomicTerms [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 145

State 145:
hashAtomicTerms -> maybeHash atomicTerm . hashAtomicTerms [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On HASH shift to state 143
-- On maybeHash shift to state 144
-- On hashAtomicTerms shift to state 146
-- On WITH reduce production hashAtomicTerms ->
-- On VAL reduce production hashAtomicTerms ->
-- On UNDERSCORE reduce production maybeHash ->
-- On UINT8 reduce production maybeHash ->
-- On TYPE reduce production hashAtomicTerms ->
-- On TVAR reduce production maybeHash ->
-- On TRUE reduce production maybeHash ->
-- On TOTAL reduce production hashAtomicTerms ->
-- On THEN reduce production hashAtomicTerms ->
-- On SUB_EFFECT reduce production hashAtomicTerms ->
-- On SUBTYPE reduce production hashAtomicTerms ->
-- On SUBKIND reduce production hashAtomicTerms ->
-- On STRING reduce production maybeHash ->
-- On STAR reduce production hashAtomicTerms ->
-- On SQUIGGLY_RARROW reduce production hashAtomicTerms ->
-- On SEMICOLON_SEMICOLON reduce production hashAtomicTerms ->
-- On SEMICOLON reduce production hashAtomicTerms ->
-- On RPAREN reduce production hashAtomicTerms ->
-- On RBRACK reduce production hashAtomicTerms ->
-- On RBRACE reduce production hashAtomicTerms ->
-- On RARROW reduce production hashAtomicTerms ->
-- On PRIVATE reduce production hashAtomicTerms ->
-- On PRAGMA_SET_OPTIONS reduce production hashAtomicTerms ->
-- On PRAGMA_RESET_OPTIONS reduce production hashAtomicTerms ->
-- On PLUS_OP reduce production hashAtomicTerms ->
-- On PERCENT_LBRACK reduce production maybeHash ->
-- On OPEN reduce production hashAtomicTerms ->
-- On OPAQUE reduce production hashAtomicTerms ->
-- On NEW_EFFECT reduce production hashAtomicTerms ->
-- On NAME reduce production maybeHash ->
-- On MODULE reduce production hashAtomicTerms ->
-- On MINUS_OP reduce production hashAtomicTerms ->
-- On LPAREN_RPAREN reduce production maybeHash ->
-- On LPAREN reduce production maybeHash ->
-- On LOGIC reduce production hashAtomicTerms ->
-- On LET reduce production hashAtomicTerms ->
-- On LENS_PAREN_RIGHT reduce production hashAtomicTerms ->
-- On LENS_PAREN_LEFT reduce production maybeHash ->
-- On LBRACK_BAR reduce production maybeHash ->
-- On LBRACK reduce production maybeHash ->
-- On LBRACE reduce production hashAtomicTerms ->
-- On KIND reduce production hashAtomicTerms ->
-- On INT64 reduce production maybeHash ->
-- On INT32 reduce production maybeHash ->
-- On INT reduce production maybeHash ->
-- On IN reduce production hashAtomicTerms ->
-- On IMPLIES reduce production hashAtomicTerms ->
-- On IFF reduce production hashAtomicTerms ->
-- On IEEE64 reduce production maybeHash ->
-- On IDENT reduce production maybeHash ->
-- On FALSE reduce production maybeHash ->
-- On EXCEPTION reduce production hashAtomicTerms ->
-- On EQUALS reduce production hashAtomicTerms ->
-- On EOF reduce production hashAtomicTerms ->
-- On END reduce production hashAtomicTerms ->
-- On ELSE reduce production hashAtomicTerms ->
-- On EFFECT reduce production hashAtomicTerms ->
-- On DIV_MOD_OP reduce production hashAtomicTerms ->
-- On DISJUNCTION reduce production hashAtomicTerms ->
-- On DEFAULT reduce production hashAtomicTerms ->
-- On CUSTOM_OP reduce production hashAtomicTerms ->
-- On CONJUNCTION reduce production hashAtomicTerms ->
-- On COMMA reduce production hashAtomicTerms ->
-- On COLON_EQUALS reduce production hashAtomicTerms ->
-- On COLON_COLON reduce production hashAtomicTerms ->
-- On CHAR reduce production maybeHash ->
-- On BYTEARRAY reduce production maybeHash ->
-- On BEGIN reduce production maybeHash ->
-- On BAR_RBRACK reduce production hashAtomicTerms ->
-- On BAR_BAR reduce production hashAtomicTerms ->
-- On BAR reduce production hashAtomicTerms ->
-- On BANG_LBRACE reduce production maybeHash ->
-- On BANG reduce production maybeHash ->
-- On ASSUME reduce production hashAtomicTerms ->
-- On ASSERT reduce production maybeHash ->
-- On AND reduce production hashAtomicTerms ->
-- On AMP_AMP reduce production hashAtomicTerms ->
-- On AMP reduce production hashAtomicTerms ->

State 146:
hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On VAL reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On TYPE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On TOTAL reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On THEN reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On SUB_EFFECT reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On SUBTYPE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On SUBKIND reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On STAR reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On SQUIGGLY_RARROW reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On SEMICOLON_SEMICOLON reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On SEMICOLON reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On RPAREN reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On RBRACK reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On RBRACE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On RARROW reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On PRIVATE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On PRAGMA_SET_OPTIONS reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On PRAGMA_RESET_OPTIONS reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On PLUS_OP reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On OPEN reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On OPAQUE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On NEW_EFFECT reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On MODULE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On MINUS_OP reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On LOGIC reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On LET reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On LENS_PAREN_RIGHT reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On LBRACE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On KIND reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On IN reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On IMPLIES reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On IFF reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On EXCEPTION reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On EQUALS reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On EOF reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On END reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On ELSE reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On EFFECT reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On DIV_MOD_OP reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On DISJUNCTION reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On DEFAULT reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On CUSTOM_OP reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On CONJUNCTION reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On COMMA reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On COLON_EQUALS reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On COLON_COLON reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On BAR_RBRACK reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On BAR_BAR reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On BAR reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On ASSUME reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On AND reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On AMP_AMP reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms
-- On AMP reduce production hashAtomicTerms -> maybeHash atomicTerm hashAtomicTerms

State 147:
appTerm -> atomicTerm hashAtomicTerms . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production appTerm -> atomicTerm hashAtomicTerms
-- On VAL reduce production appTerm -> atomicTerm hashAtomicTerms
-- On TYPE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On TOTAL reduce production appTerm -> atomicTerm hashAtomicTerms
-- On THEN reduce production appTerm -> atomicTerm hashAtomicTerms
-- On SUB_EFFECT reduce production appTerm -> atomicTerm hashAtomicTerms
-- On SUBTYPE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On SUBKIND reduce production appTerm -> atomicTerm hashAtomicTerms
-- On STAR reduce production appTerm -> atomicTerm hashAtomicTerms
-- On SQUIGGLY_RARROW reduce production appTerm -> atomicTerm hashAtomicTerms
-- On SEMICOLON_SEMICOLON reduce production appTerm -> atomicTerm hashAtomicTerms
-- On SEMICOLON reduce production appTerm -> atomicTerm hashAtomicTerms
-- On RPAREN reduce production appTerm -> atomicTerm hashAtomicTerms
-- On RBRACK reduce production appTerm -> atomicTerm hashAtomicTerms
-- On RBRACE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On RARROW reduce production appTerm -> atomicTerm hashAtomicTerms
-- On PRIVATE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On PRAGMA_SET_OPTIONS reduce production appTerm -> atomicTerm hashAtomicTerms
-- On PRAGMA_RESET_OPTIONS reduce production appTerm -> atomicTerm hashAtomicTerms
-- On PLUS_OP reduce production appTerm -> atomicTerm hashAtomicTerms
-- On OPEN reduce production appTerm -> atomicTerm hashAtomicTerms
-- On OPAQUE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On NEW_EFFECT reduce production appTerm -> atomicTerm hashAtomicTerms
-- On MODULE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On MINUS_OP reduce production appTerm -> atomicTerm hashAtomicTerms
-- On LOGIC reduce production appTerm -> atomicTerm hashAtomicTerms
-- On LET reduce production appTerm -> atomicTerm hashAtomicTerms
-- On LENS_PAREN_RIGHT reduce production appTerm -> atomicTerm hashAtomicTerms
-- On LBRACE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On KIND reduce production appTerm -> atomicTerm hashAtomicTerms
-- On IN reduce production appTerm -> atomicTerm hashAtomicTerms
-- On IMPLIES reduce production appTerm -> atomicTerm hashAtomicTerms
-- On IFF reduce production appTerm -> atomicTerm hashAtomicTerms
-- On EXCEPTION reduce production appTerm -> atomicTerm hashAtomicTerms
-- On EQUALS reduce production appTerm -> atomicTerm hashAtomicTerms
-- On EOF reduce production appTerm -> atomicTerm hashAtomicTerms
-- On END reduce production appTerm -> atomicTerm hashAtomicTerms
-- On ELSE reduce production appTerm -> atomicTerm hashAtomicTerms
-- On EFFECT reduce production appTerm -> atomicTerm hashAtomicTerms
-- On DIV_MOD_OP reduce production appTerm -> atomicTerm hashAtomicTerms
-- On DISJUNCTION reduce production appTerm -> atomicTerm hashAtomicTerms
-- On DEFAULT reduce production appTerm -> atomicTerm hashAtomicTerms
-- On CUSTOM_OP reduce production appTerm -> atomicTerm hashAtomicTerms
-- On CONJUNCTION reduce production appTerm -> atomicTerm hashAtomicTerms
-- On COMMA reduce production appTerm -> atomicTerm hashAtomicTerms
-- On COLON_EQUALS reduce production appTerm -> atomicTerm hashAtomicTerms
-- On COLON_COLON reduce production appTerm -> atomicTerm hashAtomicTerms
-- On BAR_RBRACK reduce production appTerm -> atomicTerm hashAtomicTerms
-- On BAR_BAR reduce production appTerm -> atomicTerm hashAtomicTerms
-- On BAR reduce production appTerm -> atomicTerm hashAtomicTerms
-- On ASSUME reduce production appTerm -> atomicTerm hashAtomicTerms
-- On AND reduce production appTerm -> atomicTerm hashAtomicTerms
-- On AMP_AMP reduce production appTerm -> atomicTerm hashAtomicTerms
-- On AMP reduce production appTerm -> atomicTerm hashAtomicTerms

State 148:
commaTermList -> appTerm . moreCommaTerms [ RBRACE ]
-- On COMMA shift to state 149
-- On moreCommaTerms shift to state 152
-- On RBRACE reduce production moreCommaTerms ->

State 149:
moreCommaTerms -> COMMA . appTerm moreCommaTerms [ RBRACE ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 150

State 150:
moreCommaTerms -> COMMA appTerm . moreCommaTerms [ RBRACE ]
-- On COMMA shift to state 149
-- On moreCommaTerms shift to state 151
-- On RBRACE reduce production moreCommaTerms ->

State 151:
moreCommaTerms -> COMMA appTerm moreCommaTerms . [ RBRACE ]
-- On RBRACE reduce production moreCommaTerms -> COMMA appTerm moreCommaTerms

State 152:
commaTermList -> appTerm moreCommaTerms . [ RBRACE ]
-- On RBRACE reduce production commaTermList -> appTerm moreCommaTerms

State 153:
maybeWhen -> WHEN appTerm . [ SQUIGGLY_RARROW RARROW ]
-- On SQUIGGLY_RARROW reduce production maybeWhen -> WHEN appTerm
-- On RARROW reduce production maybeWhen -> WHEN appTerm

State 154:
firstPatternBranch -> maybeBar disjunctivePattern maybeWhen . maybeFocusArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On SQUIGGLY_RARROW shift to state 155
-- On RARROW shift to state 156
-- On maybeFocusArrow shift to state 157

State 155:
maybeFocusArrow -> SQUIGGLY_RARROW . [ UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT ]
-- On UNDERSCORE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On UINT8 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TVAR reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TRY reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TRUE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On TILDE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On STRING reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On REQUIRES reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On PLUS_OP reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On PERCENT_LBRACK reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On NAME reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On MINUS_OP reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On MATCH reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LPAREN_RPAREN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LPAREN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LET reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LENS_PAREN_LEFT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LBRACK_BAR reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LBRACK reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On LBRACE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT64 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT32 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On INT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On IF reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On IEEE64 reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On IDENT reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On HASH reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FUNCTION reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FUN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FORALL reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On FALSE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On EXISTS reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On EQUALS reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On ENSURES reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On CHAR reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BYTEARRAY reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BEGIN reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BANG_LBRACE reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On BANG reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On ASSUME reduce production maybeFocusArrow -> SQUIGGLY_RARROW
-- On ASSERT reduce production maybeFocusArrow -> SQUIGGLY_RARROW

State 156:
maybeFocusArrow -> RARROW . [ UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT ]
-- On UNDERSCORE reduce production maybeFocusArrow -> RARROW
-- On UINT8 reduce production maybeFocusArrow -> RARROW
-- On TVAR reduce production maybeFocusArrow -> RARROW
-- On TRY reduce production maybeFocusArrow -> RARROW
-- On TRUE reduce production maybeFocusArrow -> RARROW
-- On TILDE reduce production maybeFocusArrow -> RARROW
-- On STRING reduce production maybeFocusArrow -> RARROW
-- On REQUIRES reduce production maybeFocusArrow -> RARROW
-- On PLUS_OP reduce production maybeFocusArrow -> RARROW
-- On PERCENT_LBRACK reduce production maybeFocusArrow -> RARROW
-- On NAME reduce production maybeFocusArrow -> RARROW
-- On MINUS_OP reduce production maybeFocusArrow -> RARROW
-- On MATCH reduce production maybeFocusArrow -> RARROW
-- On LPAREN_RPAREN reduce production maybeFocusArrow -> RARROW
-- On LPAREN reduce production maybeFocusArrow -> RARROW
-- On LET reduce production maybeFocusArrow -> RARROW
-- On LENS_PAREN_LEFT reduce production maybeFocusArrow -> RARROW
-- On LBRACK_BAR reduce production maybeFocusArrow -> RARROW
-- On LBRACK reduce production maybeFocusArrow -> RARROW
-- On LBRACE reduce production maybeFocusArrow -> RARROW
-- On INT64 reduce production maybeFocusArrow -> RARROW
-- On INT32 reduce production maybeFocusArrow -> RARROW
-- On INT reduce production maybeFocusArrow -> RARROW
-- On IF reduce production maybeFocusArrow -> RARROW
-- On IEEE64 reduce production maybeFocusArrow -> RARROW
-- On IDENT reduce production maybeFocusArrow -> RARROW
-- On HASH reduce production maybeFocusArrow -> RARROW
-- On FUNCTION reduce production maybeFocusArrow -> RARROW
-- On FUN reduce production maybeFocusArrow -> RARROW
-- On FORALL reduce production maybeFocusArrow -> RARROW
-- On FALSE reduce production maybeFocusArrow -> RARROW
-- On EXISTS reduce production maybeFocusArrow -> RARROW
-- On EQUALS reduce production maybeFocusArrow -> RARROW
-- On ENSURES reduce production maybeFocusArrow -> RARROW
-- On CHAR reduce production maybeFocusArrow -> RARROW
-- On BYTEARRAY reduce production maybeFocusArrow -> RARROW
-- On BEGIN reduce production maybeFocusArrow -> RARROW
-- On BANG_LBRACE reduce production maybeFocusArrow -> RARROW
-- On BANG reduce production maybeFocusArrow -> RARROW
-- On ASSUME reduce production maybeFocusArrow -> RARROW
-- On ASSERT reduce production maybeFocusArrow -> RARROW

State 157:
firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow . term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 272
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 158:
simpleTerm -> FUN . atomicPattern atomicPatterns funArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 159

State 159:
simpleTerm -> FUN atomicPattern . atomicPatterns funArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On qname shift to state 56
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPatterns shift to state 160
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 77
-- On RARROW reduce production atomicPatterns ->

State 160:
simpleTerm -> FUN atomicPattern atomicPatterns . funArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On RARROW shift to state 161
-- On funArrow shift to state 162

State 161:
funArrow -> RARROW . [ UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT ]
-- On UNDERSCORE reduce production funArrow -> RARROW
-- On UINT8 reduce production funArrow -> RARROW
-- On TVAR reduce production funArrow -> RARROW
-- On TRY reduce production funArrow -> RARROW
-- On TRUE reduce production funArrow -> RARROW
-- On TILDE reduce production funArrow -> RARROW
-- On STRING reduce production funArrow -> RARROW
-- On REQUIRES reduce production funArrow -> RARROW
-- On PLUS_OP reduce production funArrow -> RARROW
-- On PERCENT_LBRACK reduce production funArrow -> RARROW
-- On NAME reduce production funArrow -> RARROW
-- On MINUS_OP reduce production funArrow -> RARROW
-- On MATCH reduce production funArrow -> RARROW
-- On LPAREN_RPAREN reduce production funArrow -> RARROW
-- On LPAREN reduce production funArrow -> RARROW
-- On LET reduce production funArrow -> RARROW
-- On LENS_PAREN_LEFT reduce production funArrow -> RARROW
-- On LBRACK_BAR reduce production funArrow -> RARROW
-- On LBRACK reduce production funArrow -> RARROW
-- On LBRACE reduce production funArrow -> RARROW
-- On INT64 reduce production funArrow -> RARROW
-- On INT32 reduce production funArrow -> RARROW
-- On INT reduce production funArrow -> RARROW
-- On IF reduce production funArrow -> RARROW
-- On IEEE64 reduce production funArrow -> RARROW
-- On IDENT reduce production funArrow -> RARROW
-- On HASH reduce production funArrow -> RARROW
-- On FUNCTION reduce production funArrow -> RARROW
-- On FUN reduce production funArrow -> RARROW
-- On FORALL reduce production funArrow -> RARROW
-- On FALSE reduce production funArrow -> RARROW
-- On EXISTS reduce production funArrow -> RARROW
-- On EQUALS reduce production funArrow -> RARROW
-- On ENSURES reduce production funArrow -> RARROW
-- On CHAR reduce production funArrow -> RARROW
-- On BYTEARRAY reduce production funArrow -> RARROW
-- On BEGIN reduce production funArrow -> RARROW
-- On BANG_LBRACE reduce production funArrow -> RARROW
-- On BANG reduce production funArrow -> RARROW
-- On ASSUME reduce production funArrow -> RARROW
-- On ASSERT reduce production funArrow -> RARROW

State 162:
simpleTerm -> FUN atomicPattern atomicPatterns funArrow . term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 268
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 163:
typ -> FORALL . binders DOT qpat noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On TVAR shift to state 11
-- On LPAREN shift to state 164
-- On IDENT shift to state 36
-- On tvar shift to state 171
-- On ident shift to state 172
-- On binders shift to state 264
-- On binder shift to state 256
-- On DOT reduce production binders ->

State 164:
binder -> LPAREN . aqual_opt ident COLON typ refineOpt RPAREN [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On HASH shift to state 165
-- On EQUALS shift to state 166
-- On aqual_opt shift to state 167
-- On IDENT reduce production aqual_opt ->

State 165:
aqual_opt -> HASH . [ IDENT ]
-- On IDENT reduce production aqual_opt -> HASH

State 166:
aqual_opt -> EQUALS . [ IDENT ]
-- On IDENT reduce production aqual_opt -> EQUALS

State 167:
binder -> LPAREN aqual_opt . ident COLON typ refineOpt RPAREN [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On IDENT shift to state 36
-- On ident shift to state 168

State 168:
binder -> LPAREN aqual_opt ident . COLON typ refineOpt RPAREN [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On COLON shift to state 169

State 169:
binder -> LPAREN aqual_opt ident COLON . typ refineOpt RPAREN [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 258
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 170:
typ -> EXISTS . binders DOT qpat noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On TVAR shift to state 11
-- On LPAREN shift to state 164
-- On IDENT shift to state 36
-- On tvar shift to state 171
-- On ident shift to state 172
-- On binders shift to state 173
-- On binder shift to state 256
-- On DOT reduce production binders ->

State 171:
binder -> tvar . [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production binder -> tvar
-- On TYPE reduce production binder -> tvar
-- On TVAR reduce production binder -> tvar
-- On TOTAL reduce production binder -> tvar
-- On SUB_EFFECT reduce production binder -> tvar
-- On SEMICOLON_SEMICOLON reduce production binder -> tvar
-- On PRIVATE reduce production binder -> tvar
-- On PRAGMA_SET_OPTIONS reduce production binder -> tvar
-- On PRAGMA_RESET_OPTIONS reduce production binder -> tvar
-- On OPEN reduce production binder -> tvar
-- On OPAQUE reduce production binder -> tvar
-- On NEW_EFFECT reduce production binder -> tvar
-- On MODULE reduce production binder -> tvar
-- On LPAREN reduce production binder -> tvar
-- On LOGIC reduce production binder -> tvar
-- On LET reduce production binder -> tvar
-- On KIND reduce production binder -> tvar
-- On IDENT reduce production binder -> tvar
-- On EXCEPTION reduce production binder -> tvar
-- On EQUALS reduce production binder -> tvar
-- On EOF reduce production binder -> tvar
-- On END reduce production binder -> tvar
-- On EFFECT reduce production binder -> tvar
-- On DOT reduce production binder -> tvar
-- On DEFAULT reduce production binder -> tvar
-- On COLON reduce production binder -> tvar
-- On ASSUME reduce production binder -> tvar
-- On AND reduce production binder -> tvar

State 172:
binder -> ident . [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production binder -> ident
-- On TYPE reduce production binder -> ident
-- On TVAR reduce production binder -> ident
-- On TOTAL reduce production binder -> ident
-- On SUB_EFFECT reduce production binder -> ident
-- On SEMICOLON_SEMICOLON reduce production binder -> ident
-- On PRIVATE reduce production binder -> ident
-- On PRAGMA_SET_OPTIONS reduce production binder -> ident
-- On PRAGMA_RESET_OPTIONS reduce production binder -> ident
-- On OPEN reduce production binder -> ident
-- On OPAQUE reduce production binder -> ident
-- On NEW_EFFECT reduce production binder -> ident
-- On MODULE reduce production binder -> ident
-- On LPAREN reduce production binder -> ident
-- On LOGIC reduce production binder -> ident
-- On LET reduce production binder -> ident
-- On KIND reduce production binder -> ident
-- On IDENT reduce production binder -> ident
-- On EXCEPTION reduce production binder -> ident
-- On EQUALS reduce production binder -> ident
-- On EOF reduce production binder -> ident
-- On END reduce production binder -> ident
-- On EFFECT reduce production binder -> ident
-- On DOT reduce production binder -> ident
-- On DEFAULT reduce production binder -> ident
-- On COLON reduce production binder -> ident
-- On ASSUME reduce production binder -> ident
-- On AND reduce production binder -> ident

State 173:
typ -> EXISTS binders . DOT qpat noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On DOT shift to state 174

State 174:
typ -> EXISTS binders DOT . qpat noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On LBRACE_COLON_PATTERN shift to state 175
-- On qpat shift to state 182
-- On UNDERSCORE reduce production qpat ->
-- On UINT8 reduce production qpat ->
-- On TVAR reduce production qpat ->
-- On TRY reduce production qpat ->
-- On TRUE reduce production qpat ->
-- On TILDE reduce production qpat ->
-- On STRING reduce production qpat ->
-- On REQUIRES reduce production qpat ->
-- On PLUS_OP reduce production qpat ->
-- On PERCENT_LBRACK reduce production qpat ->
-- On NAME reduce production qpat ->
-- On MINUS_OP reduce production qpat ->
-- On MATCH reduce production qpat ->
-- On LPAREN_RPAREN reduce production qpat ->
-- On LPAREN reduce production qpat ->
-- On LET reduce production qpat ->
-- On LENS_PAREN_LEFT reduce production qpat ->
-- On LBRACK_BAR reduce production qpat ->
-- On LBRACK reduce production qpat ->
-- On LBRACE reduce production qpat ->
-- On INT64 reduce production qpat ->
-- On INT32 reduce production qpat ->
-- On INT reduce production qpat ->
-- On IF reduce production qpat ->
-- On IEEE64 reduce production qpat ->
-- On IDENT reduce production qpat ->
-- On HASH reduce production qpat ->
-- On FUNCTION reduce production qpat ->
-- On FUN reduce production qpat ->
-- On FORALL reduce production qpat ->
-- On FALSE reduce production qpat ->
-- On EXISTS reduce production qpat ->
-- On EQUALS reduce production qpat ->
-- On ENSURES reduce production qpat ->
-- On CHAR reduce production qpat ->
-- On BYTEARRAY reduce production qpat ->
-- On BEGIN reduce production qpat ->
-- On BANG_LBRACE reduce production qpat ->
-- On BANG reduce production qpat ->
-- On ASSUME reduce production qpat ->
-- On ASSERT reduce production qpat ->

State 175:
qpat -> LBRACE_COLON_PATTERN . appTerm morePats RBRACE [ UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 176

State 176:
qpat -> LBRACE_COLON_PATTERN appTerm . morePats RBRACE [ UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT ]
-- On SEMICOLON shift to state 177
-- On morePats shift to state 180
-- On RBRACE reduce production morePats ->

State 177:
morePats -> SEMICOLON . appTerm morePats [ RBRACE ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 178

State 178:
morePats -> SEMICOLON appTerm . morePats [ RBRACE ]
-- On SEMICOLON shift to state 177
-- On morePats shift to state 179
-- On RBRACE reduce production morePats ->

State 179:
morePats -> SEMICOLON appTerm morePats . [ RBRACE ]
-- On RBRACE reduce production morePats -> SEMICOLON appTerm morePats

State 180:
qpat -> LBRACE_COLON_PATTERN appTerm morePats . RBRACE [ UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT ]
-- On RBRACE shift to state 181

State 181:
qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE . [ UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT ]
-- On UNDERSCORE reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On UINT8 reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On TVAR reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On TRY reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On TRUE reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On TILDE reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On STRING reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On REQUIRES reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On PLUS_OP reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On PERCENT_LBRACK reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On NAME reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On MINUS_OP reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On MATCH reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On LPAREN_RPAREN reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On LPAREN reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On LET reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On LENS_PAREN_LEFT reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On LBRACK_BAR reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On LBRACK reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On LBRACE reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On INT64 reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On INT32 reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On INT reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On IF reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On IEEE64 reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On IDENT reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On HASH reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On FUNCTION reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On FUN reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On FORALL reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On FALSE reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On EXISTS reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On EQUALS reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On ENSURES reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On CHAR reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On BYTEARRAY reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On BEGIN reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On BANG_LBRACE reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On BANG reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On ASSUME reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE
-- On ASSERT reduce production qpat -> LBRACE_COLON_PATTERN appTerm morePats RBRACE

State 182:
typ -> EXISTS binders DOT qpat . noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 255
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 183:
aqual -> EQUALS . [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production aqual -> EQUALS
-- On UINT8 reduce production aqual -> EQUALS
-- On TVAR reduce production aqual -> EQUALS
-- On TRUE reduce production aqual -> EQUALS
-- On TILDE reduce production aqual -> EQUALS
-- On STRING reduce production aqual -> EQUALS
-- On PLUS_OP reduce production aqual -> EQUALS
-- On PERCENT_LBRACK reduce production aqual -> EQUALS
-- On NAME reduce production aqual -> EQUALS
-- On MINUS_OP reduce production aqual -> EQUALS
-- On LPAREN_RPAREN reduce production aqual -> EQUALS
-- On LPAREN reduce production aqual -> EQUALS
-- On LENS_PAREN_LEFT reduce production aqual -> EQUALS
-- On LBRACK_BAR reduce production aqual -> EQUALS
-- On LBRACK reduce production aqual -> EQUALS
-- On LBRACE reduce production aqual -> EQUALS
-- On INT64 reduce production aqual -> EQUALS
-- On INT32 reduce production aqual -> EQUALS
-- On INT reduce production aqual -> EQUALS
-- On IEEE64 reduce production aqual -> EQUALS
-- On IDENT reduce production aqual -> EQUALS
-- On FALSE reduce production aqual -> EQUALS
-- On CHAR reduce production aqual -> EQUALS
-- On BYTEARRAY reduce production aqual -> EQUALS
-- On BEGIN reduce production aqual -> EQUALS
-- On BANG_LBRACE reduce production aqual -> EQUALS
-- On BANG reduce production aqual -> EQUALS
-- On ASSERT reduce production aqual -> EQUALS

State 184:
noSeqTerm -> ENSURES . label_opt typ [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On DOLLAR shift to state 18
-- On label_opt shift to state 185
-- On UNDERSCORE reduce production label_opt ->
-- On UINT8 reduce production label_opt ->
-- On TVAR reduce production label_opt ->
-- On TRUE reduce production label_opt ->
-- On TILDE reduce production label_opt ->
-- On STRING reduce production label_opt ->
-- On PLUS_OP reduce production label_opt ->
-- On PERCENT_LBRACK reduce production label_opt ->
-- On NAME reduce production label_opt ->
-- On MINUS_OP reduce production label_opt ->
-- On LPAREN_RPAREN reduce production label_opt ->
-- On LPAREN reduce production label_opt ->
-- On LENS_PAREN_LEFT reduce production label_opt ->
-- On LBRACK_BAR reduce production label_opt ->
-- On LBRACK reduce production label_opt ->
-- On LBRACE reduce production label_opt ->
-- On INT64 reduce production label_opt ->
-- On INT32 reduce production label_opt ->
-- On INT reduce production label_opt ->
-- On IEEE64 reduce production label_opt ->
-- On IDENT reduce production label_opt ->
-- On HASH reduce production label_opt ->
-- On FUN reduce production label_opt ->
-- On FORALL reduce production label_opt ->
-- On FALSE reduce production label_opt ->
-- On EXISTS reduce production label_opt ->
-- On EQUALS reduce production label_opt ->
-- On CHAR reduce production label_opt ->
-- On BYTEARRAY reduce production label_opt ->
-- On BEGIN reduce production label_opt ->
-- On BANG_LBRACE reduce production label_opt ->
-- On BANG reduce production label_opt ->
-- On ASSERT reduce production label_opt ->

State 185:
noSeqTerm -> ENSURES label_opt . typ [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 254
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 186:
refinementTerm -> unaryTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
starDivModTerm -> unaryTerm . DIV_MOD_OP starDivModTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On DIV_MOD_OP shift to state 187
-- On WITH reduce production refinementTerm -> unaryTerm
-- On VAL reduce production refinementTerm -> unaryTerm
-- On TYPE reduce production refinementTerm -> unaryTerm
-- On TOTAL reduce production refinementTerm -> unaryTerm
-- On THEN reduce production refinementTerm -> unaryTerm
-- On SUB_EFFECT reduce production refinementTerm -> unaryTerm
-- On SUBTYPE reduce production refinementTerm -> unaryTerm
-- On SUBKIND reduce production refinementTerm -> unaryTerm
-- On STAR reduce production refinementTerm -> unaryTerm
-- On SEMICOLON_SEMICOLON reduce production refinementTerm -> unaryTerm
-- On SEMICOLON reduce production refinementTerm -> unaryTerm
-- On RPAREN reduce production refinementTerm -> unaryTerm
-- On RBRACK reduce production refinementTerm -> unaryTerm
-- On RBRACE reduce production refinementTerm -> unaryTerm
-- On RARROW reduce production refinementTerm -> unaryTerm
-- On PRIVATE reduce production refinementTerm -> unaryTerm
-- On PRAGMA_SET_OPTIONS reduce production refinementTerm -> unaryTerm
-- On PRAGMA_RESET_OPTIONS reduce production refinementTerm -> unaryTerm
-- On PLUS_OP reduce production refinementTerm -> unaryTerm
-- On OPEN reduce production refinementTerm -> unaryTerm
-- On OPAQUE reduce production refinementTerm -> unaryTerm
-- On NEW_EFFECT reduce production refinementTerm -> unaryTerm
-- On MODULE reduce production refinementTerm -> unaryTerm
-- On MINUS_OP reduce production refinementTerm -> unaryTerm
-- On LOGIC reduce production refinementTerm -> unaryTerm
-- On LET reduce production refinementTerm -> unaryTerm
-- On LENS_PAREN_RIGHT reduce production refinementTerm -> unaryTerm
-- On LBRACE reduce production refinementTerm -> unaryTerm
-- On KIND reduce production refinementTerm -> unaryTerm
-- On IN reduce production refinementTerm -> unaryTerm
-- On IMPLIES reduce production refinementTerm -> unaryTerm
-- On IFF reduce production refinementTerm -> unaryTerm
-- On EXCEPTION reduce production refinementTerm -> unaryTerm
-- On EQUALS reduce production refinementTerm -> unaryTerm
-- On EOF reduce production refinementTerm -> unaryTerm
-- On END reduce production refinementTerm -> unaryTerm
-- On ELSE reduce production refinementTerm -> unaryTerm
-- On EFFECT reduce production refinementTerm -> unaryTerm
-- On DISJUNCTION reduce production refinementTerm -> unaryTerm
-- On DEFAULT reduce production refinementTerm -> unaryTerm
-- On CUSTOM_OP reduce production refinementTerm -> unaryTerm
-- On CONJUNCTION reduce production refinementTerm -> unaryTerm
-- On COMMA reduce production refinementTerm -> unaryTerm
-- On COLON_EQUALS reduce production refinementTerm -> unaryTerm
-- On COLON_COLON reduce production refinementTerm -> unaryTerm
-- On BAR_RBRACK reduce production refinementTerm -> unaryTerm
-- On BAR_BAR reduce production refinementTerm -> unaryTerm
-- On BAR reduce production refinementTerm -> unaryTerm
-- On ASSUME reduce production refinementTerm -> unaryTerm
-- On AND reduce production refinementTerm -> unaryTerm
-- On AMP_AMP reduce production refinementTerm -> unaryTerm
-- On AMP reduce production refinementTerm -> unaryTerm

State 187:
starDivModTerm -> unaryTerm DIV_MOD_OP . starDivModTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 188
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 214

State 188:
starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On VAL reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On TYPE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On TOTAL reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On THEN reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On SUB_EFFECT reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On SUBTYPE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On SUBKIND reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On SEMICOLON_SEMICOLON reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On SEMICOLON reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On RPAREN reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On RBRACK reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On RBRACE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On RARROW reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On PRIVATE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On PRAGMA_SET_OPTIONS reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On PRAGMA_RESET_OPTIONS reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On PLUS_OP reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On OPEN reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On OPAQUE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On NEW_EFFECT reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On MODULE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On MINUS_OP reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On LOGIC reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On LET reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On LENS_PAREN_RIGHT reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On LBRACE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On KIND reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On IN reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On IMPLIES reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On IFF reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On EXCEPTION reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On EQUALS reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On EOF reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On END reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On ELSE reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On EFFECT reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On DISJUNCTION reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On DEFAULT reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On CUSTOM_OP reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On CONJUNCTION reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On COMMA reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On COLON_EQUALS reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On COLON_COLON reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On BAR_RBRACK reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On BAR_BAR reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On BAR reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On ASSUME reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On AND reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On AMP_AMP reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm
-- On AMP reduce production starDivModTerm -> unaryTerm DIV_MOD_OP starDivModTerm

State 189:
starDivModTerm -> refinementTerm . STAR starDivModTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
starDivModTerm -> refinementTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On STAR shift to state 190
-- On WITH reduce production starDivModTerm -> refinementTerm
-- On VAL reduce production starDivModTerm -> refinementTerm
-- On TYPE reduce production starDivModTerm -> refinementTerm
-- On TOTAL reduce production starDivModTerm -> refinementTerm
-- On THEN reduce production starDivModTerm -> refinementTerm
-- On SUB_EFFECT reduce production starDivModTerm -> refinementTerm
-- On SUBTYPE reduce production starDivModTerm -> refinementTerm
-- On SUBKIND reduce production starDivModTerm -> refinementTerm
-- On SEMICOLON_SEMICOLON reduce production starDivModTerm -> refinementTerm
-- On SEMICOLON reduce production starDivModTerm -> refinementTerm
-- On RPAREN reduce production starDivModTerm -> refinementTerm
-- On RBRACK reduce production starDivModTerm -> refinementTerm
-- On RBRACE reduce production starDivModTerm -> refinementTerm
-- On RARROW reduce production starDivModTerm -> refinementTerm
-- On PRIVATE reduce production starDivModTerm -> refinementTerm
-- On PRAGMA_SET_OPTIONS reduce production starDivModTerm -> refinementTerm
-- On PRAGMA_RESET_OPTIONS reduce production starDivModTerm -> refinementTerm
-- On PLUS_OP reduce production starDivModTerm -> refinementTerm
-- On OPEN reduce production starDivModTerm -> refinementTerm
-- On OPAQUE reduce production starDivModTerm -> refinementTerm
-- On NEW_EFFECT reduce production starDivModTerm -> refinementTerm
-- On MODULE reduce production starDivModTerm -> refinementTerm
-- On MINUS_OP reduce production starDivModTerm -> refinementTerm
-- On LOGIC reduce production starDivModTerm -> refinementTerm
-- On LET reduce production starDivModTerm -> refinementTerm
-- On LENS_PAREN_RIGHT reduce production starDivModTerm -> refinementTerm
-- On LBRACE reduce production starDivModTerm -> refinementTerm
-- On KIND reduce production starDivModTerm -> refinementTerm
-- On IN reduce production starDivModTerm -> refinementTerm
-- On IMPLIES reduce production starDivModTerm -> refinementTerm
-- On IFF reduce production starDivModTerm -> refinementTerm
-- On EXCEPTION reduce production starDivModTerm -> refinementTerm
-- On EQUALS reduce production starDivModTerm -> refinementTerm
-- On EOF reduce production starDivModTerm -> refinementTerm
-- On END reduce production starDivModTerm -> refinementTerm
-- On ELSE reduce production starDivModTerm -> refinementTerm
-- On EFFECT reduce production starDivModTerm -> refinementTerm
-- On DISJUNCTION reduce production starDivModTerm -> refinementTerm
-- On DEFAULT reduce production starDivModTerm -> refinementTerm
-- On CUSTOM_OP reduce production starDivModTerm -> refinementTerm
-- On CONJUNCTION reduce production starDivModTerm -> refinementTerm
-- On COMMA reduce production starDivModTerm -> refinementTerm
-- On COLON_EQUALS reduce production starDivModTerm -> refinementTerm
-- On COLON_COLON reduce production starDivModTerm -> refinementTerm
-- On BAR_RBRACK reduce production starDivModTerm -> refinementTerm
-- On BAR_BAR reduce production starDivModTerm -> refinementTerm
-- On BAR reduce production starDivModTerm -> refinementTerm
-- On ASSUME reduce production starDivModTerm -> refinementTerm
-- On AND reduce production starDivModTerm -> refinementTerm
-- On AMP_AMP reduce production starDivModTerm -> refinementTerm
-- On AMP reduce production starDivModTerm -> refinementTerm

State 190:
starDivModTerm -> refinementTerm STAR . starDivModTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 191
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 214

State 191:
starDivModTerm -> refinementTerm STAR starDivModTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On VAL reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On TYPE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On TOTAL reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On THEN reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On SUB_EFFECT reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On SUBTYPE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On SUBKIND reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On SEMICOLON_SEMICOLON reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On SEMICOLON reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On RPAREN reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On RBRACK reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On RBRACE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On RARROW reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On PRIVATE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On PRAGMA_SET_OPTIONS reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On PRAGMA_RESET_OPTIONS reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On PLUS_OP reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On OPEN reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On OPAQUE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On NEW_EFFECT reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On MODULE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On MINUS_OP reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On LOGIC reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On LET reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On LENS_PAREN_RIGHT reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On LBRACE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On KIND reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On IN reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On IMPLIES reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On IFF reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On EXCEPTION reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On EQUALS reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On EOF reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On END reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On ELSE reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On EFFECT reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On DISJUNCTION reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On DEFAULT reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On CUSTOM_OP reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On CONJUNCTION reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On COMMA reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On COLON_EQUALS reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On COLON_COLON reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On BAR_RBRACK reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On BAR_BAR reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On BAR reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On ASSUME reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On AND reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On AMP_AMP reduce production starDivModTerm -> refinementTerm STAR starDivModTerm
-- On AMP reduce production starDivModTerm -> refinementTerm STAR starDivModTerm

State 192:
eitherpath -> ident . [ WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
refinementTerm -> ident . COLON appTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
refinementTerm -> ident . COLON appTerm LBRACE formula RBRACE [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On COLON shift to state 193
-- On WITH reduce production eitherpath -> ident
-- On VAL reduce production eitherpath -> ident
-- On UNDERSCORE reduce production eitherpath -> ident
-- On UINT8 reduce production eitherpath -> ident
-- On TYP_APP_LESS reduce production eitherpath -> ident
-- On TYPE reduce production eitherpath -> ident
-- On TVAR reduce production eitherpath -> ident
-- On TRUE reduce production eitherpath -> ident
-- On TOTAL reduce production eitherpath -> ident
-- On THEN reduce production eitherpath -> ident
-- On SUB_EFFECT reduce production eitherpath -> ident
-- On SUBTYPE reduce production eitherpath -> ident
-- On SUBKIND reduce production eitherpath -> ident
-- On STRING reduce production eitherpath -> ident
-- On STAR reduce production eitherpath -> ident
-- On SEMICOLON_SEMICOLON reduce production eitherpath -> ident
-- On SEMICOLON reduce production eitherpath -> ident
-- On RPAREN reduce production eitherpath -> ident
-- On RBRACK reduce production eitherpath -> ident
-- On RBRACE reduce production eitherpath -> ident
-- On RARROW reduce production eitherpath -> ident
-- On PRIVATE reduce production eitherpath -> ident
-- On PRAGMA_SET_OPTIONS reduce production eitherpath -> ident
-- On PRAGMA_RESET_OPTIONS reduce production eitherpath -> ident
-- On PLUS_OP reduce production eitherpath -> ident
-- On PERCENT_LBRACK reduce production eitherpath -> ident
-- On OPEN reduce production eitherpath -> ident
-- On OPAQUE reduce production eitherpath -> ident
-- On NEW_EFFECT reduce production eitherpath -> ident
-- On NAME reduce production eitherpath -> ident
-- On MODULE reduce production eitherpath -> ident
-- On MINUS_OP reduce production eitherpath -> ident
-- On LPAREN_RPAREN reduce production eitherpath -> ident
-- On LPAREN reduce production eitherpath -> ident
-- On LOGIC reduce production eitherpath -> ident
-- On LET reduce production eitherpath -> ident
-- On LENS_PAREN_RIGHT reduce production eitherpath -> ident
-- On LENS_PAREN_LEFT reduce production eitherpath -> ident
-- On LBRACK_BAR reduce production eitherpath -> ident
-- On LBRACK reduce production eitherpath -> ident
-- On LBRACE reduce production eitherpath -> ident
-- On KIND reduce production eitherpath -> ident
-- On INT64 reduce production eitherpath -> ident
-- On INT32 reduce production eitherpath -> ident
-- On INT reduce production eitherpath -> ident
-- On IN reduce production eitherpath -> ident
-- On IMPLIES reduce production eitherpath -> ident
-- On IFF reduce production eitherpath -> ident
-- On IEEE64 reduce production eitherpath -> ident
-- On IDENT reduce production eitherpath -> ident
-- On HASH reduce production eitherpath -> ident
-- On FALSE reduce production eitherpath -> ident
-- On EXCEPTION reduce production eitherpath -> ident
-- On EQUALS reduce production eitherpath -> ident
-- On EOF reduce production eitherpath -> ident
-- On END reduce production eitherpath -> ident
-- On ELSE reduce production eitherpath -> ident
-- On EFFECT reduce production eitherpath -> ident
-- On DOT reduce production eitherpath -> ident
-- On DIV_MOD_OP reduce production eitherpath -> ident
-- On DISJUNCTION reduce production eitherpath -> ident
-- On DEFAULT reduce production eitherpath -> ident
-- On CUSTOM_OP reduce production eitherpath -> ident
-- On CONJUNCTION reduce production eitherpath -> ident
-- On COMMA reduce production eitherpath -> ident
-- On COLON_EQUALS reduce production eitherpath -> ident
-- On COLON_COLON reduce production eitherpath -> ident
-- On CHAR reduce production eitherpath -> ident
-- On BYTEARRAY reduce production eitherpath -> ident
-- On BEGIN reduce production eitherpath -> ident
-- On BAR_RBRACK reduce production eitherpath -> ident
-- On BAR_BAR reduce production eitherpath -> ident
-- On BAR reduce production eitherpath -> ident
-- On BANG_LBRACE reduce production eitherpath -> ident
-- On BANG reduce production eitherpath -> ident
-- On ASSUME reduce production eitherpath -> ident
-- On ASSERT reduce production eitherpath -> ident
-- On AND reduce production eitherpath -> ident
-- On AMP_AMP reduce production eitherpath -> ident
-- On AMP reduce production eitherpath -> ident

State 193:
refinementTerm -> ident COLON . appTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
refinementTerm -> ident COLON . appTerm LBRACE formula RBRACE [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 194

State 194:
refinementTerm -> ident COLON appTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
refinementTerm -> ident COLON appTerm . LBRACE formula RBRACE [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On LBRACE shift to state 195
-- On WITH reduce production refinementTerm -> ident COLON appTerm
-- On VAL reduce production refinementTerm -> ident COLON appTerm
-- On TYPE reduce production refinementTerm -> ident COLON appTerm
-- On TOTAL reduce production refinementTerm -> ident COLON appTerm
-- On THEN reduce production refinementTerm -> ident COLON appTerm
-- On SUB_EFFECT reduce production refinementTerm -> ident COLON appTerm
-- On SUBTYPE reduce production refinementTerm -> ident COLON appTerm
-- On SUBKIND reduce production refinementTerm -> ident COLON appTerm
-- On STAR reduce production refinementTerm -> ident COLON appTerm
-- On SEMICOLON_SEMICOLON reduce production refinementTerm -> ident COLON appTerm
-- On SEMICOLON reduce production refinementTerm -> ident COLON appTerm
-- On RPAREN reduce production refinementTerm -> ident COLON appTerm
-- On RBRACK reduce production refinementTerm -> ident COLON appTerm
-- On RBRACE reduce production refinementTerm -> ident COLON appTerm
-- On RARROW reduce production refinementTerm -> ident COLON appTerm
-- On PRIVATE reduce production refinementTerm -> ident COLON appTerm
-- On PRAGMA_SET_OPTIONS reduce production refinementTerm -> ident COLON appTerm
-- On PRAGMA_RESET_OPTIONS reduce production refinementTerm -> ident COLON appTerm
-- On PLUS_OP reduce production refinementTerm -> ident COLON appTerm
-- On OPEN reduce production refinementTerm -> ident COLON appTerm
-- On OPAQUE reduce production refinementTerm -> ident COLON appTerm
-- On NEW_EFFECT reduce production refinementTerm -> ident COLON appTerm
-- On MODULE reduce production refinementTerm -> ident COLON appTerm
-- On MINUS_OP reduce production refinementTerm -> ident COLON appTerm
-- On LOGIC reduce production refinementTerm -> ident COLON appTerm
-- On LET reduce production refinementTerm -> ident COLON appTerm
-- On LENS_PAREN_RIGHT reduce production refinementTerm -> ident COLON appTerm
-- On KIND reduce production refinementTerm -> ident COLON appTerm
-- On IN reduce production refinementTerm -> ident COLON appTerm
-- On IMPLIES reduce production refinementTerm -> ident COLON appTerm
-- On IFF reduce production refinementTerm -> ident COLON appTerm
-- On EXCEPTION reduce production refinementTerm -> ident COLON appTerm
-- On EQUALS reduce production refinementTerm -> ident COLON appTerm
-- On EOF reduce production refinementTerm -> ident COLON appTerm
-- On END reduce production refinementTerm -> ident COLON appTerm
-- On ELSE reduce production refinementTerm -> ident COLON appTerm
-- On EFFECT reduce production refinementTerm -> ident COLON appTerm
-- On DISJUNCTION reduce production refinementTerm -> ident COLON appTerm
-- On DEFAULT reduce production refinementTerm -> ident COLON appTerm
-- On CUSTOM_OP reduce production refinementTerm -> ident COLON appTerm
-- On CONJUNCTION reduce production refinementTerm -> ident COLON appTerm
-- On COMMA reduce production refinementTerm -> ident COLON appTerm
-- On COLON_EQUALS reduce production refinementTerm -> ident COLON appTerm
-- On COLON_COLON reduce production refinementTerm -> ident COLON appTerm
-- On BAR_RBRACK reduce production refinementTerm -> ident COLON appTerm
-- On BAR_BAR reduce production refinementTerm -> ident COLON appTerm
-- On BAR reduce production refinementTerm -> ident COLON appTerm
-- On ASSUME reduce production refinementTerm -> ident COLON appTerm
-- On AND reduce production refinementTerm -> ident COLON appTerm
-- On AMP_AMP reduce production refinementTerm -> ident COLON appTerm
-- On AMP reduce production refinementTerm -> ident COLON appTerm

State 195:
refinementTerm -> ident COLON appTerm LBRACE . formula RBRACE [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 251
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On formula shift to state 252
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 196:
noSeqTerm -> ASSUME . atomicTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 126
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 197

State 197:
noSeqTerm -> ASSUME atomicTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production noSeqTerm -> ASSUME atomicTerm
-- On VAL reduce production noSeqTerm -> ASSUME atomicTerm
-- On TYPE reduce production noSeqTerm -> ASSUME atomicTerm
-- On TOTAL reduce production noSeqTerm -> ASSUME atomicTerm
-- On THEN reduce production noSeqTerm -> ASSUME atomicTerm
-- On SUB_EFFECT reduce production noSeqTerm -> ASSUME atomicTerm
-- On SUBTYPE reduce production noSeqTerm -> ASSUME atomicTerm
-- On SUBKIND reduce production noSeqTerm -> ASSUME atomicTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> ASSUME atomicTerm
-- On SEMICOLON reduce production noSeqTerm -> ASSUME atomicTerm
-- On RPAREN reduce production noSeqTerm -> ASSUME atomicTerm
-- On RBRACK reduce production noSeqTerm -> ASSUME atomicTerm
-- On RBRACE reduce production noSeqTerm -> ASSUME atomicTerm
-- On PRIVATE reduce production noSeqTerm -> ASSUME atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> ASSUME atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> ASSUME atomicTerm
-- On OPEN reduce production noSeqTerm -> ASSUME atomicTerm
-- On OPAQUE reduce production noSeqTerm -> ASSUME atomicTerm
-- On NEW_EFFECT reduce production noSeqTerm -> ASSUME atomicTerm
-- On MODULE reduce production noSeqTerm -> ASSUME atomicTerm
-- On LOGIC reduce production noSeqTerm -> ASSUME atomicTerm
-- On LET reduce production noSeqTerm -> ASSUME atomicTerm
-- On LBRACE reduce production noSeqTerm -> ASSUME atomicTerm
-- On KIND reduce production noSeqTerm -> ASSUME atomicTerm
-- On IN reduce production noSeqTerm -> ASSUME atomicTerm
-- On EXCEPTION reduce production noSeqTerm -> ASSUME atomicTerm
-- On EOF reduce production noSeqTerm -> ASSUME atomicTerm
-- On END reduce production noSeqTerm -> ASSUME atomicTerm
-- On ELSE reduce production noSeqTerm -> ASSUME atomicTerm
-- On EFFECT reduce production noSeqTerm -> ASSUME atomicTerm
-- On DEFAULT reduce production noSeqTerm -> ASSUME atomicTerm
-- On BAR_RBRACK reduce production noSeqTerm -> ASSUME atomicTerm
-- On BAR reduce production noSeqTerm -> ASSUME atomicTerm
-- On ASSUME reduce production noSeqTerm -> ASSUME atomicTerm
-- On AND reduce production noSeqTerm -> ASSUME atomicTerm

State 198:
noSeqTerm -> typ . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production noSeqTerm -> typ
-- On VAL reduce production noSeqTerm -> typ
-- On TYPE reduce production noSeqTerm -> typ
-- On TOTAL reduce production noSeqTerm -> typ
-- On THEN reduce production noSeqTerm -> typ
-- On SUB_EFFECT reduce production noSeqTerm -> typ
-- On SUBTYPE reduce production noSeqTerm -> typ
-- On SUBKIND reduce production noSeqTerm -> typ
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> typ
-- On SEMICOLON reduce production noSeqTerm -> typ
-- On RPAREN reduce production noSeqTerm -> typ
-- On RBRACK reduce production noSeqTerm -> typ
-- On RBRACE reduce production noSeqTerm -> typ
-- On PRIVATE reduce production noSeqTerm -> typ
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> typ
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> typ
-- On OPEN reduce production noSeqTerm -> typ
-- On OPAQUE reduce production noSeqTerm -> typ
-- On NEW_EFFECT reduce production noSeqTerm -> typ
-- On MODULE reduce production noSeqTerm -> typ
-- On LOGIC reduce production noSeqTerm -> typ
-- On LET reduce production noSeqTerm -> typ
-- On LBRACE reduce production noSeqTerm -> typ
-- On KIND reduce production noSeqTerm -> typ
-- On IN reduce production noSeqTerm -> typ
-- On EXCEPTION reduce production noSeqTerm -> typ
-- On EOF reduce production noSeqTerm -> typ
-- On END reduce production noSeqTerm -> typ
-- On ELSE reduce production noSeqTerm -> typ
-- On EFFECT reduce production noSeqTerm -> typ
-- On DEFAULT reduce production noSeqTerm -> typ
-- On BAR_RBRACK reduce production noSeqTerm -> typ
-- On BAR reduce production noSeqTerm -> typ
-- On ASSUME reduce production noSeqTerm -> typ
-- On AND reduce production noSeqTerm -> typ

State 199:
tmTuple -> tupleN . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production tmTuple -> tupleN
-- On VAL reduce production tmTuple -> tupleN
-- On TYPE reduce production tmTuple -> tupleN
-- On TOTAL reduce production tmTuple -> tupleN
-- On THEN reduce production tmTuple -> tupleN
-- On SUB_EFFECT reduce production tmTuple -> tupleN
-- On SUBTYPE reduce production tmTuple -> tupleN
-- On SUBKIND reduce production tmTuple -> tupleN
-- On SEMICOLON_SEMICOLON reduce production tmTuple -> tupleN
-- On SEMICOLON reduce production tmTuple -> tupleN
-- On RPAREN reduce production tmTuple -> tupleN
-- On RBRACK reduce production tmTuple -> tupleN
-- On RBRACE reduce production tmTuple -> tupleN
-- On PRIVATE reduce production tmTuple -> tupleN
-- On PRAGMA_SET_OPTIONS reduce production tmTuple -> tupleN
-- On PRAGMA_RESET_OPTIONS reduce production tmTuple -> tupleN
-- On OPEN reduce production tmTuple -> tupleN
-- On OPAQUE reduce production tmTuple -> tupleN
-- On NEW_EFFECT reduce production tmTuple -> tupleN
-- On MODULE reduce production tmTuple -> tupleN
-- On LOGIC reduce production tmTuple -> tupleN
-- On LET reduce production tmTuple -> tupleN
-- On LBRACE reduce production tmTuple -> tupleN
-- On KIND reduce production tmTuple -> tupleN
-- On IN reduce production tmTuple -> tupleN
-- On IMPLIES reduce production tmTuple -> tupleN
-- On IFF reduce production tmTuple -> tupleN
-- On EXCEPTION reduce production tmTuple -> tupleN
-- On EOF reduce production tmTuple -> tupleN
-- On END reduce production tmTuple -> tupleN
-- On ELSE reduce production tmTuple -> tupleN
-- On EFFECT reduce production tmTuple -> tupleN
-- On DISJUNCTION reduce production tmTuple -> tupleN
-- On DEFAULT reduce production tmTuple -> tupleN
-- On CONJUNCTION reduce production tmTuple -> tupleN
-- On BAR_RBRACK reduce production tmTuple -> tupleN
-- On BAR reduce production tmTuple -> tupleN
-- On ASSUME reduce production tmTuple -> tupleN
-- On AND reduce production tmTuple -> tupleN

State 200:
tmConjunction -> tmTuple . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production tmConjunction -> tmTuple
-- On VAL reduce production tmConjunction -> tmTuple
-- On TYPE reduce production tmConjunction -> tmTuple
-- On TOTAL reduce production tmConjunction -> tmTuple
-- On THEN reduce production tmConjunction -> tmTuple
-- On SUB_EFFECT reduce production tmConjunction -> tmTuple
-- On SUBTYPE reduce production tmConjunction -> tmTuple
-- On SUBKIND reduce production tmConjunction -> tmTuple
-- On SEMICOLON_SEMICOLON reduce production tmConjunction -> tmTuple
-- On SEMICOLON reduce production tmConjunction -> tmTuple
-- On RPAREN reduce production tmConjunction -> tmTuple
-- On RBRACK reduce production tmConjunction -> tmTuple
-- On RBRACE reduce production tmConjunction -> tmTuple
-- On PRIVATE reduce production tmConjunction -> tmTuple
-- On PRAGMA_SET_OPTIONS reduce production tmConjunction -> tmTuple
-- On PRAGMA_RESET_OPTIONS reduce production tmConjunction -> tmTuple
-- On OPEN reduce production tmConjunction -> tmTuple
-- On OPAQUE reduce production tmConjunction -> tmTuple
-- On NEW_EFFECT reduce production tmConjunction -> tmTuple
-- On MODULE reduce production tmConjunction -> tmTuple
-- On LOGIC reduce production tmConjunction -> tmTuple
-- On LET reduce production tmConjunction -> tmTuple
-- On LBRACE reduce production tmConjunction -> tmTuple
-- On KIND reduce production tmConjunction -> tmTuple
-- On IN reduce production tmConjunction -> tmTuple
-- On IMPLIES reduce production tmConjunction -> tmTuple
-- On IFF reduce production tmConjunction -> tmTuple
-- On EXCEPTION reduce production tmConjunction -> tmTuple
-- On EOF reduce production tmConjunction -> tmTuple
-- On END reduce production tmConjunction -> tmTuple
-- On ELSE reduce production tmConjunction -> tmTuple
-- On EFFECT reduce production tmConjunction -> tmTuple
-- On DISJUNCTION reduce production tmConjunction -> tmTuple
-- On DEFAULT reduce production tmConjunction -> tmTuple
-- On CONJUNCTION reduce production tmConjunction -> tmTuple
-- On BAR_RBRACK reduce production tmConjunction -> tmTuple
-- On BAR reduce production tmConjunction -> tmTuple
-- On ASSUME reduce production tmConjunction -> tmTuple
-- On AND reduce production tmConjunction -> tmTuple

State 201:
tmEq -> tmOr . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR ASSUME AND ]
tmOr -> tmOr . BAR_BAR tmAnd [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND ]
-- On BAR_BAR shift to state 202
-- On WITH reduce production tmEq -> tmOr
-- On VAL reduce production tmEq -> tmOr
-- On TYPE reduce production tmEq -> tmOr
-- On TOTAL reduce production tmEq -> tmOr
-- On THEN reduce production tmEq -> tmOr
-- On SUB_EFFECT reduce production tmEq -> tmOr
-- On SUBTYPE reduce production tmEq -> tmOr
-- On SUBKIND reduce production tmEq -> tmOr
-- On SEMICOLON_SEMICOLON reduce production tmEq -> tmOr
-- On SEMICOLON reduce production tmEq -> tmOr
-- On RPAREN reduce production tmEq -> tmOr
-- On RBRACK reduce production tmEq -> tmOr
-- On RBRACE reduce production tmEq -> tmOr
-- On PRIVATE reduce production tmEq -> tmOr
-- On PRAGMA_SET_OPTIONS reduce production tmEq -> tmOr
-- On PRAGMA_RESET_OPTIONS reduce production tmEq -> tmOr
-- On OPEN reduce production tmEq -> tmOr
-- On OPAQUE reduce production tmEq -> tmOr
-- On NEW_EFFECT reduce production tmEq -> tmOr
-- On MODULE reduce production tmEq -> tmOr
-- On LOGIC reduce production tmEq -> tmOr
-- On LET reduce production tmEq -> tmOr
-- On LENS_PAREN_RIGHT reduce production tmEq -> tmOr
-- On LBRACE reduce production tmEq -> tmOr
-- On KIND reduce production tmEq -> tmOr
-- On IN reduce production tmEq -> tmOr
-- On IMPLIES reduce production tmEq -> tmOr
-- On IFF reduce production tmEq -> tmOr
-- On EXCEPTION reduce production tmEq -> tmOr
-- On EOF reduce production tmEq -> tmOr
-- On END reduce production tmEq -> tmOr
-- On ELSE reduce production tmEq -> tmOr
-- On EFFECT reduce production tmEq -> tmOr
-- On DISJUNCTION reduce production tmEq -> tmOr
-- On DEFAULT reduce production tmEq -> tmOr
-- On CONJUNCTION reduce production tmEq -> tmOr
-- On COMMA reduce production tmEq -> tmOr
-- On COLON_EQUALS reduce production tmEq -> tmOr
-- On BAR_RBRACK reduce production tmEq -> tmOr
-- On BAR reduce production tmEq -> tmOr
-- On ASSUME reduce production tmEq -> tmOr
-- On AND reduce production tmEq -> tmOr

State 202:
tmOr -> tmOr BAR_BAR . tmAnd [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tmCons shift to state 203
-- On tmAnd shift to state 204
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 203:
cmpTerm -> tmCons . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On WITH reduce production cmpTerm -> tmCons
-- On VAL reduce production cmpTerm -> tmCons
-- On TYPE reduce production cmpTerm -> tmCons
-- On TOTAL reduce production cmpTerm -> tmCons
-- On THEN reduce production cmpTerm -> tmCons
-- On SUB_EFFECT reduce production cmpTerm -> tmCons
-- On SUBTYPE reduce production cmpTerm -> tmCons
-- On SUBKIND reduce production cmpTerm -> tmCons
-- On SEMICOLON_SEMICOLON reduce production cmpTerm -> tmCons
-- On SEMICOLON reduce production cmpTerm -> tmCons
-- On RPAREN reduce production cmpTerm -> tmCons
-- On RBRACK reduce production cmpTerm -> tmCons
-- On RBRACE reduce production cmpTerm -> tmCons
-- On PRIVATE reduce production cmpTerm -> tmCons
-- On PRAGMA_SET_OPTIONS reduce production cmpTerm -> tmCons
-- On PRAGMA_RESET_OPTIONS reduce production cmpTerm -> tmCons
-- On OPEN reduce production cmpTerm -> tmCons
-- On OPAQUE reduce production cmpTerm -> tmCons
-- On NEW_EFFECT reduce production cmpTerm -> tmCons
-- On MODULE reduce production cmpTerm -> tmCons
-- On LOGIC reduce production cmpTerm -> tmCons
-- On LET reduce production cmpTerm -> tmCons
-- On LENS_PAREN_RIGHT reduce production cmpTerm -> tmCons
-- On LBRACE reduce production cmpTerm -> tmCons
-- On KIND reduce production cmpTerm -> tmCons
-- On IN reduce production cmpTerm -> tmCons
-- On IMPLIES reduce production cmpTerm -> tmCons
-- On IFF reduce production cmpTerm -> tmCons
-- On EXCEPTION reduce production cmpTerm -> tmCons
-- On EQUALS reduce production cmpTerm -> tmCons
-- On EOF reduce production cmpTerm -> tmCons
-- On END reduce production cmpTerm -> tmCons
-- On ELSE reduce production cmpTerm -> tmCons
-- On EFFECT reduce production cmpTerm -> tmCons
-- On DISJUNCTION reduce production cmpTerm -> tmCons
-- On DEFAULT reduce production cmpTerm -> tmCons
-- On CUSTOM_OP reduce production cmpTerm -> tmCons
-- On CONJUNCTION reduce production cmpTerm -> tmCons
-- On COMMA reduce production cmpTerm -> tmCons
-- On COLON_EQUALS reduce production cmpTerm -> tmCons
-- On BAR_RBRACK reduce production cmpTerm -> tmCons
-- On BAR_BAR reduce production cmpTerm -> tmCons
-- On BAR reduce production cmpTerm -> tmCons
-- On ASSUME reduce production cmpTerm -> tmCons
-- On AND reduce production cmpTerm -> tmCons
-- On AMP_AMP reduce production cmpTerm -> tmCons

State 204:
tmAnd -> tmAnd . AMP_AMP cmpTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
tmOr -> tmOr BAR_BAR tmAnd . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND ]
-- On AMP_AMP shift to state 205
-- On WITH reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On VAL reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On TYPE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On TOTAL reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On THEN reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On SUB_EFFECT reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On SUBTYPE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On SUBKIND reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On SEMICOLON_SEMICOLON reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On SEMICOLON reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On RPAREN reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On RBRACK reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On RBRACE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On PRIVATE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On PRAGMA_SET_OPTIONS reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On PRAGMA_RESET_OPTIONS reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On OPEN reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On OPAQUE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On NEW_EFFECT reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On MODULE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On LOGIC reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On LET reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On LENS_PAREN_RIGHT reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On LBRACE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On KIND reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On IN reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On IMPLIES reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On IFF reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On EXCEPTION reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On EOF reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On END reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On ELSE reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On EFFECT reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On DISJUNCTION reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On DEFAULT reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On CONJUNCTION reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On COMMA reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On COLON_EQUALS reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On BAR_RBRACK reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On BAR_BAR reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On BAR reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On ASSUME reduce production tmOr -> tmOr BAR_BAR tmAnd
-- On AND reduce production tmOr -> tmOr BAR_BAR tmAnd

State 205:
tmAnd -> tmAnd AMP_AMP . cmpTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tmCons shift to state 203
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 226
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 206:
minusOp -> starDivModTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production minusOp -> starDivModTerm
-- On VAL reduce production minusOp -> starDivModTerm
-- On TYPE reduce production minusOp -> starDivModTerm
-- On TOTAL reduce production minusOp -> starDivModTerm
-- On THEN reduce production minusOp -> starDivModTerm
-- On SUB_EFFECT reduce production minusOp -> starDivModTerm
-- On SUBTYPE reduce production minusOp -> starDivModTerm
-- On SUBKIND reduce production minusOp -> starDivModTerm
-- On SEMICOLON_SEMICOLON reduce production minusOp -> starDivModTerm
-- On SEMICOLON reduce production minusOp -> starDivModTerm
-- On RPAREN reduce production minusOp -> starDivModTerm
-- On RBRACK reduce production minusOp -> starDivModTerm
-- On RBRACE reduce production minusOp -> starDivModTerm
-- On RARROW reduce production minusOp -> starDivModTerm
-- On PRIVATE reduce production minusOp -> starDivModTerm
-- On PRAGMA_SET_OPTIONS reduce production minusOp -> starDivModTerm
-- On PRAGMA_RESET_OPTIONS reduce production minusOp -> starDivModTerm
-- On PLUS_OP reduce production minusOp -> starDivModTerm
-- On OPEN reduce production minusOp -> starDivModTerm
-- On OPAQUE reduce production minusOp -> starDivModTerm
-- On NEW_EFFECT reduce production minusOp -> starDivModTerm
-- On MODULE reduce production minusOp -> starDivModTerm
-- On MINUS_OP reduce production minusOp -> starDivModTerm
-- On LOGIC reduce production minusOp -> starDivModTerm
-- On LET reduce production minusOp -> starDivModTerm
-- On LENS_PAREN_RIGHT reduce production minusOp -> starDivModTerm
-- On LBRACE reduce production minusOp -> starDivModTerm
-- On KIND reduce production minusOp -> starDivModTerm
-- On IN reduce production minusOp -> starDivModTerm
-- On IMPLIES reduce production minusOp -> starDivModTerm
-- On IFF reduce production minusOp -> starDivModTerm
-- On EXCEPTION reduce production minusOp -> starDivModTerm
-- On EQUALS reduce production minusOp -> starDivModTerm
-- On EOF reduce production minusOp -> starDivModTerm
-- On END reduce production minusOp -> starDivModTerm
-- On ELSE reduce production minusOp -> starDivModTerm
-- On EFFECT reduce production minusOp -> starDivModTerm
-- On DISJUNCTION reduce production minusOp -> starDivModTerm
-- On DEFAULT reduce production minusOp -> starDivModTerm
-- On CUSTOM_OP reduce production minusOp -> starDivModTerm
-- On CONJUNCTION reduce production minusOp -> starDivModTerm
-- On COMMA reduce production minusOp -> starDivModTerm
-- On COLON_EQUALS reduce production minusOp -> starDivModTerm
-- On COLON_COLON reduce production minusOp -> starDivModTerm
-- On BAR_RBRACK reduce production minusOp -> starDivModTerm
-- On BAR_BAR reduce production minusOp -> starDivModTerm
-- On BAR reduce production minusOp -> starDivModTerm
-- On ASSUME reduce production minusOp -> starDivModTerm
-- On AND reduce production minusOp -> starDivModTerm
-- On AMP_AMP reduce production minusOp -> starDivModTerm
-- On AMP reduce production minusOp -> starDivModTerm

State 207:
product -> productDomain . RARROW product [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On RARROW shift to state 208

State 208:
product -> productDomain RARROW . product [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 209
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 209:
product -> productDomain RARROW product . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On WITH reduce production product -> productDomain RARROW product
-- On VAL reduce production product -> productDomain RARROW product
-- On TYPE reduce production product -> productDomain RARROW product
-- On TOTAL reduce production product -> productDomain RARROW product
-- On THEN reduce production product -> productDomain RARROW product
-- On SUB_EFFECT reduce production product -> productDomain RARROW product
-- On SUBTYPE reduce production product -> productDomain RARROW product
-- On SUBKIND reduce production product -> productDomain RARROW product
-- On SEMICOLON_SEMICOLON reduce production product -> productDomain RARROW product
-- On SEMICOLON reduce production product -> productDomain RARROW product
-- On RPAREN reduce production product -> productDomain RARROW product
-- On RBRACK reduce production product -> productDomain RARROW product
-- On RBRACE reduce production product -> productDomain RARROW product
-- On PRIVATE reduce production product -> productDomain RARROW product
-- On PRAGMA_SET_OPTIONS reduce production product -> productDomain RARROW product
-- On PRAGMA_RESET_OPTIONS reduce production product -> productDomain RARROW product
-- On OPEN reduce production product -> productDomain RARROW product
-- On OPAQUE reduce production product -> productDomain RARROW product
-- On NEW_EFFECT reduce production product -> productDomain RARROW product
-- On MODULE reduce production product -> productDomain RARROW product
-- On LOGIC reduce production product -> productDomain RARROW product
-- On LET reduce production product -> productDomain RARROW product
-- On LENS_PAREN_RIGHT reduce production product -> productDomain RARROW product
-- On LBRACE reduce production product -> productDomain RARROW product
-- On KIND reduce production product -> productDomain RARROW product
-- On IN reduce production product -> productDomain RARROW product
-- On IMPLIES reduce production product -> productDomain RARROW product
-- On IFF reduce production product -> productDomain RARROW product
-- On EXCEPTION reduce production product -> productDomain RARROW product
-- On EQUALS reduce production product -> productDomain RARROW product
-- On EOF reduce production product -> productDomain RARROW product
-- On END reduce production product -> productDomain RARROW product
-- On ELSE reduce production product -> productDomain RARROW product
-- On EFFECT reduce production product -> productDomain RARROW product
-- On DISJUNCTION reduce production product -> productDomain RARROW product
-- On DEFAULT reduce production product -> productDomain RARROW product
-- On CUSTOM_OP reduce production product -> productDomain RARROW product
-- On CONJUNCTION reduce production product -> productDomain RARROW product
-- On COMMA reduce production product -> productDomain RARROW product
-- On COLON_EQUALS reduce production product -> productDomain RARROW product
-- On COLON_COLON reduce production product -> productDomain RARROW product
-- On BAR_RBRACK reduce production product -> productDomain RARROW product
-- On BAR_BAR reduce production product -> productDomain RARROW product
-- On BAR reduce production product -> productDomain RARROW product
-- On ASSUME reduce production product -> productDomain RARROW product
-- On AND reduce production product -> productDomain RARROW product
-- On AMP_AMP reduce production product -> productDomain RARROW product

State 210:
arithTerm -> plusOp . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production arithTerm -> plusOp
-- On VAL reduce production arithTerm -> plusOp
-- On TYPE reduce production arithTerm -> plusOp
-- On TOTAL reduce production arithTerm -> plusOp
-- On THEN reduce production arithTerm -> plusOp
-- On SUB_EFFECT reduce production arithTerm -> plusOp
-- On SUBTYPE reduce production arithTerm -> plusOp
-- On SUBKIND reduce production arithTerm -> plusOp
-- On SEMICOLON_SEMICOLON reduce production arithTerm -> plusOp
-- On SEMICOLON reduce production arithTerm -> plusOp
-- On RPAREN reduce production arithTerm -> plusOp
-- On RBRACK reduce production arithTerm -> plusOp
-- On RBRACE reduce production arithTerm -> plusOp
-- On RARROW reduce production arithTerm -> plusOp
-- On PRIVATE reduce production arithTerm -> plusOp
-- On PRAGMA_SET_OPTIONS reduce production arithTerm -> plusOp
-- On PRAGMA_RESET_OPTIONS reduce production arithTerm -> plusOp
-- On OPEN reduce production arithTerm -> plusOp
-- On OPAQUE reduce production arithTerm -> plusOp
-- On NEW_EFFECT reduce production arithTerm -> plusOp
-- On MODULE reduce production arithTerm -> plusOp
-- On LOGIC reduce production arithTerm -> plusOp
-- On LET reduce production arithTerm -> plusOp
-- On LENS_PAREN_RIGHT reduce production arithTerm -> plusOp
-- On LBRACE reduce production arithTerm -> plusOp
-- On KIND reduce production arithTerm -> plusOp
-- On IN reduce production arithTerm -> plusOp
-- On IMPLIES reduce production arithTerm -> plusOp
-- On IFF reduce production arithTerm -> plusOp
-- On EXCEPTION reduce production arithTerm -> plusOp
-- On EQUALS reduce production arithTerm -> plusOp
-- On EOF reduce production arithTerm -> plusOp
-- On END reduce production arithTerm -> plusOp
-- On ELSE reduce production arithTerm -> plusOp
-- On EFFECT reduce production arithTerm -> plusOp
-- On DISJUNCTION reduce production arithTerm -> plusOp
-- On DEFAULT reduce production arithTerm -> plusOp
-- On CUSTOM_OP reduce production arithTerm -> plusOp
-- On CONJUNCTION reduce production arithTerm -> plusOp
-- On COMMA reduce production arithTerm -> plusOp
-- On COLON_EQUALS reduce production arithTerm -> plusOp
-- On COLON_COLON reduce production arithTerm -> plusOp
-- On BAR_RBRACK reduce production arithTerm -> plusOp
-- On BAR_BAR reduce production arithTerm -> plusOp
-- On BAR reduce production arithTerm -> plusOp
-- On ASSUME reduce production arithTerm -> plusOp
-- On AND reduce production arithTerm -> plusOp
-- On AMP_AMP reduce production arithTerm -> plusOp
-- On AMP reduce production arithTerm -> plusOp

State 211:
minusOp -> minusOp . MINUS_OP starDivModTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
plusOp -> minusOp . PLUS_OP plusOp [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
plusOp -> minusOp . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On PLUS_OP shift to state 212
-- On MINUS_OP shift to state 215
-- On WITH reduce production plusOp -> minusOp
-- On VAL reduce production plusOp -> minusOp
-- On TYPE reduce production plusOp -> minusOp
-- On TOTAL reduce production plusOp -> minusOp
-- On THEN reduce production plusOp -> minusOp
-- On SUB_EFFECT reduce production plusOp -> minusOp
-- On SUBTYPE reduce production plusOp -> minusOp
-- On SUBKIND reduce production plusOp -> minusOp
-- On SEMICOLON_SEMICOLON reduce production plusOp -> minusOp
-- On SEMICOLON reduce production plusOp -> minusOp
-- On RPAREN reduce production plusOp -> minusOp
-- On RBRACK reduce production plusOp -> minusOp
-- On RBRACE reduce production plusOp -> minusOp
-- On RARROW reduce production plusOp -> minusOp
-- On PRIVATE reduce production plusOp -> minusOp
-- On PRAGMA_SET_OPTIONS reduce production plusOp -> minusOp
-- On PRAGMA_RESET_OPTIONS reduce production plusOp -> minusOp
-- On OPEN reduce production plusOp -> minusOp
-- On OPAQUE reduce production plusOp -> minusOp
-- On NEW_EFFECT reduce production plusOp -> minusOp
-- On MODULE reduce production plusOp -> minusOp
-- On LOGIC reduce production plusOp -> minusOp
-- On LET reduce production plusOp -> minusOp
-- On LENS_PAREN_RIGHT reduce production plusOp -> minusOp
-- On LBRACE reduce production plusOp -> minusOp
-- On KIND reduce production plusOp -> minusOp
-- On IN reduce production plusOp -> minusOp
-- On IMPLIES reduce production plusOp -> minusOp
-- On IFF reduce production plusOp -> minusOp
-- On EXCEPTION reduce production plusOp -> minusOp
-- On EQUALS reduce production plusOp -> minusOp
-- On EOF reduce production plusOp -> minusOp
-- On END reduce production plusOp -> minusOp
-- On ELSE reduce production plusOp -> minusOp
-- On EFFECT reduce production plusOp -> minusOp
-- On DISJUNCTION reduce production plusOp -> minusOp
-- On DEFAULT reduce production plusOp -> minusOp
-- On CUSTOM_OP reduce production plusOp -> minusOp
-- On CONJUNCTION reduce production plusOp -> minusOp
-- On COMMA reduce production plusOp -> minusOp
-- On COLON_EQUALS reduce production plusOp -> minusOp
-- On COLON_COLON reduce production plusOp -> minusOp
-- On BAR_RBRACK reduce production plusOp -> minusOp
-- On BAR_BAR reduce production plusOp -> minusOp
-- On BAR reduce production plusOp -> minusOp
-- On ASSUME reduce production plusOp -> minusOp
-- On AND reduce production plusOp -> minusOp
-- On AMP_AMP reduce production plusOp -> minusOp
-- On AMP reduce production plusOp -> minusOp

State 212:
plusOp -> minusOp PLUS_OP . plusOp [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On plusOp shift to state 213
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 214

State 213:
plusOp -> minusOp PLUS_OP plusOp . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production plusOp -> minusOp PLUS_OP plusOp
-- On VAL reduce production plusOp -> minusOp PLUS_OP plusOp
-- On TYPE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On TOTAL reduce production plusOp -> minusOp PLUS_OP plusOp
-- On THEN reduce production plusOp -> minusOp PLUS_OP plusOp
-- On SUB_EFFECT reduce production plusOp -> minusOp PLUS_OP plusOp
-- On SUBTYPE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On SUBKIND reduce production plusOp -> minusOp PLUS_OP plusOp
-- On SEMICOLON_SEMICOLON reduce production plusOp -> minusOp PLUS_OP plusOp
-- On SEMICOLON reduce production plusOp -> minusOp PLUS_OP plusOp
-- On RPAREN reduce production plusOp -> minusOp PLUS_OP plusOp
-- On RBRACK reduce production plusOp -> minusOp PLUS_OP plusOp
-- On RBRACE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On RARROW reduce production plusOp -> minusOp PLUS_OP plusOp
-- On PRIVATE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On PRAGMA_SET_OPTIONS reduce production plusOp -> minusOp PLUS_OP plusOp
-- On PRAGMA_RESET_OPTIONS reduce production plusOp -> minusOp PLUS_OP plusOp
-- On OPEN reduce production plusOp -> minusOp PLUS_OP plusOp
-- On OPAQUE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On NEW_EFFECT reduce production plusOp -> minusOp PLUS_OP plusOp
-- On MODULE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On LOGIC reduce production plusOp -> minusOp PLUS_OP plusOp
-- On LET reduce production plusOp -> minusOp PLUS_OP plusOp
-- On LENS_PAREN_RIGHT reduce production plusOp -> minusOp PLUS_OP plusOp
-- On LBRACE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On KIND reduce production plusOp -> minusOp PLUS_OP plusOp
-- On IN reduce production plusOp -> minusOp PLUS_OP plusOp
-- On IMPLIES reduce production plusOp -> minusOp PLUS_OP plusOp
-- On IFF reduce production plusOp -> minusOp PLUS_OP plusOp
-- On EXCEPTION reduce production plusOp -> minusOp PLUS_OP plusOp
-- On EQUALS reduce production plusOp -> minusOp PLUS_OP plusOp
-- On EOF reduce production plusOp -> minusOp PLUS_OP plusOp
-- On END reduce production plusOp -> minusOp PLUS_OP plusOp
-- On ELSE reduce production plusOp -> minusOp PLUS_OP plusOp
-- On EFFECT reduce production plusOp -> minusOp PLUS_OP plusOp
-- On DISJUNCTION reduce production plusOp -> minusOp PLUS_OP plusOp
-- On DEFAULT reduce production plusOp -> minusOp PLUS_OP plusOp
-- On CUSTOM_OP reduce production plusOp -> minusOp PLUS_OP plusOp
-- On CONJUNCTION reduce production plusOp -> minusOp PLUS_OP plusOp
-- On COMMA reduce production plusOp -> minusOp PLUS_OP plusOp
-- On COLON_EQUALS reduce production plusOp -> minusOp PLUS_OP plusOp
-- On COLON_COLON reduce production plusOp -> minusOp PLUS_OP plusOp
-- On BAR_RBRACK reduce production plusOp -> minusOp PLUS_OP plusOp
-- On BAR_BAR reduce production plusOp -> minusOp PLUS_OP plusOp
-- On BAR reduce production plusOp -> minusOp PLUS_OP plusOp
-- On ASSUME reduce production plusOp -> minusOp PLUS_OP plusOp
-- On AND reduce production plusOp -> minusOp PLUS_OP plusOp
-- On AMP_AMP reduce production plusOp -> minusOp PLUS_OP plusOp
-- On AMP reduce production plusOp -> minusOp PLUS_OP plusOp

State 214:
unaryTerm -> appTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production unaryTerm -> appTerm
-- On VAL reduce production unaryTerm -> appTerm
-- On TYPE reduce production unaryTerm -> appTerm
-- On TOTAL reduce production unaryTerm -> appTerm
-- On THEN reduce production unaryTerm -> appTerm
-- On SUB_EFFECT reduce production unaryTerm -> appTerm
-- On SUBTYPE reduce production unaryTerm -> appTerm
-- On SUBKIND reduce production unaryTerm -> appTerm
-- On STAR reduce production unaryTerm -> appTerm
-- On SEMICOLON_SEMICOLON reduce production unaryTerm -> appTerm
-- On SEMICOLON reduce production unaryTerm -> appTerm
-- On RPAREN reduce production unaryTerm -> appTerm
-- On RBRACK reduce production unaryTerm -> appTerm
-- On RBRACE reduce production unaryTerm -> appTerm
-- On RARROW reduce production unaryTerm -> appTerm
-- On PRIVATE reduce production unaryTerm -> appTerm
-- On PRAGMA_SET_OPTIONS reduce production unaryTerm -> appTerm
-- On PRAGMA_RESET_OPTIONS reduce production unaryTerm -> appTerm
-- On PLUS_OP reduce production unaryTerm -> appTerm
-- On OPEN reduce production unaryTerm -> appTerm
-- On OPAQUE reduce production unaryTerm -> appTerm
-- On NEW_EFFECT reduce production unaryTerm -> appTerm
-- On MODULE reduce production unaryTerm -> appTerm
-- On MINUS_OP reduce production unaryTerm -> appTerm
-- On LOGIC reduce production unaryTerm -> appTerm
-- On LET reduce production unaryTerm -> appTerm
-- On LENS_PAREN_RIGHT reduce production unaryTerm -> appTerm
-- On LBRACE reduce production unaryTerm -> appTerm
-- On KIND reduce production unaryTerm -> appTerm
-- On IN reduce production unaryTerm -> appTerm
-- On IMPLIES reduce production unaryTerm -> appTerm
-- On IFF reduce production unaryTerm -> appTerm
-- On EXCEPTION reduce production unaryTerm -> appTerm
-- On EQUALS reduce production unaryTerm -> appTerm
-- On EOF reduce production unaryTerm -> appTerm
-- On END reduce production unaryTerm -> appTerm
-- On ELSE reduce production unaryTerm -> appTerm
-- On EFFECT reduce production unaryTerm -> appTerm
-- On DIV_MOD_OP reduce production unaryTerm -> appTerm
-- On DISJUNCTION reduce production unaryTerm -> appTerm
-- On DEFAULT reduce production unaryTerm -> appTerm
-- On CUSTOM_OP reduce production unaryTerm -> appTerm
-- On CONJUNCTION reduce production unaryTerm -> appTerm
-- On COMMA reduce production unaryTerm -> appTerm
-- On COLON_EQUALS reduce production unaryTerm -> appTerm
-- On COLON_COLON reduce production unaryTerm -> appTerm
-- On BAR_RBRACK reduce production unaryTerm -> appTerm
-- On BAR_BAR reduce production unaryTerm -> appTerm
-- On BAR reduce production unaryTerm -> appTerm
-- On ASSUME reduce production unaryTerm -> appTerm
-- On AND reduce production unaryTerm -> appTerm
-- On AMP_AMP reduce production unaryTerm -> appTerm
-- On AMP reduce production unaryTerm -> appTerm

State 215:
minusOp -> minusOp MINUS_OP . starDivModTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 216
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 214

State 216:
minusOp -> minusOp MINUS_OP starDivModTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On VAL reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On TYPE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On TOTAL reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On THEN reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On SUB_EFFECT reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On SUBTYPE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On SUBKIND reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On SEMICOLON_SEMICOLON reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On SEMICOLON reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On RPAREN reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On RBRACK reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On RBRACE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On RARROW reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On PRIVATE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On PRAGMA_SET_OPTIONS reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On PRAGMA_RESET_OPTIONS reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On PLUS_OP reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On OPEN reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On OPAQUE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On NEW_EFFECT reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On MODULE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On MINUS_OP reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On LOGIC reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On LET reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On LENS_PAREN_RIGHT reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On LBRACE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On KIND reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On IN reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On IMPLIES reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On IFF reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On EXCEPTION reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On EQUALS reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On EOF reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On END reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On ELSE reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On EFFECT reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On DISJUNCTION reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On DEFAULT reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On CUSTOM_OP reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On CONJUNCTION reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On COMMA reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On COLON_EQUALS reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On COLON_COLON reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On BAR_RBRACK reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On BAR_BAR reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On BAR reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On ASSUME reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On AND reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On AMP_AMP reduce production minusOp -> minusOp MINUS_OP starDivModTerm
-- On AMP reduce production minusOp -> minusOp MINUS_OP starDivModTerm

State 217:
product -> dtupleTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
productDomain -> dtupleTerm . [ RARROW ]
-- On WITH reduce production product -> dtupleTerm
-- On VAL reduce production product -> dtupleTerm
-- On TYPE reduce production product -> dtupleTerm
-- On TOTAL reduce production product -> dtupleTerm
-- On THEN reduce production product -> dtupleTerm
-- On SUB_EFFECT reduce production product -> dtupleTerm
-- On SUBTYPE reduce production product -> dtupleTerm
-- On SUBKIND reduce production product -> dtupleTerm
-- On SEMICOLON_SEMICOLON reduce production product -> dtupleTerm
-- On SEMICOLON reduce production product -> dtupleTerm
-- On RPAREN reduce production product -> dtupleTerm
-- On RBRACK reduce production product -> dtupleTerm
-- On RBRACE reduce production product -> dtupleTerm
-- On RARROW reduce production productDomain -> dtupleTerm
-- On PRIVATE reduce production product -> dtupleTerm
-- On PRAGMA_SET_OPTIONS reduce production product -> dtupleTerm
-- On PRAGMA_RESET_OPTIONS reduce production product -> dtupleTerm
-- On OPEN reduce production product -> dtupleTerm
-- On OPAQUE reduce production product -> dtupleTerm
-- On NEW_EFFECT reduce production product -> dtupleTerm
-- On MODULE reduce production product -> dtupleTerm
-- On LOGIC reduce production product -> dtupleTerm
-- On LET reduce production product -> dtupleTerm
-- On LENS_PAREN_RIGHT reduce production product -> dtupleTerm
-- On LBRACE reduce production product -> dtupleTerm
-- On KIND reduce production product -> dtupleTerm
-- On IN reduce production product -> dtupleTerm
-- On IMPLIES reduce production product -> dtupleTerm
-- On IFF reduce production product -> dtupleTerm
-- On EXCEPTION reduce production product -> dtupleTerm
-- On EQUALS reduce production product -> dtupleTerm
-- On EOF reduce production product -> dtupleTerm
-- On END reduce production product -> dtupleTerm
-- On ELSE reduce production product -> dtupleTerm
-- On EFFECT reduce production product -> dtupleTerm
-- On DISJUNCTION reduce production product -> dtupleTerm
-- On DEFAULT reduce production product -> dtupleTerm
-- On CUSTOM_OP reduce production product -> dtupleTerm
-- On CONJUNCTION reduce production product -> dtupleTerm
-- On COMMA reduce production product -> dtupleTerm
-- On COLON_EQUALS reduce production product -> dtupleTerm
-- On COLON_COLON reduce production product -> dtupleTerm
-- On BAR_RBRACK reduce production product -> dtupleTerm
-- On BAR_BAR reduce production product -> dtupleTerm
-- On BAR reduce production product -> dtupleTerm
-- On ASSUME reduce production product -> dtupleTerm
-- On AND reduce production product -> dtupleTerm
-- On AMP_AMP reduce production product -> dtupleTerm

State 218:
dtupleTerm -> arithTerm . AMP dtupleTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
dtupleTerm -> arithTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On AMP shift to state 219
-- On WITH reduce production dtupleTerm -> arithTerm
-- On VAL reduce production dtupleTerm -> arithTerm
-- On TYPE reduce production dtupleTerm -> arithTerm
-- On TOTAL reduce production dtupleTerm -> arithTerm
-- On THEN reduce production dtupleTerm -> arithTerm
-- On SUB_EFFECT reduce production dtupleTerm -> arithTerm
-- On SUBTYPE reduce production dtupleTerm -> arithTerm
-- On SUBKIND reduce production dtupleTerm -> arithTerm
-- On SEMICOLON_SEMICOLON reduce production dtupleTerm -> arithTerm
-- On SEMICOLON reduce production dtupleTerm -> arithTerm
-- On RPAREN reduce production dtupleTerm -> arithTerm
-- On RBRACK reduce production dtupleTerm -> arithTerm
-- On RBRACE reduce production dtupleTerm -> arithTerm
-- On RARROW reduce production dtupleTerm -> arithTerm
-- On PRIVATE reduce production dtupleTerm -> arithTerm
-- On PRAGMA_SET_OPTIONS reduce production dtupleTerm -> arithTerm
-- On PRAGMA_RESET_OPTIONS reduce production dtupleTerm -> arithTerm
-- On OPEN reduce production dtupleTerm -> arithTerm
-- On OPAQUE reduce production dtupleTerm -> arithTerm
-- On NEW_EFFECT reduce production dtupleTerm -> arithTerm
-- On MODULE reduce production dtupleTerm -> arithTerm
-- On LOGIC reduce production dtupleTerm -> arithTerm
-- On LET reduce production dtupleTerm -> arithTerm
-- On LENS_PAREN_RIGHT reduce production dtupleTerm -> arithTerm
-- On LBRACE reduce production dtupleTerm -> arithTerm
-- On KIND reduce production dtupleTerm -> arithTerm
-- On IN reduce production dtupleTerm -> arithTerm
-- On IMPLIES reduce production dtupleTerm -> arithTerm
-- On IFF reduce production dtupleTerm -> arithTerm
-- On EXCEPTION reduce production dtupleTerm -> arithTerm
-- On EQUALS reduce production dtupleTerm -> arithTerm
-- On EOF reduce production dtupleTerm -> arithTerm
-- On END reduce production dtupleTerm -> arithTerm
-- On ELSE reduce production dtupleTerm -> arithTerm
-- On EFFECT reduce production dtupleTerm -> arithTerm
-- On DISJUNCTION reduce production dtupleTerm -> arithTerm
-- On DEFAULT reduce production dtupleTerm -> arithTerm
-- On CUSTOM_OP reduce production dtupleTerm -> arithTerm
-- On CONJUNCTION reduce production dtupleTerm -> arithTerm
-- On COMMA reduce production dtupleTerm -> arithTerm
-- On COLON_EQUALS reduce production dtupleTerm -> arithTerm
-- On COLON_COLON reduce production dtupleTerm -> arithTerm
-- On BAR_RBRACK reduce production dtupleTerm -> arithTerm
-- On BAR_BAR reduce production dtupleTerm -> arithTerm
-- On BAR reduce production dtupleTerm -> arithTerm
-- On ASSUME reduce production dtupleTerm -> arithTerm
-- On AND reduce production dtupleTerm -> arithTerm
-- On AMP_AMP reduce production dtupleTerm -> arithTerm

State 219:
dtupleTerm -> arithTerm AMP . dtupleTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 220
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On appTerm shift to state 214

State 220:
dtupleTerm -> arithTerm AMP dtupleTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On WITH reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On VAL reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On TYPE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On TOTAL reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On THEN reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On SUB_EFFECT reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On SUBTYPE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On SUBKIND reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On SEMICOLON_SEMICOLON reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On SEMICOLON reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On RPAREN reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On RBRACK reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On RBRACE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On RARROW reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On PRIVATE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On PRAGMA_SET_OPTIONS reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On PRAGMA_RESET_OPTIONS reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On OPEN reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On OPAQUE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On NEW_EFFECT reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On MODULE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On LOGIC reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On LET reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On LENS_PAREN_RIGHT reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On LBRACE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On KIND reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On IN reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On IMPLIES reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On IFF reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On EXCEPTION reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On EQUALS reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On EOF reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On END reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On ELSE reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On EFFECT reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On DISJUNCTION reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On DEFAULT reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On CUSTOM_OP reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On CONJUNCTION reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On COMMA reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On COLON_EQUALS reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On COLON_COLON reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On BAR_RBRACK reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On BAR_BAR reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On BAR reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On ASSUME reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On AND reduce production dtupleTerm -> arithTerm AMP dtupleTerm
-- On AMP_AMP reduce production dtupleTerm -> arithTerm AMP dtupleTerm

State 221:
productDomain -> aqual . dtupleTerm [ RARROW ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 222
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On appTerm shift to state 214

State 222:
productDomain -> aqual dtupleTerm . [ RARROW ]
-- On RARROW reduce production productDomain -> aqual dtupleTerm

State 223:
tmCons -> product . COLON_COLON tmCons [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
tmCons -> product . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On COLON_COLON shift to state 224
-- On WITH reduce production tmCons -> product
-- On VAL reduce production tmCons -> product
-- On TYPE reduce production tmCons -> product
-- On TOTAL reduce production tmCons -> product
-- On THEN reduce production tmCons -> product
-- On SUB_EFFECT reduce production tmCons -> product
-- On SUBTYPE reduce production tmCons -> product
-- On SUBKIND reduce production tmCons -> product
-- On SEMICOLON_SEMICOLON reduce production tmCons -> product
-- On SEMICOLON reduce production tmCons -> product
-- On RPAREN reduce production tmCons -> product
-- On RBRACK reduce production tmCons -> product
-- On RBRACE reduce production tmCons -> product
-- On PRIVATE reduce production tmCons -> product
-- On PRAGMA_SET_OPTIONS reduce production tmCons -> product
-- On PRAGMA_RESET_OPTIONS reduce production tmCons -> product
-- On OPEN reduce production tmCons -> product
-- On OPAQUE reduce production tmCons -> product
-- On NEW_EFFECT reduce production tmCons -> product
-- On MODULE reduce production tmCons -> product
-- On LOGIC reduce production tmCons -> product
-- On LET reduce production tmCons -> product
-- On LENS_PAREN_RIGHT reduce production tmCons -> product
-- On LBRACE reduce production tmCons -> product
-- On KIND reduce production tmCons -> product
-- On IN reduce production tmCons -> product
-- On IMPLIES reduce production tmCons -> product
-- On IFF reduce production tmCons -> product
-- On EXCEPTION reduce production tmCons -> product
-- On EQUALS reduce production tmCons -> product
-- On EOF reduce production tmCons -> product
-- On END reduce production tmCons -> product
-- On ELSE reduce production tmCons -> product
-- On EFFECT reduce production tmCons -> product
-- On DISJUNCTION reduce production tmCons -> product
-- On DEFAULT reduce production tmCons -> product
-- On CUSTOM_OP reduce production tmCons -> product
-- On CONJUNCTION reduce production tmCons -> product
-- On COMMA reduce production tmCons -> product
-- On COLON_EQUALS reduce production tmCons -> product
-- On BAR_RBRACK reduce production tmCons -> product
-- On BAR_BAR reduce production tmCons -> product
-- On BAR reduce production tmCons -> product
-- On ASSUME reduce production tmCons -> product
-- On AND reduce production tmCons -> product
-- On AMP_AMP reduce production tmCons -> product

State 224:
tmCons -> product COLON_COLON . tmCons [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tmCons shift to state 225
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 225:
tmCons -> product COLON_COLON tmCons . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On WITH reduce production tmCons -> product COLON_COLON tmCons
-- On VAL reduce production tmCons -> product COLON_COLON tmCons
-- On TYPE reduce production tmCons -> product COLON_COLON tmCons
-- On TOTAL reduce production tmCons -> product COLON_COLON tmCons
-- On THEN reduce production tmCons -> product COLON_COLON tmCons
-- On SUB_EFFECT reduce production tmCons -> product COLON_COLON tmCons
-- On SUBTYPE reduce production tmCons -> product COLON_COLON tmCons
-- On SUBKIND reduce production tmCons -> product COLON_COLON tmCons
-- On SEMICOLON_SEMICOLON reduce production tmCons -> product COLON_COLON tmCons
-- On SEMICOLON reduce production tmCons -> product COLON_COLON tmCons
-- On RPAREN reduce production tmCons -> product COLON_COLON tmCons
-- On RBRACK reduce production tmCons -> product COLON_COLON tmCons
-- On RBRACE reduce production tmCons -> product COLON_COLON tmCons
-- On PRIVATE reduce production tmCons -> product COLON_COLON tmCons
-- On PRAGMA_SET_OPTIONS reduce production tmCons -> product COLON_COLON tmCons
-- On PRAGMA_RESET_OPTIONS reduce production tmCons -> product COLON_COLON tmCons
-- On OPEN reduce production tmCons -> product COLON_COLON tmCons
-- On OPAQUE reduce production tmCons -> product COLON_COLON tmCons
-- On NEW_EFFECT reduce production tmCons -> product COLON_COLON tmCons
-- On MODULE reduce production tmCons -> product COLON_COLON tmCons
-- On LOGIC reduce production tmCons -> product COLON_COLON tmCons
-- On LET reduce production tmCons -> product COLON_COLON tmCons
-- On LENS_PAREN_RIGHT reduce production tmCons -> product COLON_COLON tmCons
-- On LBRACE reduce production tmCons -> product COLON_COLON tmCons
-- On KIND reduce production tmCons -> product COLON_COLON tmCons
-- On IN reduce production tmCons -> product COLON_COLON tmCons
-- On IMPLIES reduce production tmCons -> product COLON_COLON tmCons
-- On IFF reduce production tmCons -> product COLON_COLON tmCons
-- On EXCEPTION reduce production tmCons -> product COLON_COLON tmCons
-- On EQUALS reduce production tmCons -> product COLON_COLON tmCons
-- On EOF reduce production tmCons -> product COLON_COLON tmCons
-- On END reduce production tmCons -> product COLON_COLON tmCons
-- On ELSE reduce production tmCons -> product COLON_COLON tmCons
-- On EFFECT reduce production tmCons -> product COLON_COLON tmCons
-- On DISJUNCTION reduce production tmCons -> product COLON_COLON tmCons
-- On DEFAULT reduce production tmCons -> product COLON_COLON tmCons
-- On CUSTOM_OP reduce production tmCons -> product COLON_COLON tmCons
-- On CONJUNCTION reduce production tmCons -> product COLON_COLON tmCons
-- On COMMA reduce production tmCons -> product COLON_COLON tmCons
-- On COLON_EQUALS reduce production tmCons -> product COLON_COLON tmCons
-- On BAR_RBRACK reduce production tmCons -> product COLON_COLON tmCons
-- On BAR_BAR reduce production tmCons -> product COLON_COLON tmCons
-- On BAR reduce production tmCons -> product COLON_COLON tmCons
-- On ASSUME reduce production tmCons -> product COLON_COLON tmCons
-- On AND reduce production tmCons -> product COLON_COLON tmCons
-- On AMP_AMP reduce production tmCons -> product COLON_COLON tmCons

State 226:
cmpTerm -> cmpTerm . comparisonOp tmCons [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
tmAnd -> tmAnd AMP_AMP cmpTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On EQUALS shift to state 227
-- On CUSTOM_OP shift to state 228
-- On comparisonOp shift to state 229
-- On WITH reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On VAL reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On TYPE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On TOTAL reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On THEN reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On SUB_EFFECT reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On SUBTYPE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On SUBKIND reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On SEMICOLON_SEMICOLON reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On SEMICOLON reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On RPAREN reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On RBRACK reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On RBRACE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On PRIVATE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On PRAGMA_SET_OPTIONS reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On PRAGMA_RESET_OPTIONS reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On OPEN reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On OPAQUE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On NEW_EFFECT reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On MODULE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On LOGIC reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On LET reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On LENS_PAREN_RIGHT reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On LBRACE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On KIND reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On IN reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On IMPLIES reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On IFF reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On EXCEPTION reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On EOF reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On END reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On ELSE reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On EFFECT reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On DISJUNCTION reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On DEFAULT reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On CONJUNCTION reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On COMMA reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On COLON_EQUALS reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On BAR_RBRACK reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On BAR_BAR reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On BAR reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On ASSUME reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On AND reduce production tmAnd -> tmAnd AMP_AMP cmpTerm
-- On AMP_AMP reduce production tmAnd -> tmAnd AMP_AMP cmpTerm

State 227:
comparisonOp -> EQUALS . [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production comparisonOp -> EQUALS
-- On UINT8 reduce production comparisonOp -> EQUALS
-- On TVAR reduce production comparisonOp -> EQUALS
-- On TRUE reduce production comparisonOp -> EQUALS
-- On TILDE reduce production comparisonOp -> EQUALS
-- On STRING reduce production comparisonOp -> EQUALS
-- On PLUS_OP reduce production comparisonOp -> EQUALS
-- On PERCENT_LBRACK reduce production comparisonOp -> EQUALS
-- On NAME reduce production comparisonOp -> EQUALS
-- On MINUS_OP reduce production comparisonOp -> EQUALS
-- On LPAREN_RPAREN reduce production comparisonOp -> EQUALS
-- On LPAREN reduce production comparisonOp -> EQUALS
-- On LENS_PAREN_LEFT reduce production comparisonOp -> EQUALS
-- On LBRACK_BAR reduce production comparisonOp -> EQUALS
-- On LBRACK reduce production comparisonOp -> EQUALS
-- On LBRACE reduce production comparisonOp -> EQUALS
-- On INT64 reduce production comparisonOp -> EQUALS
-- On INT32 reduce production comparisonOp -> EQUALS
-- On INT reduce production comparisonOp -> EQUALS
-- On IEEE64 reduce production comparisonOp -> EQUALS
-- On IDENT reduce production comparisonOp -> EQUALS
-- On HASH reduce production comparisonOp -> EQUALS
-- On FALSE reduce production comparisonOp -> EQUALS
-- On EQUALS reduce production comparisonOp -> EQUALS
-- On CHAR reduce production comparisonOp -> EQUALS
-- On BYTEARRAY reduce production comparisonOp -> EQUALS
-- On BEGIN reduce production comparisonOp -> EQUALS
-- On BANG_LBRACE reduce production comparisonOp -> EQUALS
-- On BANG reduce production comparisonOp -> EQUALS
-- On ASSERT reduce production comparisonOp -> EQUALS

State 228:
comparisonOp -> CUSTOM_OP . [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production comparisonOp -> CUSTOM_OP
-- On UINT8 reduce production comparisonOp -> CUSTOM_OP
-- On TVAR reduce production comparisonOp -> CUSTOM_OP
-- On TRUE reduce production comparisonOp -> CUSTOM_OP
-- On TILDE reduce production comparisonOp -> CUSTOM_OP
-- On STRING reduce production comparisonOp -> CUSTOM_OP
-- On PLUS_OP reduce production comparisonOp -> CUSTOM_OP
-- On PERCENT_LBRACK reduce production comparisonOp -> CUSTOM_OP
-- On NAME reduce production comparisonOp -> CUSTOM_OP
-- On MINUS_OP reduce production comparisonOp -> CUSTOM_OP
-- On LPAREN_RPAREN reduce production comparisonOp -> CUSTOM_OP
-- On LPAREN reduce production comparisonOp -> CUSTOM_OP
-- On LENS_PAREN_LEFT reduce production comparisonOp -> CUSTOM_OP
-- On LBRACK_BAR reduce production comparisonOp -> CUSTOM_OP
-- On LBRACK reduce production comparisonOp -> CUSTOM_OP
-- On LBRACE reduce production comparisonOp -> CUSTOM_OP
-- On INT64 reduce production comparisonOp -> CUSTOM_OP
-- On INT32 reduce production comparisonOp -> CUSTOM_OP
-- On INT reduce production comparisonOp -> CUSTOM_OP
-- On IEEE64 reduce production comparisonOp -> CUSTOM_OP
-- On IDENT reduce production comparisonOp -> CUSTOM_OP
-- On HASH reduce production comparisonOp -> CUSTOM_OP
-- On FALSE reduce production comparisonOp -> CUSTOM_OP
-- On EQUALS reduce production comparisonOp -> CUSTOM_OP
-- On CHAR reduce production comparisonOp -> CUSTOM_OP
-- On BYTEARRAY reduce production comparisonOp -> CUSTOM_OP
-- On BEGIN reduce production comparisonOp -> CUSTOM_OP
-- On BANG_LBRACE reduce production comparisonOp -> CUSTOM_OP
-- On BANG reduce production comparisonOp -> CUSTOM_OP
-- On ASSERT reduce production comparisonOp -> CUSTOM_OP

State 229:
cmpTerm -> cmpTerm comparisonOp . tmCons [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tmCons shift to state 230
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 230:
cmpTerm -> cmpTerm comparisonOp tmCons . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On WITH reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On VAL reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On TYPE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On TOTAL reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On THEN reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On SUB_EFFECT reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On SUBTYPE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On SUBKIND reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On SEMICOLON_SEMICOLON reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On SEMICOLON reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On RPAREN reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On RBRACK reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On RBRACE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On PRIVATE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On PRAGMA_SET_OPTIONS reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On PRAGMA_RESET_OPTIONS reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On OPEN reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On OPAQUE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On NEW_EFFECT reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On MODULE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On LOGIC reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On LET reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On LENS_PAREN_RIGHT reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On LBRACE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On KIND reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On IN reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On IMPLIES reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On IFF reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On EXCEPTION reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On EQUALS reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On EOF reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On END reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On ELSE reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On EFFECT reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On DISJUNCTION reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On DEFAULT reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On CUSTOM_OP reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On CONJUNCTION reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On COMMA reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On COLON_EQUALS reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On BAR_RBRACK reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On BAR_BAR reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On BAR reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On ASSUME reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On AND reduce production cmpTerm -> cmpTerm comparisonOp tmCons
-- On AMP_AMP reduce production cmpTerm -> cmpTerm comparisonOp tmCons

State 231:
cmpTerm -> cmpTerm . comparisonOp tmCons [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
tmAnd -> cmpTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
-- On EQUALS shift to state 227
-- On CUSTOM_OP shift to state 228
-- On comparisonOp shift to state 229
-- On WITH reduce production tmAnd -> cmpTerm
-- On VAL reduce production tmAnd -> cmpTerm
-- On TYPE reduce production tmAnd -> cmpTerm
-- On TOTAL reduce production tmAnd -> cmpTerm
-- On THEN reduce production tmAnd -> cmpTerm
-- On SUB_EFFECT reduce production tmAnd -> cmpTerm
-- On SUBTYPE reduce production tmAnd -> cmpTerm
-- On SUBKIND reduce production tmAnd -> cmpTerm
-- On SEMICOLON_SEMICOLON reduce production tmAnd -> cmpTerm
-- On SEMICOLON reduce production tmAnd -> cmpTerm
-- On RPAREN reduce production tmAnd -> cmpTerm
-- On RBRACK reduce production tmAnd -> cmpTerm
-- On RBRACE reduce production tmAnd -> cmpTerm
-- On PRIVATE reduce production tmAnd -> cmpTerm
-- On PRAGMA_SET_OPTIONS reduce production tmAnd -> cmpTerm
-- On PRAGMA_RESET_OPTIONS reduce production tmAnd -> cmpTerm
-- On OPEN reduce production tmAnd -> cmpTerm
-- On OPAQUE reduce production tmAnd -> cmpTerm
-- On NEW_EFFECT reduce production tmAnd -> cmpTerm
-- On MODULE reduce production tmAnd -> cmpTerm
-- On LOGIC reduce production tmAnd -> cmpTerm
-- On LET reduce production tmAnd -> cmpTerm
-- On LENS_PAREN_RIGHT reduce production tmAnd -> cmpTerm
-- On LBRACE reduce production tmAnd -> cmpTerm
-- On KIND reduce production tmAnd -> cmpTerm
-- On IN reduce production tmAnd -> cmpTerm
-- On IMPLIES reduce production tmAnd -> cmpTerm
-- On IFF reduce production tmAnd -> cmpTerm
-- On EXCEPTION reduce production tmAnd -> cmpTerm
-- On EOF reduce production tmAnd -> cmpTerm
-- On END reduce production tmAnd -> cmpTerm
-- On ELSE reduce production tmAnd -> cmpTerm
-- On EFFECT reduce production tmAnd -> cmpTerm
-- On DISJUNCTION reduce production tmAnd -> cmpTerm
-- On DEFAULT reduce production tmAnd -> cmpTerm
-- On CONJUNCTION reduce production tmAnd -> cmpTerm
-- On COMMA reduce production tmAnd -> cmpTerm
-- On COLON_EQUALS reduce production tmAnd -> cmpTerm
-- On BAR_RBRACK reduce production tmAnd -> cmpTerm
-- On BAR_BAR reduce production tmAnd -> cmpTerm
-- On BAR reduce production tmAnd -> cmpTerm
-- On ASSUME reduce production tmAnd -> cmpTerm
-- On AND reduce production tmAnd -> cmpTerm
-- On AMP_AMP reduce production tmAnd -> cmpTerm

State 232:
tmIff -> tmImplies . IFF tmIff [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
tmIff -> tmImplies . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On IFF shift to state 233
-- On WITH reduce production tmIff -> tmImplies
-- On VAL reduce production tmIff -> tmImplies
-- On TYPE reduce production tmIff -> tmImplies
-- On TOTAL reduce production tmIff -> tmImplies
-- On THEN reduce production tmIff -> tmImplies
-- On SUB_EFFECT reduce production tmIff -> tmImplies
-- On SUBTYPE reduce production tmIff -> tmImplies
-- On SUBKIND reduce production tmIff -> tmImplies
-- On SEMICOLON_SEMICOLON reduce production tmIff -> tmImplies
-- On SEMICOLON reduce production tmIff -> tmImplies
-- On RPAREN reduce production tmIff -> tmImplies
-- On RBRACK reduce production tmIff -> tmImplies
-- On RBRACE reduce production tmIff -> tmImplies
-- On PRIVATE reduce production tmIff -> tmImplies
-- On PRAGMA_SET_OPTIONS reduce production tmIff -> tmImplies
-- On PRAGMA_RESET_OPTIONS reduce production tmIff -> tmImplies
-- On OPEN reduce production tmIff -> tmImplies
-- On OPAQUE reduce production tmIff -> tmImplies
-- On NEW_EFFECT reduce production tmIff -> tmImplies
-- On MODULE reduce production tmIff -> tmImplies
-- On LOGIC reduce production tmIff -> tmImplies
-- On LET reduce production tmIff -> tmImplies
-- On LBRACE reduce production tmIff -> tmImplies
-- On KIND reduce production tmIff -> tmImplies
-- On IN reduce production tmIff -> tmImplies
-- On EXCEPTION reduce production tmIff -> tmImplies
-- On EOF reduce production tmIff -> tmImplies
-- On END reduce production tmIff -> tmImplies
-- On ELSE reduce production tmIff -> tmImplies
-- On EFFECT reduce production tmIff -> tmImplies
-- On DEFAULT reduce production tmIff -> tmImplies
-- On BAR_RBRACK reduce production tmIff -> tmImplies
-- On BAR reduce production tmIff -> tmImplies
-- On ASSUME reduce production tmIff -> tmImplies
-- On AND reduce production tmIff -> tmImplies

State 233:
tmIff -> tmImplies IFF . tmIff [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 234
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 234:
tmIff -> tmImplies IFF tmIff . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production tmIff -> tmImplies IFF tmIff
-- On VAL reduce production tmIff -> tmImplies IFF tmIff
-- On TYPE reduce production tmIff -> tmImplies IFF tmIff
-- On TOTAL reduce production tmIff -> tmImplies IFF tmIff
-- On THEN reduce production tmIff -> tmImplies IFF tmIff
-- On SUB_EFFECT reduce production tmIff -> tmImplies IFF tmIff
-- On SUBTYPE reduce production tmIff -> tmImplies IFF tmIff
-- On SUBKIND reduce production tmIff -> tmImplies IFF tmIff
-- On SEMICOLON_SEMICOLON reduce production tmIff -> tmImplies IFF tmIff
-- On SEMICOLON reduce production tmIff -> tmImplies IFF tmIff
-- On RPAREN reduce production tmIff -> tmImplies IFF tmIff
-- On RBRACK reduce production tmIff -> tmImplies IFF tmIff
-- On RBRACE reduce production tmIff -> tmImplies IFF tmIff
-- On PRIVATE reduce production tmIff -> tmImplies IFF tmIff
-- On PRAGMA_SET_OPTIONS reduce production tmIff -> tmImplies IFF tmIff
-- On PRAGMA_RESET_OPTIONS reduce production tmIff -> tmImplies IFF tmIff
-- On OPEN reduce production tmIff -> tmImplies IFF tmIff
-- On OPAQUE reduce production tmIff -> tmImplies IFF tmIff
-- On NEW_EFFECT reduce production tmIff -> tmImplies IFF tmIff
-- On MODULE reduce production tmIff -> tmImplies IFF tmIff
-- On LOGIC reduce production tmIff -> tmImplies IFF tmIff
-- On LET reduce production tmIff -> tmImplies IFF tmIff
-- On LBRACE reduce production tmIff -> tmImplies IFF tmIff
-- On KIND reduce production tmIff -> tmImplies IFF tmIff
-- On IN reduce production tmIff -> tmImplies IFF tmIff
-- On EXCEPTION reduce production tmIff -> tmImplies IFF tmIff
-- On EOF reduce production tmIff -> tmImplies IFF tmIff
-- On END reduce production tmIff -> tmImplies IFF tmIff
-- On ELSE reduce production tmIff -> tmImplies IFF tmIff
-- On EFFECT reduce production tmIff -> tmImplies IFF tmIff
-- On DEFAULT reduce production tmIff -> tmImplies IFF tmIff
-- On BAR_RBRACK reduce production tmIff -> tmImplies IFF tmIff
-- On BAR reduce production tmIff -> tmImplies IFF tmIff
-- On ASSUME reduce production tmIff -> tmImplies IFF tmIff
-- On AND reduce production tmIff -> tmImplies IFF tmIff

State 235:
tmEq -> tmEq . COLON_EQUALS tmOr [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR ASSUME AND ]
tupleN -> tmEq . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
tupleN -> tmEq . COMMA tupleN [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
-- On COMMA shift to state 236
-- On COLON_EQUALS shift to state 239
-- On WITH reduce production tupleN -> tmEq
-- On VAL reduce production tupleN -> tmEq
-- On TYPE reduce production tupleN -> tmEq
-- On TOTAL reduce production tupleN -> tmEq
-- On THEN reduce production tupleN -> tmEq
-- On SUB_EFFECT reduce production tupleN -> tmEq
-- On SUBTYPE reduce production tupleN -> tmEq
-- On SUBKIND reduce production tupleN -> tmEq
-- On SEMICOLON_SEMICOLON reduce production tupleN -> tmEq
-- On SEMICOLON reduce production tupleN -> tmEq
-- On RPAREN reduce production tupleN -> tmEq
-- On RBRACK reduce production tupleN -> tmEq
-- On RBRACE reduce production tupleN -> tmEq
-- On PRIVATE reduce production tupleN -> tmEq
-- On PRAGMA_SET_OPTIONS reduce production tupleN -> tmEq
-- On PRAGMA_RESET_OPTIONS reduce production tupleN -> tmEq
-- On OPEN reduce production tupleN -> tmEq
-- On OPAQUE reduce production tupleN -> tmEq
-- On NEW_EFFECT reduce production tupleN -> tmEq
-- On MODULE reduce production tupleN -> tmEq
-- On LOGIC reduce production tupleN -> tmEq
-- On LET reduce production tupleN -> tmEq
-- On LENS_PAREN_RIGHT reduce production tupleN -> tmEq
-- On LBRACE reduce production tupleN -> tmEq
-- On KIND reduce production tupleN -> tmEq
-- On IN reduce production tupleN -> tmEq
-- On IMPLIES reduce production tupleN -> tmEq
-- On IFF reduce production tupleN -> tmEq
-- On EXCEPTION reduce production tupleN -> tmEq
-- On EOF reduce production tupleN -> tmEq
-- On END reduce production tupleN -> tmEq
-- On ELSE reduce production tupleN -> tmEq
-- On EFFECT reduce production tupleN -> tmEq
-- On DISJUNCTION reduce production tupleN -> tmEq
-- On DEFAULT reduce production tupleN -> tmEq
-- On CONJUNCTION reduce production tupleN -> tmEq
-- On BAR_RBRACK reduce production tupleN -> tmEq
-- On BAR reduce production tupleN -> tmEq
-- On ASSUME reduce production tupleN -> tmEq
-- On AND reduce production tupleN -> tmEq

State 236:
tupleN -> tmEq COMMA . tupleN [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 237
-- On tmOr shift to state 201
-- On tmEq shift to state 235
-- On tmCons shift to state 203
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 237:
tupleN -> tmEq COMMA tupleN . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production tupleN -> tmEq COMMA tupleN
-- On VAL reduce production tupleN -> tmEq COMMA tupleN
-- On TYPE reduce production tupleN -> tmEq COMMA tupleN
-- On TOTAL reduce production tupleN -> tmEq COMMA tupleN
-- On THEN reduce production tupleN -> tmEq COMMA tupleN
-- On SUB_EFFECT reduce production tupleN -> tmEq COMMA tupleN
-- On SUBTYPE reduce production tupleN -> tmEq COMMA tupleN
-- On SUBKIND reduce production tupleN -> tmEq COMMA tupleN
-- On SEMICOLON_SEMICOLON reduce production tupleN -> tmEq COMMA tupleN
-- On SEMICOLON reduce production tupleN -> tmEq COMMA tupleN
-- On RPAREN reduce production tupleN -> tmEq COMMA tupleN
-- On RBRACK reduce production tupleN -> tmEq COMMA tupleN
-- On RBRACE reduce production tupleN -> tmEq COMMA tupleN
-- On PRIVATE reduce production tupleN -> tmEq COMMA tupleN
-- On PRAGMA_SET_OPTIONS reduce production tupleN -> tmEq COMMA tupleN
-- On PRAGMA_RESET_OPTIONS reduce production tupleN -> tmEq COMMA tupleN
-- On OPEN reduce production tupleN -> tmEq COMMA tupleN
-- On OPAQUE reduce production tupleN -> tmEq COMMA tupleN
-- On NEW_EFFECT reduce production tupleN -> tmEq COMMA tupleN
-- On MODULE reduce production tupleN -> tmEq COMMA tupleN
-- On LOGIC reduce production tupleN -> tmEq COMMA tupleN
-- On LET reduce production tupleN -> tmEq COMMA tupleN
-- On LENS_PAREN_RIGHT reduce production tupleN -> tmEq COMMA tupleN
-- On LBRACE reduce production tupleN -> tmEq COMMA tupleN
-- On KIND reduce production tupleN -> tmEq COMMA tupleN
-- On IN reduce production tupleN -> tmEq COMMA tupleN
-- On IMPLIES reduce production tupleN -> tmEq COMMA tupleN
-- On IFF reduce production tupleN -> tmEq COMMA tupleN
-- On EXCEPTION reduce production tupleN -> tmEq COMMA tupleN
-- On EOF reduce production tupleN -> tmEq COMMA tupleN
-- On END reduce production tupleN -> tmEq COMMA tupleN
-- On ELSE reduce production tupleN -> tmEq COMMA tupleN
-- On EFFECT reduce production tupleN -> tmEq COMMA tupleN
-- On DISJUNCTION reduce production tupleN -> tmEq COMMA tupleN
-- On DEFAULT reduce production tupleN -> tmEq COMMA tupleN
-- On CONJUNCTION reduce production tupleN -> tmEq COMMA tupleN
-- On BAR_RBRACK reduce production tupleN -> tmEq COMMA tupleN
-- On BAR reduce production tupleN -> tmEq COMMA tupleN
-- On ASSUME reduce production tupleN -> tmEq COMMA tupleN
-- On AND reduce production tupleN -> tmEq COMMA tupleN

State 238:
tmAnd -> tmAnd . AMP_AMP cmpTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP ]
tmOr -> tmAnd . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND ]
-- On AMP_AMP shift to state 205
-- On WITH reduce production tmOr -> tmAnd
-- On VAL reduce production tmOr -> tmAnd
-- On TYPE reduce production tmOr -> tmAnd
-- On TOTAL reduce production tmOr -> tmAnd
-- On THEN reduce production tmOr -> tmAnd
-- On SUB_EFFECT reduce production tmOr -> tmAnd
-- On SUBTYPE reduce production tmOr -> tmAnd
-- On SUBKIND reduce production tmOr -> tmAnd
-- On SEMICOLON_SEMICOLON reduce production tmOr -> tmAnd
-- On SEMICOLON reduce production tmOr -> tmAnd
-- On RPAREN reduce production tmOr -> tmAnd
-- On RBRACK reduce production tmOr -> tmAnd
-- On RBRACE reduce production tmOr -> tmAnd
-- On PRIVATE reduce production tmOr -> tmAnd
-- On PRAGMA_SET_OPTIONS reduce production tmOr -> tmAnd
-- On PRAGMA_RESET_OPTIONS reduce production tmOr -> tmAnd
-- On OPEN reduce production tmOr -> tmAnd
-- On OPAQUE reduce production tmOr -> tmAnd
-- On NEW_EFFECT reduce production tmOr -> tmAnd
-- On MODULE reduce production tmOr -> tmAnd
-- On LOGIC reduce production tmOr -> tmAnd
-- On LET reduce production tmOr -> tmAnd
-- On LENS_PAREN_RIGHT reduce production tmOr -> tmAnd
-- On LBRACE reduce production tmOr -> tmAnd
-- On KIND reduce production tmOr -> tmAnd
-- On IN reduce production tmOr -> tmAnd
-- On IMPLIES reduce production tmOr -> tmAnd
-- On IFF reduce production tmOr -> tmAnd
-- On EXCEPTION reduce production tmOr -> tmAnd
-- On EOF reduce production tmOr -> tmAnd
-- On END reduce production tmOr -> tmAnd
-- On ELSE reduce production tmOr -> tmAnd
-- On EFFECT reduce production tmOr -> tmAnd
-- On DISJUNCTION reduce production tmOr -> tmAnd
-- On DEFAULT reduce production tmOr -> tmAnd
-- On CONJUNCTION reduce production tmOr -> tmAnd
-- On COMMA reduce production tmOr -> tmAnd
-- On COLON_EQUALS reduce production tmOr -> tmAnd
-- On BAR_RBRACK reduce production tmOr -> tmAnd
-- On BAR_BAR reduce production tmOr -> tmAnd
-- On BAR reduce production tmOr -> tmAnd
-- On ASSUME reduce production tmOr -> tmAnd
-- On AND reduce production tmOr -> tmAnd

State 239:
tmEq -> tmEq COLON_EQUALS . tmOr [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tmOr shift to state 240
-- On tmCons shift to state 203
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 240:
tmEq -> tmEq COLON_EQUALS tmOr . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR ASSUME AND ]
tmOr -> tmOr . BAR_BAR tmAnd [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND ]
-- On BAR_BAR shift to state 202
-- On WITH reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On VAL reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On TYPE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On TOTAL reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On THEN reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On SUB_EFFECT reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On SUBTYPE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On SUBKIND reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On SEMICOLON_SEMICOLON reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On SEMICOLON reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On RPAREN reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On RBRACK reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On RBRACE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On PRIVATE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On PRAGMA_SET_OPTIONS reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On PRAGMA_RESET_OPTIONS reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On OPEN reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On OPAQUE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On NEW_EFFECT reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On MODULE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On LOGIC reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On LET reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On LENS_PAREN_RIGHT reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On LBRACE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On KIND reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On IN reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On IMPLIES reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On IFF reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On EXCEPTION reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On EOF reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On END reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On ELSE reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On EFFECT reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On DISJUNCTION reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On DEFAULT reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On CONJUNCTION reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On COMMA reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On COLON_EQUALS reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On BAR_RBRACK reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On BAR reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On ASSUME reduce production tmEq -> tmEq COLON_EQUALS tmOr
-- On AND reduce production tmEq -> tmEq COLON_EQUALS tmOr

State 241:
tmDisjunction -> tmDisjunction . DISJUNCTION tmConjunction [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BAR_RBRACK BAR ASSUME AND ]
tmImplies -> tmDisjunction . IMPLIES tmImplies [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IFF EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
tmImplies -> tmDisjunction . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IFF EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On IMPLIES shift to state 242
-- On DISJUNCTION shift to state 247
-- On WITH reduce production tmImplies -> tmDisjunction
-- On VAL reduce production tmImplies -> tmDisjunction
-- On TYPE reduce production tmImplies -> tmDisjunction
-- On TOTAL reduce production tmImplies -> tmDisjunction
-- On THEN reduce production tmImplies -> tmDisjunction
-- On SUB_EFFECT reduce production tmImplies -> tmDisjunction
-- On SUBTYPE reduce production tmImplies -> tmDisjunction
-- On SUBKIND reduce production tmImplies -> tmDisjunction
-- On SEMICOLON_SEMICOLON reduce production tmImplies -> tmDisjunction
-- On SEMICOLON reduce production tmImplies -> tmDisjunction
-- On RPAREN reduce production tmImplies -> tmDisjunction
-- On RBRACK reduce production tmImplies -> tmDisjunction
-- On RBRACE reduce production tmImplies -> tmDisjunction
-- On PRIVATE reduce production tmImplies -> tmDisjunction
-- On PRAGMA_SET_OPTIONS reduce production tmImplies -> tmDisjunction
-- On PRAGMA_RESET_OPTIONS reduce production tmImplies -> tmDisjunction
-- On OPEN reduce production tmImplies -> tmDisjunction
-- On OPAQUE reduce production tmImplies -> tmDisjunction
-- On NEW_EFFECT reduce production tmImplies -> tmDisjunction
-- On MODULE reduce production tmImplies -> tmDisjunction
-- On LOGIC reduce production tmImplies -> tmDisjunction
-- On LET reduce production tmImplies -> tmDisjunction
-- On LBRACE reduce production tmImplies -> tmDisjunction
-- On KIND reduce production tmImplies -> tmDisjunction
-- On IN reduce production tmImplies -> tmDisjunction
-- On IFF reduce production tmImplies -> tmDisjunction
-- On EXCEPTION reduce production tmImplies -> tmDisjunction
-- On EOF reduce production tmImplies -> tmDisjunction
-- On END reduce production tmImplies -> tmDisjunction
-- On ELSE reduce production tmImplies -> tmDisjunction
-- On EFFECT reduce production tmImplies -> tmDisjunction
-- On DEFAULT reduce production tmImplies -> tmDisjunction
-- On BAR_RBRACK reduce production tmImplies -> tmDisjunction
-- On BAR reduce production tmImplies -> tmDisjunction
-- On ASSUME reduce production tmImplies -> tmDisjunction
-- On AND reduce production tmImplies -> tmDisjunction

State 242:
tmImplies -> tmDisjunction IMPLIES . tmImplies [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IFF EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 243
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 243:
tmImplies -> tmDisjunction IMPLIES tmImplies . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IFF EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On VAL reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On TYPE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On TOTAL reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On THEN reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On SUB_EFFECT reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On SUBTYPE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On SUBKIND reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On SEMICOLON_SEMICOLON reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On SEMICOLON reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On RPAREN reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On RBRACK reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On RBRACE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On PRIVATE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On PRAGMA_SET_OPTIONS reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On PRAGMA_RESET_OPTIONS reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On OPEN reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On OPAQUE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On NEW_EFFECT reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On MODULE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On LOGIC reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On LET reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On LBRACE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On KIND reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On IN reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On IFF reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On EXCEPTION reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On EOF reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On END reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On ELSE reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On EFFECT reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On DEFAULT reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On BAR_RBRACK reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On BAR reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On ASSUME reduce production tmImplies -> tmDisjunction IMPLIES tmImplies
-- On AND reduce production tmImplies -> tmDisjunction IMPLIES tmImplies

State 244:
tmConjunction -> tmConjunction . CONJUNCTION tmTuple [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
tmDisjunction -> tmConjunction . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On CONJUNCTION shift to state 245
-- On WITH reduce production tmDisjunction -> tmConjunction
-- On VAL reduce production tmDisjunction -> tmConjunction
-- On TYPE reduce production tmDisjunction -> tmConjunction
-- On TOTAL reduce production tmDisjunction -> tmConjunction
-- On THEN reduce production tmDisjunction -> tmConjunction
-- On SUB_EFFECT reduce production tmDisjunction -> tmConjunction
-- On SUBTYPE reduce production tmDisjunction -> tmConjunction
-- On SUBKIND reduce production tmDisjunction -> tmConjunction
-- On SEMICOLON_SEMICOLON reduce production tmDisjunction -> tmConjunction
-- On SEMICOLON reduce production tmDisjunction -> tmConjunction
-- On RPAREN reduce production tmDisjunction -> tmConjunction
-- On RBRACK reduce production tmDisjunction -> tmConjunction
-- On RBRACE reduce production tmDisjunction -> tmConjunction
-- On PRIVATE reduce production tmDisjunction -> tmConjunction
-- On PRAGMA_SET_OPTIONS reduce production tmDisjunction -> tmConjunction
-- On PRAGMA_RESET_OPTIONS reduce production tmDisjunction -> tmConjunction
-- On OPEN reduce production tmDisjunction -> tmConjunction
-- On OPAQUE reduce production tmDisjunction -> tmConjunction
-- On NEW_EFFECT reduce production tmDisjunction -> tmConjunction
-- On MODULE reduce production tmDisjunction -> tmConjunction
-- On LOGIC reduce production tmDisjunction -> tmConjunction
-- On LET reduce production tmDisjunction -> tmConjunction
-- On LBRACE reduce production tmDisjunction -> tmConjunction
-- On KIND reduce production tmDisjunction -> tmConjunction
-- On IN reduce production tmDisjunction -> tmConjunction
-- On IMPLIES reduce production tmDisjunction -> tmConjunction
-- On IFF reduce production tmDisjunction -> tmConjunction
-- On EXCEPTION reduce production tmDisjunction -> tmConjunction
-- On EOF reduce production tmDisjunction -> tmConjunction
-- On END reduce production tmDisjunction -> tmConjunction
-- On ELSE reduce production tmDisjunction -> tmConjunction
-- On EFFECT reduce production tmDisjunction -> tmConjunction
-- On DISJUNCTION reduce production tmDisjunction -> tmConjunction
-- On DEFAULT reduce production tmDisjunction -> tmConjunction
-- On BAR_RBRACK reduce production tmDisjunction -> tmConjunction
-- On BAR reduce production tmDisjunction -> tmConjunction
-- On ASSUME reduce production tmDisjunction -> tmConjunction
-- On AND reduce production tmDisjunction -> tmConjunction

State 245:
tmConjunction -> tmConjunction CONJUNCTION . tmTuple [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 246
-- On tmOr shift to state 201
-- On tmEq shift to state 235
-- On tmCons shift to state 203
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 246:
tmConjunction -> tmConjunction CONJUNCTION tmTuple . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On VAL reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On TYPE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On TOTAL reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On THEN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SUB_EFFECT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SUBTYPE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SUBKIND reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SEMICOLON_SEMICOLON reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On SEMICOLON reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On RPAREN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On RBRACK reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On RBRACE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On PRIVATE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On PRAGMA_SET_OPTIONS reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On PRAGMA_RESET_OPTIONS reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On OPEN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On OPAQUE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On NEW_EFFECT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On MODULE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On LOGIC reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On LET reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On LBRACE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On KIND reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On IN reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On IMPLIES reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On IFF reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On EXCEPTION reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On EOF reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On END reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On ELSE reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On EFFECT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On DISJUNCTION reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On DEFAULT reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On CONJUNCTION reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On BAR_RBRACK reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On BAR reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On ASSUME reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple
-- On AND reduce production tmConjunction -> tmConjunction CONJUNCTION tmTuple

State 247:
tmDisjunction -> tmDisjunction DISJUNCTION . tmConjunction [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmEq shift to state 235
-- On tmCons shift to state 203
-- On tmConjunction shift to state 248
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 248:
tmConjunction -> tmConjunction . CONJUNCTION tmTuple [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND ]
tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On CONJUNCTION shift to state 245
-- On WITH reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On VAL reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On TYPE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On TOTAL reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On THEN reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On SUB_EFFECT reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On SUBTYPE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On SUBKIND reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On SEMICOLON_SEMICOLON reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On SEMICOLON reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On RPAREN reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On RBRACK reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On RBRACE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On PRIVATE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On PRAGMA_SET_OPTIONS reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On PRAGMA_RESET_OPTIONS reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On OPEN reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On OPAQUE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On NEW_EFFECT reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On MODULE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On LOGIC reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On LET reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On LBRACE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On KIND reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On IN reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On IMPLIES reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On IFF reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On EXCEPTION reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On EOF reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On END reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On ELSE reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On EFFECT reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On DISJUNCTION reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On DEFAULT reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On BAR_RBRACK reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On BAR reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On ASSUME reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction
-- On AND reduce production tmDisjunction -> tmDisjunction DISJUNCTION tmConjunction

State 249:
simpleTerm -> tmIff . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production simpleTerm -> tmIff
-- On VAL reduce production simpleTerm -> tmIff
-- On TYPE reduce production simpleTerm -> tmIff
-- On TOTAL reduce production simpleTerm -> tmIff
-- On THEN reduce production simpleTerm -> tmIff
-- On SUB_EFFECT reduce production simpleTerm -> tmIff
-- On SUBTYPE reduce production simpleTerm -> tmIff
-- On SUBKIND reduce production simpleTerm -> tmIff
-- On SEMICOLON_SEMICOLON reduce production simpleTerm -> tmIff
-- On SEMICOLON reduce production simpleTerm -> tmIff
-- On RPAREN reduce production simpleTerm -> tmIff
-- On RBRACK reduce production simpleTerm -> tmIff
-- On RBRACE reduce production simpleTerm -> tmIff
-- On PRIVATE reduce production simpleTerm -> tmIff
-- On PRAGMA_SET_OPTIONS reduce production simpleTerm -> tmIff
-- On PRAGMA_RESET_OPTIONS reduce production simpleTerm -> tmIff
-- On OPEN reduce production simpleTerm -> tmIff
-- On OPAQUE reduce production simpleTerm -> tmIff
-- On NEW_EFFECT reduce production simpleTerm -> tmIff
-- On MODULE reduce production simpleTerm -> tmIff
-- On LOGIC reduce production simpleTerm -> tmIff
-- On LET reduce production simpleTerm -> tmIff
-- On LBRACE reduce production simpleTerm -> tmIff
-- On KIND reduce production simpleTerm -> tmIff
-- On IN reduce production simpleTerm -> tmIff
-- On EXCEPTION reduce production simpleTerm -> tmIff
-- On EOF reduce production simpleTerm -> tmIff
-- On END reduce production simpleTerm -> tmIff
-- On ELSE reduce production simpleTerm -> tmIff
-- On EFFECT reduce production simpleTerm -> tmIff
-- On DEFAULT reduce production simpleTerm -> tmIff
-- On BAR_RBRACK reduce production simpleTerm -> tmIff
-- On BAR reduce production simpleTerm -> tmIff
-- On ASSUME reduce production simpleTerm -> tmIff
-- On AND reduce production simpleTerm -> tmIff

State 250:
typ -> simpleTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production typ -> simpleTerm
-- On VAL reduce production typ -> simpleTerm
-- On TYPE reduce production typ -> simpleTerm
-- On TOTAL reduce production typ -> simpleTerm
-- On THEN reduce production typ -> simpleTerm
-- On SUB_EFFECT reduce production typ -> simpleTerm
-- On SUBTYPE reduce production typ -> simpleTerm
-- On SUBKIND reduce production typ -> simpleTerm
-- On SEMICOLON_SEMICOLON reduce production typ -> simpleTerm
-- On SEMICOLON reduce production typ -> simpleTerm
-- On RPAREN reduce production typ -> simpleTerm
-- On RBRACK reduce production typ -> simpleTerm
-- On RBRACE reduce production typ -> simpleTerm
-- On PRIVATE reduce production typ -> simpleTerm
-- On PRAGMA_SET_OPTIONS reduce production typ -> simpleTerm
-- On PRAGMA_RESET_OPTIONS reduce production typ -> simpleTerm
-- On OPEN reduce production typ -> simpleTerm
-- On OPAQUE reduce production typ -> simpleTerm
-- On NEW_EFFECT reduce production typ -> simpleTerm
-- On MODULE reduce production typ -> simpleTerm
-- On LOGIC reduce production typ -> simpleTerm
-- On LET reduce production typ -> simpleTerm
-- On LBRACE reduce production typ -> simpleTerm
-- On KIND reduce production typ -> simpleTerm
-- On IN reduce production typ -> simpleTerm
-- On EXCEPTION reduce production typ -> simpleTerm
-- On EOF reduce production typ -> simpleTerm
-- On END reduce production typ -> simpleTerm
-- On ELSE reduce production typ -> simpleTerm
-- On EFFECT reduce production typ -> simpleTerm
-- On DEFAULT reduce production typ -> simpleTerm
-- On BAR_RBRACK reduce production typ -> simpleTerm
-- On BAR reduce production typ -> simpleTerm
-- On ASSUME reduce production typ -> simpleTerm
-- On AND reduce production typ -> simpleTerm

State 251:
formula -> noSeqTerm . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production formula -> noSeqTerm
-- On TYPE reduce production formula -> noSeqTerm
-- On TOTAL reduce production formula -> noSeqTerm
-- On SUB_EFFECT reduce production formula -> noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production formula -> noSeqTerm
-- On RBRACE reduce production formula -> noSeqTerm
-- On PRIVATE reduce production formula -> noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production formula -> noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production formula -> noSeqTerm
-- On OPEN reduce production formula -> noSeqTerm
-- On OPAQUE reduce production formula -> noSeqTerm
-- On NEW_EFFECT reduce production formula -> noSeqTerm
-- On MODULE reduce production formula -> noSeqTerm
-- On LOGIC reduce production formula -> noSeqTerm
-- On LET reduce production formula -> noSeqTerm
-- On KIND reduce production formula -> noSeqTerm
-- On EXCEPTION reduce production formula -> noSeqTerm
-- On EOF reduce production formula -> noSeqTerm
-- On END reduce production formula -> noSeqTerm
-- On EFFECT reduce production formula -> noSeqTerm
-- On DEFAULT reduce production formula -> noSeqTerm
-- On ASSUME reduce production formula -> noSeqTerm

State 252:
refinementTerm -> ident COLON appTerm LBRACE formula . RBRACE [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On RBRACE shift to state 253

State 253:
refinementTerm -> ident COLON appTerm LBRACE formula RBRACE . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On VAL reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On TYPE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On TOTAL reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On THEN reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On SUB_EFFECT reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On SUBTYPE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On SUBKIND reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On STAR reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On SEMICOLON_SEMICOLON reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On SEMICOLON reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On RPAREN reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On RBRACK reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On RBRACE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On RARROW reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On PRIVATE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On PRAGMA_SET_OPTIONS reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On PLUS_OP reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On OPEN reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On OPAQUE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On NEW_EFFECT reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On MODULE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On MINUS_OP reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On LOGIC reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On LET reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On LENS_PAREN_RIGHT reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On LBRACE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On KIND reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On IN reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On IMPLIES reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On IFF reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On EXCEPTION reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On EQUALS reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On EOF reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On END reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On ELSE reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On EFFECT reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On DISJUNCTION reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On DEFAULT reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On CUSTOM_OP reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On CONJUNCTION reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On COMMA reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On COLON_EQUALS reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On COLON_COLON reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On BAR_RBRACK reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On BAR_BAR reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On BAR reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On ASSUME reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On AND reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On AMP_AMP reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE
-- On AMP reduce production refinementTerm -> ident COLON appTerm LBRACE formula RBRACE

State 254:
noSeqTerm -> ENSURES label_opt typ . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production noSeqTerm -> ENSURES label_opt typ
-- On VAL reduce production noSeqTerm -> ENSURES label_opt typ
-- On TYPE reduce production noSeqTerm -> ENSURES label_opt typ
-- On TOTAL reduce production noSeqTerm -> ENSURES label_opt typ
-- On THEN reduce production noSeqTerm -> ENSURES label_opt typ
-- On SUB_EFFECT reduce production noSeqTerm -> ENSURES label_opt typ
-- On SUBTYPE reduce production noSeqTerm -> ENSURES label_opt typ
-- On SUBKIND reduce production noSeqTerm -> ENSURES label_opt typ
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> ENSURES label_opt typ
-- On SEMICOLON reduce production noSeqTerm -> ENSURES label_opt typ
-- On RPAREN reduce production noSeqTerm -> ENSURES label_opt typ
-- On RBRACK reduce production noSeqTerm -> ENSURES label_opt typ
-- On RBRACE reduce production noSeqTerm -> ENSURES label_opt typ
-- On PRIVATE reduce production noSeqTerm -> ENSURES label_opt typ
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> ENSURES label_opt typ
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> ENSURES label_opt typ
-- On OPEN reduce production noSeqTerm -> ENSURES label_opt typ
-- On OPAQUE reduce production noSeqTerm -> ENSURES label_opt typ
-- On NEW_EFFECT reduce production noSeqTerm -> ENSURES label_opt typ
-- On MODULE reduce production noSeqTerm -> ENSURES label_opt typ
-- On LOGIC reduce production noSeqTerm -> ENSURES label_opt typ
-- On LET reduce production noSeqTerm -> ENSURES label_opt typ
-- On LBRACE reduce production noSeqTerm -> ENSURES label_opt typ
-- On KIND reduce production noSeqTerm -> ENSURES label_opt typ
-- On IN reduce production noSeqTerm -> ENSURES label_opt typ
-- On EXCEPTION reduce production noSeqTerm -> ENSURES label_opt typ
-- On EOF reduce production noSeqTerm -> ENSURES label_opt typ
-- On END reduce production noSeqTerm -> ENSURES label_opt typ
-- On ELSE reduce production noSeqTerm -> ENSURES label_opt typ
-- On EFFECT reduce production noSeqTerm -> ENSURES label_opt typ
-- On DEFAULT reduce production noSeqTerm -> ENSURES label_opt typ
-- On BAR_RBRACK reduce production noSeqTerm -> ENSURES label_opt typ
-- On BAR reduce production noSeqTerm -> ENSURES label_opt typ
-- On ASSUME reduce production noSeqTerm -> ENSURES label_opt typ
-- On AND reduce production noSeqTerm -> ENSURES label_opt typ

State 255:
typ -> EXISTS binders DOT qpat noSeqTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On VAL reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On TYPE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On TOTAL reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On THEN reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On SUB_EFFECT reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On SUBTYPE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On SUBKIND reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On SEMICOLON reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On RPAREN reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On RBRACK reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On RBRACE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On PRIVATE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On OPEN reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On OPAQUE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On NEW_EFFECT reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On MODULE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On LOGIC reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On LET reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On LBRACE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On KIND reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On IN reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On EXCEPTION reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On EOF reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On END reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On ELSE reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On EFFECT reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On DEFAULT reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On BAR_RBRACK reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On BAR reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On ASSUME reduce production typ -> EXISTS binders DOT qpat noSeqTerm
-- On AND reduce production typ -> EXISTS binders DOT qpat noSeqTerm

State 256:
binders -> binder . binders [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On TVAR shift to state 11
-- On LPAREN shift to state 164
-- On IDENT shift to state 36
-- On tvar shift to state 171
-- On ident shift to state 172
-- On binders shift to state 257
-- On binder shift to state 256
-- On VAL reduce production binders ->
-- On TYPE reduce production binders ->
-- On TOTAL reduce production binders ->
-- On SUB_EFFECT reduce production binders ->
-- On SEMICOLON_SEMICOLON reduce production binders ->
-- On PRIVATE reduce production binders ->
-- On PRAGMA_SET_OPTIONS reduce production binders ->
-- On PRAGMA_RESET_OPTIONS reduce production binders ->
-- On OPEN reduce production binders ->
-- On OPAQUE reduce production binders ->
-- On NEW_EFFECT reduce production binders ->
-- On MODULE reduce production binders ->
-- On LOGIC reduce production binders ->
-- On LET reduce production binders ->
-- On KIND reduce production binders ->
-- On EXCEPTION reduce production binders ->
-- On EQUALS reduce production binders ->
-- On EOF reduce production binders ->
-- On END reduce production binders ->
-- On EFFECT reduce production binders ->
-- On DOT reduce production binders ->
-- On DEFAULT reduce production binders ->
-- On COLON reduce production binders ->
-- On ASSUME reduce production binders ->
-- On AND reduce production binders ->

State 257:
binders -> binder binders . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production binders -> binder binders
-- On TYPE reduce production binders -> binder binders
-- On TOTAL reduce production binders -> binder binders
-- On SUB_EFFECT reduce production binders -> binder binders
-- On SEMICOLON_SEMICOLON reduce production binders -> binder binders
-- On PRIVATE reduce production binders -> binder binders
-- On PRAGMA_SET_OPTIONS reduce production binders -> binder binders
-- On PRAGMA_RESET_OPTIONS reduce production binders -> binder binders
-- On OPEN reduce production binders -> binder binders
-- On OPAQUE reduce production binders -> binder binders
-- On NEW_EFFECT reduce production binders -> binder binders
-- On MODULE reduce production binders -> binder binders
-- On LOGIC reduce production binders -> binder binders
-- On LET reduce production binders -> binder binders
-- On KIND reduce production binders -> binder binders
-- On EXCEPTION reduce production binders -> binder binders
-- On EQUALS reduce production binders -> binder binders
-- On EOF reduce production binders -> binder binders
-- On END reduce production binders -> binder binders
-- On EFFECT reduce production binders -> binder binders
-- On DOT reduce production binders -> binder binders
-- On DEFAULT reduce production binders -> binder binders
-- On COLON reduce production binders -> binder binders
-- On ASSUME reduce production binders -> binder binders
-- On AND reduce production binders -> binder binders

State 258:
binder -> LPAREN aqual_opt ident COLON typ . refineOpt RPAREN [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On LBRACE shift to state 259
-- On refineOpt shift to state 262
-- On RPAREN reduce production refineOpt ->

State 259:
refineOpt -> LBRACE . formula RBRACE [ RPAREN ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 251
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On formula shift to state 260
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 260:
refineOpt -> LBRACE formula . RBRACE [ RPAREN ]
-- On RBRACE shift to state 261

State 261:
refineOpt -> LBRACE formula RBRACE . [ RPAREN ]
-- On RPAREN reduce production refineOpt -> LBRACE formula RBRACE

State 262:
binder -> LPAREN aqual_opt ident COLON typ refineOpt . RPAREN [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On RPAREN shift to state 263

State 263:
binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN . [ VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On TYPE reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On TVAR reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On TOTAL reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On SUB_EFFECT reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On SEMICOLON_SEMICOLON reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On PRIVATE reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On PRAGMA_SET_OPTIONS reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On OPEN reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On OPAQUE reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On NEW_EFFECT reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On MODULE reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On LPAREN reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On LOGIC reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On LET reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On KIND reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On IDENT reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On EXCEPTION reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On EQUALS reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On EOF reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On END reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On EFFECT reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On DOT reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On DEFAULT reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On COLON reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On ASSUME reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN
-- On AND reduce production binder -> LPAREN aqual_opt ident COLON typ refineOpt RPAREN

State 264:
typ -> FORALL binders . DOT qpat noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On DOT shift to state 265

State 265:
typ -> FORALL binders DOT . qpat noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On LBRACE_COLON_PATTERN shift to state 175
-- On qpat shift to state 266
-- On UNDERSCORE reduce production qpat ->
-- On UINT8 reduce production qpat ->
-- On TVAR reduce production qpat ->
-- On TRY reduce production qpat ->
-- On TRUE reduce production qpat ->
-- On TILDE reduce production qpat ->
-- On STRING reduce production qpat ->
-- On REQUIRES reduce production qpat ->
-- On PLUS_OP reduce production qpat ->
-- On PERCENT_LBRACK reduce production qpat ->
-- On NAME reduce production qpat ->
-- On MINUS_OP reduce production qpat ->
-- On MATCH reduce production qpat ->
-- On LPAREN_RPAREN reduce production qpat ->
-- On LPAREN reduce production qpat ->
-- On LET reduce production qpat ->
-- On LENS_PAREN_LEFT reduce production qpat ->
-- On LBRACK_BAR reduce production qpat ->
-- On LBRACK reduce production qpat ->
-- On LBRACE reduce production qpat ->
-- On INT64 reduce production qpat ->
-- On INT32 reduce production qpat ->
-- On INT reduce production qpat ->
-- On IF reduce production qpat ->
-- On IEEE64 reduce production qpat ->
-- On IDENT reduce production qpat ->
-- On HASH reduce production qpat ->
-- On FUNCTION reduce production qpat ->
-- On FUN reduce production qpat ->
-- On FORALL reduce production qpat ->
-- On FALSE reduce production qpat ->
-- On EXISTS reduce production qpat ->
-- On EQUALS reduce production qpat ->
-- On ENSURES reduce production qpat ->
-- On CHAR reduce production qpat ->
-- On BYTEARRAY reduce production qpat ->
-- On BEGIN reduce production qpat ->
-- On BANG_LBRACE reduce production qpat ->
-- On BANG reduce production qpat ->
-- On ASSUME reduce production qpat ->
-- On ASSERT reduce production qpat ->

State 266:
typ -> FORALL binders DOT qpat . noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 267
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 267:
typ -> FORALL binders DOT qpat noSeqTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On VAL reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On TYPE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On TOTAL reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On THEN reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On SUB_EFFECT reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On SUBTYPE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On SUBKIND reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On SEMICOLON reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On RPAREN reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On RBRACK reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On RBRACE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On PRIVATE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On OPEN reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On OPAQUE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On NEW_EFFECT reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On MODULE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On LOGIC reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On LET reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On LBRACE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On KIND reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On IN reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On EXCEPTION reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On EOF reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On END reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On ELSE reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On EFFECT reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On DEFAULT reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On BAR_RBRACK reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On BAR reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On ASSUME reduce production typ -> FORALL binders DOT qpat noSeqTerm
-- On AND reduce production typ -> FORALL binders DOT qpat noSeqTerm

State 268:
simpleTerm -> FUN atomicPattern atomicPatterns funArrow term . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On VAL reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On TYPE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On TOTAL reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On THEN reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On SUB_EFFECT reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On SUBTYPE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On SUBKIND reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On SEMICOLON_SEMICOLON reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On SEMICOLON reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On RPAREN reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On RBRACK reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On RBRACE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On PRIVATE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On PRAGMA_SET_OPTIONS reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On PRAGMA_RESET_OPTIONS reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On OPEN reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On OPAQUE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On NEW_EFFECT reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On MODULE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On LOGIC reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On LET reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On LBRACE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On KIND reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On IN reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On EXCEPTION reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On EOF reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On END reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On ELSE reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On EFFECT reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On DEFAULT reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On BAR_RBRACK reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On BAR reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On ASSUME reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term
-- On AND reduce production simpleTerm -> FUN atomicPattern atomicPatterns funArrow term

State 269:
term -> noSeqTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
term -> noSeqTerm . SEMICOLON term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On SEMICOLON shift to state 270
-- On WITH reduce production term -> noSeqTerm
-- On VAL reduce production term -> noSeqTerm
-- On TYPE reduce production term -> noSeqTerm
-- On TOTAL reduce production term -> noSeqTerm
-- On THEN reduce production term -> noSeqTerm
-- On SUB_EFFECT reduce production term -> noSeqTerm
-- On SUBTYPE reduce production term -> noSeqTerm
-- On SUBKIND reduce production term -> noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production term -> noSeqTerm
-- On RPAREN reduce production term -> noSeqTerm
-- On RBRACK reduce production term -> noSeqTerm
-- On RBRACE reduce production term -> noSeqTerm
-- On PRIVATE reduce production term -> noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production term -> noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production term -> noSeqTerm
-- On OPEN reduce production term -> noSeqTerm
-- On OPAQUE reduce production term -> noSeqTerm
-- On NEW_EFFECT reduce production term -> noSeqTerm
-- On MODULE reduce production term -> noSeqTerm
-- On LOGIC reduce production term -> noSeqTerm
-- On LET reduce production term -> noSeqTerm
-- On LBRACE reduce production term -> noSeqTerm
-- On KIND reduce production term -> noSeqTerm
-- On IN reduce production term -> noSeqTerm
-- On EXCEPTION reduce production term -> noSeqTerm
-- On EOF reduce production term -> noSeqTerm
-- On END reduce production term -> noSeqTerm
-- On ELSE reduce production term -> noSeqTerm
-- On EFFECT reduce production term -> noSeqTerm
-- On DEFAULT reduce production term -> noSeqTerm
-- On BAR_RBRACK reduce production term -> noSeqTerm
-- On BAR reduce production term -> noSeqTerm
-- On ASSUME reduce production term -> noSeqTerm
-- On AND reduce production term -> noSeqTerm

State 270:
term -> noSeqTerm SEMICOLON . term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 271
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 271:
term -> noSeqTerm SEMICOLON term . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production term -> noSeqTerm SEMICOLON term
-- On VAL reduce production term -> noSeqTerm SEMICOLON term
-- On TYPE reduce production term -> noSeqTerm SEMICOLON term
-- On TOTAL reduce production term -> noSeqTerm SEMICOLON term
-- On THEN reduce production term -> noSeqTerm SEMICOLON term
-- On SUB_EFFECT reduce production term -> noSeqTerm SEMICOLON term
-- On SUBTYPE reduce production term -> noSeqTerm SEMICOLON term
-- On SUBKIND reduce production term -> noSeqTerm SEMICOLON term
-- On SEMICOLON_SEMICOLON reduce production term -> noSeqTerm SEMICOLON term
-- On SEMICOLON reduce production term -> noSeqTerm SEMICOLON term
-- On RPAREN reduce production term -> noSeqTerm SEMICOLON term
-- On RBRACK reduce production term -> noSeqTerm SEMICOLON term
-- On RBRACE reduce production term -> noSeqTerm SEMICOLON term
-- On PRIVATE reduce production term -> noSeqTerm SEMICOLON term
-- On PRAGMA_SET_OPTIONS reduce production term -> noSeqTerm SEMICOLON term
-- On PRAGMA_RESET_OPTIONS reduce production term -> noSeqTerm SEMICOLON term
-- On OPEN reduce production term -> noSeqTerm SEMICOLON term
-- On OPAQUE reduce production term -> noSeqTerm SEMICOLON term
-- On NEW_EFFECT reduce production term -> noSeqTerm SEMICOLON term
-- On MODULE reduce production term -> noSeqTerm SEMICOLON term
-- On LOGIC reduce production term -> noSeqTerm SEMICOLON term
-- On LET reduce production term -> noSeqTerm SEMICOLON term
-- On LBRACE reduce production term -> noSeqTerm SEMICOLON term
-- On KIND reduce production term -> noSeqTerm SEMICOLON term
-- On IN reduce production term -> noSeqTerm SEMICOLON term
-- On EXCEPTION reduce production term -> noSeqTerm SEMICOLON term
-- On EOF reduce production term -> noSeqTerm SEMICOLON term
-- On END reduce production term -> noSeqTerm SEMICOLON term
-- On ELSE reduce production term -> noSeqTerm SEMICOLON term
-- On EFFECT reduce production term -> noSeqTerm SEMICOLON term
-- On DEFAULT reduce production term -> noSeqTerm SEMICOLON term
-- On BAR_RBRACK reduce production term -> noSeqTerm SEMICOLON term
-- On BAR reduce production term -> noSeqTerm SEMICOLON term
-- On ASSUME reduce production term -> noSeqTerm SEMICOLON term
-- On AND reduce production term -> noSeqTerm SEMICOLON term

State 272:
firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On VAL reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On TYPE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On TOTAL reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On THEN reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On SUB_EFFECT reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On SUBTYPE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On SUBKIND reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On SEMICOLON_SEMICOLON reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On SEMICOLON reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On RPAREN reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On RBRACK reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On RBRACE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On PRIVATE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On PRAGMA_SET_OPTIONS reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On PRAGMA_RESET_OPTIONS reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On OPEN reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On OPAQUE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On NEW_EFFECT reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On MODULE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On LOGIC reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On LET reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On LBRACE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On KIND reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On IN reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On EXCEPTION reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On EOF reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On END reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On ELSE reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On EFFECT reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On DEFAULT reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On BAR_RBRACK reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On BAR reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On ASSUME reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term
-- On AND reduce production firstPatternBranch -> maybeBar disjunctivePattern maybeWhen maybeFocusArrow term

State 273:
noSeqTerm -> FUNCTION firstPatternBranch . patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On patternBranches shift to state 274
-- On WITH reduce production patternBranches ->
-- On VAL reduce production patternBranches ->
-- On TYPE reduce production patternBranches ->
-- On TOTAL reduce production patternBranches ->
-- On THEN reduce production patternBranches ->
-- On SUB_EFFECT reduce production patternBranches ->
-- On SUBTYPE reduce production patternBranches ->
-- On SUBKIND reduce production patternBranches ->
-- On SEMICOLON_SEMICOLON reduce production patternBranches ->
-- On SEMICOLON reduce production patternBranches ->
-- On RPAREN reduce production patternBranches ->
-- On RBRACK reduce production patternBranches ->
-- On RBRACE reduce production patternBranches ->
-- On PRIVATE reduce production patternBranches ->
-- On PRAGMA_SET_OPTIONS reduce production patternBranches ->
-- On PRAGMA_RESET_OPTIONS reduce production patternBranches ->
-- On OPEN reduce production patternBranches ->
-- On OPAQUE reduce production patternBranches ->
-- On NEW_EFFECT reduce production patternBranches ->
-- On MODULE reduce production patternBranches ->
-- On LOGIC reduce production patternBranches ->
-- On LET reduce production patternBranches ->
-- On LBRACE reduce production patternBranches ->
-- On KIND reduce production patternBranches ->
-- On IN reduce production patternBranches ->
-- On EXCEPTION reduce production patternBranches ->
-- On EOF reduce production patternBranches ->
-- On END reduce production patternBranches ->
-- On ELSE reduce production patternBranches ->
-- On EFFECT reduce production patternBranches ->
-- On DEFAULT reduce production patternBranches ->
-- On BAR_RBRACK reduce production patternBranches ->
-- On BAR reduce production patternBranches ->
-- On ASSUME reduce production patternBranches ->
-- On AND reduce production patternBranches ->

State 274:
noSeqTerm -> FUNCTION firstPatternBranch patternBranches . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
patternBranches -> patternBranches . patternBranch [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On BAR shift to state 275
-- On patternBranch shift to state 280
-- On WITH reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On VAL reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On TYPE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On TOTAL reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On THEN reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On SUB_EFFECT reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On SUBTYPE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On SUBKIND reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On SEMICOLON reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On RPAREN reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On RBRACK reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On RBRACE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On PRIVATE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On OPEN reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On OPAQUE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On NEW_EFFECT reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On MODULE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On LOGIC reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On LET reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On LBRACE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On KIND reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On IN reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On EXCEPTION reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On EOF reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On END reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On ELSE reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On EFFECT reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On DEFAULT reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On BAR_RBRACK reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On ASSUME reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches
-- On AND reduce production noSeqTerm -> FUNCTION firstPatternBranch patternBranches

State 275:
patternBranch -> BAR . disjunctivePattern maybeWhen maybeFocusArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 111
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On ident shift to state 72
-- On disjunctivePattern shift to state 276
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 276:
patternBranch -> BAR disjunctivePattern . maybeWhen maybeFocusArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WHEN shift to state 115
-- On maybeWhen shift to state 277
-- On SQUIGGLY_RARROW reduce production maybeWhen ->
-- On RARROW reduce production maybeWhen ->

State 277:
patternBranch -> BAR disjunctivePattern maybeWhen . maybeFocusArrow term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On SQUIGGLY_RARROW shift to state 155
-- On RARROW shift to state 156
-- On maybeFocusArrow shift to state 278

State 278:
patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow . term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 279
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 279:
patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On VAL reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On TYPE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On TOTAL reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On THEN reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On SUB_EFFECT reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On SUBTYPE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On SUBKIND reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On SEMICOLON_SEMICOLON reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On SEMICOLON reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On RPAREN reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On RBRACK reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On RBRACE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On PRIVATE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On PRAGMA_SET_OPTIONS reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On PRAGMA_RESET_OPTIONS reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On OPEN reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On OPAQUE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On NEW_EFFECT reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On MODULE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On LOGIC reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On LET reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On LBRACE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On KIND reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On IN reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On EXCEPTION reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On EOF reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On END reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On ELSE reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On EFFECT reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On DEFAULT reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On BAR_RBRACK reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On BAR reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On ASSUME reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term
-- On AND reduce production patternBranch -> BAR disjunctivePattern maybeWhen maybeFocusArrow term

State 280:
patternBranches -> patternBranches patternBranch . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production patternBranches -> patternBranches patternBranch
-- On VAL reduce production patternBranches -> patternBranches patternBranch
-- On TYPE reduce production patternBranches -> patternBranches patternBranch
-- On TOTAL reduce production patternBranches -> patternBranches patternBranch
-- On THEN reduce production patternBranches -> patternBranches patternBranch
-- On SUB_EFFECT reduce production patternBranches -> patternBranches patternBranch
-- On SUBTYPE reduce production patternBranches -> patternBranches patternBranch
-- On SUBKIND reduce production patternBranches -> patternBranches patternBranch
-- On SEMICOLON_SEMICOLON reduce production patternBranches -> patternBranches patternBranch
-- On SEMICOLON reduce production patternBranches -> patternBranches patternBranch
-- On RPAREN reduce production patternBranches -> patternBranches patternBranch
-- On RBRACK reduce production patternBranches -> patternBranches patternBranch
-- On RBRACE reduce production patternBranches -> patternBranches patternBranch
-- On PRIVATE reduce production patternBranches -> patternBranches patternBranch
-- On PRAGMA_SET_OPTIONS reduce production patternBranches -> patternBranches patternBranch
-- On PRAGMA_RESET_OPTIONS reduce production patternBranches -> patternBranches patternBranch
-- On OPEN reduce production patternBranches -> patternBranches patternBranch
-- On OPAQUE reduce production patternBranches -> patternBranches patternBranch
-- On NEW_EFFECT reduce production patternBranches -> patternBranches patternBranch
-- On MODULE reduce production patternBranches -> patternBranches patternBranch
-- On LOGIC reduce production patternBranches -> patternBranches patternBranch
-- On LET reduce production patternBranches -> patternBranches patternBranch
-- On LBRACE reduce production patternBranches -> patternBranches patternBranch
-- On KIND reduce production patternBranches -> patternBranches patternBranch
-- On IN reduce production patternBranches -> patternBranches patternBranch
-- On EXCEPTION reduce production patternBranches -> patternBranches patternBranch
-- On EOF reduce production patternBranches -> patternBranches patternBranch
-- On END reduce production patternBranches -> patternBranches patternBranch
-- On ELSE reduce production patternBranches -> patternBranches patternBranch
-- On EFFECT reduce production patternBranches -> patternBranches patternBranch
-- On DEFAULT reduce production patternBranches -> patternBranches patternBranch
-- On BAR_RBRACK reduce production patternBranches -> patternBranches patternBranch
-- On BAR reduce production patternBranches -> patternBranches patternBranch
-- On ASSUME reduce production patternBranches -> patternBranches patternBranch
-- On AND reduce production patternBranches -> patternBranches patternBranch

State 281:
noSeqTerm -> IF noSeqTerm . THEN noSeqTerm ELSE noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
noSeqTerm -> IF noSeqTerm . THEN noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On THEN shift to state 282

State 282:
noSeqTerm -> IF noSeqTerm THEN . noSeqTerm ELSE noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
noSeqTerm -> IF noSeqTerm THEN . noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 283
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 283:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm . ELSE noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
noSeqTerm -> IF noSeqTerm THEN noSeqTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On ELSE shift to state 284
-- On WITH reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On VAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On TYPE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On TOTAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On THEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SUBTYPE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On RPAREN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On RBRACE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On OPEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On MODULE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On LOGIC reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On LET reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On LBRACE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On KIND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On IN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On EOF reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On END reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On BAR reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On ASSUME reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm
-- On AND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm

State 284:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE . noSeqTerm [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 285
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 285:
noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On VAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On TYPE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On TOTAL reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On THEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SUB_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SUBTYPE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SUBKIND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On SEMICOLON reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On RPAREN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On RBRACE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On PRIVATE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On OPEN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On OPAQUE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On NEW_EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On MODULE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On LOGIC reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On LET reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On LBRACE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On KIND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On IN reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On EXCEPTION reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On EOF reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On END reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On ELSE reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On EFFECT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On DEFAULT reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On BAR_RBRACK reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On BAR reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On ASSUME reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm
-- On AND reduce production noSeqTerm -> IF noSeqTerm THEN noSeqTerm ELSE noSeqTerm

State 286:
atomicTerm -> BEGIN term . END [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On END shift to state 287

State 287:
atomicTerm -> BEGIN term END . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production atomicTerm -> BEGIN term END
-- On VAL reduce production atomicTerm -> BEGIN term END
-- On UNDERSCORE reduce production atomicTerm -> BEGIN term END
-- On UINT8 reduce production atomicTerm -> BEGIN term END
-- On TYP_APP_GREATER reduce production atomicTerm -> BEGIN term END
-- On TYPE reduce production atomicTerm -> BEGIN term END
-- On TVAR reduce production atomicTerm -> BEGIN term END
-- On TRUE reduce production atomicTerm -> BEGIN term END
-- On TOTAL reduce production atomicTerm -> BEGIN term END
-- On THEN reduce production atomicTerm -> BEGIN term END
-- On SUB_EFFECT reduce production atomicTerm -> BEGIN term END
-- On SUBTYPE reduce production atomicTerm -> BEGIN term END
-- On SUBKIND reduce production atomicTerm -> BEGIN term END
-- On STRING reduce production atomicTerm -> BEGIN term END
-- On STAR reduce production atomicTerm -> BEGIN term END
-- On SQUIGGLY_RARROW reduce production atomicTerm -> BEGIN term END
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> BEGIN term END
-- On SEMICOLON reduce production atomicTerm -> BEGIN term END
-- On RPAREN reduce production atomicTerm -> BEGIN term END
-- On RBRACK reduce production atomicTerm -> BEGIN term END
-- On RBRACE reduce production atomicTerm -> BEGIN term END
-- On RARROW reduce production atomicTerm -> BEGIN term END
-- On PRIVATE reduce production atomicTerm -> BEGIN term END
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> BEGIN term END
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> BEGIN term END
-- On PLUS_OP reduce production atomicTerm -> BEGIN term END
-- On PERCENT_LBRACK reduce production atomicTerm -> BEGIN term END
-- On OPEN reduce production atomicTerm -> BEGIN term END
-- On OPAQUE reduce production atomicTerm -> BEGIN term END
-- On NEW_EFFECT reduce production atomicTerm -> BEGIN term END
-- On NAME reduce production atomicTerm -> BEGIN term END
-- On MODULE reduce production atomicTerm -> BEGIN term END
-- On MINUS_OP reduce production atomicTerm -> BEGIN term END
-- On LPAREN_RPAREN reduce production atomicTerm -> BEGIN term END
-- On LPAREN reduce production atomicTerm -> BEGIN term END
-- On LOGIC reduce production atomicTerm -> BEGIN term END
-- On LET reduce production atomicTerm -> BEGIN term END
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> BEGIN term END
-- On LENS_PAREN_LEFT reduce production atomicTerm -> BEGIN term END
-- On LBRACK_BAR reduce production atomicTerm -> BEGIN term END
-- On LBRACK reduce production atomicTerm -> BEGIN term END
-- On LBRACE reduce production atomicTerm -> BEGIN term END
-- On KIND reduce production atomicTerm -> BEGIN term END
-- On INT64 reduce production atomicTerm -> BEGIN term END
-- On INT32 reduce production atomicTerm -> BEGIN term END
-- On INT reduce production atomicTerm -> BEGIN term END
-- On IN reduce production atomicTerm -> BEGIN term END
-- On IMPLIES reduce production atomicTerm -> BEGIN term END
-- On IFF reduce production atomicTerm -> BEGIN term END
-- On IEEE64 reduce production atomicTerm -> BEGIN term END
-- On IDENT reduce production atomicTerm -> BEGIN term END
-- On HASH reduce production atomicTerm -> BEGIN term END
-- On FALSE reduce production atomicTerm -> BEGIN term END
-- On EXCEPTION reduce production atomicTerm -> BEGIN term END
-- On EQUALS reduce production atomicTerm -> BEGIN term END
-- On EOF reduce production atomicTerm -> BEGIN term END
-- On END reduce production atomicTerm -> BEGIN term END
-- On ELSE reduce production atomicTerm -> BEGIN term END
-- On EFFECT reduce production atomicTerm -> BEGIN term END
-- On DIV_MOD_OP reduce production atomicTerm -> BEGIN term END
-- On DISJUNCTION reduce production atomicTerm -> BEGIN term END
-- On DEFAULT reduce production atomicTerm -> BEGIN term END
-- On CUSTOM_OP reduce production atomicTerm -> BEGIN term END
-- On CONJUNCTION reduce production atomicTerm -> BEGIN term END
-- On COMMA reduce production atomicTerm -> BEGIN term END
-- On COLON_EQUALS reduce production atomicTerm -> BEGIN term END
-- On COLON_COLON reduce production atomicTerm -> BEGIN term END
-- On CHAR reduce production atomicTerm -> BEGIN term END
-- On BYTEARRAY reduce production atomicTerm -> BEGIN term END
-- On BEGIN reduce production atomicTerm -> BEGIN term END
-- On BAR_RBRACK reduce production atomicTerm -> BEGIN term END
-- On BAR_BAR reduce production atomicTerm -> BEGIN term END
-- On BAR reduce production atomicTerm -> BEGIN term END
-- On BANG_LBRACE reduce production atomicTerm -> BEGIN term END
-- On BANG reduce production atomicTerm -> BEGIN term END
-- On ASSUME reduce production atomicTerm -> BEGIN term END
-- On ASSERT reduce production atomicTerm -> BEGIN term END
-- On AND reduce production atomicTerm -> BEGIN term END
-- On AMP_AMP reduce production atomicTerm -> BEGIN term END
-- On AMP reduce production atomicTerm -> BEGIN term END

State 288:
refinementTerm -> LBRACE recordExp . RBRACE [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On RBRACE shift to state 289

State 289:
refinementTerm -> LBRACE recordExp RBRACE . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On VAL reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On TYPE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On TOTAL reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On THEN reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On SUB_EFFECT reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On SUBTYPE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On SUBKIND reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On STAR reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On SEMICOLON_SEMICOLON reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On SEMICOLON reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On RPAREN reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On RBRACK reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On RBRACE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On RARROW reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On PRIVATE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On PRAGMA_SET_OPTIONS reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On PLUS_OP reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On OPEN reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On OPAQUE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On NEW_EFFECT reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On MODULE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On MINUS_OP reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On LOGIC reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On LET reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On LENS_PAREN_RIGHT reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On LBRACE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On KIND reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On IN reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On IMPLIES reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On IFF reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On EXCEPTION reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On EQUALS reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On EOF reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On END reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On ELSE reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On EFFECT reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On DISJUNCTION reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On DEFAULT reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On CUSTOM_OP reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On CONJUNCTION reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On COMMA reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On COLON_EQUALS reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On COLON_COLON reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On BAR_RBRACK reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On BAR_BAR reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On BAR reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On ASSUME reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On AND reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On AMP_AMP reduce production refinementTerm -> LBRACE recordExp RBRACE
-- On AMP reduce production refinementTerm -> LBRACE recordExp RBRACE

State 290:
recordExp -> appTerm . recordExpRest [ RBRACE ]
-- On WITH shift to state 291
-- On EQUALS shift to state 300
-- On recordExpRest shift to state 303

State 291:
recordExpRest -> WITH . recordFieldAssignment recordFieldAssignments [ RBRACE ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On recordFieldAssignment shift to state 292
-- On name shift to state 39
-- On lid shift to state 296
-- On idpath shift to state 85
-- On ident shift to state 42

State 292:
recordExpRest -> WITH recordFieldAssignment . recordFieldAssignments [ RBRACE ]
-- On SEMICOLON shift to state 293
-- On recordFieldAssignments shift to state 299
-- On RBRACE reduce production recordFieldAssignments ->

State 293:
recordFieldAssignments -> SEMICOLON . [ RBRACE ]
recordFieldAssignments -> SEMICOLON . recordFieldAssignment recordFieldAssignments [ RBRACE ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On recordFieldAssignment shift to state 294
-- On name shift to state 39
-- On lid shift to state 296
-- On idpath shift to state 85
-- On ident shift to state 42
-- On RBRACE reduce production recordFieldAssignments -> SEMICOLON

State 294:
recordFieldAssignments -> SEMICOLON recordFieldAssignment . recordFieldAssignments [ RBRACE ]
-- On SEMICOLON shift to state 293
-- On recordFieldAssignments shift to state 295
-- On RBRACE reduce production recordFieldAssignments ->

State 295:
recordFieldAssignments -> SEMICOLON recordFieldAssignment recordFieldAssignments . [ RBRACE ]
-- On RBRACE reduce production recordFieldAssignments -> SEMICOLON recordFieldAssignment recordFieldAssignments

State 296:
recordFieldAssignment -> lid . EQUALS simpleTerm [ SEMICOLON RBRACE ]
-- On EQUALS shift to state 297

State 297:
recordFieldAssignment -> lid EQUALS . simpleTerm [ SEMICOLON RBRACE ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 298
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 298:
recordFieldAssignment -> lid EQUALS simpleTerm . [ SEMICOLON RBRACE ]
-- On SEMICOLON reduce production recordFieldAssignment -> lid EQUALS simpleTerm
-- On RBRACE reduce production recordFieldAssignment -> lid EQUALS simpleTerm

State 299:
recordExpRest -> WITH recordFieldAssignment recordFieldAssignments . [ RBRACE ]
-- On RBRACE reduce production recordExpRest -> WITH recordFieldAssignment recordFieldAssignments

State 300:
recordExpRest -> EQUALS . simpleTerm recordFieldAssignments [ RBRACE ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 301
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 301:
recordExpRest -> EQUALS simpleTerm . recordFieldAssignments [ RBRACE ]
-- On SEMICOLON shift to state 293
-- On recordFieldAssignments shift to state 302
-- On RBRACE reduce production recordFieldAssignments ->

State 302:
recordExpRest -> EQUALS simpleTerm recordFieldAssignments . [ RBRACE ]
-- On RBRACE reduce production recordExpRest -> EQUALS simpleTerm recordFieldAssignments

State 303:
recordExp -> appTerm recordExpRest . [ RBRACE ]
-- On RBRACE reduce production recordExp -> appTerm recordExpRest

State 304:
projectionLHS -> LBRACK semiColonTermList . RBRACK [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On RBRACK shift to state 305

State 305:
projectionLHS -> LBRACK semiColonTermList RBRACK . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On VAL reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On UNDERSCORE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On UINT8 reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On TYP_APP_GREATER reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On TYPE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On TVAR reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On TRUE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On TOTAL reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On THEN reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On SUB_EFFECT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On SUBTYPE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On SUBKIND reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On STRING reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On STAR reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On SQUIGGLY_RARROW reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On SEMICOLON reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On RPAREN reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On RBRACK reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On RBRACE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On RARROW reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On PRIVATE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On PLUS_OP reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On PERCENT_LBRACK reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On OPEN reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On OPAQUE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On NEW_EFFECT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On NAME reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On MODULE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On MINUS_OP reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LPAREN_RPAREN reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LPAREN reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LOGIC reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LET reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LENS_PAREN_LEFT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LBRACK_BAR reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LBRACK reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On LBRACE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On KIND reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On INT64 reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On INT32 reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On INT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On IN reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On IMPLIES reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On IFF reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On IEEE64 reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On IDENT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On HASH reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On FALSE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On EXCEPTION reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On EQUALS reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On EOF reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On END reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On ELSE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On EFFECT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On DOT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On DIV_MOD_OP reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On DISJUNCTION reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On DEFAULT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On CUSTOM_OP reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On CONJUNCTION reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On COMMA reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On COLON_EQUALS reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On COLON_COLON reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On CHAR reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On BYTEARRAY reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On BEGIN reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On BAR_RBRACK reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On BAR_BAR reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On BAR reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On BANG_LBRACE reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On BANG reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On ASSUME reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On ASSERT reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On AND reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On AMP_AMP reduce production projectionLHS -> LBRACK semiColonTermList RBRACK
-- On AMP reduce production projectionLHS -> LBRACK semiColonTermList RBRACK

State 306:
semiColonTermList -> noSeqTerm . moreSemiColonTerms [ RBRACK BAR_RBRACK ]
-- On SEMICOLON shift to state 307
-- On moreSemiColonTerms shift to state 310
-- On RBRACK reduce production moreSemiColonTerms ->
-- On BAR_RBRACK reduce production moreSemiColonTerms ->

State 307:
moreSemiColonTerms -> SEMICOLON . [ RBRACK BAR_RBRACK ]
moreSemiColonTerms -> SEMICOLON . noSeqTerm moreSemiColonTerms [ RBRACK BAR_RBRACK ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 308
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214
-- On RBRACK reduce production moreSemiColonTerms -> SEMICOLON
-- On BAR_RBRACK reduce production moreSemiColonTerms -> SEMICOLON

State 308:
moreSemiColonTerms -> SEMICOLON noSeqTerm . moreSemiColonTerms [ RBRACK BAR_RBRACK ]
-- On SEMICOLON shift to state 307
-- On moreSemiColonTerms shift to state 309
-- On RBRACK reduce production moreSemiColonTerms ->
-- On BAR_RBRACK reduce production moreSemiColonTerms ->

State 309:
moreSemiColonTerms -> SEMICOLON noSeqTerm moreSemiColonTerms . [ RBRACK BAR_RBRACK ]
-- On RBRACK reduce production moreSemiColonTerms -> SEMICOLON noSeqTerm moreSemiColonTerms
-- On BAR_RBRACK reduce production moreSemiColonTerms -> SEMICOLON noSeqTerm moreSemiColonTerms

State 310:
semiColonTermList -> noSeqTerm moreSemiColonTerms . [ RBRACK BAR_RBRACK ]
-- On RBRACK reduce production semiColonTermList -> noSeqTerm moreSemiColonTerms
-- On BAR_RBRACK reduce production semiColonTermList -> noSeqTerm moreSemiColonTerms

State 311:
ascriptionOrPattern -> nonTvarPattern COLON typ . refineOpt [ RPAREN ]
-- On LBRACE shift to state 259
-- On refineOpt shift to state 312
-- On RPAREN reduce production refineOpt ->

State 312:
ascriptionOrPattern -> nonTvarPattern COLON typ refineOpt . [ RPAREN ]
-- On RPAREN reduce production ascriptionOrPattern -> nonTvarPattern COLON typ refineOpt

State 313:
nonTvarPattern2 -> LPAREN ascriptionOrPattern . RPAREN [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On RPAREN shift to state 314

State 314:
nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN . [ WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ]
-- On WHEN reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On UNDERSCORE reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On UINT8 reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On TVAR reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On TRUE reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On STRING reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On SQUIGGLY_RARROW reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On SEMICOLON reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On RPAREN reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On RBRACK reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On RBRACE reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On RARROW reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On NAME reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On LPAREN_RPAREN reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On LPAREN reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On LENS_PAREN_RIGHT reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On LENS_PAREN_LEFT reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On LBRACK reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On LBRACE reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On INT64 reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On INT32 reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On INT reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On IEEE64 reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On IDENT reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On HASH reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On FALSE reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On EQUALS reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On COMMA reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On COLON_COLON reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On COLON reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On CHAR reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On BYTEARRAY reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN
-- On BAR reduce production nonTvarPattern2 -> LPAREN ascriptionOrPattern RPAREN

State 315:
letbinding -> pattern . ascribeTypOpt EQUALS term [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On COLON shift to state 316
-- On ascribeTypOpt shift to state 318
-- On EQUALS reduce production ascribeTypOpt ->

State 316:
ascribeTypOpt -> COLON . product [ EQUALS ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 317
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 317:
ascribeTypOpt -> COLON product . [ EQUALS ]
-- On EQUALS reduce production ascribeTypOpt -> COLON product

State 318:
letbinding -> pattern ascribeTypOpt . EQUALS term [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On EQUALS shift to state 319

State 319:
letbinding -> pattern ascribeTypOpt EQUALS . term [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 320
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 320:
letbinding -> pattern ascribeTypOpt EQUALS term . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On VAL reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On TYPE reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On TOTAL reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On SUB_EFFECT reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On SEMICOLON_SEMICOLON reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On PRIVATE reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On PRAGMA_SET_OPTIONS reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On PRAGMA_RESET_OPTIONS reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On OPEN reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On OPAQUE reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On NEW_EFFECT reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On MODULE reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On LOGIC reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On LET reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On KIND reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On IN reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On EXCEPTION reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On EOF reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On END reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On EFFECT reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On DEFAULT reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On ASSUME reduce production letbinding -> pattern ascribeTypOpt EQUALS term
-- On AND reduce production letbinding -> pattern ascribeTypOpt EQUALS term

State 321:
noSeqTerm -> LET recopt letbinding . letbindings IN term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On AND shift to state 322
-- On letbindings shift to state 326
-- On IN reduce production letbindings ->

State 322:
letbindings -> AND . maybeFocus letbinding letbindings [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On SQUIGGLY_RARROW shift to state 29
-- On maybeFocus shift to state 323
-- On UNDERSCORE reduce production maybeFocus ->
-- On UINT8 reduce production maybeFocus ->
-- On TVAR reduce production maybeFocus ->
-- On TRUE reduce production maybeFocus ->
-- On STRING reduce production maybeFocus ->
-- On NAME reduce production maybeFocus ->
-- On LPAREN_RPAREN reduce production maybeFocus ->
-- On LPAREN reduce production maybeFocus ->
-- On LENS_PAREN_LEFT reduce production maybeFocus ->
-- On LBRACK reduce production maybeFocus ->
-- On LBRACE reduce production maybeFocus ->
-- On INT64 reduce production maybeFocus ->
-- On INT32 reduce production maybeFocus ->
-- On INT reduce production maybeFocus ->
-- On IEEE64 reduce production maybeFocus ->
-- On IDENT reduce production maybeFocus ->
-- On HASH reduce production maybeFocus ->
-- On FALSE reduce production maybeFocus ->
-- On CHAR reduce production maybeFocus ->
-- On BYTEARRAY reduce production maybeFocus ->

State 323:
letbindings -> AND maybeFocus . letbinding letbindings [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 315
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On letbinding shift to state 324
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 324:
letbindings -> AND maybeFocus letbinding . letbindings [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On AND shift to state 322
-- On letbindings shift to state 325
-- On VAL reduce production letbindings ->
-- On TYPE reduce production letbindings ->
-- On TOTAL reduce production letbindings ->
-- On SUB_EFFECT reduce production letbindings ->
-- On SEMICOLON_SEMICOLON reduce production letbindings ->
-- On PRIVATE reduce production letbindings ->
-- On PRAGMA_SET_OPTIONS reduce production letbindings ->
-- On PRAGMA_RESET_OPTIONS reduce production letbindings ->
-- On OPEN reduce production letbindings ->
-- On OPAQUE reduce production letbindings ->
-- On NEW_EFFECT reduce production letbindings ->
-- On MODULE reduce production letbindings ->
-- On LOGIC reduce production letbindings ->
-- On LET reduce production letbindings ->
-- On KIND reduce production letbindings ->
-- On IN reduce production letbindings ->
-- On EXCEPTION reduce production letbindings ->
-- On EOF reduce production letbindings ->
-- On END reduce production letbindings ->
-- On EFFECT reduce production letbindings ->
-- On DEFAULT reduce production letbindings ->
-- On ASSUME reduce production letbindings ->

State 325:
letbindings -> AND maybeFocus letbinding letbindings . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On TYPE reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On TOTAL reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On SUB_EFFECT reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On SEMICOLON_SEMICOLON reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On PRIVATE reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On PRAGMA_SET_OPTIONS reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On PRAGMA_RESET_OPTIONS reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On OPEN reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On OPAQUE reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On NEW_EFFECT reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On MODULE reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On LOGIC reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On LET reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On KIND reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On IN reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On EXCEPTION reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On EOF reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On END reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On EFFECT reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On DEFAULT reduce production letbindings -> AND maybeFocus letbinding letbindings
-- On ASSUME reduce production letbindings -> AND maybeFocus letbinding letbindings

State 326:
noSeqTerm -> LET recopt letbinding letbindings . IN term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On IN shift to state 327

State 327:
noSeqTerm -> LET recopt letbinding letbindings IN . term [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 328
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 328:
noSeqTerm -> LET recopt letbinding letbindings IN term . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On VAL reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On TYPE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On TOTAL reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On THEN reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On SUB_EFFECT reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On SUBTYPE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On SUBKIND reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On SEMICOLON reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On RPAREN reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On RBRACK reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On RBRACE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On PRIVATE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On OPEN reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On OPAQUE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On NEW_EFFECT reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On MODULE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On LOGIC reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On LET reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On LBRACE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On KIND reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On IN reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On EXCEPTION reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On EOF reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On END reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On ELSE reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On EFFECT reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On DEFAULT reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On BAR_RBRACK reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On BAR reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On ASSUME reduce production noSeqTerm -> LET recopt letbinding letbindings IN term
-- On AND reduce production noSeqTerm -> LET recopt letbinding letbindings IN term

State 329:
recopt -> maybeFocus . REC [ UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY ]
-- On REC shift to state 330

State 330:
recopt -> maybeFocus REC . [ UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY ]
-- On UNDERSCORE reduce production recopt -> maybeFocus REC
-- On UINT8 reduce production recopt -> maybeFocus REC
-- On TVAR reduce production recopt -> maybeFocus REC
-- On TRUE reduce production recopt -> maybeFocus REC
-- On STRING reduce production recopt -> maybeFocus REC
-- On NAME reduce production recopt -> maybeFocus REC
-- On LPAREN_RPAREN reduce production recopt -> maybeFocus REC
-- On LPAREN reduce production recopt -> maybeFocus REC
-- On LENS_PAREN_LEFT reduce production recopt -> maybeFocus REC
-- On LBRACK reduce production recopt -> maybeFocus REC
-- On LBRACE reduce production recopt -> maybeFocus REC
-- On INT64 reduce production recopt -> maybeFocus REC
-- On INT32 reduce production recopt -> maybeFocus REC
-- On INT reduce production recopt -> maybeFocus REC
-- On IEEE64 reduce production recopt -> maybeFocus REC
-- On IDENT reduce production recopt -> maybeFocus REC
-- On HASH reduce production recopt -> maybeFocus REC
-- On FALSE reduce production recopt -> maybeFocus REC
-- On CHAR reduce production recopt -> maybeFocus REC
-- On BYTEARRAY reduce production recopt -> maybeFocus REC

State 331:
noSeqTerm -> MATCH term . WITH firstPatternBranch patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH shift to state 332

State 332:
noSeqTerm -> MATCH term WITH . firstPatternBranch patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On BAR shift to state 109
-- On maybeBar shift to state 110
-- On firstPatternBranch shift to state 333
-- On UNDERSCORE reduce production maybeBar ->
-- On UINT8 reduce production maybeBar ->
-- On TVAR reduce production maybeBar ->
-- On TRUE reduce production maybeBar ->
-- On STRING reduce production maybeBar ->
-- On NAME reduce production maybeBar ->
-- On LPAREN_RPAREN reduce production maybeBar ->
-- On LPAREN reduce production maybeBar ->
-- On LENS_PAREN_LEFT reduce production maybeBar ->
-- On LBRACK reduce production maybeBar ->
-- On LBRACE reduce production maybeBar ->
-- On INT64 reduce production maybeBar ->
-- On INT32 reduce production maybeBar ->
-- On INT reduce production maybeBar ->
-- On IEEE64 reduce production maybeBar ->
-- On IDENT reduce production maybeBar ->
-- On HASH reduce production maybeBar ->
-- On FALSE reduce production maybeBar ->
-- On CHAR reduce production maybeBar ->
-- On BYTEARRAY reduce production maybeBar ->

State 333:
noSeqTerm -> MATCH term WITH firstPatternBranch . patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On patternBranches shift to state 334
-- On WITH reduce production patternBranches ->
-- On VAL reduce production patternBranches ->
-- On TYPE reduce production patternBranches ->
-- On TOTAL reduce production patternBranches ->
-- On THEN reduce production patternBranches ->
-- On SUB_EFFECT reduce production patternBranches ->
-- On SUBTYPE reduce production patternBranches ->
-- On SUBKIND reduce production patternBranches ->
-- On SEMICOLON_SEMICOLON reduce production patternBranches ->
-- On SEMICOLON reduce production patternBranches ->
-- On RPAREN reduce production patternBranches ->
-- On RBRACK reduce production patternBranches ->
-- On RBRACE reduce production patternBranches ->
-- On PRIVATE reduce production patternBranches ->
-- On PRAGMA_SET_OPTIONS reduce production patternBranches ->
-- On PRAGMA_RESET_OPTIONS reduce production patternBranches ->
-- On OPEN reduce production patternBranches ->
-- On OPAQUE reduce production patternBranches ->
-- On NEW_EFFECT reduce production patternBranches ->
-- On MODULE reduce production patternBranches ->
-- On LOGIC reduce production patternBranches ->
-- On LET reduce production patternBranches ->
-- On LBRACE reduce production patternBranches ->
-- On KIND reduce production patternBranches ->
-- On IN reduce production patternBranches ->
-- On EXCEPTION reduce production patternBranches ->
-- On EOF reduce production patternBranches ->
-- On END reduce production patternBranches ->
-- On ELSE reduce production patternBranches ->
-- On EFFECT reduce production patternBranches ->
-- On DEFAULT reduce production patternBranches ->
-- On BAR_RBRACK reduce production patternBranches ->
-- On BAR reduce production patternBranches ->
-- On ASSUME reduce production patternBranches ->
-- On AND reduce production patternBranches ->

State 334:
noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
patternBranches -> patternBranches . patternBranch [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On BAR shift to state 275
-- On patternBranch shift to state 280
-- On WITH reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On VAL reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On TYPE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On TOTAL reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On THEN reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On SUB_EFFECT reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On SUBTYPE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On SUBKIND reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On SEMICOLON reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On RPAREN reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On RBRACK reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On RBRACE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On PRIVATE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On OPEN reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On OPAQUE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On NEW_EFFECT reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On MODULE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On LOGIC reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On LET reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On LBRACE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On KIND reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On IN reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On EXCEPTION reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On EOF reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On END reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On ELSE reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On EFFECT reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On DEFAULT reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On BAR_RBRACK reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On ASSUME reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches
-- On AND reduce production noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches

State 335:
projectionLHS -> LBRACK_BAR semiColonTermList . BAR_RBRACK [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On BAR_RBRACK shift to state 336

State 336:
projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On VAL reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On UNDERSCORE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On UINT8 reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On TYP_APP_GREATER reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On TYPE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On TVAR reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On TRUE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On TOTAL reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On THEN reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On SUB_EFFECT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On SUBTYPE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On SUBKIND reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On STRING reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On STAR reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On SQUIGGLY_RARROW reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On SEMICOLON reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On RPAREN reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On RBRACK reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On RBRACE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On RARROW reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On PRIVATE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On PLUS_OP reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On PERCENT_LBRACK reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On OPEN reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On OPAQUE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On NEW_EFFECT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On NAME reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On MODULE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On MINUS_OP reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LPAREN_RPAREN reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LPAREN reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LOGIC reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LET reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LENS_PAREN_LEFT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LBRACK_BAR reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LBRACK reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On LBRACE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On KIND reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On INT64 reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On INT32 reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On INT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On IN reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On IMPLIES reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On IFF reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On IEEE64 reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On IDENT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On HASH reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On FALSE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On EXCEPTION reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On EQUALS reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On EOF reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On END reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On ELSE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On EFFECT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On DOT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On DIV_MOD_OP reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On DISJUNCTION reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On DEFAULT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On CUSTOM_OP reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On CONJUNCTION reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On COMMA reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On COLON_EQUALS reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On COLON_COLON reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On CHAR reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On BYTEARRAY reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On BEGIN reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On BAR_RBRACK reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On BAR_BAR reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On BAR reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On BANG_LBRACE reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On BANG reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On ASSUME reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On ASSERT reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On AND reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On AMP_AMP reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK
-- On AMP reduce production projectionLHS -> LBRACK_BAR semiColonTermList BAR_RBRACK

State 337:
atomicTerm -> LENS_PAREN_LEFT tupleN . LENS_PAREN_RIGHT [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On LENS_PAREN_RIGHT shift to state 338

State 338:
atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On VAL reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On UNDERSCORE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On UINT8 reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On TYP_APP_GREATER reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On TYPE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On TVAR reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On TRUE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On TOTAL reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On THEN reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On SUB_EFFECT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On SUBTYPE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On SUBKIND reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On STRING reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On STAR reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On SQUIGGLY_RARROW reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On SEMICOLON_SEMICOLON reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On SEMICOLON reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On RPAREN reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On RBRACK reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On RBRACE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On RARROW reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On PRIVATE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On PRAGMA_SET_OPTIONS reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On PRAGMA_RESET_OPTIONS reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On PLUS_OP reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On PERCENT_LBRACK reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On OPEN reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On OPAQUE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On NEW_EFFECT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On NAME reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On MODULE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On MINUS_OP reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LPAREN_RPAREN reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LPAREN reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LOGIC reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LET reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LENS_PAREN_RIGHT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LENS_PAREN_LEFT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LBRACK_BAR reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LBRACK reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On LBRACE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On KIND reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On INT64 reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On INT32 reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On INT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On IN reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On IMPLIES reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On IFF reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On IEEE64 reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On IDENT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On HASH reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On FALSE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On EXCEPTION reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On EQUALS reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On EOF reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On END reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On ELSE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On EFFECT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On DIV_MOD_OP reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On DISJUNCTION reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On DEFAULT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On CUSTOM_OP reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On CONJUNCTION reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On COMMA reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On COLON_EQUALS reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On COLON_COLON reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On CHAR reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On BYTEARRAY reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On BEGIN reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On BAR_RBRACK reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On BAR_BAR reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On BAR reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On BANG_LBRACE reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On BANG reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On ASSUME reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On ASSERT reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On AND reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On AMP_AMP reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT
-- On AMP reduce production atomicTerm -> LENS_PAREN_LEFT tupleN LENS_PAREN_RIGHT

State 339:
unaryTerm -> MINUS_OP atomicTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production unaryTerm -> MINUS_OP atomicTerm
-- On VAL reduce production unaryTerm -> MINUS_OP atomicTerm
-- On TYPE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On TOTAL reduce production unaryTerm -> MINUS_OP atomicTerm
-- On THEN reduce production unaryTerm -> MINUS_OP atomicTerm
-- On SUB_EFFECT reduce production unaryTerm -> MINUS_OP atomicTerm
-- On SUBTYPE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On SUBKIND reduce production unaryTerm -> MINUS_OP atomicTerm
-- On STAR reduce production unaryTerm -> MINUS_OP atomicTerm
-- On SEMICOLON_SEMICOLON reduce production unaryTerm -> MINUS_OP atomicTerm
-- On SEMICOLON reduce production unaryTerm -> MINUS_OP atomicTerm
-- On RPAREN reduce production unaryTerm -> MINUS_OP atomicTerm
-- On RBRACK reduce production unaryTerm -> MINUS_OP atomicTerm
-- On RBRACE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On RARROW reduce production unaryTerm -> MINUS_OP atomicTerm
-- On PRIVATE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production unaryTerm -> MINUS_OP atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production unaryTerm -> MINUS_OP atomicTerm
-- On PLUS_OP reduce production unaryTerm -> MINUS_OP atomicTerm
-- On OPEN reduce production unaryTerm -> MINUS_OP atomicTerm
-- On OPAQUE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On NEW_EFFECT reduce production unaryTerm -> MINUS_OP atomicTerm
-- On MODULE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On MINUS_OP reduce production unaryTerm -> MINUS_OP atomicTerm
-- On LOGIC reduce production unaryTerm -> MINUS_OP atomicTerm
-- On LET reduce production unaryTerm -> MINUS_OP atomicTerm
-- On LENS_PAREN_RIGHT reduce production unaryTerm -> MINUS_OP atomicTerm
-- On LBRACE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On KIND reduce production unaryTerm -> MINUS_OP atomicTerm
-- On IN reduce production unaryTerm -> MINUS_OP atomicTerm
-- On IMPLIES reduce production unaryTerm -> MINUS_OP atomicTerm
-- On IFF reduce production unaryTerm -> MINUS_OP atomicTerm
-- On EXCEPTION reduce production unaryTerm -> MINUS_OP atomicTerm
-- On EQUALS reduce production unaryTerm -> MINUS_OP atomicTerm
-- On EOF reduce production unaryTerm -> MINUS_OP atomicTerm
-- On END reduce production unaryTerm -> MINUS_OP atomicTerm
-- On ELSE reduce production unaryTerm -> MINUS_OP atomicTerm
-- On EFFECT reduce production unaryTerm -> MINUS_OP atomicTerm
-- On DIV_MOD_OP reduce production unaryTerm -> MINUS_OP atomicTerm
-- On DISJUNCTION reduce production unaryTerm -> MINUS_OP atomicTerm
-- On DEFAULT reduce production unaryTerm -> MINUS_OP atomicTerm
-- On CUSTOM_OP reduce production unaryTerm -> MINUS_OP atomicTerm
-- On CONJUNCTION reduce production unaryTerm -> MINUS_OP atomicTerm
-- On COMMA reduce production unaryTerm -> MINUS_OP atomicTerm
-- On COLON_EQUALS reduce production unaryTerm -> MINUS_OP atomicTerm
-- On COLON_COLON reduce production unaryTerm -> MINUS_OP atomicTerm
-- On BAR_RBRACK reduce production unaryTerm -> MINUS_OP atomicTerm
-- On BAR_BAR reduce production unaryTerm -> MINUS_OP atomicTerm
-- On BAR reduce production unaryTerm -> MINUS_OP atomicTerm
-- On ASSUME reduce production unaryTerm -> MINUS_OP atomicTerm
-- On AND reduce production unaryTerm -> MINUS_OP atomicTerm
-- On AMP_AMP reduce production unaryTerm -> MINUS_OP atomicTerm
-- On AMP reduce production unaryTerm -> MINUS_OP atomicTerm

State 340:
projectionLHS -> LPAREN term . maybeWithSort RPAREN [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On SUBTYPE shift to state 341
-- On SUBKIND shift to state 342
-- On maybeWithSort shift to state 343
-- On hasSort shift to state 345
-- On RPAREN reduce production maybeWithSort ->

State 341:
hasSort -> SUBTYPE . [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production hasSort -> SUBTYPE
-- On UINT8 reduce production hasSort -> SUBTYPE
-- On TVAR reduce production hasSort -> SUBTYPE
-- On TRUE reduce production hasSort -> SUBTYPE
-- On TILDE reduce production hasSort -> SUBTYPE
-- On STRING reduce production hasSort -> SUBTYPE
-- On PLUS_OP reduce production hasSort -> SUBTYPE
-- On PERCENT_LBRACK reduce production hasSort -> SUBTYPE
-- On NAME reduce production hasSort -> SUBTYPE
-- On MINUS_OP reduce production hasSort -> SUBTYPE
-- On LPAREN_RPAREN reduce production hasSort -> SUBTYPE
-- On LPAREN reduce production hasSort -> SUBTYPE
-- On LENS_PAREN_LEFT reduce production hasSort -> SUBTYPE
-- On LBRACK_BAR reduce production hasSort -> SUBTYPE
-- On LBRACK reduce production hasSort -> SUBTYPE
-- On LBRACE reduce production hasSort -> SUBTYPE
-- On INT64 reduce production hasSort -> SUBTYPE
-- On INT32 reduce production hasSort -> SUBTYPE
-- On INT reduce production hasSort -> SUBTYPE
-- On IEEE64 reduce production hasSort -> SUBTYPE
-- On IDENT reduce production hasSort -> SUBTYPE
-- On HASH reduce production hasSort -> SUBTYPE
-- On FUN reduce production hasSort -> SUBTYPE
-- On FALSE reduce production hasSort -> SUBTYPE
-- On EQUALS reduce production hasSort -> SUBTYPE
-- On CHAR reduce production hasSort -> SUBTYPE
-- On BYTEARRAY reduce production hasSort -> SUBTYPE
-- On BEGIN reduce production hasSort -> SUBTYPE
-- On BANG_LBRACE reduce production hasSort -> SUBTYPE
-- On BANG reduce production hasSort -> SUBTYPE
-- On ASSERT reduce production hasSort -> SUBTYPE

State 342:
hasSort -> SUBKIND . [ UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
-- On UNDERSCORE reduce production hasSort -> SUBKIND
-- On UINT8 reduce production hasSort -> SUBKIND
-- On TVAR reduce production hasSort -> SUBKIND
-- On TRUE reduce production hasSort -> SUBKIND
-- On TILDE reduce production hasSort -> SUBKIND
-- On STRING reduce production hasSort -> SUBKIND
-- On PLUS_OP reduce production hasSort -> SUBKIND
-- On PERCENT_LBRACK reduce production hasSort -> SUBKIND
-- On NAME reduce production hasSort -> SUBKIND
-- On MINUS_OP reduce production hasSort -> SUBKIND
-- On LPAREN_RPAREN reduce production hasSort -> SUBKIND
-- On LPAREN reduce production hasSort -> SUBKIND
-- On LENS_PAREN_LEFT reduce production hasSort -> SUBKIND
-- On LBRACK_BAR reduce production hasSort -> SUBKIND
-- On LBRACK reduce production hasSort -> SUBKIND
-- On LBRACE reduce production hasSort -> SUBKIND
-- On INT64 reduce production hasSort -> SUBKIND
-- On INT32 reduce production hasSort -> SUBKIND
-- On INT reduce production hasSort -> SUBKIND
-- On IEEE64 reduce production hasSort -> SUBKIND
-- On IDENT reduce production hasSort -> SUBKIND
-- On HASH reduce production hasSort -> SUBKIND
-- On FUN reduce production hasSort -> SUBKIND
-- On FALSE reduce production hasSort -> SUBKIND
-- On EQUALS reduce production hasSort -> SUBKIND
-- On CHAR reduce production hasSort -> SUBKIND
-- On BYTEARRAY reduce production hasSort -> SUBKIND
-- On BEGIN reduce production hasSort -> SUBKIND
-- On BANG_LBRACE reduce production hasSort -> SUBKIND
-- On BANG reduce production hasSort -> SUBKIND
-- On ASSERT reduce production hasSort -> SUBKIND

State 343:
projectionLHS -> LPAREN term maybeWithSort . RPAREN [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On RPAREN shift to state 344

State 344:
projectionLHS -> LPAREN term maybeWithSort RPAREN . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On VAL reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On UNDERSCORE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On UINT8 reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On TYP_APP_GREATER reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On TYPE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On TVAR reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On TRUE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On TOTAL reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On THEN reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On SUB_EFFECT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On SUBTYPE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On SUBKIND reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On STRING reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On STAR reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On SQUIGGLY_RARROW reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On SEMICOLON reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On RPAREN reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On RBRACK reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On RBRACE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On RARROW reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On PRIVATE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On PLUS_OP reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On PERCENT_LBRACK reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On OPEN reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On OPAQUE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On NEW_EFFECT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On NAME reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On MODULE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On MINUS_OP reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LPAREN_RPAREN reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LPAREN reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LOGIC reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LET reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LENS_PAREN_LEFT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LBRACK_BAR reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LBRACK reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On LBRACE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On KIND reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On INT64 reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On INT32 reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On INT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On IN reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On IMPLIES reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On IFF reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On IEEE64 reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On IDENT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On HASH reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On FALSE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On EXCEPTION reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On EQUALS reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On EOF reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On END reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On ELSE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On EFFECT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On DOT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On DIV_MOD_OP reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On DISJUNCTION reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On DEFAULT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On CUSTOM_OP reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On CONJUNCTION reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On COMMA reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On COLON_EQUALS reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On COLON_COLON reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On CHAR reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On BYTEARRAY reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On BEGIN reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On BAR_RBRACK reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On BAR_BAR reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On BAR reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On BANG_LBRACE reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On BANG reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On ASSUME reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On ASSERT reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On AND reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On AMP_AMP reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN
-- On AMP reduce production projectionLHS -> LPAREN term maybeWithSort RPAREN

State 345:
maybeWithSort -> hasSort . simpleTerm [ RPAREN ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 346
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 346:
maybeWithSort -> hasSort simpleTerm . [ RPAREN ]
-- On RPAREN reduce production maybeWithSort -> hasSort simpleTerm

State 347:
unaryTerm -> PLUS_OP atomicTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production unaryTerm -> PLUS_OP atomicTerm
-- On VAL reduce production unaryTerm -> PLUS_OP atomicTerm
-- On TYPE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On TOTAL reduce production unaryTerm -> PLUS_OP atomicTerm
-- On THEN reduce production unaryTerm -> PLUS_OP atomicTerm
-- On SUB_EFFECT reduce production unaryTerm -> PLUS_OP atomicTerm
-- On SUBTYPE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On SUBKIND reduce production unaryTerm -> PLUS_OP atomicTerm
-- On STAR reduce production unaryTerm -> PLUS_OP atomicTerm
-- On SEMICOLON_SEMICOLON reduce production unaryTerm -> PLUS_OP atomicTerm
-- On SEMICOLON reduce production unaryTerm -> PLUS_OP atomicTerm
-- On RPAREN reduce production unaryTerm -> PLUS_OP atomicTerm
-- On RBRACK reduce production unaryTerm -> PLUS_OP atomicTerm
-- On RBRACE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On RARROW reduce production unaryTerm -> PLUS_OP atomicTerm
-- On PRIVATE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production unaryTerm -> PLUS_OP atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production unaryTerm -> PLUS_OP atomicTerm
-- On PLUS_OP reduce production unaryTerm -> PLUS_OP atomicTerm
-- On OPEN reduce production unaryTerm -> PLUS_OP atomicTerm
-- On OPAQUE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On NEW_EFFECT reduce production unaryTerm -> PLUS_OP atomicTerm
-- On MODULE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On MINUS_OP reduce production unaryTerm -> PLUS_OP atomicTerm
-- On LOGIC reduce production unaryTerm -> PLUS_OP atomicTerm
-- On LET reduce production unaryTerm -> PLUS_OP atomicTerm
-- On LENS_PAREN_RIGHT reduce production unaryTerm -> PLUS_OP atomicTerm
-- On LBRACE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On KIND reduce production unaryTerm -> PLUS_OP atomicTerm
-- On IN reduce production unaryTerm -> PLUS_OP atomicTerm
-- On IMPLIES reduce production unaryTerm -> PLUS_OP atomicTerm
-- On IFF reduce production unaryTerm -> PLUS_OP atomicTerm
-- On EXCEPTION reduce production unaryTerm -> PLUS_OP atomicTerm
-- On EQUALS reduce production unaryTerm -> PLUS_OP atomicTerm
-- On EOF reduce production unaryTerm -> PLUS_OP atomicTerm
-- On END reduce production unaryTerm -> PLUS_OP atomicTerm
-- On ELSE reduce production unaryTerm -> PLUS_OP atomicTerm
-- On EFFECT reduce production unaryTerm -> PLUS_OP atomicTerm
-- On DIV_MOD_OP reduce production unaryTerm -> PLUS_OP atomicTerm
-- On DISJUNCTION reduce production unaryTerm -> PLUS_OP atomicTerm
-- On DEFAULT reduce production unaryTerm -> PLUS_OP atomicTerm
-- On CUSTOM_OP reduce production unaryTerm -> PLUS_OP atomicTerm
-- On CONJUNCTION reduce production unaryTerm -> PLUS_OP atomicTerm
-- On COMMA reduce production unaryTerm -> PLUS_OP atomicTerm
-- On COLON_EQUALS reduce production unaryTerm -> PLUS_OP atomicTerm
-- On COLON_COLON reduce production unaryTerm -> PLUS_OP atomicTerm
-- On BAR_RBRACK reduce production unaryTerm -> PLUS_OP atomicTerm
-- On BAR_BAR reduce production unaryTerm -> PLUS_OP atomicTerm
-- On BAR reduce production unaryTerm -> PLUS_OP atomicTerm
-- On ASSUME reduce production unaryTerm -> PLUS_OP atomicTerm
-- On AND reduce production unaryTerm -> PLUS_OP atomicTerm
-- On AMP_AMP reduce production unaryTerm -> PLUS_OP atomicTerm
-- On AMP reduce production unaryTerm -> PLUS_OP atomicTerm

State 348:
noSeqTerm -> REQUIRES label_opt typ . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH reduce production noSeqTerm -> REQUIRES label_opt typ
-- On VAL reduce production noSeqTerm -> REQUIRES label_opt typ
-- On TYPE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On TOTAL reduce production noSeqTerm -> REQUIRES label_opt typ
-- On THEN reduce production noSeqTerm -> REQUIRES label_opt typ
-- On SUB_EFFECT reduce production noSeqTerm -> REQUIRES label_opt typ
-- On SUBTYPE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On SUBKIND reduce production noSeqTerm -> REQUIRES label_opt typ
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> REQUIRES label_opt typ
-- On SEMICOLON reduce production noSeqTerm -> REQUIRES label_opt typ
-- On RPAREN reduce production noSeqTerm -> REQUIRES label_opt typ
-- On RBRACK reduce production noSeqTerm -> REQUIRES label_opt typ
-- On RBRACE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On PRIVATE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> REQUIRES label_opt typ
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> REQUIRES label_opt typ
-- On OPEN reduce production noSeqTerm -> REQUIRES label_opt typ
-- On OPAQUE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On NEW_EFFECT reduce production noSeqTerm -> REQUIRES label_opt typ
-- On MODULE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On LOGIC reduce production noSeqTerm -> REQUIRES label_opt typ
-- On LET reduce production noSeqTerm -> REQUIRES label_opt typ
-- On LBRACE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On KIND reduce production noSeqTerm -> REQUIRES label_opt typ
-- On IN reduce production noSeqTerm -> REQUIRES label_opt typ
-- On EXCEPTION reduce production noSeqTerm -> REQUIRES label_opt typ
-- On EOF reduce production noSeqTerm -> REQUIRES label_opt typ
-- On END reduce production noSeqTerm -> REQUIRES label_opt typ
-- On ELSE reduce production noSeqTerm -> REQUIRES label_opt typ
-- On EFFECT reduce production noSeqTerm -> REQUIRES label_opt typ
-- On DEFAULT reduce production noSeqTerm -> REQUIRES label_opt typ
-- On BAR_RBRACK reduce production noSeqTerm -> REQUIRES label_opt typ
-- On BAR reduce production noSeqTerm -> REQUIRES label_opt typ
-- On ASSUME reduce production noSeqTerm -> REQUIRES label_opt typ
-- On AND reduce production noSeqTerm -> REQUIRES label_opt typ

State 349:
noSeqTerm -> TRY term . WITH firstPatternBranch patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On WITH shift to state 350

State 350:
noSeqTerm -> TRY term WITH . firstPatternBranch patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On BAR shift to state 109
-- On maybeBar shift to state 110
-- On firstPatternBranch shift to state 351
-- On UNDERSCORE reduce production maybeBar ->
-- On UINT8 reduce production maybeBar ->
-- On TVAR reduce production maybeBar ->
-- On TRUE reduce production maybeBar ->
-- On STRING reduce production maybeBar ->
-- On NAME reduce production maybeBar ->
-- On LPAREN_RPAREN reduce production maybeBar ->
-- On LPAREN reduce production maybeBar ->
-- On LENS_PAREN_LEFT reduce production maybeBar ->
-- On LBRACK reduce production maybeBar ->
-- On LBRACE reduce production maybeBar ->
-- On INT64 reduce production maybeBar ->
-- On INT32 reduce production maybeBar ->
-- On INT reduce production maybeBar ->
-- On IEEE64 reduce production maybeBar ->
-- On IDENT reduce production maybeBar ->
-- On HASH reduce production maybeBar ->
-- On FALSE reduce production maybeBar ->
-- On CHAR reduce production maybeBar ->
-- On BYTEARRAY reduce production maybeBar ->

State 351:
noSeqTerm -> TRY term WITH firstPatternBranch . patternBranches [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On patternBranches shift to state 352
-- On WITH reduce production patternBranches ->
-- On VAL reduce production patternBranches ->
-- On TYPE reduce production patternBranches ->
-- On TOTAL reduce production patternBranches ->
-- On THEN reduce production patternBranches ->
-- On SUB_EFFECT reduce production patternBranches ->
-- On SUBTYPE reduce production patternBranches ->
-- On SUBKIND reduce production patternBranches ->
-- On SEMICOLON_SEMICOLON reduce production patternBranches ->
-- On SEMICOLON reduce production patternBranches ->
-- On RPAREN reduce production patternBranches ->
-- On RBRACK reduce production patternBranches ->
-- On RBRACE reduce production patternBranches ->
-- On PRIVATE reduce production patternBranches ->
-- On PRAGMA_SET_OPTIONS reduce production patternBranches ->
-- On PRAGMA_RESET_OPTIONS reduce production patternBranches ->
-- On OPEN reduce production patternBranches ->
-- On OPAQUE reduce production patternBranches ->
-- On NEW_EFFECT reduce production patternBranches ->
-- On MODULE reduce production patternBranches ->
-- On LOGIC reduce production patternBranches ->
-- On LET reduce production patternBranches ->
-- On LBRACE reduce production patternBranches ->
-- On KIND reduce production patternBranches ->
-- On IN reduce production patternBranches ->
-- On EXCEPTION reduce production patternBranches ->
-- On EOF reduce production patternBranches ->
-- On END reduce production patternBranches ->
-- On ELSE reduce production patternBranches ->
-- On EFFECT reduce production patternBranches ->
-- On DEFAULT reduce production patternBranches ->
-- On BAR_RBRACK reduce production patternBranches ->
-- On BAR reduce production patternBranches ->
-- On ASSUME reduce production patternBranches ->
-- On AND reduce production patternBranches ->

State 352:
noSeqTerm -> TRY term WITH firstPatternBranch patternBranches . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
patternBranches -> patternBranches . patternBranch [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND ]
-- On BAR shift to state 275
-- On patternBranch shift to state 280
-- On WITH reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On VAL reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On TYPE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On TOTAL reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On THEN reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On SUB_EFFECT reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On SUBTYPE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On SUBKIND reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On SEMICOLON_SEMICOLON reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On SEMICOLON reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On RPAREN reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On RBRACK reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On RBRACE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On PRIVATE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On PRAGMA_SET_OPTIONS reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On PRAGMA_RESET_OPTIONS reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On OPEN reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On OPAQUE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On NEW_EFFECT reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On MODULE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On LOGIC reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On LET reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On LBRACE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On KIND reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On IN reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On EXCEPTION reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On EOF reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On END reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On ELSE reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On EFFECT reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On DEFAULT reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On BAR_RBRACK reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On ASSUME reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches
-- On AND reduce production noSeqTerm -> TRY term WITH firstPatternBranch patternBranches

State 353:
projectionLHS -> PERCENT_LBRACK semiColonTermList . RBRACK [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On RBRACK shift to state 354

State 354:
projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK . [ WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP ]
-- On WITH reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On VAL reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On UNDERSCORE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On UINT8 reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On TYP_APP_GREATER reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On TYPE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On TVAR reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On TRUE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On TOTAL reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On THEN reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On SUB_EFFECT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On SUBTYPE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On SUBKIND reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On STRING reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On STAR reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On SQUIGGLY_RARROW reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On SEMICOLON_SEMICOLON reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On SEMICOLON reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On RPAREN reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On RBRACK reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On RBRACE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On RARROW reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On PRIVATE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On PRAGMA_SET_OPTIONS reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On PRAGMA_RESET_OPTIONS reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On PLUS_OP reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On PERCENT_LBRACK reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On OPEN reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On OPAQUE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On NEW_EFFECT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On NAME reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On MODULE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On MINUS_OP reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LPAREN_RPAREN reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LPAREN reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LOGIC reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LET reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LENS_PAREN_RIGHT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LENS_PAREN_LEFT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LBRACK_BAR reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LBRACK reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On LBRACE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On KIND reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On INT64 reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On INT32 reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On INT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On IN reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On IMPLIES reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On IFF reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On IEEE64 reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On IDENT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On HASH reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On FALSE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On EXCEPTION reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On EQUALS reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On EOF reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On END reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On ELSE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On EFFECT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On DOT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On DIV_MOD_OP reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On DISJUNCTION reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On DEFAULT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On CUSTOM_OP reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On CONJUNCTION reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On COMMA reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On COLON_EQUALS reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On COLON_COLON reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On CHAR reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On BYTEARRAY reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On BEGIN reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On BAR_RBRACK reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On BAR_BAR reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On BAR reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On BANG_LBRACE reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On BANG reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On ASSUME reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On ASSERT reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On AND reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On AMP_AMP reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK
-- On AMP reduce production projectionLHS -> PERCENT_LBRACK semiColonTermList RBRACK

State 355:
unaryTerm -> TILDE atomicTerm . [ WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP ]
-- On WITH reduce production unaryTerm -> TILDE atomicTerm
-- On VAL reduce production unaryTerm -> TILDE atomicTerm
-- On TYPE reduce production unaryTerm -> TILDE atomicTerm
-- On TOTAL reduce production unaryTerm -> TILDE atomicTerm
-- On THEN reduce production unaryTerm -> TILDE atomicTerm
-- On SUB_EFFECT reduce production unaryTerm -> TILDE atomicTerm
-- On SUBTYPE reduce production unaryTerm -> TILDE atomicTerm
-- On SUBKIND reduce production unaryTerm -> TILDE atomicTerm
-- On STAR reduce production unaryTerm -> TILDE atomicTerm
-- On SEMICOLON_SEMICOLON reduce production unaryTerm -> TILDE atomicTerm
-- On SEMICOLON reduce production unaryTerm -> TILDE atomicTerm
-- On RPAREN reduce production unaryTerm -> TILDE atomicTerm
-- On RBRACK reduce production unaryTerm -> TILDE atomicTerm
-- On RBRACE reduce production unaryTerm -> TILDE atomicTerm
-- On RARROW reduce production unaryTerm -> TILDE atomicTerm
-- On PRIVATE reduce production unaryTerm -> TILDE atomicTerm
-- On PRAGMA_SET_OPTIONS reduce production unaryTerm -> TILDE atomicTerm
-- On PRAGMA_RESET_OPTIONS reduce production unaryTerm -> TILDE atomicTerm
-- On PLUS_OP reduce production unaryTerm -> TILDE atomicTerm
-- On OPEN reduce production unaryTerm -> TILDE atomicTerm
-- On OPAQUE reduce production unaryTerm -> TILDE atomicTerm
-- On NEW_EFFECT reduce production unaryTerm -> TILDE atomicTerm
-- On MODULE reduce production unaryTerm -> TILDE atomicTerm
-- On MINUS_OP reduce production unaryTerm -> TILDE atomicTerm
-- On LOGIC reduce production unaryTerm -> TILDE atomicTerm
-- On LET reduce production unaryTerm -> TILDE atomicTerm
-- On LENS_PAREN_RIGHT reduce production unaryTerm -> TILDE atomicTerm
-- On LBRACE reduce production unaryTerm -> TILDE atomicTerm
-- On KIND reduce production unaryTerm -> TILDE atomicTerm
-- On IN reduce production unaryTerm -> TILDE atomicTerm
-- On IMPLIES reduce production unaryTerm -> TILDE atomicTerm
-- On IFF reduce production unaryTerm -> TILDE atomicTerm
-- On EXCEPTION reduce production unaryTerm -> TILDE atomicTerm
-- On EQUALS reduce production unaryTerm -> TILDE atomicTerm
-- On EOF reduce production unaryTerm -> TILDE atomicTerm
-- On END reduce production unaryTerm -> TILDE atomicTerm
-- On ELSE reduce production unaryTerm -> TILDE atomicTerm
-- On EFFECT reduce production unaryTerm -> TILDE atomicTerm
-- On DIV_MOD_OP reduce production unaryTerm -> TILDE atomicTerm
-- On DISJUNCTION reduce production unaryTerm -> TILDE atomicTerm
-- On DEFAULT reduce production unaryTerm -> TILDE atomicTerm
-- On CUSTOM_OP reduce production unaryTerm -> TILDE atomicTerm
-- On CONJUNCTION reduce production unaryTerm -> TILDE atomicTerm
-- On COMMA reduce production unaryTerm -> TILDE atomicTerm
-- On COLON_EQUALS reduce production unaryTerm -> TILDE atomicTerm
-- On COLON_COLON reduce production unaryTerm -> TILDE atomicTerm
-- On BAR_RBRACK reduce production unaryTerm -> TILDE atomicTerm
-- On BAR_BAR reduce production unaryTerm -> TILDE atomicTerm
-- On BAR reduce production unaryTerm -> TILDE atomicTerm
-- On ASSUME reduce production unaryTerm -> TILDE atomicTerm
-- On AND reduce production unaryTerm -> TILDE atomicTerm
-- On AMP_AMP reduce production unaryTerm -> TILDE atomicTerm
-- On AMP reduce production unaryTerm -> TILDE atomicTerm

State 356:
sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On TYPE reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On TOTAL reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On SUB_EFFECT reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On SEMICOLON_SEMICOLON reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On PRIVATE reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On PRAGMA_SET_OPTIONS reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On PRAGMA_RESET_OPTIONS reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On OPEN reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On OPAQUE reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On NEW_EFFECT reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On MODULE reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On LOGIC reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On LET reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On KIND reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On EXCEPTION reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On EOF reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On END reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On EFFECT reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On DEFAULT reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm
-- On ASSUME reduce production sub_effect -> qname SQUIGGLY_RARROW qname EQUALS simpleTerm

State 357:
qualifier -> PRIVATE . [ VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME ]
-- On VAL reduce production qualifier -> PRIVATE
-- On TYPE reduce production qualifier -> PRIVATE
-- On TOTAL reduce production qualifier -> PRIVATE
-- On PRIVATE reduce production qualifier -> PRIVATE
-- On OPAQUE reduce production qualifier -> PRIVATE
-- On NEW_EFFECT reduce production qualifier -> PRIVATE
-- On LOGIC reduce production qualifier -> PRIVATE
-- On EFFECT reduce production qualifier -> PRIVATE
-- On DEFAULT reduce production qualifier -> PRIVATE
-- On ASSUME reduce production qualifier -> PRIVATE

State 358:
pragma -> PRAGMA_SET_OPTIONS . STRING [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On STRING shift to state 359

State 359:
pragma -> PRAGMA_SET_OPTIONS STRING . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On TYPE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On TOTAL reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On SUB_EFFECT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On SEMICOLON_SEMICOLON reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On PRIVATE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On PRAGMA_SET_OPTIONS reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On PRAGMA_RESET_OPTIONS reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On OPEN reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On OPAQUE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On NEW_EFFECT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On MODULE reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On LOGIC reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On LET reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On KIND reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On EXCEPTION reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On EOF reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On END reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On EFFECT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On DEFAULT reduce production pragma -> PRAGMA_SET_OPTIONS STRING
-- On ASSUME reduce production pragma -> PRAGMA_SET_OPTIONS STRING

State 360:
pragma -> PRAGMA_RESET_OPTIONS . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On TYPE reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On TOTAL reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On SUB_EFFECT reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On SEMICOLON_SEMICOLON reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On PRIVATE reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On PRAGMA_SET_OPTIONS reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On PRAGMA_RESET_OPTIONS reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On OPEN reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On OPAQUE reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On NEW_EFFECT reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On MODULE reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On LOGIC reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On LET reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On KIND reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On EXCEPTION reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On EOF reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On END reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On EFFECT reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On DEFAULT reduce production pragma -> PRAGMA_RESET_OPTIONS
-- On ASSUME reduce production pragma -> PRAGMA_RESET_OPTIONS

State 361:
maybe_pragma_light -> PRAGMALIGHT . STRING [ MODULE EOF ]
-- On STRING shift to state 362

State 362:
maybe_pragma_light -> PRAGMALIGHT STRING . [ MODULE EOF ]
-- On MODULE reduce production maybe_pragma_light -> PRAGMALIGHT STRING
-- On EOF reduce production maybe_pragma_light -> PRAGMALIGHT STRING

State 363:
decl2 -> OPEN . qname [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On qname shift to state 364
-- On namepath shift to state 64
-- On name shift to state 65

State 364:
decl2 -> OPEN qname . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> OPEN qname
-- On TYPE reduce production decl2 -> OPEN qname
-- On TOTAL reduce production decl2 -> OPEN qname
-- On SUB_EFFECT reduce production decl2 -> OPEN qname
-- On SEMICOLON_SEMICOLON reduce production decl2 -> OPEN qname
-- On PRIVATE reduce production decl2 -> OPEN qname
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> OPEN qname
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> OPEN qname
-- On OPEN reduce production decl2 -> OPEN qname
-- On OPAQUE reduce production decl2 -> OPEN qname
-- On NEW_EFFECT reduce production decl2 -> OPEN qname
-- On MODULE reduce production decl2 -> OPEN qname
-- On LOGIC reduce production decl2 -> OPEN qname
-- On LET reduce production decl2 -> OPEN qname
-- On KIND reduce production decl2 -> OPEN qname
-- On EXCEPTION reduce production decl2 -> OPEN qname
-- On EOF reduce production decl2 -> OPEN qname
-- On END reduce production decl2 -> OPEN qname
-- On EFFECT reduce production decl2 -> OPEN qname
-- On DEFAULT reduce production decl2 -> OPEN qname
-- On ASSUME reduce production decl2 -> OPEN qname

State 365:
qualifier -> OPAQUE . [ VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME ]
-- On VAL reduce production qualifier -> OPAQUE
-- On TYPE reduce production qualifier -> OPAQUE
-- On TOTAL reduce production qualifier -> OPAQUE
-- On PRIVATE reduce production qualifier -> OPAQUE
-- On OPAQUE reduce production qualifier -> OPAQUE
-- On NEW_EFFECT reduce production qualifier -> OPAQUE
-- On LOGIC reduce production qualifier -> OPAQUE
-- On EFFECT reduce production qualifier -> OPAQUE
-- On DEFAULT reduce production qualifier -> OPAQUE
-- On ASSUME reduce production qualifier -> OPAQUE

State 366:
qualifier -> LOGIC . [ VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME ]
-- On VAL reduce production qualifier -> LOGIC
-- On TYPE reduce production qualifier -> LOGIC
-- On TOTAL reduce production qualifier -> LOGIC
-- On PRIVATE reduce production qualifier -> LOGIC
-- On OPAQUE reduce production qualifier -> LOGIC
-- On NEW_EFFECT reduce production qualifier -> LOGIC
-- On LOGIC reduce production qualifier -> LOGIC
-- On EFFECT reduce production qualifier -> LOGIC
-- On DEFAULT reduce production qualifier -> LOGIC
-- On ASSUME reduce production qualifier -> LOGIC

State 367:
decl2 -> LET . recopt letbinding letbindings [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On SQUIGGLY_RARROW shift to state 29
-- On recopt shift to state 368
-- On maybeFocus shift to state 329
-- On UNDERSCORE reduce production recopt ->
-- On UINT8 reduce production recopt ->
-- On TVAR reduce production recopt ->
-- On TRUE reduce production recopt ->
-- On STRING reduce production recopt ->
-- On REC reduce production maybeFocus ->
-- On NAME reduce production recopt ->
-- On LPAREN_RPAREN reduce production recopt ->
-- On LPAREN reduce production recopt ->
-- On LENS_PAREN_LEFT reduce production recopt ->
-- On LBRACK reduce production recopt ->
-- On LBRACE reduce production recopt ->
-- On INT64 reduce production recopt ->
-- On INT32 reduce production recopt ->
-- On INT reduce production recopt ->
-- On IEEE64 reduce production recopt ->
-- On IDENT reduce production recopt ->
-- On HASH reduce production recopt ->
-- On FALSE reduce production recopt ->
-- On CHAR reduce production recopt ->
-- On BYTEARRAY reduce production recopt ->

State 368:
decl2 -> LET recopt . letbinding letbindings [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 31
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 32
-- On LENS_PAREN_LEFT shift to state 33
-- On LBRACK shift to state 34
-- On LBRACE shift to state 35
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 49
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On tvar shift to state 54
-- On tuplePattern shift to state 55
-- On qname shift to state 56
-- On pattern shift to state 315
-- On nonTvarPattern2 shift to state 63
-- On namepath shift to state 64
-- On name shift to state 65
-- On listPattern shift to state 68
-- On letbinding shift to state 369
-- On ident shift to state 72
-- On constant shift to state 73
-- On atomicPattern2 shift to state 74
-- On atomicPattern shift to state 75
-- On appPattern shift to state 79

State 369:
decl2 -> LET recopt letbinding . letbindings [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On AND shift to state 322
-- On letbindings shift to state 370
-- On VAL reduce production letbindings ->
-- On TYPE reduce production letbindings ->
-- On TOTAL reduce production letbindings ->
-- On SUB_EFFECT reduce production letbindings ->
-- On SEMICOLON_SEMICOLON reduce production letbindings ->
-- On PRIVATE reduce production letbindings ->
-- On PRAGMA_SET_OPTIONS reduce production letbindings ->
-- On PRAGMA_RESET_OPTIONS reduce production letbindings ->
-- On OPEN reduce production letbindings ->
-- On OPAQUE reduce production letbindings ->
-- On NEW_EFFECT reduce production letbindings ->
-- On MODULE reduce production letbindings ->
-- On LOGIC reduce production letbindings ->
-- On LET reduce production letbindings ->
-- On KIND reduce production letbindings ->
-- On EXCEPTION reduce production letbindings ->
-- On EOF reduce production letbindings ->
-- On END reduce production letbindings ->
-- On EFFECT reduce production letbindings ->
-- On DEFAULT reduce production letbindings ->
-- On ASSUME reduce production letbindings ->

State 370:
decl2 -> LET recopt letbinding letbindings . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> LET recopt letbinding letbindings
-- On TYPE reduce production decl2 -> LET recopt letbinding letbindings
-- On TOTAL reduce production decl2 -> LET recopt letbinding letbindings
-- On SUB_EFFECT reduce production decl2 -> LET recopt letbinding letbindings
-- On SEMICOLON_SEMICOLON reduce production decl2 -> LET recopt letbinding letbindings
-- On PRIVATE reduce production decl2 -> LET recopt letbinding letbindings
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> LET recopt letbinding letbindings
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> LET recopt letbinding letbindings
-- On OPEN reduce production decl2 -> LET recopt letbinding letbindings
-- On OPAQUE reduce production decl2 -> LET recopt letbinding letbindings
-- On NEW_EFFECT reduce production decl2 -> LET recopt letbinding letbindings
-- On MODULE reduce production decl2 -> LET recopt letbinding letbindings
-- On LOGIC reduce production decl2 -> LET recopt letbinding letbindings
-- On LET reduce production decl2 -> LET recopt letbinding letbindings
-- On KIND reduce production decl2 -> LET recopt letbinding letbindings
-- On EXCEPTION reduce production decl2 -> LET recopt letbinding letbindings
-- On EOF reduce production decl2 -> LET recopt letbinding letbindings
-- On END reduce production decl2 -> LET recopt letbinding letbindings
-- On EFFECT reduce production decl2 -> LET recopt letbinding letbindings
-- On DEFAULT reduce production decl2 -> LET recopt letbinding letbindings
-- On ASSUME reduce production decl2 -> LET recopt letbinding letbindings

State 371:
kind_abbrev -> KIND . name binders EQUALS kind [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On name shift to state 372

State 372:
kind_abbrev -> KIND name . binders EQUALS kind [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On TVAR shift to state 11
-- On LPAREN shift to state 164
-- On IDENT shift to state 36
-- On tvar shift to state 171
-- On ident shift to state 172
-- On binders shift to state 373
-- On binder shift to state 256
-- On EQUALS reduce production binders ->

State 373:
kind_abbrev -> KIND name binders . EQUALS kind [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On EQUALS shift to state 374

State 374:
kind_abbrev -> KIND name binders EQUALS . kind [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 375
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On kind shift to state 376
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 375:
kind -> product . [ WITH VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT ASSUME AND ]
-- On WITH reduce production kind -> product
-- On VAL reduce production kind -> product
-- On TYPE reduce production kind -> product
-- On TOTAL reduce production kind -> product
-- On SUB_EFFECT reduce production kind -> product
-- On SEMICOLON_SEMICOLON reduce production kind -> product
-- On PRIVATE reduce production kind -> product
-- On PRAGMA_SET_OPTIONS reduce production kind -> product
-- On PRAGMA_RESET_OPTIONS reduce production kind -> product
-- On OPEN reduce production kind -> product
-- On OPAQUE reduce production kind -> product
-- On NEW_EFFECT reduce production kind -> product
-- On MODULE reduce production kind -> product
-- On LOGIC reduce production kind -> product
-- On LET reduce production kind -> product
-- On KIND reduce production kind -> product
-- On EXCEPTION reduce production kind -> product
-- On EQUALS reduce production kind -> product
-- On EOF reduce production kind -> product
-- On END reduce production kind -> product
-- On EFFECT reduce production kind -> product
-- On DEFAULT reduce production kind -> product
-- On ASSUME reduce production kind -> product
-- On AND reduce production kind -> product

State 376:
kind_abbrev -> KIND name binders EQUALS kind . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On TYPE reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On TOTAL reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On SUB_EFFECT reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On SEMICOLON_SEMICOLON reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On PRIVATE reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On PRAGMA_SET_OPTIONS reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On PRAGMA_RESET_OPTIONS reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On OPEN reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On OPAQUE reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On NEW_EFFECT reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On MODULE reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On LOGIC reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On LET reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On KIND reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On EXCEPTION reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On EOF reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On END reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On EFFECT reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On DEFAULT reduce production kind_abbrev -> KIND name binders EQUALS kind
-- On ASSUME reduce production kind_abbrev -> KIND name binders EQUALS kind

State 377:
decl2 -> EXCEPTION . name of_typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On name shift to state 378

State 378:
decl2 -> EXCEPTION name . of_typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On OF shift to state 379
-- On of_typ shift to state 381
-- On VAL reduce production of_typ ->
-- On TYPE reduce production of_typ ->
-- On TOTAL reduce production of_typ ->
-- On SUB_EFFECT reduce production of_typ ->
-- On SEMICOLON_SEMICOLON reduce production of_typ ->
-- On PRIVATE reduce production of_typ ->
-- On PRAGMA_SET_OPTIONS reduce production of_typ ->
-- On PRAGMA_RESET_OPTIONS reduce production of_typ ->
-- On OPEN reduce production of_typ ->
-- On OPAQUE reduce production of_typ ->
-- On NEW_EFFECT reduce production of_typ ->
-- On MODULE reduce production of_typ ->
-- On LOGIC reduce production of_typ ->
-- On LET reduce production of_typ ->
-- On KIND reduce production of_typ ->
-- On EXCEPTION reduce production of_typ ->
-- On EOF reduce production of_typ ->
-- On END reduce production of_typ ->
-- On EFFECT reduce production of_typ ->
-- On DEFAULT reduce production of_typ ->
-- On ASSUME reduce production of_typ ->

State 379:
of_typ -> OF . typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 380
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 380:
of_typ -> OF typ . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On VAL reduce production of_typ -> OF typ
-- On TYPE reduce production of_typ -> OF typ
-- On TOTAL reduce production of_typ -> OF typ
-- On SUB_EFFECT reduce production of_typ -> OF typ
-- On SEMICOLON_SEMICOLON reduce production of_typ -> OF typ
-- On PRIVATE reduce production of_typ -> OF typ
-- On PRAGMA_SET_OPTIONS reduce production of_typ -> OF typ
-- On PRAGMA_RESET_OPTIONS reduce production of_typ -> OF typ
-- On OPEN reduce production of_typ -> OF typ
-- On OPAQUE reduce production of_typ -> OF typ
-- On NEW_EFFECT reduce production of_typ -> OF typ
-- On MODULE reduce production of_typ -> OF typ
-- On LOGIC reduce production of_typ -> OF typ
-- On LET reduce production of_typ -> OF typ
-- On KIND reduce production of_typ -> OF typ
-- On EXCEPTION reduce production of_typ -> OF typ
-- On EOF reduce production of_typ -> OF typ
-- On END reduce production of_typ -> OF typ
-- On EFFECT reduce production of_typ -> OF typ
-- On DEFAULT reduce production of_typ -> OF typ
-- On BAR reduce production of_typ -> OF typ
-- On ASSUME reduce production of_typ -> OF typ
-- On AND reduce production of_typ -> OF typ

State 381:
decl2 -> EXCEPTION name of_typ . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> EXCEPTION name of_typ
-- On TYPE reduce production decl2 -> EXCEPTION name of_typ
-- On TOTAL reduce production decl2 -> EXCEPTION name of_typ
-- On SUB_EFFECT reduce production decl2 -> EXCEPTION name of_typ
-- On SEMICOLON_SEMICOLON reduce production decl2 -> EXCEPTION name of_typ
-- On PRIVATE reduce production decl2 -> EXCEPTION name of_typ
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> EXCEPTION name of_typ
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> EXCEPTION name of_typ
-- On OPEN reduce production decl2 -> EXCEPTION name of_typ
-- On OPAQUE reduce production decl2 -> EXCEPTION name of_typ
-- On NEW_EFFECT reduce production decl2 -> EXCEPTION name of_typ
-- On MODULE reduce production decl2 -> EXCEPTION name of_typ
-- On LOGIC reduce production decl2 -> EXCEPTION name of_typ
-- On LET reduce production decl2 -> EXCEPTION name of_typ
-- On KIND reduce production decl2 -> EXCEPTION name of_typ
-- On EXCEPTION reduce production decl2 -> EXCEPTION name of_typ
-- On EOF reduce production decl2 -> EXCEPTION name of_typ
-- On END reduce production decl2 -> EXCEPTION name of_typ
-- On EFFECT reduce production decl2 -> EXCEPTION name of_typ
-- On DEFAULT reduce production decl2 -> EXCEPTION name of_typ
-- On ASSUME reduce production decl2 -> EXCEPTION name of_typ

State 382:
qualifier -> DEFAULT . [ VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME ]
-- On VAL reduce production qualifier -> DEFAULT
-- On TYPE reduce production qualifier -> DEFAULT
-- On TOTAL reduce production qualifier -> DEFAULT
-- On PRIVATE reduce production qualifier -> DEFAULT
-- On OPAQUE reduce production qualifier -> DEFAULT
-- On NEW_EFFECT reduce production qualifier -> DEFAULT
-- On LOGIC reduce production qualifier -> DEFAULT
-- On EFFECT reduce production qualifier -> DEFAULT
-- On DEFAULT reduce production qualifier -> DEFAULT
-- On ASSUME reduce production qualifier -> DEFAULT

State 383:
assumeTag -> ASSUME . [ NAME ]
qualifier -> ASSUME . [ VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME ]
-- On VAL reduce production qualifier -> ASSUME
-- On TYPE reduce production qualifier -> ASSUME
-- On TOTAL reduce production qualifier -> ASSUME
-- On PRIVATE reduce production qualifier -> ASSUME
-- On OPAQUE reduce production qualifier -> ASSUME
-- On NEW_EFFECT reduce production qualifier -> ASSUME
-- On NAME reduce production assumeTag -> ASSUME
-- On LOGIC reduce production qualifier -> ASSUME
-- On EFFECT reduce production qualifier -> ASSUME
-- On DEFAULT reduce production qualifier -> ASSUME
-- On ASSUME reduce production qualifier -> ASSUME

State 384:
decl2 -> tycon . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> tycon
-- On TYPE reduce production decl2 -> tycon
-- On TOTAL reduce production decl2 -> tycon
-- On SUB_EFFECT reduce production decl2 -> tycon
-- On SEMICOLON_SEMICOLON reduce production decl2 -> tycon
-- On PRIVATE reduce production decl2 -> tycon
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> tycon
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> tycon
-- On OPEN reduce production decl2 -> tycon
-- On OPAQUE reduce production decl2 -> tycon
-- On NEW_EFFECT reduce production decl2 -> tycon
-- On MODULE reduce production decl2 -> tycon
-- On LOGIC reduce production decl2 -> tycon
-- On LET reduce production decl2 -> tycon
-- On KIND reduce production decl2 -> tycon
-- On EXCEPTION reduce production decl2 -> tycon
-- On EOF reduce production decl2 -> tycon
-- On END reduce production decl2 -> tycon
-- On EFFECT reduce production decl2 -> tycon
-- On DEFAULT reduce production decl2 -> tycon
-- On ASSUME reduce production decl2 -> tycon

State 385:
decl2 -> qualifiers . VAL ident COLON typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
decl2 -> qualifiers . NEW_EFFECT new_effect [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
tycon -> qualifiers . TYPE tyconDefinition tyconDefinitions [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
tycon -> qualifiers . EFFECT tyconDefinition [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL shift to state 386
-- On TYPE shift to state 390
-- On NEW_EFFECT shift to state 432
-- On EFFECT shift to state 453

State 386:
decl2 -> qualifiers VAL . ident COLON typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On IDENT shift to state 36
-- On ident shift to state 387

State 387:
decl2 -> qualifiers VAL ident . COLON typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On COLON shift to state 388

State 388:
decl2 -> qualifiers VAL ident COLON . typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 389
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 389:
decl2 -> qualifiers VAL ident COLON typ . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> qualifiers VAL ident COLON typ
-- On TYPE reduce production decl2 -> qualifiers VAL ident COLON typ
-- On TOTAL reduce production decl2 -> qualifiers VAL ident COLON typ
-- On SUB_EFFECT reduce production decl2 -> qualifiers VAL ident COLON typ
-- On SEMICOLON_SEMICOLON reduce production decl2 -> qualifiers VAL ident COLON typ
-- On PRIVATE reduce production decl2 -> qualifiers VAL ident COLON typ
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> qualifiers VAL ident COLON typ
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> qualifiers VAL ident COLON typ
-- On OPEN reduce production decl2 -> qualifiers VAL ident COLON typ
-- On OPAQUE reduce production decl2 -> qualifiers VAL ident COLON typ
-- On NEW_EFFECT reduce production decl2 -> qualifiers VAL ident COLON typ
-- On MODULE reduce production decl2 -> qualifiers VAL ident COLON typ
-- On LOGIC reduce production decl2 -> qualifiers VAL ident COLON typ
-- On LET reduce production decl2 -> qualifiers VAL ident COLON typ
-- On KIND reduce production decl2 -> qualifiers VAL ident COLON typ
-- On EXCEPTION reduce production decl2 -> qualifiers VAL ident COLON typ
-- On EOF reduce production decl2 -> qualifiers VAL ident COLON typ
-- On END reduce production decl2 -> qualifiers VAL ident COLON typ
-- On EFFECT reduce production decl2 -> qualifiers VAL ident COLON typ
-- On DEFAULT reduce production decl2 -> qualifiers VAL ident COLON typ
-- On ASSUME reduce production decl2 -> qualifiers VAL ident COLON typ

State 390:
tycon -> qualifiers TYPE . tyconDefinition tyconDefinitions [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On tyconDefinition shift to state 391
-- On name shift to state 395
-- On ident shift to state 396
-- On eitherName shift to state 397

State 391:
tycon -> qualifiers TYPE tyconDefinition . tyconDefinitions [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On AND shift to state 392
-- On tyconDefinitions shift to state 431
-- On VAL reduce production tyconDefinitions ->
-- On TYPE reduce production tyconDefinitions ->
-- On TOTAL reduce production tyconDefinitions ->
-- On SUB_EFFECT reduce production tyconDefinitions ->
-- On SEMICOLON_SEMICOLON reduce production tyconDefinitions ->
-- On PRIVATE reduce production tyconDefinitions ->
-- On PRAGMA_SET_OPTIONS reduce production tyconDefinitions ->
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefinitions ->
-- On OPEN reduce production tyconDefinitions ->
-- On OPAQUE reduce production tyconDefinitions ->
-- On NEW_EFFECT reduce production tyconDefinitions ->
-- On MODULE reduce production tyconDefinitions ->
-- On LOGIC reduce production tyconDefinitions ->
-- On LET reduce production tyconDefinitions ->
-- On KIND reduce production tyconDefinitions ->
-- On EXCEPTION reduce production tyconDefinitions ->
-- On EOF reduce production tyconDefinitions ->
-- On END reduce production tyconDefinitions ->
-- On EFFECT reduce production tyconDefinitions ->
-- On DEFAULT reduce production tyconDefinitions ->
-- On ASSUME reduce production tyconDefinitions ->

State 392:
tyconDefinitions -> AND . tyconDefinition tyconDefinitions [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On tyconDefinition shift to state 393
-- On name shift to state 395
-- On ident shift to state 396
-- On eitherName shift to state 397

State 393:
tyconDefinitions -> AND tyconDefinition . tyconDefinitions [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On AND shift to state 392
-- On tyconDefinitions shift to state 394
-- On VAL reduce production tyconDefinitions ->
-- On TYPE reduce production tyconDefinitions ->
-- On TOTAL reduce production tyconDefinitions ->
-- On SUB_EFFECT reduce production tyconDefinitions ->
-- On SEMICOLON_SEMICOLON reduce production tyconDefinitions ->
-- On PRIVATE reduce production tyconDefinitions ->
-- On PRAGMA_SET_OPTIONS reduce production tyconDefinitions ->
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefinitions ->
-- On OPEN reduce production tyconDefinitions ->
-- On OPAQUE reduce production tyconDefinitions ->
-- On NEW_EFFECT reduce production tyconDefinitions ->
-- On MODULE reduce production tyconDefinitions ->
-- On LOGIC reduce production tyconDefinitions ->
-- On LET reduce production tyconDefinitions ->
-- On KIND reduce production tyconDefinitions ->
-- On EXCEPTION reduce production tyconDefinitions ->
-- On EOF reduce production tyconDefinitions ->
-- On END reduce production tyconDefinitions ->
-- On EFFECT reduce production tyconDefinitions ->
-- On DEFAULT reduce production tyconDefinitions ->
-- On ASSUME reduce production tyconDefinitions ->

State 394:
tyconDefinitions -> AND tyconDefinition tyconDefinitions . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On TYPE reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On TOTAL reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On SUB_EFFECT reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On SEMICOLON_SEMICOLON reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On PRIVATE reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On PRAGMA_SET_OPTIONS reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On OPEN reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On OPAQUE reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On NEW_EFFECT reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On MODULE reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On LOGIC reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On LET reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On KIND reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On EXCEPTION reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On EOF reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On END reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On EFFECT reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On DEFAULT reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions
-- On ASSUME reduce production tyconDefinitions -> AND tyconDefinition tyconDefinitions

State 395:
eitherName -> name . [ VAL TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production eitherName -> name
-- On TYP_APP_LESS reduce production eitherName -> name
-- On TYPE reduce production eitherName -> name
-- On TVAR reduce production eitherName -> name
-- On TOTAL reduce production eitherName -> name
-- On SUB_EFFECT reduce production eitherName -> name
-- On SEMICOLON_SEMICOLON reduce production eitherName -> name
-- On PRIVATE reduce production eitherName -> name
-- On PRAGMA_SET_OPTIONS reduce production eitherName -> name
-- On PRAGMA_RESET_OPTIONS reduce production eitherName -> name
-- On OPEN reduce production eitherName -> name
-- On OPAQUE reduce production eitherName -> name
-- On NEW_EFFECT reduce production eitherName -> name
-- On MODULE reduce production eitherName -> name
-- On LPAREN reduce production eitherName -> name
-- On LOGIC reduce production eitherName -> name
-- On LET reduce production eitherName -> name
-- On KIND reduce production eitherName -> name
-- On IDENT reduce production eitherName -> name
-- On EXCEPTION reduce production eitherName -> name
-- On EQUALS reduce production eitherName -> name
-- On EOF reduce production eitherName -> name
-- On END reduce production eitherName -> name
-- On EFFECT reduce production eitherName -> name
-- On DEFAULT reduce production eitherName -> name
-- On COLON reduce production eitherName -> name
-- On ASSUME reduce production eitherName -> name
-- On AND reduce production eitherName -> name

State 396:
eitherName -> ident . [ VAL TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production eitherName -> ident
-- On TYP_APP_LESS reduce production eitherName -> ident
-- On TYPE reduce production eitherName -> ident
-- On TVAR reduce production eitherName -> ident
-- On TOTAL reduce production eitherName -> ident
-- On SUB_EFFECT reduce production eitherName -> ident
-- On SEMICOLON_SEMICOLON reduce production eitherName -> ident
-- On PRIVATE reduce production eitherName -> ident
-- On PRAGMA_SET_OPTIONS reduce production eitherName -> ident
-- On PRAGMA_RESET_OPTIONS reduce production eitherName -> ident
-- On OPEN reduce production eitherName -> ident
-- On OPAQUE reduce production eitherName -> ident
-- On NEW_EFFECT reduce production eitherName -> ident
-- On MODULE reduce production eitherName -> ident
-- On LPAREN reduce production eitherName -> ident
-- On LOGIC reduce production eitherName -> ident
-- On LET reduce production eitherName -> ident
-- On KIND reduce production eitherName -> ident
-- On IDENT reduce production eitherName -> ident
-- On EXCEPTION reduce production eitherName -> ident
-- On EQUALS reduce production eitherName -> ident
-- On EOF reduce production eitherName -> ident
-- On END reduce production eitherName -> ident
-- On EFFECT reduce production eitherName -> ident
-- On DEFAULT reduce production eitherName -> ident
-- On COLON reduce production eitherName -> ident
-- On ASSUME reduce production eitherName -> ident
-- On AND reduce production eitherName -> ident

State 397:
tyconDefinition -> eitherName . typars ascribeKindOpt tyconDefn [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On TYP_APP_LESS shift to state 398
-- On TVAR shift to state 11
-- On LPAREN shift to state 164
-- On IDENT shift to state 36
-- On typars shift to state 404
-- On tvarinsts shift to state 429
-- On tvar shift to state 171
-- On ident shift to state 172
-- On binders shift to state 430
-- On binder shift to state 256
-- On VAL reduce production binders ->
-- On TYPE reduce production binders ->
-- On TOTAL reduce production binders ->
-- On SUB_EFFECT reduce production binders ->
-- On SEMICOLON_SEMICOLON reduce production binders ->
-- On PRIVATE reduce production binders ->
-- On PRAGMA_SET_OPTIONS reduce production binders ->
-- On PRAGMA_RESET_OPTIONS reduce production binders ->
-- On OPEN reduce production binders ->
-- On OPAQUE reduce production binders ->
-- On NEW_EFFECT reduce production binders ->
-- On MODULE reduce production binders ->
-- On LOGIC reduce production binders ->
-- On LET reduce production binders ->
-- On KIND reduce production binders ->
-- On EXCEPTION reduce production binders ->
-- On EQUALS reduce production binders ->
-- On EOF reduce production binders ->
-- On END reduce production binders ->
-- On EFFECT reduce production binders ->
-- On DEFAULT reduce production binders ->
-- On COLON reduce production binders ->
-- On ASSUME reduce production binders ->
-- On AND reduce production binders ->

State 398:
tvarinsts -> TYP_APP_LESS . tvars TYP_APP_GREATER [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND ]
-- On TVAR shift to state 399
-- On tvars shift to state 402

State 399:
tvars -> TVAR . [ TYP_APP_GREATER ]
tvars -> TVAR . COMMA tvars [ TYP_APP_GREATER ]
-- On COMMA shift to state 400
-- On TYP_APP_GREATER reduce production tvars -> TVAR

State 400:
tvars -> TVAR COMMA . tvars [ TYP_APP_GREATER ]
-- On TVAR shift to state 399
-- On tvars shift to state 401

State 401:
tvars -> TVAR COMMA tvars . [ TYP_APP_GREATER ]
-- On TYP_APP_GREATER reduce production tvars -> TVAR COMMA tvars

State 402:
tvarinsts -> TYP_APP_LESS tvars . TYP_APP_GREATER [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND ]
-- On TYP_APP_GREATER shift to state 403

State 403:
tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On TYPE reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On TOTAL reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On SUB_EFFECT reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On SEMICOLON_SEMICOLON reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On PRIVATE reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On PRAGMA_SET_OPTIONS reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On PRAGMA_RESET_OPTIONS reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On OPEN reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On OPAQUE reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On NEW_EFFECT reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On MODULE reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On LOGIC reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On LET reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On KIND reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On EXCEPTION reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On EQUALS reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On EOF reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On END reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On EFFECT reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On DEFAULT reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On COLON reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On ASSUME reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER
-- On AND reduce production tvarinsts -> TYP_APP_LESS tvars TYP_APP_GREATER

State 404:
tyconDefinition -> eitherName typars . ascribeKindOpt tyconDefn [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On COLON shift to state 405
-- On ascribeKindOpt shift to state 407
-- On VAL reduce production ascribeKindOpt ->
-- On TYPE reduce production ascribeKindOpt ->
-- On TOTAL reduce production ascribeKindOpt ->
-- On SUB_EFFECT reduce production ascribeKindOpt ->
-- On SEMICOLON_SEMICOLON reduce production ascribeKindOpt ->
-- On PRIVATE reduce production ascribeKindOpt ->
-- On PRAGMA_SET_OPTIONS reduce production ascribeKindOpt ->
-- On PRAGMA_RESET_OPTIONS reduce production ascribeKindOpt ->
-- On OPEN reduce production ascribeKindOpt ->
-- On OPAQUE reduce production ascribeKindOpt ->
-- On NEW_EFFECT reduce production ascribeKindOpt ->
-- On MODULE reduce production ascribeKindOpt ->
-- On LOGIC reduce production ascribeKindOpt ->
-- On LET reduce production ascribeKindOpt ->
-- On KIND reduce production ascribeKindOpt ->
-- On EXCEPTION reduce production ascribeKindOpt ->
-- On EQUALS reduce production ascribeKindOpt ->
-- On EOF reduce production ascribeKindOpt ->
-- On END reduce production ascribeKindOpt ->
-- On EFFECT reduce production ascribeKindOpt ->
-- On DEFAULT reduce production ascribeKindOpt ->
-- On ASSUME reduce production ascribeKindOpt ->
-- On AND reduce production ascribeKindOpt ->

State 405:
ascribeKindOpt -> COLON . kind [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 375
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On kind shift to state 406
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 406:
ascribeKindOpt -> COLON kind . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT ASSUME AND ]
-- On VAL reduce production ascribeKindOpt -> COLON kind
-- On TYPE reduce production ascribeKindOpt -> COLON kind
-- On TOTAL reduce production ascribeKindOpt -> COLON kind
-- On SUB_EFFECT reduce production ascribeKindOpt -> COLON kind
-- On SEMICOLON_SEMICOLON reduce production ascribeKindOpt -> COLON kind
-- On PRIVATE reduce production ascribeKindOpt -> COLON kind
-- On PRAGMA_SET_OPTIONS reduce production ascribeKindOpt -> COLON kind
-- On PRAGMA_RESET_OPTIONS reduce production ascribeKindOpt -> COLON kind
-- On OPEN reduce production ascribeKindOpt -> COLON kind
-- On OPAQUE reduce production ascribeKindOpt -> COLON kind
-- On NEW_EFFECT reduce production ascribeKindOpt -> COLON kind
-- On MODULE reduce production ascribeKindOpt -> COLON kind
-- On LOGIC reduce production ascribeKindOpt -> COLON kind
-- On LET reduce production ascribeKindOpt -> COLON kind
-- On KIND reduce production ascribeKindOpt -> COLON kind
-- On EXCEPTION reduce production ascribeKindOpt -> COLON kind
-- On EQUALS reduce production ascribeKindOpt -> COLON kind
-- On EOF reduce production ascribeKindOpt -> COLON kind
-- On END reduce production ascribeKindOpt -> COLON kind
-- On EFFECT reduce production ascribeKindOpt -> COLON kind
-- On DEFAULT reduce production ascribeKindOpt -> COLON kind
-- On ASSUME reduce production ascribeKindOpt -> COLON kind
-- On AND reduce production ascribeKindOpt -> COLON kind

State 407:
tyconDefinition -> eitherName typars ascribeKindOpt . tyconDefn [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On EQUALS shift to state 408
-- On tyconDefn shift to state 428
-- On VAL reduce production tyconDefn ->
-- On TYPE reduce production tyconDefn ->
-- On TOTAL reduce production tyconDefn ->
-- On SUB_EFFECT reduce production tyconDefn ->
-- On SEMICOLON_SEMICOLON reduce production tyconDefn ->
-- On PRIVATE reduce production tyconDefn ->
-- On PRAGMA_SET_OPTIONS reduce production tyconDefn ->
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefn ->
-- On OPEN reduce production tyconDefn ->
-- On OPAQUE reduce production tyconDefn ->
-- On NEW_EFFECT reduce production tyconDefn ->
-- On MODULE reduce production tyconDefn ->
-- On LOGIC reduce production tyconDefn ->
-- On LET reduce production tyconDefn ->
-- On KIND reduce production tyconDefn ->
-- On EXCEPTION reduce production tyconDefn ->
-- On EOF reduce production tyconDefn ->
-- On END reduce production tyconDefn ->
-- On EFFECT reduce production tyconDefn ->
-- On DEFAULT reduce production tyconDefn ->
-- On ASSUME reduce production tyconDefn ->
-- On AND reduce production tyconDefn ->

State 408:
tyconDefn -> EQUALS . typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
tyconDefn -> EQUALS . LBRACE recordFieldDecl recordFields RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
tyconDefn -> EQUALS . constructors [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 409
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 420
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constructors shift to state 421
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214
-- On VAL reduce production constructors ->
-- On TYPE reduce production constructors ->
-- On TOTAL reduce production constructors ->
-- On SUB_EFFECT reduce production constructors ->
-- On SEMICOLON_SEMICOLON reduce production constructors ->
-- On PRIVATE reduce production constructors ->
-- On PRAGMA_SET_OPTIONS reduce production constructors ->
-- On PRAGMA_RESET_OPTIONS reduce production constructors ->
-- On OPEN reduce production constructors ->
-- On OPAQUE reduce production constructors ->
-- On NEW_EFFECT reduce production constructors ->
-- On MODULE reduce production constructors ->
-- On LOGIC reduce production constructors ->
-- On LET reduce production constructors ->
-- On KIND reduce production constructors ->
-- On EXCEPTION reduce production constructors ->
-- On EOF reduce production constructors ->
-- On END reduce production constructors ->
-- On EFFECT reduce production constructors ->
-- On DEFAULT reduce production constructors ->
-- On BAR reduce production constructors ->
-- On ASSUME reduce production constructors ->
-- On AND reduce production constructors ->

State 409:
refinementTerm -> LBRACE . recordExp RBRACE [ VAL TYPE TOTAL SUB_EFFECT STAR SEMICOLON_SEMICOLON RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET KIND IMPLIES IFF EXCEPTION EQUALS EOF END EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_BAR ASSUME AND AMP_AMP AMP ]
tyconDefn -> EQUALS LBRACE . recordFieldDecl recordFields RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On STRING shift to state 14
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On FALSE shift to state 51
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On tvar shift to state 119
-- On recordFieldDecl shift to state 410
-- On recordExp shift to state 288
-- On projectionLHS shift to state 120
-- On name shift to state 124
-- On ident shift to state 419
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On appTerm shift to state 290

State 410:
tyconDefn -> EQUALS LBRACE recordFieldDecl . recordFields RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On SEMICOLON shift to state 411
-- On recordFields shift to state 417
-- On RBRACE reduce production recordFields ->

State 411:
recordFields -> SEMICOLON . recordFieldDecl recordFields [ RBRACE ]
recordFields -> SEMICOLON . [ RBRACE ]
-- On IDENT shift to state 36
-- On recordFieldDecl shift to state 412
-- On ident shift to state 414
-- On RBRACE reduce production recordFields -> SEMICOLON

State 412:
recordFields -> SEMICOLON recordFieldDecl . recordFields [ RBRACE ]
-- On SEMICOLON shift to state 411
-- On recordFields shift to state 413
-- On RBRACE reduce production recordFields ->

State 413:
recordFields -> SEMICOLON recordFieldDecl recordFields . [ RBRACE ]
-- On RBRACE reduce production recordFields -> SEMICOLON recordFieldDecl recordFields

State 414:
recordFieldDecl -> ident . COLON tmTuple [ SEMICOLON RBRACE ]
-- On COLON shift to state 415

State 415:
recordFieldDecl -> ident COLON . tmTuple [ SEMICOLON RBRACE ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 416
-- On tmOr shift to state 201
-- On tmEq shift to state 235
-- On tmCons shift to state 203
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 416:
recordFieldDecl -> ident COLON tmTuple . [ SEMICOLON RBRACE ]
-- On SEMICOLON reduce production recordFieldDecl -> ident COLON tmTuple
-- On RBRACE reduce production recordFieldDecl -> ident COLON tmTuple

State 417:
tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields . RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On RBRACE shift to state 418

State 418:
tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On VAL reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On TYPE reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On TOTAL reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On SUB_EFFECT reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On SEMICOLON_SEMICOLON reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On PRIVATE reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On PRAGMA_SET_OPTIONS reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On OPEN reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On OPAQUE reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On NEW_EFFECT reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On MODULE reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On LOGIC reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On LET reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On KIND reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On EXCEPTION reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On EOF reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On END reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On EFFECT reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On DEFAULT reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On ASSUME reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE
-- On AND reduce production tyconDefn -> EQUALS LBRACE recordFieldDecl recordFields RBRACE

State 419:
eitherpath -> ident . [ WITH UNDERSCORE UINT8 TYP_APP_LESS TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS DOT CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT ]
recordFieldDecl -> ident . COLON tmTuple [ SEMICOLON RBRACE ]
-- On COLON shift to state 415
-- On WITH reduce production eitherpath -> ident
-- On UNDERSCORE reduce production eitherpath -> ident
-- On UINT8 reduce production eitherpath -> ident
-- On TYP_APP_LESS reduce production eitherpath -> ident
-- On TVAR reduce production eitherpath -> ident
-- On TRUE reduce production eitherpath -> ident
-- On STRING reduce production eitherpath -> ident
-- On PERCENT_LBRACK reduce production eitherpath -> ident
-- On NAME reduce production eitherpath -> ident
-- On LPAREN_RPAREN reduce production eitherpath -> ident
-- On LPAREN reduce production eitherpath -> ident
-- On LENS_PAREN_LEFT reduce production eitherpath -> ident
-- On LBRACK_BAR reduce production eitherpath -> ident
-- On LBRACK reduce production eitherpath -> ident
-- On INT64 reduce production eitherpath -> ident
-- On INT32 reduce production eitherpath -> ident
-- On INT reduce production eitherpath -> ident
-- On IEEE64 reduce production eitherpath -> ident
-- On IDENT reduce production eitherpath -> ident
-- On HASH reduce production eitherpath -> ident
-- On FALSE reduce production eitherpath -> ident
-- On EQUALS reduce production eitherpath -> ident
-- On DOT reduce production eitherpath -> ident
-- On CHAR reduce production eitherpath -> ident
-- On BYTEARRAY reduce production eitherpath -> ident
-- On BEGIN reduce production eitherpath -> ident
-- On BANG_LBRACE reduce production eitherpath -> ident
-- On BANG reduce production eitherpath -> ident
-- On ASSERT reduce production eitherpath -> ident

State 420:
tyconDefn -> EQUALS typ . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On VAL reduce production tyconDefn -> EQUALS typ
-- On TYPE reduce production tyconDefn -> EQUALS typ
-- On TOTAL reduce production tyconDefn -> EQUALS typ
-- On SUB_EFFECT reduce production tyconDefn -> EQUALS typ
-- On SEMICOLON_SEMICOLON reduce production tyconDefn -> EQUALS typ
-- On PRIVATE reduce production tyconDefn -> EQUALS typ
-- On PRAGMA_SET_OPTIONS reduce production tyconDefn -> EQUALS typ
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefn -> EQUALS typ
-- On OPEN reduce production tyconDefn -> EQUALS typ
-- On OPAQUE reduce production tyconDefn -> EQUALS typ
-- On NEW_EFFECT reduce production tyconDefn -> EQUALS typ
-- On MODULE reduce production tyconDefn -> EQUALS typ
-- On LOGIC reduce production tyconDefn -> EQUALS typ
-- On LET reduce production tyconDefn -> EQUALS typ
-- On KIND reduce production tyconDefn -> EQUALS typ
-- On EXCEPTION reduce production tyconDefn -> EQUALS typ
-- On EOF reduce production tyconDefn -> EQUALS typ
-- On END reduce production tyconDefn -> EQUALS typ
-- On EFFECT reduce production tyconDefn -> EQUALS typ
-- On DEFAULT reduce production tyconDefn -> EQUALS typ
-- On ASSUME reduce production tyconDefn -> EQUALS typ
-- On AND reduce production tyconDefn -> EQUALS typ

State 421:
constructors -> constructors . constructorDecl [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
tyconDefn -> EQUALS constructors . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On BAR shift to state 422
-- On constructorDecl shift to state 427
-- On VAL reduce production tyconDefn -> EQUALS constructors
-- On TYPE reduce production tyconDefn -> EQUALS constructors
-- On TOTAL reduce production tyconDefn -> EQUALS constructors
-- On SUB_EFFECT reduce production tyconDefn -> EQUALS constructors
-- On SEMICOLON_SEMICOLON reduce production tyconDefn -> EQUALS constructors
-- On PRIVATE reduce production tyconDefn -> EQUALS constructors
-- On PRAGMA_SET_OPTIONS reduce production tyconDefn -> EQUALS constructors
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefn -> EQUALS constructors
-- On OPEN reduce production tyconDefn -> EQUALS constructors
-- On OPAQUE reduce production tyconDefn -> EQUALS constructors
-- On NEW_EFFECT reduce production tyconDefn -> EQUALS constructors
-- On MODULE reduce production tyconDefn -> EQUALS constructors
-- On LOGIC reduce production tyconDefn -> EQUALS constructors
-- On LET reduce production tyconDefn -> EQUALS constructors
-- On KIND reduce production tyconDefn -> EQUALS constructors
-- On EXCEPTION reduce production tyconDefn -> EQUALS constructors
-- On EOF reduce production tyconDefn -> EQUALS constructors
-- On END reduce production tyconDefn -> EQUALS constructors
-- On EFFECT reduce production tyconDefn -> EQUALS constructors
-- On DEFAULT reduce production tyconDefn -> EQUALS constructors
-- On ASSUME reduce production tyconDefn -> EQUALS constructors
-- On AND reduce production tyconDefn -> EQUALS constructors

State 422:
constructorDecl -> BAR . name COLON typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
constructorDecl -> BAR . name of_typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On NAME shift to state 3
-- On name shift to state 423

State 423:
constructorDecl -> BAR name . COLON typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
constructorDecl -> BAR name . of_typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On OF shift to state 379
-- On COLON shift to state 424
-- On of_typ shift to state 426
-- On VAL reduce production of_typ ->
-- On TYPE reduce production of_typ ->
-- On TOTAL reduce production of_typ ->
-- On SUB_EFFECT reduce production of_typ ->
-- On SEMICOLON_SEMICOLON reduce production of_typ ->
-- On PRIVATE reduce production of_typ ->
-- On PRAGMA_SET_OPTIONS reduce production of_typ ->
-- On PRAGMA_RESET_OPTIONS reduce production of_typ ->
-- On OPEN reduce production of_typ ->
-- On OPAQUE reduce production of_typ ->
-- On NEW_EFFECT reduce production of_typ ->
-- On MODULE reduce production of_typ ->
-- On LOGIC reduce production of_typ ->
-- On LET reduce production of_typ ->
-- On KIND reduce production of_typ ->
-- On EXCEPTION reduce production of_typ ->
-- On EOF reduce production of_typ ->
-- On END reduce production of_typ ->
-- On EFFECT reduce production of_typ ->
-- On DEFAULT reduce production of_typ ->
-- On BAR reduce production of_typ ->
-- On ASSUME reduce production of_typ ->
-- On AND reduce production of_typ ->

State 424:
constructorDecl -> BAR name COLON . typ [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 425
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 425:
constructorDecl -> BAR name COLON typ . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On VAL reduce production constructorDecl -> BAR name COLON typ
-- On TYPE reduce production constructorDecl -> BAR name COLON typ
-- On TOTAL reduce production constructorDecl -> BAR name COLON typ
-- On SUB_EFFECT reduce production constructorDecl -> BAR name COLON typ
-- On SEMICOLON_SEMICOLON reduce production constructorDecl -> BAR name COLON typ
-- On PRIVATE reduce production constructorDecl -> BAR name COLON typ
-- On PRAGMA_SET_OPTIONS reduce production constructorDecl -> BAR name COLON typ
-- On PRAGMA_RESET_OPTIONS reduce production constructorDecl -> BAR name COLON typ
-- On OPEN reduce production constructorDecl -> BAR name COLON typ
-- On OPAQUE reduce production constructorDecl -> BAR name COLON typ
-- On NEW_EFFECT reduce production constructorDecl -> BAR name COLON typ
-- On MODULE reduce production constructorDecl -> BAR name COLON typ
-- On LOGIC reduce production constructorDecl -> BAR name COLON typ
-- On LET reduce production constructorDecl -> BAR name COLON typ
-- On KIND reduce production constructorDecl -> BAR name COLON typ
-- On EXCEPTION reduce production constructorDecl -> BAR name COLON typ
-- On EOF reduce production constructorDecl -> BAR name COLON typ
-- On END reduce production constructorDecl -> BAR name COLON typ
-- On EFFECT reduce production constructorDecl -> BAR name COLON typ
-- On DEFAULT reduce production constructorDecl -> BAR name COLON typ
-- On BAR reduce production constructorDecl -> BAR name COLON typ
-- On ASSUME reduce production constructorDecl -> BAR name COLON typ
-- On AND reduce production constructorDecl -> BAR name COLON typ

State 426:
constructorDecl -> BAR name of_typ . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On VAL reduce production constructorDecl -> BAR name of_typ
-- On TYPE reduce production constructorDecl -> BAR name of_typ
-- On TOTAL reduce production constructorDecl -> BAR name of_typ
-- On SUB_EFFECT reduce production constructorDecl -> BAR name of_typ
-- On SEMICOLON_SEMICOLON reduce production constructorDecl -> BAR name of_typ
-- On PRIVATE reduce production constructorDecl -> BAR name of_typ
-- On PRAGMA_SET_OPTIONS reduce production constructorDecl -> BAR name of_typ
-- On PRAGMA_RESET_OPTIONS reduce production constructorDecl -> BAR name of_typ
-- On OPEN reduce production constructorDecl -> BAR name of_typ
-- On OPAQUE reduce production constructorDecl -> BAR name of_typ
-- On NEW_EFFECT reduce production constructorDecl -> BAR name of_typ
-- On MODULE reduce production constructorDecl -> BAR name of_typ
-- On LOGIC reduce production constructorDecl -> BAR name of_typ
-- On LET reduce production constructorDecl -> BAR name of_typ
-- On KIND reduce production constructorDecl -> BAR name of_typ
-- On EXCEPTION reduce production constructorDecl -> BAR name of_typ
-- On EOF reduce production constructorDecl -> BAR name of_typ
-- On END reduce production constructorDecl -> BAR name of_typ
-- On EFFECT reduce production constructorDecl -> BAR name of_typ
-- On DEFAULT reduce production constructorDecl -> BAR name of_typ
-- On BAR reduce production constructorDecl -> BAR name of_typ
-- On ASSUME reduce production constructorDecl -> BAR name of_typ
-- On AND reduce production constructorDecl -> BAR name of_typ

State 427:
constructors -> constructors constructorDecl . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND ]
-- On VAL reduce production constructors -> constructors constructorDecl
-- On TYPE reduce production constructors -> constructors constructorDecl
-- On TOTAL reduce production constructors -> constructors constructorDecl
-- On SUB_EFFECT reduce production constructors -> constructors constructorDecl
-- On SEMICOLON_SEMICOLON reduce production constructors -> constructors constructorDecl
-- On PRIVATE reduce production constructors -> constructors constructorDecl
-- On PRAGMA_SET_OPTIONS reduce production constructors -> constructors constructorDecl
-- On PRAGMA_RESET_OPTIONS reduce production constructors -> constructors constructorDecl
-- On OPEN reduce production constructors -> constructors constructorDecl
-- On OPAQUE reduce production constructors -> constructors constructorDecl
-- On NEW_EFFECT reduce production constructors -> constructors constructorDecl
-- On MODULE reduce production constructors -> constructors constructorDecl
-- On LOGIC reduce production constructors -> constructors constructorDecl
-- On LET reduce production constructors -> constructors constructorDecl
-- On KIND reduce production constructors -> constructors constructorDecl
-- On EXCEPTION reduce production constructors -> constructors constructorDecl
-- On EOF reduce production constructors -> constructors constructorDecl
-- On END reduce production constructors -> constructors constructorDecl
-- On EFFECT reduce production constructors -> constructors constructorDecl
-- On DEFAULT reduce production constructors -> constructors constructorDecl
-- On BAR reduce production constructors -> constructors constructorDecl
-- On ASSUME reduce production constructors -> constructors constructorDecl
-- On AND reduce production constructors -> constructors constructorDecl

State 428:
tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND ]
-- On VAL reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On TYPE reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On TOTAL reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On SUB_EFFECT reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On SEMICOLON_SEMICOLON reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On PRIVATE reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On PRAGMA_SET_OPTIONS reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On PRAGMA_RESET_OPTIONS reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On OPEN reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On OPAQUE reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On NEW_EFFECT reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On MODULE reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On LOGIC reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On LET reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On KIND reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On EXCEPTION reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On EOF reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On END reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On EFFECT reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On DEFAULT reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On ASSUME reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn
-- On AND reduce production tyconDefinition -> eitherName typars ascribeKindOpt tyconDefn

State 429:
typars -> tvarinsts . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production typars -> tvarinsts
-- On TYPE reduce production typars -> tvarinsts
-- On TOTAL reduce production typars -> tvarinsts
-- On SUB_EFFECT reduce production typars -> tvarinsts
-- On SEMICOLON_SEMICOLON reduce production typars -> tvarinsts
-- On PRIVATE reduce production typars -> tvarinsts
-- On PRAGMA_SET_OPTIONS reduce production typars -> tvarinsts
-- On PRAGMA_RESET_OPTIONS reduce production typars -> tvarinsts
-- On OPEN reduce production typars -> tvarinsts
-- On OPAQUE reduce production typars -> tvarinsts
-- On NEW_EFFECT reduce production typars -> tvarinsts
-- On MODULE reduce production typars -> tvarinsts
-- On LOGIC reduce production typars -> tvarinsts
-- On LET reduce production typars -> tvarinsts
-- On KIND reduce production typars -> tvarinsts
-- On EXCEPTION reduce production typars -> tvarinsts
-- On EQUALS reduce production typars -> tvarinsts
-- On EOF reduce production typars -> tvarinsts
-- On END reduce production typars -> tvarinsts
-- On EFFECT reduce production typars -> tvarinsts
-- On DEFAULT reduce production typars -> tvarinsts
-- On COLON reduce production typars -> tvarinsts
-- On ASSUME reduce production typars -> tvarinsts
-- On AND reduce production typars -> tvarinsts

State 430:
typars -> binders . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND ]
-- On VAL reduce production typars -> binders
-- On TYPE reduce production typars -> binders
-- On TOTAL reduce production typars -> binders
-- On SUB_EFFECT reduce production typars -> binders
-- On SEMICOLON_SEMICOLON reduce production typars -> binders
-- On PRIVATE reduce production typars -> binders
-- On PRAGMA_SET_OPTIONS reduce production typars -> binders
-- On PRAGMA_RESET_OPTIONS reduce production typars -> binders
-- On OPEN reduce production typars -> binders
-- On OPAQUE reduce production typars -> binders
-- On NEW_EFFECT reduce production typars -> binders
-- On MODULE reduce production typars -> binders
-- On LOGIC reduce production typars -> binders
-- On LET reduce production typars -> binders
-- On KIND reduce production typars -> binders
-- On EXCEPTION reduce production typars -> binders
-- On EQUALS reduce production typars -> binders
-- On EOF reduce production typars -> binders
-- On END reduce production typars -> binders
-- On EFFECT reduce production typars -> binders
-- On DEFAULT reduce production typars -> binders
-- On COLON reduce production typars -> binders
-- On ASSUME reduce production typars -> binders
-- On AND reduce production typars -> binders

State 431:
tycon -> qualifiers TYPE tyconDefinition tyconDefinitions . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On TYPE reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On TOTAL reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On SUB_EFFECT reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On SEMICOLON_SEMICOLON reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On PRIVATE reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On PRAGMA_SET_OPTIONS reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On PRAGMA_RESET_OPTIONS reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On OPEN reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On OPAQUE reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On NEW_EFFECT reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On MODULE reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On LOGIC reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On LET reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On KIND reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On EXCEPTION reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On EOF reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On END reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On EFFECT reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On DEFAULT reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions
-- On ASSUME reduce production tycon -> qualifiers TYPE tyconDefinition tyconDefinitions

State 432:
decl2 -> qualifiers NEW_EFFECT . new_effect [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On LBRACE shift to state 433
-- On new_effect shift to state 448
-- On name shift to state 449

State 433:
new_effect -> LBRACE . name binders COLON kind WITH effect_decl more_effect_decls RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On name shift to state 434

State 434:
new_effect -> LBRACE name . binders COLON kind WITH effect_decl more_effect_decls RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On TVAR shift to state 11
-- On LPAREN shift to state 164
-- On IDENT shift to state 36
-- On tvar shift to state 171
-- On ident shift to state 172
-- On binders shift to state 435
-- On binder shift to state 256
-- On COLON reduce production binders ->

State 435:
new_effect -> LBRACE name binders . COLON kind WITH effect_decl more_effect_decls RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On COLON shift to state 436

State 436:
new_effect -> LBRACE name binders COLON . kind WITH effect_decl more_effect_decls RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On starDivModTerm shift to state 206
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 375
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On kind shift to state 437
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 437:
new_effect -> LBRACE name binders COLON kind . WITH effect_decl more_effect_decls RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On WITH shift to state 438

State 438:
new_effect -> LBRACE name binders COLON kind WITH . effect_decl more_effect_decls RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On IDENT shift to state 36
-- On ident shift to state 439
-- On effect_decl shift to state 442

State 439:
effect_decl -> ident . EQUALS simpleTerm [ SEMICOLON RBRACE ]
-- On EQUALS shift to state 440

State 440:
effect_decl -> ident EQUALS . simpleTerm [ SEMICOLON RBRACE ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 441
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 441:
effect_decl -> ident EQUALS simpleTerm . [ SEMICOLON RBRACE ]
-- On SEMICOLON reduce production effect_decl -> ident EQUALS simpleTerm
-- On RBRACE reduce production effect_decl -> ident EQUALS simpleTerm

State 442:
new_effect -> LBRACE name binders COLON kind WITH effect_decl . more_effect_decls RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On SEMICOLON shift to state 443
-- On more_effect_decls shift to state 446
-- On RBRACE reduce production more_effect_decls ->

State 443:
more_effect_decls -> SEMICOLON . effect_decl more_effect_decls [ RBRACE ]
-- On IDENT shift to state 36
-- On ident shift to state 439
-- On effect_decl shift to state 444

State 444:
more_effect_decls -> SEMICOLON effect_decl . more_effect_decls [ RBRACE ]
-- On SEMICOLON shift to state 443
-- On more_effect_decls shift to state 445
-- On RBRACE reduce production more_effect_decls ->

State 445:
more_effect_decls -> SEMICOLON effect_decl more_effect_decls . [ RBRACE ]
-- On RBRACE reduce production more_effect_decls -> SEMICOLON effect_decl more_effect_decls

State 446:
new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls . RBRACE [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On RBRACE shift to state 447

State 447:
new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On TYPE reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On TOTAL reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On SUB_EFFECT reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On SEMICOLON_SEMICOLON reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On PRIVATE reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On PRAGMA_SET_OPTIONS reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On PRAGMA_RESET_OPTIONS reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On OPEN reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On OPAQUE reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On NEW_EFFECT reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On MODULE reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On LOGIC reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On LET reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On KIND reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On EXCEPTION reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On EOF reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On END reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On EFFECT reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On DEFAULT reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE
-- On ASSUME reduce production new_effect -> LBRACE name binders COLON kind WITH effect_decl more_effect_decls RBRACE

State 448:
decl2 -> qualifiers NEW_EFFECT new_effect . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On TYPE reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On TOTAL reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On SUB_EFFECT reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On SEMICOLON_SEMICOLON reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On PRIVATE reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On OPEN reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On OPAQUE reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On NEW_EFFECT reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On MODULE reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On LOGIC reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On LET reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On KIND reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On EXCEPTION reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On EOF reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On END reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On EFFECT reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On DEFAULT reduce production decl2 -> qualifiers NEW_EFFECT new_effect
-- On ASSUME reduce production decl2 -> qualifiers NEW_EFFECT new_effect

State 449:
new_effect -> name . binders EQUALS simpleTerm [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On TVAR shift to state 11
-- On LPAREN shift to state 164
-- On IDENT shift to state 36
-- On tvar shift to state 171
-- On ident shift to state 172
-- On binders shift to state 450
-- On binder shift to state 256
-- On EQUALS reduce production binders ->

State 450:
new_effect -> name binders . EQUALS simpleTerm [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On EQUALS shift to state 451

State 451:
new_effect -> name binders EQUALS . simpleTerm [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUN shift to state 158
-- On FALSE shift to state 51
-- On EQUALS shift to state 183
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 452
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 452:
new_effect -> name binders EQUALS simpleTerm . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production new_effect -> name binders EQUALS simpleTerm
-- On TYPE reduce production new_effect -> name binders EQUALS simpleTerm
-- On TOTAL reduce production new_effect -> name binders EQUALS simpleTerm
-- On SUB_EFFECT reduce production new_effect -> name binders EQUALS simpleTerm
-- On SEMICOLON_SEMICOLON reduce production new_effect -> name binders EQUALS simpleTerm
-- On PRIVATE reduce production new_effect -> name binders EQUALS simpleTerm
-- On PRAGMA_SET_OPTIONS reduce production new_effect -> name binders EQUALS simpleTerm
-- On PRAGMA_RESET_OPTIONS reduce production new_effect -> name binders EQUALS simpleTerm
-- On OPEN reduce production new_effect -> name binders EQUALS simpleTerm
-- On OPAQUE reduce production new_effect -> name binders EQUALS simpleTerm
-- On NEW_EFFECT reduce production new_effect -> name binders EQUALS simpleTerm
-- On MODULE reduce production new_effect -> name binders EQUALS simpleTerm
-- On LOGIC reduce production new_effect -> name binders EQUALS simpleTerm
-- On LET reduce production new_effect -> name binders EQUALS simpleTerm
-- On KIND reduce production new_effect -> name binders EQUALS simpleTerm
-- On EXCEPTION reduce production new_effect -> name binders EQUALS simpleTerm
-- On EOF reduce production new_effect -> name binders EQUALS simpleTerm
-- On END reduce production new_effect -> name binders EQUALS simpleTerm
-- On EFFECT reduce production new_effect -> name binders EQUALS simpleTerm
-- On DEFAULT reduce production new_effect -> name binders EQUALS simpleTerm
-- On ASSUME reduce production new_effect -> name binders EQUALS simpleTerm

State 453:
tycon -> qualifiers EFFECT . tyconDefinition [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On IDENT shift to state 36
-- On tyconDefinition shift to state 454
-- On name shift to state 395
-- On ident shift to state 396
-- On eitherName shift to state 397

State 454:
tycon -> qualifiers EFFECT tyconDefinition . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On TYPE reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On TOTAL reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On SUB_EFFECT reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On SEMICOLON_SEMICOLON reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On PRIVATE reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On PRAGMA_SET_OPTIONS reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On PRAGMA_RESET_OPTIONS reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On OPEN reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On OPAQUE reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On NEW_EFFECT reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On MODULE reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On LOGIC reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On LET reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On KIND reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On EXCEPTION reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On EOF reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On END reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On EFFECT reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On DEFAULT reduce production tycon -> qualifiers EFFECT tyconDefinition
-- On ASSUME reduce production tycon -> qualifiers EFFECT tyconDefinition

State 455:
qualifiers -> qualifier . qualifiers [ VAL TYPE NEW_EFFECT EFFECT ]
-- On TOTAL shift to state 1
-- On PRIVATE shift to state 357
-- On OPAQUE shift to state 365
-- On LOGIC shift to state 366
-- On DEFAULT shift to state 382
-- On ASSUME shift to state 456
-- On qualifiers shift to state 457
-- On qualifier shift to state 455
-- On VAL reduce production qualifiers ->
-- On TYPE reduce production qualifiers ->
-- On NEW_EFFECT reduce production qualifiers ->
-- On EFFECT reduce production qualifiers ->

State 456:
qualifier -> ASSUME . [ VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME ]
-- On VAL reduce production qualifier -> ASSUME
-- On TYPE reduce production qualifier -> ASSUME
-- On TOTAL reduce production qualifier -> ASSUME
-- On PRIVATE reduce production qualifier -> ASSUME
-- On OPAQUE reduce production qualifier -> ASSUME
-- On NEW_EFFECT reduce production qualifier -> ASSUME
-- On LOGIC reduce production qualifier -> ASSUME
-- On EFFECT reduce production qualifier -> ASSUME
-- On DEFAULT reduce production qualifier -> ASSUME
-- On ASSUME reduce production qualifier -> ASSUME

State 457:
qualifiers -> qualifier qualifiers . [ VAL TYPE NEW_EFFECT EFFECT ]
-- On VAL reduce production qualifiers -> qualifier qualifiers
-- On TYPE reduce production qualifiers -> qualifier qualifiers
-- On NEW_EFFECT reduce production qualifiers -> qualifier qualifiers
-- On EFFECT reduce production qualifiers -> qualifier qualifiers

State 458:
decl2 -> pragma . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> pragma
-- On TYPE reduce production decl2 -> pragma
-- On TOTAL reduce production decl2 -> pragma
-- On SUB_EFFECT reduce production decl2 -> pragma
-- On SEMICOLON_SEMICOLON reduce production decl2 -> pragma
-- On PRIVATE reduce production decl2 -> pragma
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> pragma
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> pragma
-- On OPEN reduce production decl2 -> pragma
-- On OPAQUE reduce production decl2 -> pragma
-- On NEW_EFFECT reduce production decl2 -> pragma
-- On MODULE reduce production decl2 -> pragma
-- On LOGIC reduce production decl2 -> pragma
-- On LET reduce production decl2 -> pragma
-- On KIND reduce production decl2 -> pragma
-- On EXCEPTION reduce production decl2 -> pragma
-- On EOF reduce production decl2 -> pragma
-- On END reduce production decl2 -> pragma
-- On EFFECT reduce production decl2 -> pragma
-- On DEFAULT reduce production decl2 -> pragma
-- On ASSUME reduce production decl2 -> pragma

State 459:
file -> maybe_pragma_light . moduleList [ # ]
-- On MODULE shift to state 460
-- On EOF shift to state 475
-- On moduleList shift to state 476
-- On modul shift to state 477

State 460:
modul -> MODULE . qname decls endopt [ MODULE EOF ]
-- On NAME shift to state 3
-- On qname shift to state 461
-- On namepath shift to state 64
-- On name shift to state 65

State 461:
modul -> MODULE qname . decls endopt [ MODULE EOF ]
-- On TOTAL shift to state 1
-- On SUB_EFFECT shift to state 2
-- On SEMICOLON_SEMICOLON shift to state 462
-- On PRIVATE shift to state 357
-- On PRAGMA_SET_OPTIONS shift to state 358
-- On PRAGMA_RESET_OPTIONS shift to state 360
-- On OPEN shift to state 363
-- On OPAQUE shift to state 365
-- On LOGIC shift to state 366
-- On LET shift to state 367
-- On KIND shift to state 371
-- On EXCEPTION shift to state 377
-- On DEFAULT shift to state 382
-- On ASSUME shift to state 383
-- On tycon shift to state 384
-- On qualifiers shift to state 385
-- On qualifier shift to state 455
-- On pragma shift to state 458
-- On kind_abbrev shift to state 464
-- On decls shift to state 465
-- On decl2 shift to state 468
-- On decl shift to state 469
-- On assumeTag shift to state 471
-- On VAL reduce production qualifiers ->
-- On TYPE reduce production qualifiers ->
-- On NEW_EFFECT reduce production qualifiers ->
-- On MODULE reduce production decls ->
-- On EOF reduce production decls ->
-- On END reduce production decls ->
-- On EFFECT reduce production qualifiers ->

State 462:
decls -> SEMICOLON_SEMICOLON . term [ MODULE EOF END ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On term shift to state 463
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 269
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 463:
decls -> SEMICOLON_SEMICOLON term . [ MODULE EOF END ]
-- On MODULE reduce production decls -> SEMICOLON_SEMICOLON term
-- On EOF reduce production decls -> SEMICOLON_SEMICOLON term
-- On END reduce production decls -> SEMICOLON_SEMICOLON term

State 464:
decl2 -> kind_abbrev . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> kind_abbrev
-- On TYPE reduce production decl2 -> kind_abbrev
-- On TOTAL reduce production decl2 -> kind_abbrev
-- On SUB_EFFECT reduce production decl2 -> kind_abbrev
-- On SEMICOLON_SEMICOLON reduce production decl2 -> kind_abbrev
-- On PRIVATE reduce production decl2 -> kind_abbrev
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> kind_abbrev
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> kind_abbrev
-- On OPEN reduce production decl2 -> kind_abbrev
-- On OPAQUE reduce production decl2 -> kind_abbrev
-- On NEW_EFFECT reduce production decl2 -> kind_abbrev
-- On MODULE reduce production decl2 -> kind_abbrev
-- On LOGIC reduce production decl2 -> kind_abbrev
-- On LET reduce production decl2 -> kind_abbrev
-- On KIND reduce production decl2 -> kind_abbrev
-- On EXCEPTION reduce production decl2 -> kind_abbrev
-- On EOF reduce production decl2 -> kind_abbrev
-- On END reduce production decl2 -> kind_abbrev
-- On EFFECT reduce production decl2 -> kind_abbrev
-- On DEFAULT reduce production decl2 -> kind_abbrev
-- On ASSUME reduce production decl2 -> kind_abbrev

State 465:
modul -> MODULE qname decls . endopt [ MODULE EOF ]
-- On END shift to state 466
-- On endopt shift to state 467
-- On MODULE reduce production endopt ->
-- On EOF reduce production endopt ->

State 466:
endopt -> END . [ MODULE EOF ]
-- On MODULE reduce production endopt -> END
-- On EOF reduce production endopt -> END

State 467:
modul -> MODULE qname decls endopt . [ MODULE EOF ]
-- On MODULE reduce production modul -> MODULE qname decls endopt
-- On EOF reduce production modul -> MODULE qname decls endopt

State 468:
decl -> decl2 . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl -> decl2
-- On TYPE reduce production decl -> decl2
-- On TOTAL reduce production decl -> decl2
-- On SUB_EFFECT reduce production decl -> decl2
-- On SEMICOLON_SEMICOLON reduce production decl -> decl2
-- On PRIVATE reduce production decl -> decl2
-- On PRAGMA_SET_OPTIONS reduce production decl -> decl2
-- On PRAGMA_RESET_OPTIONS reduce production decl -> decl2
-- On OPEN reduce production decl -> decl2
-- On OPAQUE reduce production decl -> decl2
-- On NEW_EFFECT reduce production decl -> decl2
-- On MODULE reduce production decl -> decl2
-- On LOGIC reduce production decl -> decl2
-- On LET reduce production decl -> decl2
-- On KIND reduce production decl -> decl2
-- On EXCEPTION reduce production decl -> decl2
-- On EOF reduce production decl -> decl2
-- On END reduce production decl -> decl2
-- On EFFECT reduce production decl -> decl2
-- On DEFAULT reduce production decl -> decl2
-- On ASSUME reduce production decl -> decl2

State 469:
decls -> decl . decls [ MODULE EOF END ]
-- On TOTAL shift to state 1
-- On SUB_EFFECT shift to state 2
-- On SEMICOLON_SEMICOLON shift to state 462
-- On PRIVATE shift to state 357
-- On PRAGMA_SET_OPTIONS shift to state 358
-- On PRAGMA_RESET_OPTIONS shift to state 360
-- On OPEN shift to state 363
-- On OPAQUE shift to state 365
-- On LOGIC shift to state 366
-- On LET shift to state 367
-- On KIND shift to state 371
-- On EXCEPTION shift to state 377
-- On DEFAULT shift to state 382
-- On ASSUME shift to state 383
-- On tycon shift to state 384
-- On qualifiers shift to state 385
-- On qualifier shift to state 455
-- On pragma shift to state 458
-- On kind_abbrev shift to state 464
-- On decls shift to state 470
-- On decl2 shift to state 468
-- On decl shift to state 469
-- On assumeTag shift to state 471
-- On VAL reduce production qualifiers ->
-- On TYPE reduce production qualifiers ->
-- On NEW_EFFECT reduce production qualifiers ->
-- On MODULE reduce production decls ->
-- On EOF reduce production decls ->
-- On END reduce production decls ->
-- On EFFECT reduce production qualifiers ->

State 470:
decls -> decl decls . [ MODULE EOF END ]
-- On MODULE reduce production decls -> decl decls
-- On EOF reduce production decls -> decl decls
-- On END reduce production decls -> decl decls

State 471:
decl2 -> assumeTag . name COLON formula [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On NAME shift to state 3
-- On name shift to state 472

State 472:
decl2 -> assumeTag name . COLON formula [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On COLON shift to state 473

State 473:
decl2 -> assumeTag name COLON . formula [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On UNDERSCORE shift to state 9
-- On UINT8 shift to state 10
-- On TVAR shift to state 11
-- On TRY shift to state 16
-- On TRUE shift to state 12
-- On TILDE shift to state 13
-- On STRING shift to state 14
-- On REQUIRES shift to state 17
-- On PLUS_OP shift to state 21
-- On PERCENT_LBRACK shift to state 15
-- On NAME shift to state 3
-- On MINUS_OP shift to state 24
-- On MATCH shift to state 27
-- On LPAREN_RPAREN shift to state 22
-- On LPAREN shift to state 23
-- On LET shift to state 28
-- On LENS_PAREN_LEFT shift to state 25
-- On LBRACK_BAR shift to state 26
-- On LBRACK shift to state 103
-- On LBRACE shift to state 104
-- On INT64 shift to state 45
-- On INT32 shift to state 46
-- On INT shift to state 47
-- On IF shift to state 106
-- On IEEE64 shift to state 48
-- On IDENT shift to state 36
-- On HASH shift to state 107
-- On FUNCTION shift to state 108
-- On FUN shift to state 158
-- On FORALL shift to state 163
-- On FALSE shift to state 51
-- On EXISTS shift to state 170
-- On EQUALS shift to state 183
-- On ENSURES shift to state 184
-- On CHAR shift to state 52
-- On BYTEARRAY shift to state 53
-- On BEGIN shift to state 105
-- On BANG_LBRACE shift to state 116
-- On BANG shift to state 117
-- On ASSUME shift to state 196
-- On ASSERT shift to state 118
-- On unaryTerm shift to state 186
-- On typ shift to state 198
-- On tvar shift to state 119
-- On tupleN shift to state 199
-- On tmTuple shift to state 200
-- On tmOr shift to state 201
-- On tmImplies shift to state 232
-- On tmIff shift to state 249
-- On tmEq shift to state 235
-- On tmDisjunction shift to state 241
-- On tmCons shift to state 203
-- On tmConjunction shift to state 244
-- On tmAnd shift to state 238
-- On starDivModTerm shift to state 206
-- On simpleTerm shift to state 250
-- On refinementTerm shift to state 189
-- On projectionLHS shift to state 120
-- On productDomain shift to state 207
-- On product shift to state 223
-- On plusOp shift to state 210
-- On noSeqTerm shift to state 251
-- On name shift to state 124
-- On minusOp shift to state 211
-- On ident shift to state 192
-- On formula shift to state 474
-- On eitherpath shift to state 129
-- On eitherQname shift to state 130
-- On dtupleTerm shift to state 217
-- On constant shift to state 134
-- On cmpTerm shift to state 231
-- On atomicTerm shift to state 142
-- On arithTerm shift to state 218
-- On aqual shift to state 221
-- On appTerm shift to state 214

State 474:
decl2 -> assumeTag name COLON formula . [ VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME ]
-- On VAL reduce production decl2 -> assumeTag name COLON formula
-- On TYPE reduce production decl2 -> assumeTag name COLON formula
-- On TOTAL reduce production decl2 -> assumeTag name COLON formula
-- On SUB_EFFECT reduce production decl2 -> assumeTag name COLON formula
-- On SEMICOLON_SEMICOLON reduce production decl2 -> assumeTag name COLON formula
-- On PRIVATE reduce production decl2 -> assumeTag name COLON formula
-- On PRAGMA_SET_OPTIONS reduce production decl2 -> assumeTag name COLON formula
-- On PRAGMA_RESET_OPTIONS reduce production decl2 -> assumeTag name COLON formula
-- On OPEN reduce production decl2 -> assumeTag name COLON formula
-- On OPAQUE reduce production decl2 -> assumeTag name COLON formula
-- On NEW_EFFECT reduce production decl2 -> assumeTag name COLON formula
-- On MODULE reduce production decl2 -> assumeTag name COLON formula
-- On LOGIC reduce production decl2 -> assumeTag name COLON formula
-- On LET reduce production decl2 -> assumeTag name COLON formula
-- On KIND reduce production decl2 -> assumeTag name COLON formula
-- On EXCEPTION reduce production decl2 -> assumeTag name COLON formula
-- On EOF reduce production decl2 -> assumeTag name COLON formula
-- On END reduce production decl2 -> assumeTag name COLON formula
-- On EFFECT reduce production decl2 -> assumeTag name COLON formula
-- On DEFAULT reduce production decl2 -> assumeTag name COLON formula
-- On ASSUME reduce production decl2 -> assumeTag name COLON formula

State 475:
moduleList -> EOF . [ # ]
-- On # reduce production moduleList -> EOF

State 476:
file -> maybe_pragma_light moduleList . [ # ]
-- On # reduce production file -> maybe_pragma_light moduleList

State 477:
moduleList -> modul . moduleList [ # ]
-- On MODULE shift to state 460
-- On EOF shift to state 475
-- On moduleList shift to state 478
-- On modul shift to state 477

State 478:
moduleList -> modul moduleList . [ # ]
-- On # reduce production moduleList -> modul moduleList

State 479:
inputFragment' -> inputFragment . [ # ]
-- On # accept inputFragment

State 480:
inputFragment -> file . [ # ]
-- On # reduce production inputFragment -> file

State 481:
inputFragment -> decl . decls EOF [ # ]
-- On TOTAL shift to state 1
-- On SUB_EFFECT shift to state 2
-- On SEMICOLON_SEMICOLON shift to state 462
-- On PRIVATE shift to state 357
-- On PRAGMA_SET_OPTIONS shift to state 358
-- On PRAGMA_RESET_OPTIONS shift to state 360
-- On OPEN shift to state 363
-- On OPAQUE shift to state 365
-- On LOGIC shift to state 366
-- On LET shift to state 367
-- On KIND shift to state 371
-- On EXCEPTION shift to state 377
-- On DEFAULT shift to state 382
-- On ASSUME shift to state 383
-- On tycon shift to state 384
-- On qualifiers shift to state 385
-- On qualifier shift to state 455
-- On pragma shift to state 458
-- On kind_abbrev shift to state 464
-- On decls shift to state 482
-- On decl2 shift to state 468
-- On decl shift to state 469
-- On assumeTag shift to state 471
-- On VAL reduce production qualifiers ->
-- On TYPE reduce production qualifiers ->
-- On NEW_EFFECT reduce production qualifiers ->
-- On EOF reduce production decls ->
-- On EFFECT reduce production qualifiers ->

State 482:
inputFragment -> decl decls . EOF [ # ]
-- On EOF shift to state 483

State 483:
inputFragment -> decl decls EOF . [ # ]
-- On # reduce production inputFragment -> decl decls EOF

