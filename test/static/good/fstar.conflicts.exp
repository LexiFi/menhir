
** Conflict (shift/reduce) in state 352.
** Token involved: BAR
** This state is reached from inputFragment after reading:

decl SEMICOLON_SEMICOLON FUNCTION maybeBar disjunctivePattern maybeWhen maybeFocusArrow TRY term WITH firstPatternBranch patternBranches 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
decl decls EOF 
     SEMICOLON_SEMICOLON term 
                         noSeqTerm 
                         (?)

** In state 352, looking ahead at BAR, reducing production
** noSeqTerm -> TRY term WITH firstPatternBranch patternBranches 
** is permitted because of the following sub-derivation:

FUNCTION firstPatternBranch patternBranches // lookahead token appears because patternBranches can begin with BAR
         maybeBar disjunctivePattern maybeWhen maybeFocusArrow term // lookahead token is inherited
                                                               noSeqTerm // lookahead token is inherited
                                                               TRY term WITH firstPatternBranch patternBranches . 

** In state 352, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

FUNCTION firstPatternBranch patternBranches 
         maybeBar disjunctivePattern maybeWhen maybeFocusArrow term 
                                                               noSeqTerm 
                                                               TRY term WITH firstPatternBranch patternBranches 
                                                                                                patternBranches patternBranch 
                                                                                                                . BAR disjunctivePattern maybeWhen maybeFocusArrow term 

** Conflict (shift/reduce) in state 334.
** Token involved: BAR
** This state is reached from inputFragment after reading:

decl SEMICOLON_SEMICOLON FUNCTION maybeBar disjunctivePattern maybeWhen maybeFocusArrow MATCH term WITH firstPatternBranch patternBranches 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
decl decls EOF 
     SEMICOLON_SEMICOLON term 
                         noSeqTerm 
                         (?)

** In state 334, looking ahead at BAR, reducing production
** noSeqTerm -> MATCH term WITH firstPatternBranch patternBranches 
** is permitted because of the following sub-derivation:

FUNCTION firstPatternBranch patternBranches // lookahead token appears because patternBranches can begin with BAR
         maybeBar disjunctivePattern maybeWhen maybeFocusArrow term // lookahead token is inherited
                                                               noSeqTerm // lookahead token is inherited
                                                               MATCH term WITH firstPatternBranch patternBranches . 

** In state 334, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

FUNCTION firstPatternBranch patternBranches 
         maybeBar disjunctivePattern maybeWhen maybeFocusArrow term 
                                                               noSeqTerm 
                                                               MATCH term WITH firstPatternBranch patternBranches 
                                                                                                  patternBranches patternBranch 
                                                                                                                  . BAR disjunctivePattern maybeWhen maybeFocusArrow term 

** Conflict (shift/reduce) in state 274.
** Token involved: BAR
** This state is reached from inputFragment after reading:

decl SEMICOLON_SEMICOLON FUNCTION maybeBar disjunctivePattern maybeWhen maybeFocusArrow FUNCTION firstPatternBranch patternBranches 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
decl decls EOF 
     SEMICOLON_SEMICOLON term 
                         noSeqTerm 
                         (?)

** In state 274, looking ahead at BAR, reducing production
** noSeqTerm -> FUNCTION firstPatternBranch patternBranches 
** is permitted because of the following sub-derivation:

FUNCTION firstPatternBranch patternBranches // lookahead token appears because patternBranches can begin with BAR
         maybeBar disjunctivePattern maybeWhen maybeFocusArrow term // lookahead token is inherited
                                                               noSeqTerm // lookahead token is inherited
                                                               FUNCTION firstPatternBranch patternBranches . 

** In state 274, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

FUNCTION firstPatternBranch patternBranches 
         maybeBar disjunctivePattern maybeWhen maybeFocusArrow term 
                                                               noSeqTerm 
                                                               FUNCTION firstPatternBranch patternBranches 
                                                                                           patternBranches patternBranch 
                                                                                                           . BAR disjunctivePattern maybeWhen maybeFocusArrow term 

** Conflict (shift/reduce) in state 269.
** Token involved: SEMICOLON
** This state is reached from inputFragment after reading:

decl SEMICOLON_SEMICOLON FUN atomicPattern atomicPatterns funArrow noSeqTerm 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
decl decls EOF 
     SEMICOLON_SEMICOLON term 
                         (?)

** In state 269, looking ahead at SEMICOLON, reducing production
** term -> noSeqTerm 
** is permitted because of the following sub-derivation:

noSeqTerm SEMICOLON term // lookahead token appears
typ // lookahead token is inherited
simpleTerm // lookahead token is inherited
FUN atomicPattern atomicPatterns funArrow term // lookahead token is inherited
                                          noSeqTerm . 

** In state 269, looking ahead at SEMICOLON, shifting is permitted
** because of the following sub-derivation:

noSeqTerm 
typ 
simpleTerm 
FUN atomicPattern atomicPatterns funArrow term 
                                          noSeqTerm . SEMICOLON term 

** Conflict (shift/reduce) in state 194.
** Token involved: LBRACE
** This state is reached from inputFragment after reading:

LET recopt LPAREN nonTvarPattern COLON ident COLON appTerm 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
decl decls EOF 
decl2 
LET recopt letbinding letbindings 
           pattern ascribeTypOpt EQUALS term 
           tuplePattern 
           listPattern patternListComma 
           appPattern consPattern 
           atomicPattern atomicPatterns 
           atomicPattern2 
           nonTvarPattern2 
           LPAREN ascriptionOrPattern RPAREN 
                  (?)

** In state 194, looking ahead at LBRACE, reducing production
** refinementTerm -> ident COLON appTerm 
** is permitted because of the following sub-derivation:

nonTvarPattern COLON typ refineOpt // lookahead token appears because refineOpt can begin with LBRACE
                     simpleTerm // lookahead token is inherited
                     tmIff // lookahead token is inherited
                     tmImplies // lookahead token is inherited
                     tmDisjunction // lookahead token is inherited
                     tmConjunction // lookahead token is inherited
                     tmTuple // lookahead token is inherited
                     tupleN // lookahead token is inherited
                     tmEq // lookahead token is inherited
                     tmOr // lookahead token is inherited
                     tmAnd // lookahead token is inherited
                     cmpTerm // lookahead token is inherited
                     tmCons // lookahead token is inherited
                     product // lookahead token is inherited
                     dtupleTerm // lookahead token is inherited
                     arithTerm // lookahead token is inherited
                     plusOp // lookahead token is inherited
                     minusOp // lookahead token is inherited
                     starDivModTerm // lookahead token is inherited
                     refinementTerm // lookahead token is inherited
                     ident COLON appTerm . 

** In state 194, looking ahead at LBRACE, shifting is permitted
** because of the following sub-derivation:

nonTvarPattern COLON typ refineOpt 
                     simpleTerm 
                     tmIff 
                     tmImplies IFF tmIff 
                     tmDisjunction IMPLIES tmImplies 
                     tmConjunction 
                     tmTuple 
                     tupleN 
                     tmEq 
                     tmOr 
                     tmAnd 
                     cmpTerm 
                     tmCons 
                     product COLON_COLON tmCons 
                     dtupleTerm 
                     arithTerm AMP dtupleTerm 
                     plusOp 
                     minusOp PLUS_OP plusOp 
                     starDivModTerm 
                     refinementTerm STAR starDivModTerm 
                     ident COLON appTerm . LBRACE formula RBRACE 

** Conflict (shift/reduce) in state 124.
** Token involved: DOT
** This state is reached from inputFragment after reading:

decl SEMICOLON_SEMICOLON name 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

inputFragment 
decl decls EOF 
     SEMICOLON_SEMICOLON term 
                         noSeqTerm 
                         typ 
                         simpleTerm 
                         tmIff 
                         tmImplies IFF tmIff 
                         tmDisjunction IMPLIES tmImplies 
                         tmConjunction 
                         tmTuple 
                         tupleN 
                         tmEq 
                         tmOr 
                         tmAnd 
                         cmpTerm 
                         tmCons 
                         product COLON_COLON tmCons 
                         dtupleTerm 
                         arithTerm AMP dtupleTerm 
                         plusOp 
                         minusOp PLUS_OP plusOp 
                         starDivModTerm 
                         unaryTerm DIV_MOD_OP starDivModTerm 
                         appTerm 
                         atomicTerm hashAtomicTerms 
                         (?)

** In state 124, looking ahead at DOT, reducing production
** maybeMorePath -> 
** is permitted because of the following sub-derivation:

projectionLHS maybeFieldProjections // lookahead token appears because maybeFieldProjections can begin with DOT
eitherQname maybeInsts // lookahead token is inherited because maybeInsts can vanish
eitherpath // lookahead token is inherited
name maybeMorePath // lookahead token is inherited
     . 

** In state 124, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

projectionLHS maybeFieldProjections 
eitherQname maybeInsts 
eitherpath 
name maybeMorePath 
     . DOT eitherpath 
