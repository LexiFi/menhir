File "fstar.mly", line 78, characters 11-13:
Warning: the token AS is unused.
File "fstar.mly", line 84, characters 29-35:
Warning: the token ATSIGN is unused.
File "fstar.mly", line 85, characters 88-97:
Warning: the token BACKSLASH is unused.
File "fstar.mly", line 91, characters 24-33:
Warning: the token BAR_FOCUS is unused.
File "fstar.mly", line 73, characters 15-21:
Warning: the token BIGINT is unused.
File "fstar.mly", line 73, characters 22-28:
Warning: the token BIGNUM is unused.
File "fstar.mly", line 95, characters 7-14:
Warning: the token COMMENT is unused.
File "fstar.mly", line 72, characters 17-24:
Warning: the token DECIMAL is unused.
File "fstar.mly", line 76, characters 34-40:
Warning: the token DEFINE is unused.
File "fstar.mly", line 78, characters 36-43:
Warning: the token DOT_DOT is unused.
File "fstar.mly", line 85, characters 34-47:
Warning: the token EQUALS_EQUALS is unused.
File "fstar.mly", line 79, characters 46-53:
Warning: the token FINALLY is unused.
File "fstar.mly", line 79, characters 23-26:
Warning: the token FOR is unused.
File "fstar.mly", line 77, characters 19-22:
Warning: the token GEQ is unused.
File "fstar.mly", line 95, characters 55-64:
Warning: the token HASH_ELSE is unused.
File "fstar.mly", line 95, characters 65-75:
Warning: the token HASH_ENDIF is unused.
File "fstar.mly", line 95, characters 47-54:
Warning: the token HASH_IF is unused.
File "fstar.mly", line 95, characters 36-46:
Warning: the token HASH_LIGHT is unused.
File "fstar.mly", line 95, characters 26-35:
Warning: the token HASH_LINE is unused.
File "fstar.mly", line 84, characters 36-39:
Warning: the token HAT is unused.
File "fstar.mly", line 48, characters 16-26:
Warning: the token IDENT_LESS is unused.
File "fstar.mly", line 69, characters 16-22:
Warning: the token IEEE32 is unused.
File "fstar.mly", line 95, characters 76-88:
Warning: the token INACTIVECODE is unused.
File "fstar.mly", line 58, characters 22-27:
Warning: the token INT16 is unused.
File "fstar.mly", line 59, characters 28-41:
Warning: the token INT32_DOT_DOT is unused.
File "fstar.mly", line 57, characters 22-26:
Warning: the token INT8 is unused.
File "fstar.mly", line 80, characters 7-11:
Warning: the token LAZY is unused.
File "fstar.mly", line 77, characters 15-18:
Warning: the token LEQ is unused.
File "fstar.mly", line 77, characters 23-27:
Warning: the token LESS is unused.
File "fstar.mly", line 77, characters 66-77:
Warning: the token LESSGREATER is unused.
File "fstar.mly", line 77, characters 28-36:
Warning: the token LESSLESS is unused.
File "fstar.mly", line 94, characters 16-27:
Warning: the token LEX_FAILURE is unused.
File "fstar.mly", line 95, characters 89-101:
Warning: the token LINE_COMMENT is unused.
File "fstar.mly", line 75, characters 23-29:
Warning: the token LQUOTE is unused.
File "fstar.mly", line 87, characters 25-30:
Warning: the token MINUS is unused.
File "fstar.mly", line 68, characters 15-24:
Warning: the token NATIVEINT is unused.
File "fstar.mly", line 81, characters 12-14:
Warning: the token OR is unused.
File "fstar.mly", line 88, characters 43-52:
Warning: the token PIPE_LEFT is unused.
File "fstar.mly", line 88, characters 53-63:
Warning: the token PIPE_RIGHT is unused.
File "fstar.mly", line 90, characters 7-12:
Warning: the token PRINT is unused.
File "fstar.mly", line 88, characters 7-13:
Warning: the token PUBLIC is unused.
File "fstar.mly", line 76, characters 28-33:
Warning: the token QUERY is unused.
File "fstar.mly", line 82, characters 34-39:
Warning: the token QUOTE is unused.
File "fstar.mly", line 79, characters 54-62:
Warning: the token RESERVED is unused.
File "fstar.mly", line 75, characters 30-36:
Warning: the token RQUOTE is unused.
File "fstar.mly", line 95, characters 102-113:
Warning: the token STRING_TEXT is unused.
File "fstar.mly", line 81, characters 24-26:
Warning: the token TO is unused.
File "fstar.mly", line 64, characters 16-22:
Warning: the token UINT16 is unused.
File "fstar.mly", line 65, characters 16-22:
Warning: the token UINT32 is unused.
File "fstar.mly", line 66, characters 16-22:
Warning: the token UINT64 is unused.
File "fstar.mly", line 67, characters 16-26:
Warning: the token UNATIVEINT is unused.
File "fstar.mly", line 95, characters 15-25:
Warning: the token WHITESPACE is unused.
File "fstar.mly", line 982, characters 0-11:
Warning: symbol atomicTerms is unreachable from any of the start symbol(s).
File "fstar.mly", line 317, characters 0-16:
Warning: symbol compositePattern is unreachable from any of the start symbol(s).
File "fstar.mly", line 986, characters 0-8:
Warning: symbol consTerm is unreachable from any of the start symbol(s).
File "fstar.mly", line 248, characters 0-9:
Warning: symbol ident_opt is unreachable from any of the start symbol(s).
File "fstar.mly", line 864, characters 0-18:
Warning: symbol moreRecdFieldTypes is unreachable from any of the start symbol(s).
File "fstar.mly", line 868, characters 0-13:
Warning: symbol recdFieldType is unreachable from any of the start symbol(s).
File "fstar.mly", line 860, characters 0-14:
Warning: symbol recdFieldTypes is unreachable from any of the start symbol(s).
Grammar has 125 nonterminal symbols, among which 1 start symbols.
Grammar has 151 terminal symbols.
Grammar has 276 productions.
nullable(unaryTerm) = false
nullable(typars) = true
nullable(typ) = false
nullable(tyconDefn) = true
nullable(tyconDefinitions) = true
nullable(tyconDefinition) = false
nullable(tycon) = false
nullable(tvars) = false
nullable(tvarinsts) = false
nullable(tvar) = false
nullable(tuplePattern) = false
nullable(tupleN) = false
nullable(tmTuple) = false
nullable(tmOr) = false
nullable(tmImplies) = false
nullable(tmIff) = false
nullable(tmEq) = false
nullable(tmDisjunction) = false
nullable(tmCons) = false
nullable(tmConjunction) = false
nullable(tmAnd) = false
nullable(term) = false
nullable(targs) = false
nullable(sub_effect) = false
nullable(starDivModTerm) = false
nullable(simpleTerm) = false
nullable(semiColonTermList) = true
nullable(refinementTerm) = false
nullable(refineOpt) = true
nullable(recordPattern) = false
nullable(recordFields) = true
nullable(recordFieldDecl) = false
nullable(recordFieldAssignments) = true
nullable(recordFieldAssignment) = false
nullable(recordExpRest) = false
nullable(recordExp) = false
nullable(recopt) = true
nullable(qualifiers) = true
nullable(qualifier) = false
nullable(qpat) = true
nullable(qname) = false
nullable(projectionLHS) = false
nullable(productDomain) = false
nullable(product) = false
nullable(pragma) = false
nullable(plusOp) = false
nullable(patternListSemiColonRest) = true
nullable(patternListSemiColon) = true
nullable(patternListComma) = true
nullable(patternBranches) = true
nullable(patternBranch) = false
nullable(pattern) = false
nullable(of_typ) = true
nullable(nonTvarPattern2) = false
nullable(nonTvarPattern) = false
nullable(noSeqTerm) = false
nullable(new_effect) = false
nullable(namepath) = false
nullable(name) = false
nullable(more_effect_decls) = true
nullable(moreSemiColonTerms) = true
nullable(morePats) = true
nullable(moreFieldPatterns) = true
nullable(moreCommaTerms) = true
nullable(moduleList) = false
nullable(modul) = false
nullable(minusOp) = false
nullable(maybe_pragma_light) = true
nullable(maybeWithSort) = true
nullable(maybeWhen) = true
nullable(maybeMorePath) = true
nullable(maybeInsts) = true
nullable(maybeHash) = true
nullable(maybeFocusArrow) = false
nullable(maybeFocus) = true
nullable(maybeFieldProjections) = true
nullable(maybeBar) = true
nullable(listPattern) = false
nullable(lid) = false
nullable(letbindings) = true
nullable(letbinding) = false
nullable(label_opt) = true
nullable(kind_abbrev) = false
nullable(kind) = false
nullable(inputFragment) = false
nullable(idpath) = false
nullable(ident) = false
nullable(hashAtomicTerms) = true
nullable(hasSort) = false
nullable(funArrow) = false
nullable(formula) = false
nullable(firstPatternBranch) = false
nullable(file) = false
nullable(endopt) = true
nullable(eitherpath) = false
nullable(eitherQname) = false
nullable(eitherName) = false
nullable(effect_decl) = false
nullable(dtupleTerm) = false
nullable(disjunctivePattern) = false
nullable(decls) = true
nullable(decl2) = false
nullable(decl) = false
nullable(constructors) = true
nullable(constructorDecl) = false
nullable(constant) = false
nullable(consPattern) = true
nullable(comparisonOp) = false
nullable(commaTermList) = true
nullable(cmpTerm) = false
nullable(binders) = true
nullable(binder) = false
nullable(atomicTerm) = false
nullable(atomicPatterns) = true
nullable(atomicPattern2) = false
nullable(atomicPattern) = false
nullable(assumeTag) = false
nullable(ascriptionOrPattern) = false
nullable(ascribeTypOpt) = true
nullable(ascribeKindOpt) = true
nullable(arithTerm) = false
nullable(aqual_opt) = true
nullable(aqual) = false
nullable(appTerm) = false
nullable(appPattern) = false
first(unaryTerm) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(typars) = TYP_APP_LESS TVAR LPAREN IDENT
first(typ) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FORALL FALSE EXISTS EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tyconDefn) = EQUALS
first(tyconDefinitions) = AND
first(tyconDefinition) = NAME IDENT
first(tycon) = TYPE TOTAL PRIVATE OPAQUE LOGIC EFFECT DEFAULT ASSUME
first(tvars) = TVAR
first(tvarinsts) = TYP_APP_LESS
first(tvar) = TVAR
first(tuplePattern) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(tupleN) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmTuple) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmOr) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmImplies) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmIff) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmEq) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmDisjunction) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmCons) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmConjunction) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(tmAnd) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(term) = UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT
first(targs) = UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(sub_effect) = NAME
first(starDivModTerm) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(simpleTerm) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(semiColonTermList) = UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT
first(refinementTerm) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(refineOpt) = LBRACE
first(recordPattern) = NAME IDENT
first(recordFields) = SEMICOLON
first(recordFieldDecl) = IDENT
first(recordFieldAssignments) = SEMICOLON
first(recordFieldAssignment) = NAME IDENT
first(recordExpRest) = WITH EQUALS
first(recordExp) = UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(recopt) = SQUIGGLY_RARROW REC
first(qualifiers) = TOTAL PRIVATE OPAQUE LOGIC DEFAULT ASSUME
first(qualifier) = TOTAL PRIVATE OPAQUE LOGIC DEFAULT ASSUME
first(qpat) = LBRACE_COLON_PATTERN
first(qname) = NAME
first(projectionLHS) = PERCENT_LBRACK NAME LPAREN LBRACK_BAR LBRACK IDENT BANG_LBRACE
first(productDomain) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(product) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(pragma) = PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS
first(plusOp) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(patternListSemiColonRest) = SEMICOLON
first(patternListSemiColon) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(patternListComma) = COMMA
first(patternBranches) = BAR
first(patternBranch) = BAR
first(pattern) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(of_typ) = OF
first(nonTvarPattern2) = UNDERSCORE UINT8 TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(nonTvarPattern) = UNDERSCORE UINT8 TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(noSeqTerm) = UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT
first(new_effect) = NAME LBRACE
first(namepath) = NAME
first(name) = NAME
first(more_effect_decls) = SEMICOLON
first(moreSemiColonTerms) = SEMICOLON
first(morePats) = SEMICOLON
first(moreFieldPatterns) = SEMICOLON
first(moreCommaTerms) = COMMA
first(moduleList) = MODULE EOF
first(modul) = MODULE
first(minusOp) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(maybe_pragma_light) = PRAGMALIGHT
first(maybeWithSort) = SUBTYPE SUBKIND
first(maybeWhen) = WHEN
first(maybeMorePath) = DOT
first(maybeInsts) = TYP_APP_LESS
first(maybeHash) = HASH
first(maybeFocusArrow) = SQUIGGLY_RARROW RARROW
first(maybeFocus) = SQUIGGLY_RARROW
first(maybeFieldProjections) = DOT
first(maybeBar) = BAR
first(listPattern) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(lid) = NAME IDENT
first(letbindings) = AND
first(letbinding) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(label_opt) = DOLLAR
first(kind_abbrev) = KIND
first(kind) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(inputFragment) = VAL TYPE TOTAL SUB_EFFECT PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PRAGMALIGHT OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF EFFECT DEFAULT ASSUME
first(idpath) = NAME IDENT
first(ident) = IDENT
first(hashAtomicTerms) = UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(hasSort) = SUBTYPE SUBKIND
first(funArrow) = RARROW
first(formula) = UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT
first(firstPatternBranch) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY BAR
first(file) = PRAGMALIGHT MODULE EOF
first(endopt) = END
first(eitherpath) = NAME IDENT
first(eitherQname) = NAME IDENT
first(eitherName) = NAME IDENT
first(effect_decl) = IDENT
first(dtupleTerm) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(disjunctivePattern) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(decls) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT LOGIC LET KIND EXCEPTION EFFECT DEFAULT ASSUME
first(decl2) = VAL TYPE TOTAL SUB_EFFECT PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT LOGIC LET KIND EXCEPTION EFFECT DEFAULT ASSUME
first(decl) = VAL TYPE TOTAL SUB_EFFECT PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT LOGIC LET KIND EXCEPTION EFFECT DEFAULT ASSUME
first(constructors) = BAR
first(constructorDecl) = BAR
first(constant) = UINT8 TRUE STRING LPAREN_RPAREN INT64 INT32 INT IEEE64 FALSE CHAR BYTEARRAY
first(consPattern) = COLON_COLON
first(comparisonOp) = EQUALS CUSTOM_OP
first(commaTermList) = UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(cmpTerm) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(binders) = TVAR LPAREN IDENT
first(binder) = TVAR LPAREN IDENT
first(atomicTerm) = UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(atomicPatterns) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(atomicPattern2) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(atomicPattern) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(assumeTag) = ASSUME
first(ascriptionOrPattern) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
first(ascribeTypOpt) = COLON
first(ascribeKindOpt) = COLON
first(arithTerm) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(aqual_opt) = HASH EQUALS
first(aqual) = HASH EQUALS
first(appTerm) = UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
first(appPattern) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
minimal(unaryTerm) = (* 1 *) UNDERSCORE
minimal(typars) = (* 0 *)
minimal(typ) = (* 1 *) UNDERSCORE
minimal(tyconDefn) = (* 0 *)
minimal(tyconDefinitions) = (* 0 *)
minimal(tyconDefinition) = (* 1 *) IDENT
minimal(tycon) = (* 2 *) TYPE IDENT
minimal(tvars) = (* 1 *) TVAR
minimal(tvarinsts) = (* 3 *) TYP_APP_LESS TVAR TYP_APP_GREATER
minimal(tvar) = (* 1 *) TVAR
minimal(tuplePattern) = (* 1 *) UNDERSCORE
minimal(tupleN) = (* 1 *) UNDERSCORE
minimal(tmTuple) = (* 1 *) UNDERSCORE
minimal(tmOr) = (* 1 *) UNDERSCORE
minimal(tmImplies) = (* 1 *) UNDERSCORE
minimal(tmIff) = (* 1 *) UNDERSCORE
minimal(tmEq) = (* 1 *) UNDERSCORE
minimal(tmDisjunction) = (* 1 *) UNDERSCORE
minimal(tmCons) = (* 1 *) UNDERSCORE
minimal(tmConjunction) = (* 1 *) UNDERSCORE
minimal(tmAnd) = (* 1 *) UNDERSCORE
minimal(term) = (* 1 *) UNDERSCORE
minimal(targs) = (* 1 *) UNDERSCORE
minimal(sub_effect) = (* 5 *) NAME SQUIGGLY_RARROW NAME EQUALS UNDERSCORE
minimal(starDivModTerm) = (* 1 *) UNDERSCORE
minimal(simpleTerm) = (* 1 *) UNDERSCORE
minimal(semiColonTermList) = (* 0 *)
minimal(refinementTerm) = (* 1 *) UNDERSCORE
minimal(refineOpt) = (* 0 *)
minimal(recordPattern) = (* 3 *) IDENT EQUALS UNDERSCORE
minimal(recordFields) = (* 0 *)
minimal(recordFieldDecl) = (* 3 *) IDENT COLON UNDERSCORE
minimal(recordFieldAssignments) = (* 0 *)
minimal(recordFieldAssignment) = (* 3 *) IDENT EQUALS UNDERSCORE
minimal(recordExpRest) = (* 2 *) EQUALS UNDERSCORE
minimal(recordExp) = (* 3 *) UNDERSCORE EQUALS UNDERSCORE
minimal(recopt) = (* 0 *)
minimal(qualifiers) = (* 0 *)
minimal(qualifier) = (* 1 *) LOGIC
minimal(qpat) = (* 0 *)
minimal(qname) = (* 1 *) NAME
minimal(projectionLHS) = (* 1 *) IDENT
minimal(productDomain) = (* 1 *) UNDERSCORE
minimal(product) = (* 1 *) UNDERSCORE
minimal(pragma) = (* 1 *) PRAGMA_RESET_OPTIONS
minimal(plusOp) = (* 1 *) UNDERSCORE
minimal(patternListSemiColonRest) = (* 0 *)
minimal(patternListSemiColon) = (* 0 *)
minimal(patternListComma) = (* 0 *)
minimal(patternBranches) = (* 0 *)
minimal(patternBranch) = (* 4 *) BAR UNDERSCORE RARROW UNDERSCORE
minimal(pattern) = (* 1 *) UNDERSCORE
minimal(of_typ) = (* 0 *)
minimal(nonTvarPattern2) = (* 1 *) UNDERSCORE
minimal(nonTvarPattern) = (* 1 *) UNDERSCORE
minimal(noSeqTerm) = (* 1 *) UNDERSCORE
minimal(new_effect) = (* 3 *) NAME EQUALS UNDERSCORE
minimal(namepath) = (* 1 *) NAME
minimal(name) = (* 1 *) NAME
minimal(more_effect_decls) = (* 0 *)
minimal(moreSemiColonTerms) = (* 0 *)
minimal(morePats) = (* 0 *)
minimal(moreFieldPatterns) = (* 0 *)
minimal(moreCommaTerms) = (* 0 *)
minimal(moduleList) = (* 1 *) EOF
minimal(modul) = (* 2 *) MODULE NAME
minimal(minusOp) = (* 1 *) UNDERSCORE
minimal(maybe_pragma_light) = (* 0 *)
minimal(maybeWithSort) = (* 0 *)
minimal(maybeWhen) = (* 0 *)
minimal(maybeMorePath) = (* 0 *)
minimal(maybeInsts) = (* 0 *)
minimal(maybeHash) = (* 0 *)
minimal(maybeFocusArrow) = (* 1 *) RARROW
minimal(maybeFocus) = (* 0 *)
minimal(maybeFieldProjections) = (* 0 *)
minimal(maybeBar) = (* 0 *)
minimal(listPattern) = (* 1 *) UNDERSCORE
minimal(lid) = (* 1 *) IDENT
minimal(letbindings) = (* 0 *)
minimal(letbinding) = (* 3 *) UNDERSCORE EQUALS UNDERSCORE
minimal(label_opt) = (* 0 *)
minimal(kind_abbrev) = (* 4 *) KIND NAME EQUALS UNDERSCORE
minimal(kind) = (* 1 *) UNDERSCORE
minimal(inputFragment) = (* 1 *) EOF
minimal(idpath) = (* 1 *) IDENT
minimal(ident) = (* 1 *) IDENT
minimal(hashAtomicTerms) = (* 0 *)
minimal(hasSort) = (* 1 *) SUBTYPE
minimal(funArrow) = (* 1 *) RARROW
minimal(formula) = (* 1 *) UNDERSCORE
minimal(firstPatternBranch) = (* 3 *) UNDERSCORE RARROW UNDERSCORE
minimal(file) = (* 1 *) EOF
minimal(endopt) = (* 0 *)
minimal(eitherpath) = (* 1 *) IDENT
minimal(eitherQname) = (* 1 *) IDENT
minimal(eitherName) = (* 1 *) IDENT
minimal(effect_decl) = (* 3 *) IDENT EQUALS UNDERSCORE
minimal(dtupleTerm) = (* 1 *) UNDERSCORE
minimal(disjunctivePattern) = (* 1 *) UNDERSCORE
minimal(decls) = (* 0 *)
minimal(decl2) = (* 1 *) PRAGMA_RESET_OPTIONS
minimal(decl) = (* 1 *) PRAGMA_RESET_OPTIONS
minimal(constructors) = (* 0 *)
minimal(constructorDecl) = (* 2 *) BAR NAME
minimal(constant) = (* 1 *) LPAREN_RPAREN
minimal(consPattern) = (* 0 *)
minimal(comparisonOp) = (* 1 *) CUSTOM_OP
minimal(commaTermList) = (* 0 *)
minimal(cmpTerm) = (* 1 *) UNDERSCORE
minimal(binders) = (* 0 *)
minimal(binder) = (* 1 *) IDENT
minimal(atomicTerm) = (* 1 *) UNDERSCORE
minimal(atomicPatterns) = (* 0 *)
minimal(atomicPattern2) = (* 1 *) UNDERSCORE
minimal(atomicPattern) = (* 1 *) UNDERSCORE
minimal(assumeTag) = (* 1 *) ASSUME
minimal(ascriptionOrPattern) = (* 1 *) UNDERSCORE
minimal(ascribeTypOpt) = (* 0 *)
minimal(ascribeKindOpt) = (* 0 *)
minimal(arithTerm) = (* 1 *) UNDERSCORE
minimal(aqual_opt) = (* 0 *)
minimal(aqual) = (* 1 *) HASH
minimal(appTerm) = (* 1 *) UNDERSCORE
minimal(appPattern) = (* 1 *) UNDERSCORE
maximal(unaryTerm) = infinity
maximal(typars) = infinity
maximal(typ) = infinity
maximal(tyconDefn) = infinity
maximal(tyconDefinitions) = infinity
maximal(tyconDefinition) = infinity
maximal(tycon) = infinity
maximal(tvars) = infinity
maximal(tvarinsts) = infinity
maximal(tvar) = 1
maximal(tuplePattern) = infinity
maximal(tupleN) = infinity
maximal(tmTuple) = infinity
maximal(tmOr) = infinity
maximal(tmImplies) = infinity
maximal(tmIff) = infinity
maximal(tmEq) = infinity
maximal(tmDisjunction) = infinity
maximal(tmCons) = infinity
maximal(tmConjunction) = infinity
maximal(tmAnd) = infinity
maximal(term) = infinity
maximal(targs) = infinity
maximal(sub_effect) = infinity
maximal(starDivModTerm) = infinity
maximal(simpleTerm) = infinity
maximal(semiColonTermList) = infinity
maximal(refinementTerm) = infinity
maximal(refineOpt) = infinity
maximal(recordPattern) = infinity
maximal(recordFields) = infinity
maximal(recordFieldDecl) = infinity
maximal(recordFieldAssignments) = infinity
maximal(recordFieldAssignment) = infinity
maximal(recordExpRest) = infinity
maximal(recordExp) = infinity
maximal(recopt) = 2
maximal(qualifiers) = infinity
maximal(qualifier) = 1
maximal(qpat) = infinity
maximal(qname) = infinity
maximal(projectionLHS) = infinity
maximal(productDomain) = infinity
maximal(product) = infinity
maximal(pragma) = 2
maximal(plusOp) = infinity
maximal(patternListSemiColonRest) = infinity
maximal(patternListSemiColon) = infinity
maximal(patternListComma) = infinity
maximal(patternBranches) = infinity
maximal(patternBranch) = infinity
maximal(pattern) = infinity
maximal(of_typ) = infinity
maximal(nonTvarPattern2) = infinity
maximal(nonTvarPattern) = infinity
maximal(noSeqTerm) = infinity
maximal(new_effect) = infinity
maximal(namepath) = infinity
maximal(name) = 1
maximal(more_effect_decls) = infinity
maximal(moreSemiColonTerms) = infinity
maximal(morePats) = infinity
maximal(moreFieldPatterns) = infinity
maximal(moreCommaTerms) = infinity
maximal(moduleList) = infinity
maximal(modul) = infinity
maximal(minusOp) = infinity
maximal(maybe_pragma_light) = 2
maximal(maybeWithSort) = infinity
maximal(maybeWhen) = infinity
maximal(maybeMorePath) = infinity
maximal(maybeInsts) = infinity
maximal(maybeHash) = 1
maximal(maybeFocusArrow) = 1
maximal(maybeFocus) = 1
maximal(maybeFieldProjections) = infinity
maximal(maybeBar) = 1
maximal(listPattern) = infinity
maximal(lid) = infinity
maximal(letbindings) = infinity
maximal(letbinding) = infinity
maximal(label_opt) = 2
maximal(kind_abbrev) = infinity
maximal(kind) = infinity
maximal(inputFragment) = infinity
maximal(idpath) = infinity
maximal(ident) = 1
maximal(hashAtomicTerms) = infinity
maximal(hasSort) = 1
maximal(funArrow) = 1
maximal(formula) = infinity
maximal(firstPatternBranch) = infinity
maximal(file) = infinity
maximal(endopt) = 1
maximal(eitherpath) = infinity
maximal(eitherQname) = infinity
maximal(eitherName) = 1
maximal(effect_decl) = infinity
maximal(dtupleTerm) = infinity
maximal(disjunctivePattern) = infinity
maximal(decls) = infinity
maximal(decl2) = infinity
maximal(decl) = infinity
maximal(constructors) = infinity
maximal(constructorDecl) = infinity
maximal(constant) = 1
maximal(consPattern) = infinity
maximal(comparisonOp) = 1
maximal(commaTermList) = infinity
maximal(cmpTerm) = infinity
maximal(binders) = infinity
maximal(binder) = infinity
maximal(atomicTerm) = infinity
maximal(atomicPatterns) = infinity
maximal(atomicPattern2) = infinity
maximal(atomicPattern) = infinity
maximal(assumeTag) = 1
maximal(ascriptionOrPattern) = infinity
maximal(ascribeTypOpt) = infinity
maximal(ascribeKindOpt) = infinity
maximal(arithTerm) = infinity
maximal(aqual_opt) = 1
maximal(aqual) = 1
maximal(appTerm) = infinity
maximal(appPattern) = infinity
follow(unaryTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(typars) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND
follow(typ) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(tyconDefn) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND
follow(tyconDefinitions) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(tyconDefinition) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME AND
follow(tycon) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(tvars) = TYP_APP_GREATER
follow(tvarinsts) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND
follow(tvar) = WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(tuplePattern) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW EQUALS COLON BAR
follow(tupleN) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND
follow(tmTuple) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND
follow(tmOr) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND
follow(tmImplies) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IFF EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(tmIff) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(tmEq) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR ASSUME AND
follow(tmDisjunction) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT BAR_RBRACK BAR ASSUME AND
follow(tmCons) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP
follow(tmConjunction) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION BAR_RBRACK BAR ASSUME AND
follow(tmAnd) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EOF END ELSE EFFECT DISJUNCTION DEFAULT CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP
follow(term) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(targs) = TYP_APP_GREATER
follow(sub_effect) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(starDivModTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(simpleTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(semiColonTermList) = RBRACK BAR_RBRACK
follow(refinementTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(refineOpt) = RPAREN
follow(recordPattern) = RBRACE
follow(recordFields) = RBRACE
follow(recordFieldDecl) = SEMICOLON RBRACE
follow(recordFieldAssignments) = RBRACE
follow(recordFieldAssignment) = SEMICOLON RBRACE
follow(recordExpRest) = RBRACE
follow(recordExp) = RBRACE
follow(recopt) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
follow(qualifiers) = VAL TYPE NEW_EFFECT EFFECT
follow(qualifier) = VAL TYPE TOTAL PRIVATE OPAQUE NEW_EFFECT LOGIC EFFECT DEFAULT ASSUME
follow(qpat) = UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT
follow(qname) = WHEN VAL UNDERSCORE UINT8 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE KIND INT64 INT32 INT IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END EFFECT DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME
follow(projectionLHS) = WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(productDomain) = RARROW
follow(product) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP
follow(pragma) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(plusOp) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(patternListSemiColonRest) = RBRACK
follow(patternListSemiColon) = RBRACK
follow(patternListComma) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COLON BAR
follow(patternBranches) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(patternBranch) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(pattern) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW EQUALS COLON BAR
follow(of_typ) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND
follow(nonTvarPattern2) = WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR
follow(nonTvarPattern) = COLON
follow(noSeqTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(new_effect) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(namepath) = WHEN VAL UNDERSCORE UINT8 TYPE TVAR TRUE TOTAL SUB_EFFECT STRING SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT NAME MODULE LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE KIND INT64 INT32 INT IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END EFFECT DEFAULT COMMA COLON_COLON COLON CHAR BYTEARRAY BAR ASSUME
follow(name) = WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE OF NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(more_effect_decls) = RBRACE
follow(moreSemiColonTerms) = RBRACK BAR_RBRACK
follow(morePats) = RBRACE
follow(moreFieldPatterns) = RBRACE
follow(moreCommaTerms) = RBRACE
follow(moduleList) = #
follow(modul) = MODULE EOF
follow(minusOp) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(maybe_pragma_light) = MODULE EOF
follow(maybeWithSort) = RPAREN
follow(maybeWhen) = SQUIGGLY_RARROW RARROW
follow(maybeMorePath) = WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(maybeInsts) = WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(maybeHash) = UNDERSCORE UINT8 TVAR TRUE STRING PERCENT_LBRACK NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
follow(maybeFocusArrow) = UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT
follow(maybeFocus) = UNDERSCORE UINT8 TVAR TRUE STRING REC NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
follow(maybeFieldProjections) = WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(maybeBar) = UNDERSCORE UINT8 TVAR TRUE STRING NAME LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE CHAR BYTEARRAY
follow(listPattern) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR
follow(lid) = EQUALS
follow(letbindings) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(letbinding) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND IN EXCEPTION EOF END EFFECT DEFAULT ASSUME AND
follow(label_opt) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FORALL FALSE EXISTS EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
follow(kind_abbrev) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(kind) = WITH VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT ASSUME AND
follow(inputFragment) = #
follow(idpath) = EQUALS
follow(ident) = WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(hashAtomicTerms) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(hasSort) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FUN FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
follow(funArrow) = UNDERSCORE UINT8 TVAR TRY TRUE TILDE STRING REQUIRES PLUS_OP PERCENT_LBRACK NAME MINUS_OP MATCH LPAREN_RPAREN LPAREN LET LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IF IEEE64 IDENT HASH FUNCTION FUN FORALL FALSE EXISTS EQUALS ENSURES CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSUME ASSERT
follow(formula) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(firstPatternBranch) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LBRACE KIND IN EXCEPTION EOF END ELSE EFFECT DEFAULT BAR_RBRACK BAR ASSUME AND
follow(file) = #
follow(endopt) = MODULE EOF
follow(eitherpath) = WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(eitherQname) = WITH VAL UNDERSCORE UINT8 TYP_APP_LESS TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DOT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(eitherName) = VAL TYP_APP_LESS TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DEFAULT COLON ASSUME AND
follow(effect_decl) = SEMICOLON RBRACE
follow(dtupleTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP
follow(disjunctivePattern) = WHEN SQUIGGLY_RARROW RARROW
follow(decls) = MODULE EOF END
follow(decl2) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(decl) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT ASSUME
follow(constructors) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND
follow(constructorDecl) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EOF END EFFECT DEFAULT BAR ASSUME AND
follow(constant) = WITH WHEN VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(consPattern) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON BAR
follow(comparisonOp) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
follow(commaTermList) = RBRACE
follow(cmpTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP
follow(binders) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND
follow(binder) = VAL TYPE TVAR TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LPAREN LOGIC LET KIND IDENT EXCEPTION EQUALS EOF END EFFECT DOT DEFAULT COLON ASSUME AND
follow(atomicTerm) = WITH VAL UNDERSCORE UINT8 TYP_APP_GREATER TYPE TVAR TRUE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STRING STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP PERCENT_LBRACK OPEN OPAQUE NEW_EFFECT NAME MODULE MINUS_OP LPAREN_RPAREN LPAREN LOGIC LET LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE KIND INT64 INT32 INT IN IMPLIES IFF IEEE64 IDENT HASH FALSE EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON CHAR BYTEARRAY BEGIN BAR_RBRACK BAR_BAR BAR BANG_LBRACE BANG ASSUME ASSERT AND AMP_AMP AMP
follow(atomicPatterns) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR
follow(atomicPattern2) = WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR
follow(atomicPattern) = WHEN UNDERSCORE UINT8 TVAR TRUE STRING SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW NAME LPAREN_RPAREN LPAREN LENS_PAREN_RIGHT LENS_PAREN_LEFT LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT HASH FALSE EQUALS COMMA COLON_COLON COLON CHAR BYTEARRAY BAR
follow(assumeTag) = NAME
follow(ascriptionOrPattern) = RPAREN
follow(ascribeTypOpt) = EQUALS
follow(ascribeKindOpt) = VAL TYPE TOTAL SUB_EFFECT SEMICOLON_SEMICOLON PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET KIND EXCEPTION EQUALS EOF END EFFECT DEFAULT ASSUME AND
follow(arithTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS OPEN OPAQUE NEW_EFFECT MODULE LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(aqual_opt) = IDENT
follow(aqual) = UNDERSCORE UINT8 TVAR TRUE TILDE STRING PLUS_OP PERCENT_LBRACK NAME MINUS_OP LPAREN_RPAREN LPAREN LENS_PAREN_LEFT LBRACK_BAR LBRACK LBRACE INT64 INT32 INT IEEE64 IDENT FALSE CHAR BYTEARRAY BEGIN BANG_LBRACE BANG ASSERT
follow(appTerm) = WITH VAL TYPE TOTAL THEN SUB_EFFECT SUBTYPE SUBKIND STAR SQUIGGLY_RARROW SEMICOLON_SEMICOLON SEMICOLON RPAREN RBRACK RBRACE RARROW PRIVATE PRAGMA_SET_OPTIONS PRAGMA_RESET_OPTIONS PLUS_OP OPEN OPAQUE NEW_EFFECT MODULE MINUS_OP LOGIC LET LENS_PAREN_RIGHT LBRACE KIND IN IMPLIES IFF EXCEPTION EQUALS EOF END ELSE EFFECT DIV_MOD_OP DISJUNCTION DEFAULT CUSTOM_OP CONJUNCTION COMMA COLON_EQUALS COLON_COLON BAR_RBRACK BAR_BAR BAR ASSUME AND AMP_AMP AMP
follow(appPattern) = WHEN SQUIGGLY_RARROW SEMICOLON RPAREN RBRACK RBRACE RARROW LENS_PAREN_RIGHT EQUALS COMMA COLON_COLON COLON BAR
Built an LR(0) automaton with 484 states.
The grammar is not SLR(1) -- 10 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 484 states.
One shift/reduce conflict was silently solved.
Warning: 6 states have shift/reduce conflicts.
Warning: 6 shift/reduce conflicts were arbitrarily resolved.
205 out of 484 states have a default reduction.
188 out of 484 states are represented.
0 out of 279 symbols keep track of their start position.
0 out of 279 symbols keep track of their end position.
128 out of 277 productions exploit shiftreduce optimization.
0 out of 484 states can peek at an error.
1375 functions before inlining, 220 functions after inlining.
