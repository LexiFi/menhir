File "fstar.mly", line 78, characters 11-13:
Warning: the token AS is unused.
File "fstar.mly", line 84, characters 29-35:
Warning: the token ATSIGN is unused.
File "fstar.mly", line 85, characters 88-97:
Warning: the token BACKSLASH is unused.
File "fstar.mly", line 91, characters 24-33:
Warning: the token BAR_FOCUS is unused.
File "fstar.mly", line 73, characters 15-21:
Warning: the token BIGINT is unused.
File "fstar.mly", line 73, characters 22-28:
Warning: the token BIGNUM is unused.
File "fstar.mly", line 95, characters 7-14:
Warning: the token COMMENT is unused.
File "fstar.mly", line 72, characters 17-24:
Warning: the token DECIMAL is unused.
File "fstar.mly", line 76, characters 34-40:
Warning: the token DEFINE is unused.
File "fstar.mly", line 78, characters 36-43:
Warning: the token DOT_DOT is unused.
File "fstar.mly", line 85, characters 34-47:
Warning: the token EQUALS_EQUALS is unused.
File "fstar.mly", line 79, characters 46-53:
Warning: the token FINALLY is unused.
File "fstar.mly", line 79, characters 23-26:
Warning: the token FOR is unused.
File "fstar.mly", line 77, characters 19-22:
Warning: the token GEQ is unused.
File "fstar.mly", line 95, characters 55-64:
Warning: the token HASH_ELSE is unused.
File "fstar.mly", line 95, characters 65-75:
Warning: the token HASH_ENDIF is unused.
File "fstar.mly", line 95, characters 47-54:
Warning: the token HASH_IF is unused.
File "fstar.mly", line 95, characters 36-46:
Warning: the token HASH_LIGHT is unused.
File "fstar.mly", line 95, characters 26-35:
Warning: the token HASH_LINE is unused.
File "fstar.mly", line 84, characters 36-39:
Warning: the token HAT is unused.
File "fstar.mly", line 48, characters 16-26:
Warning: the token IDENT_LESS is unused.
File "fstar.mly", line 69, characters 16-22:
Warning: the token IEEE32 is unused.
File "fstar.mly", line 95, characters 76-88:
Warning: the token INACTIVECODE is unused.
File "fstar.mly", line 58, characters 22-27:
Warning: the token INT16 is unused.
File "fstar.mly", line 59, characters 28-41:
Warning: the token INT32_DOT_DOT is unused.
File "fstar.mly", line 57, characters 22-26:
Warning: the token INT8 is unused.
File "fstar.mly", line 80, characters 7-11:
Warning: the token LAZY is unused.
File "fstar.mly", line 77, characters 15-18:
Warning: the token LEQ is unused.
File "fstar.mly", line 77, characters 23-27:
Warning: the token LESS is unused.
File "fstar.mly", line 77, characters 66-77:
Warning: the token LESSGREATER is unused.
File "fstar.mly", line 77, characters 28-36:
Warning: the token LESSLESS is unused.
File "fstar.mly", line 94, characters 16-27:
Warning: the token LEX_FAILURE is unused.
File "fstar.mly", line 95, characters 89-101:
Warning: the token LINE_COMMENT is unused.
File "fstar.mly", line 75, characters 23-29:
Warning: the token LQUOTE is unused.
File "fstar.mly", line 87, characters 25-30:
Warning: the token MINUS is unused.
File "fstar.mly", line 68, characters 15-24:
Warning: the token NATIVEINT is unused.
File "fstar.mly", line 81, characters 12-14:
Warning: the token OR is unused.
File "fstar.mly", line 88, characters 43-52:
Warning: the token PIPE_LEFT is unused.
File "fstar.mly", line 88, characters 53-63:
Warning: the token PIPE_RIGHT is unused.
File "fstar.mly", line 90, characters 7-12:
Warning: the token PRINT is unused.
File "fstar.mly", line 88, characters 7-13:
Warning: the token PUBLIC is unused.
File "fstar.mly", line 76, characters 28-33:
Warning: the token QUERY is unused.
File "fstar.mly", line 82, characters 34-39:
Warning: the token QUOTE is unused.
File "fstar.mly", line 79, characters 54-62:
Warning: the token RESERVED is unused.
File "fstar.mly", line 75, characters 30-36:
Warning: the token RQUOTE is unused.
File "fstar.mly", line 95, characters 102-113:
Warning: the token STRING_TEXT is unused.
File "fstar.mly", line 81, characters 24-26:
Warning: the token TO is unused.
File "fstar.mly", line 64, characters 16-22:
Warning: the token UINT16 is unused.
File "fstar.mly", line 65, characters 16-22:
Warning: the token UINT32 is unused.
File "fstar.mly", line 66, characters 16-22:
Warning: the token UINT64 is unused.
File "fstar.mly", line 67, characters 16-26:
Warning: the token UNATIVEINT is unused.
File "fstar.mly", line 95, characters 15-25:
Warning: the token WHITESPACE is unused.
File "fstar.mly", line 982, characters 0-11:
Warning: symbol atomicTerms is unreachable from any of the start symbol(s).
File "fstar.mly", line 317, characters 0-16:
Warning: symbol compositePattern is unreachable from any of the start symbol(s).
File "fstar.mly", line 986, characters 0-8:
Warning: symbol consTerm is unreachable from any of the start symbol(s).
File "fstar.mly", line 248, characters 0-9:
Warning: symbol ident_opt is unreachable from any of the start symbol(s).
File "fstar.mly", line 864, characters 0-18:
Warning: symbol moreRecdFieldTypes is unreachable from any of the start symbol(s).
File "fstar.mly", line 868, characters 0-13:
Warning: symbol recdFieldType is unreachable from any of the start symbol(s).
File "fstar.mly", line 860, characters 0-14:
Warning: symbol recdFieldTypes is unreachable from any of the start symbol(s).
%{

(*
 Known (intentional) ambiguitites: 6 s/r conflicts in total; resolved by shifting
   3 s/r conflicts on BAR
      match  with | P -> match with | Q -> _ | R -> _
      function ...
      try e with | ...

   1 s/r conflict on SEMICOLON
       fun x -> e1 ; e2
	 is parsed as
		(fun x -> e1; e2)
	 rather than
		(fun x -> e1); e2

   1 s/r conflict on DOT
      A.B ^ .C

   1 s/r conflict on LBRACE

      Consider:
		  let f (x: y:int & z:vector y{z=z /\ y=0}) = 0

	  This is parsed as:
        let f (x: (y:int & z:vector y{z=z /\ y=0})) = 0
	  rather than:
	    let f (x: (y:int & z:vector y){z=z /\ y=0}) = 0

	  Analogous ambiguities with -> and * as well.
*)











%}
%start inputFragment
%token AMP
%token AMP_AMP
%token AND
%token AS
%token ASSERT
%token ASSUME
%token ATSIGN
%token BACKSLASH
%token BANG
%token BANG_LBRACE
%token BAR
%token BAR_BAR
%token BAR_FOCUS
%token BAR_RBRACK
%token BEGIN
%token <bytes> BIGINT
%token <bytes> BIGNUM
%token <bytes> BYTEARRAY
%token <char> CHAR
%token COLON
%token COLON_COLON
%token COLON_EQUALS
%token COMMA
%token COMMENT
%token CONJUNCTION
%token <string> CUSTOM_OP
%token <decimal> DECIMAL
%token DEFAULT
%token DEFINE
%token DISJUNCTION
%token <string> DIV_MOD_OP
%token DOLLAR
%token DOT
%token DOT_DOT
%token EFFECT
%token ELSE
%token END
%token ENSURES
%token EOF
%token EQUALS
%token EQUALS_EQUALS
%token EXCEPTION
%token EXISTS
%token FALSE
%token FINALLY
%token FOR
%token FORALL
%token FUN
%token FUNCTION
%token GEQ
%token HASH
%token HASH_ELSE
%token HASH_ENDIF
%token HASH_IF
%token HASH_LIGHT
%token HASH_LINE
%token HAT
%token <string> IDENT
%token <string> IDENT_LESS
%token <single> IEEE32
%token <double> IEEE64
%token IF
%token IFF
%token IMPLIES
%token IN
%token INACTIVECODE
%token <string * bool> INT
%token <int16 * bool> INT16
%token <int32 * bool> INT32
%token <int32 * bool> INT32_DOT_DOT
%token <int64 * bool> INT64
%token <sbyte * bool> INT8
%token KIND
%token LAZY
%token LBRACE
%token LBRACE_COLON_PATTERN
%token LBRACK
%token LBRACK_BAR
%token LENS_PAREN_LEFT
%token LENS_PAREN_RIGHT
%token LEQ
%token LESS
%token LESSGREATER
%token LESSLESS
%token <bool> LET
%token <string> LEX_FAILURE
%token LINE_COMMENT
%token LOGIC
%token LPAREN
%token LPAREN_RPAREN
%token <string * bool> LQUOTE
%token MATCH
%token MINUS
%token MINUS_OP
%token MODULE
%token <string> NAME
%token <int64> NATIVEINT
%token NEW_EFFECT
%token OF
%token OPAQUE
%token OPEN
%token OR
%token PERCENT_LBRACK
%token PIPE_LEFT
%token PIPE_RIGHT
%token PLUS_OP
%token PRAGMALIGHT
%token PRAGMA_RESET_OPTIONS
%token PRAGMA_SET_OPTIONS
%token PRINT
%token PRIVATE
%token PUBLIC
%token QUERY
%token QUOTE
%token RARROW
%token RBRACE
%token RBRACK
%token REC
%token REQUIRES
%token RESERVED
%token RPAREN
%token <string * bool> RQUOTE
%token SEMICOLON
%token SEMICOLON_SEMICOLON
%token SQUIGGLY_RARROW
%token STAR
%token <bytes> STRING
%token STRING_TEXT
%token SUBKIND
%token SUBTYPE
%token SUB_EFFECT
%token THEN
%token <string> TILDE
%token TO
%token TOTAL
%token TRUE
%token TRY
%token <string> TVAR
%token TYPE
%token TYP_APP_GREATER
%token TYP_APP_LESS
%token <uint16> UINT16
%token <uint32> UINT32
%token <uint64> UINT64
%token <byte> UINT8
%token <uint64> UNATIVEINT
%token UNDERSCORE
%token VAL
%token WHEN
%token WHITESPACE
%token WITH
%nonassoc THEN
%nonassoc ELSE
%type <inputFragment> inputFragment
%%

inputFragment:
  _1 = file
    {   ( Inl _1 )}
| _1 = decl _2 = decls _3 = EOF
    {   ( Inr (_1::_2) )}

file:
  _1 = maybe_pragma_light _2 = moduleList
    {      ( _2 )}

moduleList:
  _1 = modul _2 = moduleList
    {      ( _1::_2 )}
| _1 = EOF
    {      ( [] )}

modul:
  _1 = MODULE _2 = qname _3 = decls _4 = endopt
    {        ( Module(_2, _3) )}

endopt:
  _1 = END
    {         ()}
| 
    {         ()}

maybe_pragma_light:
  
    {        ()}
| _1 = PRAGMALIGHT _2 = STRING
    {        ()}

pragma:
  _1 = PRAGMA_SET_OPTIONS _2 = STRING
    { (
	   let s = string_of_bytes _2 in
	   if s = "--no_fs_typ_app"
	   then fs_typ_app := false;
	   SetOptions s
	)}
| _1 = PRAGMA_RESET_OPTIONS
    { ( ResetOptions )}

decls:
  
    {      ( [] )}
| _1 = SEMICOLON_SEMICOLON _2 = term
    {      ( [mk_decl (Main _2) (rhs2 parseState 1 2)] )}
| _1 = decl _2 = decls
    {      ( (_1::_2) )}

decl:
  _1 = decl2
    {          ( mk_decl _1 (rhs parseState 1) )}

decl2:
  _1 = OPEN _2 = qname
    {      ( Open _2 )}
| _1 = kind_abbrev
    {      ( _1 )}
| _1 = tycon
    {      ( _1 )}
| _1 = LET _2 = recopt _3 = letbinding _4 = letbindings
    {      (
		let r, focus = _2 in
		let lbs = focusLetBindings ((focus, _3)::_4) (rhs2 parseState 1 4) in
		ToplevelLet(r, lbs)
	  )}
| _1 = qualifiers _2 = VAL _3 = ident _4 = COLON _5 = typ
    {      ( Val(_1, _3, _5) )}
| _1 = assumeTag _2 = name _3 = COLON _4 = formula
    {      ( Assume(_1, _2, _4) )}
| _1 = EXCEPTION _2 = name _3 = of_typ
    {      ( Exception(_2, _3) )}
| _1 = qualifiers _2 = NEW_EFFECT _3 = new_effect
    {   ( NewEffect (_1, _3) )}
| _1 = SUB_EFFECT _2 = sub_effect
    {   ( SubEffect _2 )}
| _1 = pragma
    {   ( Pragma _1 )}

tycon:
  _1 = qualifiers _2 = TYPE _3 = tyconDefinition _4 = tyconDefinitions
    {      ( Tycon (_1, _3::_4) )}
| _1 = qualifiers _2 = EFFECT _3 = tyconDefinition
    {   ( Tycon(Effect::_1, [_3]) )}

kind_abbrev:
  _1 = KIND _2 = name _3 = binders _4 = EQUALS _5 = kind
    {      ( KindAbbrev(_2, _3, _5) )}

new_effect:
  _1 = name _2 = binders _3 = EQUALS _4 = simpleTerm
    {   (
		 RedefineEffect(_1, _2, _4)
	  )}
| _1 = LBRACE _2 = name _3 = binders _4 = COLON _5 = kind _6 = WITH _7 = effect_decl _8 = more_effect_decls _9 = RBRACE
    {      (
		 DefineEffect(_2, _3, _5, _7::_8)
	  )}

effect_decl:
  _1 = ident _2 = EQUALS _3 = simpleTerm
    { (
		mk_decl (Tycon ([], [TyconAbbrev(_1, [], None, _3)])) (rhs2 parseState 1 3)
	)}

more_effect_decls:
  
    {                    ( []     )}
| _1 = SEMICOLON _2 = effect_decl _3 = more_effect_decls
    {                                            ( _2::_3 )}

sub_effect:
  _1 = qname _2 = SQUIGGLY_RARROW _3 = qname _4 = EQUALS _5 = simpleTerm
    {      (
        {
          msource=_1;
          mdest=_3;
          lift_op=_5
        }
      )}

qualifier:
  _1 = LOGIC
    {                 ( Logic )}
| _1 = ASSUME
    {                 ( Assumption )}
| _1 = OPAQUE
    {                 ( Opaque )}
| _1 = DEFAULT
    {                 ( DefaultEffect None )}
| _1 = TOTAL
    {                 ( TotalEffect )}
| _1 = PRIVATE
    {                 ( Private )}

qualifiers:
  
    {                         ( [] )}
| _1 = qualifier _2 = qualifiers
    {                         ( _1::_2 )}

assumeTag:
  _1 = ASSUME
    {           ( [Assumption] )}

tyconDefinition:
  _1 = eitherName _2 = typars _3 = ascribeKindOpt _4 = tyconDefn
    {      ( _4 _1 _2 _3 )}

tyconDefinitions:
  
    {      ( [] )}
| _1 = AND _2 = tyconDefinition _3 = tyconDefinitions
    {      ( _2::_3 )}

maybeFocus:
  
    {     ( false )}
| _1 = SQUIGGLY_RARROW
    {                    ( true )}

recopt:
  _1 = maybeFocus _2 = REC
    {                        ( true, _1 )}
| 
    {                        ( false, false )}

letbindings:
  _1 = AND _2 = maybeFocus _3 = letbinding _4 = letbindings
    {      ( (_2, _3)::_4 )}
| 
    {      ( [] )}

letbinding:
  _1 = pattern _2 = ascribeTypOpt _3 = EQUALS _4 = term
    {      (
        match _2 with
          | None -> (_1, _4)
          | Some t -> (mk_pattern (PatAscribed(_1, t)) (rhs2 parseState 1 2), _4)
      )}

pattern:
  _1 = tuplePattern
    {                 ( _1 )}

tuplePattern:
  _1 = listPattern _2 = patternListComma
    {      (
        match _2 with
          | [] -> _1
          | _ -> mk_pattern (PatTuple(_1::_2, false)) (rhs2 parseState 1 2)
      )}

patternListComma:
  
    {      ( [] )}
| _1 = COMMA _2 = listPattern _3 = patternListComma
    {                                       ( _2::_3 )}

listPattern:
  _1 = appPattern _2 = consPattern
    {      (
        match _2 with
          | None -> _1
          | Some tl -> mk_pattern (consPat (rhs parseState 2) _1 tl) (rhs2 parseState 1 2)
      )}

consPattern:
  
    {     ( None )}
| _1 = COLON_COLON _2 = appPattern _3 = consPattern
    {      (
        match _3 with
          | None -> Some _2
          | Some tl -> Some (mk_pattern (consPat (rhs parseState 1) _2 tl) (rhs2 parseState 1 3))
      )}

appPattern:
  _1 = atomicPattern _2 = atomicPatterns
    {      (
        let hd = _1 in
        let r = rhs parseState 1 in
        match _2 with
          | [] -> hd
          | _ -> mk_pattern (PatApp(hd, _2)) (union_ranges r (rhs parseState 1))
      )}

atomicPatterns:
  
    {       ( [] )}
| _1 = atomicPattern _2 = atomicPatterns
    {                                 ( _1::_2 )}

atomicPattern:
  _1 = atomicPattern2
    {                   ( mk_pattern _1 (rhs parseState 1) )}

atomicPattern2:
  _1 = nonTvarPattern2
    {                    ( _1 )}
| _1 = tvar
    {          ( PatTvar (_1, false) )}

nonTvarPattern:
  _1 = nonTvarPattern2
    {                    ( mk_pattern _1 (rhs parseState 1) )}

nonTvarPattern2:
  _1 = UNDERSCORE
    {               ( PatWild )}
| _1 = constant
    {             ( PatConst _1 )}
| _1 = HASH _2 = ident
    {               ( PatVar(_2, true) )}
| _1 = ident
    {          ( PatVar(_1, false) )}
| _1 = qname
    {          ( PatName _1 )}
| _1 = LBRACK _2 = patternListSemiColon _3 = RBRACK
    {                                       ( PatList _2 )}
| _1 = LPAREN _2 = ascriptionOrPattern _3 = RPAREN
    {                                      ( _2 )}
| _1 = LBRACE _2 = recordPattern _3 = RBRACE
    {                                ( PatRecord _2 )}
| _1 = LENS_PAREN_LEFT _2 = listPattern _3 = COMMA _4 = listPattern _5 = patternListComma _6 = LENS_PAREN_RIGHT
    {      (
        let args = _2::_4::_5 in
        PatTuple(args, true)
      )}

ascriptionOrPattern:
  _1 = nonTvarPattern _2 = COLON _3 = typ _4 = refineOpt
    {      (
		match _4 with
		  | None -> PatAscribed(_1, _3)
			  | Some phi ->
				let t = match _1.pat with
				  | PatVar(x, _) ->
					mk_term (Refine(mk_binder (Annotated(x, _3)) (rhs2 parseState 1 3) Type None, phi)) (rhs2 parseState 1 4) Type
				  | _ -> errorR(Error("Not a valid refinement type", lhs(parseState))); _3 in
				PatAscribed(_1, t)
      )}
| _1 = pattern
    {                            ( _1.pat )}

patternListSemiColon:
  
    {      ( [] )}
| _1 = appPattern _2 = patternListSemiColonRest
    {                                        ( _1::_2 )}

patternListSemiColonRest:
  
    {     ( [] )}
| _1 = SEMICOLON _2 = appPattern _3 = patternListSemiColonRest
    {                                                  ( _2::_3 )}

recordPattern:
  _1 = lid _2 = EQUALS _3 = pattern _4 = moreFieldPatterns
    {                                         ( (_1,_3)::_4 )}

moreFieldPatterns:
  
    {    ( [] )}
| _1 = SEMICOLON _2 = lid _3 = EQUALS _4 = pattern _5 = moreFieldPatterns
    {                                                   ( (_2,_4)::_5 )}

binder:
  _1 = ident
    {          ( mk_binder (Variable(_1)) (rhs parseState 1) Type None  )}
| _1 = tvar
    {          ( mk_binder (TVariable(_1)) (rhs parseState 1) Kind None  )}
| _1 = LPAREN _2 = aqual_opt _3 = ident _4 = COLON _5 = typ _6 = refineOpt _7 = RPAREN
    {  ( mkRefinedBinder _3 _5 _6 (rhs2 parseState 1 7) _2 )}

typars:
  _1 = tvarinsts
    {                           ( _1 )}
| _1 = binders
    {                           ( _1 )}

tvarinsts:
  _1 = TYP_APP_LESS _2 = tvars _3 = TYP_APP_GREATER
    {                                          ( List.map (fun tv -> mk_binder (TVariable(tv)) tv.idRange Kind None) _2 )}

aqual_opt:
  _1 = HASH
    {           ( Some Implicit )}
| _1 = EQUALS
    {           ( Some Equality )}
| 
    {           ( None )}

binders:
  _1 = binder _2 = binders
    {                   ( _1::_2 )}
| 
    {                   ( []     )}

tyconDefn:
  
    {                  ( (fun id binders kopt -> TyconAbstract(id, binders, kopt)) )}
| _1 = EQUALS _2 = typ
    {                  ( (fun id binders kopt -> TyconAbbrev(id, binders, kopt, _2)) )}
| _1 = EQUALS _2 = LBRACE _3 = recordFieldDecl _4 = recordFields _5 = RBRACE
    {                                                      ( (fun id binders kopt -> TyconRecord(id, binders, kopt, _3::_4)) )}
| _1 = EQUALS _2 = constructors
    {                        ( (fun id binders kopt -> TyconVariant(id, binders, kopt, _2)) )}

recordFields:
  _1 = SEMICOLON _2 = recordFieldDecl _3 = recordFields
    {      ( _2::_3 )}
| _1 = SEMICOLON
    {              ( [] )}
| 
    {      ( [] )}

constructors:
  
    {      ( [] )}
| _1 = constructors _2 = constructorDecl
    {      ( _1@[_2] )}

recordFieldDecl:
  _1 = ident _2 = COLON _3 = tmTuple
    {      ( (_1, _3) )}

constructorDecl:
  _1 = BAR _2 = name _3 = COLON _4 = typ
    {      ( (_2,Some _4,false) )}
| _1 = BAR _2 = name _3 = of_typ
    {      ( (_2,_3,true) )}

of_typ:
  
    {           (  None )}
| _1 = OF _2 = typ
    {           ( Some _2 )}

eitherQname:
  _1 = eitherpath
    {               ( lid_of_ids _1 )}

eitherpath:
  _1 = ident
    {          ( [_1] )}
| _1 = name _2 = maybeMorePath
    {                       ( _1::_2 )}

maybeMorePath:
  
    {       ( [] )}
| _1 = DOT _2 = eitherpath
    {                    ( _2 )}

lid:
  _1 = idpath
    {           ( lid_of_ids _1 )}

qname:
  _1 = namepath
    {             ( lid_of_ids _1 )}

eitherName:
  _1 = ident
    {          ( _1 )}
| _1 = name
    {          ( _1 )}

ident:
  _1 = IDENT
    {      ( mk_ident(_1, rhs parseState 1))}

name:
  _1 = NAME
    {      ( mk_ident(_1, rhs parseState 1) )}

tvars:
  _1 = TVAR
    {                        ( [mk_ident(_1, rhs parseState 1)] )}
| _1 = TVAR _2 = COMMA _3 = tvars
    {                        ( mk_ident(_1, rhs parseState 1) ::_3 )}

tvar:
  _1 = TVAR
    {      ( mk_ident(_1, rhs parseState 1) )}

namepath:
  _1 = name
    {      ( [_1] )}
| _1 = name _2 = DOT _3 = namepath
    {      ( _1::_3 )}

idpath:
  _1 = ident
    {      ( [_1] )}
| _1 = name _2 = DOT _3 = idpath
    {      ( _1::_3 )}

ascribeTypOpt:
  
    {                 ( None )}
| _1 = COLON _2 = product
    {                  ( Some _2 )}

ascribeKindOpt:
  
    {                  ( None )}
| _1 = COLON _2 = kind
    {                ( Some _2 )}

kind:
  _1 = product
    {            ( {_1 with level=Kind} )}

typ:
  _1 = simpleTerm
    {                ( _1 )}
| _1 = FORALL _2 = binders _3 = DOT _4 = qpat _5 = noSeqTerm
    {      (
        mk_term (QForall(_2,_4,_5)) (rhs2 parseState 1 5) Formula
      )}
| _1 = EXISTS _2 = binders _3 = DOT _4 = qpat _5 = noSeqTerm
    {      (
        mk_term (QExists(_2,_4,_5)) (rhs2 parseState 1 5) Formula
      )}

term:
  _1 = noSeqTerm
    {      ( _1 )}
| _1 = noSeqTerm _2 = SEMICOLON _3 = term
    {      ( mk_term (Seq(_1, _3)) (rhs2 parseState 1 3) Expr )}

noSeqTerm:
  _1 = typ
    {         ( _1 )}
| _1 = REQUIRES _2 = label_opt _3 = typ
    {     (
        let pos = rhs2 parseState 1 4 in
        let f = _3 in
        mk_term (Requires(f, _2)) pos Type
     )}
| _1 = ENSURES _2 = label_opt _3 = typ
    {     (
        let pos = rhs2 parseState 1 4 in
        let f = _3 in
        mk_term (Ensures(f, _2)) pos Type
     )}
| _1 = IF _2 = noSeqTerm _3 = THEN _4 = noSeqTerm _5 = ELSE _6 = noSeqTerm
    {      (
        mk_term (If(_2, _4, _6)) (rhs2 parseState 1 6) Expr
      )}
| _1 = IF _2 = noSeqTerm _3 = THEN _4 = noSeqTerm
    {      (
	    let e = mk_term (Const Const_unit) (rhs2 parseState 4 4) Expr in
        mk_term (If(_2, _4, e)) (rhs2 parseState 1 4) Expr
      )}
| _1 = TRY _2 = term _3 = WITH _4 = firstPatternBranch _5 = patternBranches
    {      (
		 let branches = focusBranches (_4::_5) (rhs2 parseState 1 5) in
         mk_term (TryWith(_2, branches)) (rhs2 parseState 1 5) Expr
      )}
| _1 = MATCH _2 = term _3 = WITH _4 = firstPatternBranch _5 = patternBranches
    {      (
		let branches = focusBranches (_4::_5) (rhs2 parseState 1 5) in
	    mk_term (Match(_2, branches)) (rhs2 parseState 1 5) Expr
      )}
| _1 = LET _2 = recopt _3 = letbinding _4 = letbindings _5 = IN _6 = term
    {      (
		let r, focus = _2 in
		let lbs = focusLetBindings ((focus,_3)::_4) (rhs2 parseState 2 4) in
        mk_term (Let(r, lbs, _6)) (rhs2 parseState 1 6) Expr
      )}
| _1 = FUNCTION _2 = firstPatternBranch _3 = patternBranches
    {      (
	    let branches = focusBranches (_2::_3) (rhs2 parseState 1 3) in
        mk_function branches (lhs parseState) (rhs2 parseState 1 3)
      )}
| _1 = ASSUME _2 = atomicTerm
    {      ( mkExplicitApp (mk_term (Var assume_lid) (rhs parseState 1) Expr) [_2]
          (rhs2 parseState 1 2)
      )}

label_opt:
  
    {                           ( None )}
| _1 = DOLLAR _2 = STRING
    {                           ( Some (string_of_bytes _2) )}

qpat:
  
    {      ( [] )}
| _1 = LBRACE_COLON_PATTERN _2 = appTerm _3 = morePats _4 = RBRACE
    {      ( _2::_3 )}

morePats:
  
    {     ( [] )}
| _1 = SEMICOLON _2 = appTerm _3 = morePats
    {                                ( _2::_3 )}

simpleTerm:
  _1 = tmIff
    {          ( _1 )}
| _1 = FUN _2 = atomicPattern _3 = atomicPatterns _4 = funArrow _5 = term
    {      (
        _4 (Abs(_2::_3, _5)) (rhs2 parseState 1 5)
      )}

patternBranches:
  
    {      ( [] )}
| _1 = patternBranches _2 = patternBranch
    {      ( _1@[_2] )}

maybeBar:
  
    {        (())}
| _1 = BAR
    {        (())}

maybeFocusArrow:
  _1 = RARROW
    {                    ( false )}
| _1 = SQUIGGLY_RARROW
    {                    ( true )}

firstPatternBranch:
  _1 = maybeBar _2 = disjunctivePattern _3 = maybeWhen _4 = maybeFocusArrow _5 = term
    {      (
        let pat = match _2 with
          | [p] -> p
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        (_4, (pat, _3, _5))
      )}

patternBranch:
  _1 = BAR _2 = disjunctivePattern _3 = maybeWhen _4 = maybeFocusArrow _5 = term
    {      (
        let pat = match _2 with
          | [p] -> p
          | ps -> mk_pattern (PatOr ps) (rhs2 parseState 1 2) in
        (_4, (pat, _3, _5))
      )}

disjunctivePattern:
  _1 = pattern
    {                ( [_1] )}
| _1 = pattern _2 = BAR _3 = disjunctivePattern
    {                                   ( _1::_3 )}

maybeWhen:
  
    {                ( None )}
| _1 = WHEN _2 = appTerm
    {                 ( Some _2 )}

funArrow:
  _1 = RARROW
    {           ( fun t r -> mk_term t r Un )}

tmIff:
  _1 = tmImplies _2 = IFF _3 = tmIff
    {      (
        mk_term (Op("<==>", [_1; _3])) (rhs2 parseState 1 3) Formula
      )}
| _1 = tmImplies
    {      ( _1 )}

tmImplies:
  _1 = tmDisjunction _2 = IMPLIES _3 = tmImplies
    {      (
        mk_term (Op("==>", [_1; _3])) (rhs2 parseState 1 3) Formula
      )}
| _1 = tmDisjunction
    {      ( _1 )}

tmDisjunction:
  _1 = tmDisjunction _2 = DISJUNCTION _3 = tmConjunction
    {      ( mk_term (Op("\\/", [_1;_3])) (rhs2 parseState 1 3) Formula )}
| _1 = tmConjunction
    {      ( _1 )}

tmConjunction:
  _1 = tmConjunction _2 = CONJUNCTION _3 = tmTuple
    {      ( mk_term (Op("/\\", [_1;_3])) (rhs2 parseState 1 3) Formula )}
| _1 = tmTuple
    {      ( _1 )}

tmTuple:
  _1 = tupleN
    {      (
        match _1 with
          | [x] -> x
          | components -> mkTuple components (rhs2 parseState 1 1)
      )}

tmEq:
  _1 = tmEq _2 = COLON_EQUALS _3 = tmOr
    {      (
        mk_term (Op(":=", [_1; _3])) (rhs2 parseState 1 3) Un
      )}
| _1 = tmOr
    {      ( _1 )}

tmOr:
  _1 = tmOr _2 = BAR_BAR _3 = tmAnd
    {      ( mk_term (Op("||", [_1; _3])) (rhs2 parseState 1 3) Un)}
| _1 = tmAnd
    {      ( _1 )}

tmAnd:
  _1 = tmAnd _2 = AMP_AMP _3 = cmpTerm
    {      ( mk_term (Op("&&", [_1;_3])) (rhs2 parseState 1 3) Un)}
| _1 = cmpTerm
    {      ( _1 )}

cmpTerm:
  _1 = cmpTerm _2 = comparisonOp _3 = tmCons
    {      ( mk_term (Op(_2, [_1;_3])) (rhs2 parseState 1 3) Expr )}
| _1 = tmCons
    {      ( _1 )}

comparisonOp:
  _1 = CUSTOM_OP
    {              ( _1 )}
| _1 = EQUALS
    {              ( "=" )}

tmCons:
  _1 = product _2 = COLON_COLON _3 = tmCons
    {      ( consTerm (rhs parseState 2) _1 _3 )}
| _1 = product
    {      ( _1 )}

product:
  _1 = productDomain _2 = RARROW _3 = product
    {  (
		let aq, tm = _1 in
		let b = match extract_named_refinement tm with
			| None -> mk_binder (NoName tm) (rhs parseState 1) Un aq
			| Some (x, t, f) -> mkRefinedBinder x t f (rhs2 parseState 1 1) aq in
        mk_term (Product([b], _3)) (rhs2 parseState 1 3)  Un

	 )}
| _1 = dtupleTerm
    {   ( _1 )}

productDomain:
  _1 = aqual _2 = dtupleTerm
    {                     ( (Some _1, _2) )}
| _1 = dtupleTerm
    {                    ( (None, _1)    )}

dtupleTerm:
  _1 = arithTerm _2 = AMP _3 = dtupleTerm
    {      (
		let x, t, f = match extract_named_refinement _1 with
			| Some (x, t, f) -> x, t, f
			| _ -> raise (Error("Missing binder for the first component of a dependent tuple", rhs2 parseState 1 2)) in
	    let dom = mkRefinedBinder x t f (rhs2 parseState 1 2) None in
		let tail = _3 in
		let dom, res = match tail.tm with
			| Sum(dom', res) -> dom::dom', res
			| _ -> [dom], tail in
	    mk_term (Sum(dom, res)) (rhs2 parseState 1 6) Type
	  )}
| _1 = arithTerm
    {  ( _1 )}

arithTerm:
  _1 = plusOp
    {   ( _1 )}

plusOp:
  _1 = minusOp _2 = PLUS_OP _3 = plusOp
    {      ( mk_term (Op("+", [_1;_3])) (rhs2 parseState 1 3) Un)}
| _1 = minusOp
    {   ( _1 )}

minusOp:
  _1 = minusOp _2 = MINUS_OP _3 = starDivModTerm
    {      ( mk_term (Op("-", [_1;_3])) (rhs2 parseState 1 3) Un)}
| _1 = starDivModTerm
    {      ( _1 )}

starDivModTerm:
  _1 = refinementTerm _2 = STAR _3 = starDivModTerm
    {      (
        mk_term (Op("*", [_1;_3])) (rhs2 parseState 1 3) Un
      )}
| _1 = unaryTerm _2 = DIV_MOD_OP _3 = starDivModTerm
    {      ( mk_term (Op(_2, [_1;_3])) (rhs2 parseState 1 3) Un)}
| _1 = refinementTerm
    {      (
        _1
      )}

refinementTerm:
  _1 = ident _2 = COLON _3 = appTerm
    {      (
        mk_term (NamedTyp(_1, _3)) (rhs2 parseState 1 3) Type
      )}
| _1 = ident _2 = COLON _3 = appTerm _4 = LBRACE _5 = formula _6 = RBRACE
    {      (
        mk_term (Refine(mk_binder (Annotated(_1, _3)) (rhs2 parseState 1 3) Type None, _5))
        (rhs2 parseState 1 6) Type
      )}
| _1 = LBRACE _2 = recordExp _3 = RBRACE
    {                            ( _2 )}
| _1 = unaryTerm
    {              ( _1 )}

aqual:
  _1 = HASH
    {              ( Implicit )}
| _1 = EQUALS
    {              ( Equality )}

refineOpt:
  
    {                          ( None )}
| _1 = LBRACE _2 = formula _3 = RBRACE
    {                          ( Some _2 )}

unaryTerm:
  _1 = PLUS_OP _2 = atomicTerm
    {      ( mk_term (Op("+", [_2])) (rhs2 parseState 1 3) Expr )}
| _1 = MINUS_OP _2 = atomicTerm
    {      ( mk_term (Op("-", [_2])) (rhs2 parseState 1 3) Expr )}
| _1 = TILDE _2 = atomicTerm
    {      ( mk_term (Op(_1, [_2])) (rhs2 parseState 1 3) Formula )}
| _1 = appTerm
    {            ( _1 )}

appTerm:
  _1 = atomicTerm _2 = hashAtomicTerms
    {      (
        mkApp _1 _2 (rhs2 parseState 1 2)
      )}

formula:
  _1 = noSeqTerm
    {      ( {_1 with level=Formula} )}

atomicTerm:
  _1 = UNDERSCORE
    {               ( mk_term Wild (rhs parseState 1) Un )}
| _1 = ASSERT
    {             ( mk_term (Var assert_lid) (rhs parseState 1) Expr )}
| _1 = tvar
    {             ( mk_term (Tvar(_1)) (rhs parseState 1) Type )}
| _1 = constant
    {             ( mk_term (Const _1) (rhs parseState 1) Expr )}
| _1 = LENS_PAREN_LEFT _2 = tupleN _3 = LENS_PAREN_RIGHT
    {      (
        match _2 with
          | [x] -> x
          | components -> mkDTuple components (rhs2 parseState 1 1)
      )}
| _1 = projectionLHS _2 = maybeFieldProjections
    {      (
        List.fold_left (fun e f ->
                          mk_term (Project(e, lid_of_ids [f])) (rhs2 parseState 1 3) Expr )
          _1 _2
      )}
| _1 = BANG _2 = atomicTerm
    {      ( mk_term (Op("!", [_2])) (rhs2 parseState 1 2) Expr )}
| _1 = BEGIN _2 = term _3 = END
    {      ( _2 )}

maybeFieldProjections:
  
    {       ( [] )}
| _1 = maybeFieldProjections _2 = DOT _3 = ident
    {      ( _1@[_3] )}

targs:
  _1 = atomicTerm
    {               ( [_1] )}
| _1 = atomicTerm _2 = COMMA _3 = targs
    {                           ( _1::_3 )}

maybeInsts:
  
    {       ( (fun x -> x) )}
| _1 = TYP_APP_LESS _2 = targs _3 = TYP_APP_GREATER
    {      (
        (fun (x:term) -> mkFsTypApp x _2
          (union_ranges x.range (rhs2 parseState 1 3)))
      )}

projectionLHS:
  _1 = eitherQname _2 = maybeInsts
    {      (
        let t = if is_name _1 then Name _1 else Var _1 in
        _2 (mk_term t (rhs parseState 1) Un)
      )}
| _1 = LPAREN _2 = term _3 = maybeWithSort _4 = RPAREN
    {      ( mk_term (Paren(_3 _2 (rhs2 parseState 2 3))) (rhs2 parseState 1 4) (_2.level) )}
| _1 = LBRACK_BAR _2 = semiColonTermList _3 = BAR_RBRACK
    {      (
        let l = mkConsList (rhs2 parseState 1 3) _2 in
        mkExplicitApp (mk_term (Var (array_mk_array_lid)) (rhs2 parseState 1 3) Expr)
              [l] (rhs2 parseState 1 3)
      )}
| _1 = LBRACK _2 = semiColonTermList _3 = RBRACK
    {      (
        mkConsList (rhs2 parseState 1 3) _2
      )}
| _1 = PERCENT_LBRACK _2 = semiColonTermList _3 = RBRACK
    {   (
		mkLexList (rhs2 parseState 1 3) _2
	  )}
| _1 = BANG_LBRACE _2 = commaTermList _3 = RBRACE
    {   (
		mkRefSet (rhs2 parseState 1 3) _2
	  )}

commaTermList:
  
    {     ( [] )}
| _1 = appTerm _2 = moreCommaTerms
    {      ( _1::_2 )}

moreCommaTerms:
  
    {      ( [] )}
| _1 = COMMA _2 = appTerm _3 = moreCommaTerms
    {      ( _2::_3 )}

semiColonTermList:
  
    {     ( [] )}
| _1 = noSeqTerm _2 = moreSemiColonTerms
    {      ( _1::_2 )}

moreSemiColonTerms:
  
    {      ( [] )}
| _1 = SEMICOLON
    {              ( [] )}
| _1 = SEMICOLON _2 = noSeqTerm _3 = moreSemiColonTerms
    {      ( _2::_3 )}

recordExp:
  _1 = appTerm _2 = recordExpRest
    {      ( _2 _1 (lhs parseState) )}

recordExpRest:
  _1 = WITH _2 = recordFieldAssignment _3 = recordFieldAssignments
    {      (
        (fun e r -> mk_term (Record(Some e, _2::_3)) (union_ranges r (rhs2 parseState 1 3)) Expr)
      )}
| _1 = EQUALS _2 = simpleTerm _3 = recordFieldAssignments
    {      (
        (fun e r -> match e.tm with
          | Var l -> mk_term (Record(None, (l,_2)::_3)) (union_ranges r (rhs2 parseState 1 3)) Expr
          | _ -> errorR(Error("Record field names must be constant identifiers", lhs(parseState)));
            mk_term (Record(None, _3)) (rhs2 parseState 1 3) Expr)
      )}

recordFieldAssignment:
  _1 = lid _2 = EQUALS _3 = simpleTerm
    {      ( (_1,_3) )}

recordFieldAssignments:
  
    {              ( [] )}
| _1 = SEMICOLON
    {              ( [] )}
| _1 = SEMICOLON _2 = recordFieldAssignment _3 = recordFieldAssignments
    {     ( _2::_3 )}

maybeWithSort:
  
    {        ( fun x r -> x )}
| _1 = hasSort _2 = simpleTerm
    {        ( fun x r -> mk_term (Ascribed(x,{_2 with level=_1})) (union_ranges r (rhs2 parseState 1 2)) _1 )}

hasSort:
  _1 = SUBTYPE
    {            ( Expr )}
| _1 = SUBKIND
    {            ( Type )}

maybeHash:
  
    {         ( Nothing )}
| _1 = HASH
    {         ( Hash )}

hashAtomicTerms:
  
    {           ( [] )}
| _1 = maybeHash _2 = atomicTerm _3 = hashAtomicTerms
    {                                         ( (_2, _1)::_3 )}

tupleN:
  _1 = tmEq
    {                               ( [_1] )}
| _1 = tmEq _2 = COMMA _3 = tupleN
    {                            ( _1::_3 )}

constant:
  _1 = LPAREN_RPAREN
    {                  ( Const_unit )}
| _1 = INT
    {  (
	    if snd _1 then
          errorR(Error("This number is outside the allowable range for representable integer constants", lhs(parseState)));
        Const_int (fst _1)
	 )}
| _1 = INT32
    {      (
        if snd _1 then
          errorR(Error("This number is outside the allowable range for 32-bit signed integers", lhs(parseState)));
        Const_int32 (fst _1)
      )}
| _1 = UINT8
    {          ( Const_uint8 _1 )}
| _1 = CHAR
    {         ( Const_char _1 )}
| _1 = STRING
    {           ( Const_string (_1,lhs(parseState)) )}
| _1 = BYTEARRAY
    {              ( Const_bytearray (_1,lhs(parseState)) )}
| _1 = TRUE
    {         ( Const_bool true )}
| _1 = FALSE
    {          ( Const_bool false )}
| _1 = IEEE64
    {           ( Const_float _1 )}
| _1 = INT64
    {      (
        if snd _1 then
          errorR(Error("This number is outside the allowable range for 64-bit signed integers", lhs(parseState)));
        Const_int64 (fst _1)
      )}

%%
