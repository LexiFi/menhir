State 0:
spec' -> . spec [ # ]
-- On HEADER shift to state 1
-- On spec shift to state 2
-- On headeropt shift to state 3
-- On TYPE reduce production headeropt -> 
-- On TOKEN reduce production headeropt -> 
-- On START reduce production headeropt -> 
-- On RIGHT reduce production headeropt -> 
-- On PERCENT_PERCENT reduce production headeropt -> 
-- On NONASSOC reduce production headeropt -> 
-- On LEFT reduce production headeropt -> 

State 1:
headeropt -> HEADER . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production headeropt -> HEADER 
-- On TOKEN reduce production headeropt -> HEADER 
-- On START reduce production headeropt -> HEADER 
-- On RIGHT reduce production headeropt -> HEADER 
-- On PERCENT_PERCENT reduce production headeropt -> HEADER 
-- On NONASSOC reduce production headeropt -> HEADER 
-- On LEFT reduce production headeropt -> HEADER 

State 2:
spec' -> spec . [ # ]
-- On # accept spec

State 3:
spec -> headeropt . decls PERCENT_PERCENT rules [ # ]
-- On TYPE shift to state 4
-- On TOKEN shift to state 8
-- On START shift to state 10
-- On RIGHT shift to state 12
-- On NONASSOC shift to state 14
-- On LEFT shift to state 16
-- On decls shift to state 18
-- On decl shift to state 42
-- On PERCENT_PERCENT reduce production decls -> 

State 4:
decl -> TYPE . idents [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On IDENT shift to state 5
-- On idents shift to state 7
-- On TYPE reduce production idents -> 
-- On TOKEN reduce production idents -> 
-- On START reduce production idents -> 
-- On RIGHT reduce production idents -> 
-- On PERCENT_PERCENT reduce production idents -> 
-- On NONASSOC reduce production idents -> 
-- On LEFT reduce production idents -> 

State 5:
idents -> IDENT . idents [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On IDENT shift to state 5
-- On idents shift to state 6
-- On TYPE reduce production idents -> 
-- On TOKEN reduce production idents -> 
-- On START reduce production idents -> 
-- On RIGHT reduce production idents -> 
-- On PERCENT_PERCENT reduce production idents -> 
-- On NONASSOC reduce production idents -> 
-- On LEFT reduce production idents -> 

State 6:
idents -> IDENT idents . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production idents -> IDENT idents 
-- On TOKEN reduce production idents -> IDENT idents 
-- On START reduce production idents -> IDENT idents 
-- On RIGHT reduce production idents -> IDENT idents 
-- On PERCENT_PERCENT reduce production idents -> IDENT idents 
-- On NONASSOC reduce production idents -> IDENT idents 
-- On LEFT reduce production idents -> IDENT idents 

State 7:
decl -> TYPE idents . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production decl -> TYPE idents 
-- On TOKEN reduce production decl -> TYPE idents 
-- On START reduce production decl -> TYPE idents 
-- On RIGHT reduce production decl -> TYPE idents 
-- On PERCENT_PERCENT reduce production decl -> TYPE idents 
-- On NONASSOC reduce production decl -> TYPE idents 
-- On LEFT reduce production decl -> TYPE idents 

State 8:
decl -> TOKEN . idents [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On IDENT shift to state 5
-- On idents shift to state 9
-- On TYPE reduce production idents -> 
-- On TOKEN reduce production idents -> 
-- On START reduce production idents -> 
-- On RIGHT reduce production idents -> 
-- On PERCENT_PERCENT reduce production idents -> 
-- On NONASSOC reduce production idents -> 
-- On LEFT reduce production idents -> 

State 9:
decl -> TOKEN idents . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production decl -> TOKEN idents 
-- On TOKEN reduce production decl -> TOKEN idents 
-- On START reduce production decl -> TOKEN idents 
-- On RIGHT reduce production decl -> TOKEN idents 
-- On PERCENT_PERCENT reduce production decl -> TOKEN idents 
-- On NONASSOC reduce production decl -> TOKEN idents 
-- On LEFT reduce production decl -> TOKEN idents 

State 10:
decl -> START . idents [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On IDENT shift to state 5
-- On idents shift to state 11
-- On TYPE reduce production idents -> 
-- On TOKEN reduce production idents -> 
-- On START reduce production idents -> 
-- On RIGHT reduce production idents -> 
-- On PERCENT_PERCENT reduce production idents -> 
-- On NONASSOC reduce production idents -> 
-- On LEFT reduce production idents -> 

State 11:
decl -> START idents . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production decl -> START idents 
-- On TOKEN reduce production decl -> START idents 
-- On START reduce production decl -> START idents 
-- On RIGHT reduce production decl -> START idents 
-- On PERCENT_PERCENT reduce production decl -> START idents 
-- On NONASSOC reduce production decl -> START idents 
-- On LEFT reduce production decl -> START idents 

State 12:
decl -> RIGHT . idents [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On IDENT shift to state 5
-- On idents shift to state 13
-- On TYPE reduce production idents -> 
-- On TOKEN reduce production idents -> 
-- On START reduce production idents -> 
-- On RIGHT reduce production idents -> 
-- On PERCENT_PERCENT reduce production idents -> 
-- On NONASSOC reduce production idents -> 
-- On LEFT reduce production idents -> 

State 13:
decl -> RIGHT idents . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production decl -> RIGHT idents 
-- On TOKEN reduce production decl -> RIGHT idents 
-- On START reduce production decl -> RIGHT idents 
-- On RIGHT reduce production decl -> RIGHT idents 
-- On PERCENT_PERCENT reduce production decl -> RIGHT idents 
-- On NONASSOC reduce production decl -> RIGHT idents 
-- On LEFT reduce production decl -> RIGHT idents 

State 14:
decl -> NONASSOC . idents [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On IDENT shift to state 5
-- On idents shift to state 15
-- On TYPE reduce production idents -> 
-- On TOKEN reduce production idents -> 
-- On START reduce production idents -> 
-- On RIGHT reduce production idents -> 
-- On PERCENT_PERCENT reduce production idents -> 
-- On NONASSOC reduce production idents -> 
-- On LEFT reduce production idents -> 

State 15:
decl -> NONASSOC idents . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production decl -> NONASSOC idents 
-- On TOKEN reduce production decl -> NONASSOC idents 
-- On START reduce production decl -> NONASSOC idents 
-- On RIGHT reduce production decl -> NONASSOC idents 
-- On PERCENT_PERCENT reduce production decl -> NONASSOC idents 
-- On NONASSOC reduce production decl -> NONASSOC idents 
-- On LEFT reduce production decl -> NONASSOC idents 

State 16:
decl -> LEFT . idents [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On IDENT shift to state 5
-- On idents shift to state 17
-- On TYPE reduce production idents -> 
-- On TOKEN reduce production idents -> 
-- On START reduce production idents -> 
-- On RIGHT reduce production idents -> 
-- On PERCENT_PERCENT reduce production idents -> 
-- On NONASSOC reduce production idents -> 
-- On LEFT reduce production idents -> 

State 17:
decl -> LEFT idents . [ TYPE TOKEN START RIGHT PERCENT_PERCENT NONASSOC LEFT ]
-- On TYPE reduce production decl -> LEFT idents 
-- On TOKEN reduce production decl -> LEFT idents 
-- On START reduce production decl -> LEFT idents 
-- On RIGHT reduce production decl -> LEFT idents 
-- On PERCENT_PERCENT reduce production decl -> LEFT idents 
-- On NONASSOC reduce production decl -> LEFT idents 
-- On LEFT reduce production decl -> LEFT idents 

State 18:
spec -> headeropt decls . PERCENT_PERCENT rules [ # ]
-- On PERCENT_PERCENT shift to state 19

State 19:
spec -> headeropt decls PERCENT_PERCENT . rules [ # ]
-- On IDENT shift to state 20
-- On rules shift to state 39
-- On rule shift to state 40

State 20:
rule -> IDENT . COLON optbar clauses optsemi [ IDENT # ]
-- On COLON shift to state 21

State 21:
rule -> IDENT COLON . optbar clauses optsemi [ IDENT # ]
-- On BAR shift to state 22
-- On optbar shift to state 23
-- On PREC reduce production optbar -> 
-- On IDENT reduce production optbar -> 
-- On ERROR reduce production optbar -> 
-- On CODE reduce production optbar -> 

State 22:
optbar -> BAR . [ PREC IDENT ERROR CODE ]
-- On PREC reduce production optbar -> BAR 
-- On IDENT reduce production optbar -> BAR 
-- On ERROR reduce production optbar -> BAR 
-- On CODE reduce production optbar -> BAR 

State 23:
rule -> IDENT COLON optbar . clauses optsemi [ IDENT # ]
-- On IDENT shift to state 24
-- On ERROR shift to state 25
-- On syms shift to state 28
-- On clauses shift to state 33
-- On clause shift to state 36
-- On PREC reduce production syms -> 
-- On CODE reduce production syms -> 

State 24:
syms -> IDENT . syms [ PREC CODE ]
-- On IDENT shift to state 24
-- On ERROR shift to state 25
-- On syms shift to state 27
-- On PREC reduce production syms -> 
-- On CODE reduce production syms -> 

State 25:
syms -> ERROR . syms [ PREC CODE ]
-- On IDENT shift to state 24
-- On ERROR shift to state 25
-- On syms shift to state 26
-- On PREC reduce production syms -> 
-- On CODE reduce production syms -> 

State 26:
syms -> ERROR syms . [ PREC CODE ]
-- On PREC reduce production syms -> ERROR syms 
-- On CODE reduce production syms -> ERROR syms 

State 27:
syms -> IDENT syms . [ PREC CODE ]
-- On PREC reduce production syms -> IDENT syms 
-- On CODE reduce production syms -> IDENT syms 

State 28:
clause -> syms . optprec CODE [ SEMI IDENT BAR # ]
-- On PREC shift to state 29
-- On optprec shift to state 31
-- On CODE reduce production optprec -> 

State 29:
optprec -> PREC . IDENT [ CODE ]
-- On IDENT shift to state 30

State 30:
optprec -> PREC IDENT . [ CODE ]
-- On CODE reduce production optprec -> PREC IDENT 

State 31:
clause -> syms optprec . CODE [ SEMI IDENT BAR # ]
-- On CODE shift to state 32

State 32:
clause -> syms optprec CODE . [ SEMI IDENT BAR # ]
-- On SEMI reduce production clause -> syms optprec CODE 
-- On IDENT reduce production clause -> syms optprec CODE 
-- On BAR reduce production clause -> syms optprec CODE 
-- On # reduce production clause -> syms optprec CODE 

State 33:
rule -> IDENT COLON optbar clauses . optsemi [ IDENT # ]
-- On SEMI shift to state 34
-- On optsemi shift to state 35
-- On IDENT reduce production optsemi -> 
-- On # reduce production optsemi -> 

State 34:
optsemi -> SEMI . [ IDENT # ]
-- On IDENT reduce production optsemi -> SEMI 
-- On # reduce production optsemi -> SEMI 

State 35:
rule -> IDENT COLON optbar clauses optsemi . [ IDENT # ]
-- On IDENT reduce production rule -> IDENT COLON optbar clauses optsemi 
-- On # reduce production rule -> IDENT COLON optbar clauses optsemi 

State 36:
clauses -> clause . BAR clauses [ SEMI IDENT # ]
clauses -> clause . [ SEMI IDENT # ]
-- On BAR shift to state 37
-- On SEMI reduce production clauses -> clause 
-- On IDENT reduce production clauses -> clause 
-- On # reduce production clauses -> clause 

State 37:
clauses -> clause BAR . clauses [ SEMI IDENT # ]
-- On IDENT shift to state 24
-- On ERROR shift to state 25
-- On syms shift to state 28
-- On clauses shift to state 38
-- On clause shift to state 36
-- On PREC reduce production syms -> 
-- On CODE reduce production syms -> 

State 38:
clauses -> clause BAR clauses . [ SEMI IDENT # ]
-- On SEMI reduce production clauses -> clause BAR clauses 
-- On IDENT reduce production clauses -> clause BAR clauses 
-- On # reduce production clauses -> clause BAR clauses 

State 39:
spec -> headeropt decls PERCENT_PERCENT rules . [ # ]
-- On # reduce production spec -> headeropt decls PERCENT_PERCENT rules 

State 40:
rules -> rule . rules [ # ]
rules -> rule . [ # ]
-- On IDENT shift to state 20
-- On rules shift to state 41
-- On rule shift to state 40
-- On # reduce production rules -> rule 

State 41:
rules -> rule rules . [ # ]
-- On # reduce production rules -> rule rules 

State 42:
decls -> decl . decls [ PERCENT_PERCENT ]
-- On TYPE shift to state 4
-- On TOKEN shift to state 8
-- On START shift to state 10
-- On RIGHT shift to state 12
-- On NONASSOC shift to state 14
-- On LEFT shift to state 16
-- On decls shift to state 43
-- On decl shift to state 42
-- On PERCENT_PERCENT reduce production decls -> 

State 43:
decls -> decl decls . [ PERCENT_PERCENT ]
-- On PERCENT_PERCENT reduce production decls -> decl decls 

State 32 has an end-of-stream conflict. There is a tension between
(1) reducing production clause -> syms optprec CODE 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SEMI IDENT BAR,
which would require some other action.

State 33 has an end-of-stream conflict. There is a tension between
(1) reducing production optsemi -> 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SEMI IDENT,
which would require some other action.

State 34 has an end-of-stream conflict. There is a tension between
(1) reducing production optsemi -> SEMI 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is IDENT,
which would require some other action.

State 35 has an end-of-stream conflict. There is a tension between
(1) reducing production rule -> IDENT COLON optbar clauses optsemi 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is IDENT,
which would require some other action.

State 36 has an end-of-stream conflict. There is a tension between
(1) reducing production clauses -> clause 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SEMI IDENT BAR,
which would require some other action.

State 38 has an end-of-stream conflict. There is a tension between
(1) reducing production clauses -> clause BAR clauses 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SEMI IDENT,
which would require some other action.

State 40 has an end-of-stream conflict. There is a tension between
(1) reducing production rules -> rule 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is IDENT,
which would require some other action.

