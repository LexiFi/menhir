File "fsyaccpars.mly", line 11, characters 83-86:
Warning: the token EOF is unused.
File "fsyaccpars.mly", line 11, characters 59-66:
Warning: the token GREATER is unused.
File "fsyaccpars.mly", line 11, characters 54-58:
Warning: the token LESS is unused.
%{
(* (c) Microsoft Corporation 2005-2006.  *)

open Fsyaccast

%}
%start spec
%token BAR
%token <Fsyaccast.code> CODE
%token COLON
%token EOF
%token ERROR
%token GREATER
%token <Fsyaccast.code> HEADER
%token <string> IDENT
%token LEFT
%token LESS
%token NONASSOC
%token PERCENT_PERCENT
%token PREC
%token RIGHT
%token SEMI
%token START
%token <string option> TOKEN
%token <string> TYPE
%left BAR
%type <Fsyaccast.spec> spec
%%

spec:
  _1 = headeropt _2 = decls _3 = PERCENT_PERCENT _4 = rules
    {                                            ( List.fold_right (fun f x -> f x) _2 { header=_1;tokens=[];types=[];assoc=[];starts=[];rules=_4 } )}

headeropt:
  _1 = HEADER
    {                  ( _1 )}
| 
    {                           ( "", Parsing.symbol_start_pos () )}

decls:
  
    {        ( [] )}
| _1 = decl _2 = decls
    {                            ( _1 :: _2 )}

decl:
  _1 = TOKEN _2 = idents
    {                 ( (fun x -> {x with tokens = x.tokens @ (List.map (fun x -> (x,_1)) _2)}) )}
| _1 = TYPE _2 = idents
    {                  ( (fun x -> {x with types = x.types @ (List.map (fun x -> (x,_1)) _2)} ) )}
| _1 = START _2 = idents
    {                   ( (fun x -> {x with starts = x.starts @ _2} ) )}
| _1 = LEFT _2 = idents
    {                  ( (fun x -> {x with assoc = x.assoc @ [(List.map (fun x -> (x,LeftAssoc)) _2)]} ) )}
| _1 = RIGHT _2 = idents
    {                   ( (fun x -> {x with assoc = x.assoc @ [(List.map (fun x -> (x,RightAssoc)) _2)]} ) )}
| _1 = NONASSOC _2 = idents
    {                      ( (fun x -> {x with assoc = x.assoc @ [(List.map (fun x -> (x,NonAssoc)) _2)]} ) )}

idents:
  _1 = IDENT _2 = idents
    {                     ( _1 :: _2 )}
| 
    {                                    ( [] )}

rules:
  _1 = rule _2 = rules
    {                  ( _1 :: _2 )}
| _1 = rule
    {                                      ( [_1] )}

rule:
  _1 = IDENT _2 = COLON _3 = optbar _4 = clauses _5 = optsemi
    {                                         ( (_1,_4) )}

optbar:
  
    {        ( )}
| _1 = BAR
    {                  ( )}

optsemi:
  
    {         ( )}
| _1 = SEMI
    {                    ( )}

clauses:
  _1 = clause _2 = BAR _3 = clauses
    {                            (_1 :: _3 )}
| _1 = clause
    {                                                 ( [_1] )}

clause:
  _1 = syms _2 = optprec _3 = CODE
    {                          ( Rule(_1,_2,Some _3) )}

syms:
  _1 = IDENT _2 = syms
    {                 ( _1 :: _2 )}
| _1 = ERROR _2 = syms
    {                                           ( "error" :: _2 )}
| 
    {                                                               ( [] )}

optprec:
  
    {         ( None )}
| _1 = PREC _2 = IDENT
    {                               ( Some _2 )}

%%
