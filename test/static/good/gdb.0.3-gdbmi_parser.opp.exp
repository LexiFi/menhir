%{
  open! Gdbmi_types
%}
%start input_output
%start output
%token AMPERSAND
%token ASTERISK
%token AT
%token CARET
%token COMMA
%token EOF
%token EQUAL
%token <string> IDENT
%token LBRACKET
%token LCURLY
%token MINUS
%token PLUS
%token PROMPT
%token RBRACKET
%token RCURLY
%token <string> STRING
%token TILDE
%token <string> TOKEN
%type <Gdbmi_types.input_output> input_output
%type <Gdbmi_types.output_record> output
%%

option_TOKEN_:
  
    {    ( None )}
| x = TOKEN
    {    ( Some x )}

loption_separated_nonempty_list_COMMA_result__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_result_
    {    ( x )}

list_preceded_COMMA_result__:
  
    {    ( [] )}
| _1 = COMMA x = result xs = list_preceded_COMMA_result__
    {let x =     ( x ) in
    ( x :: xs )}

separated_nonempty_list_COMMA_result_:
  x = result
    {    ( [ x ] )}
| x = result _2 = COMMA xs = separated_nonempty_list_COMMA_result_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_value_:
  x = value
    {    ( [ x ] )}
| x = value _2 = COMMA xs = separated_nonempty_list_COMMA_value_
    {    ( x :: xs )}

input_output:
  _1 = PROMPT _2 = EOF
    {             ( Prompt )}
| _1 = input_prefix
    {               ( Input _1 )}
| _1 = output
    {         ( Output _1 )}

input_prefix:
  token = option_TOKEN_ _2 = MINUS
    {                     ( MI token )}
| _1 = IDENT
    {        ( CLI )}

output:
  _1 = output_record _2 = EOF
    {                          ( _1 )}

output_record:
  typ = stream_type s = STRING
    {                           ( Stream (typ, s) )}
| token = option_TOKEN_ _2 = CARET state = IDENT r = list_preceded_COMMA_result__
    {  (
    let r = match state with
    | "done"
    | "running" -> Done r
    | "exit" -> Exit
    | "connected" -> Connected
    | "error" ->
      let k n = try match List.assoc n r with String s -> Some s | _ -> None with Not_found -> None in
      let msg = match k "msg" with Some s -> s | None -> "" in
      OpError (msg, k "code")
    | s -> failwith ("bad result type : " ^ s)
    in
    Result (token, r)
  )}
| token = option_TOKEN_ typ = async_type cls = IDENT r = list_preceded_COMMA_result__
    {                                                                       ( Async (token,typ,cls,r) )}

stream_type:
  _1 = TILDE
    {            ( Console )}
| _1 = AT
    {            ( Target )}
| _1 = AMPERSAND
    {            ( Log )}

async_type:
  _1 = ASTERISK
    {           ( Exec )}
| _1 = PLUS
    {       ( Status )}
| _1 = EQUAL
    {        ( Notify )}

result:
  n = IDENT _2 = EQUAL v = value
    {                              ( (n, v) )}

value:
  s = STRING
    {           ( String s )}
| _1 = LCURLY xs = loption_separated_nonempty_list_COMMA_result__ _3 = RCURLY
    {let l =     ( xs ) in
                                               ( Tuple l )}
| _1 = LBRACKET xs = loption_separated_nonempty_list_COMMA_result__ _3 = RBRACKET
    {let l =     ( xs ) in
                                                   ( List l )}
| _1 = LBRACKET l = separated_nonempty_list_COMMA_value_ _3 = RBRACKET
    {                                                           ( Values l )}

%%
