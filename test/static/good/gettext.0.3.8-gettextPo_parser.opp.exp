%{

open GettextTypes;;
open GettextUtils;;
open GettextPo_utils;;

type comment =
  | CommentFilePos of po_filepos list
  | CommentSpecial of string list
;;

let check_string_format ref str =
  str
;;

let rec add_comment comments po_commented_translation =
  match comments with 
  | CommentFilePos e :: comments_tl ->
      add_comment 
        comments_tl
        {
          po_commented_translation with
            po_comment_filepos = 
              List.append 
                e
                po_commented_translation.po_comment_filepos
        }
  | CommentSpecial e :: comments_tl ->
      add_comment
        comments_tl
        {
          po_commented_translation with
            po_comment_special = 
              List.append 
                e
                po_commented_translation.po_comment_special
        }
  | [] ->
      po_commented_translation
;;

let check_plural id id_plural lst =
  let check_plural_one index lst = 
    List.rev (
      snd ( 
        List.fold_left ( fun (index,lst) (cur_index,cur_elem) ->
          if index + 1 = cur_index then
            (cur_index, (check_string_format id cur_elem) :: lst)
          else
            raise (PoFileInvalidIndex(String.concat "" id,cur_index))
        ) (index,[]) lst
      )
    )
  in
  {
    po_comment_special = [];
    po_comment_filepos = [];
    po_comment_translation = 
      PoPlural(id, (check_string_format id id_plural), (check_plural_one (-1) lst));
  }
;;
  
let check_singular id str =
  {
    po_comment_special = [];
    po_comment_filepos = [];
    po_comment_translation = 
      PoSingular(id, check_string_format id str)
  }
;;

%}
%start msgfmt
%token <string> COMMENT_FILEPOS
%token <string> COMMENT_SPECIAL
%token DOMAIN
%token EOF
%token LBRACKET
%token MSGID
%token MSGID_PLURAL
%token MSGSTR
%token <int> NUMBER
%token RBRACKET
%token <string> STRING
%type <GettextTypes.po_content> msgfmt
%%

msgfmt:
  _1 = msgfmt _2 = domain
    {                        ( let (d,l) = _2 in List.fold_left (add_po_translation_domain d) _1 l )}
| _1 = domain
    {                        ( let (d,l) = _1 in List.fold_left (add_po_translation_domain d) empty_po l )}
| _1 = msgfmt _2 = message_list
    {                        ( List.fold_left add_po_translation_no_domain _1 _2 )}
| _1 = message_list
    {                        ( List.fold_left add_po_translation_no_domain empty_po _1 )}
| _1 = EOF
    {                        ( empty_po )}

comment:
  _1 = COMMENT_FILEPOS
    {  (
    let lexbuf =
      Lexing.from_string _1
    in
    let lst =
      GettextPoComment_parser.comment_filepos
        GettextPo_lexer.comment_filepos
        lexbuf
    in
      CommentFilePos lst
  )}
| _1 = COMMENT_SPECIAL
    {  (   
    let lexbuf =
      Lexing.from_string _1
    in
    let lst =
      GettextPoComment_parser.comment_special
        GettextPo_lexer.comment_special
        lexbuf
    in
    CommentSpecial lst
  )}

comment_list:
  _1 = comment_list _2 = comment
    {                       ( _2 :: _1 )}
| _1 = comment
    {                       ( [_1] )}

domain:
  _1 = DOMAIN _2 = STRING _3 = message_list
    {                             ( (_2,_3) )}
| _1 = DOMAIN _2 = STRING
    {                             ( (_2,[]) )}

message_list:
  _1 = message_list _2 = message
    {                       ( _2 :: _1 )}
| _1 = message
    {                       ( [_1] )}

message:
  _1 = comment_list _2 = MSGID _3 = string_list _4 = MSGSTR _5 = string_list
    {    ( add_comment _1 (check_singular  (List.rev _3) (List.rev _5)) )}
| _1 = MSGID _2 = string_list _3 = MSGSTR _4 = string_list
    {    ( (check_singular (List.rev _2) (List.rev _4)) )}
| _1 = comment_list _2 = MSGID _3 = string_list _4 = msgid_pluralform _5 = pluralform_list
    {    ( add_comment _1 (check_plural (List.rev _3) _4 (List.rev _5)) )}
| _1 = MSGID _2 = string_list _3 = msgid_pluralform _4 = pluralform_list
    {    ( (check_plural (List.rev _2) _3 (List.rev _4)) )}

msgid_pluralform:
  _1 = MSGID_PLURAL _2 = string_list
    {                           ( (List.rev _2) )}

pluralform_list:
  _1 = pluralform_list _2 = pluralform
    {                              ( _2 :: _1 )}
| _1 = pluralform
    {                              ( [_1] )}

pluralform:
  _1 = MSGSTR _2 = LBRACKET _3 = NUMBER _4 = RBRACKET _5 = string_list
    {                                              ( (_3,(List.rev _5)) )}

string_list:
  _1 = string_list _2 = STRING
    {                     ( _2 :: _1 )}
| _1 = STRING
    {                     ( [_1] )}

%%
