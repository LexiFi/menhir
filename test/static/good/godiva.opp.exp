File "godiva.mly", line 224, characters 6-32:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "godiva.mly", line 197, characters 6-31:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "godiva.mly", line 230, characters 6-33:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "godiva.mly", line 159, characters 6-31:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "godiva.mly", line 171, characters 6-28:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "godiva.mly", line 185, characters 6-30:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "godiva.mly", line 191, characters 6-32:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "godiva.mly", line 165, characters 6-30:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
%{
(* each spec_line has a *_line parsing rule *)
type spec_line =
    | Package of Common.category * string
    | Version of string
    | Revision of int
    | Depends of Common.dep list
    | Build_Depends of Common.dep list
    | Sources of string
    | Unpacks_To of string
    | Homepage of string
    | Maintainer of string
    | Options of Common.options list
    | Docfiles of string list
    | Description of string * string
    | Confopts of Common.confopt list
    | Bytecode_Target of string
    | Opt_Target of string

(* this gets filled in by the parser *)
let base_spec =
  {
    EL.name = "";
    EL.version = "";
    EL.revision = 0;
    EL.category = `godi;
    EL.depends = [];
    EL.build_depends = [];
    EL.sources_site = "";
    EL.sources_basename = "";
    EL.sources_extension = "";
    EL.sources_unpacksto = None;
    EL.homepage = "";
    EL.maintainer = "";
    EL.short_desc = "";
    EL.long_desc = "";
    EL.options = [];
    EL.docfiles = [];
    EL.confopts = [];
    EL.all_target = None;
    EL.opt_target = None;

    EL.specfile = "";
  }

let extensions = [".tar.gz"; ".tgz"; ".tar.bz2"; ".tbz2"]

let parse_sources url =
    try
        let dirname = Filename.dirname url in
        let basename = Filename.basename url in
        let extension = List.find (Filename.check_suffix url) extensions in
        let basename' = Filename.chop_suffix basename extension in
        (dirname, basename', extension)
    with
        Not_found ->
            raise (Syntax.Error (Lexing.dummy_pos, Lexing.dummy_pos,
                                 "Invalid extension in `Sources:' line"))

(* replace a single line's worth of info in the record `spec'.
   this gets folded over `base_spec', from above *)
let replace_line spec line =
    match line with
        | Package (cat, name) -> { spec with EL.name = name; EL.category = cat }
        | Version ver -> { spec with EL.version = ver }
        | Revision rev -> { spec with EL.revision = rev }
        | Depends deps -> { spec with EL.depends = deps }
        | Build_Depends deps -> { spec with EL.build_depends = deps }
        | Sources url -> let (site, basename, extension) = parse_sources url in
                        { spec with EL.sources_site = site;
                                    EL.sources_basename = basename;
                                    EL.sources_extension = extension }
        | Unpacks_To dir -> { spec with EL.sources_unpacksto = Some dir }
        | Homepage url -> { spec with EL.homepage = url }
        | Maintainer m -> { spec with EL.maintainer = m }
        | Description (short, long) -> { spec with EL.short_desc = short;
                                                   EL.long_desc = long }
        | Options opts -> { spec with EL.options = opts }
        | Docfiles docs -> { spec with EL.docfiles = docs }
        | Confopts confs -> { spec with EL.confopts = confs }
        | Bytecode_Target t -> { spec with EL.all_target = Some t }
        | Opt_Target t -> {spec with EL.opt_target = Some t }

let missing rhs_n s =
    let pos = Parsing.rhs_end_pos rhs_n in
    raise (Syntax.Error (pos, pos, s))

let error n s =
    raise (Syntax.Error (Parsing.rhs_start_pos n, Parsing.rhs_end_pos n, s))

let sym_error s =
    raise (Syntax.Error (Parsing.symbol_start_pos (),
                         Parsing.symbol_end_pos (),
                         s))

let trail n s = error n ("Trailing junk after " ^ s)
let missing s = sym_error ("Missing " ^ s)
let invalid n s = error n ("Invalid " ^ s)
%}
%start spec
%token BC_TARGET
%token BUILD_DEPENDS
%token COMMA
%token CONFOPTS
%token DEPENDS
%token DESCRIPTION
%token DOCFILES
%token EOF
%token EOL
%token HOMEPAGE
%token <int> INT
%token LPAREN
%token MAINTAINER
%token <Common.options> OPTION
%token OPTIONS
%token OPT_TARGET
%token PACKAGE
%token <Common.category * string> PKGNAME
%token <Common.relop> RELOP
%token REVISION
%token RPAREN
%token SOURCES
%token <string> STRING
%token <string * string> STRINGPAIR
%token UNPACKSTO
%token VERSION
%type <EL.spec> spec
%%

spec:
  _1 = lines _2 = EOF
    {                    ( let spec = List.fold_left replace_line base_spec _1 in
                      let curr_p = Parsing.symbol_end_pos () in
                      { spec with EL.specfile = curr_p.Lexing.pos_fname } )}

lines:
  _1 = line _2 = lines
    {                    ( _1 :: _2 )}
| 
    {                    ( [] )}

line:
  _1 = package_line
    {                        ( _1 )}
| _1 = version_line
    {                        ( _1 )}
| _1 = revision_line
    {                        ( _1 )}
| _1 = depends_line
    {                        ( _1 )}
| _1 = build_depends_line
    {                         ( _1 )}
| _1 = sources_line
    {                        ( _1 )}
| _1 = unpacksto_line
    {                        ( _1 )}
| _1 = homepage_line
    {                        ( _1 )}
| _1 = maintainer_line
    {                        ( _1 )}
| _1 = options_line
    {                        ( _1 )}
| _1 = docfiles_line
    {                        ( _1 )}
| _1 = description_line
    {                        ( _1 )}
| _1 = confopts_line
    {                        ( _1 )}
| _1 = bytecode_target_line
    {                           ( _1 )}
| _1 = opt_target_line
    {                        ( _1 )}

package_line:
  _1 = PACKAGE _2 = PKGNAME _3 = EOL
    {                            ( let (c, n) = _2 in Package (c, n) )}
| _1 = PACKAGE _2 = EOL
    {                            ( missing "package name" )}

version_line:
  _1 = VERSION _2 = STRING _3 = EOL
    {                            ( Version _2 )}
| _1 = VERSION _2 = EOL
    {                            ( missing "version number" )}

revision_line:
  _1 = REVISION _2 = INT _3 = EOL
    {                            ( Revision _2 )}
| _1 = REVISION _2 = EOL
    {                             ( missing "revision number" )}

depends_line:
  _1 = DEPENDS _2 = deps _3 = EOL
    {                            ( Depends _2 )}

build_depends_line:
  _1 = BUILD_DEPENDS _2 = deps _3 = EOL
    {                             ( Build_Depends _2 )}

sources_line:
  _1 = SOURCES _2 = STRING _3 = EOL
    {                            ( Sources _2 )}
| _1 = SOURCES _2 = EOL
    {                            ( missing "sources url" )}

unpacksto_line:
  _1 = UNPACKSTO _2 = STRING _3 = EOL
    {                            ( Unpacks_To _2 )}
| _1 = UNPACKSTO _2 = EOL
    {                              ( missing "`unpacks to' directory" )}

homepage_line:
  _1 = HOMEPAGE _2 = STRING _3 = EOL
    {                            ( Homepage _2 )}
| _1 = HOMEPAGE _2 = EOL
    {                             ( missing "homepage url" )}

maintainer_line:
  _1 = MAINTAINER _2 = STRING _3 = EOL
    {                            ( Maintainer _2 )}

options_line:
  _1 = OPTIONS _2 = options _3 = EOL
    {                            ( Options _2 )}

docfiles_line:
  _1 = DOCFILES _2 = docfiles _3 = EOL
    {                            ( Docfiles _2 )}

description_line:
  _1 = DESCRIPTION _2 = STRINGPAIR
    {                             ( let (s, l) = _2 in Description (s, l) )}

confopts_line:
  _1 = CONFOPTS _2 = confopts _3 = EOL
    {                               ( Confopts _2 )}

bytecode_target_line:
  _1 = BC_TARGET _2 = STRING _3 = EOL
    {                            ( Bytecode_Target _2 )}
| _1 = BC_TARGET _2 = EOL
    {                            ( missing "bytecode target" )}

opt_target_line:
  _1 = OPT_TARGET _2 = STRING _3 = EOL
    {                            ( Opt_Target _2 )}
| _1 = OPT_TARGET _2 = EOL
    {                            ( missing "opt target" )}

deps:
  _1 = dep _2 = COMMA _3 = deps
    {                    ( _1 :: _3 )}
| _1 = dep
    {                    ( [_1] )}
| _1 = dep _2 = error
    {                    ( error 2 "Missing comma" )}
| 
    {                    ( [] )}

dep:
  _1 = PKGNAME _2 = LPAREN _3 = RELOP _4 = STRING _5 = RPAREN
    {        ( let (cat, name) = _1 in (cat, name, Some (_3, _4)) )}
| _1 = PKGNAME
    {        ( let (cat, name) = _1 in (cat, name, None) )}
| _1 = error
    {        ( invalid 1 "dependency" )}

options:
  _1 = OPTION _2 = COMMA _3 = options
    {                            ( _1 :: _3 )}
| _1 = OPTION
    {                            ( [_1] )}
| _1 = error
    {                            ( invalid 1 "option" )}
| _1 = OPTION _2 = error
    {                            ( error 2 "Missing comma" )}
| 
    {                            ( [] )}

docfiles:
  _1 = STRING _2 = COMMA _3 = docfiles
    {                            ( _1 :: _3 )}
| _1 = STRING
    {                            ( [_1] )}
| _1 = error
    {                            ( invalid 1 "doc file" )}
| _1 = STRING _2 = error
    {                            ( error 2 "Missing comma" )}
| 
    {                            ( [] )}

confopts:
  
    {                            ( [] )}

%%


