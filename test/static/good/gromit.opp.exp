File "gromit.mly", line 33, characters 7-10:
Warning: the token EOF is unused.
%{

open Syntax

let failure index message =
  let location = Parsing.rhs_start index in
  let message = Printf.sprintf "near character %d: %s" location message in
  raise (SyntaxError message)

%}
%start signature
%token BEGIN
%token COMMA
%token CONSTRUCTOR
%token CONTRAVARIANT
%token COVARIANT
%token END
%token EOF
%token LATTICE
%token LBRACE
%token LBRACK
%token LESS
%token LET
%token <string> LIDENT
%token LPAREN
%token MORE
%token PRINTED
%token PRIORITY
%token QUOTE
%token RBRACE
%token RBRACK
%token RPAREN
%token SIGNATURE
%token <string> UIDENT
%type <Syntax.signature> signature
%%

signature:
  _1 = SIGNATURE _2 = BEGIN _3 = lattice_list _4 = END _5 = PRIORITY _6 = constructor_list
    {      ( _3, _6 )}
| _1 = SIGNATURE _2 = BEGIN _3 = lattice_list _4 = END _5 = error
    {      ( failure 5 "PRIORITY expected" )}
| _1 = SIGNATURE _2 = error
    {      ( failure 2 "BEGIN expected" )}
| _1 = error
    {      ( failure 1 "SIGNATURE expected" )}

lattice_list:
  _1 = lattice
    {      ( [ _1 ] )}
| _1 = lattice _2 = lattice_list
    {      ( _1 :: _2 )}
| _1 = error
    {      ( failure 1 "END or LATTICE expected" )}

lattice:
  _1 = LATTICE _2 = UIDENT _3 = BEGIN _4 = lattice_component_list _5 = END
    {      ( Lattice(_2, _4) )}
| _1 = LATTICE _2 = UIDENT _3 = error
    {      ( failure 3 "BEGIN expected" )}
| _1 = LATTICE _2 = error
    {      ( failure 2 "lattice name (uppercase) expected" )}

lattice_component_list:
  _1 = component
    {      ( [ _1 ] )}
| _1 = component _2 = lattice_component_list
    {      ( _1 :: _2 )}
| _1 = error
    {      ( failure 1 "CONSTRUCTOR, COVARIANT, CONTRAVARIANT, LET or END expected" )}

component:
  _1 = CONSTRUCTOR _2 = UIDENT _3 = arity _4 = PRINTED _5 = label_or_token_list _6 = LBRACK _7 = QUOTE _8 = UIDENT _9 = RBRACK
    {      ( ComponentConstructor(_2, _3, (_5, _8)) )}
| _1 = CONSTRUCTOR _2 = UIDENT _3 = arity _4 = PRINTED _5 = label_or_token_list _6 = LBRACK _7 = QUOTE _8 = UIDENT _9 = error
    {      ( failure 9 "']' expected" )}
| _1 = CONSTRUCTOR _2 = UIDENT _3 = arity _4 = PRINTED _5 = label_or_token_list _6 = LBRACK _7 = QUOTE _8 = error
    {      ( failure 8 "token name (uppercase) expected" )}
| _1 = CONSTRUCTOR _2 = UIDENT _3 = arity _4 = PRINTED _5 = label_or_token_list _6 = LBRACK _7 = error
    {      ( failure 7 "token (quoted uppercase name) expected" )}
| _1 = CONSTRUCTOR _2 = UIDENT _3 = arity _4 = PRINTED _5 = label_or_token_list _6 = error
    {      ( failure 6 "'[' expected" )}
| _1 = CONSTRUCTOR _2 = UIDENT _3 = arity _4 = error
    {      ( failure 4 "PRINTED expected" )}
| _1 = CONSTRUCTOR _2 = error
    {      ( failure 2 "constructor name (uppercase) expected" )}
| _1 = variance _2 = UIDENT _3 = LIDENT
    {      ( ComponentLabel(_1, SortRegular, _2, _3) )}
| _1 = variance _2 = UIDENT _3 = error
    {      ( failure 3 "label name (lowercase) expected" )}
| _1 = variance _2 = LESS _3 = UIDENT _4 = MORE _5 = LIDENT
    {      ( ComponentLabel(_1, SortRow, _3, _5) )}
| _1 = variance _2 = LESS _3 = UIDENT _4 = MORE _5 = error
    {      ( failure 5 "label name (lowercase) expected" )}
| _1 = variance _2 = LESS _3 = UIDENT _4 = error
    {      ( failure 4 "'>' expected" )}
| _1 = variance _2 = LESS _3 = error
    {      ( failure 3 "lattice name (uppercase) expected" )}
| _1 = variance _2 = error
    {      ( failure 2 "'<' or lattice name (uppercase) expected" )}
| _1 = LET _2 = UIDENT _3 = LESS _4 = UIDENT
    {      ( ComponentOrdering(_2, _4) )}
| _1 = LET _2 = UIDENT _3 = LESS _4 = error
    {      ( failure 4 "constructor name (uppercase) expected" )}
| _1 = LET _2 = UIDENT _3 = error
    {      ( failure 3 "'<' expected" )}
| _1 = LET _2 = error
    {      ( failure 2 "constructor name (uppercase) expected" )}

arity:
  
    {      ( [] )}
| _1 = LBRACE _2 = label_comma_list _3 = RBRACE
    {      ( _2 )}
| _1 = error
    {      ( failure 1 "PRINTED expected" )}

label_comma_list:
  _1 = LIDENT
    {      ( [ _1 ] )}
| _1 = LIDENT _2 = COMMA _3 = label_comma_list
    {      ( _1 :: _3 )}
| _1 = LIDENT _2 = error
    {      ( failure 2 "',' or '}' expected" )}
| _1 = error
    {      ( failure 1 "label name (lowercase) expected" )}

variance:
  _1 = COVARIANT
    {      ( Covariant )}
| _1 = CONTRAVARIANT
    {      ( Contravariant )}

label_or_token_list:
  _1 = first_label_or_token _2 = label_or_token_list0
    {      ( _1 :: _2 )}

label_or_token_list0:
  
    {      ( [] )}
| _1 = next_label_or_token _2 = label_or_token_list0
    {      ( _1 :: _2 )}

first_label_or_token:
  _1 = LIDENT
    {      ( Label (_1, false) )}
| _1 = QUOTE _2 = UIDENT
    {      ( Token _2 )}
| _1 = QUOTE _2 = error
    {      ( failure 2 "token name (uppercase) expected" )}
| _1 = LPAREN _2 = LIDENT _3 = RPAREN
    {      ( Label (_2, true) )}
| _1 = LPAREN _2 = LIDENT _3 = error
    {      ( failure 3 "')' expected" )}
| _1 = LPAREN _2 = error
    {      ( failure 2 "label name (lowercase) expected" )}
| _1 = error
    {      ( failure 1 "label name (lowercase), '(' or token (quoted uppercase name) expected" )}

next_label_or_token:
  _1 = LIDENT
    {      ( Label (_1, false) )}
| _1 = QUOTE _2 = UIDENT
    {      ( Token _2 )}
| _1 = QUOTE _2 = error
    {      ( failure 2 "token name (uppercase) expected" )}
| _1 = LPAREN _2 = LIDENT _3 = RPAREN
    {      ( Label (_2, true) )}
| _1 = LPAREN _2 = LIDENT _3 = error
    {      ( failure 3 "')' expected" )}
| _1 = LPAREN _2 = error
    {      ( failure 2 "label name (lowercase) expected" )}
| _1 = error
    {      ( failure 1 "label name (lowercase), '(', token (quoted uppercase name) or '[' expected" )}

constructor_list:
  
    {      ( [] )}
| _1 = UIDENT _2 = constructor_list
    {      ( _1 :: _2 )}
| _1 = error
    {      ( failure 1 "constructor name (uppercase) expected" )}

%%


