State 0:
interface' -> . interface [ # ]
-- On OPEN shift to state 1
-- On opens shift to state 6
-- On list(opens) shift to state 8
-- On interface shift to state 389
-- On VAL reduce production list(opens) -> 
-- On UNSAFE reduce production list(opens) -> 
-- On TYPE reduce production list(opens) -> 
-- On NODE reduce production list(opens) -> 
-- On FUN reduce production list(opens) -> 
-- On EXTERNAL reduce production list(opens) -> 
-- On EOF reduce production list(opens) -> 
-- On CONST reduce production list(opens) -> 

State 1:
opens -> OPEN . modul [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF CONST ]
-- On Constructor shift to state 2
-- On modul shift to state 3

State 2:
modul -> Constructor . [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
-- On VAL reduce production modul -> Constructor 
-- On UNSAFE reduce production modul -> Constructor 
-- On TYPE reduce production modul -> Constructor 
-- On PRAGMA reduce production modul -> Constructor 
-- On OPEN reduce production modul -> Constructor 
-- On NODE reduce production modul -> Constructor 
-- On FUN reduce production modul -> Constructor 
-- On EXTERNAL reduce production modul -> Constructor 
-- On EOF reduce production modul -> Constructor 
-- On DOT reduce production modul -> Constructor 
-- On CONST reduce production modul -> Constructor 

State 3:
modul -> modul . DOT Constructor [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
opens -> OPEN modul . [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF CONST ]
-- On DOT shift to state 4
-- On VAL reduce production opens -> OPEN modul 
-- On UNSAFE reduce production opens -> OPEN modul 
-- On TYPE reduce production opens -> OPEN modul 
-- On PRAGMA reduce production opens -> OPEN modul 
-- On OPEN reduce production opens -> OPEN modul 
-- On NODE reduce production opens -> OPEN modul 
-- On FUN reduce production opens -> OPEN modul 
-- On EXTERNAL reduce production opens -> OPEN modul 
-- On EOF reduce production opens -> OPEN modul 
-- On CONST reduce production opens -> OPEN modul 

State 4:
modul -> modul DOT . Constructor [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
-- On Constructor shift to state 5

State 5:
modul -> modul DOT Constructor . [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
-- On VAL reduce production modul -> modul DOT Constructor 
-- On UNSAFE reduce production modul -> modul DOT Constructor 
-- On TYPE reduce production modul -> modul DOT Constructor 
-- On PRAGMA reduce production modul -> modul DOT Constructor 
-- On OPEN reduce production modul -> modul DOT Constructor 
-- On NODE reduce production modul -> modul DOT Constructor 
-- On FUN reduce production modul -> modul DOT Constructor 
-- On EXTERNAL reduce production modul -> modul DOT Constructor 
-- On EOF reduce production modul -> modul DOT Constructor 
-- On DOT reduce production modul -> modul DOT Constructor 
-- On CONST reduce production modul -> modul DOT Constructor 

State 6:
list(opens) -> opens . list(opens) [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On OPEN shift to state 1
-- On opens shift to state 6
-- On list(opens) shift to state 7
-- On VAL reduce production list(opens) -> 
-- On UNSAFE reduce production list(opens) -> 
-- On TYPE reduce production list(opens) -> 
-- On PRAGMA reduce production list(opens) -> 
-- On NODE reduce production list(opens) -> 
-- On FUN reduce production list(opens) -> 
-- On EXTERNAL reduce production list(opens) -> 
-- On EOF reduce production list(opens) -> 
-- On CONST reduce production list(opens) -> 

State 7:
list(opens) -> opens list(opens) . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production list(opens) -> opens list(opens) 
-- On UNSAFE reduce production list(opens) -> opens list(opens) 
-- On TYPE reduce production list(opens) -> opens list(opens) 
-- On PRAGMA reduce production list(opens) -> opens list(opens) 
-- On NODE reduce production list(opens) -> opens list(opens) 
-- On FUN reduce production list(opens) -> opens list(opens) 
-- On EXTERNAL reduce production list(opens) -> opens list(opens) 
-- On EOF reduce production list(opens) -> opens list(opens) 
-- On CONST reduce production list(opens) -> opens list(opens) 

State 8:
interface -> list(opens) . list(interface_desc) EOF [ # ]
-- On TYPE shift to state 9
-- On EXTERNAL shift to state 306
-- On CONST shift to state 307
-- On type_dec shift to state 313
-- On list(interface_desc) shift to state 314
-- On interface_desc shift to state 316
-- On extern shift to state 318
-- On const_dec shift to state 388
-- On VAL reduce production extern -> 
-- On UNSAFE reduce production extern -> 
-- On NODE reduce production extern -> 
-- On FUN reduce production extern -> 
-- On EOF reduce production list(interface_desc) -> 

State 9:
type_dec -> TYPE . IDENT [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE . IDENT EQUAL ty_ident [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE . IDENT EQUAL enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE . IDENT EQUAL struct_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On IDENT shift to state 10

State 10:
type_dec -> TYPE IDENT . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT . EQUAL ty_ident [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT . EQUAL enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT . EQUAL struct_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On EQUAL shift to state 11
-- On VAL reduce production type_dec -> TYPE IDENT 
-- On UNSAFE reduce production type_dec -> TYPE IDENT 
-- On TYPE reduce production type_dec -> TYPE IDENT 
-- On PRAGMA reduce production type_dec -> TYPE IDENT 
-- On NODE reduce production type_dec -> TYPE IDENT 
-- On FUN reduce production type_dec -> TYPE IDENT 
-- On EXTERNAL reduce production type_dec -> TYPE IDENT 
-- On EOF reduce production type_dec -> TYPE IDENT 
-- On CONST reduce production type_dec -> TYPE IDENT 

State 11:
type_dec -> TYPE IDENT EQUAL . ty_ident [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT EQUAL . enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT EQUAL . struct_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On LPAREN shift to state 12
-- On LBRACE shift to state 30
-- On IDENT shift to state 33
-- On Constructor shift to state 296
-- On BOOL shift to state 299
-- On ty_ident shift to state 303
-- On struct_ty_desc shift to state 304
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
-- On enum_ty_desc shift to state 305

State 12:
ident -> LPAREN . infx RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 13
-- On STAR shift to state 14
-- On PREFIX shift to state 15
-- On OR shift to state 16
-- On NOT shift to state 17
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On infx shift to state 28

State 13:
infx -> SUBTRACTIVE . [ RPAREN ]
-- On RPAREN reduce production infx -> SUBTRACTIVE 

State 14:
infx -> STAR . [ RPAREN ]
-- On RPAREN reduce production infx -> STAR 

State 15:
infx -> PREFIX . [ RPAREN ]
-- On RPAREN reduce production infx -> PREFIX 

State 16:
infx -> OR . [ RPAREN ]
-- On RPAREN reduce production infx -> OR 

State 17:
infx -> NOT . [ RPAREN ]
-- On RPAREN reduce production infx -> NOT 

State 18:
infx -> INFIX4 . [ RPAREN ]
-- On RPAREN reduce production infx -> INFIX4 

State 19:
infx -> INFIX3 . [ RPAREN ]
-- On RPAREN reduce production infx -> INFIX3 

State 20:
infx -> INFIX2 . [ RPAREN ]
-- On RPAREN reduce production infx -> INFIX2 

State 21:
infx -> INFIX1 . [ RPAREN ]
-- On RPAREN reduce production infx -> INFIX1 

State 22:
infx -> INFIX0 . [ RPAREN ]
-- On RPAREN reduce production infx -> INFIX0 

State 23:
infx -> EQUALEQUAL . [ RPAREN ]
-- On RPAREN reduce production infx -> EQUALEQUAL 

State 24:
infx -> EQUAL . [ RPAREN ]
-- On RPAREN reduce production infx -> EQUAL 

State 25:
infx -> BARBAR . [ RPAREN ]
-- On RPAREN reduce production infx -> BARBAR 

State 26:
infx -> AMPERSAND . [ RPAREN ]
-- On RPAREN reduce production infx -> AMPERSAND 

State 27:
infx -> AMPERAMPER . [ RPAREN ]
-- On RPAREN reduce production infx -> AMPERAMPER 

State 28:
ident -> LPAREN infx . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 29

State 29:
ident -> LPAREN infx RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production ident -> LPAREN infx RPAREN 
-- On WHENOT reduce production ident -> LPAREN infx RPAREN 
-- On WHEN reduce production ident -> LPAREN infx RPAREN 
-- On VAR reduce production ident -> LPAREN infx RPAREN 
-- On VAL reduce production ident -> LPAREN infx RPAREN 
-- On UNTIL reduce production ident -> LPAREN infx RPAREN 
-- On UNSAFE reduce production ident -> LPAREN infx RPAREN 
-- On UNLESS reduce production ident -> LPAREN infx RPAREN 
-- On TYPE reduce production ident -> LPAREN infx RPAREN 
-- On THEN reduce production ident -> LPAREN infx RPAREN 
-- On TEL reduce production ident -> LPAREN infx RPAREN 
-- On SUBTRACTIVE reduce production ident -> LPAREN infx RPAREN 
-- On STRING reduce production ident -> LPAREN infx RPAREN 
-- On STATE reduce production ident -> LPAREN infx RPAREN 
-- On STAR reduce production ident -> LPAREN infx RPAREN 
-- On SEMICOL reduce production ident -> LPAREN infx RPAREN 
-- On RPAREN_GREATER reduce production ident -> LPAREN infx RPAREN 
-- On RPAREN reduce production ident -> LPAREN infx RPAREN 
-- On REACHABLE reduce production ident -> LPAREN infx RPAREN 
-- On RBRACKET reduce production ident -> LPAREN infx RPAREN 
-- On RBRACE reduce production ident -> LPAREN infx RPAREN 
-- On PRAGMA reduce production ident -> LPAREN infx RPAREN 
-- On POWER reduce production ident -> LPAREN infx RPAREN 
-- On OR reduce production ident -> LPAREN infx RPAREN 
-- On ON reduce production ident -> LPAREN infx RPAREN 
-- On NODE reduce production ident -> LPAREN infx RPAREN 
-- On LPAREN reduce production ident -> LPAREN infx RPAREN 
-- On LET reduce production ident -> LPAREN infx RPAREN 
-- On LESS_LPAREN reduce production ident -> LPAREN infx RPAREN 
-- On LESS_GREATER reduce production ident -> LPAREN infx RPAREN 
-- On LESSRBRACKET reduce production ident -> LPAREN infx RPAREN 
-- On LBRACKETGREATER reduce production ident -> LPAREN infx RPAREN 
-- On LBRACKET reduce production ident -> LPAREN infx RPAREN 
-- On LBRACE reduce production ident -> LPAREN infx RPAREN 
-- On INT reduce production ident -> LPAREN infx RPAREN 
-- On INFIX4 reduce production ident -> LPAREN infx RPAREN 
-- On INFIX3 reduce production ident -> LPAREN infx RPAREN 
-- On INFIX2 reduce production ident -> LPAREN infx RPAREN 
-- On INFIX1 reduce production ident -> LPAREN infx RPAREN 
-- On INFIX0 reduce production ident -> LPAREN infx RPAREN 
-- On IDENT reduce production ident -> LPAREN infx RPAREN 
-- On FUN reduce production ident -> LPAREN infx RPAREN 
-- On FLOAT reduce production ident -> LPAREN infx RPAREN 
-- On FBY reduce production ident -> LPAREN infx RPAREN 
-- On EXTERNAL reduce production ident -> LPAREN infx RPAREN 
-- On EVERY reduce production ident -> LPAREN infx RPAREN 
-- On EQUAL reduce production ident -> LPAREN infx RPAREN 
-- On EOF reduce production ident -> LPAREN infx RPAREN 
-- On ENFORCE reduce production ident -> LPAREN infx RPAREN 
-- On END reduce production ident -> LPAREN infx RPAREN 
-- On ELSE reduce production ident -> LPAREN infx RPAREN 
-- On DOUBLE_LESS reduce production ident -> LPAREN infx RPAREN 
-- On DOUBLE_GREATER reduce production ident -> LPAREN infx RPAREN 
-- On DOUBLE_DOT reduce production ident -> LPAREN infx RPAREN 
-- On DOT reduce production ident -> LPAREN infx RPAREN 
-- On DONE reduce production ident -> LPAREN infx RPAREN 
-- On DO reduce production ident -> LPAREN infx RPAREN 
-- On DEFAULT reduce production ident -> LPAREN infx RPAREN 
-- On Constructor reduce production ident -> LPAREN infx RPAREN 
-- On CONTINUE reduce production ident -> LPAREN infx RPAREN 
-- On CONST reduce production ident -> LPAREN infx RPAREN 
-- On COMMA reduce production ident -> LPAREN infx RPAREN 
-- On COLONCOLON reduce production ident -> LPAREN infx RPAREN 
-- On BOOL reduce production ident -> LPAREN infx RPAREN 
-- On BAR reduce production ident -> LPAREN infx RPAREN 
-- On ATTRACTIVE reduce production ident -> LPAREN infx RPAREN 
-- On AT reduce production ident -> LPAREN infx RPAREN 
-- On ARROW reduce production ident -> LPAREN infx RPAREN 
-- On AROBASE reduce production ident -> LPAREN infx RPAREN 
-- On AND reduce production ident -> LPAREN infx RPAREN 
-- On AMPERSAND reduce production ident -> LPAREN infx RPAREN 

State 30:
struct_ty_desc -> LBRACE . label_ty_list RBRACE [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On IDENT shift to state 31
-- On label_ty_list shift to state 291
-- On label_ty shift to state 293

State 31:
label_ty -> IDENT . COLON ty_ident [ SEMICOL RBRACE ]
-- On COLON shift to state 32

State 32:
label_ty -> IDENT COLON . ty_ident [ SEMICOL RBRACE ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 34
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88

State 33:
ident -> IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production ident -> IDENT 
-- On WHENOT reduce production ident -> IDENT 
-- On WHEN reduce production ident -> IDENT 
-- On VAR reduce production ident -> IDENT 
-- On VAL reduce production ident -> IDENT 
-- On UNTIL reduce production ident -> IDENT 
-- On UNSAFE reduce production ident -> IDENT 
-- On UNLESS reduce production ident -> IDENT 
-- On TYPE reduce production ident -> IDENT 
-- On THEN reduce production ident -> IDENT 
-- On TEL reduce production ident -> IDENT 
-- On SUBTRACTIVE reduce production ident -> IDENT 
-- On STRING reduce production ident -> IDENT 
-- On STATE reduce production ident -> IDENT 
-- On STAR reduce production ident -> IDENT 
-- On SEMICOL reduce production ident -> IDENT 
-- On RPAREN_GREATER reduce production ident -> IDENT 
-- On RPAREN reduce production ident -> IDENT 
-- On REACHABLE reduce production ident -> IDENT 
-- On RBRACKET reduce production ident -> IDENT 
-- On RBRACE reduce production ident -> IDENT 
-- On PRAGMA reduce production ident -> IDENT 
-- On POWER reduce production ident -> IDENT 
-- On OR reduce production ident -> IDENT 
-- On ON reduce production ident -> IDENT 
-- On NODE reduce production ident -> IDENT 
-- On LPAREN reduce production ident -> IDENT 
-- On LET reduce production ident -> IDENT 
-- On LESS_LPAREN reduce production ident -> IDENT 
-- On LESS_GREATER reduce production ident -> IDENT 
-- On LESSRBRACKET reduce production ident -> IDENT 
-- On LBRACKETGREATER reduce production ident -> IDENT 
-- On LBRACKET reduce production ident -> IDENT 
-- On LBRACE reduce production ident -> IDENT 
-- On INT reduce production ident -> IDENT 
-- On INFIX4 reduce production ident -> IDENT 
-- On INFIX3 reduce production ident -> IDENT 
-- On INFIX2 reduce production ident -> IDENT 
-- On INFIX1 reduce production ident -> IDENT 
-- On INFIX0 reduce production ident -> IDENT 
-- On IDENT reduce production ident -> IDENT 
-- On FUN reduce production ident -> IDENT 
-- On FLOAT reduce production ident -> IDENT 
-- On FBY reduce production ident -> IDENT 
-- On EXTERNAL reduce production ident -> IDENT 
-- On EVERY reduce production ident -> IDENT 
-- On EQUAL reduce production ident -> IDENT 
-- On EOF reduce production ident -> IDENT 
-- On ENFORCE reduce production ident -> IDENT 
-- On END reduce production ident -> IDENT 
-- On ELSE reduce production ident -> IDENT 
-- On DOUBLE_LESS reduce production ident -> IDENT 
-- On DOUBLE_GREATER reduce production ident -> IDENT 
-- On DOUBLE_DOT reduce production ident -> IDENT 
-- On DOT reduce production ident -> IDENT 
-- On DONE reduce production ident -> IDENT 
-- On DO reduce production ident -> IDENT 
-- On DEFAULT reduce production ident -> IDENT 
-- On Constructor reduce production ident -> IDENT 
-- On CONTINUE reduce production ident -> IDENT 
-- On CONST reduce production ident -> IDENT 
-- On COMMA reduce production ident -> IDENT 
-- On COLONCOLON reduce production ident -> IDENT 
-- On BOOL reduce production ident -> IDENT 
-- On BAR reduce production ident -> IDENT 
-- On ATTRACTIVE reduce production ident -> IDENT 
-- On AT reduce production ident -> IDENT 
-- On ARROW reduce production ident -> IDENT 
-- On AROBASE reduce production ident -> IDENT 
-- On AND reduce production ident -> IDENT 
-- On AMPERSAND reduce production ident -> IDENT 

State 34:
label_ty -> IDENT COLON ty_ident . [ SEMICOL RBRACE ]
ty_ident -> ty_ident . POWER simple_exp [ SEMICOL RBRACE POWER ]
-- On POWER shift to state 35
-- On SEMICOL reduce production label_ty -> IDENT COLON ty_ident 
-- On RBRACE reduce production label_ty -> IDENT COLON ty_ident 

State 35:
ty_ident -> ty_ident POWER . simple_exp [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER CONST COLONCOLON BAR AT ]
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 289
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 36:
_const -> STRING . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _const -> STRING 
-- On WHENOT reduce production _const -> STRING 
-- On WHEN reduce production _const -> STRING 
-- On VAR reduce production _const -> STRING 
-- On VAL reduce production _const -> STRING 
-- On UNTIL reduce production _const -> STRING 
-- On UNSAFE reduce production _const -> STRING 
-- On UNLESS reduce production _const -> STRING 
-- On TYPE reduce production _const -> STRING 
-- On THEN reduce production _const -> STRING 
-- On TEL reduce production _const -> STRING 
-- On SUBTRACTIVE reduce production _const -> STRING 
-- On STRING reduce production _const -> STRING 
-- On STATE reduce production _const -> STRING 
-- On STAR reduce production _const -> STRING 
-- On SEMICOL reduce production _const -> STRING 
-- On RPAREN_GREATER reduce production _const -> STRING 
-- On RPAREN reduce production _const -> STRING 
-- On REACHABLE reduce production _const -> STRING 
-- On RBRACKET reduce production _const -> STRING 
-- On RBRACE reduce production _const -> STRING 
-- On PRAGMA reduce production _const -> STRING 
-- On POWER reduce production _const -> STRING 
-- On OR reduce production _const -> STRING 
-- On ON reduce production _const -> STRING 
-- On NODE reduce production _const -> STRING 
-- On LPAREN reduce production _const -> STRING 
-- On LET reduce production _const -> STRING 
-- On LESS_GREATER reduce production _const -> STRING 
-- On LESSRBRACKET reduce production _const -> STRING 
-- On LBRACKETGREATER reduce production _const -> STRING 
-- On LBRACKET reduce production _const -> STRING 
-- On LBRACE reduce production _const -> STRING 
-- On INT reduce production _const -> STRING 
-- On INFIX4 reduce production _const -> STRING 
-- On INFIX3 reduce production _const -> STRING 
-- On INFIX2 reduce production _const -> STRING 
-- On INFIX1 reduce production _const -> STRING 
-- On INFIX0 reduce production _const -> STRING 
-- On IDENT reduce production _const -> STRING 
-- On FUN reduce production _const -> STRING 
-- On FLOAT reduce production _const -> STRING 
-- On FBY reduce production _const -> STRING 
-- On EXTERNAL reduce production _const -> STRING 
-- On EVERY reduce production _const -> STRING 
-- On EQUAL reduce production _const -> STRING 
-- On EOF reduce production _const -> STRING 
-- On ENFORCE reduce production _const -> STRING 
-- On END reduce production _const -> STRING 
-- On ELSE reduce production _const -> STRING 
-- On DOUBLE_GREATER reduce production _const -> STRING 
-- On DOUBLE_DOT reduce production _const -> STRING 
-- On DOT reduce production _const -> STRING 
-- On DONE reduce production _const -> STRING 
-- On DO reduce production _const -> STRING 
-- On DEFAULT reduce production _const -> STRING 
-- On Constructor reduce production _const -> STRING 
-- On CONTINUE reduce production _const -> STRING 
-- On CONST reduce production _const -> STRING 
-- On COMMA reduce production _const -> STRING 
-- On COLONCOLON reduce production _const -> STRING 
-- On BOOL reduce production _const -> STRING 
-- On BAR reduce production _const -> STRING 
-- On ATTRACTIVE reduce production _const -> STRING 
-- On AT reduce production _const -> STRING 
-- On ARROW reduce production _const -> STRING 
-- On AROBASE reduce production _const -> STRING 
-- On AND reduce production _const -> STRING 
-- On AMPERSAND reduce production _const -> STRING 

State 37:
_simple_exp -> LPAREN . tuple_exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 38:
_exp -> SUBTRACTIVE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 268
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 39:
_exp -> SPLIT . ident LPAREN exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On ident shift to state 40

State 40:
_exp -> SPLIT ident . LPAREN exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 41

State 41:
_exp -> SPLIT ident LPAREN . exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 287
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 42:
_exp -> REINIT . LPAREN exp COMMA exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 43

State 43:
_exp -> REINIT LPAREN . exp COMMA exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 283
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 44:
_exp -> PREFIX . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 222
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 45:
_exp -> PRE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 282
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 46:
_exp -> NOT . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 224
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 47:
_exp -> MERGE . IDENT merge_handlers [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On IDENT shift to state 48

State 48:
_exp -> MERGE IDENT . merge_handlers [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On STRING shift to state 36
-- On LPAREN shift to state 49
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 275
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On nonempty_list(merge_handler) shift to state 277
-- On modul shift to state 81
-- On merge_handlers shift to state 278
-- On merge_handler shift to state 279
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 49:
_simple_exp -> LPAREN . tuple_exp RPAREN [ STRING LPAREN LBRACKET LBRACE INT IDENT FLOAT DOT Constructor BOOL ]
merge_handler -> LPAREN . constructor_or_bool ARROW exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ STRING LPAREN LBRACKET LBRACE INT IDENT FLOAT DOT Constructor BOOL ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 269
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor_or_bool shift to state 270
-- On constructor shift to state 274
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 50:
iterator -> MAPI . [ DOUBLE_LESS ]
-- On DOUBLE_LESS reduce production iterator -> MAPI 

State 51:
iterator -> MAPFOLD . [ DOUBLE_LESS ]
-- On DOUBLE_LESS reduce production iterator -> MAPFOLD 

State 52:
iterator -> MAP . [ DOUBLE_LESS ]
-- On DOUBLE_LESS reduce production iterator -> MAP 

State 53:
_simple_exp -> LPAREN . tuple_exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
ident -> LPAREN . infx RPAREN [ LPAREN DOUBLE_LESS ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 54
-- On STRING shift to state 36
-- On STAR shift to state 14
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 58
-- On PRE shift to state 45
-- On OR shift to state 16
-- On NOT shift to state 223
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On infx shift to state 28
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 54:
_exp -> SUBTRACTIVE . exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
infx -> SUBTRACTIVE . [ RPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 268
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN reduce production infx -> SUBTRACTIVE 

State 55:
_exp -> LBRACKET . exp WITH indexes EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> LBRACKET . array_exp_list RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 262
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 158
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 56:
_exp -> LBRACE . simple_exp WITH DOT qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> LBRACE . field_exp_list RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
-- On STRING shift to state 36
-- On LPAREN shift to state 57
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 253
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 254
-- On qualname shift to state 110
-- On qualified(ident) shift to state 261
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On ident shift to state 88
-- On field_exp_list shift to state 143
-- On field_exp shift to state 145
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 57:
_simple_exp -> LPAREN . tuple_exp RPAREN [ WITH DOT ]
ident -> LPAREN . infx RPAREN [ EQUAL ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ WITH DOT ]
-- On SUBTRACTIVE shift to state 54
-- On STRING shift to state 36
-- On STAR shift to state 14
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 58
-- On PRE shift to state 45
-- On OR shift to state 16
-- On NOT shift to state 223
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On infx shift to state 28
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 58:
_exp -> PREFIX . exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
infx -> PREFIX . [ RPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 222
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN reduce production infx -> PREFIX 

State 59:
_exp -> LAST . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On IDENT shift to state 60

State 60:
_exp -> LAST IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> LAST IDENT 
-- On WHENOT reduce production _exp -> LAST IDENT 
-- On WHEN reduce production _exp -> LAST IDENT 
-- On VAR reduce production _exp -> LAST IDENT 
-- On VAL reduce production _exp -> LAST IDENT 
-- On UNTIL reduce production _exp -> LAST IDENT 
-- On UNSAFE reduce production _exp -> LAST IDENT 
-- On UNLESS reduce production _exp -> LAST IDENT 
-- On TYPE reduce production _exp -> LAST IDENT 
-- On THEN reduce production _exp -> LAST IDENT 
-- On TEL reduce production _exp -> LAST IDENT 
-- On SUBTRACTIVE reduce production _exp -> LAST IDENT 
-- On STATE reduce production _exp -> LAST IDENT 
-- On STAR reduce production _exp -> LAST IDENT 
-- On SEMICOL reduce production _exp -> LAST IDENT 
-- On RPAREN_GREATER reduce production _exp -> LAST IDENT 
-- On RPAREN reduce production _exp -> LAST IDENT 
-- On REACHABLE reduce production _exp -> LAST IDENT 
-- On RBRACKET reduce production _exp -> LAST IDENT 
-- On RBRACE reduce production _exp -> LAST IDENT 
-- On PRAGMA reduce production _exp -> LAST IDENT 
-- On POWER reduce production _exp -> LAST IDENT 
-- On OR reduce production _exp -> LAST IDENT 
-- On ON reduce production _exp -> LAST IDENT 
-- On NODE reduce production _exp -> LAST IDENT 
-- On LET reduce production _exp -> LAST IDENT 
-- On LESS_GREATER reduce production _exp -> LAST IDENT 
-- On LESSRBRACKET reduce production _exp -> LAST IDENT 
-- On INFIX4 reduce production _exp -> LAST IDENT 
-- On INFIX3 reduce production _exp -> LAST IDENT 
-- On INFIX2 reduce production _exp -> LAST IDENT 
-- On INFIX1 reduce production _exp -> LAST IDENT 
-- On INFIX0 reduce production _exp -> LAST IDENT 
-- On FUN reduce production _exp -> LAST IDENT 
-- On EXTERNAL reduce production _exp -> LAST IDENT 
-- On EVERY reduce production _exp -> LAST IDENT 
-- On EQUAL reduce production _exp -> LAST IDENT 
-- On EOF reduce production _exp -> LAST IDENT 
-- On ENFORCE reduce production _exp -> LAST IDENT 
-- On END reduce production _exp -> LAST IDENT 
-- On ELSE reduce production _exp -> LAST IDENT 
-- On DOUBLE_GREATER reduce production _exp -> LAST IDENT 
-- On DOUBLE_DOT reduce production _exp -> LAST IDENT 
-- On DONE reduce production _exp -> LAST IDENT 
-- On DO reduce production _exp -> LAST IDENT 
-- On DEFAULT reduce production _exp -> LAST IDENT 
-- On Constructor reduce production _exp -> LAST IDENT 
-- On CONTINUE reduce production _exp -> LAST IDENT 
-- On CONST reduce production _exp -> LAST IDENT 
-- On COMMA reduce production _exp -> LAST IDENT 
-- On COLONCOLON reduce production _exp -> LAST IDENT 
-- On BOOL reduce production _exp -> LAST IDENT 
-- On BAR reduce production _exp -> LAST IDENT 
-- On ATTRACTIVE reduce production _exp -> LAST IDENT 
-- On AROBASE reduce production _exp -> LAST IDENT 
-- On AND reduce production _exp -> LAST IDENT 
-- On AMPERSAND reduce production _exp -> LAST IDENT 

State 61:
_const -> INT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _const -> INT 
-- On WHENOT reduce production _const -> INT 
-- On WHEN reduce production _const -> INT 
-- On VAR reduce production _const -> INT 
-- On VAL reduce production _const -> INT 
-- On UNTIL reduce production _const -> INT 
-- On UNSAFE reduce production _const -> INT 
-- On UNLESS reduce production _const -> INT 
-- On TYPE reduce production _const -> INT 
-- On THEN reduce production _const -> INT 
-- On TEL reduce production _const -> INT 
-- On SUBTRACTIVE reduce production _const -> INT 
-- On STRING reduce production _const -> INT 
-- On STATE reduce production _const -> INT 
-- On STAR reduce production _const -> INT 
-- On SEMICOL reduce production _const -> INT 
-- On RPAREN_GREATER reduce production _const -> INT 
-- On RPAREN reduce production _const -> INT 
-- On REACHABLE reduce production _const -> INT 
-- On RBRACKET reduce production _const -> INT 
-- On RBRACE reduce production _const -> INT 
-- On PRAGMA reduce production _const -> INT 
-- On POWER reduce production _const -> INT 
-- On OR reduce production _const -> INT 
-- On ON reduce production _const -> INT 
-- On NODE reduce production _const -> INT 
-- On LPAREN reduce production _const -> INT 
-- On LET reduce production _const -> INT 
-- On LESS_GREATER reduce production _const -> INT 
-- On LESSRBRACKET reduce production _const -> INT 
-- On LBRACKETGREATER reduce production _const -> INT 
-- On LBRACKET reduce production _const -> INT 
-- On LBRACE reduce production _const -> INT 
-- On INT reduce production _const -> INT 
-- On INFIX4 reduce production _const -> INT 
-- On INFIX3 reduce production _const -> INT 
-- On INFIX2 reduce production _const -> INT 
-- On INFIX1 reduce production _const -> INT 
-- On INFIX0 reduce production _const -> INT 
-- On IDENT reduce production _const -> INT 
-- On FUN reduce production _const -> INT 
-- On FLOAT reduce production _const -> INT 
-- On FBY reduce production _const -> INT 
-- On EXTERNAL reduce production _const -> INT 
-- On EVERY reduce production _const -> INT 
-- On EQUAL reduce production _const -> INT 
-- On EOF reduce production _const -> INT 
-- On ENFORCE reduce production _const -> INT 
-- On END reduce production _const -> INT 
-- On ELSE reduce production _const -> INT 
-- On DOUBLE_GREATER reduce production _const -> INT 
-- On DOUBLE_DOT reduce production _const -> INT 
-- On DOT reduce production _const -> INT 
-- On DONE reduce production _const -> INT 
-- On DO reduce production _const -> INT 
-- On DEFAULT reduce production _const -> INT 
-- On Constructor reduce production _const -> INT 
-- On CONTINUE reduce production _const -> INT 
-- On CONST reduce production _const -> INT 
-- On COMMA reduce production _const -> INT 
-- On COLONCOLON reduce production _const -> INT 
-- On BOOL reduce production _const -> INT 
-- On BAR reduce production _const -> INT 
-- On ATTRACTIVE reduce production _const -> INT 
-- On AT reduce production _const -> INT 
-- On ARROW reduce production _const -> INT 
-- On AROBASE reduce production _const -> INT 
-- On AND reduce production _const -> INT 
-- On AMPERSAND reduce production _const -> INT 

State 62:
node_name -> INLINED . qualname call_params [ LPAREN ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 63
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88

State 63:
node_name -> INLINED qualname . call_params [ LPAREN ]
-- On DOUBLE_LESS shift to state 64
-- On call_params shift to state 221
-- On LPAREN reduce production call_params -> 

State 64:
call_params -> DOUBLE_LESS . array_exp_list DOUBLE_GREATER [ LPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 219
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 65:
_exp -> IF . exp THEN exp ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 214
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 66:
_simple_exp -> IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
ident -> IDENT . [ LPAREN DOUBLE_LESS ]
-- On WITH reduce production _simple_exp -> IDENT 
-- On WHENOT reduce production _simple_exp -> IDENT 
-- On WHEN reduce production _simple_exp -> IDENT 
-- On VAR reduce production _simple_exp -> IDENT 
-- On VAL reduce production _simple_exp -> IDENT 
-- On UNTIL reduce production _simple_exp -> IDENT 
-- On UNSAFE reduce production _simple_exp -> IDENT 
-- On UNLESS reduce production _simple_exp -> IDENT 
-- On TYPE reduce production _simple_exp -> IDENT 
-- On THEN reduce production _simple_exp -> IDENT 
-- On TEL reduce production _simple_exp -> IDENT 
-- On SUBTRACTIVE reduce production _simple_exp -> IDENT 
-- On STATE reduce production _simple_exp -> IDENT 
-- On STAR reduce production _simple_exp -> IDENT 
-- On SEMICOL reduce production _simple_exp -> IDENT 
-- On RPAREN_GREATER reduce production _simple_exp -> IDENT 
-- On RPAREN reduce production _simple_exp -> IDENT 
-- On REACHABLE reduce production _simple_exp -> IDENT 
-- On RBRACKET reduce production _simple_exp -> IDENT 
-- On RBRACE reduce production _simple_exp -> IDENT 
-- On PRAGMA reduce production _simple_exp -> IDENT 
-- On POWER reduce production _simple_exp -> IDENT 
-- On OR reduce production _simple_exp -> IDENT 
-- On ON reduce production _simple_exp -> IDENT 
-- On NODE reduce production _simple_exp -> IDENT 
-- On LPAREN reduce production ident -> IDENT 
-- On LET reduce production _simple_exp -> IDENT 
-- On LESS_GREATER reduce production _simple_exp -> IDENT 
-- On LESSRBRACKET reduce production _simple_exp -> IDENT 
-- On LBRACKETGREATER reduce production _simple_exp -> IDENT 
-- On LBRACKET reduce production _simple_exp -> IDENT 
-- On INFIX4 reduce production _simple_exp -> IDENT 
-- On INFIX3 reduce production _simple_exp -> IDENT 
-- On INFIX2 reduce production _simple_exp -> IDENT 
-- On INFIX1 reduce production _simple_exp -> IDENT 
-- On INFIX0 reduce production _simple_exp -> IDENT 
-- On FUN reduce production _simple_exp -> IDENT 
-- On FBY reduce production _simple_exp -> IDENT 
-- On EXTERNAL reduce production _simple_exp -> IDENT 
-- On EVERY reduce production _simple_exp -> IDENT 
-- On EQUAL reduce production _simple_exp -> IDENT 
-- On EOF reduce production _simple_exp -> IDENT 
-- On ENFORCE reduce production _simple_exp -> IDENT 
-- On END reduce production _simple_exp -> IDENT 
-- On ELSE reduce production _simple_exp -> IDENT 
-- On DOUBLE_LESS reduce production ident -> IDENT 
-- On DOUBLE_GREATER reduce production _simple_exp -> IDENT 
-- On DOUBLE_DOT reduce production _simple_exp -> IDENT 
-- On DOT reduce production _simple_exp -> IDENT 
-- On DONE reduce production _simple_exp -> IDENT 
-- On DO reduce production _simple_exp -> IDENT 
-- On DEFAULT reduce production _simple_exp -> IDENT 
-- On Constructor reduce production _simple_exp -> IDENT 
-- On CONTINUE reduce production _simple_exp -> IDENT 
-- On CONST reduce production _simple_exp -> IDENT 
-- On COMMA reduce production _simple_exp -> IDENT 
-- On COLONCOLON reduce production _simple_exp -> IDENT 
-- On BOOL reduce production _simple_exp -> IDENT 
-- On BAR reduce production _simple_exp -> IDENT 
-- On ATTRACTIVE reduce production _simple_exp -> IDENT 
-- On ARROW reduce production _simple_exp -> IDENT 
-- On AROBASE reduce production _simple_exp -> IDENT 
-- On AND reduce production _simple_exp -> IDENT 
-- On AMPERSAND reduce production _simple_exp -> IDENT 

State 67:
iterator -> FOLDI . [ DOUBLE_LESS ]
-- On DOUBLE_LESS reduce production iterator -> FOLDI 

State 68:
iterator -> FOLD . [ DOUBLE_LESS ]
-- On DOUBLE_LESS reduce production iterator -> FOLD 

State 69:
_const -> FLOAT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _const -> FLOAT 
-- On WHENOT reduce production _const -> FLOAT 
-- On WHEN reduce production _const -> FLOAT 
-- On VAR reduce production _const -> FLOAT 
-- On VAL reduce production _const -> FLOAT 
-- On UNTIL reduce production _const -> FLOAT 
-- On UNSAFE reduce production _const -> FLOAT 
-- On UNLESS reduce production _const -> FLOAT 
-- On TYPE reduce production _const -> FLOAT 
-- On THEN reduce production _const -> FLOAT 
-- On TEL reduce production _const -> FLOAT 
-- On SUBTRACTIVE reduce production _const -> FLOAT 
-- On STRING reduce production _const -> FLOAT 
-- On STATE reduce production _const -> FLOAT 
-- On STAR reduce production _const -> FLOAT 
-- On SEMICOL reduce production _const -> FLOAT 
-- On RPAREN_GREATER reduce production _const -> FLOAT 
-- On RPAREN reduce production _const -> FLOAT 
-- On REACHABLE reduce production _const -> FLOAT 
-- On RBRACKET reduce production _const -> FLOAT 
-- On RBRACE reduce production _const -> FLOAT 
-- On PRAGMA reduce production _const -> FLOAT 
-- On POWER reduce production _const -> FLOAT 
-- On OR reduce production _const -> FLOAT 
-- On ON reduce production _const -> FLOAT 
-- On NODE reduce production _const -> FLOAT 
-- On LPAREN reduce production _const -> FLOAT 
-- On LET reduce production _const -> FLOAT 
-- On LESS_GREATER reduce production _const -> FLOAT 
-- On LESSRBRACKET reduce production _const -> FLOAT 
-- On LBRACKETGREATER reduce production _const -> FLOAT 
-- On LBRACKET reduce production _const -> FLOAT 
-- On LBRACE reduce production _const -> FLOAT 
-- On INT reduce production _const -> FLOAT 
-- On INFIX4 reduce production _const -> FLOAT 
-- On INFIX3 reduce production _const -> FLOAT 
-- On INFIX2 reduce production _const -> FLOAT 
-- On INFIX1 reduce production _const -> FLOAT 
-- On INFIX0 reduce production _const -> FLOAT 
-- On IDENT reduce production _const -> FLOAT 
-- On FUN reduce production _const -> FLOAT 
-- On FLOAT reduce production _const -> FLOAT 
-- On FBY reduce production _const -> FLOAT 
-- On EXTERNAL reduce production _const -> FLOAT 
-- On EVERY reduce production _const -> FLOAT 
-- On EQUAL reduce production _const -> FLOAT 
-- On EOF reduce production _const -> FLOAT 
-- On ENFORCE reduce production _const -> FLOAT 
-- On END reduce production _const -> FLOAT 
-- On ELSE reduce production _const -> FLOAT 
-- On DOUBLE_GREATER reduce production _const -> FLOAT 
-- On DOUBLE_DOT reduce production _const -> FLOAT 
-- On DOT reduce production _const -> FLOAT 
-- On DONE reduce production _const -> FLOAT 
-- On DO reduce production _const -> FLOAT 
-- On DEFAULT reduce production _const -> FLOAT 
-- On Constructor reduce production _const -> FLOAT 
-- On CONTINUE reduce production _const -> FLOAT 
-- On CONST reduce production _const -> FLOAT 
-- On COMMA reduce production _const -> FLOAT 
-- On COLONCOLON reduce production _const -> FLOAT 
-- On BOOL reduce production _const -> FLOAT 
-- On BAR reduce production _const -> FLOAT 
-- On ATTRACTIVE reduce production _const -> FLOAT 
-- On AT reduce production _const -> FLOAT 
-- On ARROW reduce production _const -> FLOAT 
-- On AROBASE reduce production _const -> FLOAT 
-- On AND reduce production _const -> FLOAT 
-- On AMPERSAND reduce production _const -> FLOAT 

State 70:
constructor -> Constructor . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
modul -> Constructor . [ DOT ]
-- On WITH reduce production constructor -> Constructor 
-- On WHENOT reduce production constructor -> Constructor 
-- On WHEN reduce production constructor -> Constructor 
-- On VAR reduce production constructor -> Constructor 
-- On VAL reduce production constructor -> Constructor 
-- On UNTIL reduce production constructor -> Constructor 
-- On UNSAFE reduce production constructor -> Constructor 
-- On UNLESS reduce production constructor -> Constructor 
-- On TYPE reduce production constructor -> Constructor 
-- On THEN reduce production constructor -> Constructor 
-- On TEL reduce production constructor -> Constructor 
-- On SUBTRACTIVE reduce production constructor -> Constructor 
-- On STRING reduce production constructor -> Constructor 
-- On STATE reduce production constructor -> Constructor 
-- On STAR reduce production constructor -> Constructor 
-- On SEMICOL reduce production constructor -> Constructor 
-- On RPAREN_GREATER reduce production constructor -> Constructor 
-- On RPAREN reduce production constructor -> Constructor 
-- On REACHABLE reduce production constructor -> Constructor 
-- On RBRACKET reduce production constructor -> Constructor 
-- On RBRACE reduce production constructor -> Constructor 
-- On PRAGMA reduce production constructor -> Constructor 
-- On POWER reduce production constructor -> Constructor 
-- On OR reduce production constructor -> Constructor 
-- On ON reduce production constructor -> Constructor 
-- On NODE reduce production constructor -> Constructor 
-- On LPAREN reduce production constructor -> Constructor 
-- On LET reduce production constructor -> Constructor 
-- On LESS_GREATER reduce production constructor -> Constructor 
-- On LESSRBRACKET reduce production constructor -> Constructor 
-- On LBRACKETGREATER reduce production constructor -> Constructor 
-- On LBRACKET reduce production constructor -> Constructor 
-- On LBRACE reduce production constructor -> Constructor 
-- On INT reduce production constructor -> Constructor 
-- On INFIX4 reduce production constructor -> Constructor 
-- On INFIX3 reduce production constructor -> Constructor 
-- On INFIX2 reduce production constructor -> Constructor 
-- On INFIX1 reduce production constructor -> Constructor 
-- On INFIX0 reduce production constructor -> Constructor 
-- On IDENT reduce production constructor -> Constructor 
-- On FUN reduce production constructor -> Constructor 
-- On FLOAT reduce production constructor -> Constructor 
-- On FBY reduce production constructor -> Constructor 
-- On EXTERNAL reduce production constructor -> Constructor 
-- On EVERY reduce production constructor -> Constructor 
-- On EQUAL reduce production constructor -> Constructor 
-- On EOF reduce production constructor -> Constructor 
-- On ENFORCE reduce production constructor -> Constructor 
-- On END reduce production constructor -> Constructor 
-- On ELSE reduce production constructor -> Constructor 
-- On DOUBLE_GREATER reduce production constructor -> Constructor 
-- On DOUBLE_DOT reduce production constructor -> Constructor 
-- On DOT reduce production constructor -> Constructor 
-- On DOT reduce production modul -> Constructor 
-- On DONE reduce production constructor -> Constructor 
-- On DO reduce production constructor -> Constructor 
-- On DEFAULT reduce production constructor -> Constructor 
-- On Constructor reduce production constructor -> Constructor 
-- On CONTINUE reduce production constructor -> Constructor 
-- On CONST reduce production constructor -> Constructor 
-- On COMMA reduce production constructor -> Constructor 
-- On COLONCOLON reduce production constructor -> Constructor 
-- On BOOL reduce production constructor -> Constructor 
-- On BAR reduce production constructor -> Constructor 
-- On ATTRACTIVE reduce production constructor -> Constructor 
-- On AT reduce production constructor -> Constructor 
-- On ARROW reduce production constructor -> Constructor 
-- On AROBASE reduce production constructor -> Constructor 
-- On AND reduce production constructor -> Constructor 
-- On AMPERSAND reduce production constructor -> Constructor 
** Conflict on DOT

State 71:
_const -> BOOL . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _const -> BOOL 
-- On WHENOT reduce production _const -> BOOL 
-- On WHEN reduce production _const -> BOOL 
-- On VAR reduce production _const -> BOOL 
-- On VAL reduce production _const -> BOOL 
-- On UNTIL reduce production _const -> BOOL 
-- On UNSAFE reduce production _const -> BOOL 
-- On UNLESS reduce production _const -> BOOL 
-- On TYPE reduce production _const -> BOOL 
-- On THEN reduce production _const -> BOOL 
-- On TEL reduce production _const -> BOOL 
-- On SUBTRACTIVE reduce production _const -> BOOL 
-- On STRING reduce production _const -> BOOL 
-- On STATE reduce production _const -> BOOL 
-- On STAR reduce production _const -> BOOL 
-- On SEMICOL reduce production _const -> BOOL 
-- On RPAREN_GREATER reduce production _const -> BOOL 
-- On RPAREN reduce production _const -> BOOL 
-- On REACHABLE reduce production _const -> BOOL 
-- On RBRACKET reduce production _const -> BOOL 
-- On RBRACE reduce production _const -> BOOL 
-- On PRAGMA reduce production _const -> BOOL 
-- On POWER reduce production _const -> BOOL 
-- On OR reduce production _const -> BOOL 
-- On ON reduce production _const -> BOOL 
-- On NODE reduce production _const -> BOOL 
-- On LPAREN reduce production _const -> BOOL 
-- On LET reduce production _const -> BOOL 
-- On LESS_GREATER reduce production _const -> BOOL 
-- On LESSRBRACKET reduce production _const -> BOOL 
-- On LBRACKETGREATER reduce production _const -> BOOL 
-- On LBRACKET reduce production _const -> BOOL 
-- On LBRACE reduce production _const -> BOOL 
-- On INT reduce production _const -> BOOL 
-- On INFIX4 reduce production _const -> BOOL 
-- On INFIX3 reduce production _const -> BOOL 
-- On INFIX2 reduce production _const -> BOOL 
-- On INFIX1 reduce production _const -> BOOL 
-- On INFIX0 reduce production _const -> BOOL 
-- On IDENT reduce production _const -> BOOL 
-- On FUN reduce production _const -> BOOL 
-- On FLOAT reduce production _const -> BOOL 
-- On FBY reduce production _const -> BOOL 
-- On EXTERNAL reduce production _const -> BOOL 
-- On EVERY reduce production _const -> BOOL 
-- On EQUAL reduce production _const -> BOOL 
-- On EOF reduce production _const -> BOOL 
-- On ENFORCE reduce production _const -> BOOL 
-- On END reduce production _const -> BOOL 
-- On ELSE reduce production _const -> BOOL 
-- On DOUBLE_GREATER reduce production _const -> BOOL 
-- On DOUBLE_DOT reduce production _const -> BOOL 
-- On DOT reduce production _const -> BOOL 
-- On DONE reduce production _const -> BOOL 
-- On DO reduce production _const -> BOOL 
-- On DEFAULT reduce production _const -> BOOL 
-- On Constructor reduce production _const -> BOOL 
-- On CONTINUE reduce production _const -> BOOL 
-- On CONST reduce production _const -> BOOL 
-- On COMMA reduce production _const -> BOOL 
-- On COLONCOLON reduce production _const -> BOOL 
-- On BOOL reduce production _const -> BOOL 
-- On BAR reduce production _const -> BOOL 
-- On ATTRACTIVE reduce production _const -> BOOL 
-- On AT reduce production _const -> BOOL 
-- On ARROW reduce production _const -> BOOL 
-- On AROBASE reduce production _const -> BOOL 
-- On AND reduce production _const -> BOOL 
-- On AMPERSAND reduce production _const -> BOOL 

State 72:
_exp -> simple_exp . FBY exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . ARROW exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . DOT indexes DEFAULT exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . LBRACKET exp DOUBLE_DOT exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> simple_exp . DOT qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
exp -> simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LBRACKETGREATER shift to state 73
-- On LBRACKET shift to state 195
-- On FBY shift to state 204
-- On DOT shift to state 206
-- On ARROW shift to state 210
-- On trunc_indexes shift to state 212
-- On indexes shift to state 213
-- On WITH reduce production exp -> simple_exp 
-- On WHENOT reduce production exp -> simple_exp 
-- On WHEN reduce production exp -> simple_exp 
-- On VAR reduce production exp -> simple_exp 
-- On VAL reduce production exp -> simple_exp 
-- On UNTIL reduce production exp -> simple_exp 
-- On UNSAFE reduce production exp -> simple_exp 
-- On UNLESS reduce production exp -> simple_exp 
-- On TYPE reduce production exp -> simple_exp 
-- On THEN reduce production exp -> simple_exp 
-- On TEL reduce production exp -> simple_exp 
-- On SUBTRACTIVE reduce production exp -> simple_exp 
-- On STATE reduce production exp -> simple_exp 
-- On STAR reduce production exp -> simple_exp 
-- On SEMICOL reduce production exp -> simple_exp 
-- On RPAREN_GREATER reduce production exp -> simple_exp 
-- On RPAREN reduce production exp -> simple_exp 
-- On REACHABLE reduce production exp -> simple_exp 
-- On RBRACKET reduce production exp -> simple_exp 
-- On RBRACE reduce production exp -> simple_exp 
-- On PRAGMA reduce production exp -> simple_exp 
-- On POWER reduce production exp -> simple_exp 
-- On OR reduce production exp -> simple_exp 
-- On ON reduce production exp -> simple_exp 
-- On NODE reduce production exp -> simple_exp 
-- On LET reduce production exp -> simple_exp 
-- On LESS_GREATER reduce production exp -> simple_exp 
-- On LESSRBRACKET reduce production exp -> simple_exp 
-- On INFIX4 reduce production exp -> simple_exp 
-- On INFIX3 reduce production exp -> simple_exp 
-- On INFIX2 reduce production exp -> simple_exp 
-- On INFIX1 reduce production exp -> simple_exp 
-- On INFIX0 reduce production exp -> simple_exp 
-- On FUN reduce production exp -> simple_exp 
-- On EXTERNAL reduce production exp -> simple_exp 
-- On EVERY reduce production exp -> simple_exp 
-- On EQUAL reduce production exp -> simple_exp 
-- On EOF reduce production exp -> simple_exp 
-- On ENFORCE reduce production exp -> simple_exp 
-- On END reduce production exp -> simple_exp 
-- On ELSE reduce production exp -> simple_exp 
-- On DOUBLE_GREATER reduce production exp -> simple_exp 
-- On DOUBLE_DOT reduce production exp -> simple_exp 
-- On DONE reduce production exp -> simple_exp 
-- On DO reduce production exp -> simple_exp 
-- On DEFAULT reduce production exp -> simple_exp 
-- On Constructor reduce production exp -> simple_exp 
-- On CONTINUE reduce production exp -> simple_exp 
-- On CONST reduce production exp -> simple_exp 
-- On COMMA reduce production exp -> simple_exp 
-- On COLONCOLON reduce production exp -> simple_exp 
-- On BOOL reduce production exp -> simple_exp 
-- On BAR reduce production exp -> simple_exp 
-- On ATTRACTIVE reduce production exp -> simple_exp 
-- On AROBASE reduce production exp -> simple_exp 
-- On AND reduce production exp -> simple_exp 
-- On AMPERSAND reduce production exp -> simple_exp 

State 73:
trunc_indexes -> LBRACKETGREATER . exp LESSRBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER . exp LESSRBRACKET trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 192
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 74:
node_name -> qualname . call_params [ LPAREN ]
-- On DOUBLE_LESS shift to state 64
-- On call_params shift to state 75
-- On LPAREN reduce production call_params -> 

State 75:
node_name -> qualname call_params . [ LPAREN ]
-- On LPAREN reduce production node_name -> qualname call_params 

State 76:
_const -> qualified(ident) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
qualname -> qualified(ident) . [ LPAREN DOUBLE_LESS ]
-- On WITH reduce production _const -> qualified(ident) 
-- On WHENOT reduce production _const -> qualified(ident) 
-- On WHEN reduce production _const -> qualified(ident) 
-- On VAR reduce production _const -> qualified(ident) 
-- On VAL reduce production _const -> qualified(ident) 
-- On UNTIL reduce production _const -> qualified(ident) 
-- On UNSAFE reduce production _const -> qualified(ident) 
-- On UNLESS reduce production _const -> qualified(ident) 
-- On TYPE reduce production _const -> qualified(ident) 
-- On THEN reduce production _const -> qualified(ident) 
-- On TEL reduce production _const -> qualified(ident) 
-- On SUBTRACTIVE reduce production _const -> qualified(ident) 
-- On STATE reduce production _const -> qualified(ident) 
-- On STAR reduce production _const -> qualified(ident) 
-- On SEMICOL reduce production _const -> qualified(ident) 
-- On RPAREN_GREATER reduce production _const -> qualified(ident) 
-- On RPAREN reduce production _const -> qualified(ident) 
-- On REACHABLE reduce production _const -> qualified(ident) 
-- On RBRACKET reduce production _const -> qualified(ident) 
-- On RBRACE reduce production _const -> qualified(ident) 
-- On PRAGMA reduce production _const -> qualified(ident) 
-- On POWER reduce production _const -> qualified(ident) 
-- On OR reduce production _const -> qualified(ident) 
-- On ON reduce production _const -> qualified(ident) 
-- On NODE reduce production _const -> qualified(ident) 
-- On LPAREN reduce production qualname -> qualified(ident) 
-- On LET reduce production _const -> qualified(ident) 
-- On LESS_GREATER reduce production _const -> qualified(ident) 
-- On LESSRBRACKET reduce production _const -> qualified(ident) 
-- On LBRACKETGREATER reduce production _const -> qualified(ident) 
-- On LBRACKET reduce production _const -> qualified(ident) 
-- On INFIX4 reduce production _const -> qualified(ident) 
-- On INFIX3 reduce production _const -> qualified(ident) 
-- On INFIX2 reduce production _const -> qualified(ident) 
-- On INFIX1 reduce production _const -> qualified(ident) 
-- On INFIX0 reduce production _const -> qualified(ident) 
-- On FUN reduce production _const -> qualified(ident) 
-- On FBY reduce production _const -> qualified(ident) 
-- On EXTERNAL reduce production _const -> qualified(ident) 
-- On EVERY reduce production _const -> qualified(ident) 
-- On EQUAL reduce production _const -> qualified(ident) 
-- On EOF reduce production _const -> qualified(ident) 
-- On ENFORCE reduce production _const -> qualified(ident) 
-- On END reduce production _const -> qualified(ident) 
-- On ELSE reduce production _const -> qualified(ident) 
-- On DOUBLE_LESS reduce production qualname -> qualified(ident) 
-- On DOUBLE_GREATER reduce production _const -> qualified(ident) 
-- On DOUBLE_DOT reduce production _const -> qualified(ident) 
-- On DOT reduce production _const -> qualified(ident) 
-- On DONE reduce production _const -> qualified(ident) 
-- On DO reduce production _const -> qualified(ident) 
-- On DEFAULT reduce production _const -> qualified(ident) 
-- On Constructor reduce production _const -> qualified(ident) 
-- On CONTINUE reduce production _const -> qualified(ident) 
-- On CONST reduce production _const -> qualified(ident) 
-- On COMMA reduce production _const -> qualified(ident) 
-- On COLONCOLON reduce production _const -> qualified(ident) 
-- On BOOL reduce production _const -> qualified(ident) 
-- On BAR reduce production _const -> qualified(ident) 
-- On ATTRACTIVE reduce production _const -> qualified(ident) 
-- On ARROW reduce production _const -> qualified(ident) 
-- On AROBASE reduce production _const -> qualified(ident) 
-- On AND reduce production _const -> qualified(ident) 
-- On AMPERSAND reduce production _const -> qualified(ident) 

State 77:
constructor -> qualified(Constructor) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production constructor -> qualified(Constructor) 
-- On WHENOT reduce production constructor -> qualified(Constructor) 
-- On WHEN reduce production constructor -> qualified(Constructor) 
-- On VAR reduce production constructor -> qualified(Constructor) 
-- On VAL reduce production constructor -> qualified(Constructor) 
-- On UNTIL reduce production constructor -> qualified(Constructor) 
-- On UNSAFE reduce production constructor -> qualified(Constructor) 
-- On UNLESS reduce production constructor -> qualified(Constructor) 
-- On TYPE reduce production constructor -> qualified(Constructor) 
-- On THEN reduce production constructor -> qualified(Constructor) 
-- On TEL reduce production constructor -> qualified(Constructor) 
-- On SUBTRACTIVE reduce production constructor -> qualified(Constructor) 
-- On STRING reduce production constructor -> qualified(Constructor) 
-- On STATE reduce production constructor -> qualified(Constructor) 
-- On STAR reduce production constructor -> qualified(Constructor) 
-- On SEMICOL reduce production constructor -> qualified(Constructor) 
-- On RPAREN_GREATER reduce production constructor -> qualified(Constructor) 
-- On RPAREN reduce production constructor -> qualified(Constructor) 
-- On REACHABLE reduce production constructor -> qualified(Constructor) 
-- On RBRACKET reduce production constructor -> qualified(Constructor) 
-- On RBRACE reduce production constructor -> qualified(Constructor) 
-- On PRAGMA reduce production constructor -> qualified(Constructor) 
-- On POWER reduce production constructor -> qualified(Constructor) 
-- On OR reduce production constructor -> qualified(Constructor) 
-- On ON reduce production constructor -> qualified(Constructor) 
-- On NODE reduce production constructor -> qualified(Constructor) 
-- On LPAREN reduce production constructor -> qualified(Constructor) 
-- On LET reduce production constructor -> qualified(Constructor) 
-- On LESS_GREATER reduce production constructor -> qualified(Constructor) 
-- On LESSRBRACKET reduce production constructor -> qualified(Constructor) 
-- On LBRACKETGREATER reduce production constructor -> qualified(Constructor) 
-- On LBRACKET reduce production constructor -> qualified(Constructor) 
-- On LBRACE reduce production constructor -> qualified(Constructor) 
-- On INT reduce production constructor -> qualified(Constructor) 
-- On INFIX4 reduce production constructor -> qualified(Constructor) 
-- On INFIX3 reduce production constructor -> qualified(Constructor) 
-- On INFIX2 reduce production constructor -> qualified(Constructor) 
-- On INFIX1 reduce production constructor -> qualified(Constructor) 
-- On INFIX0 reduce production constructor -> qualified(Constructor) 
-- On IDENT reduce production constructor -> qualified(Constructor) 
-- On FUN reduce production constructor -> qualified(Constructor) 
-- On FLOAT reduce production constructor -> qualified(Constructor) 
-- On FBY reduce production constructor -> qualified(Constructor) 
-- On EXTERNAL reduce production constructor -> qualified(Constructor) 
-- On EVERY reduce production constructor -> qualified(Constructor) 
-- On EQUAL reduce production constructor -> qualified(Constructor) 
-- On EOF reduce production constructor -> qualified(Constructor) 
-- On ENFORCE reduce production constructor -> qualified(Constructor) 
-- On END reduce production constructor -> qualified(Constructor) 
-- On ELSE reduce production constructor -> qualified(Constructor) 
-- On DOUBLE_GREATER reduce production constructor -> qualified(Constructor) 
-- On DOUBLE_DOT reduce production constructor -> qualified(Constructor) 
-- On DOT reduce production constructor -> qualified(Constructor) 
-- On DONE reduce production constructor -> qualified(Constructor) 
-- On DO reduce production constructor -> qualified(Constructor) 
-- On DEFAULT reduce production constructor -> qualified(Constructor) 
-- On Constructor reduce production constructor -> qualified(Constructor) 
-- On CONTINUE reduce production constructor -> qualified(Constructor) 
-- On CONST reduce production constructor -> qualified(Constructor) 
-- On COMMA reduce production constructor -> qualified(Constructor) 
-- On COLONCOLON reduce production constructor -> qualified(Constructor) 
-- On BOOL reduce production constructor -> qualified(Constructor) 
-- On BAR reduce production constructor -> qualified(Constructor) 
-- On ATTRACTIVE reduce production constructor -> qualified(Constructor) 
-- On AT reduce production constructor -> qualified(Constructor) 
-- On ARROW reduce production constructor -> qualified(Constructor) 
-- On AROBASE reduce production constructor -> qualified(Constructor) 
-- On AND reduce production constructor -> qualified(Constructor) 
-- On AMPERSAND reduce production constructor -> qualified(Constructor) 

State 78:
_exp -> node_name . LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 79

State 79:
_exp -> node_name LPAREN . exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 80
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exps shift to state 190
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN reduce production exps -> 

State 80:
exps -> nonmtexps . [ RPAREN ]
-- On RPAREN reduce production exps -> nonmtexps 

State 81:
modul -> modul . DOT Constructor [ DOT ]
qualified(Constructor) -> modul . DOT Constructor [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
qualified(ident) -> modul . DOT ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On DOT shift to state 82

State 82:
modul -> modul DOT . Constructor [ DOT ]
qualified(Constructor) -> modul DOT . Constructor [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
qualified(ident) -> modul DOT . ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 83
-- On ident shift to state 84

State 83:
modul -> modul DOT Constructor . [ DOT ]
qualified(Constructor) -> modul DOT Constructor . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production qualified(Constructor) -> modul DOT Constructor 
-- On WHENOT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On WHEN reduce production qualified(Constructor) -> modul DOT Constructor 
-- On VAR reduce production qualified(Constructor) -> modul DOT Constructor 
-- On VAL reduce production qualified(Constructor) -> modul DOT Constructor 
-- On UNTIL reduce production qualified(Constructor) -> modul DOT Constructor 
-- On UNSAFE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On UNLESS reduce production qualified(Constructor) -> modul DOT Constructor 
-- On TYPE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On THEN reduce production qualified(Constructor) -> modul DOT Constructor 
-- On TEL reduce production qualified(Constructor) -> modul DOT Constructor 
-- On SUBTRACTIVE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On STRING reduce production qualified(Constructor) -> modul DOT Constructor 
-- On STATE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On STAR reduce production qualified(Constructor) -> modul DOT Constructor 
-- On SEMICOL reduce production qualified(Constructor) -> modul DOT Constructor 
-- On RPAREN_GREATER reduce production qualified(Constructor) -> modul DOT Constructor 
-- On RPAREN reduce production qualified(Constructor) -> modul DOT Constructor 
-- On REACHABLE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On RBRACKET reduce production qualified(Constructor) -> modul DOT Constructor 
-- On RBRACE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On PRAGMA reduce production qualified(Constructor) -> modul DOT Constructor 
-- On POWER reduce production qualified(Constructor) -> modul DOT Constructor 
-- On OR reduce production qualified(Constructor) -> modul DOT Constructor 
-- On ON reduce production qualified(Constructor) -> modul DOT Constructor 
-- On NODE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On LPAREN reduce production qualified(Constructor) -> modul DOT Constructor 
-- On LET reduce production qualified(Constructor) -> modul DOT Constructor 
-- On LESS_GREATER reduce production qualified(Constructor) -> modul DOT Constructor 
-- On LESSRBRACKET reduce production qualified(Constructor) -> modul DOT Constructor 
-- On LBRACKETGREATER reduce production qualified(Constructor) -> modul DOT Constructor 
-- On LBRACKET reduce production qualified(Constructor) -> modul DOT Constructor 
-- On LBRACE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On INT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On INFIX4 reduce production qualified(Constructor) -> modul DOT Constructor 
-- On INFIX3 reduce production qualified(Constructor) -> modul DOT Constructor 
-- On INFIX2 reduce production qualified(Constructor) -> modul DOT Constructor 
-- On INFIX1 reduce production qualified(Constructor) -> modul DOT Constructor 
-- On INFIX0 reduce production qualified(Constructor) -> modul DOT Constructor 
-- On IDENT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On FUN reduce production qualified(Constructor) -> modul DOT Constructor 
-- On FLOAT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On FBY reduce production qualified(Constructor) -> modul DOT Constructor 
-- On EXTERNAL reduce production qualified(Constructor) -> modul DOT Constructor 
-- On EVERY reduce production qualified(Constructor) -> modul DOT Constructor 
-- On EQUAL reduce production qualified(Constructor) -> modul DOT Constructor 
-- On EOF reduce production qualified(Constructor) -> modul DOT Constructor 
-- On ENFORCE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On END reduce production qualified(Constructor) -> modul DOT Constructor 
-- On ELSE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On DOUBLE_GREATER reduce production qualified(Constructor) -> modul DOT Constructor 
-- On DOUBLE_DOT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On DOT reduce production modul -> modul DOT Constructor 
-- On DOT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On DONE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On DO reduce production qualified(Constructor) -> modul DOT Constructor 
-- On DEFAULT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On Constructor reduce production qualified(Constructor) -> modul DOT Constructor 
-- On CONTINUE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On CONST reduce production qualified(Constructor) -> modul DOT Constructor 
-- On COMMA reduce production qualified(Constructor) -> modul DOT Constructor 
-- On COLONCOLON reduce production qualified(Constructor) -> modul DOT Constructor 
-- On BOOL reduce production qualified(Constructor) -> modul DOT Constructor 
-- On BAR reduce production qualified(Constructor) -> modul DOT Constructor 
-- On ATTRACTIVE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On AT reduce production qualified(Constructor) -> modul DOT Constructor 
-- On ARROW reduce production qualified(Constructor) -> modul DOT Constructor 
-- On AROBASE reduce production qualified(Constructor) -> modul DOT Constructor 
-- On AND reduce production qualified(Constructor) -> modul DOT Constructor 
-- On AMPERSAND reduce production qualified(Constructor) -> modul DOT Constructor 
** Conflict on DOT

State 84:
qualified(ident) -> modul DOT ident . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production qualified(ident) -> modul DOT ident 
-- On WHENOT reduce production qualified(ident) -> modul DOT ident 
-- On WHEN reduce production qualified(ident) -> modul DOT ident 
-- On VAR reduce production qualified(ident) -> modul DOT ident 
-- On VAL reduce production qualified(ident) -> modul DOT ident 
-- On UNTIL reduce production qualified(ident) -> modul DOT ident 
-- On UNSAFE reduce production qualified(ident) -> modul DOT ident 
-- On UNLESS reduce production qualified(ident) -> modul DOT ident 
-- On TYPE reduce production qualified(ident) -> modul DOT ident 
-- On THEN reduce production qualified(ident) -> modul DOT ident 
-- On TEL reduce production qualified(ident) -> modul DOT ident 
-- On SUBTRACTIVE reduce production qualified(ident) -> modul DOT ident 
-- On STRING reduce production qualified(ident) -> modul DOT ident 
-- On STATE reduce production qualified(ident) -> modul DOT ident 
-- On STAR reduce production qualified(ident) -> modul DOT ident 
-- On SEMICOL reduce production qualified(ident) -> modul DOT ident 
-- On RPAREN_GREATER reduce production qualified(ident) -> modul DOT ident 
-- On RPAREN reduce production qualified(ident) -> modul DOT ident 
-- On REACHABLE reduce production qualified(ident) -> modul DOT ident 
-- On RBRACKET reduce production qualified(ident) -> modul DOT ident 
-- On RBRACE reduce production qualified(ident) -> modul DOT ident 
-- On PRAGMA reduce production qualified(ident) -> modul DOT ident 
-- On POWER reduce production qualified(ident) -> modul DOT ident 
-- On OR reduce production qualified(ident) -> modul DOT ident 
-- On ON reduce production qualified(ident) -> modul DOT ident 
-- On NODE reduce production qualified(ident) -> modul DOT ident 
-- On LPAREN reduce production qualified(ident) -> modul DOT ident 
-- On LET reduce production qualified(ident) -> modul DOT ident 
-- On LESS_LPAREN reduce production qualified(ident) -> modul DOT ident 
-- On LESS_GREATER reduce production qualified(ident) -> modul DOT ident 
-- On LESSRBRACKET reduce production qualified(ident) -> modul DOT ident 
-- On LBRACKETGREATER reduce production qualified(ident) -> modul DOT ident 
-- On LBRACKET reduce production qualified(ident) -> modul DOT ident 
-- On LBRACE reduce production qualified(ident) -> modul DOT ident 
-- On INT reduce production qualified(ident) -> modul DOT ident 
-- On INFIX4 reduce production qualified(ident) -> modul DOT ident 
-- On INFIX3 reduce production qualified(ident) -> modul DOT ident 
-- On INFIX2 reduce production qualified(ident) -> modul DOT ident 
-- On INFIX1 reduce production qualified(ident) -> modul DOT ident 
-- On INFIX0 reduce production qualified(ident) -> modul DOT ident 
-- On IDENT reduce production qualified(ident) -> modul DOT ident 
-- On FUN reduce production qualified(ident) -> modul DOT ident 
-- On FLOAT reduce production qualified(ident) -> modul DOT ident 
-- On FBY reduce production qualified(ident) -> modul DOT ident 
-- On EXTERNAL reduce production qualified(ident) -> modul DOT ident 
-- On EVERY reduce production qualified(ident) -> modul DOT ident 
-- On EQUAL reduce production qualified(ident) -> modul DOT ident 
-- On EOF reduce production qualified(ident) -> modul DOT ident 
-- On ENFORCE reduce production qualified(ident) -> modul DOT ident 
-- On END reduce production qualified(ident) -> modul DOT ident 
-- On ELSE reduce production qualified(ident) -> modul DOT ident 
-- On DOUBLE_LESS reduce production qualified(ident) -> modul DOT ident 
-- On DOUBLE_GREATER reduce production qualified(ident) -> modul DOT ident 
-- On DOUBLE_DOT reduce production qualified(ident) -> modul DOT ident 
-- On DOT reduce production qualified(ident) -> modul DOT ident 
-- On DONE reduce production qualified(ident) -> modul DOT ident 
-- On DO reduce production qualified(ident) -> modul DOT ident 
-- On DEFAULT reduce production qualified(ident) -> modul DOT ident 
-- On Constructor reduce production qualified(ident) -> modul DOT ident 
-- On CONTINUE reduce production qualified(ident) -> modul DOT ident 
-- On CONST reduce production qualified(ident) -> modul DOT ident 
-- On COMMA reduce production qualified(ident) -> modul DOT ident 
-- On COLONCOLON reduce production qualified(ident) -> modul DOT ident 
-- On BOOL reduce production qualified(ident) -> modul DOT ident 
-- On BAR reduce production qualified(ident) -> modul DOT ident 
-- On ATTRACTIVE reduce production qualified(ident) -> modul DOT ident 
-- On AT reduce production qualified(ident) -> modul DOT ident 
-- On ARROW reduce production qualified(ident) -> modul DOT ident 
-- On AROBASE reduce production qualified(ident) -> modul DOT ident 
-- On AND reduce production qualified(ident) -> modul DOT ident 
-- On AMPERSAND reduce production qualified(ident) -> modul DOT ident 

State 85:
_exp -> iterator . DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator . DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On DOUBLE_LESS shift to state 86

State 86:
_exp -> iterator DOUBLE_LESS . separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator DOUBLE_LESS . separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 160
-- On separated_nonempty_list(COMMA,simple_exp) shift to state 163
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 87:
_simple_exp -> LBRACKET . array_exp_list RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 158
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 88:
qualname -> ident . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production qualname -> ident 
-- On WHENOT reduce production qualname -> ident 
-- On WHEN reduce production qualname -> ident 
-- On VAR reduce production qualname -> ident 
-- On VAL reduce production qualname -> ident 
-- On UNTIL reduce production qualname -> ident 
-- On UNSAFE reduce production qualname -> ident 
-- On UNLESS reduce production qualname -> ident 
-- On TYPE reduce production qualname -> ident 
-- On THEN reduce production qualname -> ident 
-- On TEL reduce production qualname -> ident 
-- On SUBTRACTIVE reduce production qualname -> ident 
-- On STRING reduce production qualname -> ident 
-- On STATE reduce production qualname -> ident 
-- On STAR reduce production qualname -> ident 
-- On SEMICOL reduce production qualname -> ident 
-- On RPAREN_GREATER reduce production qualname -> ident 
-- On RPAREN reduce production qualname -> ident 
-- On REACHABLE reduce production qualname -> ident 
-- On RBRACKET reduce production qualname -> ident 
-- On RBRACE reduce production qualname -> ident 
-- On PRAGMA reduce production qualname -> ident 
-- On POWER reduce production qualname -> ident 
-- On OR reduce production qualname -> ident 
-- On ON reduce production qualname -> ident 
-- On NODE reduce production qualname -> ident 
-- On LPAREN reduce production qualname -> ident 
-- On LET reduce production qualname -> ident 
-- On LESS_LPAREN reduce production qualname -> ident 
-- On LESS_GREATER reduce production qualname -> ident 
-- On LESSRBRACKET reduce production qualname -> ident 
-- On LBRACKETGREATER reduce production qualname -> ident 
-- On LBRACKET reduce production qualname -> ident 
-- On LBRACE reduce production qualname -> ident 
-- On INT reduce production qualname -> ident 
-- On INFIX4 reduce production qualname -> ident 
-- On INFIX3 reduce production qualname -> ident 
-- On INFIX2 reduce production qualname -> ident 
-- On INFIX1 reduce production qualname -> ident 
-- On INFIX0 reduce production qualname -> ident 
-- On IDENT reduce production qualname -> ident 
-- On FUN reduce production qualname -> ident 
-- On FLOAT reduce production qualname -> ident 
-- On FBY reduce production qualname -> ident 
-- On EXTERNAL reduce production qualname -> ident 
-- On EVERY reduce production qualname -> ident 
-- On EQUAL reduce production qualname -> ident 
-- On EOF reduce production qualname -> ident 
-- On ENFORCE reduce production qualname -> ident 
-- On END reduce production qualname -> ident 
-- On ELSE reduce production qualname -> ident 
-- On DOUBLE_LESS reduce production qualname -> ident 
-- On DOUBLE_GREATER reduce production qualname -> ident 
-- On DOUBLE_DOT reduce production qualname -> ident 
-- On DOT reduce production qualname -> ident 
-- On DONE reduce production qualname -> ident 
-- On DO reduce production qualname -> ident 
-- On DEFAULT reduce production qualname -> ident 
-- On Constructor reduce production qualname -> ident 
-- On CONTINUE reduce production qualname -> ident 
-- On CONST reduce production qualname -> ident 
-- On COMMA reduce production qualname -> ident 
-- On COLONCOLON reduce production qualname -> ident 
-- On BOOL reduce production qualname -> ident 
-- On BAR reduce production qualname -> ident 
-- On ATTRACTIVE reduce production qualname -> ident 
-- On AT reduce production qualname -> ident 
-- On ARROW reduce production qualname -> ident 
-- On AROBASE reduce production qualname -> ident 
-- On AND reduce production qualname -> ident 
-- On AMPERSAND reduce production qualname -> ident 

State 89:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
array_exp_list -> exp . [ RBRACKET DOUBLE_GREATER ]
array_exp_list -> exp . COMMA array_exp_list [ RBRACKET DOUBLE_GREATER ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 156
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On RBRACKET reduce production array_exp_list -> exp 
-- On DOUBLE_GREATER reduce production array_exp_list -> exp 

State 90:
_exp -> exp WHENOT . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On IDENT shift to state 91

State 91:
_exp -> exp WHENOT IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> exp WHENOT IDENT 
-- On WHENOT reduce production _exp -> exp WHENOT IDENT 
-- On WHEN reduce production _exp -> exp WHENOT IDENT 
-- On VAR reduce production _exp -> exp WHENOT IDENT 
-- On VAL reduce production _exp -> exp WHENOT IDENT 
-- On UNTIL reduce production _exp -> exp WHENOT IDENT 
-- On UNSAFE reduce production _exp -> exp WHENOT IDENT 
-- On UNLESS reduce production _exp -> exp WHENOT IDENT 
-- On TYPE reduce production _exp -> exp WHENOT IDENT 
-- On THEN reduce production _exp -> exp WHENOT IDENT 
-- On TEL reduce production _exp -> exp WHENOT IDENT 
-- On SUBTRACTIVE reduce production _exp -> exp WHENOT IDENT 
-- On STATE reduce production _exp -> exp WHENOT IDENT 
-- On STAR reduce production _exp -> exp WHENOT IDENT 
-- On SEMICOL reduce production _exp -> exp WHENOT IDENT 
-- On RPAREN_GREATER reduce production _exp -> exp WHENOT IDENT 
-- On RPAREN reduce production _exp -> exp WHENOT IDENT 
-- On REACHABLE reduce production _exp -> exp WHENOT IDENT 
-- On RBRACKET reduce production _exp -> exp WHENOT IDENT 
-- On RBRACE reduce production _exp -> exp WHENOT IDENT 
-- On PRAGMA reduce production _exp -> exp WHENOT IDENT 
-- On POWER reduce production _exp -> exp WHENOT IDENT 
-- On OR reduce production _exp -> exp WHENOT IDENT 
-- On ON reduce production _exp -> exp WHENOT IDENT 
-- On NODE reduce production _exp -> exp WHENOT IDENT 
-- On LET reduce production _exp -> exp WHENOT IDENT 
-- On LESS_GREATER reduce production _exp -> exp WHENOT IDENT 
-- On LESSRBRACKET reduce production _exp -> exp WHENOT IDENT 
-- On INFIX4 reduce production _exp -> exp WHENOT IDENT 
-- On INFIX3 reduce production _exp -> exp WHENOT IDENT 
-- On INFIX2 reduce production _exp -> exp WHENOT IDENT 
-- On INFIX1 reduce production _exp -> exp WHENOT IDENT 
-- On INFIX0 reduce production _exp -> exp WHENOT IDENT 
-- On FUN reduce production _exp -> exp WHENOT IDENT 
-- On EXTERNAL reduce production _exp -> exp WHENOT IDENT 
-- On EVERY reduce production _exp -> exp WHENOT IDENT 
-- On EQUAL reduce production _exp -> exp WHENOT IDENT 
-- On EOF reduce production _exp -> exp WHENOT IDENT 
-- On ENFORCE reduce production _exp -> exp WHENOT IDENT 
-- On END reduce production _exp -> exp WHENOT IDENT 
-- On ELSE reduce production _exp -> exp WHENOT IDENT 
-- On DOUBLE_GREATER reduce production _exp -> exp WHENOT IDENT 
-- On DOUBLE_DOT reduce production _exp -> exp WHENOT IDENT 
-- On DONE reduce production _exp -> exp WHENOT IDENT 
-- On DO reduce production _exp -> exp WHENOT IDENT 
-- On DEFAULT reduce production _exp -> exp WHENOT IDENT 
-- On Constructor reduce production _exp -> exp WHENOT IDENT 
-- On CONTINUE reduce production _exp -> exp WHENOT IDENT 
-- On CONST reduce production _exp -> exp WHENOT IDENT 
-- On COMMA reduce production _exp -> exp WHENOT IDENT 
-- On COLONCOLON reduce production _exp -> exp WHENOT IDENT 
-- On BOOL reduce production _exp -> exp WHENOT IDENT 
-- On BAR reduce production _exp -> exp WHENOT IDENT 
-- On ATTRACTIVE reduce production _exp -> exp WHENOT IDENT 
-- On AROBASE reduce production _exp -> exp WHENOT IDENT 
-- On AND reduce production _exp -> exp WHENOT IDENT 
-- On AMPERSAND reduce production _exp -> exp WHENOT IDENT 

State 92:
_exp -> exp WHEN . constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp WHEN . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp WHEN . NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On NOT shift to state 93
-- On IDENT shift to state 95
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 99
-- On constructor shift to state 103

State 93:
_exp -> exp WHEN NOT . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On IDENT shift to state 94

State 94:
_exp -> exp WHEN NOT IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> exp WHEN NOT IDENT 
-- On WHENOT reduce production _exp -> exp WHEN NOT IDENT 
-- On WHEN reduce production _exp -> exp WHEN NOT IDENT 
-- On VAR reduce production _exp -> exp WHEN NOT IDENT 
-- On VAL reduce production _exp -> exp WHEN NOT IDENT 
-- On UNTIL reduce production _exp -> exp WHEN NOT IDENT 
-- On UNSAFE reduce production _exp -> exp WHEN NOT IDENT 
-- On UNLESS reduce production _exp -> exp WHEN NOT IDENT 
-- On TYPE reduce production _exp -> exp WHEN NOT IDENT 
-- On THEN reduce production _exp -> exp WHEN NOT IDENT 
-- On TEL reduce production _exp -> exp WHEN NOT IDENT 
-- On SUBTRACTIVE reduce production _exp -> exp WHEN NOT IDENT 
-- On STATE reduce production _exp -> exp WHEN NOT IDENT 
-- On STAR reduce production _exp -> exp WHEN NOT IDENT 
-- On SEMICOL reduce production _exp -> exp WHEN NOT IDENT 
-- On RPAREN_GREATER reduce production _exp -> exp WHEN NOT IDENT 
-- On RPAREN reduce production _exp -> exp WHEN NOT IDENT 
-- On REACHABLE reduce production _exp -> exp WHEN NOT IDENT 
-- On RBRACKET reduce production _exp -> exp WHEN NOT IDENT 
-- On RBRACE reduce production _exp -> exp WHEN NOT IDENT 
-- On PRAGMA reduce production _exp -> exp WHEN NOT IDENT 
-- On POWER reduce production _exp -> exp WHEN NOT IDENT 
-- On OR reduce production _exp -> exp WHEN NOT IDENT 
-- On ON reduce production _exp -> exp WHEN NOT IDENT 
-- On NODE reduce production _exp -> exp WHEN NOT IDENT 
-- On LET reduce production _exp -> exp WHEN NOT IDENT 
-- On LESS_GREATER reduce production _exp -> exp WHEN NOT IDENT 
-- On LESSRBRACKET reduce production _exp -> exp WHEN NOT IDENT 
-- On INFIX4 reduce production _exp -> exp WHEN NOT IDENT 
-- On INFIX3 reduce production _exp -> exp WHEN NOT IDENT 
-- On INFIX2 reduce production _exp -> exp WHEN NOT IDENT 
-- On INFIX1 reduce production _exp -> exp WHEN NOT IDENT 
-- On INFIX0 reduce production _exp -> exp WHEN NOT IDENT 
-- On FUN reduce production _exp -> exp WHEN NOT IDENT 
-- On EXTERNAL reduce production _exp -> exp WHEN NOT IDENT 
-- On EVERY reduce production _exp -> exp WHEN NOT IDENT 
-- On EQUAL reduce production _exp -> exp WHEN NOT IDENT 
-- On EOF reduce production _exp -> exp WHEN NOT IDENT 
-- On ENFORCE reduce production _exp -> exp WHEN NOT IDENT 
-- On END reduce production _exp -> exp WHEN NOT IDENT 
-- On ELSE reduce production _exp -> exp WHEN NOT IDENT 
-- On DOUBLE_GREATER reduce production _exp -> exp WHEN NOT IDENT 
-- On DOUBLE_DOT reduce production _exp -> exp WHEN NOT IDENT 
-- On DONE reduce production _exp -> exp WHEN NOT IDENT 
-- On DO reduce production _exp -> exp WHEN NOT IDENT 
-- On DEFAULT reduce production _exp -> exp WHEN NOT IDENT 
-- On Constructor reduce production _exp -> exp WHEN NOT IDENT 
-- On CONTINUE reduce production _exp -> exp WHEN NOT IDENT 
-- On CONST reduce production _exp -> exp WHEN NOT IDENT 
-- On COMMA reduce production _exp -> exp WHEN NOT IDENT 
-- On COLONCOLON reduce production _exp -> exp WHEN NOT IDENT 
-- On BOOL reduce production _exp -> exp WHEN NOT IDENT 
-- On BAR reduce production _exp -> exp WHEN NOT IDENT 
-- On ATTRACTIVE reduce production _exp -> exp WHEN NOT IDENT 
-- On AROBASE reduce production _exp -> exp WHEN NOT IDENT 
-- On AND reduce production _exp -> exp WHEN NOT IDENT 
-- On AMPERSAND reduce production _exp -> exp WHEN NOT IDENT 

State 95:
_exp -> exp WHEN IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> exp WHEN IDENT 
-- On WHENOT reduce production _exp -> exp WHEN IDENT 
-- On WHEN reduce production _exp -> exp WHEN IDENT 
-- On VAR reduce production _exp -> exp WHEN IDENT 
-- On VAL reduce production _exp -> exp WHEN IDENT 
-- On UNTIL reduce production _exp -> exp WHEN IDENT 
-- On UNSAFE reduce production _exp -> exp WHEN IDENT 
-- On UNLESS reduce production _exp -> exp WHEN IDENT 
-- On TYPE reduce production _exp -> exp WHEN IDENT 
-- On THEN reduce production _exp -> exp WHEN IDENT 
-- On TEL reduce production _exp -> exp WHEN IDENT 
-- On SUBTRACTIVE reduce production _exp -> exp WHEN IDENT 
-- On STATE reduce production _exp -> exp WHEN IDENT 
-- On STAR reduce production _exp -> exp WHEN IDENT 
-- On SEMICOL reduce production _exp -> exp WHEN IDENT 
-- On RPAREN_GREATER reduce production _exp -> exp WHEN IDENT 
-- On RPAREN reduce production _exp -> exp WHEN IDENT 
-- On REACHABLE reduce production _exp -> exp WHEN IDENT 
-- On RBRACKET reduce production _exp -> exp WHEN IDENT 
-- On RBRACE reduce production _exp -> exp WHEN IDENT 
-- On PRAGMA reduce production _exp -> exp WHEN IDENT 
-- On POWER reduce production _exp -> exp WHEN IDENT 
-- On OR reduce production _exp -> exp WHEN IDENT 
-- On ON reduce production _exp -> exp WHEN IDENT 
-- On NODE reduce production _exp -> exp WHEN IDENT 
-- On LET reduce production _exp -> exp WHEN IDENT 
-- On LESS_GREATER reduce production _exp -> exp WHEN IDENT 
-- On LESSRBRACKET reduce production _exp -> exp WHEN IDENT 
-- On INFIX4 reduce production _exp -> exp WHEN IDENT 
-- On INFIX3 reduce production _exp -> exp WHEN IDENT 
-- On INFIX2 reduce production _exp -> exp WHEN IDENT 
-- On INFIX1 reduce production _exp -> exp WHEN IDENT 
-- On INFIX0 reduce production _exp -> exp WHEN IDENT 
-- On FUN reduce production _exp -> exp WHEN IDENT 
-- On EXTERNAL reduce production _exp -> exp WHEN IDENT 
-- On EVERY reduce production _exp -> exp WHEN IDENT 
-- On EQUAL reduce production _exp -> exp WHEN IDENT 
-- On EOF reduce production _exp -> exp WHEN IDENT 
-- On ENFORCE reduce production _exp -> exp WHEN IDENT 
-- On END reduce production _exp -> exp WHEN IDENT 
-- On ELSE reduce production _exp -> exp WHEN IDENT 
-- On DOUBLE_GREATER reduce production _exp -> exp WHEN IDENT 
-- On DOUBLE_DOT reduce production _exp -> exp WHEN IDENT 
-- On DONE reduce production _exp -> exp WHEN IDENT 
-- On DO reduce production _exp -> exp WHEN IDENT 
-- On DEFAULT reduce production _exp -> exp WHEN IDENT 
-- On Constructor reduce production _exp -> exp WHEN IDENT 
-- On CONTINUE reduce production _exp -> exp WHEN IDENT 
-- On CONST reduce production _exp -> exp WHEN IDENT 
-- On COMMA reduce production _exp -> exp WHEN IDENT 
-- On COLONCOLON reduce production _exp -> exp WHEN IDENT 
-- On BOOL reduce production _exp -> exp WHEN IDENT 
-- On BAR reduce production _exp -> exp WHEN IDENT 
-- On ATTRACTIVE reduce production _exp -> exp WHEN IDENT 
-- On AROBASE reduce production _exp -> exp WHEN IDENT 
-- On AND reduce production _exp -> exp WHEN IDENT 
-- On AMPERSAND reduce production _exp -> exp WHEN IDENT 

State 96:
constructor_or_bool -> BOOL . [ VAR LPAREN DO ARROW ]
-- On VAR reduce production constructor_or_bool -> BOOL 
-- On LPAREN reduce production constructor_or_bool -> BOOL 
-- On DO reduce production constructor_or_bool -> BOOL 
-- On ARROW reduce production constructor_or_bool -> BOOL 

State 97:
modul -> modul . DOT Constructor [ DOT ]
qualified(Constructor) -> modul . DOT Constructor [ VAR LPAREN DO ARROW ]
-- On DOT shift to state 98

State 98:
modul -> modul DOT . Constructor [ DOT ]
qualified(Constructor) -> modul DOT . Constructor [ VAR LPAREN DO ARROW ]
-- On Constructor shift to state 83

State 99:
_exp -> exp WHEN constructor_or_bool . LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 100

State 100:
_exp -> exp WHEN constructor_or_bool LPAREN . IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On IDENT shift to state 101

State 101:
_exp -> exp WHEN constructor_or_bool LPAREN IDENT . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 102

State 102:
_exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On WHENOT reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On WHEN reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On VAR reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On VAL reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On UNTIL reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On UNSAFE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On UNLESS reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On TYPE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On THEN reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On TEL reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On SUBTRACTIVE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On STATE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On STAR reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On SEMICOL reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On RPAREN_GREATER reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On RPAREN reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On REACHABLE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On RBRACKET reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On RBRACE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On PRAGMA reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On POWER reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On OR reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On ON reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On NODE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On LET reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On LESS_GREATER reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On LESSRBRACKET reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On INFIX4 reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On INFIX3 reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On INFIX2 reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On INFIX1 reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On INFIX0 reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On FUN reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On EXTERNAL reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On EVERY reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On EQUAL reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On EOF reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On ENFORCE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On END reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On ELSE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On DOUBLE_GREATER reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On DOUBLE_DOT reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On DONE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On DO reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On DEFAULT reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On Constructor reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On CONTINUE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On CONST reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On COMMA reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On COLONCOLON reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On BOOL reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On BAR reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On ATTRACTIVE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On AROBASE reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On AND reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 
-- On AMPERSAND reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN 

State 103:
constructor_or_bool -> constructor . [ VAR LPAREN DO ARROW ]
-- On VAR reduce production constructor_or_bool -> constructor 
-- On LPAREN reduce production constructor_or_bool -> constructor 
-- On DO reduce production constructor_or_bool -> constructor 
-- On ARROW reduce production constructor_or_bool -> constructor 

State 104:
_exp -> exp SUBTRACTIVE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 105
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 105:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp SUBTRACTIVE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On WITH reduce production _exp -> exp SUBTRACTIVE exp 
-- On WHENOT reduce production _exp -> exp SUBTRACTIVE exp 
-- On WHEN reduce production _exp -> exp SUBTRACTIVE exp 
-- On VAR reduce production _exp -> exp SUBTRACTIVE exp 
-- On VAL reduce production _exp -> exp SUBTRACTIVE exp 
-- On UNTIL reduce production _exp -> exp SUBTRACTIVE exp 
-- On UNSAFE reduce production _exp -> exp SUBTRACTIVE exp 
-- On UNLESS reduce production _exp -> exp SUBTRACTIVE exp 
-- On TYPE reduce production _exp -> exp SUBTRACTIVE exp 
-- On THEN reduce production _exp -> exp SUBTRACTIVE exp 
-- On TEL reduce production _exp -> exp SUBTRACTIVE exp 
-- On SUBTRACTIVE reduce production _exp -> exp SUBTRACTIVE exp 
-- On STATE reduce production _exp -> exp SUBTRACTIVE exp 
-- On SEMICOL reduce production _exp -> exp SUBTRACTIVE exp 
-- On RPAREN_GREATER reduce production _exp -> exp SUBTRACTIVE exp 
-- On RPAREN reduce production _exp -> exp SUBTRACTIVE exp 
-- On REACHABLE reduce production _exp -> exp SUBTRACTIVE exp 
-- On RBRACKET reduce production _exp -> exp SUBTRACTIVE exp 
-- On RBRACE reduce production _exp -> exp SUBTRACTIVE exp 
-- On PRAGMA reduce production _exp -> exp SUBTRACTIVE exp 
-- On OR reduce production _exp -> exp SUBTRACTIVE exp 
-- On ON reduce production _exp -> exp SUBTRACTIVE exp 
-- On NODE reduce production _exp -> exp SUBTRACTIVE exp 
-- On LET reduce production _exp -> exp SUBTRACTIVE exp 
-- On LESS_GREATER reduce production _exp -> exp SUBTRACTIVE exp 
-- On LESSRBRACKET reduce production _exp -> exp SUBTRACTIVE exp 
-- On INFIX2 reduce production _exp -> exp SUBTRACTIVE exp 
-- On INFIX1 reduce production _exp -> exp SUBTRACTIVE exp 
-- On INFIX0 reduce production _exp -> exp SUBTRACTIVE exp 
-- On FUN reduce production _exp -> exp SUBTRACTIVE exp 
-- On EXTERNAL reduce production _exp -> exp SUBTRACTIVE exp 
-- On EVERY reduce production _exp -> exp SUBTRACTIVE exp 
-- On EQUAL reduce production _exp -> exp SUBTRACTIVE exp 
-- On EOF reduce production _exp -> exp SUBTRACTIVE exp 
-- On ENFORCE reduce production _exp -> exp SUBTRACTIVE exp 
-- On END reduce production _exp -> exp SUBTRACTIVE exp 
-- On ELSE reduce production _exp -> exp SUBTRACTIVE exp 
-- On DOUBLE_GREATER reduce production _exp -> exp SUBTRACTIVE exp 
-- On DOUBLE_DOT reduce production _exp -> exp SUBTRACTIVE exp 
-- On DONE reduce production _exp -> exp SUBTRACTIVE exp 
-- On DO reduce production _exp -> exp SUBTRACTIVE exp 
-- On DEFAULT reduce production _exp -> exp SUBTRACTIVE exp 
-- On Constructor reduce production _exp -> exp SUBTRACTIVE exp 
-- On CONTINUE reduce production _exp -> exp SUBTRACTIVE exp 
-- On CONST reduce production _exp -> exp SUBTRACTIVE exp 
-- On COMMA reduce production _exp -> exp SUBTRACTIVE exp 
-- On COLONCOLON reduce production _exp -> exp SUBTRACTIVE exp 
-- On BOOL reduce production _exp -> exp SUBTRACTIVE exp 
-- On BAR reduce production _exp -> exp SUBTRACTIVE exp 
-- On ATTRACTIVE reduce production _exp -> exp SUBTRACTIVE exp 
-- On AROBASE reduce production _exp -> exp SUBTRACTIVE exp 
-- On AND reduce production _exp -> exp SUBTRACTIVE exp 
-- On AMPERSAND reduce production _exp -> exp SUBTRACTIVE exp 

State 106:
_exp -> exp STAR . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 107
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 107:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp STAR exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On WITH reduce production _exp -> exp STAR exp 
-- On WHENOT reduce production _exp -> exp STAR exp 
-- On WHEN reduce production _exp -> exp STAR exp 
-- On VAR reduce production _exp -> exp STAR exp 
-- On VAL reduce production _exp -> exp STAR exp 
-- On UNTIL reduce production _exp -> exp STAR exp 
-- On UNSAFE reduce production _exp -> exp STAR exp 
-- On UNLESS reduce production _exp -> exp STAR exp 
-- On TYPE reduce production _exp -> exp STAR exp 
-- On THEN reduce production _exp -> exp STAR exp 
-- On TEL reduce production _exp -> exp STAR exp 
-- On SUBTRACTIVE reduce production _exp -> exp STAR exp 
-- On STATE reduce production _exp -> exp STAR exp 
-- On STAR reduce production _exp -> exp STAR exp 
-- On SEMICOL reduce production _exp -> exp STAR exp 
-- On RPAREN_GREATER reduce production _exp -> exp STAR exp 
-- On RPAREN reduce production _exp -> exp STAR exp 
-- On REACHABLE reduce production _exp -> exp STAR exp 
-- On RBRACKET reduce production _exp -> exp STAR exp 
-- On RBRACE reduce production _exp -> exp STAR exp 
-- On PRAGMA reduce production _exp -> exp STAR exp 
-- On OR reduce production _exp -> exp STAR exp 
-- On ON reduce production _exp -> exp STAR exp 
-- On NODE reduce production _exp -> exp STAR exp 
-- On LET reduce production _exp -> exp STAR exp 
-- On LESS_GREATER reduce production _exp -> exp STAR exp 
-- On LESSRBRACKET reduce production _exp -> exp STAR exp 
-- On INFIX3 reduce production _exp -> exp STAR exp 
-- On INFIX2 reduce production _exp -> exp STAR exp 
-- On INFIX1 reduce production _exp -> exp STAR exp 
-- On INFIX0 reduce production _exp -> exp STAR exp 
-- On FUN reduce production _exp -> exp STAR exp 
-- On EXTERNAL reduce production _exp -> exp STAR exp 
-- On EVERY reduce production _exp -> exp STAR exp 
-- On EQUAL reduce production _exp -> exp STAR exp 
-- On EOF reduce production _exp -> exp STAR exp 
-- On ENFORCE reduce production _exp -> exp STAR exp 
-- On END reduce production _exp -> exp STAR exp 
-- On ELSE reduce production _exp -> exp STAR exp 
-- On DOUBLE_GREATER reduce production _exp -> exp STAR exp 
-- On DOUBLE_DOT reduce production _exp -> exp STAR exp 
-- On DONE reduce production _exp -> exp STAR exp 
-- On DO reduce production _exp -> exp STAR exp 
-- On DEFAULT reduce production _exp -> exp STAR exp 
-- On Constructor reduce production _exp -> exp STAR exp 
-- On CONTINUE reduce production _exp -> exp STAR exp 
-- On CONST reduce production _exp -> exp STAR exp 
-- On COMMA reduce production _exp -> exp STAR exp 
-- On COLONCOLON reduce production _exp -> exp STAR exp 
-- On BOOL reduce production _exp -> exp STAR exp 
-- On BAR reduce production _exp -> exp STAR exp 
-- On ATTRACTIVE reduce production _exp -> exp STAR exp 
-- On AROBASE reduce production _exp -> exp STAR exp 
-- On AND reduce production _exp -> exp STAR exp 
-- On AMPERSAND reduce production _exp -> exp STAR exp 

State 108:
_exp -> exp POWER . separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 149
-- On separated_nonempty_list(POWER,simple_exp) shift to state 155
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 109:
_simple_exp -> LBRACE . field_exp_list RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 110
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
-- On field_exp_list shift to state 143
-- On field_exp shift to state 145

State 110:
field_exp -> qualname . EQUAL exp [ SEMICOL RBRACE ]
-- On EQUAL shift to state 111

State 111:
field_exp -> qualname EQUAL . exp [ SEMICOL RBRACE ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 112
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 112:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
field_exp -> qualname EQUAL exp . [ SEMICOL RBRACE ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On SEMICOL reduce production field_exp -> qualname EQUAL exp 
-- On RBRACE reduce production field_exp -> qualname EQUAL exp 

State 113:
_exp -> exp OR . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 114
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 114:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp OR exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On WITH reduce production _exp -> exp OR exp 
-- On VAR reduce production _exp -> exp OR exp 
-- On VAL reduce production _exp -> exp OR exp 
-- On UNTIL reduce production _exp -> exp OR exp 
-- On UNSAFE reduce production _exp -> exp OR exp 
-- On UNLESS reduce production _exp -> exp OR exp 
-- On TYPE reduce production _exp -> exp OR exp 
-- On THEN reduce production _exp -> exp OR exp 
-- On TEL reduce production _exp -> exp OR exp 
-- On STATE reduce production _exp -> exp OR exp 
-- On SEMICOL reduce production _exp -> exp OR exp 
-- On RPAREN_GREATER reduce production _exp -> exp OR exp 
-- On RPAREN reduce production _exp -> exp OR exp 
-- On REACHABLE reduce production _exp -> exp OR exp 
-- On RBRACKET reduce production _exp -> exp OR exp 
-- On RBRACE reduce production _exp -> exp OR exp 
-- On PRAGMA reduce production _exp -> exp OR exp 
-- On OR reduce production _exp -> exp OR exp 
-- On ON reduce production _exp -> exp OR exp 
-- On NODE reduce production _exp -> exp OR exp 
-- On LET reduce production _exp -> exp OR exp 
-- On LESSRBRACKET reduce production _exp -> exp OR exp 
-- On FUN reduce production _exp -> exp OR exp 
-- On EXTERNAL reduce production _exp -> exp OR exp 
-- On EVERY reduce production _exp -> exp OR exp 
-- On EOF reduce production _exp -> exp OR exp 
-- On ENFORCE reduce production _exp -> exp OR exp 
-- On END reduce production _exp -> exp OR exp 
-- On ELSE reduce production _exp -> exp OR exp 
-- On DOUBLE_GREATER reduce production _exp -> exp OR exp 
-- On DOUBLE_DOT reduce production _exp -> exp OR exp 
-- On DONE reduce production _exp -> exp OR exp 
-- On DO reduce production _exp -> exp OR exp 
-- On DEFAULT reduce production _exp -> exp OR exp 
-- On Constructor reduce production _exp -> exp OR exp 
-- On CONTINUE reduce production _exp -> exp OR exp 
-- On CONST reduce production _exp -> exp OR exp 
-- On COMMA reduce production _exp -> exp OR exp 
-- On COLONCOLON reduce production _exp -> exp OR exp 
-- On BOOL reduce production _exp -> exp OR exp 
-- On BAR reduce production _exp -> exp OR exp 
-- On ATTRACTIVE reduce production _exp -> exp OR exp 
-- On AROBASE reduce production _exp -> exp OR exp 

State 115:
_exp -> exp LESS_GREATER . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 116
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 116:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp LESS_GREATER exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On WITH reduce production _exp -> exp LESS_GREATER exp 
-- On VAR reduce production _exp -> exp LESS_GREATER exp 
-- On VAL reduce production _exp -> exp LESS_GREATER exp 
-- On UNTIL reduce production _exp -> exp LESS_GREATER exp 
-- On UNSAFE reduce production _exp -> exp LESS_GREATER exp 
-- On UNLESS reduce production _exp -> exp LESS_GREATER exp 
-- On TYPE reduce production _exp -> exp LESS_GREATER exp 
-- On THEN reduce production _exp -> exp LESS_GREATER exp 
-- On TEL reduce production _exp -> exp LESS_GREATER exp 
-- On STATE reduce production _exp -> exp LESS_GREATER exp 
-- On SEMICOL reduce production _exp -> exp LESS_GREATER exp 
-- On RPAREN_GREATER reduce production _exp -> exp LESS_GREATER exp 
-- On RPAREN reduce production _exp -> exp LESS_GREATER exp 
-- On REACHABLE reduce production _exp -> exp LESS_GREATER exp 
-- On RBRACKET reduce production _exp -> exp LESS_GREATER exp 
-- On RBRACE reduce production _exp -> exp LESS_GREATER exp 
-- On PRAGMA reduce production _exp -> exp LESS_GREATER exp 
-- On OR reduce production _exp -> exp LESS_GREATER exp 
-- On ON reduce production _exp -> exp LESS_GREATER exp 
-- On NODE reduce production _exp -> exp LESS_GREATER exp 
-- On LET reduce production _exp -> exp LESS_GREATER exp 
-- On LESS_GREATER reduce production _exp -> exp LESS_GREATER exp 
-- On LESSRBRACKET reduce production _exp -> exp LESS_GREATER exp 
-- On INFIX0 reduce production _exp -> exp LESS_GREATER exp 
-- On FUN reduce production _exp -> exp LESS_GREATER exp 
-- On EXTERNAL reduce production _exp -> exp LESS_GREATER exp 
-- On EVERY reduce production _exp -> exp LESS_GREATER exp 
-- On EQUAL reduce production _exp -> exp LESS_GREATER exp 
-- On EOF reduce production _exp -> exp LESS_GREATER exp 
-- On ENFORCE reduce production _exp -> exp LESS_GREATER exp 
-- On END reduce production _exp -> exp LESS_GREATER exp 
-- On ELSE reduce production _exp -> exp LESS_GREATER exp 
-- On DOUBLE_GREATER reduce production _exp -> exp LESS_GREATER exp 
-- On DOUBLE_DOT reduce production _exp -> exp LESS_GREATER exp 
-- On DONE reduce production _exp -> exp LESS_GREATER exp 
-- On DO reduce production _exp -> exp LESS_GREATER exp 
-- On DEFAULT reduce production _exp -> exp LESS_GREATER exp 
-- On Constructor reduce production _exp -> exp LESS_GREATER exp 
-- On CONTINUE reduce production _exp -> exp LESS_GREATER exp 
-- On CONST reduce production _exp -> exp LESS_GREATER exp 
-- On COMMA reduce production _exp -> exp LESS_GREATER exp 
-- On COLONCOLON reduce production _exp -> exp LESS_GREATER exp 
-- On BOOL reduce production _exp -> exp LESS_GREATER exp 
-- On BAR reduce production _exp -> exp LESS_GREATER exp 
-- On ATTRACTIVE reduce production _exp -> exp LESS_GREATER exp 
-- On AROBASE reduce production _exp -> exp LESS_GREATER exp 
-- On AND reduce production _exp -> exp LESS_GREATER exp 
-- On AMPERSAND reduce production _exp -> exp LESS_GREATER exp 

State 117:
_exp -> exp INFIX4 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 118
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 118:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX4 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On POWER shift to state 108
-- On WITH reduce production _exp -> exp INFIX4 exp 
-- On WHENOT reduce production _exp -> exp INFIX4 exp 
-- On WHEN reduce production _exp -> exp INFIX4 exp 
-- On VAR reduce production _exp -> exp INFIX4 exp 
-- On VAL reduce production _exp -> exp INFIX4 exp 
-- On UNTIL reduce production _exp -> exp INFIX4 exp 
-- On UNSAFE reduce production _exp -> exp INFIX4 exp 
-- On UNLESS reduce production _exp -> exp INFIX4 exp 
-- On TYPE reduce production _exp -> exp INFIX4 exp 
-- On THEN reduce production _exp -> exp INFIX4 exp 
-- On TEL reduce production _exp -> exp INFIX4 exp 
-- On SUBTRACTIVE reduce production _exp -> exp INFIX4 exp 
-- On STATE reduce production _exp -> exp INFIX4 exp 
-- On STAR reduce production _exp -> exp INFIX4 exp 
-- On SEMICOL reduce production _exp -> exp INFIX4 exp 
-- On RPAREN_GREATER reduce production _exp -> exp INFIX4 exp 
-- On RPAREN reduce production _exp -> exp INFIX4 exp 
-- On REACHABLE reduce production _exp -> exp INFIX4 exp 
-- On RBRACKET reduce production _exp -> exp INFIX4 exp 
-- On RBRACE reduce production _exp -> exp INFIX4 exp 
-- On PRAGMA reduce production _exp -> exp INFIX4 exp 
-- On OR reduce production _exp -> exp INFIX4 exp 
-- On ON reduce production _exp -> exp INFIX4 exp 
-- On NODE reduce production _exp -> exp INFIX4 exp 
-- On LET reduce production _exp -> exp INFIX4 exp 
-- On LESS_GREATER reduce production _exp -> exp INFIX4 exp 
-- On LESSRBRACKET reduce production _exp -> exp INFIX4 exp 
-- On INFIX4 reduce production _exp -> exp INFIX4 exp 
-- On INFIX3 reduce production _exp -> exp INFIX4 exp 
-- On INFIX2 reduce production _exp -> exp INFIX4 exp 
-- On INFIX1 reduce production _exp -> exp INFIX4 exp 
-- On INFIX0 reduce production _exp -> exp INFIX4 exp 
-- On FUN reduce production _exp -> exp INFIX4 exp 
-- On EXTERNAL reduce production _exp -> exp INFIX4 exp 
-- On EVERY reduce production _exp -> exp INFIX4 exp 
-- On EQUAL reduce production _exp -> exp INFIX4 exp 
-- On EOF reduce production _exp -> exp INFIX4 exp 
-- On ENFORCE reduce production _exp -> exp INFIX4 exp 
-- On END reduce production _exp -> exp INFIX4 exp 
-- On ELSE reduce production _exp -> exp INFIX4 exp 
-- On DOUBLE_GREATER reduce production _exp -> exp INFIX4 exp 
-- On DOUBLE_DOT reduce production _exp -> exp INFIX4 exp 
-- On DONE reduce production _exp -> exp INFIX4 exp 
-- On DO reduce production _exp -> exp INFIX4 exp 
-- On DEFAULT reduce production _exp -> exp INFIX4 exp 
-- On Constructor reduce production _exp -> exp INFIX4 exp 
-- On CONTINUE reduce production _exp -> exp INFIX4 exp 
-- On CONST reduce production _exp -> exp INFIX4 exp 
-- On COMMA reduce production _exp -> exp INFIX4 exp 
-- On COLONCOLON reduce production _exp -> exp INFIX4 exp 
-- On BOOL reduce production _exp -> exp INFIX4 exp 
-- On BAR reduce production _exp -> exp INFIX4 exp 
-- On ATTRACTIVE reduce production _exp -> exp INFIX4 exp 
-- On AROBASE reduce production _exp -> exp INFIX4 exp 
-- On AND reduce production _exp -> exp INFIX4 exp 
-- On AMPERSAND reduce production _exp -> exp INFIX4 exp 

State 119:
_const -> constructor . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _const -> constructor 
-- On WHENOT reduce production _const -> constructor 
-- On WHEN reduce production _const -> constructor 
-- On VAR reduce production _const -> constructor 
-- On VAL reduce production _const -> constructor 
-- On UNTIL reduce production _const -> constructor 
-- On UNSAFE reduce production _const -> constructor 
-- On UNLESS reduce production _const -> constructor 
-- On TYPE reduce production _const -> constructor 
-- On THEN reduce production _const -> constructor 
-- On TEL reduce production _const -> constructor 
-- On SUBTRACTIVE reduce production _const -> constructor 
-- On STRING reduce production _const -> constructor 
-- On STATE reduce production _const -> constructor 
-- On STAR reduce production _const -> constructor 
-- On SEMICOL reduce production _const -> constructor 
-- On RPAREN_GREATER reduce production _const -> constructor 
-- On RPAREN reduce production _const -> constructor 
-- On REACHABLE reduce production _const -> constructor 
-- On RBRACKET reduce production _const -> constructor 
-- On RBRACE reduce production _const -> constructor 
-- On PRAGMA reduce production _const -> constructor 
-- On POWER reduce production _const -> constructor 
-- On OR reduce production _const -> constructor 
-- On ON reduce production _const -> constructor 
-- On NODE reduce production _const -> constructor 
-- On LPAREN reduce production _const -> constructor 
-- On LET reduce production _const -> constructor 
-- On LESS_GREATER reduce production _const -> constructor 
-- On LESSRBRACKET reduce production _const -> constructor 
-- On LBRACKETGREATER reduce production _const -> constructor 
-- On LBRACKET reduce production _const -> constructor 
-- On LBRACE reduce production _const -> constructor 
-- On INT reduce production _const -> constructor 
-- On INFIX4 reduce production _const -> constructor 
-- On INFIX3 reduce production _const -> constructor 
-- On INFIX2 reduce production _const -> constructor 
-- On INFIX1 reduce production _const -> constructor 
-- On INFIX0 reduce production _const -> constructor 
-- On IDENT reduce production _const -> constructor 
-- On FUN reduce production _const -> constructor 
-- On FLOAT reduce production _const -> constructor 
-- On FBY reduce production _const -> constructor 
-- On EXTERNAL reduce production _const -> constructor 
-- On EVERY reduce production _const -> constructor 
-- On EQUAL reduce production _const -> constructor 
-- On EOF reduce production _const -> constructor 
-- On ENFORCE reduce production _const -> constructor 
-- On END reduce production _const -> constructor 
-- On ELSE reduce production _const -> constructor 
-- On DOUBLE_GREATER reduce production _const -> constructor 
-- On DOUBLE_DOT reduce production _const -> constructor 
-- On DOT reduce production _const -> constructor 
-- On DONE reduce production _const -> constructor 
-- On DO reduce production _const -> constructor 
-- On DEFAULT reduce production _const -> constructor 
-- On Constructor reduce production _const -> constructor 
-- On CONTINUE reduce production _const -> constructor 
-- On CONST reduce production _const -> constructor 
-- On COMMA reduce production _const -> constructor 
-- On COLONCOLON reduce production _const -> constructor 
-- On BOOL reduce production _const -> constructor 
-- On BAR reduce production _const -> constructor 
-- On ATTRACTIVE reduce production _const -> constructor 
-- On AT reduce production _const -> constructor 
-- On ARROW reduce production _const -> constructor 
-- On AROBASE reduce production _const -> constructor 
-- On AND reduce production _const -> constructor 
-- On AMPERSAND reduce production _const -> constructor 

State 120:
_simple_exp -> const . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _simple_exp -> const 
-- On WHENOT reduce production _simple_exp -> const 
-- On WHEN reduce production _simple_exp -> const 
-- On VAR reduce production _simple_exp -> const 
-- On VAL reduce production _simple_exp -> const 
-- On UNTIL reduce production _simple_exp -> const 
-- On UNSAFE reduce production _simple_exp -> const 
-- On UNLESS reduce production _simple_exp -> const 
-- On TYPE reduce production _simple_exp -> const 
-- On THEN reduce production _simple_exp -> const 
-- On TEL reduce production _simple_exp -> const 
-- On SUBTRACTIVE reduce production _simple_exp -> const 
-- On STRING reduce production _simple_exp -> const 
-- On STATE reduce production _simple_exp -> const 
-- On STAR reduce production _simple_exp -> const 
-- On SEMICOL reduce production _simple_exp -> const 
-- On RPAREN_GREATER reduce production _simple_exp -> const 
-- On RPAREN reduce production _simple_exp -> const 
-- On REACHABLE reduce production _simple_exp -> const 
-- On RBRACKET reduce production _simple_exp -> const 
-- On RBRACE reduce production _simple_exp -> const 
-- On PRAGMA reduce production _simple_exp -> const 
-- On POWER reduce production _simple_exp -> const 
-- On OR reduce production _simple_exp -> const 
-- On ON reduce production _simple_exp -> const 
-- On NODE reduce production _simple_exp -> const 
-- On LPAREN reduce production _simple_exp -> const 
-- On LET reduce production _simple_exp -> const 
-- On LESS_GREATER reduce production _simple_exp -> const 
-- On LESSRBRACKET reduce production _simple_exp -> const 
-- On LBRACKETGREATER reduce production _simple_exp -> const 
-- On LBRACKET reduce production _simple_exp -> const 
-- On LBRACE reduce production _simple_exp -> const 
-- On INT reduce production _simple_exp -> const 
-- On INFIX4 reduce production _simple_exp -> const 
-- On INFIX3 reduce production _simple_exp -> const 
-- On INFIX2 reduce production _simple_exp -> const 
-- On INFIX1 reduce production _simple_exp -> const 
-- On INFIX0 reduce production _simple_exp -> const 
-- On IDENT reduce production _simple_exp -> const 
-- On FUN reduce production _simple_exp -> const 
-- On FLOAT reduce production _simple_exp -> const 
-- On FBY reduce production _simple_exp -> const 
-- On EXTERNAL reduce production _simple_exp -> const 
-- On EVERY reduce production _simple_exp -> const 
-- On EQUAL reduce production _simple_exp -> const 
-- On EOF reduce production _simple_exp -> const 
-- On ENFORCE reduce production _simple_exp -> const 
-- On END reduce production _simple_exp -> const 
-- On ELSE reduce production _simple_exp -> const 
-- On DOUBLE_GREATER reduce production _simple_exp -> const 
-- On DOUBLE_DOT reduce production _simple_exp -> const 
-- On DOT reduce production _simple_exp -> const 
-- On DONE reduce production _simple_exp -> const 
-- On DO reduce production _simple_exp -> const 
-- On DEFAULT reduce production _simple_exp -> const 
-- On Constructor reduce production _simple_exp -> const 
-- On CONTINUE reduce production _simple_exp -> const 
-- On CONST reduce production _simple_exp -> const 
-- On COMMA reduce production _simple_exp -> const 
-- On COLONCOLON reduce production _simple_exp -> const 
-- On BOOL reduce production _simple_exp -> const 
-- On BAR reduce production _simple_exp -> const 
-- On ATTRACTIVE reduce production _simple_exp -> const 
-- On AT reduce production _simple_exp -> const 
-- On ARROW reduce production _simple_exp -> const 
-- On AROBASE reduce production _simple_exp -> const 
-- On AND reduce production _simple_exp -> const 
-- On AMPERSAND reduce production _simple_exp -> const 

State 121:
simple_exp -> _simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production simple_exp -> _simple_exp 
-- On WHENOT reduce production simple_exp -> _simple_exp 
-- On WHEN reduce production simple_exp -> _simple_exp 
-- On VAR reduce production simple_exp -> _simple_exp 
-- On VAL reduce production simple_exp -> _simple_exp 
-- On UNTIL reduce production simple_exp -> _simple_exp 
-- On UNSAFE reduce production simple_exp -> _simple_exp 
-- On UNLESS reduce production simple_exp -> _simple_exp 
-- On TYPE reduce production simple_exp -> _simple_exp 
-- On THEN reduce production simple_exp -> _simple_exp 
-- On TEL reduce production simple_exp -> _simple_exp 
-- On SUBTRACTIVE reduce production simple_exp -> _simple_exp 
-- On STRING reduce production simple_exp -> _simple_exp 
-- On STATE reduce production simple_exp -> _simple_exp 
-- On STAR reduce production simple_exp -> _simple_exp 
-- On SEMICOL reduce production simple_exp -> _simple_exp 
-- On RPAREN_GREATER reduce production simple_exp -> _simple_exp 
-- On RPAREN reduce production simple_exp -> _simple_exp 
-- On REACHABLE reduce production simple_exp -> _simple_exp 
-- On RBRACKET reduce production simple_exp -> _simple_exp 
-- On RBRACE reduce production simple_exp -> _simple_exp 
-- On PRAGMA reduce production simple_exp -> _simple_exp 
-- On POWER reduce production simple_exp -> _simple_exp 
-- On OR reduce production simple_exp -> _simple_exp 
-- On ON reduce production simple_exp -> _simple_exp 
-- On NODE reduce production simple_exp -> _simple_exp 
-- On LPAREN reduce production simple_exp -> _simple_exp 
-- On LET reduce production simple_exp -> _simple_exp 
-- On LESS_GREATER reduce production simple_exp -> _simple_exp 
-- On LESSRBRACKET reduce production simple_exp -> _simple_exp 
-- On LBRACKETGREATER reduce production simple_exp -> _simple_exp 
-- On LBRACKET reduce production simple_exp -> _simple_exp 
-- On LBRACE reduce production simple_exp -> _simple_exp 
-- On INT reduce production simple_exp -> _simple_exp 
-- On INFIX4 reduce production simple_exp -> _simple_exp 
-- On INFIX3 reduce production simple_exp -> _simple_exp 
-- On INFIX2 reduce production simple_exp -> _simple_exp 
-- On INFIX1 reduce production simple_exp -> _simple_exp 
-- On INFIX0 reduce production simple_exp -> _simple_exp 
-- On IDENT reduce production simple_exp -> _simple_exp 
-- On FUN reduce production simple_exp -> _simple_exp 
-- On FLOAT reduce production simple_exp -> _simple_exp 
-- On FBY reduce production simple_exp -> _simple_exp 
-- On EXTERNAL reduce production simple_exp -> _simple_exp 
-- On EVERY reduce production simple_exp -> _simple_exp 
-- On EQUAL reduce production simple_exp -> _simple_exp 
-- On EOF reduce production simple_exp -> _simple_exp 
-- On ENFORCE reduce production simple_exp -> _simple_exp 
-- On END reduce production simple_exp -> _simple_exp 
-- On ELSE reduce production simple_exp -> _simple_exp 
-- On DOUBLE_GREATER reduce production simple_exp -> _simple_exp 
-- On DOUBLE_DOT reduce production simple_exp -> _simple_exp 
-- On DOT reduce production simple_exp -> _simple_exp 
-- On DONE reduce production simple_exp -> _simple_exp 
-- On DO reduce production simple_exp -> _simple_exp 
-- On DEFAULT reduce production simple_exp -> _simple_exp 
-- On Constructor reduce production simple_exp -> _simple_exp 
-- On CONTINUE reduce production simple_exp -> _simple_exp 
-- On CONST reduce production simple_exp -> _simple_exp 
-- On COMMA reduce production simple_exp -> _simple_exp 
-- On COLONCOLON reduce production simple_exp -> _simple_exp 
-- On BOOL reduce production simple_exp -> _simple_exp 
-- On BAR reduce production simple_exp -> _simple_exp 
-- On ATTRACTIVE reduce production simple_exp -> _simple_exp 
-- On AT reduce production simple_exp -> _simple_exp 
-- On ARROW reduce production simple_exp -> _simple_exp 
-- On AROBASE reduce production simple_exp -> _simple_exp 
-- On AND reduce production simple_exp -> _simple_exp 
-- On AMPERSAND reduce production simple_exp -> _simple_exp 

State 122:
exp -> _exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production exp -> _exp 
-- On WHENOT reduce production exp -> _exp 
-- On WHEN reduce production exp -> _exp 
-- On VAR reduce production exp -> _exp 
-- On VAL reduce production exp -> _exp 
-- On UNTIL reduce production exp -> _exp 
-- On UNSAFE reduce production exp -> _exp 
-- On UNLESS reduce production exp -> _exp 
-- On TYPE reduce production exp -> _exp 
-- On THEN reduce production exp -> _exp 
-- On TEL reduce production exp -> _exp 
-- On SUBTRACTIVE reduce production exp -> _exp 
-- On STATE reduce production exp -> _exp 
-- On STAR reduce production exp -> _exp 
-- On SEMICOL reduce production exp -> _exp 
-- On RPAREN_GREATER reduce production exp -> _exp 
-- On RPAREN reduce production exp -> _exp 
-- On REACHABLE reduce production exp -> _exp 
-- On RBRACKET reduce production exp -> _exp 
-- On RBRACE reduce production exp -> _exp 
-- On PRAGMA reduce production exp -> _exp 
-- On POWER reduce production exp -> _exp 
-- On OR reduce production exp -> _exp 
-- On ON reduce production exp -> _exp 
-- On NODE reduce production exp -> _exp 
-- On LET reduce production exp -> _exp 
-- On LESS_GREATER reduce production exp -> _exp 
-- On LESSRBRACKET reduce production exp -> _exp 
-- On INFIX4 reduce production exp -> _exp 
-- On INFIX3 reduce production exp -> _exp 
-- On INFIX2 reduce production exp -> _exp 
-- On INFIX1 reduce production exp -> _exp 
-- On INFIX0 reduce production exp -> _exp 
-- On FUN reduce production exp -> _exp 
-- On EXTERNAL reduce production exp -> _exp 
-- On EVERY reduce production exp -> _exp 
-- On EQUAL reduce production exp -> _exp 
-- On EOF reduce production exp -> _exp 
-- On ENFORCE reduce production exp -> _exp 
-- On END reduce production exp -> _exp 
-- On ELSE reduce production exp -> _exp 
-- On DOUBLE_GREATER reduce production exp -> _exp 
-- On DOUBLE_DOT reduce production exp -> _exp 
-- On DONE reduce production exp -> _exp 
-- On DO reduce production exp -> _exp 
-- On DEFAULT reduce production exp -> _exp 
-- On Constructor reduce production exp -> _exp 
-- On CONTINUE reduce production exp -> _exp 
-- On CONST reduce production exp -> _exp 
-- On COMMA reduce production exp -> _exp 
-- On COLONCOLON reduce production exp -> _exp 
-- On BOOL reduce production exp -> _exp 
-- On BAR reduce production exp -> _exp 
-- On ATTRACTIVE reduce production exp -> _exp 
-- On AROBASE reduce production exp -> _exp 
-- On AND reduce production exp -> _exp 
-- On AMPERSAND reduce production exp -> _exp 

State 123:
const -> _const . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production const -> _const 
-- On WHENOT reduce production const -> _const 
-- On WHEN reduce production const -> _const 
-- On VAR reduce production const -> _const 
-- On VAL reduce production const -> _const 
-- On UNTIL reduce production const -> _const 
-- On UNSAFE reduce production const -> _const 
-- On UNLESS reduce production const -> _const 
-- On TYPE reduce production const -> _const 
-- On THEN reduce production const -> _const 
-- On TEL reduce production const -> _const 
-- On SUBTRACTIVE reduce production const -> _const 
-- On STRING reduce production const -> _const 
-- On STATE reduce production const -> _const 
-- On STAR reduce production const -> _const 
-- On SEMICOL reduce production const -> _const 
-- On RPAREN_GREATER reduce production const -> _const 
-- On RPAREN reduce production const -> _const 
-- On REACHABLE reduce production const -> _const 
-- On RBRACKET reduce production const -> _const 
-- On RBRACE reduce production const -> _const 
-- On PRAGMA reduce production const -> _const 
-- On POWER reduce production const -> _const 
-- On OR reduce production const -> _const 
-- On ON reduce production const -> _const 
-- On NODE reduce production const -> _const 
-- On LPAREN reduce production const -> _const 
-- On LET reduce production const -> _const 
-- On LESS_GREATER reduce production const -> _const 
-- On LESSRBRACKET reduce production const -> _const 
-- On LBRACKETGREATER reduce production const -> _const 
-- On LBRACKET reduce production const -> _const 
-- On LBRACE reduce production const -> _const 
-- On INT reduce production const -> _const 
-- On INFIX4 reduce production const -> _const 
-- On INFIX3 reduce production const -> _const 
-- On INFIX2 reduce production const -> _const 
-- On INFIX1 reduce production const -> _const 
-- On INFIX0 reduce production const -> _const 
-- On IDENT reduce production const -> _const 
-- On FUN reduce production const -> _const 
-- On FLOAT reduce production const -> _const 
-- On FBY reduce production const -> _const 
-- On EXTERNAL reduce production const -> _const 
-- On EVERY reduce production const -> _const 
-- On EQUAL reduce production const -> _const 
-- On EOF reduce production const -> _const 
-- On ENFORCE reduce production const -> _const 
-- On END reduce production const -> _const 
-- On ELSE reduce production const -> _const 
-- On DOUBLE_GREATER reduce production const -> _const 
-- On DOUBLE_DOT reduce production const -> _const 
-- On DOT reduce production const -> _const 
-- On DONE reduce production const -> _const 
-- On DO reduce production const -> _const 
-- On DEFAULT reduce production const -> _const 
-- On Constructor reduce production const -> _const 
-- On CONTINUE reduce production const -> _const 
-- On CONST reduce production const -> _const 
-- On COMMA reduce production const -> _const 
-- On COLONCOLON reduce production const -> _const 
-- On BOOL reduce production const -> _const 
-- On BAR reduce production const -> _const 
-- On ATTRACTIVE reduce production const -> _const 
-- On AT reduce production const -> _const 
-- On ARROW reduce production const -> _const 
-- On AROBASE reduce production const -> _const 
-- On AND reduce production const -> _const 
-- On AMPERSAND reduce production const -> _const 

State 124:
_exp -> exp INFIX3 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 125
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 125:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX3 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On WITH reduce production _exp -> exp INFIX3 exp 
-- On WHENOT reduce production _exp -> exp INFIX3 exp 
-- On WHEN reduce production _exp -> exp INFIX3 exp 
-- On VAR reduce production _exp -> exp INFIX3 exp 
-- On VAL reduce production _exp -> exp INFIX3 exp 
-- On UNTIL reduce production _exp -> exp INFIX3 exp 
-- On UNSAFE reduce production _exp -> exp INFIX3 exp 
-- On UNLESS reduce production _exp -> exp INFIX3 exp 
-- On TYPE reduce production _exp -> exp INFIX3 exp 
-- On THEN reduce production _exp -> exp INFIX3 exp 
-- On TEL reduce production _exp -> exp INFIX3 exp 
-- On SUBTRACTIVE reduce production _exp -> exp INFIX3 exp 
-- On STATE reduce production _exp -> exp INFIX3 exp 
-- On STAR reduce production _exp -> exp INFIX3 exp 
-- On SEMICOL reduce production _exp -> exp INFIX3 exp 
-- On RPAREN_GREATER reduce production _exp -> exp INFIX3 exp 
-- On RPAREN reduce production _exp -> exp INFIX3 exp 
-- On REACHABLE reduce production _exp -> exp INFIX3 exp 
-- On RBRACKET reduce production _exp -> exp INFIX3 exp 
-- On RBRACE reduce production _exp -> exp INFIX3 exp 
-- On PRAGMA reduce production _exp -> exp INFIX3 exp 
-- On OR reduce production _exp -> exp INFIX3 exp 
-- On ON reduce production _exp -> exp INFIX3 exp 
-- On NODE reduce production _exp -> exp INFIX3 exp 
-- On LET reduce production _exp -> exp INFIX3 exp 
-- On LESS_GREATER reduce production _exp -> exp INFIX3 exp 
-- On LESSRBRACKET reduce production _exp -> exp INFIX3 exp 
-- On INFIX3 reduce production _exp -> exp INFIX3 exp 
-- On INFIX2 reduce production _exp -> exp INFIX3 exp 
-- On INFIX1 reduce production _exp -> exp INFIX3 exp 
-- On INFIX0 reduce production _exp -> exp INFIX3 exp 
-- On FUN reduce production _exp -> exp INFIX3 exp 
-- On EXTERNAL reduce production _exp -> exp INFIX3 exp 
-- On EVERY reduce production _exp -> exp INFIX3 exp 
-- On EQUAL reduce production _exp -> exp INFIX3 exp 
-- On EOF reduce production _exp -> exp INFIX3 exp 
-- On ENFORCE reduce production _exp -> exp INFIX3 exp 
-- On END reduce production _exp -> exp INFIX3 exp 
-- On ELSE reduce production _exp -> exp INFIX3 exp 
-- On DOUBLE_GREATER reduce production _exp -> exp INFIX3 exp 
-- On DOUBLE_DOT reduce production _exp -> exp INFIX3 exp 
-- On DONE reduce production _exp -> exp INFIX3 exp 
-- On DO reduce production _exp -> exp INFIX3 exp 
-- On DEFAULT reduce production _exp -> exp INFIX3 exp 
-- On Constructor reduce production _exp -> exp INFIX3 exp 
-- On CONTINUE reduce production _exp -> exp INFIX3 exp 
-- On CONST reduce production _exp -> exp INFIX3 exp 
-- On COMMA reduce production _exp -> exp INFIX3 exp 
-- On COLONCOLON reduce production _exp -> exp INFIX3 exp 
-- On BOOL reduce production _exp -> exp INFIX3 exp 
-- On BAR reduce production _exp -> exp INFIX3 exp 
-- On ATTRACTIVE reduce production _exp -> exp INFIX3 exp 
-- On AROBASE reduce production _exp -> exp INFIX3 exp 
-- On AND reduce production _exp -> exp INFIX3 exp 
-- On AMPERSAND reduce production _exp -> exp INFIX3 exp 

State 126:
_exp -> exp INFIX2 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 127
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 127:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX2 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On WITH reduce production _exp -> exp INFIX2 exp 
-- On WHENOT reduce production _exp -> exp INFIX2 exp 
-- On WHEN reduce production _exp -> exp INFIX2 exp 
-- On VAR reduce production _exp -> exp INFIX2 exp 
-- On VAL reduce production _exp -> exp INFIX2 exp 
-- On UNTIL reduce production _exp -> exp INFIX2 exp 
-- On UNSAFE reduce production _exp -> exp INFIX2 exp 
-- On UNLESS reduce production _exp -> exp INFIX2 exp 
-- On TYPE reduce production _exp -> exp INFIX2 exp 
-- On THEN reduce production _exp -> exp INFIX2 exp 
-- On TEL reduce production _exp -> exp INFIX2 exp 
-- On SUBTRACTIVE reduce production _exp -> exp INFIX2 exp 
-- On STATE reduce production _exp -> exp INFIX2 exp 
-- On SEMICOL reduce production _exp -> exp INFIX2 exp 
-- On RPAREN_GREATER reduce production _exp -> exp INFIX2 exp 
-- On RPAREN reduce production _exp -> exp INFIX2 exp 
-- On REACHABLE reduce production _exp -> exp INFIX2 exp 
-- On RBRACKET reduce production _exp -> exp INFIX2 exp 
-- On RBRACE reduce production _exp -> exp INFIX2 exp 
-- On PRAGMA reduce production _exp -> exp INFIX2 exp 
-- On OR reduce production _exp -> exp INFIX2 exp 
-- On ON reduce production _exp -> exp INFIX2 exp 
-- On NODE reduce production _exp -> exp INFIX2 exp 
-- On LET reduce production _exp -> exp INFIX2 exp 
-- On LESS_GREATER reduce production _exp -> exp INFIX2 exp 
-- On LESSRBRACKET reduce production _exp -> exp INFIX2 exp 
-- On INFIX2 reduce production _exp -> exp INFIX2 exp 
-- On INFIX1 reduce production _exp -> exp INFIX2 exp 
-- On INFIX0 reduce production _exp -> exp INFIX2 exp 
-- On FUN reduce production _exp -> exp INFIX2 exp 
-- On EXTERNAL reduce production _exp -> exp INFIX2 exp 
-- On EVERY reduce production _exp -> exp INFIX2 exp 
-- On EQUAL reduce production _exp -> exp INFIX2 exp 
-- On EOF reduce production _exp -> exp INFIX2 exp 
-- On ENFORCE reduce production _exp -> exp INFIX2 exp 
-- On END reduce production _exp -> exp INFIX2 exp 
-- On ELSE reduce production _exp -> exp INFIX2 exp 
-- On DOUBLE_GREATER reduce production _exp -> exp INFIX2 exp 
-- On DOUBLE_DOT reduce production _exp -> exp INFIX2 exp 
-- On DONE reduce production _exp -> exp INFIX2 exp 
-- On DO reduce production _exp -> exp INFIX2 exp 
-- On DEFAULT reduce production _exp -> exp INFIX2 exp 
-- On Constructor reduce production _exp -> exp INFIX2 exp 
-- On CONTINUE reduce production _exp -> exp INFIX2 exp 
-- On CONST reduce production _exp -> exp INFIX2 exp 
-- On COMMA reduce production _exp -> exp INFIX2 exp 
-- On COLONCOLON reduce production _exp -> exp INFIX2 exp 
-- On BOOL reduce production _exp -> exp INFIX2 exp 
-- On BAR reduce production _exp -> exp INFIX2 exp 
-- On ATTRACTIVE reduce production _exp -> exp INFIX2 exp 
-- On AROBASE reduce production _exp -> exp INFIX2 exp 
-- On AND reduce production _exp -> exp INFIX2 exp 
-- On AMPERSAND reduce production _exp -> exp INFIX2 exp 

State 128:
_exp -> exp INFIX1 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 129
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 129:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX1 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On WITH reduce production _exp -> exp INFIX1 exp 
-- On VAR reduce production _exp -> exp INFIX1 exp 
-- On VAL reduce production _exp -> exp INFIX1 exp 
-- On UNTIL reduce production _exp -> exp INFIX1 exp 
-- On UNSAFE reduce production _exp -> exp INFIX1 exp 
-- On UNLESS reduce production _exp -> exp INFIX1 exp 
-- On TYPE reduce production _exp -> exp INFIX1 exp 
-- On THEN reduce production _exp -> exp INFIX1 exp 
-- On TEL reduce production _exp -> exp INFIX1 exp 
-- On STATE reduce production _exp -> exp INFIX1 exp 
-- On SEMICOL reduce production _exp -> exp INFIX1 exp 
-- On RPAREN_GREATER reduce production _exp -> exp INFIX1 exp 
-- On RPAREN reduce production _exp -> exp INFIX1 exp 
-- On REACHABLE reduce production _exp -> exp INFIX1 exp 
-- On RBRACKET reduce production _exp -> exp INFIX1 exp 
-- On RBRACE reduce production _exp -> exp INFIX1 exp 
-- On PRAGMA reduce production _exp -> exp INFIX1 exp 
-- On OR reduce production _exp -> exp INFIX1 exp 
-- On ON reduce production _exp -> exp INFIX1 exp 
-- On NODE reduce production _exp -> exp INFIX1 exp 
-- On LET reduce production _exp -> exp INFIX1 exp 
-- On LESS_GREATER reduce production _exp -> exp INFIX1 exp 
-- On LESSRBRACKET reduce production _exp -> exp INFIX1 exp 
-- On INFIX0 reduce production _exp -> exp INFIX1 exp 
-- On FUN reduce production _exp -> exp INFIX1 exp 
-- On EXTERNAL reduce production _exp -> exp INFIX1 exp 
-- On EVERY reduce production _exp -> exp INFIX1 exp 
-- On EQUAL reduce production _exp -> exp INFIX1 exp 
-- On EOF reduce production _exp -> exp INFIX1 exp 
-- On ENFORCE reduce production _exp -> exp INFIX1 exp 
-- On END reduce production _exp -> exp INFIX1 exp 
-- On ELSE reduce production _exp -> exp INFIX1 exp 
-- On DOUBLE_GREATER reduce production _exp -> exp INFIX1 exp 
-- On DOUBLE_DOT reduce production _exp -> exp INFIX1 exp 
-- On DONE reduce production _exp -> exp INFIX1 exp 
-- On DO reduce production _exp -> exp INFIX1 exp 
-- On DEFAULT reduce production _exp -> exp INFIX1 exp 
-- On Constructor reduce production _exp -> exp INFIX1 exp 
-- On CONTINUE reduce production _exp -> exp INFIX1 exp 
-- On CONST reduce production _exp -> exp INFIX1 exp 
-- On COMMA reduce production _exp -> exp INFIX1 exp 
-- On COLONCOLON reduce production _exp -> exp INFIX1 exp 
-- On BOOL reduce production _exp -> exp INFIX1 exp 
-- On BAR reduce production _exp -> exp INFIX1 exp 
-- On ATTRACTIVE reduce production _exp -> exp INFIX1 exp 
-- On AROBASE reduce production _exp -> exp INFIX1 exp 
-- On AND reduce production _exp -> exp INFIX1 exp 
-- On AMPERSAND reduce production _exp -> exp INFIX1 exp 

State 130:
_exp -> exp INFIX0 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 131
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 131:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX0 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On WITH reduce production _exp -> exp INFIX0 exp 
-- On VAR reduce production _exp -> exp INFIX0 exp 
-- On VAL reduce production _exp -> exp INFIX0 exp 
-- On UNTIL reduce production _exp -> exp INFIX0 exp 
-- On UNSAFE reduce production _exp -> exp INFIX0 exp 
-- On UNLESS reduce production _exp -> exp INFIX0 exp 
-- On TYPE reduce production _exp -> exp INFIX0 exp 
-- On THEN reduce production _exp -> exp INFIX0 exp 
-- On TEL reduce production _exp -> exp INFIX0 exp 
-- On STATE reduce production _exp -> exp INFIX0 exp 
-- On SEMICOL reduce production _exp -> exp INFIX0 exp 
-- On RPAREN_GREATER reduce production _exp -> exp INFIX0 exp 
-- On RPAREN reduce production _exp -> exp INFIX0 exp 
-- On REACHABLE reduce production _exp -> exp INFIX0 exp 
-- On RBRACKET reduce production _exp -> exp INFIX0 exp 
-- On RBRACE reduce production _exp -> exp INFIX0 exp 
-- On PRAGMA reduce production _exp -> exp INFIX0 exp 
-- On OR reduce production _exp -> exp INFIX0 exp 
-- On ON reduce production _exp -> exp INFIX0 exp 
-- On NODE reduce production _exp -> exp INFIX0 exp 
-- On LET reduce production _exp -> exp INFIX0 exp 
-- On LESS_GREATER reduce production _exp -> exp INFIX0 exp 
-- On LESSRBRACKET reduce production _exp -> exp INFIX0 exp 
-- On INFIX0 reduce production _exp -> exp INFIX0 exp 
-- On FUN reduce production _exp -> exp INFIX0 exp 
-- On EXTERNAL reduce production _exp -> exp INFIX0 exp 
-- On EVERY reduce production _exp -> exp INFIX0 exp 
-- On EQUAL reduce production _exp -> exp INFIX0 exp 
-- On EOF reduce production _exp -> exp INFIX0 exp 
-- On ENFORCE reduce production _exp -> exp INFIX0 exp 
-- On END reduce production _exp -> exp INFIX0 exp 
-- On ELSE reduce production _exp -> exp INFIX0 exp 
-- On DOUBLE_GREATER reduce production _exp -> exp INFIX0 exp 
-- On DOUBLE_DOT reduce production _exp -> exp INFIX0 exp 
-- On DONE reduce production _exp -> exp INFIX0 exp 
-- On DO reduce production _exp -> exp INFIX0 exp 
-- On DEFAULT reduce production _exp -> exp INFIX0 exp 
-- On Constructor reduce production _exp -> exp INFIX0 exp 
-- On CONTINUE reduce production _exp -> exp INFIX0 exp 
-- On CONST reduce production _exp -> exp INFIX0 exp 
-- On COMMA reduce production _exp -> exp INFIX0 exp 
-- On COLONCOLON reduce production _exp -> exp INFIX0 exp 
-- On BOOL reduce production _exp -> exp INFIX0 exp 
-- On BAR reduce production _exp -> exp INFIX0 exp 
-- On ATTRACTIVE reduce production _exp -> exp INFIX0 exp 
-- On AROBASE reduce production _exp -> exp INFIX0 exp 
-- On AND reduce production _exp -> exp INFIX0 exp 
-- On AMPERSAND reduce production _exp -> exp INFIX0 exp 

State 132:
_exp -> exp EQUAL . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 133
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 133:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp EQUAL exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On WITH reduce production _exp -> exp EQUAL exp 
-- On VAR reduce production _exp -> exp EQUAL exp 
-- On VAL reduce production _exp -> exp EQUAL exp 
-- On UNTIL reduce production _exp -> exp EQUAL exp 
-- On UNSAFE reduce production _exp -> exp EQUAL exp 
-- On UNLESS reduce production _exp -> exp EQUAL exp 
-- On TYPE reduce production _exp -> exp EQUAL exp 
-- On THEN reduce production _exp -> exp EQUAL exp 
-- On TEL reduce production _exp -> exp EQUAL exp 
-- On STATE reduce production _exp -> exp EQUAL exp 
-- On SEMICOL reduce production _exp -> exp EQUAL exp 
-- On RPAREN_GREATER reduce production _exp -> exp EQUAL exp 
-- On RPAREN reduce production _exp -> exp EQUAL exp 
-- On REACHABLE reduce production _exp -> exp EQUAL exp 
-- On RBRACKET reduce production _exp -> exp EQUAL exp 
-- On RBRACE reduce production _exp -> exp EQUAL exp 
-- On PRAGMA reduce production _exp -> exp EQUAL exp 
-- On OR reduce production _exp -> exp EQUAL exp 
-- On ON reduce production _exp -> exp EQUAL exp 
-- On NODE reduce production _exp -> exp EQUAL exp 
-- On LET reduce production _exp -> exp EQUAL exp 
-- On LESS_GREATER reduce production _exp -> exp EQUAL exp 
-- On LESSRBRACKET reduce production _exp -> exp EQUAL exp 
-- On INFIX0 reduce production _exp -> exp EQUAL exp 
-- On FUN reduce production _exp -> exp EQUAL exp 
-- On EXTERNAL reduce production _exp -> exp EQUAL exp 
-- On EVERY reduce production _exp -> exp EQUAL exp 
-- On EQUAL reduce production _exp -> exp EQUAL exp 
-- On EOF reduce production _exp -> exp EQUAL exp 
-- On ENFORCE reduce production _exp -> exp EQUAL exp 
-- On END reduce production _exp -> exp EQUAL exp 
-- On ELSE reduce production _exp -> exp EQUAL exp 
-- On DOUBLE_GREATER reduce production _exp -> exp EQUAL exp 
-- On DOUBLE_DOT reduce production _exp -> exp EQUAL exp 
-- On DONE reduce production _exp -> exp EQUAL exp 
-- On DO reduce production _exp -> exp EQUAL exp 
-- On DEFAULT reduce production _exp -> exp EQUAL exp 
-- On Constructor reduce production _exp -> exp EQUAL exp 
-- On CONTINUE reduce production _exp -> exp EQUAL exp 
-- On CONST reduce production _exp -> exp EQUAL exp 
-- On COMMA reduce production _exp -> exp EQUAL exp 
-- On COLONCOLON reduce production _exp -> exp EQUAL exp 
-- On BOOL reduce production _exp -> exp EQUAL exp 
-- On BAR reduce production _exp -> exp EQUAL exp 
-- On ATTRACTIVE reduce production _exp -> exp EQUAL exp 
-- On AROBASE reduce production _exp -> exp EQUAL exp 
-- On AND reduce production _exp -> exp EQUAL exp 
-- On AMPERSAND reduce production _exp -> exp EQUAL exp 

State 134:
_exp -> exp AND . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 135
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 135:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp AND exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On WITH reduce production _exp -> exp AND exp 
-- On VAR reduce production _exp -> exp AND exp 
-- On VAL reduce production _exp -> exp AND exp 
-- On UNTIL reduce production _exp -> exp AND exp 
-- On UNSAFE reduce production _exp -> exp AND exp 
-- On UNLESS reduce production _exp -> exp AND exp 
-- On TYPE reduce production _exp -> exp AND exp 
-- On THEN reduce production _exp -> exp AND exp 
-- On TEL reduce production _exp -> exp AND exp 
-- On STATE reduce production _exp -> exp AND exp 
-- On SEMICOL reduce production _exp -> exp AND exp 
-- On RPAREN_GREATER reduce production _exp -> exp AND exp 
-- On RPAREN reduce production _exp -> exp AND exp 
-- On REACHABLE reduce production _exp -> exp AND exp 
-- On RBRACKET reduce production _exp -> exp AND exp 
-- On RBRACE reduce production _exp -> exp AND exp 
-- On PRAGMA reduce production _exp -> exp AND exp 
-- On OR reduce production _exp -> exp AND exp 
-- On ON reduce production _exp -> exp AND exp 
-- On NODE reduce production _exp -> exp AND exp 
-- On LET reduce production _exp -> exp AND exp 
-- On LESSRBRACKET reduce production _exp -> exp AND exp 
-- On FUN reduce production _exp -> exp AND exp 
-- On EXTERNAL reduce production _exp -> exp AND exp 
-- On EVERY reduce production _exp -> exp AND exp 
-- On EOF reduce production _exp -> exp AND exp 
-- On ENFORCE reduce production _exp -> exp AND exp 
-- On END reduce production _exp -> exp AND exp 
-- On ELSE reduce production _exp -> exp AND exp 
-- On DOUBLE_GREATER reduce production _exp -> exp AND exp 
-- On DOUBLE_DOT reduce production _exp -> exp AND exp 
-- On DONE reduce production _exp -> exp AND exp 
-- On DO reduce production _exp -> exp AND exp 
-- On DEFAULT reduce production _exp -> exp AND exp 
-- On Constructor reduce production _exp -> exp AND exp 
-- On CONTINUE reduce production _exp -> exp AND exp 
-- On CONST reduce production _exp -> exp AND exp 
-- On COMMA reduce production _exp -> exp AND exp 
-- On COLONCOLON reduce production _exp -> exp AND exp 
-- On BOOL reduce production _exp -> exp AND exp 
-- On BAR reduce production _exp -> exp AND exp 
-- On ATTRACTIVE reduce production _exp -> exp AND exp 
-- On AROBASE reduce production _exp -> exp AND exp 
-- On AND reduce production _exp -> exp AND exp 
-- On AMPERSAND reduce production _exp -> exp AND exp 

State 136:
_exp -> exp AMPERSAND . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 137
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 137:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp AMPERSAND exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On WITH reduce production _exp -> exp AMPERSAND exp 
-- On VAR reduce production _exp -> exp AMPERSAND exp 
-- On VAL reduce production _exp -> exp AMPERSAND exp 
-- On UNTIL reduce production _exp -> exp AMPERSAND exp 
-- On UNSAFE reduce production _exp -> exp AMPERSAND exp 
-- On UNLESS reduce production _exp -> exp AMPERSAND exp 
-- On TYPE reduce production _exp -> exp AMPERSAND exp 
-- On THEN reduce production _exp -> exp AMPERSAND exp 
-- On TEL reduce production _exp -> exp AMPERSAND exp 
-- On STATE reduce production _exp -> exp AMPERSAND exp 
-- On SEMICOL reduce production _exp -> exp AMPERSAND exp 
-- On RPAREN_GREATER reduce production _exp -> exp AMPERSAND exp 
-- On RPAREN reduce production _exp -> exp AMPERSAND exp 
-- On REACHABLE reduce production _exp -> exp AMPERSAND exp 
-- On RBRACKET reduce production _exp -> exp AMPERSAND exp 
-- On RBRACE reduce production _exp -> exp AMPERSAND exp 
-- On PRAGMA reduce production _exp -> exp AMPERSAND exp 
-- On OR reduce production _exp -> exp AMPERSAND exp 
-- On ON reduce production _exp -> exp AMPERSAND exp 
-- On NODE reduce production _exp -> exp AMPERSAND exp 
-- On LET reduce production _exp -> exp AMPERSAND exp 
-- On LESSRBRACKET reduce production _exp -> exp AMPERSAND exp 
-- On FUN reduce production _exp -> exp AMPERSAND exp 
-- On EXTERNAL reduce production _exp -> exp AMPERSAND exp 
-- On EVERY reduce production _exp -> exp AMPERSAND exp 
-- On EOF reduce production _exp -> exp AMPERSAND exp 
-- On ENFORCE reduce production _exp -> exp AMPERSAND exp 
-- On END reduce production _exp -> exp AMPERSAND exp 
-- On ELSE reduce production _exp -> exp AMPERSAND exp 
-- On DOUBLE_GREATER reduce production _exp -> exp AMPERSAND exp 
-- On DOUBLE_DOT reduce production _exp -> exp AMPERSAND exp 
-- On DONE reduce production _exp -> exp AMPERSAND exp 
-- On DO reduce production _exp -> exp AMPERSAND exp 
-- On DEFAULT reduce production _exp -> exp AMPERSAND exp 
-- On Constructor reduce production _exp -> exp AMPERSAND exp 
-- On CONTINUE reduce production _exp -> exp AMPERSAND exp 
-- On CONST reduce production _exp -> exp AMPERSAND exp 
-- On COMMA reduce production _exp -> exp AMPERSAND exp 
-- On COLONCOLON reduce production _exp -> exp AMPERSAND exp 
-- On BOOL reduce production _exp -> exp AMPERSAND exp 
-- On BAR reduce production _exp -> exp AMPERSAND exp 
-- On ATTRACTIVE reduce production _exp -> exp AMPERSAND exp 
-- On AROBASE reduce production _exp -> exp AMPERSAND exp 
-- On AND reduce production _exp -> exp AMPERSAND exp 
-- On AMPERSAND reduce production _exp -> exp AMPERSAND exp 

State 138:
_exp -> exp AROBASE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 139
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 139:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp AROBASE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On WITH reduce production _exp -> exp AROBASE exp 
-- On VAR reduce production _exp -> exp AROBASE exp 
-- On VAL reduce production _exp -> exp AROBASE exp 
-- On UNTIL reduce production _exp -> exp AROBASE exp 
-- On UNSAFE reduce production _exp -> exp AROBASE exp 
-- On UNLESS reduce production _exp -> exp AROBASE exp 
-- On TYPE reduce production _exp -> exp AROBASE exp 
-- On THEN reduce production _exp -> exp AROBASE exp 
-- On TEL reduce production _exp -> exp AROBASE exp 
-- On STATE reduce production _exp -> exp AROBASE exp 
-- On SEMICOL reduce production _exp -> exp AROBASE exp 
-- On RPAREN_GREATER reduce production _exp -> exp AROBASE exp 
-- On RPAREN reduce production _exp -> exp AROBASE exp 
-- On REACHABLE reduce production _exp -> exp AROBASE exp 
-- On RBRACKET reduce production _exp -> exp AROBASE exp 
-- On RBRACE reduce production _exp -> exp AROBASE exp 
-- On PRAGMA reduce production _exp -> exp AROBASE exp 
-- On ON reduce production _exp -> exp AROBASE exp 
-- On NODE reduce production _exp -> exp AROBASE exp 
-- On LET reduce production _exp -> exp AROBASE exp 
-- On LESSRBRACKET reduce production _exp -> exp AROBASE exp 
-- On FUN reduce production _exp -> exp AROBASE exp 
-- On EXTERNAL reduce production _exp -> exp AROBASE exp 
-- On EVERY reduce production _exp -> exp AROBASE exp 
-- On EOF reduce production _exp -> exp AROBASE exp 
-- On ENFORCE reduce production _exp -> exp AROBASE exp 
-- On END reduce production _exp -> exp AROBASE exp 
-- On ELSE reduce production _exp -> exp AROBASE exp 
-- On DOUBLE_GREATER reduce production _exp -> exp AROBASE exp 
-- On DOUBLE_DOT reduce production _exp -> exp AROBASE exp 
-- On DONE reduce production _exp -> exp AROBASE exp 
-- On DO reduce production _exp -> exp AROBASE exp 
-- On DEFAULT reduce production _exp -> exp AROBASE exp 
-- On Constructor reduce production _exp -> exp AROBASE exp 
-- On CONTINUE reduce production _exp -> exp AROBASE exp 
-- On CONST reduce production _exp -> exp AROBASE exp 
-- On COMMA reduce production _exp -> exp AROBASE exp 
-- On COLONCOLON reduce production _exp -> exp AROBASE exp 
-- On BOOL reduce production _exp -> exp AROBASE exp 
-- On BAR reduce production _exp -> exp AROBASE exp 
-- On ATTRACTIVE reduce production _exp -> exp AROBASE exp 

State 140:
qualname -> qualified(ident) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production qualname -> qualified(ident) 
-- On WHENOT reduce production qualname -> qualified(ident) 
-- On WHEN reduce production qualname -> qualified(ident) 
-- On VAR reduce production qualname -> qualified(ident) 
-- On VAL reduce production qualname -> qualified(ident) 
-- On UNTIL reduce production qualname -> qualified(ident) 
-- On UNSAFE reduce production qualname -> qualified(ident) 
-- On UNLESS reduce production qualname -> qualified(ident) 
-- On TYPE reduce production qualname -> qualified(ident) 
-- On THEN reduce production qualname -> qualified(ident) 
-- On TEL reduce production qualname -> qualified(ident) 
-- On SUBTRACTIVE reduce production qualname -> qualified(ident) 
-- On STRING reduce production qualname -> qualified(ident) 
-- On STATE reduce production qualname -> qualified(ident) 
-- On STAR reduce production qualname -> qualified(ident) 
-- On SEMICOL reduce production qualname -> qualified(ident) 
-- On RPAREN_GREATER reduce production qualname -> qualified(ident) 
-- On RPAREN reduce production qualname -> qualified(ident) 
-- On REACHABLE reduce production qualname -> qualified(ident) 
-- On RBRACKET reduce production qualname -> qualified(ident) 
-- On RBRACE reduce production qualname -> qualified(ident) 
-- On PRAGMA reduce production qualname -> qualified(ident) 
-- On POWER reduce production qualname -> qualified(ident) 
-- On OR reduce production qualname -> qualified(ident) 
-- On ON reduce production qualname -> qualified(ident) 
-- On NODE reduce production qualname -> qualified(ident) 
-- On LPAREN reduce production qualname -> qualified(ident) 
-- On LET reduce production qualname -> qualified(ident) 
-- On LESS_LPAREN reduce production qualname -> qualified(ident) 
-- On LESS_GREATER reduce production qualname -> qualified(ident) 
-- On LESSRBRACKET reduce production qualname -> qualified(ident) 
-- On LBRACKETGREATER reduce production qualname -> qualified(ident) 
-- On LBRACKET reduce production qualname -> qualified(ident) 
-- On LBRACE reduce production qualname -> qualified(ident) 
-- On INT reduce production qualname -> qualified(ident) 
-- On INFIX4 reduce production qualname -> qualified(ident) 
-- On INFIX3 reduce production qualname -> qualified(ident) 
-- On INFIX2 reduce production qualname -> qualified(ident) 
-- On INFIX1 reduce production qualname -> qualified(ident) 
-- On INFIX0 reduce production qualname -> qualified(ident) 
-- On IDENT reduce production qualname -> qualified(ident) 
-- On FUN reduce production qualname -> qualified(ident) 
-- On FLOAT reduce production qualname -> qualified(ident) 
-- On FBY reduce production qualname -> qualified(ident) 
-- On EXTERNAL reduce production qualname -> qualified(ident) 
-- On EVERY reduce production qualname -> qualified(ident) 
-- On EQUAL reduce production qualname -> qualified(ident) 
-- On EOF reduce production qualname -> qualified(ident) 
-- On ENFORCE reduce production qualname -> qualified(ident) 
-- On END reduce production qualname -> qualified(ident) 
-- On ELSE reduce production qualname -> qualified(ident) 
-- On DOUBLE_LESS reduce production qualname -> qualified(ident) 
-- On DOUBLE_GREATER reduce production qualname -> qualified(ident) 
-- On DOUBLE_DOT reduce production qualname -> qualified(ident) 
-- On DOT reduce production qualname -> qualified(ident) 
-- On DONE reduce production qualname -> qualified(ident) 
-- On DO reduce production qualname -> qualified(ident) 
-- On DEFAULT reduce production qualname -> qualified(ident) 
-- On Constructor reduce production qualname -> qualified(ident) 
-- On CONTINUE reduce production qualname -> qualified(ident) 
-- On CONST reduce production qualname -> qualified(ident) 
-- On COMMA reduce production qualname -> qualified(ident) 
-- On COLONCOLON reduce production qualname -> qualified(ident) 
-- On BOOL reduce production qualname -> qualified(ident) 
-- On BAR reduce production qualname -> qualified(ident) 
-- On ATTRACTIVE reduce production qualname -> qualified(ident) 
-- On AT reduce production qualname -> qualified(ident) 
-- On ARROW reduce production qualname -> qualified(ident) 
-- On AROBASE reduce production qualname -> qualified(ident) 
-- On AND reduce production qualname -> qualified(ident) 
-- On AMPERSAND reduce production qualname -> qualified(ident) 

State 141:
modul -> modul . DOT Constructor [ DOT ]
qualified(ident) -> modul . DOT ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On DOT shift to state 142

State 142:
modul -> modul DOT . Constructor [ DOT ]
qualified(ident) -> modul DOT . ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 5
-- On ident shift to state 84

State 143:
_simple_exp -> LBRACE field_exp_list . RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On RBRACE shift to state 144

State 144:
_simple_exp -> LBRACE field_exp_list RBRACE . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On WHENOT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On WHEN reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On VAR reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On VAL reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On UNTIL reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On UNSAFE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On UNLESS reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On TYPE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On THEN reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On TEL reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On SUBTRACTIVE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On STRING reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On STATE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On STAR reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On SEMICOL reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On RPAREN_GREATER reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On RPAREN reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On REACHABLE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On RBRACKET reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On RBRACE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On PRAGMA reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On POWER reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On OR reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On ON reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On NODE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On LPAREN reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On LET reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On LESS_GREATER reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On LESSRBRACKET reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On LBRACKETGREATER reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On LBRACKET reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On LBRACE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On INT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On INFIX4 reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On INFIX3 reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On INFIX2 reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On INFIX1 reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On INFIX0 reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On IDENT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On FUN reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On FLOAT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On FBY reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On EXTERNAL reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On EVERY reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On EQUAL reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On EOF reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On ENFORCE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On END reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On ELSE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On DOUBLE_GREATER reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On DOUBLE_DOT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On DOT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On DONE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On DO reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On DEFAULT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On Constructor reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On CONTINUE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On CONST reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On COMMA reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On COLONCOLON reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On BOOL reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On BAR reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On ATTRACTIVE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On AT reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On ARROW reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On AROBASE reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On AND reduce production _simple_exp -> LBRACE field_exp_list RBRACE 
-- On AMPERSAND reduce production _simple_exp -> LBRACE field_exp_list RBRACE 

State 145:
field_exp_list -> field_exp . [ RBRACE ]
field_exp_list -> field_exp . SEMICOL field_exp_list [ RBRACE ]
-- On SEMICOL shift to state 146
-- On RBRACE reduce production field_exp_list -> field_exp 

State 146:
field_exp_list -> field_exp SEMICOL . field_exp_list [ RBRACE ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 110
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
-- On field_exp_list shift to state 147
-- On field_exp shift to state 145

State 147:
field_exp_list -> field_exp SEMICOL field_exp_list . [ RBRACE ]
-- On RBRACE reduce production field_exp_list -> field_exp SEMICOL field_exp_list 

State 148:
_simple_exp -> IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
-- On WITH reduce production _simple_exp -> IDENT 
-- On WHENOT reduce production _simple_exp -> IDENT 
-- On WHEN reduce production _simple_exp -> IDENT 
-- On VAR reduce production _simple_exp -> IDENT 
-- On VAL reduce production _simple_exp -> IDENT 
-- On UNTIL reduce production _simple_exp -> IDENT 
-- On UNSAFE reduce production _simple_exp -> IDENT 
-- On UNLESS reduce production _simple_exp -> IDENT 
-- On TYPE reduce production _simple_exp -> IDENT 
-- On THEN reduce production _simple_exp -> IDENT 
-- On TEL reduce production _simple_exp -> IDENT 
-- On SUBTRACTIVE reduce production _simple_exp -> IDENT 
-- On STRING reduce production _simple_exp -> IDENT 
-- On STATE reduce production _simple_exp -> IDENT 
-- On STAR reduce production _simple_exp -> IDENT 
-- On SEMICOL reduce production _simple_exp -> IDENT 
-- On RPAREN_GREATER reduce production _simple_exp -> IDENT 
-- On RPAREN reduce production _simple_exp -> IDENT 
-- On REACHABLE reduce production _simple_exp -> IDENT 
-- On RBRACKET reduce production _simple_exp -> IDENT 
-- On RBRACE reduce production _simple_exp -> IDENT 
-- On PRAGMA reduce production _simple_exp -> IDENT 
-- On POWER reduce production _simple_exp -> IDENT 
-- On OR reduce production _simple_exp -> IDENT 
-- On ON reduce production _simple_exp -> IDENT 
-- On NODE reduce production _simple_exp -> IDENT 
-- On LPAREN reduce production _simple_exp -> IDENT 
-- On LET reduce production _simple_exp -> IDENT 
-- On LESS_GREATER reduce production _simple_exp -> IDENT 
-- On LESSRBRACKET reduce production _simple_exp -> IDENT 
-- On LBRACKET reduce production _simple_exp -> IDENT 
-- On LBRACE reduce production _simple_exp -> IDENT 
-- On INT reduce production _simple_exp -> IDENT 
-- On INFIX4 reduce production _simple_exp -> IDENT 
-- On INFIX3 reduce production _simple_exp -> IDENT 
-- On INFIX2 reduce production _simple_exp -> IDENT 
-- On INFIX1 reduce production _simple_exp -> IDENT 
-- On INFIX0 reduce production _simple_exp -> IDENT 
-- On IDENT reduce production _simple_exp -> IDENT 
-- On FUN reduce production _simple_exp -> IDENT 
-- On FLOAT reduce production _simple_exp -> IDENT 
-- On EXTERNAL reduce production _simple_exp -> IDENT 
-- On EVERY reduce production _simple_exp -> IDENT 
-- On EQUAL reduce production _simple_exp -> IDENT 
-- On EOF reduce production _simple_exp -> IDENT 
-- On ENFORCE reduce production _simple_exp -> IDENT 
-- On END reduce production _simple_exp -> IDENT 
-- On ELSE reduce production _simple_exp -> IDENT 
-- On DOUBLE_GREATER reduce production _simple_exp -> IDENT 
-- On DOUBLE_DOT reduce production _simple_exp -> IDENT 
-- On DOT reduce production _simple_exp -> IDENT 
-- On DONE reduce production _simple_exp -> IDENT 
-- On DO reduce production _simple_exp -> IDENT 
-- On DEFAULT reduce production _simple_exp -> IDENT 
-- On Constructor reduce production _simple_exp -> IDENT 
-- On CONTINUE reduce production _simple_exp -> IDENT 
-- On CONST reduce production _simple_exp -> IDENT 
-- On COMMA reduce production _simple_exp -> IDENT 
-- On COLONCOLON reduce production _simple_exp -> IDENT 
-- On BOOL reduce production _simple_exp -> IDENT 
-- On BAR reduce production _simple_exp -> IDENT 
-- On ATTRACTIVE reduce production _simple_exp -> IDENT 
-- On AT reduce production _simple_exp -> IDENT 
-- On AROBASE reduce production _simple_exp -> IDENT 
-- On AND reduce production _simple_exp -> IDENT 
-- On AMPERSAND reduce production _simple_exp -> IDENT 

State 149:
_simple_exp -> simple_exp . DOT qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
separated_nonempty_list(POWER,simple_exp) -> simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
separated_nonempty_list(POWER,simple_exp) -> simple_exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On POWER shift to state 150
-- On DOT shift to state 153
-- On WITH reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On WHENOT reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On WHEN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On VAR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On VAL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On UNTIL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On UNSAFE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On UNLESS reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On TYPE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On THEN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On TEL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On SUBTRACTIVE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On STATE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On STAR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On SEMICOL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On RPAREN_GREATER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On RPAREN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On REACHABLE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On RBRACKET reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On RBRACE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On PRAGMA reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On POWER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On OR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On ON reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On NODE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On LET reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On LESS_GREATER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On LESSRBRACKET reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On INFIX4 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On INFIX3 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On INFIX2 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On INFIX1 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On INFIX0 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On FUN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On EXTERNAL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On EVERY reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On EQUAL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On EOF reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On ENFORCE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On END reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On ELSE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On DOUBLE_GREATER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On DOUBLE_DOT reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On DONE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On DO reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On DEFAULT reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On Constructor reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On CONTINUE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On CONST reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On COMMA reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On COLONCOLON reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On BOOL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On BAR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On ATTRACTIVE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On AROBASE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On AND reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
-- On AMPERSAND reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp 
** Conflict on POWER

State 150:
separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER . separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 149
-- On separated_nonempty_list(POWER,simple_exp) shift to state 151
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 151:
separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On WHENOT reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On WHEN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On VAR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On VAL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On UNTIL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On UNSAFE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On UNLESS reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On TYPE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On THEN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On TEL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On SUBTRACTIVE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On STATE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On STAR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On SEMICOL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RPAREN_GREATER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RPAREN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On REACHABLE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RBRACKET reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RBRACE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On PRAGMA reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On POWER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On OR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ON reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On NODE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On LET reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On LESS_GREATER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On LESSRBRACKET reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX4 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX3 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX2 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX1 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX0 reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On FUN reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EXTERNAL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EVERY reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EQUAL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EOF reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ENFORCE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On END reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ELSE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DOUBLE_GREATER reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DOUBLE_DOT reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DONE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DO reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DEFAULT reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On Constructor reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On CONTINUE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On CONST reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On COMMA reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On COLONCOLON reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On BOOL reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On BAR reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ATTRACTIVE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On AROBASE reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On AND reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On AMPERSAND reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) 

State 152:
_const -> qualified(ident) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
-- On WITH reduce production _const -> qualified(ident) 
-- On WHENOT reduce production _const -> qualified(ident) 
-- On WHEN reduce production _const -> qualified(ident) 
-- On VAR reduce production _const -> qualified(ident) 
-- On VAL reduce production _const -> qualified(ident) 
-- On UNTIL reduce production _const -> qualified(ident) 
-- On UNSAFE reduce production _const -> qualified(ident) 
-- On UNLESS reduce production _const -> qualified(ident) 
-- On TYPE reduce production _const -> qualified(ident) 
-- On THEN reduce production _const -> qualified(ident) 
-- On TEL reduce production _const -> qualified(ident) 
-- On SUBTRACTIVE reduce production _const -> qualified(ident) 
-- On STRING reduce production _const -> qualified(ident) 
-- On STATE reduce production _const -> qualified(ident) 
-- On STAR reduce production _const -> qualified(ident) 
-- On SEMICOL reduce production _const -> qualified(ident) 
-- On RPAREN_GREATER reduce production _const -> qualified(ident) 
-- On RPAREN reduce production _const -> qualified(ident) 
-- On REACHABLE reduce production _const -> qualified(ident) 
-- On RBRACKET reduce production _const -> qualified(ident) 
-- On RBRACE reduce production _const -> qualified(ident) 
-- On PRAGMA reduce production _const -> qualified(ident) 
-- On POWER reduce production _const -> qualified(ident) 
-- On OR reduce production _const -> qualified(ident) 
-- On ON reduce production _const -> qualified(ident) 
-- On NODE reduce production _const -> qualified(ident) 
-- On LPAREN reduce production _const -> qualified(ident) 
-- On LET reduce production _const -> qualified(ident) 
-- On LESS_GREATER reduce production _const -> qualified(ident) 
-- On LESSRBRACKET reduce production _const -> qualified(ident) 
-- On LBRACKET reduce production _const -> qualified(ident) 
-- On LBRACE reduce production _const -> qualified(ident) 
-- On INT reduce production _const -> qualified(ident) 
-- On INFIX4 reduce production _const -> qualified(ident) 
-- On INFIX3 reduce production _const -> qualified(ident) 
-- On INFIX2 reduce production _const -> qualified(ident) 
-- On INFIX1 reduce production _const -> qualified(ident) 
-- On INFIX0 reduce production _const -> qualified(ident) 
-- On IDENT reduce production _const -> qualified(ident) 
-- On FUN reduce production _const -> qualified(ident) 
-- On FLOAT reduce production _const -> qualified(ident) 
-- On EXTERNAL reduce production _const -> qualified(ident) 
-- On EVERY reduce production _const -> qualified(ident) 
-- On EQUAL reduce production _const -> qualified(ident) 
-- On EOF reduce production _const -> qualified(ident) 
-- On ENFORCE reduce production _const -> qualified(ident) 
-- On END reduce production _const -> qualified(ident) 
-- On ELSE reduce production _const -> qualified(ident) 
-- On DOUBLE_GREATER reduce production _const -> qualified(ident) 
-- On DOUBLE_DOT reduce production _const -> qualified(ident) 
-- On DOT reduce production _const -> qualified(ident) 
-- On DONE reduce production _const -> qualified(ident) 
-- On DO reduce production _const -> qualified(ident) 
-- On DEFAULT reduce production _const -> qualified(ident) 
-- On Constructor reduce production _const -> qualified(ident) 
-- On CONTINUE reduce production _const -> qualified(ident) 
-- On CONST reduce production _const -> qualified(ident) 
-- On COMMA reduce production _const -> qualified(ident) 
-- On COLONCOLON reduce production _const -> qualified(ident) 
-- On BOOL reduce production _const -> qualified(ident) 
-- On BAR reduce production _const -> qualified(ident) 
-- On ATTRACTIVE reduce production _const -> qualified(ident) 
-- On AT reduce production _const -> qualified(ident) 
-- On AROBASE reduce production _const -> qualified(ident) 
-- On AND reduce production _const -> qualified(ident) 
-- On AMPERSAND reduce production _const -> qualified(ident) 

State 153:
_simple_exp -> simple_exp DOT . qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 154
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88

State 154:
_simple_exp -> simple_exp DOT qualname . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _simple_exp -> simple_exp DOT qualname 
-- On WHENOT reduce production _simple_exp -> simple_exp DOT qualname 
-- On WHEN reduce production _simple_exp -> simple_exp DOT qualname 
-- On VAR reduce production _simple_exp -> simple_exp DOT qualname 
-- On VAL reduce production _simple_exp -> simple_exp DOT qualname 
-- On UNTIL reduce production _simple_exp -> simple_exp DOT qualname 
-- On UNSAFE reduce production _simple_exp -> simple_exp DOT qualname 
-- On UNLESS reduce production _simple_exp -> simple_exp DOT qualname 
-- On TYPE reduce production _simple_exp -> simple_exp DOT qualname 
-- On THEN reduce production _simple_exp -> simple_exp DOT qualname 
-- On TEL reduce production _simple_exp -> simple_exp DOT qualname 
-- On SUBTRACTIVE reduce production _simple_exp -> simple_exp DOT qualname 
-- On STRING reduce production _simple_exp -> simple_exp DOT qualname 
-- On STATE reduce production _simple_exp -> simple_exp DOT qualname 
-- On STAR reduce production _simple_exp -> simple_exp DOT qualname 
-- On SEMICOL reduce production _simple_exp -> simple_exp DOT qualname 
-- On RPAREN_GREATER reduce production _simple_exp -> simple_exp DOT qualname 
-- On RPAREN reduce production _simple_exp -> simple_exp DOT qualname 
-- On REACHABLE reduce production _simple_exp -> simple_exp DOT qualname 
-- On RBRACKET reduce production _simple_exp -> simple_exp DOT qualname 
-- On RBRACE reduce production _simple_exp -> simple_exp DOT qualname 
-- On PRAGMA reduce production _simple_exp -> simple_exp DOT qualname 
-- On POWER reduce production _simple_exp -> simple_exp DOT qualname 
-- On OR reduce production _simple_exp -> simple_exp DOT qualname 
-- On ON reduce production _simple_exp -> simple_exp DOT qualname 
-- On NODE reduce production _simple_exp -> simple_exp DOT qualname 
-- On LPAREN reduce production _simple_exp -> simple_exp DOT qualname 
-- On LET reduce production _simple_exp -> simple_exp DOT qualname 
-- On LESS_GREATER reduce production _simple_exp -> simple_exp DOT qualname 
-- On LESSRBRACKET reduce production _simple_exp -> simple_exp DOT qualname 
-- On LBRACKETGREATER reduce production _simple_exp -> simple_exp DOT qualname 
-- On LBRACKET reduce production _simple_exp -> simple_exp DOT qualname 
-- On LBRACE reduce production _simple_exp -> simple_exp DOT qualname 
-- On INT reduce production _simple_exp -> simple_exp DOT qualname 
-- On INFIX4 reduce production _simple_exp -> simple_exp DOT qualname 
-- On INFIX3 reduce production _simple_exp -> simple_exp DOT qualname 
-- On INFIX2 reduce production _simple_exp -> simple_exp DOT qualname 
-- On INFIX1 reduce production _simple_exp -> simple_exp DOT qualname 
-- On INFIX0 reduce production _simple_exp -> simple_exp DOT qualname 
-- On IDENT reduce production _simple_exp -> simple_exp DOT qualname 
-- On FUN reduce production _simple_exp -> simple_exp DOT qualname 
-- On FLOAT reduce production _simple_exp -> simple_exp DOT qualname 
-- On FBY reduce production _simple_exp -> simple_exp DOT qualname 
-- On EXTERNAL reduce production _simple_exp -> simple_exp DOT qualname 
-- On EVERY reduce production _simple_exp -> simple_exp DOT qualname 
-- On EQUAL reduce production _simple_exp -> simple_exp DOT qualname 
-- On EOF reduce production _simple_exp -> simple_exp DOT qualname 
-- On ENFORCE reduce production _simple_exp -> simple_exp DOT qualname 
-- On END reduce production _simple_exp -> simple_exp DOT qualname 
-- On ELSE reduce production _simple_exp -> simple_exp DOT qualname 
-- On DOUBLE_GREATER reduce production _simple_exp -> simple_exp DOT qualname 
-- On DOUBLE_DOT reduce production _simple_exp -> simple_exp DOT qualname 
-- On DOT reduce production _simple_exp -> simple_exp DOT qualname 
-- On DONE reduce production _simple_exp -> simple_exp DOT qualname 
-- On DO reduce production _simple_exp -> simple_exp DOT qualname 
-- On DEFAULT reduce production _simple_exp -> simple_exp DOT qualname 
-- On Constructor reduce production _simple_exp -> simple_exp DOT qualname 
-- On CONTINUE reduce production _simple_exp -> simple_exp DOT qualname 
-- On CONST reduce production _simple_exp -> simple_exp DOT qualname 
-- On COMMA reduce production _simple_exp -> simple_exp DOT qualname 
-- On COLONCOLON reduce production _simple_exp -> simple_exp DOT qualname 
-- On BOOL reduce production _simple_exp -> simple_exp DOT qualname 
-- On BAR reduce production _simple_exp -> simple_exp DOT qualname 
-- On ATTRACTIVE reduce production _simple_exp -> simple_exp DOT qualname 
-- On AT reduce production _simple_exp -> simple_exp DOT qualname 
-- On ARROW reduce production _simple_exp -> simple_exp DOT qualname 
-- On AROBASE reduce production _simple_exp -> simple_exp DOT qualname 
-- On AND reduce production _simple_exp -> simple_exp DOT qualname 
-- On AMPERSAND reduce production _simple_exp -> simple_exp DOT qualname 

State 155:
_exp -> exp POWER separated_nonempty_list(POWER,simple_exp) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On WHENOT reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On WHEN reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On VAR reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On VAL reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On UNTIL reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On UNSAFE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On UNLESS reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On TYPE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On THEN reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On TEL reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On SUBTRACTIVE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On STATE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On STAR reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On SEMICOL reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RPAREN_GREATER reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RPAREN reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On REACHABLE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RBRACKET reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On RBRACE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On PRAGMA reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On POWER reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On OR reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ON reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On NODE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On LET reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On LESS_GREATER reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On LESSRBRACKET reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX4 reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX3 reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX2 reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX1 reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On INFIX0 reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On FUN reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EXTERNAL reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EVERY reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EQUAL reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On EOF reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ENFORCE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On END reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ELSE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DOUBLE_GREATER reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DOUBLE_DOT reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DONE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DO reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On DEFAULT reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On Constructor reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On CONTINUE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On CONST reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On COMMA reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On COLONCOLON reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On BOOL reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On BAR reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On ATTRACTIVE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On AROBASE reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On AND reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 
-- On AMPERSAND reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp) 

State 156:
array_exp_list -> exp COMMA . array_exp_list [ RBRACKET DOUBLE_GREATER ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 157
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 157:
array_exp_list -> exp COMMA array_exp_list . [ RBRACKET DOUBLE_GREATER ]
-- On RBRACKET reduce production array_exp_list -> exp COMMA array_exp_list 
-- On DOUBLE_GREATER reduce production array_exp_list -> exp COMMA array_exp_list 

State 158:
_simple_exp -> LBRACKET array_exp_list . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On RBRACKET shift to state 159

State 159:
_simple_exp -> LBRACKET array_exp_list RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On WHENOT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On WHEN reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On VAR reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On VAL reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On UNTIL reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On UNSAFE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On UNLESS reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On TYPE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On THEN reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On TEL reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On SUBTRACTIVE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On STRING reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On STATE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On STAR reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On SEMICOL reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On RPAREN_GREATER reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On RPAREN reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On REACHABLE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On RBRACKET reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On RBRACE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On PRAGMA reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On POWER reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On OR reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On ON reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On NODE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On LPAREN reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On LET reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On LESS_GREATER reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On LESSRBRACKET reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On LBRACKETGREATER reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On LBRACKET reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On LBRACE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On INT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On INFIX4 reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On INFIX3 reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On INFIX2 reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On INFIX1 reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On INFIX0 reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On IDENT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On FUN reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On FLOAT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On FBY reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On EXTERNAL reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On EVERY reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On EQUAL reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On EOF reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On ENFORCE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On END reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On ELSE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On DOUBLE_GREATER reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On DOUBLE_DOT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On DOT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On DONE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On DO reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On DEFAULT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On Constructor reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On CONTINUE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On CONST reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On COMMA reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On COLONCOLON reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On BOOL reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On BAR reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On ATTRACTIVE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On AT reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On ARROW reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On AROBASE reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On AND reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 
-- On AMPERSAND reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET 

State 160:
_simple_exp -> simple_exp . DOT qualname [ DOUBLE_GREATER DOT COMMA ]
separated_nonempty_list(COMMA,simple_exp) -> simple_exp . [ DOUBLE_GREATER ]
separated_nonempty_list(COMMA,simple_exp) -> simple_exp . COMMA separated_nonempty_list(COMMA,simple_exp) [ DOUBLE_GREATER ]
-- On DOT shift to state 153
-- On COMMA shift to state 161
-- On DOUBLE_GREATER reduce production separated_nonempty_list(COMMA,simple_exp) -> simple_exp 

State 161:
separated_nonempty_list(COMMA,simple_exp) -> simple_exp COMMA . separated_nonempty_list(COMMA,simple_exp) [ DOUBLE_GREATER ]
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 160
-- On separated_nonempty_list(COMMA,simple_exp) shift to state 162
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 162:
separated_nonempty_list(COMMA,simple_exp) -> simple_exp COMMA separated_nonempty_list(COMMA,simple_exp) . [ DOUBLE_GREATER ]
-- On DOUBLE_GREATER reduce production separated_nonempty_list(COMMA,simple_exp) -> simple_exp COMMA separated_nonempty_list(COMMA,simple_exp) 

State 163:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) . DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) . DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On DOUBLE_GREATER shift to state 164

State 164:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER . qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER . LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 165
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 185
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88

State 165:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN . qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
ident -> LPAREN . infx RPAREN [ LPAREN LESS_LPAREN ]
-- On SUBTRACTIVE shift to state 13
-- On STAR shift to state 14
-- On PREFIX shift to state 15
-- On OR shift to state 16
-- On NOT shift to state 17
-- On LPAREN shift to state 12
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On IDENT shift to state 33
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On Constructor shift to state 2
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On qualname shift to state 166
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On infx shift to state 28
-- On ident shift to state 88

State 166:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname . DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On DOUBLE_LESS shift to state 167

State 167:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS . array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 168
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 168:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list . DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On DOUBLE_GREATER shift to state 169

State 169:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER . RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 170

State 170:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN . delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LESS_LPAREN shift to state 171
-- On delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) shift to state 177
-- On LPAREN reduce production delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> 

State 171:
delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN . slist(COMMA,exp) RPAREN_GREATER [ LPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(COMMA,exp) shift to state 172
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 174
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN_GREATER reduce production slist(COMMA,exp) -> 

State 172:
delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN slist(COMMA,exp) . RPAREN_GREATER [ LPAREN ]
-- On RPAREN_GREATER shift to state 173

State 173:
delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN slist(COMMA,exp) RPAREN_GREATER . [ LPAREN ]
-- On LPAREN reduce production delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN slist(COMMA,exp) RPAREN_GREATER 

State 174:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
slist(COMMA,exp) -> exp . [ RPAREN_GREATER ]
slist(COMMA,exp) -> exp . COMMA slist(COMMA,exp) [ RPAREN_GREATER ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 175
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On RPAREN_GREATER reduce production slist(COMMA,exp) -> exp 

State 175:
slist(COMMA,exp) -> exp COMMA . slist(COMMA,exp) [ RPAREN_GREATER ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(COMMA,exp) shift to state 176
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 174
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN_GREATER reduce production slist(COMMA,exp) -> 

State 176:
slist(COMMA,exp) -> exp COMMA slist(COMMA,exp) . [ RPAREN_GREATER ]
-- On RPAREN_GREATER reduce production slist(COMMA,exp) -> exp COMMA slist(COMMA,exp) 

State 177:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) . LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 178

State 178:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN . exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 80
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exps shift to state 179
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN reduce production exps -> 

State 179:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 180

State 180:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On WHENOT reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On WHEN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On VAR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On VAL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On UNTIL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On UNSAFE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On UNLESS reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On TYPE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On THEN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On TEL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On SUBTRACTIVE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On STATE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On STAR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On SEMICOL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RPAREN_GREATER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RPAREN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On REACHABLE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RBRACKET reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RBRACE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On PRAGMA reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On POWER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On OR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ON reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On NODE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On LET reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On LESS_GREATER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On LESSRBRACKET reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX4 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX3 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX2 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX1 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX0 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On FUN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EXTERNAL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EVERY reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EQUAL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EOF reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ENFORCE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On END reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ELSE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DOUBLE_GREATER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DOUBLE_DOT reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DONE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DO reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DEFAULT reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On Constructor reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On CONTINUE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On CONST reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On COMMA reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On COLONCOLON reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On BOOL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On BAR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ATTRACTIVE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On AROBASE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On AND reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On AMPERSAND reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 

State 181:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
nonmtexps -> exp . opt_comma [ RPAREN ]
nonmtexps -> exp . COMMA nonmtexps [ RPAREN ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 182
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On opt_comma shift to state 184
-- On RPAREN reduce production opt_comma -> 

State 182:
nonmtexps -> exp COMMA . nonmtexps [ RPAREN ]
opt_comma -> COMMA . [ RPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 183
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN reduce production opt_comma -> COMMA 

State 183:
nonmtexps -> exp COMMA nonmtexps . [ RPAREN ]
-- On RPAREN reduce production nonmtexps -> exp COMMA nonmtexps 

State 184:
nonmtexps -> exp opt_comma . [ RPAREN ]
-- On RPAREN reduce production nonmtexps -> exp opt_comma 

State 185:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname . delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LESS_LPAREN shift to state 171
-- On delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) shift to state 186
-- On LPAREN reduce production delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> 

State 186:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) . LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 187

State 187:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN . exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 80
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exps shift to state 188
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN reduce production exps -> 

State 188:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 189

State 189:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On WHENOT reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On WHEN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On VAR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On VAL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On UNTIL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On UNSAFE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On UNLESS reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On TYPE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On THEN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On TEL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On SUBTRACTIVE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On STATE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On STAR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On SEMICOL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RPAREN_GREATER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RPAREN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On REACHABLE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RBRACKET reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On RBRACE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On PRAGMA reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On POWER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On OR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ON reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On NODE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On LET reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On LESS_GREATER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On LESSRBRACKET reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX4 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX3 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX2 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX1 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On INFIX0 reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On FUN reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EXTERNAL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EVERY reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EQUAL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On EOF reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ENFORCE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On END reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ELSE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DOUBLE_GREATER reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DOUBLE_DOT reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DONE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DO reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On DEFAULT reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On Constructor reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On CONTINUE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On CONST reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On COMMA reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On COLONCOLON reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On BOOL reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On BAR reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On ATTRACTIVE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On AROBASE reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On AND reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 
-- On AMPERSAND reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN 

State 190:
_exp -> node_name LPAREN exps . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 191

State 191:
_exp -> node_name LPAREN exps RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> node_name LPAREN exps RPAREN 
-- On WHENOT reduce production _exp -> node_name LPAREN exps RPAREN 
-- On WHEN reduce production _exp -> node_name LPAREN exps RPAREN 
-- On VAR reduce production _exp -> node_name LPAREN exps RPAREN 
-- On VAL reduce production _exp -> node_name LPAREN exps RPAREN 
-- On UNTIL reduce production _exp -> node_name LPAREN exps RPAREN 
-- On UNSAFE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On UNLESS reduce production _exp -> node_name LPAREN exps RPAREN 
-- On TYPE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On THEN reduce production _exp -> node_name LPAREN exps RPAREN 
-- On TEL reduce production _exp -> node_name LPAREN exps RPAREN 
-- On SUBTRACTIVE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On STATE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On STAR reduce production _exp -> node_name LPAREN exps RPAREN 
-- On SEMICOL reduce production _exp -> node_name LPAREN exps RPAREN 
-- On RPAREN_GREATER reduce production _exp -> node_name LPAREN exps RPAREN 
-- On RPAREN reduce production _exp -> node_name LPAREN exps RPAREN 
-- On REACHABLE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On RBRACKET reduce production _exp -> node_name LPAREN exps RPAREN 
-- On RBRACE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On PRAGMA reduce production _exp -> node_name LPAREN exps RPAREN 
-- On POWER reduce production _exp -> node_name LPAREN exps RPAREN 
-- On OR reduce production _exp -> node_name LPAREN exps RPAREN 
-- On ON reduce production _exp -> node_name LPAREN exps RPAREN 
-- On NODE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On LET reduce production _exp -> node_name LPAREN exps RPAREN 
-- On LESS_GREATER reduce production _exp -> node_name LPAREN exps RPAREN 
-- On LESSRBRACKET reduce production _exp -> node_name LPAREN exps RPAREN 
-- On INFIX4 reduce production _exp -> node_name LPAREN exps RPAREN 
-- On INFIX3 reduce production _exp -> node_name LPAREN exps RPAREN 
-- On INFIX2 reduce production _exp -> node_name LPAREN exps RPAREN 
-- On INFIX1 reduce production _exp -> node_name LPAREN exps RPAREN 
-- On INFIX0 reduce production _exp -> node_name LPAREN exps RPAREN 
-- On FUN reduce production _exp -> node_name LPAREN exps RPAREN 
-- On EXTERNAL reduce production _exp -> node_name LPAREN exps RPAREN 
-- On EVERY reduce production _exp -> node_name LPAREN exps RPAREN 
-- On EQUAL reduce production _exp -> node_name LPAREN exps RPAREN 
-- On EOF reduce production _exp -> node_name LPAREN exps RPAREN 
-- On ENFORCE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On END reduce production _exp -> node_name LPAREN exps RPAREN 
-- On ELSE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On DOUBLE_GREATER reduce production _exp -> node_name LPAREN exps RPAREN 
-- On DOUBLE_DOT reduce production _exp -> node_name LPAREN exps RPAREN 
-- On DONE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On DO reduce production _exp -> node_name LPAREN exps RPAREN 
-- On DEFAULT reduce production _exp -> node_name LPAREN exps RPAREN 
-- On Constructor reduce production _exp -> node_name LPAREN exps RPAREN 
-- On CONTINUE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On CONST reduce production _exp -> node_name LPAREN exps RPAREN 
-- On COMMA reduce production _exp -> node_name LPAREN exps RPAREN 
-- On COLONCOLON reduce production _exp -> node_name LPAREN exps RPAREN 
-- On BOOL reduce production _exp -> node_name LPAREN exps RPAREN 
-- On BAR reduce production _exp -> node_name LPAREN exps RPAREN 
-- On ATTRACTIVE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On AROBASE reduce production _exp -> node_name LPAREN exps RPAREN 
-- On AND reduce production _exp -> node_name LPAREN exps RPAREN 
-- On AMPERSAND reduce production _exp -> node_name LPAREN exps RPAREN 

State 192:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER exp . LESSRBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER exp . LESSRBRACKET trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On LESSRBRACKET shift to state 193
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 193:
trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET . trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LBRACKETGREATER shift to state 73
-- On trunc_indexes shift to state 194
-- On WITH reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On WHENOT reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On WHEN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On VAR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On VAL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On UNTIL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On UNSAFE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On UNLESS reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On TYPE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On THEN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On TEL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On SUBTRACTIVE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On STATE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On STAR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On SEMICOL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On RPAREN_GREATER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On RPAREN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On REACHABLE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On RBRACKET reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On RBRACE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On PRAGMA reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On POWER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On OR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On ON reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On NODE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On LET reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On LESS_GREATER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On LESSRBRACKET reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On INFIX4 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On INFIX3 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On INFIX2 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On INFIX1 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On INFIX0 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On FUN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On EXTERNAL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On EVERY reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On EQUAL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On EOF reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On ENFORCE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On END reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On ELSE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On DOUBLE_GREATER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On DOUBLE_DOT reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On DONE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On DO reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On DEFAULT reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On Constructor reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On CONTINUE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On CONST reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On COMMA reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On COLONCOLON reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On BOOL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On BAR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On ATTRACTIVE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On AROBASE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On AND reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 
-- On AMPERSAND reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET 

State 194:
trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On WHENOT reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On WHEN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On VAR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On VAL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On UNTIL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On UNSAFE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On UNLESS reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On TYPE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On THEN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On TEL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On SUBTRACTIVE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On STATE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On STAR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On SEMICOL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On RPAREN_GREATER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On RPAREN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On REACHABLE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On RBRACKET reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On RBRACE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On PRAGMA reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On POWER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On OR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On ON reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On NODE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On LET reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On LESS_GREATER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On LESSRBRACKET reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On INFIX4 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On INFIX3 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On INFIX2 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On INFIX1 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On INFIX0 reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On FUN reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On EXTERNAL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On EVERY reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On EQUAL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On EOF reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On ENFORCE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On END reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On ELSE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On DOUBLE_GREATER reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On DOUBLE_DOT reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On DONE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On DO reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On DEFAULT reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On Constructor reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On CONTINUE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On CONST reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On COMMA reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On COLONCOLON reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On BOOL reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On BAR reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On ATTRACTIVE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On AROBASE reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On AND reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 
-- On AMPERSAND reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes 

State 195:
_exp -> simple_exp LBRACKET . exp DOUBLE_DOT exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET . exp RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 196
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 196:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> simple_exp LBRACKET exp . DOUBLE_DOT exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 197
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On DOUBLE_DOT shift to state 201
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 197:
indexes -> LBRACKET exp RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp RBRACKET . indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LBRACKET shift to state 198
-- On indexes shift to state 200
-- On WITH reduce production indexes -> LBRACKET exp RBRACKET 
-- On WHENOT reduce production indexes -> LBRACKET exp RBRACKET 
-- On WHEN reduce production indexes -> LBRACKET exp RBRACKET 
-- On VAR reduce production indexes -> LBRACKET exp RBRACKET 
-- On VAL reduce production indexes -> LBRACKET exp RBRACKET 
-- On UNTIL reduce production indexes -> LBRACKET exp RBRACKET 
-- On UNSAFE reduce production indexes -> LBRACKET exp RBRACKET 
-- On UNLESS reduce production indexes -> LBRACKET exp RBRACKET 
-- On TYPE reduce production indexes -> LBRACKET exp RBRACKET 
-- On THEN reduce production indexes -> LBRACKET exp RBRACKET 
-- On TEL reduce production indexes -> LBRACKET exp RBRACKET 
-- On SUBTRACTIVE reduce production indexes -> LBRACKET exp RBRACKET 
-- On STATE reduce production indexes -> LBRACKET exp RBRACKET 
-- On STAR reduce production indexes -> LBRACKET exp RBRACKET 
-- On SEMICOL reduce production indexes -> LBRACKET exp RBRACKET 
-- On RPAREN_GREATER reduce production indexes -> LBRACKET exp RBRACKET 
-- On RPAREN reduce production indexes -> LBRACKET exp RBRACKET 
-- On REACHABLE reduce production indexes -> LBRACKET exp RBRACKET 
-- On RBRACKET reduce production indexes -> LBRACKET exp RBRACKET 
-- On RBRACE reduce production indexes -> LBRACKET exp RBRACKET 
-- On PRAGMA reduce production indexes -> LBRACKET exp RBRACKET 
-- On POWER reduce production indexes -> LBRACKET exp RBRACKET 
-- On OR reduce production indexes -> LBRACKET exp RBRACKET 
-- On ON reduce production indexes -> LBRACKET exp RBRACKET 
-- On NODE reduce production indexes -> LBRACKET exp RBRACKET 
-- On LET reduce production indexes -> LBRACKET exp RBRACKET 
-- On LESS_GREATER reduce production indexes -> LBRACKET exp RBRACKET 
-- On LESSRBRACKET reduce production indexes -> LBRACKET exp RBRACKET 
-- On INFIX4 reduce production indexes -> LBRACKET exp RBRACKET 
-- On INFIX3 reduce production indexes -> LBRACKET exp RBRACKET 
-- On INFIX2 reduce production indexes -> LBRACKET exp RBRACKET 
-- On INFIX1 reduce production indexes -> LBRACKET exp RBRACKET 
-- On INFIX0 reduce production indexes -> LBRACKET exp RBRACKET 
-- On FUN reduce production indexes -> LBRACKET exp RBRACKET 
-- On EXTERNAL reduce production indexes -> LBRACKET exp RBRACKET 
-- On EVERY reduce production indexes -> LBRACKET exp RBRACKET 
-- On EQUAL reduce production indexes -> LBRACKET exp RBRACKET 
-- On EOF reduce production indexes -> LBRACKET exp RBRACKET 
-- On ENFORCE reduce production indexes -> LBRACKET exp RBRACKET 
-- On END reduce production indexes -> LBRACKET exp RBRACKET 
-- On ELSE reduce production indexes -> LBRACKET exp RBRACKET 
-- On DOUBLE_GREATER reduce production indexes -> LBRACKET exp RBRACKET 
-- On DOUBLE_DOT reduce production indexes -> LBRACKET exp RBRACKET 
-- On DONE reduce production indexes -> LBRACKET exp RBRACKET 
-- On DO reduce production indexes -> LBRACKET exp RBRACKET 
-- On DEFAULT reduce production indexes -> LBRACKET exp RBRACKET 
-- On Constructor reduce production indexes -> LBRACKET exp RBRACKET 
-- On CONTINUE reduce production indexes -> LBRACKET exp RBRACKET 
-- On CONST reduce production indexes -> LBRACKET exp RBRACKET 
-- On COMMA reduce production indexes -> LBRACKET exp RBRACKET 
-- On COLONCOLON reduce production indexes -> LBRACKET exp RBRACKET 
-- On BOOL reduce production indexes -> LBRACKET exp RBRACKET 
-- On BAR reduce production indexes -> LBRACKET exp RBRACKET 
-- On ATTRACTIVE reduce production indexes -> LBRACKET exp RBRACKET 
-- On AROBASE reduce production indexes -> LBRACKET exp RBRACKET 
-- On AND reduce production indexes -> LBRACKET exp RBRACKET 
-- On AMPERSAND reduce production indexes -> LBRACKET exp RBRACKET 

State 198:
indexes -> LBRACKET . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET . exp RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 199
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 199:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 197
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 200:
indexes -> LBRACKET exp RBRACKET indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On WHENOT reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On WHEN reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On VAR reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On VAL reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On UNTIL reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On UNSAFE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On UNLESS reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On TYPE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On THEN reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On TEL reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On SUBTRACTIVE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On STATE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On STAR reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On SEMICOL reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On RPAREN_GREATER reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On RPAREN reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On REACHABLE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On RBRACKET reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On RBRACE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On PRAGMA reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On POWER reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On OR reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On ON reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On NODE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On LET reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On LESS_GREATER reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On LESSRBRACKET reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On INFIX4 reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On INFIX3 reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On INFIX2 reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On INFIX1 reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On INFIX0 reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On FUN reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On EXTERNAL reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On EVERY reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On EQUAL reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On EOF reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On ENFORCE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On END reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On ELSE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On DOUBLE_GREATER reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On DOUBLE_DOT reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On DONE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On DO reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On DEFAULT reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On Constructor reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On CONTINUE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On CONST reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On COMMA reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On COLONCOLON reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On BOOL reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On BAR reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On ATTRACTIVE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On AROBASE reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On AND reduce production indexes -> LBRACKET exp RBRACKET indexes 
-- On AMPERSAND reduce production indexes -> LBRACKET exp RBRACKET indexes 

State 201:
_exp -> simple_exp LBRACKET exp DOUBLE_DOT . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 202
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 202:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> simple_exp LBRACKET exp DOUBLE_DOT exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 203
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 203:
_exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On WHENOT reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On WHEN reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On VAR reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On VAL reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On UNTIL reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On UNSAFE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On UNLESS reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On TYPE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On THEN reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On TEL reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On SUBTRACTIVE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On STATE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On STAR reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On SEMICOL reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On RPAREN_GREATER reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On RPAREN reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On REACHABLE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On RBRACKET reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On RBRACE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On PRAGMA reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On POWER reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On OR reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On ON reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On NODE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On LET reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On LESS_GREATER reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On LESSRBRACKET reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On INFIX4 reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On INFIX3 reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On INFIX2 reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On INFIX1 reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On INFIX0 reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On FUN reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On EXTERNAL reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On EVERY reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On EQUAL reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On EOF reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On ENFORCE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On END reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On ELSE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On DOUBLE_GREATER reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On DOUBLE_DOT reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On DONE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On DO reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On DEFAULT reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On Constructor reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On CONTINUE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On CONST reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On COMMA reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On COLONCOLON reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On BOOL reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On BAR reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On ATTRACTIVE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On AROBASE reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On AND reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 
-- On AMPERSAND reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET 

State 204:
_exp -> simple_exp FBY . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 205
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 205:
_exp -> simple_exp FBY exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On POWER shift to state 108
-- On WITH reduce production _exp -> simple_exp FBY exp 
-- On WHENOT reduce production _exp -> simple_exp FBY exp 
-- On WHEN reduce production _exp -> simple_exp FBY exp 
-- On VAR reduce production _exp -> simple_exp FBY exp 
-- On VAL reduce production _exp -> simple_exp FBY exp 
-- On UNTIL reduce production _exp -> simple_exp FBY exp 
-- On UNSAFE reduce production _exp -> simple_exp FBY exp 
-- On UNLESS reduce production _exp -> simple_exp FBY exp 
-- On TYPE reduce production _exp -> simple_exp FBY exp 
-- On THEN reduce production _exp -> simple_exp FBY exp 
-- On TEL reduce production _exp -> simple_exp FBY exp 
-- On SUBTRACTIVE reduce production _exp -> simple_exp FBY exp 
-- On STATE reduce production _exp -> simple_exp FBY exp 
-- On STAR reduce production _exp -> simple_exp FBY exp 
-- On SEMICOL reduce production _exp -> simple_exp FBY exp 
-- On RPAREN_GREATER reduce production _exp -> simple_exp FBY exp 
-- On RPAREN reduce production _exp -> simple_exp FBY exp 
-- On REACHABLE reduce production _exp -> simple_exp FBY exp 
-- On RBRACKET reduce production _exp -> simple_exp FBY exp 
-- On RBRACE reduce production _exp -> simple_exp FBY exp 
-- On PRAGMA reduce production _exp -> simple_exp FBY exp 
-- On OR reduce production _exp -> simple_exp FBY exp 
-- On ON reduce production _exp -> simple_exp FBY exp 
-- On NODE reduce production _exp -> simple_exp FBY exp 
-- On LET reduce production _exp -> simple_exp FBY exp 
-- On LESS_GREATER reduce production _exp -> simple_exp FBY exp 
-- On LESSRBRACKET reduce production _exp -> simple_exp FBY exp 
-- On INFIX4 reduce production _exp -> simple_exp FBY exp 
-- On INFIX3 reduce production _exp -> simple_exp FBY exp 
-- On INFIX2 reduce production _exp -> simple_exp FBY exp 
-- On INFIX1 reduce production _exp -> simple_exp FBY exp 
-- On INFIX0 reduce production _exp -> simple_exp FBY exp 
-- On FUN reduce production _exp -> simple_exp FBY exp 
-- On EXTERNAL reduce production _exp -> simple_exp FBY exp 
-- On EVERY reduce production _exp -> simple_exp FBY exp 
-- On EQUAL reduce production _exp -> simple_exp FBY exp 
-- On EOF reduce production _exp -> simple_exp FBY exp 
-- On ENFORCE reduce production _exp -> simple_exp FBY exp 
-- On END reduce production _exp -> simple_exp FBY exp 
-- On ELSE reduce production _exp -> simple_exp FBY exp 
-- On DOUBLE_GREATER reduce production _exp -> simple_exp FBY exp 
-- On DOUBLE_DOT reduce production _exp -> simple_exp FBY exp 
-- On DONE reduce production _exp -> simple_exp FBY exp 
-- On DO reduce production _exp -> simple_exp FBY exp 
-- On DEFAULT reduce production _exp -> simple_exp FBY exp 
-- On Constructor reduce production _exp -> simple_exp FBY exp 
-- On CONTINUE reduce production _exp -> simple_exp FBY exp 
-- On CONST reduce production _exp -> simple_exp FBY exp 
-- On COMMA reduce production _exp -> simple_exp FBY exp 
-- On COLONCOLON reduce production _exp -> simple_exp FBY exp 
-- On BOOL reduce production _exp -> simple_exp FBY exp 
-- On BAR reduce production _exp -> simple_exp FBY exp 
-- On ATTRACTIVE reduce production _exp -> simple_exp FBY exp 
-- On AROBASE reduce production _exp -> simple_exp FBY exp 
-- On AND reduce production _exp -> simple_exp FBY exp 
-- On AMPERSAND reduce production _exp -> simple_exp FBY exp 

State 206:
_exp -> simple_exp DOT . indexes DEFAULT exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> simple_exp DOT . qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 12
-- On LBRACKET shift to state 198
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 154
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On indexes shift to state 207
-- On ident shift to state 88

State 207:
_exp -> simple_exp DOT indexes . DEFAULT exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On DEFAULT shift to state 208

State 208:
_exp -> simple_exp DOT indexes DEFAULT . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 209
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 209:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp DOT indexes DEFAULT exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On WITH reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On VAR reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On VAL reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On UNTIL reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On UNSAFE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On UNLESS reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On TYPE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On THEN reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On TEL reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On STATE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On SEMICOL reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On RPAREN_GREATER reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On RPAREN reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On REACHABLE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On RBRACKET reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On RBRACE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On PRAGMA reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On ON reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On NODE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On LET reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On LESSRBRACKET reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On FUN reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On EXTERNAL reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On EVERY reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On EOF reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On ENFORCE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On END reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On ELSE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On DOUBLE_GREATER reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On DOUBLE_DOT reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On DONE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On DO reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On DEFAULT reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On Constructor reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On CONTINUE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On CONST reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On COMMA reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On COLONCOLON reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On BOOL reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On BAR reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On ATTRACTIVE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 
-- On AROBASE reduce production _exp -> simple_exp DOT indexes DEFAULT exp 

State 210:
_exp -> simple_exp ARROW . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 211
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 211:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp ARROW exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On WITH reduce production _exp -> simple_exp ARROW exp 
-- On VAR reduce production _exp -> simple_exp ARROW exp 
-- On VAL reduce production _exp -> simple_exp ARROW exp 
-- On UNTIL reduce production _exp -> simple_exp ARROW exp 
-- On UNSAFE reduce production _exp -> simple_exp ARROW exp 
-- On UNLESS reduce production _exp -> simple_exp ARROW exp 
-- On TYPE reduce production _exp -> simple_exp ARROW exp 
-- On THEN reduce production _exp -> simple_exp ARROW exp 
-- On TEL reduce production _exp -> simple_exp ARROW exp 
-- On STATE reduce production _exp -> simple_exp ARROW exp 
-- On SEMICOL reduce production _exp -> simple_exp ARROW exp 
-- On RPAREN_GREATER reduce production _exp -> simple_exp ARROW exp 
-- On RPAREN reduce production _exp -> simple_exp ARROW exp 
-- On REACHABLE reduce production _exp -> simple_exp ARROW exp 
-- On RBRACKET reduce production _exp -> simple_exp ARROW exp 
-- On RBRACE reduce production _exp -> simple_exp ARROW exp 
-- On PRAGMA reduce production _exp -> simple_exp ARROW exp 
-- On ON reduce production _exp -> simple_exp ARROW exp 
-- On NODE reduce production _exp -> simple_exp ARROW exp 
-- On LET reduce production _exp -> simple_exp ARROW exp 
-- On LESSRBRACKET reduce production _exp -> simple_exp ARROW exp 
-- On FUN reduce production _exp -> simple_exp ARROW exp 
-- On EXTERNAL reduce production _exp -> simple_exp ARROW exp 
-- On EVERY reduce production _exp -> simple_exp ARROW exp 
-- On EOF reduce production _exp -> simple_exp ARROW exp 
-- On ENFORCE reduce production _exp -> simple_exp ARROW exp 
-- On END reduce production _exp -> simple_exp ARROW exp 
-- On ELSE reduce production _exp -> simple_exp ARROW exp 
-- On DOUBLE_GREATER reduce production _exp -> simple_exp ARROW exp 
-- On DOUBLE_DOT reduce production _exp -> simple_exp ARROW exp 
-- On DONE reduce production _exp -> simple_exp ARROW exp 
-- On DO reduce production _exp -> simple_exp ARROW exp 
-- On DEFAULT reduce production _exp -> simple_exp ARROW exp 
-- On Constructor reduce production _exp -> simple_exp ARROW exp 
-- On CONTINUE reduce production _exp -> simple_exp ARROW exp 
-- On CONST reduce production _exp -> simple_exp ARROW exp 
-- On COMMA reduce production _exp -> simple_exp ARROW exp 
-- On COLONCOLON reduce production _exp -> simple_exp ARROW exp 
-- On BOOL reduce production _exp -> simple_exp ARROW exp 
-- On BAR reduce production _exp -> simple_exp ARROW exp 
-- On ATTRACTIVE reduce production _exp -> simple_exp ARROW exp 
-- On AROBASE reduce production _exp -> simple_exp ARROW exp 

State 212:
_exp -> simple_exp trunc_indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> simple_exp trunc_indexes 
-- On WHENOT reduce production _exp -> simple_exp trunc_indexes 
-- On WHEN reduce production _exp -> simple_exp trunc_indexes 
-- On VAR reduce production _exp -> simple_exp trunc_indexes 
-- On VAL reduce production _exp -> simple_exp trunc_indexes 
-- On UNTIL reduce production _exp -> simple_exp trunc_indexes 
-- On UNSAFE reduce production _exp -> simple_exp trunc_indexes 
-- On UNLESS reduce production _exp -> simple_exp trunc_indexes 
-- On TYPE reduce production _exp -> simple_exp trunc_indexes 
-- On THEN reduce production _exp -> simple_exp trunc_indexes 
-- On TEL reduce production _exp -> simple_exp trunc_indexes 
-- On SUBTRACTIVE reduce production _exp -> simple_exp trunc_indexes 
-- On STATE reduce production _exp -> simple_exp trunc_indexes 
-- On STAR reduce production _exp -> simple_exp trunc_indexes 
-- On SEMICOL reduce production _exp -> simple_exp trunc_indexes 
-- On RPAREN_GREATER reduce production _exp -> simple_exp trunc_indexes 
-- On RPAREN reduce production _exp -> simple_exp trunc_indexes 
-- On REACHABLE reduce production _exp -> simple_exp trunc_indexes 
-- On RBRACKET reduce production _exp -> simple_exp trunc_indexes 
-- On RBRACE reduce production _exp -> simple_exp trunc_indexes 
-- On PRAGMA reduce production _exp -> simple_exp trunc_indexes 
-- On POWER reduce production _exp -> simple_exp trunc_indexes 
-- On OR reduce production _exp -> simple_exp trunc_indexes 
-- On ON reduce production _exp -> simple_exp trunc_indexes 
-- On NODE reduce production _exp -> simple_exp trunc_indexes 
-- On LET reduce production _exp -> simple_exp trunc_indexes 
-- On LESS_GREATER reduce production _exp -> simple_exp trunc_indexes 
-- On LESSRBRACKET reduce production _exp -> simple_exp trunc_indexes 
-- On INFIX4 reduce production _exp -> simple_exp trunc_indexes 
-- On INFIX3 reduce production _exp -> simple_exp trunc_indexes 
-- On INFIX2 reduce production _exp -> simple_exp trunc_indexes 
-- On INFIX1 reduce production _exp -> simple_exp trunc_indexes 
-- On INFIX0 reduce production _exp -> simple_exp trunc_indexes 
-- On FUN reduce production _exp -> simple_exp trunc_indexes 
-- On EXTERNAL reduce production _exp -> simple_exp trunc_indexes 
-- On EVERY reduce production _exp -> simple_exp trunc_indexes 
-- On EQUAL reduce production _exp -> simple_exp trunc_indexes 
-- On EOF reduce production _exp -> simple_exp trunc_indexes 
-- On ENFORCE reduce production _exp -> simple_exp trunc_indexes 
-- On END reduce production _exp -> simple_exp trunc_indexes 
-- On ELSE reduce production _exp -> simple_exp trunc_indexes 
-- On DOUBLE_GREATER reduce production _exp -> simple_exp trunc_indexes 
-- On DOUBLE_DOT reduce production _exp -> simple_exp trunc_indexes 
-- On DONE reduce production _exp -> simple_exp trunc_indexes 
-- On DO reduce production _exp -> simple_exp trunc_indexes 
-- On DEFAULT reduce production _exp -> simple_exp trunc_indexes 
-- On Constructor reduce production _exp -> simple_exp trunc_indexes 
-- On CONTINUE reduce production _exp -> simple_exp trunc_indexes 
-- On CONST reduce production _exp -> simple_exp trunc_indexes 
-- On COMMA reduce production _exp -> simple_exp trunc_indexes 
-- On COLONCOLON reduce production _exp -> simple_exp trunc_indexes 
-- On BOOL reduce production _exp -> simple_exp trunc_indexes 
-- On BAR reduce production _exp -> simple_exp trunc_indexes 
-- On ATTRACTIVE reduce production _exp -> simple_exp trunc_indexes 
-- On AROBASE reduce production _exp -> simple_exp trunc_indexes 
-- On AND reduce production _exp -> simple_exp trunc_indexes 
-- On AMPERSAND reduce production _exp -> simple_exp trunc_indexes 

State 213:
_exp -> simple_exp indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> simple_exp indexes 
-- On WHENOT reduce production _exp -> simple_exp indexes 
-- On WHEN reduce production _exp -> simple_exp indexes 
-- On VAR reduce production _exp -> simple_exp indexes 
-- On VAL reduce production _exp -> simple_exp indexes 
-- On UNTIL reduce production _exp -> simple_exp indexes 
-- On UNSAFE reduce production _exp -> simple_exp indexes 
-- On UNLESS reduce production _exp -> simple_exp indexes 
-- On TYPE reduce production _exp -> simple_exp indexes 
-- On THEN reduce production _exp -> simple_exp indexes 
-- On TEL reduce production _exp -> simple_exp indexes 
-- On SUBTRACTIVE reduce production _exp -> simple_exp indexes 
-- On STATE reduce production _exp -> simple_exp indexes 
-- On STAR reduce production _exp -> simple_exp indexes 
-- On SEMICOL reduce production _exp -> simple_exp indexes 
-- On RPAREN_GREATER reduce production _exp -> simple_exp indexes 
-- On RPAREN reduce production _exp -> simple_exp indexes 
-- On REACHABLE reduce production _exp -> simple_exp indexes 
-- On RBRACKET reduce production _exp -> simple_exp indexes 
-- On RBRACE reduce production _exp -> simple_exp indexes 
-- On PRAGMA reduce production _exp -> simple_exp indexes 
-- On POWER reduce production _exp -> simple_exp indexes 
-- On OR reduce production _exp -> simple_exp indexes 
-- On ON reduce production _exp -> simple_exp indexes 
-- On NODE reduce production _exp -> simple_exp indexes 
-- On LET reduce production _exp -> simple_exp indexes 
-- On LESS_GREATER reduce production _exp -> simple_exp indexes 
-- On LESSRBRACKET reduce production _exp -> simple_exp indexes 
-- On INFIX4 reduce production _exp -> simple_exp indexes 
-- On INFIX3 reduce production _exp -> simple_exp indexes 
-- On INFIX2 reduce production _exp -> simple_exp indexes 
-- On INFIX1 reduce production _exp -> simple_exp indexes 
-- On INFIX0 reduce production _exp -> simple_exp indexes 
-- On FUN reduce production _exp -> simple_exp indexes 
-- On EXTERNAL reduce production _exp -> simple_exp indexes 
-- On EVERY reduce production _exp -> simple_exp indexes 
-- On EQUAL reduce production _exp -> simple_exp indexes 
-- On EOF reduce production _exp -> simple_exp indexes 
-- On ENFORCE reduce production _exp -> simple_exp indexes 
-- On END reduce production _exp -> simple_exp indexes 
-- On ELSE reduce production _exp -> simple_exp indexes 
-- On DOUBLE_GREATER reduce production _exp -> simple_exp indexes 
-- On DOUBLE_DOT reduce production _exp -> simple_exp indexes 
-- On DONE reduce production _exp -> simple_exp indexes 
-- On DO reduce production _exp -> simple_exp indexes 
-- On DEFAULT reduce production _exp -> simple_exp indexes 
-- On Constructor reduce production _exp -> simple_exp indexes 
-- On CONTINUE reduce production _exp -> simple_exp indexes 
-- On CONST reduce production _exp -> simple_exp indexes 
-- On COMMA reduce production _exp -> simple_exp indexes 
-- On COLONCOLON reduce production _exp -> simple_exp indexes 
-- On BOOL reduce production _exp -> simple_exp indexes 
-- On BAR reduce production _exp -> simple_exp indexes 
-- On ATTRACTIVE reduce production _exp -> simple_exp indexes 
-- On AROBASE reduce production _exp -> simple_exp indexes 
-- On AND reduce production _exp -> simple_exp indexes 
-- On AMPERSAND reduce production _exp -> simple_exp indexes 

State 214:
_exp -> exp . INFIX4 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> IF exp . THEN exp ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On THEN shift to state 215
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 215:
_exp -> IF exp THEN . exp ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 216
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 216:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> IF exp THEN exp . ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On ELSE shift to state 217
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 217:
_exp -> IF exp THEN exp ELSE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 218
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 218:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> IF exp THEN exp ELSE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On WITH reduce production _exp -> IF exp THEN exp ELSE exp 
-- On VAR reduce production _exp -> IF exp THEN exp ELSE exp 
-- On VAL reduce production _exp -> IF exp THEN exp ELSE exp 
-- On UNTIL reduce production _exp -> IF exp THEN exp ELSE exp 
-- On UNSAFE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On UNLESS reduce production _exp -> IF exp THEN exp ELSE exp 
-- On TYPE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On THEN reduce production _exp -> IF exp THEN exp ELSE exp 
-- On TEL reduce production _exp -> IF exp THEN exp ELSE exp 
-- On STATE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On SEMICOL reduce production _exp -> IF exp THEN exp ELSE exp 
-- On RPAREN_GREATER reduce production _exp -> IF exp THEN exp ELSE exp 
-- On RPAREN reduce production _exp -> IF exp THEN exp ELSE exp 
-- On REACHABLE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On RBRACKET reduce production _exp -> IF exp THEN exp ELSE exp 
-- On RBRACE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On PRAGMA reduce production _exp -> IF exp THEN exp ELSE exp 
-- On ON reduce production _exp -> IF exp THEN exp ELSE exp 
-- On NODE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On LET reduce production _exp -> IF exp THEN exp ELSE exp 
-- On LESSRBRACKET reduce production _exp -> IF exp THEN exp ELSE exp 
-- On FUN reduce production _exp -> IF exp THEN exp ELSE exp 
-- On EXTERNAL reduce production _exp -> IF exp THEN exp ELSE exp 
-- On EVERY reduce production _exp -> IF exp THEN exp ELSE exp 
-- On EOF reduce production _exp -> IF exp THEN exp ELSE exp 
-- On ENFORCE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On END reduce production _exp -> IF exp THEN exp ELSE exp 
-- On ELSE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On DOUBLE_GREATER reduce production _exp -> IF exp THEN exp ELSE exp 
-- On DOUBLE_DOT reduce production _exp -> IF exp THEN exp ELSE exp 
-- On DONE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On DO reduce production _exp -> IF exp THEN exp ELSE exp 
-- On DEFAULT reduce production _exp -> IF exp THEN exp ELSE exp 
-- On Constructor reduce production _exp -> IF exp THEN exp ELSE exp 
-- On CONTINUE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On CONST reduce production _exp -> IF exp THEN exp ELSE exp 
-- On COMMA reduce production _exp -> IF exp THEN exp ELSE exp 
-- On COLONCOLON reduce production _exp -> IF exp THEN exp ELSE exp 
-- On BOOL reduce production _exp -> IF exp THEN exp ELSE exp 
-- On BAR reduce production _exp -> IF exp THEN exp ELSE exp 
-- On ATTRACTIVE reduce production _exp -> IF exp THEN exp ELSE exp 
-- On AROBASE reduce production _exp -> IF exp THEN exp ELSE exp 

State 219:
call_params -> DOUBLE_LESS array_exp_list . DOUBLE_GREATER [ LPAREN ]
-- On DOUBLE_GREATER shift to state 220

State 220:
call_params -> DOUBLE_LESS array_exp_list DOUBLE_GREATER . [ LPAREN ]
-- On LPAREN reduce production call_params -> DOUBLE_LESS array_exp_list DOUBLE_GREATER 

State 221:
node_name -> INLINED qualname call_params . [ LPAREN ]
-- On LPAREN reduce production node_name -> INLINED qualname call_params 

State 222:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> PREFIX exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> PREFIX exp 
-- On WHENOT reduce production _exp -> PREFIX exp 
-- On WHEN reduce production _exp -> PREFIX exp 
-- On VAR reduce production _exp -> PREFIX exp 
-- On VAL reduce production _exp -> PREFIX exp 
-- On UNTIL reduce production _exp -> PREFIX exp 
-- On UNSAFE reduce production _exp -> PREFIX exp 
-- On UNLESS reduce production _exp -> PREFIX exp 
-- On TYPE reduce production _exp -> PREFIX exp 
-- On THEN reduce production _exp -> PREFIX exp 
-- On TEL reduce production _exp -> PREFIX exp 
-- On SUBTRACTIVE reduce production _exp -> PREFIX exp 
-- On STATE reduce production _exp -> PREFIX exp 
-- On STAR reduce production _exp -> PREFIX exp 
-- On SEMICOL reduce production _exp -> PREFIX exp 
-- On RPAREN_GREATER reduce production _exp -> PREFIX exp 
-- On RPAREN reduce production _exp -> PREFIX exp 
-- On REACHABLE reduce production _exp -> PREFIX exp 
-- On RBRACKET reduce production _exp -> PREFIX exp 
-- On RBRACE reduce production _exp -> PREFIX exp 
-- On PRAGMA reduce production _exp -> PREFIX exp 
-- On POWER reduce production _exp -> PREFIX exp 
-- On OR reduce production _exp -> PREFIX exp 
-- On ON reduce production _exp -> PREFIX exp 
-- On NODE reduce production _exp -> PREFIX exp 
-- On LET reduce production _exp -> PREFIX exp 
-- On LESS_GREATER reduce production _exp -> PREFIX exp 
-- On LESSRBRACKET reduce production _exp -> PREFIX exp 
-- On INFIX4 reduce production _exp -> PREFIX exp 
-- On INFIX3 reduce production _exp -> PREFIX exp 
-- On INFIX2 reduce production _exp -> PREFIX exp 
-- On INFIX1 reduce production _exp -> PREFIX exp 
-- On INFIX0 reduce production _exp -> PREFIX exp 
-- On FUN reduce production _exp -> PREFIX exp 
-- On EXTERNAL reduce production _exp -> PREFIX exp 
-- On EVERY reduce production _exp -> PREFIX exp 
-- On EQUAL reduce production _exp -> PREFIX exp 
-- On EOF reduce production _exp -> PREFIX exp 
-- On ENFORCE reduce production _exp -> PREFIX exp 
-- On END reduce production _exp -> PREFIX exp 
-- On ELSE reduce production _exp -> PREFIX exp 
-- On DOUBLE_GREATER reduce production _exp -> PREFIX exp 
-- On DOUBLE_DOT reduce production _exp -> PREFIX exp 
-- On DONE reduce production _exp -> PREFIX exp 
-- On DO reduce production _exp -> PREFIX exp 
-- On DEFAULT reduce production _exp -> PREFIX exp 
-- On Constructor reduce production _exp -> PREFIX exp 
-- On CONTINUE reduce production _exp -> PREFIX exp 
-- On CONST reduce production _exp -> PREFIX exp 
-- On COMMA reduce production _exp -> PREFIX exp 
-- On COLONCOLON reduce production _exp -> PREFIX exp 
-- On BOOL reduce production _exp -> PREFIX exp 
-- On BAR reduce production _exp -> PREFIX exp 
-- On ATTRACTIVE reduce production _exp -> PREFIX exp 
-- On AROBASE reduce production _exp -> PREFIX exp 
-- On AND reduce production _exp -> PREFIX exp 
-- On AMPERSAND reduce production _exp -> PREFIX exp 

State 223:
_exp -> NOT . exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
infx -> NOT . [ RPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 224
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On RPAREN reduce production infx -> NOT 

State 224:
_exp -> NOT exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On POWER shift to state 108
-- On WITH reduce production _exp -> NOT exp 
-- On WHENOT reduce production _exp -> NOT exp 
-- On WHEN reduce production _exp -> NOT exp 
-- On VAR reduce production _exp -> NOT exp 
-- On VAL reduce production _exp -> NOT exp 
-- On UNTIL reduce production _exp -> NOT exp 
-- On UNSAFE reduce production _exp -> NOT exp 
-- On UNLESS reduce production _exp -> NOT exp 
-- On TYPE reduce production _exp -> NOT exp 
-- On THEN reduce production _exp -> NOT exp 
-- On TEL reduce production _exp -> NOT exp 
-- On SUBTRACTIVE reduce production _exp -> NOT exp 
-- On STATE reduce production _exp -> NOT exp 
-- On STAR reduce production _exp -> NOT exp 
-- On SEMICOL reduce production _exp -> NOT exp 
-- On RPAREN_GREATER reduce production _exp -> NOT exp 
-- On RPAREN reduce production _exp -> NOT exp 
-- On REACHABLE reduce production _exp -> NOT exp 
-- On RBRACKET reduce production _exp -> NOT exp 
-- On RBRACE reduce production _exp -> NOT exp 
-- On PRAGMA reduce production _exp -> NOT exp 
-- On OR reduce production _exp -> NOT exp 
-- On ON reduce production _exp -> NOT exp 
-- On NODE reduce production _exp -> NOT exp 
-- On LET reduce production _exp -> NOT exp 
-- On LESS_GREATER reduce production _exp -> NOT exp 
-- On LESSRBRACKET reduce production _exp -> NOT exp 
-- On INFIX4 reduce production _exp -> NOT exp 
-- On INFIX3 reduce production _exp -> NOT exp 
-- On INFIX2 reduce production _exp -> NOT exp 
-- On INFIX1 reduce production _exp -> NOT exp 
-- On INFIX0 reduce production _exp -> NOT exp 
-- On FUN reduce production _exp -> NOT exp 
-- On EXTERNAL reduce production _exp -> NOT exp 
-- On EVERY reduce production _exp -> NOT exp 
-- On EQUAL reduce production _exp -> NOT exp 
-- On EOF reduce production _exp -> NOT exp 
-- On ENFORCE reduce production _exp -> NOT exp 
-- On END reduce production _exp -> NOT exp 
-- On ELSE reduce production _exp -> NOT exp 
-- On DOUBLE_GREATER reduce production _exp -> NOT exp 
-- On DOUBLE_DOT reduce production _exp -> NOT exp 
-- On DONE reduce production _exp -> NOT exp 
-- On DO reduce production _exp -> NOT exp 
-- On DEFAULT reduce production _exp -> NOT exp 
-- On Constructor reduce production _exp -> NOT exp 
-- On CONTINUE reduce production _exp -> NOT exp 
-- On CONST reduce production _exp -> NOT exp 
-- On COMMA reduce production _exp -> NOT exp 
-- On COLONCOLON reduce production _exp -> NOT exp 
-- On BOOL reduce production _exp -> NOT exp 
-- On BAR reduce production _exp -> NOT exp 
-- On ATTRACTIVE reduce production _exp -> NOT exp 
-- On AROBASE reduce production _exp -> NOT exp 
-- On AND reduce production _exp -> NOT exp 
-- On AMPERSAND reduce production _exp -> NOT exp 

State 225:
_simple_exp -> LPAREN tuple_exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 226

State 226:
_simple_exp -> LPAREN tuple_exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On WHENOT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On WHEN reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On VAR reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On VAL reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On UNTIL reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On UNSAFE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On UNLESS reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On TYPE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On THEN reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On TEL reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On SUBTRACTIVE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On STRING reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On STATE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On STAR reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On SEMICOL reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On RPAREN_GREATER reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On RPAREN reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On REACHABLE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On RBRACKET reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On RBRACE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On PRAGMA reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On POWER reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On OR reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On ON reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On NODE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On LPAREN reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On LET reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On LESS_GREATER reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On LESSRBRACKET reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On LBRACKETGREATER reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On LBRACKET reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On LBRACE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On INT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On INFIX4 reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On INFIX3 reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On INFIX2 reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On INFIX1 reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On INFIX0 reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On IDENT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On FUN reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On FLOAT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On FBY reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On EXTERNAL reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On EVERY reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On EQUAL reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On EOF reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On ENFORCE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On END reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On ELSE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On DOUBLE_GREATER reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On DOUBLE_DOT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On DOT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On DONE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On DO reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On DEFAULT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On Constructor reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On CONTINUE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On CONST reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On COMMA reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On COLONCOLON reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On BOOL reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On BAR reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On ATTRACTIVE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On AT reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On ARROW reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On AROBASE reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On AND reduce production _simple_exp -> LPAREN tuple_exp RPAREN 
-- On AMPERSAND reduce production _simple_exp -> LPAREN tuple_exp RPAREN 

State 227:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
simple_exp -> LPAREN exp . ct_annot RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
tuple_exp -> exp . COMMA exp [ RPAREN ]
tuple_exp -> exp . COMMA tuple_exp [ RPAREN ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On ON shift to state 228
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 245
-- On COLONCOLON shift to state 248
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On ct_annot shift to state 251
-- On RPAREN reduce production ct_annot -> 

State 228:
ct_annot -> ON . on_ck [ RPAREN ]
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 231
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 236

State 229:
on_ck -> IDENT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production on_ck -> IDENT 
-- On RPAREN reduce production on_ck -> IDENT 
-- On ONOT reduce production on_ck -> IDENT 
-- On ON reduce production on_ck -> IDENT 
-- On EQUAL reduce production on_ck -> IDENT 
-- On DOUBLE_GREATER reduce production on_ck -> IDENT 
-- On BAR reduce production on_ck -> IDENT 

State 230:
ck -> DOT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production ck -> DOT 
-- On RPAREN reduce production ck -> DOT 
-- On ONOT reduce production ck -> DOT 
-- On ON reduce production ck -> DOT 
-- On EQUAL reduce production ck -> DOT 
-- On DOUBLE_GREATER reduce production ck -> DOT 
-- On BAR reduce production ck -> DOT 

State 231:
ck -> on_ck . [ ONOT ON ]
ct_annot -> ON on_ck . [ RPAREN ]
-- On RPAREN reduce production ct_annot -> ON on_ck 
-- On ONOT reduce production ck -> on_ck 
-- On ON reduce production ck -> on_ck 

State 232:
on_ck -> constructor_or_bool . LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On LPAREN shift to state 233

State 233:
on_ck -> constructor_or_bool LPAREN . IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 234

State 234:
on_ck -> constructor_or_bool LPAREN IDENT . RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On RPAREN shift to state 235

State 235:
on_ck -> constructor_or_bool LPAREN IDENT RPAREN . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On RPAREN reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On ONOT reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On ON reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On EQUAL reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On DOUBLE_GREATER reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On BAR reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN 

State 236:
on_ck -> ck . ON IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ONOT IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On ONOT shift to state 237
-- On ON shift to state 239

State 237:
on_ck -> ck ONOT . IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 238

State 238:
on_ck -> ck ONOT IDENT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production on_ck -> ck ONOT IDENT 
-- On RPAREN reduce production on_ck -> ck ONOT IDENT 
-- On ONOT reduce production on_ck -> ck ONOT IDENT 
-- On ON reduce production on_ck -> ck ONOT IDENT 
-- On EQUAL reduce production on_ck -> ck ONOT IDENT 
-- On DOUBLE_GREATER reduce production on_ck -> ck ONOT IDENT 
-- On BAR reduce production on_ck -> ck ONOT IDENT 

State 239:
on_ck -> ck ON . IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck ON . constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 240
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 241
-- On constructor shift to state 103

State 240:
on_ck -> ck ON IDENT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production on_ck -> ck ON IDENT 
-- On RPAREN reduce production on_ck -> ck ON IDENT 
-- On ONOT reduce production on_ck -> ck ON IDENT 
-- On ON reduce production on_ck -> ck ON IDENT 
-- On EQUAL reduce production on_ck -> ck ON IDENT 
-- On DOUBLE_GREATER reduce production on_ck -> ck ON IDENT 
-- On BAR reduce production on_ck -> ck ON IDENT 

State 241:
on_ck -> ck ON constructor_or_bool . LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On LPAREN shift to state 242

State 242:
on_ck -> ck ON constructor_or_bool LPAREN . IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 243

State 243:
on_ck -> ck ON constructor_or_bool LPAREN IDENT . RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On RPAREN shift to state 244

State 244:
on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN 
-- On RPAREN reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN 
-- On ONOT reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN 
-- On ON reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN 
-- On EQUAL reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN 
-- On DOUBLE_GREATER reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN 
-- On BAR reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN 

State 245:
tuple_exp -> exp COMMA . exp [ RPAREN ]
tuple_exp -> exp COMMA . tuple_exp [ RPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On tuple_exp shift to state 246
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 247
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 246:
tuple_exp -> exp COMMA tuple_exp . [ RPAREN ]
-- On RPAREN reduce production tuple_exp -> exp COMMA tuple_exp 

State 247:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
tuple_exp -> exp . COMMA exp [ RPAREN ]
tuple_exp -> exp COMMA exp . [ RPAREN ]
tuple_exp -> exp . COMMA tuple_exp [ RPAREN ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 245
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On RPAREN reduce production tuple_exp -> exp COMMA exp 

State 248:
ct_annot -> COLONCOLON . ck [ RPAREN ]
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 249
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 250

State 249:
ck -> on_ck . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production ck -> on_ck 
-- On RPAREN reduce production ck -> on_ck 
-- On ONOT reduce production ck -> on_ck 
-- On ON reduce production ck -> on_ck 
-- On EQUAL reduce production ck -> on_ck 
-- On DOUBLE_GREATER reduce production ck -> on_ck 
-- On BAR reduce production ck -> on_ck 

State 250:
ct_annot -> COLONCOLON ck . [ RPAREN ]
on_ck -> ck . ON IDENT [ RPAREN ONOT ON ]
on_ck -> ck . ONOT IDENT [ RPAREN ONOT ON ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ RPAREN ONOT ON ]
-- On ONOT shift to state 237
-- On ON shift to state 239
-- On RPAREN reduce production ct_annot -> COLONCOLON ck 

State 251:
simple_exp -> LPAREN exp ct_annot . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On RPAREN shift to state 252

State 252:
simple_exp -> LPAREN exp ct_annot RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
-- On WITH reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On WHENOT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On WHEN reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On VAR reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On VAL reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On UNTIL reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On UNSAFE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On UNLESS reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On TYPE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On THEN reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On TEL reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On SUBTRACTIVE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On STRING reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On STATE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On STAR reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On SEMICOL reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On RPAREN_GREATER reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On RPAREN reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On REACHABLE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On RBRACKET reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On RBRACE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On PRAGMA reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On POWER reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On OR reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On ON reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On NODE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On LPAREN reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On LET reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On LESS_GREATER reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On LESSRBRACKET reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On LBRACKETGREATER reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On LBRACKET reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On LBRACE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On INT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On INFIX4 reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On INFIX3 reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On INFIX2 reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On INFIX1 reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On INFIX0 reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On IDENT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On FUN reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On FLOAT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On FBY reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On EXTERNAL reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On EVERY reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On EQUAL reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On EOF reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On ENFORCE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On END reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On ELSE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On DOUBLE_GREATER reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On DOUBLE_DOT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On DOT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On DONE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On DO reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On DEFAULT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On Constructor reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On CONTINUE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On CONST reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On COMMA reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On COLONCOLON reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On BOOL reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On BAR reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On ATTRACTIVE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On AT reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On ARROW reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On AROBASE reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On AND reduce production simple_exp -> LPAREN exp ct_annot RPAREN 
-- On AMPERSAND reduce production simple_exp -> LPAREN exp ct_annot RPAREN 

State 253:
_simple_exp -> IDENT . [ WITH DOT ]
ident -> IDENT . [ EQUAL ]
-- On WITH reduce production _simple_exp -> IDENT 
-- On EQUAL reduce production ident -> IDENT 
-- On DOT reduce production _simple_exp -> IDENT 

State 254:
_exp -> LBRACE simple_exp . WITH DOT qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> simple_exp . DOT qualname [ WITH DOT ]
-- On WITH shift to state 255
-- On DOT shift to state 153

State 255:
_exp -> LBRACE simple_exp WITH . DOT qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On DOT shift to state 256

State 256:
_exp -> LBRACE simple_exp WITH DOT . qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 257
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88

State 257:
_exp -> LBRACE simple_exp WITH DOT qualname . EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On EQUAL shift to state 258

State 258:
_exp -> LBRACE simple_exp WITH DOT qualname EQUAL . exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 259
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 259:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp . RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACE shift to state 260
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 260:
_exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On WHENOT reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On WHEN reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On VAR reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On VAL reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On UNTIL reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On UNSAFE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On UNLESS reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On TYPE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On THEN reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On TEL reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On SUBTRACTIVE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On STATE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On STAR reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On SEMICOL reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On RPAREN_GREATER reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On RPAREN reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On REACHABLE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On RBRACKET reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On RBRACE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On PRAGMA reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On POWER reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On OR reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On ON reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On NODE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On LET reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On LESS_GREATER reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On LESSRBRACKET reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On INFIX4 reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On INFIX3 reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On INFIX2 reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On INFIX1 reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On INFIX0 reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On FUN reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On EXTERNAL reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On EVERY reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On EQUAL reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On EOF reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On ENFORCE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On END reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On ELSE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On DOUBLE_GREATER reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On DOUBLE_DOT reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On DONE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On DO reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On DEFAULT reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On Constructor reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On CONTINUE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On CONST reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On COMMA reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On COLONCOLON reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On BOOL reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On BAR reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On ATTRACTIVE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On AROBASE reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On AND reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 
-- On AMPERSAND reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE 

State 261:
_const -> qualified(ident) . [ WITH DOT ]
qualname -> qualified(ident) . [ EQUAL ]
-- On WITH reduce production _const -> qualified(ident) 
-- On EQUAL reduce production qualname -> qualified(ident) 
-- On DOT reduce production _const -> qualified(ident) 

State 262:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> LBRACKET exp . WITH indexes EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
array_exp_list -> exp . [ RBRACKET ]
array_exp_list -> exp . COMMA array_exp_list [ RBRACKET ]
-- On WITH shift to state 263
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 156
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On RBRACKET reduce production array_exp_list -> exp 

State 263:
_exp -> LBRACKET exp WITH . indexes EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LBRACKET shift to state 198
-- On indexes shift to state 264

State 264:
_exp -> LBRACKET exp WITH indexes . EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On EQUAL shift to state 265

State 265:
_exp -> LBRACKET exp WITH indexes EQUAL . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 266
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 266:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> LBRACKET exp WITH indexes EQUAL exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 267
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 267:
_exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On WHENOT reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On WHEN reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On VAR reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On VAL reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On UNTIL reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On UNSAFE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On UNLESS reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On TYPE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On THEN reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On TEL reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On SUBTRACTIVE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On STATE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On STAR reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On SEMICOL reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On RPAREN_GREATER reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On RPAREN reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On REACHABLE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On RBRACKET reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On RBRACE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On PRAGMA reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On POWER reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On OR reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On ON reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On NODE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On LET reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On LESS_GREATER reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On LESSRBRACKET reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On INFIX4 reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On INFIX3 reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On INFIX2 reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On INFIX1 reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On INFIX0 reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On FUN reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On EXTERNAL reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On EVERY reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On EQUAL reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On EOF reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On ENFORCE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On END reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On ELSE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On DOUBLE_GREATER reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On DOUBLE_DOT reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On DONE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On DO reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On DEFAULT reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On Constructor reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On CONTINUE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On CONST reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On COMMA reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On COLONCOLON reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On BOOL reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On BAR reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On ATTRACTIVE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On AROBASE reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On AND reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 
-- On AMPERSAND reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET 

State 268:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> SUBTRACTIVE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> SUBTRACTIVE exp 
-- On WHENOT reduce production _exp -> SUBTRACTIVE exp 
-- On WHEN reduce production _exp -> SUBTRACTIVE exp 
-- On VAR reduce production _exp -> SUBTRACTIVE exp 
-- On VAL reduce production _exp -> SUBTRACTIVE exp 
-- On UNTIL reduce production _exp -> SUBTRACTIVE exp 
-- On UNSAFE reduce production _exp -> SUBTRACTIVE exp 
-- On UNLESS reduce production _exp -> SUBTRACTIVE exp 
-- On TYPE reduce production _exp -> SUBTRACTIVE exp 
-- On THEN reduce production _exp -> SUBTRACTIVE exp 
-- On TEL reduce production _exp -> SUBTRACTIVE exp 
-- On SUBTRACTIVE reduce production _exp -> SUBTRACTIVE exp 
-- On STATE reduce production _exp -> SUBTRACTIVE exp 
-- On STAR reduce production _exp -> SUBTRACTIVE exp 
-- On SEMICOL reduce production _exp -> SUBTRACTIVE exp 
-- On RPAREN_GREATER reduce production _exp -> SUBTRACTIVE exp 
-- On RPAREN reduce production _exp -> SUBTRACTIVE exp 
-- On REACHABLE reduce production _exp -> SUBTRACTIVE exp 
-- On RBRACKET reduce production _exp -> SUBTRACTIVE exp 
-- On RBRACE reduce production _exp -> SUBTRACTIVE exp 
-- On PRAGMA reduce production _exp -> SUBTRACTIVE exp 
-- On POWER reduce production _exp -> SUBTRACTIVE exp 
-- On OR reduce production _exp -> SUBTRACTIVE exp 
-- On ON reduce production _exp -> SUBTRACTIVE exp 
-- On NODE reduce production _exp -> SUBTRACTIVE exp 
-- On LET reduce production _exp -> SUBTRACTIVE exp 
-- On LESS_GREATER reduce production _exp -> SUBTRACTIVE exp 
-- On LESSRBRACKET reduce production _exp -> SUBTRACTIVE exp 
-- On INFIX4 reduce production _exp -> SUBTRACTIVE exp 
-- On INFIX3 reduce production _exp -> SUBTRACTIVE exp 
-- On INFIX2 reduce production _exp -> SUBTRACTIVE exp 
-- On INFIX1 reduce production _exp -> SUBTRACTIVE exp 
-- On INFIX0 reduce production _exp -> SUBTRACTIVE exp 
-- On FUN reduce production _exp -> SUBTRACTIVE exp 
-- On EXTERNAL reduce production _exp -> SUBTRACTIVE exp 
-- On EVERY reduce production _exp -> SUBTRACTIVE exp 
-- On EQUAL reduce production _exp -> SUBTRACTIVE exp 
-- On EOF reduce production _exp -> SUBTRACTIVE exp 
-- On ENFORCE reduce production _exp -> SUBTRACTIVE exp 
-- On END reduce production _exp -> SUBTRACTIVE exp 
-- On ELSE reduce production _exp -> SUBTRACTIVE exp 
-- On DOUBLE_GREATER reduce production _exp -> SUBTRACTIVE exp 
-- On DOUBLE_DOT reduce production _exp -> SUBTRACTIVE exp 
-- On DONE reduce production _exp -> SUBTRACTIVE exp 
-- On DO reduce production _exp -> SUBTRACTIVE exp 
-- On DEFAULT reduce production _exp -> SUBTRACTIVE exp 
-- On Constructor reduce production _exp -> SUBTRACTIVE exp 
-- On CONTINUE reduce production _exp -> SUBTRACTIVE exp 
-- On CONST reduce production _exp -> SUBTRACTIVE exp 
-- On COMMA reduce production _exp -> SUBTRACTIVE exp 
-- On COLONCOLON reduce production _exp -> SUBTRACTIVE exp 
-- On BOOL reduce production _exp -> SUBTRACTIVE exp 
-- On BAR reduce production _exp -> SUBTRACTIVE exp 
-- On ATTRACTIVE reduce production _exp -> SUBTRACTIVE exp 
-- On AROBASE reduce production _exp -> SUBTRACTIVE exp 
-- On AND reduce production _exp -> SUBTRACTIVE exp 
-- On AMPERSAND reduce production _exp -> SUBTRACTIVE exp 

State 269:
_const -> BOOL . [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FBY EQUAL DOT COMMA COLONCOLON ARROW AROBASE AND AMPERSAND ]
constructor_or_bool -> BOOL . [ ARROW ]
-- On WHENOT reduce production _const -> BOOL 
-- On WHEN reduce production _const -> BOOL 
-- On SUBTRACTIVE reduce production _const -> BOOL 
-- On STAR reduce production _const -> BOOL 
-- On RPAREN reduce production _const -> BOOL 
-- On POWER reduce production _const -> BOOL 
-- On OR reduce production _const -> BOOL 
-- On ON reduce production _const -> BOOL 
-- On LESS_GREATER reduce production _const -> BOOL 
-- On LBRACKETGREATER reduce production _const -> BOOL 
-- On LBRACKET reduce production _const -> BOOL 
-- On INFIX4 reduce production _const -> BOOL 
-- On INFIX3 reduce production _const -> BOOL 
-- On INFIX2 reduce production _const -> BOOL 
-- On INFIX1 reduce production _const -> BOOL 
-- On INFIX0 reduce production _const -> BOOL 
-- On FBY reduce production _const -> BOOL 
-- On EQUAL reduce production _const -> BOOL 
-- On DOT reduce production _const -> BOOL 
-- On COMMA reduce production _const -> BOOL 
-- On COLONCOLON reduce production _const -> BOOL 
-- On ARROW reduce production _const -> BOOL 
-- On ARROW reduce production constructor_or_bool -> BOOL 
-- On AROBASE reduce production _const -> BOOL 
-- On AND reduce production _const -> BOOL 
-- On AMPERSAND reduce production _const -> BOOL 
** Conflict on ARROW

State 270:
merge_handler -> LPAREN constructor_or_bool . ARROW exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On ARROW shift to state 271

State 271:
merge_handler -> LPAREN constructor_or_bool ARROW . exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 272
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 272:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
merge_handler -> LPAREN constructor_or_bool ARROW exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RPAREN shift to state 273
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 273:
merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On WHENOT reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On WHEN reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On VAR reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On VAL reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On UNTIL reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On UNSAFE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On UNLESS reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On TYPE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On THEN reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On TEL reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On SUBTRACTIVE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On STATE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On STAR reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On SEMICOL reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On RPAREN_GREATER reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On RPAREN reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On REACHABLE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On RBRACKET reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On RBRACE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On PRAGMA reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On POWER reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On OR reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On ON reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On NODE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On LPAREN reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On LET reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On LESS_GREATER reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On LESSRBRACKET reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On INFIX4 reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On INFIX3 reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On INFIX2 reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On INFIX1 reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On INFIX0 reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On FUN reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On EXTERNAL reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On EVERY reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On EQUAL reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On EOF reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On ENFORCE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On END reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On ELSE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On DOUBLE_GREATER reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On DOUBLE_DOT reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On DONE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On DO reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On DEFAULT reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On Constructor reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On CONTINUE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On CONST reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On COMMA reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On COLONCOLON reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On BOOL reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On BAR reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On ATTRACTIVE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On AROBASE reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On AND reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 
-- On AMPERSAND reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN 

State 274:
_const -> constructor . [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FBY EQUAL DOT COMMA COLONCOLON ARROW AROBASE AND AMPERSAND ]
constructor_or_bool -> constructor . [ ARROW ]
-- On WHENOT reduce production _const -> constructor 
-- On WHEN reduce production _const -> constructor 
-- On SUBTRACTIVE reduce production _const -> constructor 
-- On STAR reduce production _const -> constructor 
-- On RPAREN reduce production _const -> constructor 
-- On POWER reduce production _const -> constructor 
-- On OR reduce production _const -> constructor 
-- On ON reduce production _const -> constructor 
-- On LESS_GREATER reduce production _const -> constructor 
-- On LBRACKETGREATER reduce production _const -> constructor 
-- On LBRACKET reduce production _const -> constructor 
-- On INFIX4 reduce production _const -> constructor 
-- On INFIX3 reduce production _const -> constructor 
-- On INFIX2 reduce production _const -> constructor 
-- On INFIX1 reduce production _const -> constructor 
-- On INFIX0 reduce production _const -> constructor 
-- On FBY reduce production _const -> constructor 
-- On EQUAL reduce production _const -> constructor 
-- On DOT reduce production _const -> constructor 
-- On COMMA reduce production _const -> constructor 
-- On COLONCOLON reduce production _const -> constructor 
-- On ARROW reduce production _const -> constructor 
-- On ARROW reduce production constructor_or_bool -> constructor 
-- On AROBASE reduce production _const -> constructor 
-- On AND reduce production _const -> constructor 
-- On AMPERSAND reduce production _const -> constructor 
** Conflict on ARROW

State 275:
_simple_exp -> simple_exp . DOT qualname [ STRING LPAREN LBRACKET LBRACE INT IDENT FLOAT DOT Constructor BOOL ]
merge_handlers -> simple_exp . simple_exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On DOT shift to state 153
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 276
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123

State 276:
_simple_exp -> simple_exp . DOT qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
merge_handlers -> simple_exp simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On DOT shift to state 153
-- On WITH reduce production merge_handlers -> simple_exp simple_exp 
-- On WHENOT reduce production merge_handlers -> simple_exp simple_exp 
-- On WHEN reduce production merge_handlers -> simple_exp simple_exp 
-- On VAR reduce production merge_handlers -> simple_exp simple_exp 
-- On VAL reduce production merge_handlers -> simple_exp simple_exp 
-- On UNTIL reduce production merge_handlers -> simple_exp simple_exp 
-- On UNSAFE reduce production merge_handlers -> simple_exp simple_exp 
-- On UNLESS reduce production merge_handlers -> simple_exp simple_exp 
-- On TYPE reduce production merge_handlers -> simple_exp simple_exp 
-- On THEN reduce production merge_handlers -> simple_exp simple_exp 
-- On TEL reduce production merge_handlers -> simple_exp simple_exp 
-- On SUBTRACTIVE reduce production merge_handlers -> simple_exp simple_exp 
-- On STATE reduce production merge_handlers -> simple_exp simple_exp 
-- On STAR reduce production merge_handlers -> simple_exp simple_exp 
-- On SEMICOL reduce production merge_handlers -> simple_exp simple_exp 
-- On RPAREN_GREATER reduce production merge_handlers -> simple_exp simple_exp 
-- On RPAREN reduce production merge_handlers -> simple_exp simple_exp 
-- On REACHABLE reduce production merge_handlers -> simple_exp simple_exp 
-- On RBRACKET reduce production merge_handlers -> simple_exp simple_exp 
-- On RBRACE reduce production merge_handlers -> simple_exp simple_exp 
-- On PRAGMA reduce production merge_handlers -> simple_exp simple_exp 
-- On POWER reduce production merge_handlers -> simple_exp simple_exp 
-- On OR reduce production merge_handlers -> simple_exp simple_exp 
-- On ON reduce production merge_handlers -> simple_exp simple_exp 
-- On NODE reduce production merge_handlers -> simple_exp simple_exp 
-- On LET reduce production merge_handlers -> simple_exp simple_exp 
-- On LESS_GREATER reduce production merge_handlers -> simple_exp simple_exp 
-- On LESSRBRACKET reduce production merge_handlers -> simple_exp simple_exp 
-- On INFIX4 reduce production merge_handlers -> simple_exp simple_exp 
-- On INFIX3 reduce production merge_handlers -> simple_exp simple_exp 
-- On INFIX2 reduce production merge_handlers -> simple_exp simple_exp 
-- On INFIX1 reduce production merge_handlers -> simple_exp simple_exp 
-- On INFIX0 reduce production merge_handlers -> simple_exp simple_exp 
-- On FUN reduce production merge_handlers -> simple_exp simple_exp 
-- On EXTERNAL reduce production merge_handlers -> simple_exp simple_exp 
-- On EVERY reduce production merge_handlers -> simple_exp simple_exp 
-- On EQUAL reduce production merge_handlers -> simple_exp simple_exp 
-- On EOF reduce production merge_handlers -> simple_exp simple_exp 
-- On ENFORCE reduce production merge_handlers -> simple_exp simple_exp 
-- On END reduce production merge_handlers -> simple_exp simple_exp 
-- On ELSE reduce production merge_handlers -> simple_exp simple_exp 
-- On DOUBLE_GREATER reduce production merge_handlers -> simple_exp simple_exp 
-- On DOUBLE_DOT reduce production merge_handlers -> simple_exp simple_exp 
-- On DONE reduce production merge_handlers -> simple_exp simple_exp 
-- On DO reduce production merge_handlers -> simple_exp simple_exp 
-- On DEFAULT reduce production merge_handlers -> simple_exp simple_exp 
-- On Constructor reduce production merge_handlers -> simple_exp simple_exp 
-- On CONTINUE reduce production merge_handlers -> simple_exp simple_exp 
-- On CONST reduce production merge_handlers -> simple_exp simple_exp 
-- On COMMA reduce production merge_handlers -> simple_exp simple_exp 
-- On COLONCOLON reduce production merge_handlers -> simple_exp simple_exp 
-- On BOOL reduce production merge_handlers -> simple_exp simple_exp 
-- On BAR reduce production merge_handlers -> simple_exp simple_exp 
-- On ATTRACTIVE reduce production merge_handlers -> simple_exp simple_exp 
-- On AROBASE reduce production merge_handlers -> simple_exp simple_exp 
-- On AND reduce production merge_handlers -> simple_exp simple_exp 
-- On AMPERSAND reduce production merge_handlers -> simple_exp simple_exp 

State 277:
merge_handlers -> nonempty_list(merge_handler) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On WHENOT reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On WHEN reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On VAR reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On VAL reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On UNTIL reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On UNSAFE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On UNLESS reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On TYPE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On THEN reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On TEL reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On SUBTRACTIVE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On STATE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On STAR reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On SEMICOL reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On RPAREN_GREATER reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On RPAREN reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On REACHABLE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On RBRACKET reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On RBRACE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On PRAGMA reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On POWER reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On OR reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On ON reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On NODE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On LET reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On LESS_GREATER reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On LESSRBRACKET reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On INFIX4 reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On INFIX3 reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On INFIX2 reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On INFIX1 reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On INFIX0 reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On FUN reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On EXTERNAL reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On EVERY reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On EQUAL reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On EOF reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On ENFORCE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On END reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On ELSE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On DOUBLE_GREATER reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On DOUBLE_DOT reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On DONE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On DO reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On DEFAULT reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On Constructor reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On CONTINUE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On CONST reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On COMMA reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On COLONCOLON reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On BOOL reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On BAR reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On ATTRACTIVE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On AROBASE reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On AND reduce production merge_handlers -> nonempty_list(merge_handler) 
-- On AMPERSAND reduce production merge_handlers -> nonempty_list(merge_handler) 

State 278:
_exp -> MERGE IDENT merge_handlers . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> MERGE IDENT merge_handlers 
-- On WHENOT reduce production _exp -> MERGE IDENT merge_handlers 
-- On WHEN reduce production _exp -> MERGE IDENT merge_handlers 
-- On VAR reduce production _exp -> MERGE IDENT merge_handlers 
-- On VAL reduce production _exp -> MERGE IDENT merge_handlers 
-- On UNTIL reduce production _exp -> MERGE IDENT merge_handlers 
-- On UNSAFE reduce production _exp -> MERGE IDENT merge_handlers 
-- On UNLESS reduce production _exp -> MERGE IDENT merge_handlers 
-- On TYPE reduce production _exp -> MERGE IDENT merge_handlers 
-- On THEN reduce production _exp -> MERGE IDENT merge_handlers 
-- On TEL reduce production _exp -> MERGE IDENT merge_handlers 
-- On SUBTRACTIVE reduce production _exp -> MERGE IDENT merge_handlers 
-- On STATE reduce production _exp -> MERGE IDENT merge_handlers 
-- On STAR reduce production _exp -> MERGE IDENT merge_handlers 
-- On SEMICOL reduce production _exp -> MERGE IDENT merge_handlers 
-- On RPAREN_GREATER reduce production _exp -> MERGE IDENT merge_handlers 
-- On RPAREN reduce production _exp -> MERGE IDENT merge_handlers 
-- On REACHABLE reduce production _exp -> MERGE IDENT merge_handlers 
-- On RBRACKET reduce production _exp -> MERGE IDENT merge_handlers 
-- On RBRACE reduce production _exp -> MERGE IDENT merge_handlers 
-- On PRAGMA reduce production _exp -> MERGE IDENT merge_handlers 
-- On POWER reduce production _exp -> MERGE IDENT merge_handlers 
-- On OR reduce production _exp -> MERGE IDENT merge_handlers 
-- On ON reduce production _exp -> MERGE IDENT merge_handlers 
-- On NODE reduce production _exp -> MERGE IDENT merge_handlers 
-- On LET reduce production _exp -> MERGE IDENT merge_handlers 
-- On LESS_GREATER reduce production _exp -> MERGE IDENT merge_handlers 
-- On LESSRBRACKET reduce production _exp -> MERGE IDENT merge_handlers 
-- On INFIX4 reduce production _exp -> MERGE IDENT merge_handlers 
-- On INFIX3 reduce production _exp -> MERGE IDENT merge_handlers 
-- On INFIX2 reduce production _exp -> MERGE IDENT merge_handlers 
-- On INFIX1 reduce production _exp -> MERGE IDENT merge_handlers 
-- On INFIX0 reduce production _exp -> MERGE IDENT merge_handlers 
-- On FUN reduce production _exp -> MERGE IDENT merge_handlers 
-- On EXTERNAL reduce production _exp -> MERGE IDENT merge_handlers 
-- On EVERY reduce production _exp -> MERGE IDENT merge_handlers 
-- On EQUAL reduce production _exp -> MERGE IDENT merge_handlers 
-- On EOF reduce production _exp -> MERGE IDENT merge_handlers 
-- On ENFORCE reduce production _exp -> MERGE IDENT merge_handlers 
-- On END reduce production _exp -> MERGE IDENT merge_handlers 
-- On ELSE reduce production _exp -> MERGE IDENT merge_handlers 
-- On DOUBLE_GREATER reduce production _exp -> MERGE IDENT merge_handlers 
-- On DOUBLE_DOT reduce production _exp -> MERGE IDENT merge_handlers 
-- On DONE reduce production _exp -> MERGE IDENT merge_handlers 
-- On DO reduce production _exp -> MERGE IDENT merge_handlers 
-- On DEFAULT reduce production _exp -> MERGE IDENT merge_handlers 
-- On Constructor reduce production _exp -> MERGE IDENT merge_handlers 
-- On CONTINUE reduce production _exp -> MERGE IDENT merge_handlers 
-- On CONST reduce production _exp -> MERGE IDENT merge_handlers 
-- On COMMA reduce production _exp -> MERGE IDENT merge_handlers 
-- On COLONCOLON reduce production _exp -> MERGE IDENT merge_handlers 
-- On BOOL reduce production _exp -> MERGE IDENT merge_handlers 
-- On BAR reduce production _exp -> MERGE IDENT merge_handlers 
-- On ATTRACTIVE reduce production _exp -> MERGE IDENT merge_handlers 
-- On AROBASE reduce production _exp -> MERGE IDENT merge_handlers 
-- On AND reduce production _exp -> MERGE IDENT merge_handlers 
-- On AMPERSAND reduce production _exp -> MERGE IDENT merge_handlers 

State 279:
nonempty_list(merge_handler) -> merge_handler . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
nonempty_list(merge_handler) -> merge_handler . nonempty_list(merge_handler) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On LPAREN shift to state 280
-- On nonempty_list(merge_handler) shift to state 281
-- On merge_handler shift to state 279
-- On WITH reduce production nonempty_list(merge_handler) -> merge_handler 
-- On WHENOT reduce production nonempty_list(merge_handler) -> merge_handler 
-- On WHEN reduce production nonempty_list(merge_handler) -> merge_handler 
-- On VAR reduce production nonempty_list(merge_handler) -> merge_handler 
-- On VAL reduce production nonempty_list(merge_handler) -> merge_handler 
-- On UNTIL reduce production nonempty_list(merge_handler) -> merge_handler 
-- On UNSAFE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On UNLESS reduce production nonempty_list(merge_handler) -> merge_handler 
-- On TYPE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On THEN reduce production nonempty_list(merge_handler) -> merge_handler 
-- On TEL reduce production nonempty_list(merge_handler) -> merge_handler 
-- On SUBTRACTIVE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On STATE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On STAR reduce production nonempty_list(merge_handler) -> merge_handler 
-- On SEMICOL reduce production nonempty_list(merge_handler) -> merge_handler 
-- On RPAREN_GREATER reduce production nonempty_list(merge_handler) -> merge_handler 
-- On RPAREN reduce production nonempty_list(merge_handler) -> merge_handler 
-- On REACHABLE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On RBRACKET reduce production nonempty_list(merge_handler) -> merge_handler 
-- On RBRACE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On PRAGMA reduce production nonempty_list(merge_handler) -> merge_handler 
-- On POWER reduce production nonempty_list(merge_handler) -> merge_handler 
-- On OR reduce production nonempty_list(merge_handler) -> merge_handler 
-- On ON reduce production nonempty_list(merge_handler) -> merge_handler 
-- On NODE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On LET reduce production nonempty_list(merge_handler) -> merge_handler 
-- On LESS_GREATER reduce production nonempty_list(merge_handler) -> merge_handler 
-- On LESSRBRACKET reduce production nonempty_list(merge_handler) -> merge_handler 
-- On INFIX4 reduce production nonempty_list(merge_handler) -> merge_handler 
-- On INFIX3 reduce production nonempty_list(merge_handler) -> merge_handler 
-- On INFIX2 reduce production nonempty_list(merge_handler) -> merge_handler 
-- On INFIX1 reduce production nonempty_list(merge_handler) -> merge_handler 
-- On INFIX0 reduce production nonempty_list(merge_handler) -> merge_handler 
-- On FUN reduce production nonempty_list(merge_handler) -> merge_handler 
-- On EXTERNAL reduce production nonempty_list(merge_handler) -> merge_handler 
-- On EVERY reduce production nonempty_list(merge_handler) -> merge_handler 
-- On EQUAL reduce production nonempty_list(merge_handler) -> merge_handler 
-- On EOF reduce production nonempty_list(merge_handler) -> merge_handler 
-- On ENFORCE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On END reduce production nonempty_list(merge_handler) -> merge_handler 
-- On ELSE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On DOUBLE_GREATER reduce production nonempty_list(merge_handler) -> merge_handler 
-- On DOUBLE_DOT reduce production nonempty_list(merge_handler) -> merge_handler 
-- On DONE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On DO reduce production nonempty_list(merge_handler) -> merge_handler 
-- On DEFAULT reduce production nonempty_list(merge_handler) -> merge_handler 
-- On Constructor reduce production nonempty_list(merge_handler) -> merge_handler 
-- On CONTINUE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On CONST reduce production nonempty_list(merge_handler) -> merge_handler 
-- On COMMA reduce production nonempty_list(merge_handler) -> merge_handler 
-- On COLONCOLON reduce production nonempty_list(merge_handler) -> merge_handler 
-- On BOOL reduce production nonempty_list(merge_handler) -> merge_handler 
-- On BAR reduce production nonempty_list(merge_handler) -> merge_handler 
-- On ATTRACTIVE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On AROBASE reduce production nonempty_list(merge_handler) -> merge_handler 
-- On AND reduce production nonempty_list(merge_handler) -> merge_handler 
-- On AMPERSAND reduce production nonempty_list(merge_handler) -> merge_handler 

State 280:
merge_handler -> LPAREN . constructor_or_bool ARROW exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 270
-- On constructor shift to state 103

State 281:
nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On WHENOT reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On WHEN reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On VAR reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On VAL reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On UNTIL reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On UNSAFE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On UNLESS reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On TYPE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On THEN reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On TEL reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On SUBTRACTIVE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On STATE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On STAR reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On SEMICOL reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On RPAREN_GREATER reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On RPAREN reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On REACHABLE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On RBRACKET reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On RBRACE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On PRAGMA reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On POWER reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On OR reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On ON reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On NODE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On LET reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On LESS_GREATER reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On LESSRBRACKET reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On INFIX4 reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On INFIX3 reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On INFIX2 reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On INFIX1 reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On INFIX0 reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On FUN reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On EXTERNAL reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On EVERY reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On EQUAL reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On EOF reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On ENFORCE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On END reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On ELSE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On DOUBLE_GREATER reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On DOUBLE_DOT reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On DONE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On DO reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On DEFAULT reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On Constructor reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On CONTINUE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On CONST reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On COMMA reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On COLONCOLON reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On BOOL reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On BAR reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On ATTRACTIVE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On AROBASE reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On AND reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 
-- On AMPERSAND reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) 

State 282:
_exp -> PRE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On POWER shift to state 108
-- On WITH reduce production _exp -> PRE exp 
-- On WHENOT reduce production _exp -> PRE exp 
-- On WHEN reduce production _exp -> PRE exp 
-- On VAR reduce production _exp -> PRE exp 
-- On VAL reduce production _exp -> PRE exp 
-- On UNTIL reduce production _exp -> PRE exp 
-- On UNSAFE reduce production _exp -> PRE exp 
-- On UNLESS reduce production _exp -> PRE exp 
-- On TYPE reduce production _exp -> PRE exp 
-- On THEN reduce production _exp -> PRE exp 
-- On TEL reduce production _exp -> PRE exp 
-- On SUBTRACTIVE reduce production _exp -> PRE exp 
-- On STATE reduce production _exp -> PRE exp 
-- On STAR reduce production _exp -> PRE exp 
-- On SEMICOL reduce production _exp -> PRE exp 
-- On RPAREN_GREATER reduce production _exp -> PRE exp 
-- On RPAREN reduce production _exp -> PRE exp 
-- On REACHABLE reduce production _exp -> PRE exp 
-- On RBRACKET reduce production _exp -> PRE exp 
-- On RBRACE reduce production _exp -> PRE exp 
-- On PRAGMA reduce production _exp -> PRE exp 
-- On OR reduce production _exp -> PRE exp 
-- On ON reduce production _exp -> PRE exp 
-- On NODE reduce production _exp -> PRE exp 
-- On LET reduce production _exp -> PRE exp 
-- On LESS_GREATER reduce production _exp -> PRE exp 
-- On LESSRBRACKET reduce production _exp -> PRE exp 
-- On INFIX4 reduce production _exp -> PRE exp 
-- On INFIX3 reduce production _exp -> PRE exp 
-- On INFIX2 reduce production _exp -> PRE exp 
-- On INFIX1 reduce production _exp -> PRE exp 
-- On INFIX0 reduce production _exp -> PRE exp 
-- On FUN reduce production _exp -> PRE exp 
-- On EXTERNAL reduce production _exp -> PRE exp 
-- On EVERY reduce production _exp -> PRE exp 
-- On EQUAL reduce production _exp -> PRE exp 
-- On EOF reduce production _exp -> PRE exp 
-- On ENFORCE reduce production _exp -> PRE exp 
-- On END reduce production _exp -> PRE exp 
-- On ELSE reduce production _exp -> PRE exp 
-- On DOUBLE_GREATER reduce production _exp -> PRE exp 
-- On DOUBLE_DOT reduce production _exp -> PRE exp 
-- On DONE reduce production _exp -> PRE exp 
-- On DO reduce production _exp -> PRE exp 
-- On DEFAULT reduce production _exp -> PRE exp 
-- On Constructor reduce production _exp -> PRE exp 
-- On CONTINUE reduce production _exp -> PRE exp 
-- On CONST reduce production _exp -> PRE exp 
-- On COMMA reduce production _exp -> PRE exp 
-- On COLONCOLON reduce production _exp -> PRE exp 
-- On BOOL reduce production _exp -> PRE exp 
-- On BAR reduce production _exp -> PRE exp 
-- On ATTRACTIVE reduce production _exp -> PRE exp 
-- On AROBASE reduce production _exp -> PRE exp 
-- On AND reduce production _exp -> PRE exp 
-- On AMPERSAND reduce production _exp -> PRE exp 

State 283:
_exp -> REINIT LPAREN exp . COMMA exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 284
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 284:
_exp -> REINIT LPAREN exp COMMA . exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 285
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 285:
_exp -> REINIT LPAREN exp COMMA exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RPAREN shift to state 286
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 286:
_exp -> REINIT LPAREN exp COMMA exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On WHENOT reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On WHEN reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On VAR reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On VAL reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On UNTIL reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On UNSAFE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On UNLESS reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On TYPE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On THEN reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On TEL reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On SUBTRACTIVE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On STATE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On STAR reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On SEMICOL reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On RPAREN_GREATER reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On RPAREN reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On REACHABLE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On RBRACKET reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On RBRACE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On PRAGMA reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On POWER reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On OR reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On ON reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On NODE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On LET reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On LESS_GREATER reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On LESSRBRACKET reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On INFIX4 reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On INFIX3 reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On INFIX2 reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On INFIX1 reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On INFIX0 reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On FUN reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On EXTERNAL reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On EVERY reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On EQUAL reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On EOF reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On ENFORCE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On END reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On ELSE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On DOUBLE_GREATER reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On DOUBLE_DOT reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On DONE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On DO reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On DEFAULT reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On Constructor reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On CONTINUE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On CONST reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On COMMA reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On COLONCOLON reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On BOOL reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On BAR reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On ATTRACTIVE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On AROBASE reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On AND reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 
-- On AMPERSAND reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN 

State 287:
_exp -> SPLIT ident LPAREN exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RPAREN shift to state 288
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 288:
_exp -> SPLIT ident LPAREN exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
-- On WITH reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On WHENOT reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On WHEN reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On VAR reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On VAL reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On UNTIL reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On UNSAFE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On UNLESS reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On TYPE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On THEN reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On TEL reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On SUBTRACTIVE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On STATE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On STAR reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On SEMICOL reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On RPAREN_GREATER reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On RPAREN reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On REACHABLE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On RBRACKET reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On RBRACE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On PRAGMA reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On POWER reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On OR reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On ON reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On NODE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On LET reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On LESS_GREATER reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On LESSRBRACKET reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On INFIX4 reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On INFIX3 reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On INFIX2 reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On INFIX1 reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On INFIX0 reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On FUN reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On EXTERNAL reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On EVERY reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On EQUAL reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On EOF reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On ENFORCE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On END reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On ELSE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On DOUBLE_GREATER reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On DOUBLE_DOT reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On DONE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On DO reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On DEFAULT reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On Constructor reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On CONTINUE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On CONST reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On COMMA reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On COLONCOLON reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On BOOL reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On BAR reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On ATTRACTIVE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On AROBASE reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On AND reduce production _exp -> SPLIT ident LPAREN exp RPAREN 
-- On AMPERSAND reduce production _exp -> SPLIT ident LPAREN exp RPAREN 

State 289:
_simple_exp -> simple_exp . DOT qualname [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER DOT CONST COLONCOLON BAR AT ]
ty_ident -> ty_ident POWER simple_exp . [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER CONST COLONCOLON BAR AT ]
-- On DOT shift to state 153
-- On WHEN reduce production ty_ident -> ty_ident POWER simple_exp 
-- On VAL reduce production ty_ident -> ty_ident POWER simple_exp 
-- On UNSAFE reduce production ty_ident -> ty_ident POWER simple_exp 
-- On TYPE reduce production ty_ident -> ty_ident POWER simple_exp 
-- On SEMICOL reduce production ty_ident -> ty_ident POWER simple_exp 
-- On RPAREN reduce production ty_ident -> ty_ident POWER simple_exp 
-- On RBRACE reduce production ty_ident -> ty_ident POWER simple_exp 
-- On PRAGMA reduce production ty_ident -> ty_ident POWER simple_exp 
-- On POWER reduce production ty_ident -> ty_ident POWER simple_exp 
-- On ON reduce production ty_ident -> ty_ident POWER simple_exp 
-- On NODE reduce production ty_ident -> ty_ident POWER simple_exp 
-- On FUN reduce production ty_ident -> ty_ident POWER simple_exp 
-- On EXTERNAL reduce production ty_ident -> ty_ident POWER simple_exp 
-- On EQUAL reduce production ty_ident -> ty_ident POWER simple_exp 
-- On EOF reduce production ty_ident -> ty_ident POWER simple_exp 
-- On DOUBLE_GREATER reduce production ty_ident -> ty_ident POWER simple_exp 
-- On CONST reduce production ty_ident -> ty_ident POWER simple_exp 
-- On COLONCOLON reduce production ty_ident -> ty_ident POWER simple_exp 
-- On BAR reduce production ty_ident -> ty_ident POWER simple_exp 
-- On AT reduce production ty_ident -> ty_ident POWER simple_exp 

State 290:
ty_ident -> qualname . [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER CONST COLONCOLON BAR AT ]
-- On WHEN reduce production ty_ident -> qualname 
-- On VAL reduce production ty_ident -> qualname 
-- On UNSAFE reduce production ty_ident -> qualname 
-- On TYPE reduce production ty_ident -> qualname 
-- On SEMICOL reduce production ty_ident -> qualname 
-- On RPAREN reduce production ty_ident -> qualname 
-- On RBRACE reduce production ty_ident -> qualname 
-- On PRAGMA reduce production ty_ident -> qualname 
-- On POWER reduce production ty_ident -> qualname 
-- On ON reduce production ty_ident -> qualname 
-- On NODE reduce production ty_ident -> qualname 
-- On FUN reduce production ty_ident -> qualname 
-- On EXTERNAL reduce production ty_ident -> qualname 
-- On EQUAL reduce production ty_ident -> qualname 
-- On EOF reduce production ty_ident -> qualname 
-- On DOUBLE_GREATER reduce production ty_ident -> qualname 
-- On CONST reduce production ty_ident -> qualname 
-- On COLONCOLON reduce production ty_ident -> qualname 
-- On BAR reduce production ty_ident -> qualname 
-- On AT reduce production ty_ident -> qualname 

State 291:
struct_ty_desc -> LBRACE label_ty_list . RBRACE [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On RBRACE shift to state 292

State 292:
struct_ty_desc -> LBRACE label_ty_list RBRACE . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On UNSAFE reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On TYPE reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On PRAGMA reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On NODE reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On FUN reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On EXTERNAL reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On EOF reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 
-- On CONST reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE 

State 293:
label_ty_list -> label_ty . [ RBRACE ]
label_ty_list -> label_ty . SEMICOL label_ty_list [ RBRACE ]
-- On SEMICOL shift to state 294
-- On RBRACE reduce production label_ty_list -> label_ty 

State 294:
label_ty_list -> label_ty SEMICOL . label_ty_list [ RBRACE ]
-- On IDENT shift to state 31
-- On label_ty_list shift to state 295
-- On label_ty shift to state 293

State 295:
label_ty_list -> label_ty SEMICOL label_ty_list . [ RBRACE ]
-- On RBRACE reduce production label_ty_list -> label_ty SEMICOL label_ty_list 

State 296:
enum_ty_desc -> Constructor . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
enum_ty_desc -> Constructor . BAR enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
modul -> Constructor . [ DOT ]
-- On BAR shift to state 297
-- On VAL reduce production enum_ty_desc -> Constructor 
-- On UNSAFE reduce production enum_ty_desc -> Constructor 
-- On TYPE reduce production enum_ty_desc -> Constructor 
-- On PRAGMA reduce production enum_ty_desc -> Constructor 
-- On NODE reduce production enum_ty_desc -> Constructor 
-- On FUN reduce production enum_ty_desc -> Constructor 
-- On EXTERNAL reduce production enum_ty_desc -> Constructor 
-- On EOF reduce production enum_ty_desc -> Constructor 
-- On DOT reduce production modul -> Constructor 
-- On CONST reduce production enum_ty_desc -> Constructor 

State 297:
enum_ty_desc -> Constructor BAR . enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On Constructor shift to state 298
-- On BOOL shift to state 299
-- On enum_ty_desc shift to state 302

State 298:
enum_ty_desc -> Constructor . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
enum_ty_desc -> Constructor . BAR enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On BAR shift to state 297
-- On VAL reduce production enum_ty_desc -> Constructor 
-- On UNSAFE reduce production enum_ty_desc -> Constructor 
-- On TYPE reduce production enum_ty_desc -> Constructor 
-- On PRAGMA reduce production enum_ty_desc -> Constructor 
-- On NODE reduce production enum_ty_desc -> Constructor 
-- On FUN reduce production enum_ty_desc -> Constructor 
-- On EXTERNAL reduce production enum_ty_desc -> Constructor 
-- On EOF reduce production enum_ty_desc -> Constructor 
-- On CONST reduce production enum_ty_desc -> Constructor 

State 299:
enum_ty_desc -> BOOL . BAR BOOL [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On BAR shift to state 300

State 300:
enum_ty_desc -> BOOL BAR . BOOL [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On BOOL shift to state 301

State 301:
enum_ty_desc -> BOOL BAR BOOL . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On UNSAFE reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On TYPE reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On PRAGMA reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On NODE reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On FUN reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On EXTERNAL reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On EOF reduce production enum_ty_desc -> BOOL BAR BOOL 
-- On CONST reduce production enum_ty_desc -> BOOL BAR BOOL 

State 302:
enum_ty_desc -> Constructor BAR enum_ty_desc . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On UNSAFE reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On TYPE reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On PRAGMA reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On NODE reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On FUN reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On EXTERNAL reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On EOF reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 
-- On CONST reduce production enum_ty_desc -> Constructor BAR enum_ty_desc 

State 303:
ty_ident -> ty_ident . POWER simple_exp [ VAL UNSAFE TYPE PRAGMA POWER NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT EQUAL ty_ident . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On POWER shift to state 35
-- On VAL reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On UNSAFE reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On TYPE reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On PRAGMA reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On NODE reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On FUN reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On EXTERNAL reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On EOF reduce production type_dec -> TYPE IDENT EQUAL ty_ident 
-- On CONST reduce production type_dec -> TYPE IDENT EQUAL ty_ident 

State 304:
type_dec -> TYPE IDENT EQUAL struct_ty_desc . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On UNSAFE reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On TYPE reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On PRAGMA reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On NODE reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On FUN reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On EXTERNAL reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On EOF reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 
-- On CONST reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc 

State 305:
type_dec -> TYPE IDENT EQUAL enum_ty_desc . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On UNSAFE reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On TYPE reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On PRAGMA reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On NODE reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On FUN reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On EXTERNAL reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On EOF reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 
-- On CONST reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc 

State 306:
extern -> EXTERNAL . [ VAL UNSAFE NODE FUN ]
-- On VAL reduce production extern -> EXTERNAL 
-- On UNSAFE reduce production extern -> EXTERNAL 
-- On NODE reduce production extern -> EXTERNAL 
-- On FUN reduce production extern -> EXTERNAL 

State 307:
const_dec -> CONST . IDENT COLON ty_ident EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On IDENT shift to state 308

State 308:
const_dec -> CONST IDENT . COLON ty_ident EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On COLON shift to state 309

State 309:
const_dec -> CONST IDENT COLON . ty_ident EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 310
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88

State 310:
const_dec -> CONST IDENT COLON ty_ident . EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
ty_ident -> ty_ident . POWER simple_exp [ POWER EQUAL ]
-- On POWER shift to state 35
-- On EQUAL shift to state 311

State 311:
const_dec -> CONST IDENT COLON ty_ident EQUAL . exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 312
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 312:
_exp -> exp . INFIX4 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
const_dec -> CONST IDENT COLON ty_ident EQUAL exp . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On VAL reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On UNSAFE reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On TYPE reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On PRAGMA reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On NODE reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On FUN reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On EXTERNAL reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On EOF reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 
-- On CONST reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp 

State 313:
interface_desc -> type_dec . [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production interface_desc -> type_dec 
-- On UNSAFE reduce production interface_desc -> type_dec 
-- On TYPE reduce production interface_desc -> type_dec 
-- On NODE reduce production interface_desc -> type_dec 
-- On FUN reduce production interface_desc -> type_dec 
-- On EXTERNAL reduce production interface_desc -> type_dec 
-- On EOF reduce production interface_desc -> type_dec 
-- On CONST reduce production interface_desc -> type_dec 

State 314:
interface -> list(opens) list(interface_desc) . EOF [ # ]
-- On EOF shift to state 315

State 315:
interface -> list(opens) list(interface_desc) EOF . [ # ]
-- On # reduce production interface -> list(opens) list(interface_desc) EOF 

State 316:
list(interface_desc) -> interface_desc . list(interface_desc) [ EOF ]
-- On TYPE shift to state 9
-- On EXTERNAL shift to state 306
-- On CONST shift to state 307
-- On type_dec shift to state 313
-- On list(interface_desc) shift to state 317
-- On interface_desc shift to state 316
-- On extern shift to state 318
-- On const_dec shift to state 388
-- On VAL reduce production extern -> 
-- On UNSAFE reduce production extern -> 
-- On NODE reduce production extern -> 
-- On FUN reduce production extern -> 
-- On EOF reduce production list(interface_desc) -> 

State 317:
list(interface_desc) -> interface_desc list(interface_desc) . [ EOF ]
-- On EOF reduce production list(interface_desc) -> interface_desc list(interface_desc) 

State 318:
interface_desc -> extern . unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On UNSAFE shift to state 319
-- On unsafe shift to state 320
-- On VAL reduce production unsafe -> 
-- On NODE reduce production unsafe -> 
-- On FUN reduce production unsafe -> 

State 319:
unsafe -> UNSAFE . [ VAL NODE FUN ]
-- On VAL reduce production unsafe -> UNSAFE 
-- On NODE reduce production unsafe -> UNSAFE 
-- On FUN reduce production unsafe -> UNSAFE 

State 320:
interface_desc -> extern unsafe . val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On VAL shift to state 321
-- On val_or_empty shift to state 322
-- On NODE reduce production val_or_empty -> 
-- On FUN reduce production val_or_empty -> 

State 321:
val_or_empty -> VAL . [ NODE FUN ]
-- On NODE reduce production val_or_empty -> VAL 
-- On FUN reduce production val_or_empty -> VAL 

State 322:
interface_desc -> extern unsafe val_or_empty . node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On NODE shift to state 323
-- On FUN shift to state 324
-- On node_or_fun shift to state 325

State 323:
node_or_fun -> NODE . [ LPAREN IDENT ]
-- On LPAREN reduce production node_or_fun -> NODE 
-- On IDENT reduce production node_or_fun -> NODE 

State 324:
node_or_fun -> FUN . [ LPAREN IDENT ]
-- On LPAREN reduce production node_or_fun -> FUN 
-- On IDENT reduce production node_or_fun -> FUN 

State 325:
interface_desc -> extern unsafe val_or_empty node_or_fun . ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On ident shift to state 326

State 326:
interface_desc -> extern unsafe val_or_empty node_or_fun ident . node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On DOUBLE_LESS shift to state 327
-- On node_params shift to state 362
-- On LPAREN reduce production node_params -> 

State 327:
node_params -> DOUBLE_LESS . nonmt_params constraints DOUBLE_GREATER [ LPAREN ]
-- On IDENT shift to state 328
-- On param shift to state 331
-- On nonmt_params shift to state 354
-- On ident_list shift to state 334

State 328:
ident_list -> IDENT . [ COLON ]
ident_list -> IDENT . COMMA ident_list [ COLON ]
-- On COMMA shift to state 329
-- On COLON reduce production ident_list -> IDENT 

State 329:
ident_list -> IDENT COMMA . ident_list [ COLON ]
-- On IDENT shift to state 328
-- On ident_list shift to state 330

State 330:
ident_list -> IDENT COMMA ident_list . [ COLON ]
-- On COLON reduce production ident_list -> IDENT COMMA ident_list 

State 331:
nonmt_params -> param . [ RPAREN DOUBLE_GREATER BAR ]
nonmt_params -> param . SEMICOL [ RPAREN DOUBLE_GREATER BAR ]
nonmt_params -> param . SEMICOL nonmt_params [ RPAREN DOUBLE_GREATER BAR ]
-- On SEMICOL shift to state 332
-- On RPAREN reduce production nonmt_params -> param 
-- On DOUBLE_GREATER reduce production nonmt_params -> param 
-- On BAR reduce production nonmt_params -> param 

State 332:
nonmt_params -> param SEMICOL . [ RPAREN DOUBLE_GREATER BAR ]
nonmt_params -> param SEMICOL . nonmt_params [ RPAREN DOUBLE_GREATER BAR ]
-- On IDENT shift to state 328
-- On param shift to state 331
-- On nonmt_params shift to state 333
-- On ident_list shift to state 334
-- On RPAREN reduce production nonmt_params -> param SEMICOL 
-- On DOUBLE_GREATER reduce production nonmt_params -> param SEMICOL 
-- On BAR reduce production nonmt_params -> param SEMICOL 

State 333:
nonmt_params -> param SEMICOL nonmt_params . [ RPAREN DOUBLE_GREATER BAR ]
-- On RPAREN reduce production nonmt_params -> param SEMICOL nonmt_params 
-- On DOUBLE_GREATER reduce production nonmt_params -> param SEMICOL nonmt_params 
-- On BAR reduce production nonmt_params -> param SEMICOL nonmt_params 

State 334:
param -> ident_list . COLON located_ty_ident ck_annot [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
-- On COLON shift to state 335

State 335:
param -> ident_list COLON . located_ty_ident ck_annot [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 339
-- On ident shift to state 88

State 336:
located_ty_ident -> ty_ident . [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
located_ty_ident -> ty_ident . AT IDENT [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
ty_ident -> ty_ident . POWER simple_exp [ WHEN SEMICOL RPAREN POWER ON EQUAL DOUBLE_GREATER COLONCOLON BAR AT ]
-- On POWER shift to state 35
-- On AT shift to state 337
-- On WHEN reduce production located_ty_ident -> ty_ident 
-- On SEMICOL reduce production located_ty_ident -> ty_ident 
-- On RPAREN reduce production located_ty_ident -> ty_ident 
-- On ON reduce production located_ty_ident -> ty_ident 
-- On EQUAL reduce production located_ty_ident -> ty_ident 
-- On DOUBLE_GREATER reduce production located_ty_ident -> ty_ident 
-- On COLONCOLON reduce production located_ty_ident -> ty_ident 
-- On BAR reduce production located_ty_ident -> ty_ident 

State 337:
located_ty_ident -> ty_ident AT . IDENT [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
-- On IDENT shift to state 338

State 338:
located_ty_ident -> ty_ident AT IDENT . [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
-- On WHEN reduce production located_ty_ident -> ty_ident AT IDENT 
-- On SEMICOL reduce production located_ty_ident -> ty_ident AT IDENT 
-- On RPAREN reduce production located_ty_ident -> ty_ident AT IDENT 
-- On ON reduce production located_ty_ident -> ty_ident AT IDENT 
-- On EQUAL reduce production located_ty_ident -> ty_ident AT IDENT 
-- On DOUBLE_GREATER reduce production located_ty_ident -> ty_ident AT IDENT 
-- On COLONCOLON reduce production located_ty_ident -> ty_ident AT IDENT 
-- On BAR reduce production located_ty_ident -> ty_ident AT IDENT 

State 339:
param -> ident_list COLON located_ty_ident . ck_annot [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
-- On WHEN shift to state 340
-- On ON shift to state 349
-- On COLONCOLON shift to state 351
-- On ck_annot shift to state 353
-- On SEMICOL reduce production ck_annot -> 
-- On RPAREN reduce production ck_annot -> 
-- On DOUBLE_GREATER reduce production ck_annot -> 
-- On BAR reduce production ck_annot -> 

State 340:
ck_annot -> WHEN . when_ck [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On NOT shift to state 341
-- On IDENT shift to state 343
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On when_ck shift to state 344
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 345
-- On constructor shift to state 103

State 341:
when_ck -> NOT . IDENT [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 342

State 342:
when_ck -> NOT IDENT . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production when_ck -> NOT IDENT 
-- On RPAREN reduce production when_ck -> NOT IDENT 
-- On EQUAL reduce production when_ck -> NOT IDENT 
-- On DOUBLE_GREATER reduce production when_ck -> NOT IDENT 
-- On BAR reduce production when_ck -> NOT IDENT 

State 343:
when_ck -> IDENT . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production when_ck -> IDENT 
-- On RPAREN reduce production when_ck -> IDENT 
-- On EQUAL reduce production when_ck -> IDENT 
-- On DOUBLE_GREATER reduce production when_ck -> IDENT 
-- On BAR reduce production when_ck -> IDENT 

State 344:
ck_annot -> WHEN when_ck . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production ck_annot -> WHEN when_ck 
-- On RPAREN reduce production ck_annot -> WHEN when_ck 
-- On EQUAL reduce production ck_annot -> WHEN when_ck 
-- On DOUBLE_GREATER reduce production ck_annot -> WHEN when_ck 
-- On BAR reduce production ck_annot -> WHEN when_ck 

State 345:
when_ck -> constructor_or_bool . LPAREN IDENT RPAREN [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On LPAREN shift to state 346

State 346:
when_ck -> constructor_or_bool LPAREN . IDENT RPAREN [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 347

State 347:
when_ck -> constructor_or_bool LPAREN IDENT . RPAREN [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On RPAREN shift to state 348

State 348:
when_ck -> constructor_or_bool LPAREN IDENT RPAREN . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production when_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On RPAREN reduce production when_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On EQUAL reduce production when_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On DOUBLE_GREATER reduce production when_ck -> constructor_or_bool LPAREN IDENT RPAREN 
-- On BAR reduce production when_ck -> constructor_or_bool LPAREN IDENT RPAREN 

State 349:
ck_annot -> ON . on_ck [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 350
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 236

State 350:
ck -> on_ck . [ ONOT ON ]
ck_annot -> ON on_ck . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production ck_annot -> ON on_ck 
-- On RPAREN reduce production ck_annot -> ON on_ck 
-- On ONOT reduce production ck -> on_ck 
-- On ON reduce production ck -> on_ck 
-- On EQUAL reduce production ck_annot -> ON on_ck 
-- On DOUBLE_GREATER reduce production ck_annot -> ON on_ck 
-- On BAR reduce production ck_annot -> ON on_ck 

State 351:
ck_annot -> COLONCOLON . ck [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 249
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 352

State 352:
ck_annot -> COLONCOLON ck . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ON IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ONOT IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
-- On ONOT shift to state 237
-- On ON shift to state 239
-- On SEMICOL reduce production ck_annot -> COLONCOLON ck 
-- On RPAREN reduce production ck_annot -> COLONCOLON ck 
-- On EQUAL reduce production ck_annot -> COLONCOLON ck 
-- On DOUBLE_GREATER reduce production ck_annot -> COLONCOLON ck 
-- On BAR reduce production ck_annot -> COLONCOLON ck 

State 353:
param -> ident_list COLON located_ty_ident ck_annot . [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
-- On SEMICOL reduce production param -> ident_list COLON located_ty_ident ck_annot 
-- On RPAREN reduce production param -> ident_list COLON located_ty_ident ck_annot 
-- On DOUBLE_GREATER reduce production param -> ident_list COLON located_ty_ident ck_annot 
-- On BAR reduce production param -> ident_list COLON located_ty_ident ck_annot 

State 354:
node_params -> DOUBLE_LESS nonmt_params . constraints DOUBLE_GREATER [ LPAREN ]
-- On BAR shift to state 355
-- On constraints shift to state 360
-- On DOUBLE_GREATER reduce production constraints -> 

State 355:
constraints -> BAR . slist(SEMICOL,exp) [ DOUBLE_GREATER ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(SEMICOL,exp) shift to state 356
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 357
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On DOUBLE_GREATER reduce production slist(SEMICOL,exp) -> 

State 356:
constraints -> BAR slist(SEMICOL,exp) . [ DOUBLE_GREATER ]
-- On DOUBLE_GREATER reduce production constraints -> BAR slist(SEMICOL,exp) 

State 357:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
slist(SEMICOL,exp) -> exp . [ DOUBLE_GREATER ]
slist(SEMICOL,exp) -> exp . SEMICOL slist(SEMICOL,exp) [ DOUBLE_GREATER ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On SEMICOL shift to state 358
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On DOUBLE_GREATER reduce production slist(SEMICOL,exp) -> exp 

State 358:
slist(SEMICOL,exp) -> exp SEMICOL . slist(SEMICOL,exp) [ DOUBLE_GREATER ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(SEMICOL,exp) shift to state 359
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 357
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
-- On DOUBLE_GREATER reduce production slist(SEMICOL,exp) -> 

State 359:
slist(SEMICOL,exp) -> exp SEMICOL slist(SEMICOL,exp) . [ DOUBLE_GREATER ]
-- On DOUBLE_GREATER reduce production slist(SEMICOL,exp) -> exp SEMICOL slist(SEMICOL,exp) 

State 360:
node_params -> DOUBLE_LESS nonmt_params constraints . DOUBLE_GREATER [ LPAREN ]
-- On DOUBLE_GREATER shift to state 361

State 361:
node_params -> DOUBLE_LESS nonmt_params constraints DOUBLE_GREATER . [ LPAREN ]
-- On LPAREN reduce production node_params -> DOUBLE_LESS nonmt_params constraints DOUBLE_GREATER 

State 362:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params . LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On LPAREN shift to state 363

State 363:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN . params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On THREE_DOTS shift to state 364
-- On LPAREN shift to state 12
-- On IDENT shift to state 370
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On params_signature shift to state 374
-- On param_signature shift to state 382
-- On nonmt_params_signature shift to state 387
-- On modul shift to state 141
-- On located_ty_ident shift to state 385
-- On ident shift to state 88
-- On RPAREN reduce production params_signature -> 

State 364:
param_signature -> THREE_DOTS . sig_ck_annot [ SEMICOL RPAREN ]
-- On ON shift to state 365
-- On COLONCOLON shift to state 367
-- On sig_ck_annot shift to state 369
-- On SEMICOL reduce production sig_ck_annot -> 
-- On RPAREN reduce production sig_ck_annot -> 

State 365:
sig_ck_annot -> ON . on_ck [ SEMICOL RPAREN ]
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 366
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 236

State 366:
ck -> on_ck . [ ONOT ON ]
sig_ck_annot -> ON on_ck . [ SEMICOL RPAREN ]
-- On SEMICOL reduce production sig_ck_annot -> ON on_ck 
-- On RPAREN reduce production sig_ck_annot -> ON on_ck 
-- On ONOT reduce production ck -> on_ck 
-- On ON reduce production ck -> on_ck 

State 367:
sig_ck_annot -> COLONCOLON . ck [ SEMICOL RPAREN ]
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 249
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 368

State 368:
on_ck -> ck . ON IDENT [ SEMICOL RPAREN ONOT ON ]
on_ck -> ck . ONOT IDENT [ SEMICOL RPAREN ONOT ON ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON ]
sig_ck_annot -> COLONCOLON ck . [ SEMICOL RPAREN ]
-- On ONOT shift to state 237
-- On ON shift to state 239
-- On SEMICOL reduce production sig_ck_annot -> COLONCOLON ck 
-- On RPAREN reduce production sig_ck_annot -> COLONCOLON ck 

State 369:
param_signature -> THREE_DOTS sig_ck_annot . [ SEMICOL RPAREN ]
-- On SEMICOL reduce production param_signature -> THREE_DOTS sig_ck_annot 
-- On RPAREN reduce production param_signature -> THREE_DOTS sig_ck_annot 

State 370:
ident -> IDENT . [ SEMICOL RPAREN POWER ON COLONCOLON AT ]
param_signature -> IDENT . COLON located_ty_ident sig_ck_annot [ SEMICOL RPAREN ]
-- On COLON shift to state 371
-- On SEMICOL reduce production ident -> IDENT 
-- On RPAREN reduce production ident -> IDENT 
-- On POWER reduce production ident -> IDENT 
-- On ON reduce production ident -> IDENT 
-- On COLONCOLON reduce production ident -> IDENT 
-- On AT reduce production ident -> IDENT 

State 371:
param_signature -> IDENT COLON . located_ty_ident sig_ck_annot [ SEMICOL RPAREN ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 372
-- On ident shift to state 88

State 372:
param_signature -> IDENT COLON located_ty_ident . sig_ck_annot [ SEMICOL RPAREN ]
-- On ON shift to state 365
-- On COLONCOLON shift to state 367
-- On sig_ck_annot shift to state 373
-- On SEMICOL reduce production sig_ck_annot -> 
-- On RPAREN reduce production sig_ck_annot -> 

State 373:
param_signature -> IDENT COLON located_ty_ident sig_ck_annot . [ SEMICOL RPAREN ]
-- On SEMICOL reduce production param_signature -> IDENT COLON located_ty_ident sig_ck_annot 
-- On RPAREN reduce production param_signature -> IDENT COLON located_ty_ident sig_ck_annot 

State 374:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature . RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On RPAREN shift to state 375

State 375:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN . returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On RETURNS shift to state 376
-- On EQUAL shift to state 377
-- On returns shift to state 378

State 376:
returns -> RETURNS . [ LPAREN ]
-- On LPAREN reduce production returns -> RETURNS 

State 377:
returns -> EQUAL . [ LPAREN ]
-- On LPAREN reduce production returns -> EQUAL 

State 378:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns . LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On LPAREN shift to state 379

State 379:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN . params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On THREE_DOTS shift to state 364
-- On LPAREN shift to state 12
-- On IDENT shift to state 370
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On params_signature shift to state 380
-- On param_signature shift to state 382
-- On nonmt_params_signature shift to state 387
-- On modul shift to state 141
-- On located_ty_ident shift to state 385
-- On ident shift to state 88
-- On RPAREN reduce production params_signature -> 

State 380:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature . RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On RPAREN shift to state 381

State 381:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN . [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 
-- On UNSAFE reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 
-- On TYPE reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 
-- On NODE reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 
-- On FUN reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 
-- On EXTERNAL reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 
-- On EOF reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 
-- On CONST reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN 

State 382:
nonmt_params_signature -> param_signature . [ RPAREN ]
nonmt_params_signature -> param_signature . SEMICOL nonmt_params_signature [ RPAREN ]
-- On SEMICOL shift to state 383
-- On RPAREN reduce production nonmt_params_signature -> param_signature 

State 383:
nonmt_params_signature -> param_signature SEMICOL . nonmt_params_signature [ RPAREN ]
-- On THREE_DOTS shift to state 364
-- On LPAREN shift to state 12
-- On IDENT shift to state 370
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On param_signature shift to state 382
-- On nonmt_params_signature shift to state 384
-- On modul shift to state 141
-- On located_ty_ident shift to state 385
-- On ident shift to state 88

State 384:
nonmt_params_signature -> param_signature SEMICOL nonmt_params_signature . [ RPAREN ]
-- On RPAREN reduce production nonmt_params_signature -> param_signature SEMICOL nonmt_params_signature 

State 385:
param_signature -> located_ty_ident . sig_ck_annot [ SEMICOL RPAREN ]
-- On ON shift to state 365
-- On COLONCOLON shift to state 367
-- On sig_ck_annot shift to state 386
-- On SEMICOL reduce production sig_ck_annot -> 
-- On RPAREN reduce production sig_ck_annot -> 

State 386:
param_signature -> located_ty_ident sig_ck_annot . [ SEMICOL RPAREN ]
-- On SEMICOL reduce production param_signature -> located_ty_ident sig_ck_annot 
-- On RPAREN reduce production param_signature -> located_ty_ident sig_ck_annot 

State 387:
params_signature -> nonmt_params_signature . [ RPAREN ]
-- On RPAREN reduce production params_signature -> nonmt_params_signature 

State 388:
interface_desc -> const_dec . [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
-- On VAL reduce production interface_desc -> const_dec 
-- On UNSAFE reduce production interface_desc -> const_dec 
-- On TYPE reduce production interface_desc -> const_dec 
-- On NODE reduce production interface_desc -> const_dec 
-- On FUN reduce production interface_desc -> const_dec 
-- On EXTERNAL reduce production interface_desc -> const_dec 
-- On EOF reduce production interface_desc -> const_dec 
-- On CONST reduce production interface_desc -> const_dec 

State 389:
interface' -> interface . [ # ]
-- On # accept interface

State 390:
program' -> . program [ # ]
-- On OPEN shift to state 1
-- On program shift to state 391
-- On opens shift to state 6
-- On list(opens) shift to state 392
-- On UNSAFE reduce production list(opens) -> 
-- On TYPE reduce production list(opens) -> 
-- On PRAGMA reduce production list(opens) -> 
-- On NODE reduce production list(opens) -> 
-- On FUN reduce production list(opens) -> 
-- On EOF reduce production list(opens) -> 
-- On CONST reduce production list(opens) -> 

State 391:
program' -> program . [ # ]
-- On # accept program

State 392:
program -> list(opens) . list(program_desc) EOF [ # ]
-- On UNSAFE shift to state 319
-- On TYPE shift to state 9
-- On PRAGMA shift to state 393
-- On CONST shift to state 307
-- On unsafe shift to state 394
-- On type_dec shift to state 552
-- On program_desc shift to state 553
-- On node_dec shift to state 554
-- On list(program_desc) shift to state 557
-- On const_dec shift to state 556
-- On NODE reduce production unsafe -> 
-- On FUN reduce production unsafe -> 
-- On EOF reduce production list(program_desc) -> 

State 393:
program_desc -> PRAGMA . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On UNSAFE reduce production program_desc -> PRAGMA 
-- On TYPE reduce production program_desc -> PRAGMA 
-- On PRAGMA reduce production program_desc -> PRAGMA 
-- On NODE reduce production program_desc -> PRAGMA 
-- On FUN reduce production program_desc -> PRAGMA 
-- On EOF reduce production program_desc -> PRAGMA 
-- On CONST reduce production program_desc -> PRAGMA 

State 394:
node_dec -> unsafe . node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On NODE shift to state 323
-- On FUN shift to state 324
-- On node_or_fun shift to state 395

State 395:
node_dec -> unsafe node_or_fun . ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On ident shift to state 396

State 396:
node_dec -> unsafe node_or_fun ident . node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On DOUBLE_LESS shift to state 327
-- On node_params shift to state 397
-- On LPAREN reduce production node_params -> 

State 397:
node_dec -> unsafe node_or_fun ident node_params . LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On LPAREN shift to state 398

State 398:
node_dec -> unsafe node_or_fun ident node_params LPAREN . in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On IDENT shift to state 328
-- On params shift to state 399
-- On param shift to state 331
-- On nonmt_params shift to state 400
-- On in_params shift to state 401
-- On ident_list shift to state 334
-- On RPAREN reduce production params -> 

State 399:
in_params -> params . [ RPAREN ]
-- On RPAREN reduce production in_params -> params 

State 400:
params -> nonmt_params . [ RPAREN ]
-- On RPAREN reduce production params -> nonmt_params 

State 401:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params . RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On RPAREN shift to state 402

State 402:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN . returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On RETURNS shift to state 376
-- On EQUAL shift to state 377
-- On returns shift to state 403

State 403:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns . LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On LPAREN shift to state 404

State 404:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN . out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 412
-- On out_params shift to state 419
-- On nonmt_out_params shift to state 551
-- On ident_list shift to state 415
-- On RPAREN reduce production out_params -> 

State 405:
var_last -> LAST . IDENT COLON located_ty_ident ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST . IDENT COLON located_ty_ident ck_annot [ SEMICOL RPAREN ]
-- On IDENT shift to state 406

State 406:
var_last -> LAST IDENT . COLON located_ty_ident ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT . COLON located_ty_ident ck_annot [ SEMICOL RPAREN ]
-- On COLON shift to state 407

State 407:
var_last -> LAST IDENT COLON . located_ty_ident ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT COLON . located_ty_ident ck_annot [ SEMICOL RPAREN ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 408
-- On ident shift to state 88

State 408:
var_last -> LAST IDENT COLON located_ty_ident . ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT COLON located_ty_ident . ck_annot [ SEMICOL RPAREN ]
-- On WHEN shift to state 340
-- On ON shift to state 349
-- On COLONCOLON shift to state 351
-- On ck_annot shift to state 409
-- On SEMICOL reduce production ck_annot -> 
-- On RPAREN reduce production ck_annot -> 
-- On EQUAL reduce production ck_annot -> 

State 409:
var_last -> LAST IDENT COLON located_ty_ident ck_annot . EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT COLON located_ty_ident ck_annot . [ SEMICOL RPAREN ]
-- On EQUAL shift to state 410
-- On SEMICOL reduce production var_last -> LAST IDENT COLON located_ty_ident ck_annot 
-- On RPAREN reduce production var_last -> LAST IDENT COLON located_ty_ident ck_annot 

State 410:
var_last -> LAST IDENT COLON located_ty_ident ck_annot EQUAL . exp [ SEMICOL RPAREN ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 411
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 411:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
var_last -> LAST IDENT COLON located_ty_ident ck_annot EQUAL exp . [ SEMICOL RPAREN ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On SEMICOL reduce production var_last -> LAST IDENT COLON located_ty_ident ck_annot EQUAL exp 
-- On RPAREN reduce production var_last -> LAST IDENT COLON located_ty_ident ck_annot EQUAL exp 

State 412:
nonmt_out_params -> var_last . [ RPAREN ]
nonmt_out_params -> var_last . SEMICOL [ RPAREN ]
nonmt_out_params -> var_last . SEMICOL nonmt_out_params [ RPAREN ]
-- On SEMICOL shift to state 413
-- On RPAREN reduce production nonmt_out_params -> var_last 

State 413:
nonmt_out_params -> var_last SEMICOL . [ RPAREN ]
nonmt_out_params -> var_last SEMICOL . nonmt_out_params [ RPAREN ]
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 412
-- On nonmt_out_params shift to state 414
-- On ident_list shift to state 415
-- On RPAREN reduce production nonmt_out_params -> var_last SEMICOL 

State 414:
nonmt_out_params -> var_last SEMICOL nonmt_out_params . [ RPAREN ]
-- On RPAREN reduce production nonmt_out_params -> var_last SEMICOL nonmt_out_params 

State 415:
var_last -> ident_list . COLON located_ty_ident ck_annot [ SEMICOL RPAREN ]
-- On COLON shift to state 416

State 416:
var_last -> ident_list COLON . located_ty_ident ck_annot [ SEMICOL RPAREN ]
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 417
-- On ident shift to state 88

State 417:
var_last -> ident_list COLON located_ty_ident . ck_annot [ SEMICOL RPAREN ]
-- On WHEN shift to state 340
-- On ON shift to state 349
-- On COLONCOLON shift to state 351
-- On ck_annot shift to state 418
-- On SEMICOL reduce production ck_annot -> 
-- On RPAREN reduce production ck_annot -> 

State 418:
var_last -> ident_list COLON located_ty_ident ck_annot . [ SEMICOL RPAREN ]
-- On SEMICOL reduce production var_last -> ident_list COLON located_ty_ident ck_annot 
-- On RPAREN reduce production var_last -> ident_list COLON located_ty_ident ck_annot 

State 419:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params . RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On RPAREN shift to state 420

State 420:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN . opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On SEMICOL shift to state 421
-- On opt_semicolon shift to state 422
-- On VAR reduce production opt_semicolon -> 
-- On LET reduce production opt_semicolon -> 
-- On CONTRACT reduce production opt_semicolon -> 

State 421:
opt_semicolon -> SEMICOL . [ VAR UNSAFE TYPE PRAGMA NODE LET FUN EOF CONTRACT CONST ]
-- On VAR reduce production opt_semicolon -> SEMICOL 
-- On UNSAFE reduce production opt_semicolon -> SEMICOL 
-- On TYPE reduce production opt_semicolon -> SEMICOL 
-- On PRAGMA reduce production opt_semicolon -> SEMICOL 
-- On NODE reduce production opt_semicolon -> SEMICOL 
-- On LET reduce production opt_semicolon -> SEMICOL 
-- On FUN reduce production opt_semicolon -> SEMICOL 
-- On EOF reduce production opt_semicolon -> SEMICOL 
-- On CONTRACT reduce production opt_semicolon -> SEMICOL 
-- On CONST reduce production opt_semicolon -> SEMICOL 

State 422:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon . contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On CONTRACT shift to state 423
-- On contract shift to state 547
-- On VAR reduce production contract -> 
-- On LET reduce production contract -> 

State 423:
contract -> CONTRACT . opt_block opt_assume nonempty_list(objective) opt_with [ VAR LET ]
-- On VAR shift to state 424
-- On LET shift to state 526
-- On opt_block shift to state 528
-- On block(LET) shift to state 545
-- On REACHABLE reduce production opt_block -> 
-- On ENFORCE reduce production opt_block -> 
-- On ATTRACTIVE reduce production opt_block -> 
-- On ASSUME reduce production opt_block -> 

State 424:
block(LET) -> VAR . loc_params LET equs [ TEL ]
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 428
-- On ident_list shift to state 415

State 425:
loc_params -> var_last . SEMICOL [ LET IN DO ]
loc_params -> var_last . SEMICOL loc_params [ LET IN DO ]
-- On SEMICOL shift to state 426

State 426:
loc_params -> var_last SEMICOL . [ LET IN DO ]
loc_params -> var_last SEMICOL . loc_params [ LET IN DO ]
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 427
-- On ident_list shift to state 415
-- On LET reduce production loc_params -> var_last SEMICOL 
-- On IN reduce production loc_params -> var_last SEMICOL 
-- On DO reduce production loc_params -> var_last SEMICOL 

State 427:
loc_params -> var_last SEMICOL loc_params . [ LET IN DO ]
-- On LET reduce production loc_params -> var_last SEMICOL loc_params 
-- On IN reduce production loc_params -> var_last SEMICOL loc_params 
-- On DO reduce production loc_params -> var_last SEMICOL loc_params 

State 428:
block(LET) -> VAR loc_params . LET equs [ TEL ]
-- On LET shift to state 429

State 429:
block(LET) -> VAR loc_params LET . equs [ TEL ]
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 525
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On TEL reduce production equs -> 

State 430:
_equ -> SWITCH . exp opt_bar switch_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 431
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 431:
_equ -> SWITCH exp . opt_bar switch_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On BAR shift to state 432
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On opt_bar shift to state 433
-- On Constructor reduce production opt_bar -> 
-- On BOOL reduce production opt_bar -> 

State 432:
opt_bar -> BAR . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
-- On SUBTRACTIVE reduce production opt_bar -> BAR 
-- On STRING reduce production opt_bar -> BAR 
-- On SPLIT reduce production opt_bar -> BAR 
-- On REINIT reduce production opt_bar -> BAR 
-- On PREFIX reduce production opt_bar -> BAR 
-- On PRE reduce production opt_bar -> BAR 
-- On NOT reduce production opt_bar -> BAR 
-- On MERGE reduce production opt_bar -> BAR 
-- On MAPI reduce production opt_bar -> BAR 
-- On MAPFOLD reduce production opt_bar -> BAR 
-- On MAP reduce production opt_bar -> BAR 
-- On LPAREN reduce production opt_bar -> BAR 
-- On LBRACKET reduce production opt_bar -> BAR 
-- On LBRACE reduce production opt_bar -> BAR 
-- On LAST reduce production opt_bar -> BAR 
-- On INT reduce production opt_bar -> BAR 
-- On INLINED reduce production opt_bar -> BAR 
-- On IF reduce production opt_bar -> BAR 
-- On IDENT reduce production opt_bar -> BAR 
-- On FOLDI reduce production opt_bar -> BAR 
-- On FOLD reduce production opt_bar -> BAR 
-- On FLOAT reduce production opt_bar -> BAR 
-- On Constructor reduce production opt_bar -> BAR 
-- On BOOL reduce production opt_bar -> BAR 

State 433:
_equ -> SWITCH exp opt_bar . switch_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On switch_handlers shift to state 434
-- On switch_handler shift to state 524
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 438
-- On constructor shift to state 103

State 434:
_equ -> SWITCH exp opt_bar switch_handlers . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
switch_handlers -> switch_handlers . BAR switch_handler [ END BAR ]
-- On END shift to state 435
-- On BAR shift to state 436

State 435:
_equ -> SWITCH exp opt_bar switch_handlers END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On UNLESS reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On TEL reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On STATE reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On SEMICOL reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On EVERY reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On END reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On ELSE reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On DONE reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On DEFAULT reduce production _equ -> SWITCH exp opt_bar switch_handlers END 
-- On BAR reduce production _equ -> SWITCH exp opt_bar switch_handlers END 

State 436:
switch_handlers -> switch_handlers BAR . switch_handler [ END BAR ]
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On switch_handler shift to state 437
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 438
-- On constructor shift to state 103

State 437:
switch_handlers -> switch_handlers BAR switch_handler . [ END BAR ]
-- On END reduce production switch_handlers -> switch_handlers BAR switch_handler 
-- On BAR reduce production switch_handlers -> switch_handlers BAR switch_handler 

State 438:
switch_handler -> constructor_or_bool . block(DO) [ END BAR ]
-- On VAR shift to state 439
-- On DO shift to state 473
-- On block(DO) shift to state 523

State 439:
block(DO) -> VAR . loc_params DO equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 440
-- On ident_list shift to state 415

State 440:
block(DO) -> VAR loc_params . DO equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
-- On DO shift to state 441

State 441:
block(DO) -> VAR loc_params DO . equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 522
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On UNTIL reduce production equs -> 
-- On UNLESS reduce production equs -> 
-- On STATE reduce production equs -> 
-- On END reduce production equs -> 
-- On DEFAULT reduce production equs -> 
-- On BAR reduce production equs -> 

State 442:
_equ -> RESET . sblock(IN) EVERY exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 519
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On EVERY reduce production equs -> 

State 443:
sblock(IN) -> VAR . loc_params IN equs [ EVERY END ELSE DONE ]
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 444
-- On ident_list shift to state 415

State 444:
sblock(IN) -> VAR loc_params . IN equs [ EVERY END ELSE DONE ]
-- On IN shift to state 445

State 445:
sblock(IN) -> VAR loc_params IN . equs [ EVERY END ELSE DONE ]
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 518
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On EVERY reduce production equs -> 
-- On END reduce production equs -> 
-- On ELSE reduce production equs -> 
-- On DONE reduce production equs -> 

State 446:
_equ -> PRESENT . opt_bar present_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_equ -> PRESENT . opt_bar present_handlers DEFAULT DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On BAR shift to state 432
-- On opt_bar shift to state 447
-- On SUBTRACTIVE reduce production opt_bar -> 
-- On STRING reduce production opt_bar -> 
-- On SPLIT reduce production opt_bar -> 
-- On REINIT reduce production opt_bar -> 
-- On PREFIX reduce production opt_bar -> 
-- On PRE reduce production opt_bar -> 
-- On NOT reduce production opt_bar -> 
-- On MERGE reduce production opt_bar -> 
-- On MAPI reduce production opt_bar -> 
-- On MAPFOLD reduce production opt_bar -> 
-- On MAP reduce production opt_bar -> 
-- On LPAREN reduce production opt_bar -> 
-- On LBRACKET reduce production opt_bar -> 
-- On LBRACE reduce production opt_bar -> 
-- On LAST reduce production opt_bar -> 
-- On INT reduce production opt_bar -> 
-- On INLINED reduce production opt_bar -> 
-- On IF reduce production opt_bar -> 
-- On IDENT reduce production opt_bar -> 
-- On FOLDI reduce production opt_bar -> 
-- On FOLD reduce production opt_bar -> 
-- On FLOAT reduce production opt_bar -> 
-- On Constructor reduce production opt_bar -> 
-- On BOOL reduce production opt_bar -> 

State 447:
_equ -> PRESENT opt_bar . present_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_equ -> PRESENT opt_bar . present_handlers DEFAULT DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On present_handlers shift to state 448
-- On present_handler shift to state 517
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 515
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 448:
_equ -> PRESENT opt_bar present_handlers . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_equ -> PRESENT opt_bar present_handlers . DEFAULT DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
present_handlers -> present_handlers . BAR present_handler [ END DEFAULT BAR ]
-- On END shift to state 449
-- On DEFAULT shift to state 450
-- On BAR shift to state 513

State 449:
_equ -> PRESENT opt_bar present_handlers END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On UNLESS reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On TEL reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On STATE reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On SEMICOL reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On EVERY reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On END reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On ELSE reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On DONE reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On DEFAULT reduce production _equ -> PRESENT opt_bar present_handlers END 
-- On BAR reduce production _equ -> PRESENT opt_bar present_handlers END 

State 450:
_equ -> PRESENT opt_bar present_handlers DEFAULT . DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On DO shift to state 451

State 451:
_equ -> PRESENT opt_bar present_handlers DEFAULT DO . sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 511
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On END reduce production equs -> 

State 452:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN . RPAREN [ RPAREN EQUAL COMMA ]
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN . optsnlist(COMMA,pat) RPAREN [ RPAREN EQUAL COMMA ]
-- On RPAREN shift to state 453
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IDENT shift to state 459
-- On pat shift to state 460
-- On optsnlist(COMMA,pat) shift to state 464
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463

State 453:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN RPAREN . [ RPAREN EQUAL COMMA ]
-- On RPAREN reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN RPAREN 
-- On EQUAL reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN RPAREN 
-- On COMMA reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN RPAREN 

State 454:
pat -> INIT . DOUBLE_LESS IDENT DOUBLE_GREATER IDENT [ RPAREN EQUAL COMMA ]
-- On DOUBLE_LESS shift to state 455

State 455:
pat -> INIT DOUBLE_LESS . IDENT DOUBLE_GREATER IDENT [ RPAREN EQUAL COMMA ]
-- On IDENT shift to state 456

State 456:
pat -> INIT DOUBLE_LESS IDENT . DOUBLE_GREATER IDENT [ RPAREN EQUAL COMMA ]
-- On DOUBLE_GREATER shift to state 457

State 457:
pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER . IDENT [ RPAREN EQUAL COMMA ]
-- On IDENT shift to state 458

State 458:
pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER IDENT . [ RPAREN EQUAL COMMA ]
-- On RPAREN reduce production pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER IDENT 
-- On EQUAL reduce production pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER IDENT 
-- On COMMA reduce production pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER IDENT 

State 459:
pat -> IDENT . [ RPAREN EQUAL COMMA ]
-- On RPAREN reduce production pat -> IDENT 
-- On EQUAL reduce production pat -> IDENT 
-- On COMMA reduce production pat -> IDENT 

State 460:
optsnlist(COMMA,pat) -> pat . [ RPAREN ]
optsnlist(COMMA,pat) -> pat . COMMA [ RPAREN ]
optsnlist(COMMA,pat) -> pat . COMMA optsnlist(COMMA,pat) [ RPAREN ]
-- On COMMA shift to state 461
-- On RPAREN reduce production optsnlist(COMMA,pat) -> pat 

State 461:
optsnlist(COMMA,pat) -> pat COMMA . [ RPAREN ]
optsnlist(COMMA,pat) -> pat COMMA . optsnlist(COMMA,pat) [ RPAREN ]
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IDENT shift to state 459
-- On pat shift to state 460
-- On optsnlist(COMMA,pat) shift to state 462
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On RPAREN reduce production optsnlist(COMMA,pat) -> pat COMMA 

State 462:
optsnlist(COMMA,pat) -> pat COMMA optsnlist(COMMA,pat) . [ RPAREN ]
-- On RPAREN reduce production optsnlist(COMMA,pat) -> pat COMMA optsnlist(COMMA,pat) 

State 463:
pat -> adelim_slist(COMMA,LPAREN,RPAREN,pat) . [ RPAREN EQUAL COMMA ]
-- On RPAREN reduce production pat -> adelim_slist(COMMA,LPAREN,RPAREN,pat) 
-- On EQUAL reduce production pat -> adelim_slist(COMMA,LPAREN,RPAREN,pat) 
-- On COMMA reduce production pat -> adelim_slist(COMMA,LPAREN,RPAREN,pat) 

State 464:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) . RPAREN [ RPAREN EQUAL COMMA ]
-- On RPAREN shift to state 465

State 465:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) RPAREN . [ RPAREN EQUAL COMMA ]
-- On RPAREN reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) RPAREN 
-- On EQUAL reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) RPAREN 
-- On COMMA reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) RPAREN 

State 466:
_equ -> IF . exp THEN sblock(IN) ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 467
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 467:
_equ -> IF exp . THEN sblock(IN) ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On THEN shift to state 468
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 468:
_equ -> IF exp THEN . sblock(IN) ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 507
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On ELSE reduce production equs -> 

State 469:
_equ -> DO . sblock(IN) DONE [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 504
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On DONE reduce production equs -> 

State 470:
_equ -> AUTOMATON . automaton_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On STATE shift to state 471
-- On automaton_handlers shift to state 500
-- On automaton_handler shift to state 503

State 471:
automaton_handler -> STATE . Constructor block(DO) opt_until_escapes opt_unless_escapes [ STATE END ]
-- On Constructor shift to state 472

State 472:
automaton_handler -> STATE Constructor . block(DO) opt_until_escapes opt_unless_escapes [ STATE END ]
-- On VAR shift to state 439
-- On DO shift to state 473
-- On block(DO) shift to state 483

State 473:
block(DO) -> DO . equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 478
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On UNTIL reduce production equs -> 
-- On UNLESS reduce production equs -> 
-- On STATE reduce production equs -> 
-- On END reduce production equs -> 
-- On DEFAULT reduce production equs -> 
-- On BAR reduce production equs -> 

State 474:
_equ -> pat . EQUAL exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On EQUAL shift to state 475

State 475:
_equ -> pat EQUAL . exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 476
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 476:
_equ -> pat EQUAL exp . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On UNTIL reduce production _equ -> pat EQUAL exp 
-- On UNLESS reduce production _equ -> pat EQUAL exp 
-- On TEL reduce production _equ -> pat EQUAL exp 
-- On STATE reduce production _equ -> pat EQUAL exp 
-- On SEMICOL reduce production _equ -> pat EQUAL exp 
-- On EVERY reduce production _equ -> pat EQUAL exp 
-- On END reduce production _equ -> pat EQUAL exp 
-- On ELSE reduce production _equ -> pat EQUAL exp 
-- On DONE reduce production _equ -> pat EQUAL exp 
-- On DEFAULT reduce production _equ -> pat EQUAL exp 
-- On BAR reduce production _equ -> pat EQUAL exp 

State 477:
equs -> optsnlist(SEMICOL,equ) . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production equs -> optsnlist(SEMICOL,equ) 
-- On UNLESS reduce production equs -> optsnlist(SEMICOL,equ) 
-- On TEL reduce production equs -> optsnlist(SEMICOL,equ) 
-- On STATE reduce production equs -> optsnlist(SEMICOL,equ) 
-- On EVERY reduce production equs -> optsnlist(SEMICOL,equ) 
-- On END reduce production equs -> optsnlist(SEMICOL,equ) 
-- On ELSE reduce production equs -> optsnlist(SEMICOL,equ) 
-- On DONE reduce production equs -> optsnlist(SEMICOL,equ) 
-- On DEFAULT reduce production equs -> optsnlist(SEMICOL,equ) 
-- On BAR reduce production equs -> optsnlist(SEMICOL,equ) 

State 478:
block(DO) -> DO equs . [ UNTIL UNLESS STATE END DEFAULT BAR ]
-- On UNTIL reduce production block(DO) -> DO equs 
-- On UNLESS reduce production block(DO) -> DO equs 
-- On STATE reduce production block(DO) -> DO equs 
-- On END reduce production block(DO) -> DO equs 
-- On DEFAULT reduce production block(DO) -> DO equs 
-- On BAR reduce production block(DO) -> DO equs 

State 479:
optsnlist(SEMICOL,equ) -> equ . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
optsnlist(SEMICOL,equ) -> equ . SEMICOL [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
optsnlist(SEMICOL,equ) -> equ . SEMICOL optsnlist(SEMICOL,equ) [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
-- On SEMICOL shift to state 480
-- On UNTIL reduce production optsnlist(SEMICOL,equ) -> equ 
-- On UNLESS reduce production optsnlist(SEMICOL,equ) -> equ 
-- On TEL reduce production optsnlist(SEMICOL,equ) -> equ 
-- On STATE reduce production optsnlist(SEMICOL,equ) -> equ 
-- On EVERY reduce production optsnlist(SEMICOL,equ) -> equ 
-- On END reduce production optsnlist(SEMICOL,equ) -> equ 
-- On ELSE reduce production optsnlist(SEMICOL,equ) -> equ 
-- On DONE reduce production optsnlist(SEMICOL,equ) -> equ 
-- On DEFAULT reduce production optsnlist(SEMICOL,equ) -> equ 
-- On BAR reduce production optsnlist(SEMICOL,equ) -> equ 

State 480:
optsnlist(SEMICOL,equ) -> equ SEMICOL . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
optsnlist(SEMICOL,equ) -> equ SEMICOL . optsnlist(SEMICOL,equ) [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 481
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On UNTIL reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On UNLESS reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On TEL reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On STATE reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On EVERY reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On END reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On ELSE reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On DONE reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On DEFAULT reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 
-- On BAR reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL 

State 481:
optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On UNLESS reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On TEL reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On STATE reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On EVERY reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On END reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On ELSE reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On DONE reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On DEFAULT reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 
-- On BAR reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) 

State 482:
equ -> _equ . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production equ -> _equ 
-- On UNLESS reduce production equ -> _equ 
-- On TEL reduce production equ -> _equ 
-- On STATE reduce production equ -> _equ 
-- On SEMICOL reduce production equ -> _equ 
-- On EVERY reduce production equ -> _equ 
-- On END reduce production equ -> _equ 
-- On ELSE reduce production equ -> _equ 
-- On DONE reduce production equ -> _equ 
-- On DEFAULT reduce production equ -> _equ 
-- On BAR reduce production equ -> _equ 

State 483:
automaton_handler -> STATE Constructor block(DO) . opt_until_escapes opt_unless_escapes [ STATE END ]
-- On UNTIL shift to state 484
-- On opt_until_escapes shift to state 495
-- On UNLESS reduce production opt_until_escapes -> 
-- On STATE reduce production opt_until_escapes -> 
-- On END reduce production opt_until_escapes -> 

State 484:
opt_until_escapes -> UNTIL . opt_bar escapes [ UNLESS STATE END ]
-- On BAR shift to state 432
-- On opt_bar shift to state 485
-- On SUBTRACTIVE reduce production opt_bar -> 
-- On STRING reduce production opt_bar -> 
-- On SPLIT reduce production opt_bar -> 
-- On REINIT reduce production opt_bar -> 
-- On PREFIX reduce production opt_bar -> 
-- On PRE reduce production opt_bar -> 
-- On NOT reduce production opt_bar -> 
-- On MERGE reduce production opt_bar -> 
-- On MAPI reduce production opt_bar -> 
-- On MAPFOLD reduce production opt_bar -> 
-- On MAP reduce production opt_bar -> 
-- On LPAREN reduce production opt_bar -> 
-- On LBRACKET reduce production opt_bar -> 
-- On LBRACE reduce production opt_bar -> 
-- On LAST reduce production opt_bar -> 
-- On INT reduce production opt_bar -> 
-- On INLINED reduce production opt_bar -> 
-- On IF reduce production opt_bar -> 
-- On IDENT reduce production opt_bar -> 
-- On FOLDI reduce production opt_bar -> 
-- On FOLD reduce production opt_bar -> 
-- On FLOAT reduce production opt_bar -> 
-- On Constructor reduce production opt_bar -> 
-- On BOOL reduce production opt_bar -> 

State 485:
opt_until_escapes -> UNTIL opt_bar . escapes [ UNLESS STATE END ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 486
-- On escapes shift to state 491
-- On escape shift to state 494
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 486:
_exp -> exp . INFIX4 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
escape -> exp . THEN Constructor [ UNLESS STATE END BAR ]
escape -> exp . CONTINUE Constructor [ UNLESS STATE END BAR ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On THEN shift to state 487
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On CONTINUE shift to state 489
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136

State 487:
escape -> exp THEN . Constructor [ UNLESS STATE END BAR ]
-- On Constructor shift to state 488

State 488:
escape -> exp THEN Constructor . [ UNLESS STATE END BAR ]
-- On UNLESS reduce production escape -> exp THEN Constructor 
-- On STATE reduce production escape -> exp THEN Constructor 
-- On END reduce production escape -> exp THEN Constructor 
-- On BAR reduce production escape -> exp THEN Constructor 

State 489:
escape -> exp CONTINUE . Constructor [ UNLESS STATE END BAR ]
-- On Constructor shift to state 490

State 490:
escape -> exp CONTINUE Constructor . [ UNLESS STATE END BAR ]
-- On UNLESS reduce production escape -> exp CONTINUE Constructor 
-- On STATE reduce production escape -> exp CONTINUE Constructor 
-- On END reduce production escape -> exp CONTINUE Constructor 
-- On BAR reduce production escape -> exp CONTINUE Constructor 

State 491:
escapes -> escapes . BAR escape [ UNLESS STATE END BAR ]
opt_until_escapes -> UNTIL opt_bar escapes . [ UNLESS STATE END ]
-- On BAR shift to state 492
-- On UNLESS reduce production opt_until_escapes -> UNTIL opt_bar escapes 
-- On STATE reduce production opt_until_escapes -> UNTIL opt_bar escapes 
-- On END reduce production opt_until_escapes -> UNTIL opt_bar escapes 

State 492:
escapes -> escapes BAR . escape [ UNLESS STATE END BAR ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 486
-- On escape shift to state 493
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 493:
escapes -> escapes BAR escape . [ UNLESS STATE END BAR ]
-- On UNLESS reduce production escapes -> escapes BAR escape 
-- On STATE reduce production escapes -> escapes BAR escape 
-- On END reduce production escapes -> escapes BAR escape 
-- On BAR reduce production escapes -> escapes BAR escape 

State 494:
escapes -> escape . [ UNLESS STATE END BAR ]
-- On UNLESS reduce production escapes -> escape 
-- On STATE reduce production escapes -> escape 
-- On END reduce production escapes -> escape 
-- On BAR reduce production escapes -> escape 

State 495:
automaton_handler -> STATE Constructor block(DO) opt_until_escapes . opt_unless_escapes [ STATE END ]
-- On UNLESS shift to state 496
-- On opt_unless_escapes shift to state 499
-- On STATE reduce production opt_unless_escapes -> 
-- On END reduce production opt_unless_escapes -> 

State 496:
opt_unless_escapes -> UNLESS . opt_bar escapes [ STATE END ]
-- On BAR shift to state 432
-- On opt_bar shift to state 497
-- On SUBTRACTIVE reduce production opt_bar -> 
-- On STRING reduce production opt_bar -> 
-- On SPLIT reduce production opt_bar -> 
-- On REINIT reduce production opt_bar -> 
-- On PREFIX reduce production opt_bar -> 
-- On PRE reduce production opt_bar -> 
-- On NOT reduce production opt_bar -> 
-- On MERGE reduce production opt_bar -> 
-- On MAPI reduce production opt_bar -> 
-- On MAPFOLD reduce production opt_bar -> 
-- On MAP reduce production opt_bar -> 
-- On LPAREN reduce production opt_bar -> 
-- On LBRACKET reduce production opt_bar -> 
-- On LBRACE reduce production opt_bar -> 
-- On LAST reduce production opt_bar -> 
-- On INT reduce production opt_bar -> 
-- On INLINED reduce production opt_bar -> 
-- On IF reduce production opt_bar -> 
-- On IDENT reduce production opt_bar -> 
-- On FOLDI reduce production opt_bar -> 
-- On FOLD reduce production opt_bar -> 
-- On FLOAT reduce production opt_bar -> 
-- On Constructor reduce production opt_bar -> 
-- On BOOL reduce production opt_bar -> 

State 497:
opt_unless_escapes -> UNLESS opt_bar . escapes [ STATE END ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 486
-- On escapes shift to state 498
-- On escape shift to state 494
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 498:
escapes -> escapes . BAR escape [ STATE END BAR ]
opt_unless_escapes -> UNLESS opt_bar escapes . [ STATE END ]
-- On BAR shift to state 492
-- On STATE reduce production opt_unless_escapes -> UNLESS opt_bar escapes 
-- On END reduce production opt_unless_escapes -> UNLESS opt_bar escapes 

State 499:
automaton_handler -> STATE Constructor block(DO) opt_until_escapes opt_unless_escapes . [ STATE END ]
-- On STATE reduce production automaton_handler -> STATE Constructor block(DO) opt_until_escapes opt_unless_escapes 
-- On END reduce production automaton_handler -> STATE Constructor block(DO) opt_until_escapes opt_unless_escapes 

State 500:
_equ -> AUTOMATON automaton_handlers . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
automaton_handlers -> automaton_handlers . automaton_handler [ STATE END ]
-- On STATE shift to state 471
-- On END shift to state 501
-- On automaton_handler shift to state 502

State 501:
_equ -> AUTOMATON automaton_handlers END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production _equ -> AUTOMATON automaton_handlers END 
-- On UNLESS reduce production _equ -> AUTOMATON automaton_handlers END 
-- On TEL reduce production _equ -> AUTOMATON automaton_handlers END 
-- On STATE reduce production _equ -> AUTOMATON automaton_handlers END 
-- On SEMICOL reduce production _equ -> AUTOMATON automaton_handlers END 
-- On EVERY reduce production _equ -> AUTOMATON automaton_handlers END 
-- On END reduce production _equ -> AUTOMATON automaton_handlers END 
-- On ELSE reduce production _equ -> AUTOMATON automaton_handlers END 
-- On DONE reduce production _equ -> AUTOMATON automaton_handlers END 
-- On DEFAULT reduce production _equ -> AUTOMATON automaton_handlers END 
-- On BAR reduce production _equ -> AUTOMATON automaton_handlers END 

State 502:
automaton_handlers -> automaton_handlers automaton_handler . [ STATE END ]
-- On STATE reduce production automaton_handlers -> automaton_handlers automaton_handler 
-- On END reduce production automaton_handlers -> automaton_handlers automaton_handler 

State 503:
automaton_handlers -> automaton_handler . [ STATE END ]
-- On STATE reduce production automaton_handlers -> automaton_handler 
-- On END reduce production automaton_handlers -> automaton_handler 

State 504:
_equ -> DO sblock(IN) . DONE [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On DONE shift to state 505

State 505:
_equ -> DO sblock(IN) DONE . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production _equ -> DO sblock(IN) DONE 
-- On UNLESS reduce production _equ -> DO sblock(IN) DONE 
-- On TEL reduce production _equ -> DO sblock(IN) DONE 
-- On STATE reduce production _equ -> DO sblock(IN) DONE 
-- On SEMICOL reduce production _equ -> DO sblock(IN) DONE 
-- On EVERY reduce production _equ -> DO sblock(IN) DONE 
-- On END reduce production _equ -> DO sblock(IN) DONE 
-- On ELSE reduce production _equ -> DO sblock(IN) DONE 
-- On DONE reduce production _equ -> DO sblock(IN) DONE 
-- On DEFAULT reduce production _equ -> DO sblock(IN) DONE 
-- On BAR reduce production _equ -> DO sblock(IN) DONE 

State 506:
sblock(IN) -> equs . [ EVERY END ELSE DONE ]
-- On EVERY reduce production sblock(IN) -> equs 
-- On END reduce production sblock(IN) -> equs 
-- On ELSE reduce production sblock(IN) -> equs 
-- On DONE reduce production sblock(IN) -> equs 

State 507:
_equ -> IF exp THEN sblock(IN) . ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On ELSE shift to state 508

State 508:
_equ -> IF exp THEN sblock(IN) ELSE . sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 509
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On END reduce production equs -> 

State 509:
_equ -> IF exp THEN sblock(IN) ELSE sblock(IN) . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On END shift to state 510

State 510:
_equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On UNLESS reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On TEL reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On STATE reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On SEMICOL reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On EVERY reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On END reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On ELSE reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On DONE reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On DEFAULT reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 
-- On BAR reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END 

State 511:
_equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On END shift to state 512

State 512:
_equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On UNTIL reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On UNLESS reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On TEL reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On STATE reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On SEMICOL reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On EVERY reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On END reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On ELSE reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On DONE reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On DEFAULT reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 
-- On BAR reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END 

State 513:
present_handlers -> present_handlers BAR . present_handler [ END DEFAULT BAR ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On present_handler shift to state 514
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 515
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 514:
present_handlers -> present_handlers BAR present_handler . [ END DEFAULT BAR ]
-- On END reduce production present_handlers -> present_handlers BAR present_handler 
-- On DEFAULT reduce production present_handlers -> present_handlers BAR present_handler 
-- On BAR reduce production present_handlers -> present_handlers BAR present_handler 

State 515:
_exp -> exp . INFIX4 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
present_handler -> exp . block(DO) [ END DEFAULT BAR ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On VAR shift to state 439
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On DO shift to state 473
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On block(DO) shift to state 516

State 516:
present_handler -> exp block(DO) . [ END DEFAULT BAR ]
-- On END reduce production present_handler -> exp block(DO) 
-- On DEFAULT reduce production present_handler -> exp block(DO) 
-- On BAR reduce production present_handler -> exp block(DO) 

State 517:
present_handlers -> present_handler . [ END DEFAULT BAR ]
-- On END reduce production present_handlers -> present_handler 
-- On DEFAULT reduce production present_handlers -> present_handler 
-- On BAR reduce production present_handlers -> present_handler 

State 518:
sblock(IN) -> VAR loc_params IN equs . [ EVERY END ELSE DONE ]
-- On EVERY reduce production sblock(IN) -> VAR loc_params IN equs 
-- On END reduce production sblock(IN) -> VAR loc_params IN equs 
-- On ELSE reduce production sblock(IN) -> VAR loc_params IN equs 
-- On DONE reduce production sblock(IN) -> VAR loc_params IN equs 

State 519:
_equ -> RESET sblock(IN) . EVERY exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On EVERY shift to state 520

State 520:
_equ -> RESET sblock(IN) EVERY . exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 521
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 521:
_equ -> RESET sblock(IN) EVERY exp . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On UNTIL reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On UNLESS reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On TEL reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On STATE reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On SEMICOL reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On EVERY reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On END reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On ELSE reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On DONE reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On DEFAULT reduce production _equ -> RESET sblock(IN) EVERY exp 
-- On BAR reduce production _equ -> RESET sblock(IN) EVERY exp 

State 522:
block(DO) -> VAR loc_params DO equs . [ UNTIL UNLESS STATE END DEFAULT BAR ]
-- On UNTIL reduce production block(DO) -> VAR loc_params DO equs 
-- On UNLESS reduce production block(DO) -> VAR loc_params DO equs 
-- On STATE reduce production block(DO) -> VAR loc_params DO equs 
-- On END reduce production block(DO) -> VAR loc_params DO equs 
-- On DEFAULT reduce production block(DO) -> VAR loc_params DO equs 
-- On BAR reduce production block(DO) -> VAR loc_params DO equs 

State 523:
switch_handler -> constructor_or_bool block(DO) . [ END BAR ]
-- On END reduce production switch_handler -> constructor_or_bool block(DO) 
-- On BAR reduce production switch_handler -> constructor_or_bool block(DO) 

State 524:
switch_handlers -> switch_handler . [ END BAR ]
-- On END reduce production switch_handlers -> switch_handler 
-- On BAR reduce production switch_handlers -> switch_handler 

State 525:
block(LET) -> VAR loc_params LET equs . [ TEL ]
-- On TEL reduce production block(LET) -> VAR loc_params LET equs 

State 526:
block(LET) -> LET . equs [ TEL ]
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 527
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
-- On TEL reduce production equs -> 

State 527:
block(LET) -> LET equs . [ TEL ]
-- On TEL reduce production block(LET) -> LET equs 

State 528:
contract -> CONTRACT opt_block . opt_assume nonempty_list(objective) opt_with [ VAR LET ]
-- On ASSUME shift to state 529
-- On opt_assume shift to state 531
-- On REACHABLE reduce production opt_assume -> 
-- On ENFORCE reduce production opt_assume -> 
-- On ATTRACTIVE reduce production opt_assume -> 

State 529:
opt_assume -> ASSUME . exp [ REACHABLE ENFORCE ATTRACTIVE ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 530
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 530:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
opt_assume -> ASSUME exp . [ REACHABLE ENFORCE ATTRACTIVE ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On REACHABLE reduce production opt_assume -> ASSUME exp 
-- On ENFORCE reduce production opt_assume -> ASSUME exp 
-- On ATTRACTIVE reduce production opt_assume -> ASSUME exp 

State 531:
contract -> CONTRACT opt_block opt_assume . nonempty_list(objective) opt_with [ VAR LET ]
-- On REACHABLE shift to state 532
-- On ENFORCE shift to state 533
-- On ATTRACTIVE shift to state 534
-- On objective_kind shift to state 535
-- On objective shift to state 537
-- On nonempty_list(objective) shift to state 539

State 532:
objective_kind -> REACHABLE . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
-- On SUBTRACTIVE reduce production objective_kind -> REACHABLE 
-- On STRING reduce production objective_kind -> REACHABLE 
-- On SPLIT reduce production objective_kind -> REACHABLE 
-- On REINIT reduce production objective_kind -> REACHABLE 
-- On PREFIX reduce production objective_kind -> REACHABLE 
-- On PRE reduce production objective_kind -> REACHABLE 
-- On NOT reduce production objective_kind -> REACHABLE 
-- On MERGE reduce production objective_kind -> REACHABLE 
-- On MAPI reduce production objective_kind -> REACHABLE 
-- On MAPFOLD reduce production objective_kind -> REACHABLE 
-- On MAP reduce production objective_kind -> REACHABLE 
-- On LPAREN reduce production objective_kind -> REACHABLE 
-- On LBRACKET reduce production objective_kind -> REACHABLE 
-- On LBRACE reduce production objective_kind -> REACHABLE 
-- On LAST reduce production objective_kind -> REACHABLE 
-- On INT reduce production objective_kind -> REACHABLE 
-- On INLINED reduce production objective_kind -> REACHABLE 
-- On IF reduce production objective_kind -> REACHABLE 
-- On IDENT reduce production objective_kind -> REACHABLE 
-- On FOLDI reduce production objective_kind -> REACHABLE 
-- On FOLD reduce production objective_kind -> REACHABLE 
-- On FLOAT reduce production objective_kind -> REACHABLE 
-- On Constructor reduce production objective_kind -> REACHABLE 
-- On BOOL reduce production objective_kind -> REACHABLE 

State 533:
objective_kind -> ENFORCE . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
-- On SUBTRACTIVE reduce production objective_kind -> ENFORCE 
-- On STRING reduce production objective_kind -> ENFORCE 
-- On SPLIT reduce production objective_kind -> ENFORCE 
-- On REINIT reduce production objective_kind -> ENFORCE 
-- On PREFIX reduce production objective_kind -> ENFORCE 
-- On PRE reduce production objective_kind -> ENFORCE 
-- On NOT reduce production objective_kind -> ENFORCE 
-- On MERGE reduce production objective_kind -> ENFORCE 
-- On MAPI reduce production objective_kind -> ENFORCE 
-- On MAPFOLD reduce production objective_kind -> ENFORCE 
-- On MAP reduce production objective_kind -> ENFORCE 
-- On LPAREN reduce production objective_kind -> ENFORCE 
-- On LBRACKET reduce production objective_kind -> ENFORCE 
-- On LBRACE reduce production objective_kind -> ENFORCE 
-- On LAST reduce production objective_kind -> ENFORCE 
-- On INT reduce production objective_kind -> ENFORCE 
-- On INLINED reduce production objective_kind -> ENFORCE 
-- On IF reduce production objective_kind -> ENFORCE 
-- On IDENT reduce production objective_kind -> ENFORCE 
-- On FOLDI reduce production objective_kind -> ENFORCE 
-- On FOLD reduce production objective_kind -> ENFORCE 
-- On FLOAT reduce production objective_kind -> ENFORCE 
-- On Constructor reduce production objective_kind -> ENFORCE 
-- On BOOL reduce production objective_kind -> ENFORCE 

State 534:
objective_kind -> ATTRACTIVE . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
-- On SUBTRACTIVE reduce production objective_kind -> ATTRACTIVE 
-- On STRING reduce production objective_kind -> ATTRACTIVE 
-- On SPLIT reduce production objective_kind -> ATTRACTIVE 
-- On REINIT reduce production objective_kind -> ATTRACTIVE 
-- On PREFIX reduce production objective_kind -> ATTRACTIVE 
-- On PRE reduce production objective_kind -> ATTRACTIVE 
-- On NOT reduce production objective_kind -> ATTRACTIVE 
-- On MERGE reduce production objective_kind -> ATTRACTIVE 
-- On MAPI reduce production objective_kind -> ATTRACTIVE 
-- On MAPFOLD reduce production objective_kind -> ATTRACTIVE 
-- On MAP reduce production objective_kind -> ATTRACTIVE 
-- On LPAREN reduce production objective_kind -> ATTRACTIVE 
-- On LBRACKET reduce production objective_kind -> ATTRACTIVE 
-- On LBRACE reduce production objective_kind -> ATTRACTIVE 
-- On LAST reduce production objective_kind -> ATTRACTIVE 
-- On INT reduce production objective_kind -> ATTRACTIVE 
-- On INLINED reduce production objective_kind -> ATTRACTIVE 
-- On IF reduce production objective_kind -> ATTRACTIVE 
-- On IDENT reduce production objective_kind -> ATTRACTIVE 
-- On FOLDI reduce production objective_kind -> ATTRACTIVE 
-- On FOLD reduce production objective_kind -> ATTRACTIVE 
-- On FLOAT reduce production objective_kind -> ATTRACTIVE 
-- On Constructor reduce production objective_kind -> ATTRACTIVE 
-- On BOOL reduce production objective_kind -> ATTRACTIVE 

State 535:
objective -> objective_kind . exp [ WITH VAR REACHABLE LET ENFORCE ATTRACTIVE ]
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 536
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123

State 536:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
objective -> objective_kind exp . [ WITH VAR REACHABLE LET ENFORCE ATTRACTIVE ]
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On WITH reduce production objective -> objective_kind exp 
-- On VAR reduce production objective -> objective_kind exp 
-- On REACHABLE reduce production objective -> objective_kind exp 
-- On LET reduce production objective -> objective_kind exp 
-- On ENFORCE reduce production objective -> objective_kind exp 
-- On ATTRACTIVE reduce production objective -> objective_kind exp 

State 537:
nonempty_list(objective) -> objective . [ WITH VAR LET ]
nonempty_list(objective) -> objective . nonempty_list(objective) [ WITH VAR LET ]
-- On REACHABLE shift to state 532
-- On ENFORCE shift to state 533
-- On ATTRACTIVE shift to state 534
-- On objective_kind shift to state 535
-- On objective shift to state 537
-- On nonempty_list(objective) shift to state 538
-- On WITH reduce production nonempty_list(objective) -> objective 
-- On VAR reduce production nonempty_list(objective) -> objective 
-- On LET reduce production nonempty_list(objective) -> objective 

State 538:
nonempty_list(objective) -> objective nonempty_list(objective) . [ WITH VAR LET ]
-- On WITH reduce production nonempty_list(objective) -> objective nonempty_list(objective) 
-- On VAR reduce production nonempty_list(objective) -> objective nonempty_list(objective) 
-- On LET reduce production nonempty_list(objective) -> objective nonempty_list(objective) 

State 539:
contract -> CONTRACT opt_block opt_assume nonempty_list(objective) . opt_with [ VAR LET ]
-- On WITH shift to state 540
-- On opt_with shift to state 544
-- On VAR reduce production opt_with -> 
-- On LET reduce production opt_with -> 

State 540:
opt_with -> WITH . LPAREN params RPAREN [ VAR LET ]
-- On LPAREN shift to state 541

State 541:
opt_with -> WITH LPAREN . params RPAREN [ VAR LET ]
-- On IDENT shift to state 328
-- On params shift to state 542
-- On param shift to state 331
-- On nonmt_params shift to state 400
-- On ident_list shift to state 334
-- On RPAREN reduce production params -> 

State 542:
opt_with -> WITH LPAREN params . RPAREN [ VAR LET ]
-- On RPAREN shift to state 543

State 543:
opt_with -> WITH LPAREN params RPAREN . [ VAR LET ]
-- On VAR reduce production opt_with -> WITH LPAREN params RPAREN 
-- On LET reduce production opt_with -> WITH LPAREN params RPAREN 

State 544:
contract -> CONTRACT opt_block opt_assume nonempty_list(objective) opt_with . [ VAR LET ]
-- On VAR reduce production contract -> CONTRACT opt_block opt_assume nonempty_list(objective) opt_with 
-- On LET reduce production contract -> CONTRACT opt_block opt_assume nonempty_list(objective) opt_with 

State 545:
opt_block -> block(LET) . TEL [ REACHABLE ENFORCE ATTRACTIVE ASSUME ]
-- On TEL shift to state 546

State 546:
opt_block -> block(LET) TEL . [ REACHABLE ENFORCE ATTRACTIVE ASSUME ]
-- On REACHABLE reduce production opt_block -> block(LET) TEL 
-- On ENFORCE reduce production opt_block -> block(LET) TEL 
-- On ATTRACTIVE reduce production opt_block -> block(LET) TEL 
-- On ASSUME reduce production opt_block -> block(LET) TEL 

State 547:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract . block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On VAR shift to state 424
-- On LET shift to state 526
-- On block(LET) shift to state 548

State 548:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) . TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On TEL shift to state 549

State 549:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL . opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On SEMICOL shift to state 421
-- On opt_semicolon shift to state 550
-- On UNSAFE reduce production opt_semicolon -> 
-- On TYPE reduce production opt_semicolon -> 
-- On PRAGMA reduce production opt_semicolon -> 
-- On NODE reduce production opt_semicolon -> 
-- On FUN reduce production opt_semicolon -> 
-- On EOF reduce production opt_semicolon -> 
-- On CONST reduce production opt_semicolon -> 

State 550:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On UNSAFE reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon 
-- On TYPE reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon 
-- On PRAGMA reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon 
-- On NODE reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon 
-- On FUN reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon 
-- On EOF reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon 
-- On CONST reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon 

State 551:
out_params -> nonmt_out_params . [ RPAREN ]
-- On RPAREN reduce production out_params -> nonmt_out_params 

State 552:
program_desc -> type_dec . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On UNSAFE reduce production program_desc -> type_dec 
-- On TYPE reduce production program_desc -> type_dec 
-- On PRAGMA reduce production program_desc -> type_dec 
-- On NODE reduce production program_desc -> type_dec 
-- On FUN reduce production program_desc -> type_dec 
-- On EOF reduce production program_desc -> type_dec 
-- On CONST reduce production program_desc -> type_dec 

State 553:
list(program_desc) -> program_desc . list(program_desc) [ EOF ]
-- On UNSAFE shift to state 319
-- On TYPE shift to state 9
-- On PRAGMA shift to state 393
-- On CONST shift to state 307
-- On unsafe shift to state 394
-- On type_dec shift to state 552
-- On program_desc shift to state 553
-- On node_dec shift to state 554
-- On list(program_desc) shift to state 555
-- On const_dec shift to state 556
-- On NODE reduce production unsafe -> 
-- On FUN reduce production unsafe -> 
-- On EOF reduce production list(program_desc) -> 

State 554:
program_desc -> node_dec . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On UNSAFE reduce production program_desc -> node_dec 
-- On TYPE reduce production program_desc -> node_dec 
-- On PRAGMA reduce production program_desc -> node_dec 
-- On NODE reduce production program_desc -> node_dec 
-- On FUN reduce production program_desc -> node_dec 
-- On EOF reduce production program_desc -> node_dec 
-- On CONST reduce production program_desc -> node_dec 

State 555:
list(program_desc) -> program_desc list(program_desc) . [ EOF ]
-- On EOF reduce production list(program_desc) -> program_desc list(program_desc) 

State 556:
program_desc -> const_dec . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
-- On UNSAFE reduce production program_desc -> const_dec 
-- On TYPE reduce production program_desc -> const_dec 
-- On PRAGMA reduce production program_desc -> const_dec 
-- On NODE reduce production program_desc -> const_dec 
-- On FUN reduce production program_desc -> const_dec 
-- On EOF reduce production program_desc -> const_dec 
-- On CONST reduce production program_desc -> const_dec 

State 557:
program -> list(opens) list(program_desc) . EOF [ # ]
-- On EOF shift to state 558

State 558:
program -> list(opens) list(program_desc) EOF . [ # ]
-- On # reduce production program -> list(opens) list(program_desc) EOF 

